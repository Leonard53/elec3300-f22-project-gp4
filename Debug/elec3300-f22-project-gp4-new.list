
elec3300-f22-project-gp4-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dfc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d50  08009fe8  08009fe8  00019fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad38  0800ad38  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad38  0800ad38  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad38  0800ad38  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800ad40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000218  0800af54  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800af54  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141d8  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003053  00000000  00000000  00034415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c95b  00000000  00000000  00037468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  00043dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a30  00000000  00000000  00044848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5a1  00000000  00000000  00047278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dc7  00000000  00000000  00062819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c2bd  00000000  00000000  000795e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011589d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003950  00000000  00000000  001158f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000218 	.word	0x20000218
 8000204:	00000000 	.word	0x00000000
 8000208:	08009fcc 	.word	0x08009fcc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000021c 	.word	0x2000021c
 8000224:	08009fcc 	.word	0x08009fcc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <HueToRGB565>:
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);

uint16_t HueToRGB565(uint8_t hue) {
    uint16_t portion = hue * 6;
 8000cb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000cb4:	0040      	lsls	r0, r0, #1

    if (portion < 256) { // 0 <= degree < 60
 8000cb6:	28ff      	cmp	r0, #255	; 0xff
uint16_t HueToRGB565(uint8_t hue) {
 8000cb8:	b508      	push	{r3, lr}
    if (portion < 256) { // 0 <= degree < 60
 8000cba:	d932      	bls.n	8000d22 <HueToRGB565+0x72>
        return RED + ((int) (portion / 256.0 * 64) << 5);
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8000cbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000cc0:	d31a      	bcc.n	8000cf8 <HueToRGB565+0x48>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8000cc2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8000cc6:	d351      	bcc.n	8000d6c <HueToRGB565+0xbc>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8000cc8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000ccc:	d33a      	bcc.n	8000d44 <HueToRGB565+0x94>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8000cce:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8000cd2:	d25d      	bcs.n	8000d90 <HueToRGB565+0xe0>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8000cd4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000cd8:	f7ff fc00 	bl	80004dc <__aeabi_i2d>
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <HueToRGB565+0x110>)
 8000ce0:	f7ff fc66 	bl	80005b0 <__aeabi_dmul>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HueToRGB565+0x114>)
 8000ce8:	f7ff fc62 	bl	80005b0 <__aeabi_dmul>
 8000cec:	f7ff ff10 	bl	8000b10 <__aeabi_d2iz>
 8000cf0:	02c0      	lsls	r0, r0, #11
 8000cf2:	301f      	adds	r0, #31
 8000cf4:	b280      	uxth	r0, r0
    } else if (portion < 256 * 6) { // 300 <= degree < 360
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
    }
}
 8000cf6:	bd08      	pop	{r3, pc}
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8000cf8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000cfc:	f7ff fbee 	bl	80004dc <__aeabi_i2d>
 8000d00:	2200      	movs	r2, #0
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HueToRGB565+0x110>)
 8000d04:	f7ff fc54 	bl	80005b0 <__aeabi_dmul>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HueToRGB565+0x114>)
 8000d0c:	f7ff fc50 	bl	80005b0 <__aeabi_dmul>
 8000d10:	f7ff fefe 	bl	8000b10 <__aeabi_d2iz>
 8000d14:	f1c0 001f 	rsb	r0, r0, #31
 8000d18:	02c0      	lsls	r0, r0, #11
 8000d1a:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000d1e:	b280      	uxth	r0, r0
}
 8000d20:	bd08      	pop	{r3, pc}
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8000d22:	f7ff fbdb 	bl	80004dc <__aeabi_i2d>
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HueToRGB565+0x110>)
 8000d2a:	f7ff fc41 	bl	80005b0 <__aeabi_dmul>
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HueToRGB565+0x118>)
 8000d32:	f7ff fc3d 	bl	80005b0 <__aeabi_dmul>
 8000d36:	f7ff feeb 	bl	8000b10 <__aeabi_d2iz>
 8000d3a:	0140      	lsls	r0, r0, #5
 8000d3c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000d40:	b280      	uxth	r0, r0
}
 8000d42:	bd08      	pop	{r3, pc}
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8000d44:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8000d48:	f7ff fbc8 	bl	80004dc <__aeabi_i2d>
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HueToRGB565+0x110>)
 8000d50:	f7ff fc2e 	bl	80005b0 <__aeabi_dmul>
 8000d54:	2200      	movs	r2, #0
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HueToRGB565+0x118>)
 8000d58:	f7ff fc2a 	bl	80005b0 <__aeabi_dmul>
 8000d5c:	f7ff fed8 	bl	8000b10 <__aeabi_d2iz>
 8000d60:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8000d64:	0140      	lsls	r0, r0, #5
 8000d66:	301f      	adds	r0, #31
 8000d68:	b280      	uxth	r0, r0
}
 8000d6a:	bd08      	pop	{r3, pc}
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8000d6c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8000d70:	f7ff fbb4 	bl	80004dc <__aeabi_i2d>
 8000d74:	2200      	movs	r2, #0
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HueToRGB565+0x110>)
 8000d78:	f7ff fc1a 	bl	80005b0 <__aeabi_dmul>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HueToRGB565+0x114>)
 8000d80:	f7ff fc16 	bl	80005b0 <__aeabi_dmul>
 8000d84:	f7ff fec4 	bl	8000b10 <__aeabi_d2iz>
 8000d88:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000d8c:	b280      	uxth	r0, r0
}
 8000d8e:	bd08      	pop	{r3, pc}
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8000d90:	f5a0 60a0 	sub.w	r0, r0, #1280	; 0x500
 8000d94:	f7ff fba2 	bl	80004dc <__aeabi_i2d>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HueToRGB565+0x110>)
 8000d9c:	f7ff fc08 	bl	80005b0 <__aeabi_dmul>
 8000da0:	2200      	movs	r2, #0
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HueToRGB565+0x114>)
 8000da4:	f7ff fc04 	bl	80005b0 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	2000      	movs	r0, #0
 8000dae:	4907      	ldr	r1, [pc, #28]	; (8000dcc <HueToRGB565+0x11c>)
 8000db0:	f7ff fa46 	bl	8000240 <__aeabi_dsub>
 8000db4:	f7ff feac 	bl	8000b10 <__aeabi_d2iz>
 8000db8:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000dbc:	b280      	uxth	r0, r0
}
 8000dbe:	bd08      	pop	{r3, pc}
 8000dc0:	3f700000 	.word	0x3f700000
 8000dc4:	40400000 	.word	0x40400000
 8000dc8:	40500000 	.word	0x40500000
 8000dcc:	403f0000 	.word	0x403f0000

08000dd0 <LCD_Rst>:
    LCD_REG_Config();
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
}


void LCD_Rst(void) {
 8000dd0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <LCD_Rst+0x24>)
 8000dd8:	f002 ff08 	bl	8003bec <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000dde:	3b01      	subs	r3, #1
 8000de0:	d1fd      	bne.n	8000dde <LCD_Rst+0xe>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2102      	movs	r1, #2
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <LCD_Rst+0x24>)
 8000de8:	f002 ff00 	bl	8003bec <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000dee:	3b01      	subs	r3, #1
 8000df0:	d1fd      	bne.n	8000dee <LCD_Rst+0x1e>
}
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	40011800 	.word	0x40011800
 8000df8:	0002bffc 	.word	0x0002bffc

08000dfc <LCD_REG_Config>:
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}


void LCD_Write_Cmd(uint16_t usCmd) {
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dfc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e00:	23cf      	movs	r3, #207	; 0xcf
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 8000e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e06:	2100      	movs	r1, #0
 8000e08:	2081      	movs	r0, #129	; 0x81
 8000e0a:	f04f 0c30 	mov.w	ip, #48	; 0x30
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e0e:	f04f 04ed 	mov.w	r4, #237	; 0xed
 8000e12:	8013      	strh	r3, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e14:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <LCD_REG_Config+0x1dc>)
 8000e16:	f04f 0803 	mov.w	r8, #3
 8000e1a:	8019      	strh	r1, [r3, #0]
 8000e1c:	8018      	strh	r0, [r3, #0]
 8000e1e:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e22:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e24:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000e28:	801c      	strh	r4, [r3, #0]
 8000e2a:	f04f 0412 	mov.w	r4, #18
 8000e2e:	f8a3 8000 	strh.w	r8, [r3]
 8000e32:	801c      	strh	r4, [r3, #0]
 8000e34:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e36:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000e3a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e3c:	f04f 0085 	mov.w	r0, #133	; 0x85
 8000e40:	f04f 0b10 	mov.w	fp, #16
 8000e44:	8018      	strh	r0, [r3, #0]
 8000e46:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000e4a:	f8a3 b000 	strh.w	fp, [r3]
 8000e4e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e50:	f04f 00cb 	mov.w	r0, #203	; 0xcb
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e54:	f04f 0939 	mov.w	r9, #57	; 0x39
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e58:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e5a:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000e5e:	f8a3 9000 	strh.w	r9, [r3]
 8000e62:	8018      	strh	r0, [r3, #0]
 8000e64:	f04f 0034 	mov.w	r0, #52	; 0x34
 8000e68:	8019      	strh	r1, [r3, #0]
 8000e6a:	8018      	strh	r0, [r3, #0]
 8000e6c:	f04f 0002 	mov.w	r0, #2
 8000e70:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e72:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 8000e76:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e78:	f04f 0020 	mov.w	r0, #32
 8000e7c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e7e:	f04f 00ea 	mov.w	r0, #234	; 0xea
 8000e82:	8010      	strh	r0, [r2, #0]
 8000e84:	f04f 00b1 	mov.w	r0, #177	; 0xb1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e88:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e8a:	f04f 04b6 	mov.w	r4, #182	; 0xb6
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e8e:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e90:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e92:	f04f 001b 	mov.w	r0, #27
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e9a:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e9c:	f04f 040a 	mov.w	r4, #10
 8000ea0:	801c      	strh	r4, [r3, #0]
 8000ea2:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 8000ea6:	801c      	strh	r4, [r3, #0]
 8000ea8:	4620      	mov	r0, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eaa:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 8000eae:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eb0:	f04f 0435 	mov.w	r4, #53	; 0x35
 8000eb4:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eb6:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 8000eba:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ebc:	f04f 0411 	mov.w	r4, #17
 8000ec0:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ec2:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 8000ec6:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ec8:	f04f 0445 	mov.w	r4, #69	; 0x45
 8000ecc:	801c      	strh	r4, [r3, #0]
 8000ece:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ed0:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 8000ed4:	8014      	strh	r4, [r2, #0]
 8000ed6:	f04f 04f2 	mov.w	r4, #242	; 0xf2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eda:	8018      	strh	r0, [r3, #0]
 8000edc:	2501      	movs	r5, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ede:	8014      	strh	r4, [r2, #0]
 8000ee0:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 8000ee4:	f04f 0426 	mov.w	r4, #38	; 0x26
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	270f      	movs	r7, #15
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eec:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eee:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ef0:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ef2:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000ef6:	801f      	strh	r7, [r3, #0]
 8000ef8:	801c      	strh	r4, [r3, #0]
 8000efa:	8018      	strh	r0, [r3, #0]
 8000efc:	f04f 000b 	mov.w	r0, #11
 8000f00:	8018      	strh	r0, [r3, #0]
 8000f02:	f04f 000e 	mov.w	r0, #14
 8000f06:	f04f 0409 	mov.w	r4, #9
 8000f0a:	8018      	strh	r0, [r3, #0]
 8000f0c:	f04f 0054 	mov.w	r0, #84	; 0x54
 8000f10:	801c      	strh	r4, [r3, #0]
 8000f12:	8018      	strh	r0, [r3, #0]
 8000f14:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000f18:	8018      	strh	r0, [r3, #0]
 8000f1a:	f04f 0046 	mov.w	r0, #70	; 0x46
 8000f1e:	8018      	strh	r0, [r3, #0]
 8000f20:	f04f 000c 	mov.w	r0, #12
 8000f24:	8018      	strh	r0, [r3, #0]
 8000f26:	f04f 0017 	mov.w	r0, #23
 8000f2a:	f04f 0a07 	mov.w	sl, #7
 8000f2e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f30:	f04f 00e1 	mov.w	r0, #225	; 0xe1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f34:	801c      	strh	r4, [r3, #0]
 8000f36:	801f      	strh	r7, [r3, #0]
 8000f38:	f8a3 a000 	strh.w	sl, [r3]
 8000f3c:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f3e:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f40:	f04f 0019 	mov.w	r0, #25
 8000f44:	8019      	strh	r1, [r3, #0]
 8000f46:	8018      	strh	r0, [r3, #0]
 8000f48:	f04f 001b 	mov.w	r0, #27
 8000f4c:	8018      	strh	r0, [r3, #0]
 8000f4e:	f04f 0004 	mov.w	r0, #4
 8000f52:	262a      	movs	r6, #42	; 0x2a
 8000f54:	8018      	strh	r0, [r3, #0]
 8000f56:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000f5a:	f8a3 b000 	strh.w	fp, [r3]
 8000f5e:	f04f 0e06 	mov.w	lr, #6
 8000f62:	f8a3 a000 	strh.w	sl, [r3]
 8000f66:	801e      	strh	r6, [r3, #0]
 8000f68:	8018      	strh	r0, [r3, #0]
 8000f6a:	f04f 0038 	mov.w	r0, #56	; 0x38
 8000f6e:	f8a3 9000 	strh.w	r9, [r3]
 8000f72:	f8a3 8000 	strh.w	r8, [r3]
 8000f76:	f8a3 e000 	strh.w	lr, [r3]
 8000f7a:	f8a3 e000 	strh.w	lr, [r3]
 8000f7e:	f8a3 c000 	strh.w	ip, [r3]
 8000f82:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f84:	f04f 0036 	mov.w	r0, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f88:	801f      	strh	r7, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f8a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f8c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000f90:	8018      	strh	r0, [r3, #0]
 8000f92:	f04f 00ef 	mov.w	r0, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f96:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f98:	8019      	strh	r1, [r3, #0]
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	8019      	strh	r1, [r3, #0]
 8000f9e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000fa0:	f04f 002b 	mov.w	r0, #43	; 0x2b
 8000fa4:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa6:	8019      	strh	r1, [r3, #0]
 8000fa8:	8019      	strh	r1, [r3, #0]
 8000faa:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8000fae:	801d      	strh	r5, [r3, #0]
 8000fb0:	f04f 0055 	mov.w	r0, #85	; 0x55
 8000fb4:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000fb6:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8000fba:	8011      	strh	r1, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fbc:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000fbe:	f04f 0311 	mov.w	r3, #17
 8000fc2:	4906      	ldr	r1, [pc, #24]	; (8000fdc <LCD_REG_Config+0x1e0>)
 8000fc4:	8013      	strh	r3, [r2, #0]
    for (; nCount != 0; nCount--);
 8000fc6:	3901      	subs	r1, #1
 8000fc8:	d1fd      	bne.n	8000fc6 <LCD_REG_Config+0x1ca>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000fca:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fce:	2229      	movs	r2, #41	; 0x29
 8000fd0:	801a      	strh	r2, [r3, #0]
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);

}
 8000fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd6:	bf00      	nop
 8000fd8:	60020000 	.word	0x60020000
 8000fdc:	0002bffc 	.word	0x0002bffc

08000fe0 <LCD_INIT>:
void LCD_INIT(void) {
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <LCD_INIT+0x54>)
 8000fea:	f002 fdff 	bl	8003bec <HAL_GPIO_WritePin>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000fee:	272a      	movs	r7, #42	; 0x2a
    LCD_Rst();
 8000ff0:	f7ff feee 	bl	8000dd0 <LCD_Rst>
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ff4:	26ef      	movs	r6, #239	; 0xef
    LCD_REG_Config();
 8000ff6:	f7ff ff01 	bl	8000dfc <LCD_REG_Config>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ffa:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ffc:	2100      	movs	r1, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ffe:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001002:	2401      	movs	r4, #1
 8001004:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001008:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800100c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <LCD_INIT+0x58>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001012:	8007      	strh	r7, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001014:	8011      	strh	r1, [r2, #0]
 8001016:	8011      	strh	r1, [r2, #0]
 8001018:	8011      	strh	r1, [r2, #0]
 800101a:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800101c:	8005      	strh	r5, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800101e:	8011      	strh	r1, [r2, #0]
 8001020:	8011      	strh	r1, [r2, #0]
 8001022:	8014      	strh	r4, [r2, #0]
 8001024:	f8a2 e000 	strh.w	lr, [r2]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001028:	f8a0 c000 	strh.w	ip, [r0]
    uint32_t i = 0;

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);

    for (i = 0; i < usPoint; i++)
 800102c:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800102e:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8001030:	d1fc      	bne.n	800102c <LCD_INIT+0x4c>
}
 8001032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001034:	40011400 	.word	0x40011400
 8001038:	60020000 	.word	0x60020000

0800103c <LCD_OpenWindow>:
void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 800103c:	b530      	push	{r4, r5, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800103e:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 8001042:	242a      	movs	r4, #42	; 0x2a
 8001044:	252b      	movs	r5, #43	; 0x2b
 8001046:	f8ae 4000 	strh.w	r4, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800104a:	4c11      	ldr	r4, [pc, #68]	; (8001090 <LCD_OpenWindow+0x54>)
    LCD_Write_Data(usCOLUMN >> 8);
 800104c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001050:	f8a4 c000 	strh.w	ip, [r4]
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001054:	eb00 0c02 	add.w	ip, r0, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001058:	3a01      	subs	r2, #1
 800105a:	4402      	add	r2, r0
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 800105c:	f10c 3cff 	add.w	ip, ip, #4294967295
    LCD_Write_Data(usCOLUMN & 0xff);
 8001060:	b2c0      	uxtb	r0, r0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001062:	8020      	strh	r0, [r4, #0]
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001064:	b2d2      	uxtb	r2, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001066:	f3cc 200f 	ubfx	r0, ip, #8, #16
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800106a:	8020      	strh	r0, [r4, #0]
 800106c:	8022      	strh	r2, [r4, #0]
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 800106e:	18ca      	adds	r2, r1, r3
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8001070:	3b01      	subs	r3, #1
 8001072:	440b      	add	r3, r1
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8001074:	3a01      	subs	r2, #1
    LCD_Write_Data(usPAGE >> 8);
 8001076:	0a08      	lsrs	r0, r1, #8
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8001078:	f3c2 220f 	ubfx	r2, r2, #8, #16
    LCD_Write_Data(usPAGE & 0xff);
 800107c:	b2c9      	uxtb	r1, r1
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 800107e:	b2db      	uxtb	r3, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001080:	f8ae 5000 	strh.w	r5, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001084:	8020      	strh	r0, [r4, #0]
 8001086:	8021      	strh	r1, [r4, #0]
 8001088:	8022      	strh	r2, [r4, #0]
 800108a:	8023      	strh	r3, [r4, #0]
}
 800108c:	bd30      	pop	{r4, r5, pc}
 800108e:	bf00      	nop
 8001090:	60020000 	.word	0x60020000

08001094 <LCD_Clear>:
        LCD_Write_Data(usColor);

}


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	461e      	mov	r6, r3
 8001098:	4614      	mov	r4, r2
 800109a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800109e:	f7ff ffcd 	bl	800103c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80010a2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010a6:	212c      	movs	r1, #44	; 0x2c

    LCD_FillColor(usWidth * usHeight, usColor);
 80010a8:	fb06 f404 	mul.w	r4, r6, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80010ac:	8019      	strh	r1, [r3, #0]
    for (i = 0; i < usPoint; i++)
 80010ae:	b12c      	cbz	r4, 80010bc <LCD_Clear+0x28>
 80010b0:	2300      	movs	r3, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80010b2:	4903      	ldr	r1, [pc, #12]	; (80010c0 <LCD_Clear+0x2c>)
    for (i = 0; i < usPoint; i++)
 80010b4:	3301      	adds	r3, #1
 80010b6:	429c      	cmp	r4, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80010b8:	800d      	strh	r5, [r1, #0]
    for (i = 0; i < usPoint; i++)
 80010ba:	d1fb      	bne.n	80010b4 <LCD_Clear+0x20>

}
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
 80010be:	bf00      	nop
 80010c0:	60020000 	.word	0x60020000

080010c4 <LCD_SetPinColor>:
			data[i].x = 70;
			data[i].y = 120 + (i - 4) * 40;
		}
}
void LCD_SetPinColor(struct YPinData *data, uint16_t color) {
	data->color = color;
 80010c4:	7101      	strb	r1, [r0, #4]
}
 80010c6:	4770      	bx	lr

080010c8 <LCD_PrintHeatMap>:
	return pow(data->x - x, 2) + pow(data->y - y, 2);
}

void LCD_PrintHeatMap(struct YPinData *data) {
	// Loop all pixels inside the rectangular heat map
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 80010c8:	8a43      	ldrh	r3, [r0, #18]
void LCD_PrintHeatMap(struct YPinData *data) {
 80010ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 80010ce:	3b14      	subs	r3, #20
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
void LCD_PrintHeatMap(struct YPinData *data) {
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	4602      	mov	r2, r0
 80010d8:	9004      	str	r0, [sp, #16]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 80010da:	8b00      	ldrh	r0, [r0, #24]
 80010dc:	9305      	str	r3, [sp, #20]
 80010de:	f100 0314 	add.w	r3, r0, #20
 80010e2:	4299      	cmp	r1, r3
 80010e4:	f300 80c8 	bgt.w	8001278 <LCD_PrintHeatMap+0x1b0>
 80010e8:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 80010ea:	9a04      	ldr	r2, [sp, #16]
 80010ec:	8a91      	ldrh	r1, [r2, #20]
 80010ee:	f103 0214 	add.w	r2, r3, #20
 80010f2:	3914      	subs	r1, #20
 80010f4:	b289      	uxth	r1, r1
 80010f6:	4291      	cmp	r1, r2
 80010f8:	9101      	str	r1, [sp, #4]
 80010fa:	f300 80b3 	bgt.w	8001264 <LCD_PrintHeatMap+0x19c>
			// Check if in safe circle and altered circle, -1 means not exist
			int8_t inSafeCircle = -1;
			int16_t distSqrInAlteredCircle[8] = {-1};
 80010fe:	2500      	movs	r5, #0
 8001100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001104:	9c04      	ldr	r4, [sp, #16]
 8001106:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800110a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800110e:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8001112:	f10d 0a18 	add.w	sl, sp, #24
 8001116:	f8ad 3018 	strh.w	r3, [sp, #24]
 800111a:	9402      	str	r4, [sp, #8]
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 800111c:	8820      	ldrh	r0, [r4, #0]

			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800111e:	3406      	adds	r4, #6
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 8001120:	eba0 000b 	sub.w	r0, r0, fp
 8001124:	f7ff f9da 	bl	80004dc <__aeabi_i2d>
 8001128:	9b01      	ldr	r3, [sp, #4]
 800112a:	4680      	mov	r8, r0
 800112c:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 8001130:	4689      	mov	r9, r1
 8001132:	1ac0      	subs	r0, r0, r3
 8001134:	f7ff f9d2 	bl	80004dc <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	f7ff fa38 	bl	80005b0 <__aeabi_dmul>
 8001140:	4642      	mov	r2, r8
 8001142:	4606      	mov	r6, r0
 8001144:	460f      	mov	r7, r1
 8001146:	464b      	mov	r3, r9
 8001148:	4640      	mov	r0, r8
 800114a:	4649      	mov	r1, r9
 800114c:	f7ff fa30 	bl	80005b0 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4630      	mov	r0, r6
 8001156:	4639      	mov	r1, r7
 8001158:	f7ff f874 	bl	8000244 <__adddf3>
 800115c:	f7ff fd00 	bl	8000b60 <__aeabi_d2uiz>
 8001160:	b280      	uxth	r0, r0
				uint16_t dist_sqr = LCD_DistSqr(&data[sensor], col, pag);
				if (dist_sqr <= 100) {
 8001162:	2864      	cmp	r0, #100	; 0x64
 8001164:	f240 808b 	bls.w	800127e <LCD_PrintHeatMap+0x1b6>
					inSafeCircle = sensor;
					break;
				} else if (dist_sqr <= 900) {
 8001168:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800116c:	f105 0501 	add.w	r5, r5, #1
					distSqrInAlteredCircle[sensor] = dist_sqr;
 8001170:	bf98      	it	ls
 8001172:	f8aa 0000 	strhls.w	r0, [sl]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001176:	2d08      	cmp	r5, #8
 8001178:	f10a 0a02 	add.w	sl, sl, #2
 800117c:	d1ce      	bne.n	800111c <LCD_PrintHeatMap+0x54>
 800117e:	2500      	movs	r5, #0
 8001180:	46a8      	mov	r8, r5
 8001182:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001186:	f10d 0416 	add.w	r4, sp, #22
 800118a:	f10d 0926 	add.w	r9, sp, #38	; 0x26
			}

			uint16_t distSqrSum = 0;
			uint16_t weightedHue = 0;
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
				if (distSqrInAlteredCircle[sensor] != -1) {
 800118e:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 8001192:	1c43      	adds	r3, r0, #1
 8001194:	d040      	beq.n	8001218 <LCD_PrintHeatMap+0x150>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 8001196:	f7ff f9a1 	bl	80004dc <__aeabi_i2d>
 800119a:	2200      	movs	r2, #0
 800119c:	2300      	movs	r3, #0
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	f7ff fc9f 	bl	8000ae4 <__aeabi_dcmpun>
 80011a6:	b938      	cbnz	r0, 80011b8 <LCD_PrintHeatMap+0xf0>
 80011a8:	2200      	movs	r2, #0
 80011aa:	2300      	movs	r3, #0
 80011ac:	4630      	mov	r0, r6
 80011ae:	4639      	mov	r1, r7
 80011b0:	f7ff fc84 	bl	8000abc <__aeabi_dcmpge>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d070      	beq.n	800129a <LCD_PrintHeatMap+0x1d2>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 80011b8:	4630      	mov	r0, r6
 80011ba:	4639      	mov	r1, r7
 80011bc:	f008 fbce 	bl	800995c <sqrt>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4640      	mov	r0, r8
 80011c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011ca:	f7ff f987 	bl	80004dc <__aeabi_i2d>
 80011ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d2:	f7ff f837 	bl	8000244 <__adddf3>
 80011d6:	f7ff fcc3 	bl	8000b60 <__aeabi_d2uiz>
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 80011da:	4639      	mov	r1, r7
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 80011dc:	4680      	mov	r8, r0
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 80011de:	4630      	mov	r0, r6
 80011e0:	f008 fbbc 	bl	800995c <sqrt>
 80011e4:	4606      	mov	r6, r0
 80011e6:	460f      	mov	r7, r1
 80011e8:	f89b 0004 	ldrb.w	r0, [fp, #4]
 80011ec:	f7ff f976 	bl	80004dc <__aeabi_i2d>
 80011f0:	4632      	mov	r2, r6
 80011f2:	463b      	mov	r3, r7
 80011f4:	f7ff f9dc 	bl	80005b0 <__aeabi_dmul>
 80011f8:	4606      	mov	r6, r0
 80011fa:	4628      	mov	r0, r5
 80011fc:	460f      	mov	r7, r1
 80011fe:	f7ff f96d 	bl	80004dc <__aeabi_i2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4630      	mov	r0, r6
 8001208:	4639      	mov	r1, r7
 800120a:	f7ff f81b 	bl	8000244 <__adddf3>
 800120e:	f7ff fca7 	bl	8000b60 <__aeabi_d2uiz>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 8001212:	fa1f f888 	uxth.w	r8, r8
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 8001216:	b285      	uxth	r5, r0
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001218:	45a1      	cmp	r9, r4
 800121a:	f10b 0b06 	add.w	fp, fp, #6
 800121e:	d1b6      	bne.n	800118e <LCD_PrintHeatMap+0xc6>
				}
			}

			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 8001220:	fbb5 f0f8 	udiv	r0, r5, r8
 8001224:	b2c0      	uxtb	r0, r0
 8001226:	f7ff fd43 	bl	8000cb0 <HueToRGB565>
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800122a:	9b05      	ldr	r3, [sp, #20]
			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 800122c:	4604      	mov	r4, r0
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800122e:	2bef      	cmp	r3, #239	; 0xef
 8001230:	d803      	bhi.n	800123a <LCD_PrintHeatMap+0x172>
 8001232:	9b01      	ldr	r3, [sp, #4]
 8001234:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001238:	d328      	bcc.n	800128c <LCD_PrintHeatMap+0x1c4>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800123a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800123e:	222c      	movs	r2, #44	; 0x2c
 8001240:	801a      	strh	r2, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001242:	9a01      	ldr	r2, [sp, #4]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001244:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001248:	3201      	adds	r2, #1
 800124a:	b292      	uxth	r2, r2
 800124c:	4611      	mov	r1, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800124e:	801c      	strh	r4, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001250:	9b04      	ldr	r3, [sp, #16]
 8001252:	9201      	str	r2, [sp, #4]
 8001254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001256:	f103 0214 	add.w	r2, r3, #20
 800125a:	4291      	cmp	r1, r2
 800125c:	f77f af4f 	ble.w	80010fe <LCD_PrintHeatMap+0x36>
 8001260:	9a04      	ldr	r2, [sp, #16]
 8001262:	8b10      	ldrh	r0, [r2, #24]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001264:	9a05      	ldr	r2, [sp, #20]
 8001266:	3201      	adds	r2, #1
 8001268:	b292      	uxth	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	9205      	str	r2, [sp, #20]
 800126e:	f100 0214 	add.w	r2, r0, #20
 8001272:	4291      	cmp	r1, r2
 8001274:	f77f af39 	ble.w	80010ea <LCD_PrintHeatMap+0x22>
		}
	}
}
 8001278:	b00b      	add	sp, #44	; 0x2c
 800127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LCD_DrawDot(col, pag, HueToRGB565(data[inSafeCircle].color));
 800127e:	9b04      	ldr	r3, [sp, #16]
 8001280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001284:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8001288:	7928      	ldrb	r0, [r5, #4]
 800128a:	e7cc      	b.n	8001226 <LCD_PrintHeatMap+0x15e>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 800128c:	2301      	movs	r3, #1
 800128e:	9901      	ldr	r1, [sp, #4]
 8001290:	461a      	mov	r2, r3
 8001292:	9805      	ldr	r0, [sp, #20]
 8001294:	f7ff fed2 	bl	800103c <LCD_OpenWindow>
 8001298:	e7cf      	b.n	800123a <LCD_PrintHeatMap+0x172>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 800129a:	4630      	mov	r0, r6
 800129c:	4639      	mov	r1, r7
 800129e:	f008 fb5d 	bl	800995c <sqrt>
 80012a2:	e789      	b.n	80011b8 <LCD_PrintHeatMap+0xf0>

080012a4 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	4616      	mov	r6, r2
 80012a8:	461c      	mov	r4, r3
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80012aa:	2208      	movs	r2, #8
 80012ac:	2310      	movs	r3, #16
                        uint16_t usColor_Foreground) {
 80012ae:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80012b2:	f7ff fec3 	bl	800103c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012b6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80012ba:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <LCD_DrawChar_Color+0x58>)
    ucRelativePositon = cChar - ' ';
 80012c0:	f1a6 0220 	sub.w	r2, r6, #32
 80012c4:	f103 0c10 	add.w	ip, r3, #16
 80012c8:	b2d2      	uxtb	r2, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <LCD_DrawChar_Color+0x5c>)
 80012cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80012d0:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012d4:	f8a1 e000 	strh.w	lr, [r1]

    LCD_Write_Cmd(CMD_SetPixel);

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 80012d8:	2208      	movs	r2, #8
 80012da:	f813 1b01 	ldrb.w	r1, [r3], #1

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
            if (ucTemp & 0x01)
 80012de:	07ce      	lsls	r6, r1, #31
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80012e0:	f102 32ff 	add.w	r2, r2, #4294967295
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012e4:	bf4c      	ite	mi
 80012e6:	8005      	strhmi	r5, [r0, #0]
 80012e8:	8004      	strhpl	r4, [r0, #0]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80012ea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                LCD_Write_Data(usColor_Foreground);

            else
                LCD_Write_Data(usColor_Background);

            ucTemp >>= 1;
 80012ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80012f2:	d1f4      	bne.n	80012de <LCD_DrawChar_Color+0x3a>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 80012f4:	4563      	cmp	r3, ip
 80012f6:	d1ef      	bne.n	80012d8 <LCD_DrawChar_Color+0x34>

        }

    }

}
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	bf00      	nop
 80012fc:	08009fe8 	.word	0x08009fe8
 8001300:	60020000 	.word	0x60020000

08001304 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4605      	mov	r5, r0
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 8001308:	380a      	subs	r0, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800130a:	2301      	movs	r3, #1
 800130c:	2214      	movs	r2, #20
 800130e:	b280      	uxth	r0, r0
void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001310:	460c      	mov	r4, r1
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001312:	f7ff fe93 	bl	800103c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001316:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800131a:	202c      	movs	r0, #44	; 0x2c
 800131c:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800131e:	f04f 3cff 	mov.w	ip, #4294967295
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001324:	8008      	strh	r0, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8001326:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001328:	f8a2 c000 	strh.w	ip, [r2]
    for (i = 0; i < usPoint; i++)
 800132c:	d1fb      	bne.n	8001326 <LCD_DrawCross+0x22>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 800132e:	f1a4 010a 	sub.w	r1, r4, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001332:	2314      	movs	r3, #20
 8001334:	2201      	movs	r2, #1
 8001336:	4628      	mov	r0, r5
 8001338:	b289      	uxth	r1, r1
 800133a:	f7ff fe7f 	bl	800103c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800133e:	242c      	movs	r4, #44	; 0x2c
 8001340:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8001344:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	4a03      	ldr	r2, [pc, #12]	; (8001358 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800134c:	8004      	strh	r4, [r0, #0]
    for (i = 0; i < usPoint; i++)
 800134e:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001350:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8001352:	d1fc      	bne.n	800134e <LCD_DrawCross+0x4a>

}
 8001354:	bd38      	pop	{r3, r4, r5, pc}
 8001356:	bf00      	nop
 8001358:	60020000 	.word	0x60020000

0800135c <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 800135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001360:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 8001362:	7812      	ldrb	r2, [r2, #0]
                          uint16_t usColor_Foreground) {
 8001364:	b082      	sub	sp, #8
 8001366:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    while (*pStr != '\0') {
 800136a:	b1da      	cbz	r2, 80013a4 <LCD_DrawString_Color+0x48>
 800136c:	4605      	mov	r5, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4698      	mov	r8, r3
 8001372:	e00b      	b.n	800138c <LCD_DrawString_Color+0x30>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001374:	f105 0308 	add.w	r3, r5, #8
 8001378:	4628      	mov	r0, r5
 800137a:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 800137c:	4643      	mov	r3, r8
 800137e:	4621      	mov	r1, r4
 8001380:	9700      	str	r7, [sp, #0]
 8001382:	f7ff ff8f 	bl	80012a4 <LCD_DrawChar_Color>
    while (*pStr != '\0') {
 8001386:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800138a:	b15a      	cbz	r2, 80013a4 <LCD_DrawString_Color+0x48>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 800138c:	2de8      	cmp	r5, #232	; 0xe8
 800138e:	d902      	bls.n	8001396 <LCD_DrawString_Color+0x3a>
            usC = LCD_DispWindow_Start_COLUMN;
 8001390:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 8001392:	3410      	adds	r4, #16
 8001394:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001396:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 800139a:	d9eb      	bls.n	8001374 <LCD_DrawString_Color+0x18>
            usP = LCD_DispWindow_Start_PAGE;
 800139c:	2400      	movs	r4, #0
 800139e:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 80013a0:	4620      	mov	r0, r4
 80013a2:	e7eb      	b.n	800137c <LCD_DrawString_Color+0x20>

    }

}
 80013a4:	b002      	add	sp, #8
 80013a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013aa:	bf00      	nop

080013ac <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80013ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013b0:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 80013b2:	7812      	ldrb	r2, [r2, #0]
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80013b4:	b083      	sub	sp, #12
 80013b6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 80013ba:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    while (*pStr != '\0') {
 80013be:	b1fa      	cbz	r2, 8001400 <LCD_DrawString_Color_With_Delay+0x54>
 80013c0:	4605      	mov	r5, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	461f      	mov	r7, r3
 80013c6:	e00f      	b.n	80013e8 <LCD_DrawString_Color_With_Delay+0x3c>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 80013c8:	f105 0308 	add.w	r3, r5, #8
 80013cc:	4628      	mov	r0, r5
 80013ce:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 80013d0:	463b      	mov	r3, r7
 80013d2:	4621      	mov	r1, r4
 80013d4:	f8cd 9000 	str.w	r9, [sp]
 80013d8:	f7ff ff64 	bl	80012a4 <LCD_DrawChar_Color>
        HAL_Delay(delayEachChar);
 80013dc:	4640      	mov	r0, r8
 80013de:	f001 ff03 	bl	80031e8 <HAL_Delay>
    while (*pStr != '\0') {
 80013e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80013e6:	b15a      	cbz	r2, 8001400 <LCD_DrawString_Color_With_Delay+0x54>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 80013e8:	2de8      	cmp	r5, #232	; 0xe8
 80013ea:	d902      	bls.n	80013f2 <LCD_DrawString_Color_With_Delay+0x46>
            usC = LCD_DispWindow_Start_COLUMN;
 80013ec:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 80013ee:	3410      	adds	r4, #16
 80013f0:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 80013f2:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 80013f6:	d9e7      	bls.n	80013c8 <LCD_DrawString_Color_With_Delay+0x1c>
            usP = LCD_DispWindow_Start_PAGE;
 80013f8:	2400      	movs	r4, #0
 80013fa:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 80013fc:	4620      	mov	r0, r4
 80013fe:	e7e7      	b.n	80013d0 <LCD_DrawString_Color_With_Delay+0x24>
    }

}
 8001400:	b003      	add	sp, #12
 8001402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001406:	bf00      	nop

08001408 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
    switch (ucOption) {
 8001408:	3801      	subs	r0, #1
void LCD_GramScan(uint8_t ucOption) {
 800140a:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (ucOption) {
 800140c:	2803      	cmp	r0, #3
 800140e:	d81e      	bhi.n	800144e <LCD_GramScan+0x46>
 8001410:	e8df f000 	tbb	[pc, r0]
 8001414:	2202424a 	.word	0x2202424a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001418:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800141a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800141e:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001422:	f04f 0c28 	mov.w	ip, #40	; 0x28
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001426:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001428:	2601      	movs	r6, #1
 800142a:	253f      	movs	r5, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800142c:	242b      	movs	r4, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800142e:	20ef      	movs	r0, #239	; 0xef
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001432:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001436:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800143a:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	801a      	strh	r2, [r3, #0]
 8001440:	801e      	strh	r6, [r3, #0]
 8001442:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001444:	800c      	strh	r4, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	801a      	strh	r2, [r3, #0]
 800144c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800144e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001452:	222c      	movs	r2, #44	; 0x2c
 8001454:	801a      	strh	r2, [r3, #0]

    /* write gram start */
    LCD_Write_Cmd(0x2C);


}
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001458:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800145a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800145e:	2736      	movs	r7, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001460:	2648      	movs	r6, #72	; 0x48
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001462:	252a      	movs	r5, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001464:	24ef      	movs	r4, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001466:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800146a:	f04f 0c01 	mov.w	ip, #1
 800146e:	203f      	movs	r0, #63	; 0x3f
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001472:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001474:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001476:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	801a      	strh	r2, [r3, #0]
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001480:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	801a      	strh	r2, [r3, #0]
 8001488:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800148c:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800148e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001490:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001494:	801a      	strh	r2, [r3, #0]
}
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001498:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800149a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800149e:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014a2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80014a6:	e7be      	b.n	8001426 <LCD_GramScan+0x1e>
 80014a8:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014aa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80014ae:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014b2:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014b6:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014b8:	26ef      	movs	r6, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014ba:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014bc:	2401      	movs	r4, #1
 80014be:	203f      	movs	r0, #63	; 0x3f
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014c2:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014c6:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014ca:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014d4:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014dc:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80014de:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80014e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80014e4:	801a      	strh	r2, [r3, #0]
}
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e8:	60020000 	.word	0x60020000

080014ec <mainPage.part.0>:
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
    initValue = 0xA0;
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
}

void mainPage(void) {
 80014ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (changingPage) {
        changingPage = 0;
 80014f0:	2400      	movs	r4, #0
 80014f2:	4828      	ldr	r0, [pc, #160]	; (8001594 <mainPage.part.0+0xa8>)
        currentPage = home;
 80014f4:	4928      	ldr	r1, [pc, #160]	; (8001598 <mainPage.part.0+0xac>)
void mainPage(void) {
 80014f6:	b082      	sub	sp, #8
        LCD_Clear(0, 0, 240, 320, BLACK);
 80014f8:	9400      	str	r4, [sp, #0]
 80014fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
        changingPage = 0;
 80014fe:	6004      	str	r4, [r0, #0]
        currentPage = home;
 8001500:	700c      	strb	r4, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001502:	4620      	mov	r0, r4
 8001504:	4621      	mov	r1, r4
 8001506:	22f0      	movs	r2, #240	; 0xf0
 8001508:	f7ff fdc4 	bl	8001094 <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 800150c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8001510:	230a      	movs	r3, #10
        HAL_Delay(100);
        output_text = "Please choose an option below.";
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
        HAL_Delay(200);
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8001512:	f647 77ff 	movw	r7, #32767	; 0x7fff
        output_text = "WEIGHT";
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001516:	250f      	movs	r5, #15
        HAL_Delay(200);
        output_text = "ACCEL.";
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 8001518:	f64f 76e0 	movw	r6, #65504	; 0xffe0
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 800151c:	2128      	movs	r1, #40	; 0x28
 800151e:	4620      	mov	r0, r4
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <mainPage.part.0+0xb0>)
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	f8cd 8000 	str.w	r8, [sp]
 8001528:	231f      	movs	r3, #31
 800152a:	f7ff ff3f 	bl	80013ac <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 800152e:	2064      	movs	r0, #100	; 0x64
 8001530:	f001 fe5a 	bl	80031e8 <HAL_Delay>
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 8001534:	4623      	mov	r3, r4
 8001536:	2164      	movs	r1, #100	; 0x64
 8001538:	4620      	mov	r0, r4
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <mainPage.part.0+0xb4>)
 800153c:	f8cd 8000 	str.w	r8, [sp]
 8001540:	f7ff ff0c 	bl	800135c <LCD_DrawString_Color>
        HAL_Delay(200);
 8001544:	20c8      	movs	r0, #200	; 0xc8
 8001546:	f001 fe4f 	bl	80031e8 <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 800154a:	2328      	movs	r3, #40	; 0x28
 800154c:	2250      	movs	r2, #80	; 0x50
 800154e:	21e6      	movs	r1, #230	; 0xe6
 8001550:	2014      	movs	r0, #20
 8001552:	9700      	str	r7, [sp, #0]
 8001554:	f7ff fd9e 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001558:	463b      	mov	r3, r7
 800155a:	21f2      	movs	r1, #242	; 0xf2
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <mainPage.part.0+0xb8>)
 800155e:	2023      	movs	r0, #35	; 0x23
 8001560:	e9cd 4500 	strd	r4, r5, [sp]
 8001564:	f7ff ff22 	bl	80013ac <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 8001568:	20c8      	movs	r0, #200	; 0xc8
 800156a:	f001 fe3d 	bl	80031e8 <HAL_Delay>
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 800156e:	2328      	movs	r3, #40	; 0x28
 8001570:	2250      	movs	r2, #80	; 0x50
 8001572:	21e6      	movs	r1, #230	; 0xe6
 8001574:	2082      	movs	r0, #130	; 0x82
 8001576:	9600      	str	r6, [sp, #0]
 8001578:	f7ff fd8c 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 800157c:	4633      	mov	r3, r6
 800157e:	21f2      	movs	r1, #242	; 0xf2
 8001580:	2096      	movs	r0, #150	; 0x96
 8001582:	e9cd 4500 	strd	r4, r5, [sp]
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <mainPage.part.0+0xbc>)
 8001588:	f7ff ff10 	bl	80013ac <LCD_DrawString_Color_With_Delay>
    }
}
 800158c:	b002      	add	sp, #8
 800158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001592:	bf00      	nop
 8001594:	20000000 	.word	0x20000000
 8001598:	20000562 	.word	0x20000562
 800159c:	0800a5d8 	.word	0x0800a5d8
 80015a0:	0800a600 	.word	0x0800a600
 80015a4:	0800a620 	.word	0x0800a620
 80015a8:	0800a628 	.word	0x0800a628

080015ac <Check_touchkey>:
void Check_touchkey() {
 80015ac:	b500      	push	{lr}
 80015ae:	b083      	sub	sp, #12
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 80015b0:	491b      	ldr	r1, [pc, #108]	; (8001620 <Check_touchkey+0x74>)
 80015b2:	a801      	add	r0, sp, #4
 80015b4:	f001 fd54 	bl	8003060 <XPT2046_Get_TouchedPoint>
 80015b8:	b190      	cbz	r0, 80015e0 <Check_touchkey+0x34>
        if (currentPage == home) {
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <Check_touchkey+0x78>)
 80015bc:	7813      	ldrb	r3, [r2, #0]
 80015be:	b993      	cbnz	r3, 80015e6 <Check_touchkey+0x3a>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 80015c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015c4:	3bd3      	subs	r3, #211	; 0xd3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b26      	cmp	r3, #38	; 0x26
 80015ca:	d809      	bhi.n	80015e0 <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 80015cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015d0:	f1a3 0115 	sub.w	r1, r3, #21
 80015d4:	294e      	cmp	r1, #78	; 0x4e
 80015d6:	d819      	bhi.n	800160c <Check_touchkey+0x60>
                    currentPage = weight;
 80015d8:	2301      	movs	r3, #1
                    changingPage = 1;
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <Check_touchkey+0x7c>)
                    currentPage = weight;
 80015dc:	7013      	strb	r3, [r2, #0]
                    changingPage = 1;
 80015de:	600b      	str	r3, [r1, #0]
}
 80015e0:	b003      	add	sp, #12
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 80015e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2b18      	cmp	r3, #24
 80015f2:	d8f5      	bhi.n	80015e0 <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 80015f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015f8:	3b15      	subs	r3, #21
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2b80      	cmp	r3, #128	; 0x80
 80015fe:	d8ef      	bhi.n	80015e0 <Check_touchkey+0x34>
                    currentPage = home;
 8001600:	2000      	movs	r0, #0
                    changingPage = 1;
 8001602:	2101      	movs	r1, #1
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <Check_touchkey+0x7c>)
                    currentPage = home;
 8001606:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 8001608:	6019      	str	r1, [r3, #0]
}
 800160a:	e7e9      	b.n	80015e0 <Check_touchkey+0x34>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 800160c:	3b83      	subs	r3, #131	; 0x83
 800160e:	2b4e      	cmp	r3, #78	; 0x4e
 8001610:	d8e6      	bhi.n	80015e0 <Check_touchkey+0x34>
                    currentPage = accelerometer;
 8001612:	2002      	movs	r0, #2
                    changingPage = 1;
 8001614:	2101      	movs	r1, #1
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <Check_touchkey+0x7c>)
                    currentPage = accelerometer;
 8001618:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 800161a:	6019      	str	r1, [r3, #0]
 800161c:	e7e0      	b.n	80015e0 <Check_touchkey+0x34>
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	20000562 	.word	0x20000562
 8001628:	20000000 	.word	0x20000000

0800162c <shiftAcceleRecord>:
void shiftAcceleRecord() {
 800162c:	b510      	push	{r4, lr}
    if (acceleRecordSize < RECORD_MAX_SIZE) {
 800162e:	4c0b      	ldr	r4, [pc, #44]	; (800165c <shiftAcceleRecord+0x30>)
 8001630:	f9b4 e000 	ldrsh.w	lr, [r4]
 8001634:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8001638:	dd0f      	ble.n	800165a <shiftAcceleRecord+0x2e>
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <shiftAcceleRecord+0x34>)
 800163c:	f203 2c52 	addw	ip, r3, #594	; 0x252
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 8001640:	88d8      	ldrh	r0, [r3, #6]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 8001642:	8919      	ldrh	r1, [r3, #8]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 8001644:	895a      	ldrh	r2, [r3, #10]
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 8001646:	8018      	strh	r0, [r3, #0]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 8001648:	8059      	strh	r1, [r3, #2]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 800164a:	809a      	strh	r2, [r3, #4]
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 800164c:	3306      	adds	r3, #6
 800164e:	4563      	cmp	r3, ip
 8001650:	d1f6      	bne.n	8001640 <shiftAcceleRecord+0x14>
    --acceleRecordSize;
 8001652:	f10e 3eff 	add.w	lr, lr, #4294967295
 8001656:	f8a4 e000 	strh.w	lr, [r4]
}
 800165a:	bd10      	pop	{r4, pc}
 800165c:	20000234 	.word	0x20000234
 8001660:	20000238 	.word	0x20000238

08001664 <insertAngleRecord>:
void insertAngleRecord(uint8_t newAngle) {
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001666:	4f10      	ldr	r7, [pc, #64]	; (80016a8 <insertAngleRecord+0x44>)
void insertAngleRecord(uint8_t newAngle) {
 8001668:	4606      	mov	r6, r0
    while (angleRecordSize > RECORD_MAX_SIZE) {
 800166a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	dd12      	ble.n	8001698 <insertAngleRecord+0x34>
 8001672:	3b01      	subs	r3, #1
        angleRecord[i - 1] = angleRecord[i];
 8001674:	4d0d      	ldr	r5, [pc, #52]	; (80016ac <insertAngleRecord+0x48>)
 8001676:	b29c      	uxth	r4, r3
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001678:	3c01      	subs	r4, #1
        angleRecord[i - 1] = angleRecord[i];
 800167a:	22c6      	movs	r2, #198	; 0xc6
 800167c:	4629      	mov	r1, r5
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <insertAngleRecord+0x4c>)
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001680:	b2a4      	uxth	r4, r4
        angleRecord[i - 1] = angleRecord[i];
 8001682:	f003 fcb9 	bl	8004ff8 <memmove>
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001686:	2c63      	cmp	r4, #99	; 0x63
 8001688:	d1f6      	bne.n	8001678 <insertAngleRecord+0x14>
 800168a:	2265      	movs	r2, #101	; 0x65
    --angleRecordSize;
 800168c:	2364      	movs	r3, #100	; 0x64
    angleRecord[angleRecordSize++] = newAngle;
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <insertAngleRecord+0x4c>)
 8001690:	803a      	strh	r2, [r7, #0]
 8001692:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 8001696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    angleRecord[angleRecordSize++] = newAngle;
 8001698:	4905      	ldr	r1, [pc, #20]	; (80016b0 <insertAngleRecord+0x4c>)
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	b212      	sxth	r2, r2
 800169e:	803a      	strh	r2, [r7, #0]
 80016a0:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 80016a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000560 	.word	0x20000560
 80016ac:	2000049a 	.word	0x2000049a
 80016b0:	20000498 	.word	0x20000498
 80016b4:	00000000 	.word	0x00000000

080016b8 <updateDistance>:
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80016b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (short i = 0; i < acceleRecordSize; ++i) {
 80016bc:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <updateDistance+0x210>)
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80016be:	b087      	sub	sp, #28
    for (short i = 0; i < acceleRecordSize; ++i) {
 80016c0:	f9b3 b000 	ldrsh.w	fp, [r3]
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80016c4:	e9cd 0103 	strd	r0, r1, [sp, #12]
    for (short i = 0; i < acceleRecordSize; ++i) {
 80016c8:	f1bb 0f00 	cmp.w	fp, #0
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80016cc:	9205      	str	r2, [sp, #20]
    for (short i = 0; i < acceleRecordSize; ++i) {
 80016ce:	f340 80e4 	ble.w	800189a <updateDistance+0x1e2>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 80016d2:	4658      	mov	r0, fp
 80016d4:	2500      	movs	r5, #0
 80016d6:	f7fe ff01 	bl	80004dc <__aeabi_i2d>
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 80016da:	46a8      	mov	r8, r5
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 80016dc:	e9cd 0100 	strd	r0, r1, [sp]
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 80016e0:	46a9      	mov	r9, r5
 80016e2:	46aa      	mov	sl, r5
 80016e4:	4628      	mov	r0, r5
 80016e6:	4c79      	ldr	r4, [pc, #484]	; (80018cc <updateDistance+0x214>)
 80016e8:	e044      	b.n	8001774 <updateDistance+0xbc>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 80016ea:	2200      	movs	r2, #0
 80016ec:	4630      	mov	r0, r6
 80016ee:	4639      	mov	r1, r7
 80016f0:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <updateDistance+0x218>)
 80016f2:	f7ff f9cf 	bl	8000a94 <__aeabi_dcmplt>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d14e      	bne.n	8001798 <updateDistance+0xe0>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 80016fa:	4630      	mov	r0, r6
 80016fc:	4639      	mov	r1, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <updateDistance+0x21c>)
 8001702:	f7ff f9c7 	bl	8000a94 <__aeabi_dcmplt>
 8001706:	2800      	cmp	r0, #0
 8001708:	d14a      	bne.n	80017a0 <updateDistance+0xe8>
        else ratioDelay = 0.5;
 800170a:	2600      	movs	r6, #0
 800170c:	4f70      	ldr	r7, [pc, #448]	; (80018d0 <updateDistance+0x218>)
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 800170e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001712:	f7fe fee3 	bl	80004dc <__aeabi_i2d>
 8001716:	4632      	mov	r2, r6
 8001718:	463b      	mov	r3, r7
 800171a:	f7fe ff49 	bl	80005b0 <__aeabi_dmul>
 800171e:	f008 f89b 	bl	8009858 <floor>
 8001722:	f7ff f9f5 	bl	8000b10 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 8001728:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 800172c:	b21b      	sxth	r3, r3
 800172e:	449a      	add	sl, r3
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 8001730:	f7fe fed4 	bl	80004dc <__aeabi_i2d>
 8001734:	4632      	mov	r2, r6
 8001736:	463b      	mov	r3, r7
 8001738:	f7fe ff3a 	bl	80005b0 <__aeabi_dmul>
 800173c:	f008 f88c 	bl	8009858 <floor>
 8001740:	f7ff f9e6 	bl	8000b10 <__aeabi_d2iz>
 8001744:	4603      	mov	r3, r0
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001746:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 800174a:	b21b      	sxth	r3, r3
 800174c:	4499      	add	r9, r3
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 800174e:	f7fe fec5 	bl	80004dc <__aeabi_i2d>
 8001752:	463b      	mov	r3, r7
 8001754:	4632      	mov	r2, r6
 8001756:	f7fe ff2b 	bl	80005b0 <__aeabi_dmul>
 800175a:	f008 f87d 	bl	8009858 <floor>
 800175e:	f7ff f9d7 	bl	8000b10 <__aeabi_d2iz>
 8001762:	4603      	mov	r3, r0
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001764:	3501      	adds	r5, #1
 8001766:	b228      	sxth	r0, r5
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001768:	b21b      	sxth	r3, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 800176a:	4583      	cmp	fp, r0
 800176c:	f104 0406 	add.w	r4, r4, #6
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001770:	4498      	add	r8, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001772:	dd19      	ble.n	80017a8 <updateDistance+0xf0>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 8001774:	f7fe feb2 	bl	80004dc <__aeabi_i2d>
 8001778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800177c:	f7ff f842 	bl	8000804 <__aeabi_ddiv>
 8001780:	2200      	movs	r2, #0
 8001782:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <updateDistance+0x220>)
 8001784:	4606      	mov	r6, r0
 8001786:	460f      	mov	r7, r1
 8001788:	f7ff f984 	bl	8000a94 <__aeabi_dcmplt>
 800178c:	2800      	cmp	r0, #0
 800178e:	d0ac      	beq.n	80016ea <updateDistance+0x32>
 8001790:	a747      	add	r7, pc, #284	; (adr r7, 80018b0 <updateDistance+0x1f8>)
 8001792:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001796:	e7ba      	b.n	800170e <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 8001798:	a747      	add	r7, pc, #284	; (adr r7, 80018b8 <updateDistance+0x200>)
 800179a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800179e:	e7b6      	b.n	800170e <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 80017a0:	a747      	add	r7, pc, #284	; (adr r7, 80018c0 <updateDistance+0x208>)
 80017a2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80017a6:	e7b2      	b.n	800170e <updateDistance+0x56>
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 80017a8:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <updateDistance+0x224>)
 80017aa:	ea4f 70ea 	mov.w	r0, sl, asr #31
 80017ae:	fb83 120a 	smull	r1, r2, r3, sl
 80017b2:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 80017b6:	fb83 1209 	smull	r1, r2, r3, r9
            accum_z / RECORD_MAX_SIZE;
 80017ba:	fb83 1308 	smull	r1, r3, r3, r8
 80017be:	ea4f 7be8 	mov.w	fp, r8, asr #31
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 80017c2:	ea4f 76e9 	mov.w	r6, r9, asr #31
 80017c6:	ebc6 1662 	rsb	r6, r6, r2, asr #5
            accum_z / RECORD_MAX_SIZE;
 80017ca:	ebcb 1363 	rsb	r3, fp, r3, asr #5
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 80017ce:	b200      	sxth	r0, r0
 80017d0:	b236      	sxth	r6, r6
 80017d2:	fa0f fb83 	sxth.w	fp, r3
    (newX <= avg_x) ? (accum_x = 0) : (accum_x -= avg_x);
 80017d6:	9b03      	ldr	r3, [sp, #12]
 80017d8:	4283      	cmp	r3, r0
 80017da:	dd4d      	ble.n	8001878 <updateDistance+0x1c0>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80017dc:	ebaa 0000 	sub.w	r0, sl, r0
 80017e0:	f7fe fe7c 	bl	80004dc <__aeabi_i2d>
 80017e4:	460b      	mov	r3, r1
 80017e6:	4602      	mov	r2, r0
 80017e8:	f7fe fee2 	bl	80005b0 <__aeabi_dmul>
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80017ec:	9b04      	ldr	r3, [sp, #16]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80017ee:	4604      	mov	r4, r0
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80017f0:	42b3      	cmp	r3, r6
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80017f2:	460d      	mov	r5, r1
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80017f4:	dd46      	ble.n	8001884 <updateDistance+0x1cc>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80017f6:	eba9 0006 	sub.w	r0, r9, r6
 80017fa:	f7fe fe6f 	bl	80004dc <__aeabi_i2d>
 80017fe:	460b      	mov	r3, r1
 8001800:	4602      	mov	r2, r0
 8001802:	f7fe fed5 	bl	80005b0 <__aeabi_dmul>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001806:	9b05      	ldr	r3, [sp, #20]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001808:	4606      	mov	r6, r0
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 800180a:	455b      	cmp	r3, fp
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 800180c:	460f      	mov	r7, r1
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 800180e:	dd3f      	ble.n	8001890 <updateDistance+0x1d8>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001810:	eba8 000b 	sub.w	r0, r8, fp
 8001814:	f7fe fe62 	bl	80004dc <__aeabi_i2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	f7fe fec8 	bl	80005b0 <__aeabi_dmul>
 8001820:	4680      	mov	r8, r0
 8001822:	4689      	mov	r9, r1
 8001824:	4632      	mov	r2, r6
 8001826:	463b      	mov	r3, r7
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe fd0a 	bl	8000244 <__adddf3>
 8001830:	4642      	mov	r2, r8
 8001832:	464b      	mov	r3, r9
 8001834:	f7fe fd06 	bl	8000244 <__adddf3>
 8001838:	f008 f890 	bl	800995c <sqrt>
 800183c:	4604      	mov	r4, r0
 800183e:	460d      	mov	r5, r1
    distanceTraveled += (uint16_t) floor(calDis);
 8001840:	f008 f80a 	bl	8009858 <floor>
 8001844:	f7ff f98c 	bl	8000b60 <__aeabi_d2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	4f25      	ldr	r7, [pc, #148]	; (80018e0 <updateDistance+0x228>)
 800184c:	b29b      	uxth	r3, r3
 800184e:	683a      	ldr	r2, [r7, #0]
    actualDistance += (calDis / 1000);
 8001850:	4620      	mov	r0, r4
    distanceTraveled += (uint16_t) floor(calDis);
 8001852:	4413      	add	r3, r2
 8001854:	603b      	str	r3, [r7, #0]
    actualDistance += (calDis / 1000);
 8001856:	4629      	mov	r1, r5
 8001858:	2200      	movs	r2, #0
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <updateDistance+0x22c>)
 800185c:	f7fe ffd2 	bl	8000804 <__aeabi_ddiv>
 8001860:	4e21      	ldr	r6, [pc, #132]	; (80018e8 <updateDistance+0x230>)
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9d6 0100 	ldrd	r0, r1, [r6]
 800186a:	f7fe fceb 	bl	8000244 <__adddf3>
 800186e:	e9c6 0100 	strd	r0, r1, [r6]
}
 8001872:	b007      	add	sp, #28
 8001874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001878:	9b04      	ldr	r3, [sp, #16]
 800187a:	2400      	movs	r4, #0
 800187c:	42b3      	cmp	r3, r6
 800187e:	f04f 0500 	mov.w	r5, #0
 8001882:	dcb8      	bgt.n	80017f6 <updateDistance+0x13e>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001884:	9b05      	ldr	r3, [sp, #20]
 8001886:	2600      	movs	r6, #0
 8001888:	455b      	cmp	r3, fp
 800188a:	f04f 0700 	mov.w	r7, #0
 800188e:	dcbf      	bgt.n	8001810 <updateDistance+0x158>
 8001890:	f04f 0800 	mov.w	r8, #0
 8001894:	f04f 0900 	mov.w	r9, #0
 8001898:	e7c4      	b.n	8001824 <updateDistance+0x16c>
    for (short i = 0; i < acceleRecordSize; ++i) {
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	465e      	mov	r6, fp
 80018a0:	4658      	mov	r0, fp
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 80018a2:	46d8      	mov	r8, fp
 80018a4:	46d9      	mov	r9, fp
 80018a6:	46da      	mov	sl, fp
 80018a8:	e795      	b.n	80017d6 <updateDistance+0x11e>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	3fa99999 	.word	0x3fa99999
 80018b8:	33333333 	.word	0x33333333
 80018bc:	3fc33333 	.word	0x3fc33333
 80018c0:	33333333 	.word	0x33333333
 80018c4:	3fd33333 	.word	0x3fd33333
 80018c8:	20000234 	.word	0x20000234
 80018cc:	20000238 	.word	0x20000238
 80018d0:	3fe00000 	.word	0x3fe00000
 80018d4:	3fe80000 	.word	0x3fe80000
 80018d8:	3fd00000 	.word	0x3fd00000
 80018dc:	51eb851f 	.word	0x51eb851f
 80018e0:	20000564 	.word	0x20000564
 80018e4:	408f4000 	.word	0x408f4000
 80018e8:	20000490 	.word	0x20000490

080018ec <getY>:
void getY(uint8_t index, uint8_t delay) {
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
    if ((index & 0x01) == 0) {
 80018f2:	f010 0201 	ands.w	r2, r0, #1
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80018f6:	bf18      	it	ne
 80018f8:	2201      	movne	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <getY+0x48>)
 8001900:	f002 f974 	bl	8003bec <HAL_GPIO_WritePin>
    if ((index & 0x02) == 0) {
 8001904:	f014 0202 	ands.w	r2, r4, #2
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001908:	bf18      	it	ne
 800190a:	2201      	movne	r2, #1
 800190c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <getY+0x48>)
 8001912:	f002 f96b 	bl	8003bec <HAL_GPIO_WritePin>
    if ((index & 0x04) == 0) {
 8001916:	f014 0204 	ands.w	r2, r4, #4
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <getY+0x48>)
 800191c:	bf18      	it	ne
 800191e:	2201      	movne	r2, #1
 8001920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001924:	f002 f962 	bl	8003bec <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001928:	4628      	mov	r0, r5
}
 800192a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(delay);
 800192e:	f001 bc5b 	b.w	80031e8 <HAL_Delay>
 8001932:	bf00      	nop
 8001934:	40011000 	.word	0x40011000

08001938 <initWeightSensors>:
void initWeightSensors(struct YPin *pins) {
 8001938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pins[2].weightAtSampledWeight = 300;
 800193c:	f44f 7396 	mov.w	r3, #300	; 0x12c
void initWeightSensors(struct YPin *pins) {
 8001940:	4604      	mov	r4, r0
    pins[0].weightAtSampledWeight = 270;
 8001942:	f44f 7087 	mov.w	r0, #270	; 0x10e
    pins[4].voltageAtZeroWeight = 1000;
 8001946:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80019d0 <initWeightSensors+0x98>
    pins[0].voltageAtZeroWeight = 1200;
 800194a:	4922      	ldr	r1, [pc, #136]	; (80019d4 <initWeightSensors+0x9c>)
    pins[1].voltageAtZeroWeight = 1300;
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <initWeightSensors+0xa0>)
    pins[2].voltageAtZeroWeight = 1800;
 800194e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80019dc <initWeightSensors+0xa4>
    pins[3].voltageAtZeroWeight = 2800;
 8001952:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80019e0 <initWeightSensors+0xa8>
    pins[5].voltageAtZeroWeight = 1800;
 8001956:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80019e4 <initWeightSensors+0xac>
    pins[6].voltageAtZeroWeight = 1800;
 800195a:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80019e8 <initWeightSensors+0xb0>
    pins[7].voltageAtZeroWeight = 1000;
 800195e:	4e23      	ldr	r6, [pc, #140]	; (80019ec <initWeightSensors+0xb4>)
    pins[4].voltageAtZeroWeight = 1000;
 8001960:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    pins[7].weightAtSampledWeight = 300;
 8001964:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 8001968:	f240 57dc 	movw	r7, #1500	; 0x5dc
    pins[2].voltageAtZeroWeight = 1800;
 800196c:	f8c4 a020 	str.w	sl, [r4, #32]
    pins[3].voltageAtZeroWeight = 2800;
 8001970:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    pins[5].voltageAtZeroWeight = 1800;
 8001974:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
    pins[6].voltageAtZeroWeight = 1800;
 8001978:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    pins[7].voltageAtZeroWeight = 1000;
 800197c:	6726      	str	r6, [r4, #112]	; 0x70
    pins[0].voltageAtZeroWeight = 1200;
 800197e:	6021      	str	r1, [r4, #0]
    pins[1].voltageAtZeroWeight = 1300;
 8001980:	6122      	str	r2, [r4, #16]
    pins[0].weightAtSampledWeight = 270;
 8001982:	80a0      	strh	r0, [r4, #4]
    pins[1].weightAtSampledWeight = 270;
 8001984:	82a0      	strh	r0, [r4, #20]
    pins[2].weightAtSampledWeight = 300;
 8001986:	84a3      	strh	r3, [r4, #36]	; 0x24
    pins[3].weightAtSampledWeight = 300;
 8001988:	86a3      	strh	r3, [r4, #52]	; 0x34
    pins[4].weightAtSampledWeight = 300;
 800198a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pins[5].weightAtSampledWeight = 300;
 800198e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    pins[6].weightAtSampledWeight = 300;
 8001992:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pins[7].weightAtSampledWeight = 300;
 8001996:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    for (uint8_t i = 0; i < 8; i++)
 800199a:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800199e:	e003      	b.n	80019a8 <initWeightSensors+0x70>
                pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 80019a0:	8aa0      	ldrh	r0, [r4, #20]
 80019a2:	8a67      	ldrh	r7, [r4, #18]
 80019a4:	f834 5f10 	ldrh.w	r5, [r4, #16]!
 80019a8:	f7fe fd98 	bl	80004dc <__aeabi_i2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	1b78      	subs	r0, r7, r5
 80019b0:	4616      	mov	r6, r2
 80019b2:	460f      	mov	r7, r1
 80019b4:	f7fe fd92 	bl	80004dc <__aeabi_i2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4630      	mov	r0, r6
 80019be:	4639      	mov	r1, r7
 80019c0:	f7fe ff20 	bl	8000804 <__aeabi_ddiv>
    for (uint8_t i = 0; i < 8; i++)
 80019c4:	45a0      	cmp	r8, r4
        pins[i].weightCoef =
 80019c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    for (uint8_t i = 0; i < 8; i++)
 80019ca:	d1e9      	bne.n	80019a0 <initWeightSensors+0x68>
}
 80019cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d0:	070803e8 	.word	0x070803e8
 80019d4:	05dc04b0 	.word	0x05dc04b0
 80019d8:	05dc0514 	.word	0x05dc0514
 80019dc:	0a280708 	.word	0x0a280708
 80019e0:	0c800af0 	.word	0x0c800af0
 80019e4:	07d00708 	.word	0x07d00708
 80019e8:	08340708 	.word	0x08340708
 80019ec:	53fc03e8 	.word	0x53fc03e8

080019f0 <initializeHMC5883L>:
void initializeHMC5883L() {
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t initValue = 0x70;
 80019f2:	2370      	movs	r3, #112	; 0x70
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80019f4:	2401      	movs	r4, #1
 80019f6:	2664      	movs	r6, #100	; 0x64
void initializeHMC5883L() {
 80019f8:	b087      	sub	sp, #28
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80019fa:	4f0e      	ldr	r7, [pc, #56]	; (8001a34 <initializeHMC5883L+0x44>)
 80019fc:	f10d 0517 	add.w	r5, sp, #23
    uint8_t initValue = 0x70;
 8001a00:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 8001a04:	2200      	movs	r2, #0
 8001a06:	4623      	mov	r3, r4
 8001a08:	213c      	movs	r1, #60	; 0x3c
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a10:	9500      	str	r5, [sp, #0]
 8001a12:	f002 fbd5 	bl	80041c0 <HAL_I2C_Mem_Write>
    initValue = 0xA0;
 8001a16:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	4622      	mov	r2, r4
 8001a20:	213c      	movs	r1, #60	; 0x3c
 8001a22:	9602      	str	r6, [sp, #8]
 8001a24:	9401      	str	r4, [sp, #4]
 8001a26:	9500      	str	r5, [sp, #0]
    initValue = 0xA0;
 8001a28:	f88d c017 	strb.w	ip, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 8001a2c:	f002 fbc8 	bl	80041c0 <HAL_I2C_Mem_Write>
}
 8001a30:	b007      	add	sp, #28
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a34:	20000598 	.word	0x20000598

08001a38 <weightPage>:
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
    HAL_Delay(20);
}

void weightPage(void) {
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8001a3c:	4960      	ldr	r1, [pc, #384]	; (8001bc0 <weightPage+0x188>)
void weightPage(void) {
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
    if (changingPage) {
 8001a40:	680b      	ldr	r3, [r1, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d166      	bne.n	8001b14 <weightPage+0xdc>
 8001a46:	f10d 0918 	add.w	r9, sp, #24
 8001a4a:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(20);
 8001a4e:	2500      	movs	r5, #0
 8001a50:	462f      	mov	r7, r5
 8001a52:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8001bc4 <weightPage+0x18c>
 8001a56:	f8df a170 	ldr.w	sl, [pc, #368]	; 8001bc8 <weightPage+0x190>
        initWeightSensors(weightSensors);
    }

    uint16_t sum = 0;
    for (uint8_t counter = 0; counter < 8; counter++) {
        getY(counter, 20);
 8001a5a:	2114      	movs	r1, #20
 8001a5c:	b2e8      	uxtb	r0, r5
 8001a5e:	f7ff ff45 	bl	80018ec <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001a62:	485a      	ldr	r0, [pc, #360]	; (8001bcc <weightPage+0x194>)
 8001a64:	f001 fc84 	bl	8003370 <HAL_ADC_GetValue>
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001a68:	f8b8 3000 	ldrh.w	r3, [r8]
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001a6c:	4604      	mov	r4, r0
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001a6e:	f108 0810 	add.w	r8, r8, #16
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001a72:	1ac0      	subs	r0, r0, r3
 8001a74:	f7fe fd22 	bl	80004bc <__aeabi_ui2d>
 8001a78:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 8001a7c:	f7fe fd98 	bl	80005b0 <__aeabi_dmul>
 8001a80:	f7ff f846 	bl	8000b10 <__aeabi_d2iz>
 8001a84:	4603      	mov	r3, r0
//        if (counter < 4)
//        	LCD_DrawHeatCircle(30, 240 - counter * 40, 30, 85 - val * 85 / 4096, 85);
//		else
//			LCD_DrawHeatCircle(70, 120 + (counter - 4) * 40, 30, 85 - val * 85 / 4096, 85);

        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001a86:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001a8a:	eb01 1101 	add.w	r1, r1, r1, lsl #4

        char dec[12] = "";
 8001a8e:	2600      	movs	r6, #0
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001a90:	0b09      	lsrs	r1, r1, #12
 8001a92:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001a96:	b21b      	sxth	r3, r3
        if (weightPin < 0) weightPin = 0;
 8001a98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001a9c:	4650      	mov	r0, sl
 8001a9e:	b289      	uxth	r1, r1
        sum += weightPin;
 8001aa0:	441f      	add	r7, r3
 8001aa2:	9303      	str	r3, [sp, #12]
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001aa4:	f7ff fb0e 	bl	80010c4 <LCD_SetPinColor>
        sprintf(dec, "%4d %5d", val, weightPin);
 8001aa8:	4622      	mov	r2, r4
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001aaa:	f64f 74ff 	movw	r4, #65535	; 0xffff
        sprintf(dec, "%4d %5d", val, weightPin);
 8001aae:	9b03      	ldr	r3, [sp, #12]
 8001ab0:	4947      	ldr	r1, [pc, #284]	; (8001bd0 <weightPage+0x198>)
 8001ab2:	4658      	mov	r0, fp
        char dec[12] = "";
 8001ab4:	9605      	str	r6, [sp, #20]
 8001ab6:	e9c9 6600 	strd	r6, r6, [r9]
        sprintf(dec, "%4d %5d", val, weightPin);
 8001aba:	f004 fa1d 	bl	8005ef8 <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001abe:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001ac2:	0049      	lsls	r1, r1, #1
 8001ac4:	3164      	adds	r1, #100	; 0x64
 8001ac6:	4633      	mov	r3, r6
 8001ac8:	465a      	mov	r2, fp
 8001aca:	208c      	movs	r0, #140	; 0x8c
 8001acc:	b289      	uxth	r1, r1
 8001ace:	9400      	str	r4, [sp, #0]
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001ad0:	3501      	adds	r5, #1
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001ad2:	f7ff fc43 	bl	800135c <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001ad6:	2d08      	cmp	r5, #8
 8001ad8:	f10a 0a06 	add.w	sl, sl, #6
        sum += weightPin;
 8001adc:	b2bf      	uxth	r7, r7
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001ade:	d1bc      	bne.n	8001a5a <weightPage+0x22>
    }
	LCD_PrintHeatMap(weightSensorsData);
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <weightPage+0x190>)
 8001ae2:	f7ff faf1 	bl	80010c8 <LCD_PrintHeatMap>

    char output_gram[20] = "";
    sprintf(output_gram, "%6d Gram", sum);
 8001ae6:	463a      	mov	r2, r7
 8001ae8:	4658      	mov	r0, fp
 8001aea:	493a      	ldr	r1, [pc, #232]	; (8001bd4 <weightPage+0x19c>)
    char output_gram[20] = "";
 8001aec:	9605      	str	r6, [sp, #20]
 8001aee:	e9c9 6600 	strd	r6, r6, [r9]
 8001af2:	e9c9 6602 	strd	r6, r6, [r9, #8]
    sprintf(output_gram, "%6d Gram", sum);
 8001af6:	f004 f9ff 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, WHITE);
 8001afa:	231f      	movs	r3, #31
 8001afc:	465a      	mov	r2, fp
 8001afe:	2150      	movs	r1, #80	; 0x50
 8001b00:	2078      	movs	r0, #120	; 0x78
 8001b02:	9400      	str	r4, [sp, #0]
 8001b04:	f7ff fc2a 	bl	800135c <LCD_DrawString_Color>

    HAL_Delay(20);
 8001b08:	2014      	movs	r0, #20
 8001b0a:	f001 fb6d 	bl	80031e8 <HAL_Delay>
}
 8001b0e:	b00b      	add	sp, #44	; 0x2c
 8001b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        changingPage = 0;
 8001b14:	f04f 0800 	mov.w	r8, #0
        currentPage = weight;
 8001b18:	2501      	movs	r5, #1
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001b1a:	f04f 0a0a 	mov.w	sl, #10
 8001b1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
        currentPage = weight;
 8001b22:	482d      	ldr	r0, [pc, #180]	; (8001bd8 <weightPage+0x1a0>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001b24:	f8cd 8000 	str.w	r8, [sp]
 8001b28:	f44f 73a0 	mov.w	r3, #320	; 0x140
        currentPage = weight;
 8001b2c:	7005      	strb	r5, [r0, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001b2e:	22f0      	movs	r2, #240	; 0xf0
 8001b30:	4640      	mov	r0, r8
        changingPage = 0;
 8001b32:	f8c1 8000 	str.w	r8, [r1]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001b36:	4641      	mov	r1, r8
 8001b38:	f7ff faac 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001b3c:	231f      	movs	r3, #31
 8001b3e:	2128      	movs	r1, #40	; 0x28
 8001b40:	4650      	mov	r0, sl
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <weightPage+0x1a4>)
 8001b44:	e9cd 6a00 	strd	r6, sl, [sp]
 8001b48:	f7ff fc30 	bl	80013ac <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001b4c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001b50:	2282      	movs	r2, #130	; 0x82
 8001b52:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b56:	2014      	movs	r0, #20
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2319      	movs	r3, #25
 8001b5c:	f7ff fa9a 	bl	8001094 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001b60:	201e      	movs	r0, #30
 8001b62:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001b66:	f240 111d 	movw	r1, #285	; 0x11d
 8001b6a:	e9cd 8a00 	strd	r8, sl, [sp]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <weightPage+0x1a8>)
 8001b70:	f7ff fc1c 	bl	80013ac <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 8001b74:	2014      	movs	r0, #20
 8001b76:	2464      	movs	r4, #100	; 0x64
 8001b78:	4645      	mov	r5, r8
            sprintf(temp, "Y%d: ", i);
 8001b7a:	4f1a      	ldr	r7, [pc, #104]	; (8001be4 <weightPage+0x1ac>)
 8001b7c:	f10d 0918 	add.w	r9, sp, #24
 8001b80:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(20);
 8001b84:	f001 fb30 	bl	80031e8 <HAL_Delay>
            sprintf(temp, "Y%d: ", i);
 8001b88:	462a      	mov	r2, r5
 8001b8a:	4639      	mov	r1, r7
 8001b8c:	4658      	mov	r0, fp
            char temp[10] = "";
 8001b8e:	f8cd 8014 	str.w	r8, [sp, #20]
        for (uint8_t i = 0; i < 8; i++) {
 8001b92:	3501      	adds	r5, #1
            char temp[10] = "";
 8001b94:	f8c9 8000 	str.w	r8, [r9]
 8001b98:	f8a9 8004 	strh.w	r8, [r9, #4]
            sprintf(temp, "Y%d: ", i);
 8001b9c:	f004 f9ac 	bl	8005ef8 <siprintf>
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	465a      	mov	r2, fp
 8001ba6:	206e      	movs	r0, #110	; 0x6e
 8001ba8:	9600      	str	r6, [sp, #0]
 8001baa:	f7ff fbd7 	bl	800135c <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 8001bae:	3412      	adds	r4, #18
 8001bb0:	2d08      	cmp	r5, #8
 8001bb2:	b2a4      	uxth	r4, r4
 8001bb4:	d1e8      	bne.n	8001b88 <weightPage+0x150>
        initWeightSensors(weightSensors);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <weightPage+0x18c>)
 8001bb8:	f7ff febe 	bl	8001938 <initWeightSensors>
 8001bbc:	e747      	b.n	8001a4e <weightPage+0x16>
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000640 	.word	0x20000640
 8001bc8:	200006c0 	.word	0x200006c0
 8001bcc:	20000568 	.word	0x20000568
 8001bd0:	0800a668 	.word	0x0800a668
 8001bd4:	0800a670 	.word	0x0800a670
 8001bd8:	20000562 	.word	0x20000562
 8001bdc:	0800a640 	.word	0x0800a640
 8001be0:	0800a630 	.word	0x0800a630
 8001be4:	0800a660 	.word	0x0800a660

08001be8 <accelerometerPage>:

void accelerometerPage() {
 8001be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8001bec:	4bca      	ldr	r3, [pc, #808]	; (8001f18 <accelerometerPage+0x330>)
void accelerometerPage() {
 8001bee:	b0ab      	sub	sp, #172	; 0xac
    if (changingPage) {
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 8242 	bne.w	800207c <accelerometerPage+0x494>
 8001bf8:	4bc8      	ldr	r3, [pc, #800]	; (8001f1c <accelerometerPage+0x334>)
 8001bfa:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
 8001bfe:	9304      	str	r3, [sp, #16]
 8001c00:	4bc7      	ldr	r3, [pc, #796]	; (8001f20 <accelerometerPage+0x338>)
 8001c02:	af1b      	add	r7, sp, #108	; 0x6c
 8001c04:	9309      	str	r3, [sp, #36]	; 0x24
 8001c06:	4bc7      	ldr	r3, [pc, #796]	; (8001f24 <accelerometerPage+0x33c>)
 8001c08:	ae20      	add	r6, sp, #128	; 0x80
 8001c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8001c0c:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8001c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c12:	ab16      	add	r3, sp, #88	; 0x58
 8001c14:	9310      	str	r3, [sp, #64]	; 0x40
 8001c16:	4bc4      	ldr	r3, [pc, #784]	; (8001f28 <accelerometerPage+0x340>)
 8001c18:	ad25      	add	r5, sp, #148	; 0x94
 8001c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8001c1c:	4bc3      	ldr	r3, [pc, #780]	; (8001f2c <accelerometerPage+0x344>)
 8001c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c20:	4bc3      	ldr	r3, [pc, #780]	; (8001f30 <accelerometerPage+0x348>)
 8001c22:	9306      	str	r3, [sp, #24]
 8001c24:	ab18      	add	r3, sp, #96	; 0x60
 8001c26:	9311      	str	r3, [sp, #68]	; 0x44
 8001c28:	ab1c      	add	r3, sp, #112	; 0x70
 8001c2a:	9305      	str	r3, [sp, #20]
 8001c2c:	ab21      	add	r3, sp, #132	; 0x84
 8001c2e:	9308      	str	r3, [sp, #32]
            output_text = "SENSOR NP";
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
        }
        /* DEBUG MESSAGE ABOVE */
    }
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001c30:	2006      	movs	r0, #6
 8001c32:	f003 f9d1 	bl	8004fd8 <malloc>
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001c36:	235a      	movs	r3, #90	; 0x5a
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	2306      	movs	r3, #6
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001c3c:	4682      	mov	sl, r0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2301      	movs	r3, #1
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001c42:	2400      	movs	r4, #0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001c44:	213a      	movs	r1, #58	; 0x3a
 8001c46:	2232      	movs	r2, #50	; 0x32
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001c48:	9012      	str	r0, [sp, #72]	; 0x48
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001c4a:	f8cd a000 	str.w	sl, [sp]
 8001c4e:	48b9      	ldr	r0, [pc, #740]	; (8001f34 <accelerometerPage+0x34c>)
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
    uint8_t writeMode = 0x01;
 8001c50:	4699      	mov	r9, r3
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001c52:	f002 fb69 	bl	8004328 <HAL_I2C_Mem_Read>
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001c56:	4652      	mov	r2, sl
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001c58:	9b05      	ldr	r3, [sp, #20]
 8001c5a:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8001c5e:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8001c62:	60dc      	str	r4, [r3, #12]
 8001c64:	9b08      	ldr	r3, [sp, #32]
 8001c66:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8001c6a:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8001c6e:	60dc      	str	r4, [r3, #12]
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 8001c70:	f9ba 3000 	ldrsh.w	r3, [sl]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001c74:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 8001c78:	115b      	asrs	r3, r3, #5
 8001c7a:	9305      	str	r3, [sp, #20]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001c7c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001c80:	e9cb 4401 	strd	r4, r4, [fp, #4]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001c84:	ea4f 1a63 	mov.w	sl, r3, asr #5
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001c88:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001c8c:	f8cb 400c 	str.w	r4, [fp, #12]
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001c90:	115a      	asrs	r2, r3, #5
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001c92:	2006      	movs	r0, #6
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001c94:	9208      	str	r2, [sp, #32]
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001c96:	f003 f99f 	bl	8004fd8 <malloc>
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001c9a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001c9e:	4683      	mov	fp, r0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001ca0:	f8cd c000 	str.w	ip, [sp]
 8001ca4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001ca8:	464b      	mov	r3, r9
 8001caa:	e9cd 9c01 	strd	r9, ip, [sp, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	213c      	movs	r1, #60	; 0x3c
 8001cb2:	48a0      	ldr	r0, [pc, #640]	; (8001f34 <accelerometerPage+0x34c>)
    uint8_t writeMode = 0x01;
 8001cb4:	f88d 9057 	strb.w	r9, [sp, #87]	; 0x57
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001cb8:	f002 fa82 	bl	80041c0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 8001cbc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001cc0:	2106      	movs	r1, #6
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
    /* DEBUG MESSAGE BELOW */
    sprintf(x_print, "%+06d", combined_aX);
    sprintf(y_print, "%+06d", combined_aY);
    sprintf(z_print, "%+06d", combined_aZ);
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8001cc2:	f64f 78ff 	movw	r8, #65535	; 0xffff
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 8001cc6:	e9cd 1c01 	strd	r1, ip, [sp, #4]
 8001cca:	464b      	mov	r3, r9
 8001ccc:	2203      	movs	r2, #3
 8001cce:	213c      	movs	r1, #60	; 0x3c
 8001cd0:	4898      	ldr	r0, [pc, #608]	; (8001f34 <accelerometerPage+0x34c>)
 8001cd2:	f8cd b000 	str.w	fp, [sp]
 8001cd6:	f002 fb27 	bl	8004328 <HAL_I2C_Mem_Read>
    const int16_t thetaX = combineUint_8ts(compassData[0], compassData[1]);
 8001cda:	f8bb 3000 	ldrh.w	r3, [fp]
    sprintf(x_print, "%+06d", combined_aX);
 8001cde:	9a05      	ldr	r2, [sp, #20]
 8001ce0:	bad9      	revsh	r1, r3
 8001ce2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8001ce6:	9113      	str	r1, [sp, #76]	; 0x4c
    const int16_t thetaY = combineUint_8ts(compassData[2], compassData[3]);
 8001ce8:	fa93 f9b3 	revsh.w	r9, r3
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
 8001cec:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    sprintf(x_print, "%+06d", combined_aX);
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	bad9      	revsh	r1, r3
 8001cf4:	910f      	str	r1, [sp, #60]	; 0x3c
 8001cf6:	4990      	ldr	r1, [pc, #576]	; (8001f38 <accelerometerPage+0x350>)
 8001cf8:	f004 f8fe 	bl	8005ef8 <siprintf>
    sprintf(y_print, "%+06d", combined_aY);
 8001cfc:	4652      	mov	r2, sl
 8001cfe:	498e      	ldr	r1, [pc, #568]	; (8001f38 <accelerometerPage+0x350>)
 8001d00:	4630      	mov	r0, r6
 8001d02:	f004 f8f9 	bl	8005ef8 <siprintf>
    sprintf(z_print, "%+06d", combined_aZ);
 8001d06:	9a08      	ldr	r2, [sp, #32]
 8001d08:	498b      	ldr	r1, [pc, #556]	; (8001f38 <accelerometerPage+0x350>)
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f004 f8f4 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8001d10:	4623      	mov	r3, r4
 8001d12:	463a      	mov	r2, r7
 8001d14:	21d2      	movs	r1, #210	; 0xd2
 8001d16:	2014      	movs	r0, #20
 8001d18:	f8cd 8000 	str.w	r8, [sp]
 8001d1c:	f7ff fb1e 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 210, y_print, BLACK, WHITE);
 8001d20:	4623      	mov	r3, r4
 8001d22:	4632      	mov	r2, r6
 8001d24:	21d2      	movs	r1, #210	; 0xd2
 8001d26:	2050      	movs	r0, #80	; 0x50
 8001d28:	f8cd 8000 	str.w	r8, [sp]
 8001d2c:	f7ff fb16 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 210, z_print, BLACK, WHITE);
 8001d30:	4623      	mov	r3, r4
 8001d32:	462a      	mov	r2, r5
 8001d34:	21d2      	movs	r1, #210	; 0xd2
 8001d36:	208c      	movs	r0, #140	; 0x8c
 8001d38:	f8cd 8000 	str.w	r8, [sp]
 8001d3c:	f7ff fb0e 	bl	800135c <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", initX_Acc_Reading);
 8001d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d42:	497d      	ldr	r1, [pc, #500]	; (8001f38 <accelerometerPage+0x350>)
 8001d44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d48:	4638      	mov	r0, r7
 8001d4a:	f004 f8d5 	bl	8005ef8 <siprintf>
    sprintf(y_print, "%+06d", initY_Acc_Reading);
 8001d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001d50:	4630      	mov	r0, r6
 8001d52:	f9b1 2000 	ldrsh.w	r2, [r1]
 8001d56:	4978      	ldr	r1, [pc, #480]	; (8001f38 <accelerometerPage+0x350>)
 8001d58:	f004 f8ce 	bl	8005ef8 <siprintf>
    sprintf(z_print, "%+06d", initZ_Acc_Reading);
 8001d5c:	9906      	ldr	r1, [sp, #24]
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f9b1 2000 	ldrsh.w	r2, [r1]
 8001d64:	4974      	ldr	r1, [pc, #464]	; (8001f38 <accelerometerPage+0x350>)
 8001d66:	f004 f8c7 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(20, 230, x_print, BLACK, WHITE);
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	463a      	mov	r2, r7
 8001d6e:	21e6      	movs	r1, #230	; 0xe6
 8001d70:	2014      	movs	r0, #20
 8001d72:	f8cd 8000 	str.w	r8, [sp]
 8001d76:	f7ff faf1 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 230, y_print, BLACK, WHITE);
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	21e6      	movs	r1, #230	; 0xe6
 8001d80:	2050      	movs	r0, #80	; 0x50
 8001d82:	f8cd 8000 	str.w	r8, [sp]
 8001d86:	f7ff fae9 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 230, z_print, BLACK, WHITE);
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	21e6      	movs	r1, #230	; 0xe6
 8001d90:	208c      	movs	r0, #140	; 0x8c
 8001d92:	f8cd 8000 	str.w	r8, [sp]
 8001d96:	f7ff fae1 	bl	800135c <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawX);
 8001d9a:	9904      	ldr	r1, [sp, #16]
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	f9b1 212c 	ldrsh.w	r2, [r1, #300]	; 0x12c
 8001da2:	4965      	ldr	r1, [pc, #404]	; (8001f38 <accelerometerPage+0x350>)
 8001da4:	f004 f8a8 	bl	8005ef8 <siprintf>
    sprintf(y_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawY);
 8001da8:	9904      	ldr	r1, [sp, #16]
 8001daa:	4630      	mov	r0, r6
 8001dac:	f9b1 212e 	ldrsh.w	r2, [r1, #302]	; 0x12e
 8001db0:	4961      	ldr	r1, [pc, #388]	; (8001f38 <accelerometerPage+0x350>)
 8001db2:	f004 f8a1 	bl	8005ef8 <siprintf>
    sprintf(z_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawZ);
 8001db6:	9904      	ldr	r1, [sp, #16]
 8001db8:	4628      	mov	r0, r5
 8001dba:	f9b1 2130 	ldrsh.w	r2, [r1, #304]	; 0x130
 8001dbe:	495e      	ldr	r1, [pc, #376]	; (8001f38 <accelerometerPage+0x350>)
 8001dc0:	f004 f89a 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(20, 270, x_print, BLACK, WHITE);
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	463a      	mov	r2, r7
 8001dc8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001dcc:	2014      	movs	r0, #20
 8001dce:	f8cd 8000 	str.w	r8, [sp]
 8001dd2:	f7ff fac3 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 270, y_print, BLACK, WHITE);
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	4632      	mov	r2, r6
 8001dda:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001dde:	2050      	movs	r0, #80	; 0x50
 8001de0:	f8cd 8000 	str.w	r8, [sp]
 8001de4:	f7ff faba 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 270, z_print, BLACK, WHITE);
 8001de8:	4623      	mov	r3, r4
 8001dea:	462a      	mov	r2, r5
 8001dec:	208c      	movs	r0, #140	; 0x8c
 8001dee:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001df2:	f8cd 8000 	str.w	r8, [sp]
 8001df6:	f7ff fab1 	bl	800135c <LCD_DrawString_Color>
    /* DEBUG MESSAGE ABOVE */

    // All axes have a scale factor of 7.8
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8001dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dfc:	9805      	ldr	r0, [sp, #20]
 8001dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e02:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	425b      	neglt	r3, r3
 8001e0c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001e10:	3301      	adds	r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b292      	uxth	r2, r2
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f0c0 8324 	bcc.w	8002464 <accelerometerPage+0x87c>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2400      	movs	r4, #0
 8001e20:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8001e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e26:	ea8a 72ea 	eor.w	r2, sl, sl, asr #31
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	eba2 72ea 	sub.w	r2, r2, sl, asr #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bfb8      	it	lt
 8001e36:	425b      	neglt	r3, r3
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f080 833a 	bcs.w	80024b8 <accelerometerPage+0x8d0>
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8001e44:	4650      	mov	r0, sl
 8001e46:	f7fe fb49 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8001e4a:	a331      	add	r3, pc, #196	; (adr r3, 8001f10 <accelerometerPage+0x328>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fbae 	bl	80005b0 <__aeabi_dmul>
 8001e54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8001e58:	9b06      	ldr	r3, [sp, #24]
 8001e5a:	9808      	ldr	r0, [sp, #32]
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bfb8      	it	lt
 8001e68:	425b      	neglt	r3, r3
 8001e6a:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b292      	uxth	r2, r2
 8001e74:	4293      	cmp	r3, r2
 8001e76:	f080 8324 	bcs.w	80024c2 <accelerometerPage+0x8da>
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8001e7a:	f7fe fb2f 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8001e7e:	a324      	add	r3, pc, #144	; (adr r3, 8001f10 <accelerometerPage+0x328>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fb94 	bl	80005b0 <__aeabi_dmul>
 8001e88:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sprintf(x_print, "%+0.2f", finalizedX);
 8001e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001e90:	492a      	ldr	r1, [pc, #168]	; (8001f3c <accelerometerPage+0x354>)
 8001e92:	4638      	mov	r0, r7
 8001e94:	f004 f830 	bl	8005ef8 <siprintf>
    sprintf(y_print, "%+0.2f", finalizedY);
 8001e98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001e9c:	4927      	ldr	r1, [pc, #156]	; (8001f3c <accelerometerPage+0x354>)
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f004 f82a 	bl	8005ef8 <siprintf>
    sprintf(z_print, "%+0.2f", finalizedZ);
 8001ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	4924      	ldr	r1, [pc, #144]	; (8001f3c <accelerometerPage+0x354>)
 8001eac:	f004 f824 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(100, 100, x_print, CYAN, BLACK);
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	2164      	movs	r1, #100	; 0x64
 8001eb4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001eb8:	4608      	mov	r0, r1
 8001eba:	463a      	mov	r2, r7
 8001ebc:	9400      	str	r4, [sp, #0]
 8001ebe:	f7ff fa4d 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 130, y_print, YELLOW, BLACK);
 8001ec2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ec6:	4632      	mov	r2, r6
 8001ec8:	2182      	movs	r1, #130	; 0x82
 8001eca:	2064      	movs	r0, #100	; 0x64
 8001ecc:	9400      	str	r4, [sp, #0]
 8001ece:	f7ff fa45 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 160, z_print, BLUE, BLACK);
 8001ed2:	231f      	movs	r3, #31
 8001ed4:	462a      	mov	r2, r5
 8001ed6:	21a0      	movs	r1, #160	; 0xa0
 8001ed8:	2064      	movs	r0, #100	; 0x64
 8001eda:	9400      	str	r4, [sp, #0]
 8001edc:	f7ff fa3e 	bl	800135c <LCD_DrawString_Color>
    sprintf(x_print, "%+05d", thetaX);
 8001ee0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <accelerometerPage+0x358>)
 8001ee6:	4642      	mov	r2, r8
 8001ee8:	4638      	mov	r0, r7
 8001eea:	f004 f805 	bl	8005ef8 <siprintf>
    sprintf(y_print, "%+05d", thetaY);
 8001eee:	464a      	mov	r2, r9
 8001ef0:	4913      	ldr	r1, [pc, #76]	; (8001f40 <accelerometerPage+0x358>)
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f004 f800 	bl	8005ef8 <siprintf>
    sprintf(z_print, "%+05d", thetaZ);
 8001ef8:	4628      	mov	r0, r5
 8001efa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001efc:	4910      	ldr	r1, [pc, #64]	; (8001f40 <accelerometerPage+0x358>)
 8001efe:	f003 fffb 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(160, 100, x_print, CYAN, BLACK);
 8001f02:	463a      	mov	r2, r7
 8001f04:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f08:	2164      	movs	r1, #100	; 0x64
 8001f0a:	20a0      	movs	r0, #160	; 0xa0
 8001f0c:	9400      	str	r4, [sp, #0]
 8001f0e:	e019      	b.n	8001f44 <accelerometerPage+0x35c>
 8001f10:	8e8a71de 	.word	0x8e8a71de
 8001f14:	3f6ff2e4 	.word	0x3f6ff2e4
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000238 	.word	0x20000238
 8001f20:	20000234 	.word	0x20000234
 8001f24:	20000564 	.word	0x20000564
 8001f28:	20000634 	.word	0x20000634
 8001f2c:	20000636 	.word	0x20000636
 8001f30:	20000638 	.word	0x20000638
 8001f34:	20000598 	.word	0x20000598
 8001f38:	0800a774 	.word	0x0800a774
 8001f3c:	0800a77c 	.word	0x0800a77c
 8001f40:	0800a784 	.word	0x0800a784
 8001f44:	f7ff fa0a 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 130, y_print, YELLOW, BLACK);
 8001f48:	4632      	mov	r2, r6
 8001f4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f4e:	2182      	movs	r1, #130	; 0x82
 8001f50:	20a0      	movs	r0, #160	; 0xa0
 8001f52:	9400      	str	r4, [sp, #0]
 8001f54:	f7ff fa02 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 160, z_print, BLUE, BLACK);
 8001f58:	21a0      	movs	r1, #160	; 0xa0
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	4608      	mov	r0, r1
 8001f60:	9400      	str	r4, [sp, #0]
 8001f62:	f7ff f9fb 	bl	800135c <LCD_DrawString_Color>
    const double angle = atan2(thetaY, thetaX) * 180 / M_PI;
 8001f66:	4640      	mov	r0, r8
 8001f68:	f7fe fab8 	bl	80004dc <__aeabi_i2d>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460d      	mov	r5, r1
 8001f70:	4648      	mov	r0, r9
 8001f72:	f7fe fab3 	bl	80004dc <__aeabi_i2d>
 8001f76:	4622      	mov	r2, r4
 8001f78:	462b      	mov	r3, r5
 8001f7a:	f007 fced 	bl	8009958 <atan2>
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <accelerometerPage+0x480>)
 8001f82:	f7fe fb15 	bl	80005b0 <__aeabi_dmul>
 8001f86:	a336      	add	r3, pc, #216	; (adr r3, 8002060 <accelerometerPage+0x478>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fc3a 	bl	8000804 <__aeabi_ddiv>
 8001f90:	4605      	mov	r5, r0
 8001f92:	460c      	mov	r4, r1
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 8001f94:	f7fe fdbc 	bl	8000b10 <__aeabi_d2iz>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	f2c0 8297 	blt.w	80024cc <accelerometerPage+0x8e4>
 8001f9e:	b284      	uxth	r4, r0
    char angle_print[8];
    sprintf(angle_print, "%03d deg", polishedAngle);
 8001fa0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4931      	ldr	r1, [pc, #196]	; (800206c <accelerometerPage+0x484>)
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f003 ffa6 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(170, 20, angle_print, BLACK, WHITE);
 8001fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	2114      	movs	r1, #20
 8001fb4:	20aa      	movs	r0, #170	; 0xaa
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f7ff f9cf 	bl	800135c <LCD_DrawString_Color>
    insertAngleRecord(polishedAngle);
 8001fbe:	b2e0      	uxtb	r0, r4
 8001fc0:	f7ff fb50 	bl	8001664 <insertAngleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001fc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001fc6:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	dd05      	ble.n	8001fda <accelerometerPage+0x3f2>
        shiftAcceleRecord();
 8001fce:	f7ff fb2d 	bl	800162c <shiftAcceleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001fd2:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	dcf9      	bgt.n	8001fce <accelerometerPage+0x3e6>
    insertAcceleRecord(combined_aX, combined_aY, combined_aZ);
    //if(isRotating() == 1)
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
    char dis_print[10] = "";
 8001fda:	2400      	movs	r4, #0
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
    accleRecord[acceleRecordSize].rawX = rawX;
 8001fde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	800b      	strh	r3, [r1, #0]
    accleRecord[acceleRecordSize].rawX = rawX;
 8001fe6:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8001fea:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
 8001fee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001ff2:	9a08      	ldr	r2, [sp, #32]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 8001ff4:	4651      	mov	r1, sl
    accleRecord[acceleRecordSize].rawY = rawY;
 8001ff6:	f8a3 a002 	strh.w	sl, [r3, #2]
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001ffa:	809a      	strh	r2, [r3, #4]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 8001ffc:	f7ff fb5c 	bl	80016b8 <updateDistance>
    sprintf(dis_print, "%05lu", distanceTraveled);
 8002000:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8002002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002004:	4628      	mov	r0, r5
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4919      	ldr	r1, [pc, #100]	; (8002070 <accelerometerPage+0x488>)
    char dis_print[10] = "";
 800200a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800200e:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
    sprintf(dis_print, "%05lu", distanceTraveled);
 8002012:	f003 ff71 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(100, 190, dis_print, WHITE, BLACK);
 8002016:	462a      	mov	r2, r5
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	21be      	movs	r1, #190	; 0xbe
 800201e:	2064      	movs	r0, #100	; 0x64
 8002020:	9400      	str	r4, [sp, #0]
 8002022:	f7ff f99b 	bl	800135c <LCD_DrawString_Color>
    sprintf(dis_print, "%0.3f", actualDistance);
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <accelerometerPage+0x48c>)
 8002028:	4628      	mov	r0, r5
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	4912      	ldr	r1, [pc, #72]	; (8002078 <accelerometerPage+0x490>)
 8002030:	f003 ff62 	bl	8005ef8 <siprintf>
    LCD_DrawString_Color(160, 190, dis_print, WHITE, BLACK);
 8002034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002038:	462a      	mov	r2, r5
 800203a:	21be      	movs	r1, #190	; 0xbe
 800203c:	20a0      	movs	r0, #160	; 0xa0
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	f7ff f98c 	bl	800135c <LCD_DrawString_Color>
    HAL_Delay(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f001 f8cf 	bl	80031e8 <HAL_Delay>
    free(acceleromterData);
 800204a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800204c:	f002 ffcc 	bl	8004fe8 <free>
    free(compassData);
 8002050:	4658      	mov	r0, fp
}
 8002052:	b02b      	add	sp, #172	; 0xac
 8002054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    free(compassData);
 8002058:	f002 bfc6 	b.w	8004fe8 <free>
 800205c:	f3af 8000 	nop.w
 8002060:	54442d18 	.word	0x54442d18
 8002064:	400921fb 	.word	0x400921fb
 8002068:	40668000 	.word	0x40668000
 800206c:	0800a78c 	.word	0x0800a78c
 8002070:	0800a798 	.word	0x0800a798
 8002074:	20000490 	.word	0x20000490
 8002078:	0800a7a0 	.word	0x0800a7a0
        accleRecord[i].rawX = 0;
 800207c:	2400      	movs	r4, #0
 800207e:	4bd5      	ldr	r3, [pc, #852]	; (80023d4 <accelerometerPage+0x7ec>)
 8002080:	9304      	str	r3, [sp, #16]
 8002082:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8002086:	801c      	strh	r4, [r3, #0]
        accleRecord[i].rawY = 0;
 8002088:	805c      	strh	r4, [r3, #2]
        accleRecord[i].rawZ = 0;
 800208a:	809c      	strh	r4, [r3, #4]
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 800208c:	3306      	adds	r3, #6
 800208e:	429a      	cmp	r2, r3
        accleRecord[i].rawX = 0;
 8002090:	f04f 0500 	mov.w	r5, #0
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8002094:	d1f7      	bne.n	8002086 <accelerometerPage+0x49e>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002096:	2701      	movs	r7, #1
 8002098:	2664      	movs	r6, #100	; 0x64
    acceleRecordSize = 0;
 800209a:	4bcf      	ldr	r3, [pc, #828]	; (80023d8 <accelerometerPage+0x7f0>)
        angleRecord[i] = 0;
 800209c:	22c8      	movs	r2, #200	; 0xc8
    acceleRecordSize = 0;
 800209e:	801c      	strh	r4, [r3, #0]
 80020a0:	9309      	str	r3, [sp, #36]	; 0x24
    distanceTraveled = 0;
 80020a2:	4bce      	ldr	r3, [pc, #824]	; (80023dc <accelerometerPage+0x7f4>)
        angleRecord[i] = 0;
 80020a4:	2100      	movs	r1, #0
 80020a6:	48ce      	ldr	r0, [pc, #824]	; (80023e0 <accelerometerPage+0x7f8>)
    distanceTraveled = 0;
 80020a8:	930e      	str	r3, [sp, #56]	; 0x38
 80020aa:	601c      	str	r4, [r3, #0]
        angleRecord[i] = 0;
 80020ac:	f002 ffbe 	bl	800502c <memset>
    angleRecordSize = 0;
 80020b0:	4bcc      	ldr	r3, [pc, #816]	; (80023e4 <accelerometerPage+0x7fc>)
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020b2:	f10d 0857 	add.w	r8, sp, #87	; 0x57
 80020b6:	222d      	movs	r2, #45	; 0x2d
 80020b8:	213a      	movs	r1, #58	; 0x3a
 80020ba:	f8cd 8000 	str.w	r8, [sp]
 80020be:	48ca      	ldr	r0, [pc, #808]	; (80023e8 <accelerometerPage+0x800>)
    angleRecordSize = 0;
 80020c0:	801c      	strh	r4, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020c2:	463b      	mov	r3, r7
 80020c4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80020c8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        uint8_t setPWLMode = 0x00; //reset accelerometer
 80020cc:	f88d 5057 	strb.w	r5, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020d0:	f002 f876 	bl	80041c0 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80020d4:	4630      	mov	r0, r6
 80020d6:	f001 f887 	bl	80031e8 <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 80020da:	2308      	movs	r3, #8
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020dc:	f8cd 8000 	str.w	r8, [sp]
        uint8_t formatting = 0x05; // full res +-4g
 80020e0:	f04f 0805 	mov.w	r8, #5
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020e4:	222d      	movs	r2, #45	; 0x2d
 80020e6:	213a      	movs	r1, #58	; 0x3a
        setPWLMode = 0x08; //disable auto sleep, always measure
 80020e8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80020ec:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80020f0:	463b      	mov	r3, r7
 80020f2:	48bd      	ldr	r0, [pc, #756]	; (80023e8 <accelerometerPage+0x800>)
 80020f4:	f002 f864 	bl	80041c0 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 80020f8:	ab16      	add	r3, sp, #88	; 0x58
 80020fa:	2231      	movs	r2, #49	; 0x31
 80020fc:	213a      	movs	r1, #58	; 0x3a
 80020fe:	9310      	str	r3, [sp, #64]	; 0x40
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002106:	463b      	mov	r3, r7
 8002108:	48b7      	ldr	r0, [pc, #732]	; (80023e8 <accelerometerPage+0x800>)
        uint8_t formatting = 0x05; // full res +-4g
 800210a:	f88d 8058 	strb.w	r8, [sp, #88]	; 0x58
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 800210e:	f002 f857 	bl	80041c0 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 8002112:	ab18      	add	r3, sp, #96	; 0x60
 8002114:	2200      	movs	r2, #0
 8002116:	213a      	movs	r1, #58	; 0x3a
 8002118:	9311      	str	r3, [sp, #68]	; 0x44
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002120:	463b      	mov	r3, r7
 8002122:	48b1      	ldr	r0, [pc, #708]	; (80023e8 <accelerometerPage+0x800>)
        uint8_t debug = 0x00;
 8002124:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 8002128:	f002 f8fe 	bl	8004328 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 800212c:	2100      	movs	r1, #0
 800212e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002132:	4608      	mov	r0, r1
 8002134:	22f0      	movs	r2, #240	; 0xf0
 8002136:	9400      	str	r4, [sp, #0]
 8002138:	f7fe ffac 	bl	8001094 <LCD_Clear>
        HAL_Delay(100);
 800213c:	4630      	mov	r0, r6
 800213e:	f001 f853 	bl	80031e8 <HAL_Delay>
        if (debug != 0xE5) {
 8002142:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002146:	2be5      	cmp	r3, #229	; 0xe5
 8002148:	f040 8196 	bne.w	8002478 <accelerometerPage+0x890>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 800214c:	230a      	movs	r3, #10
 800214e:	4631      	mov	r1, r6
 8002150:	4aa6      	ldr	r2, [pc, #664]	; (80023ec <accelerometerPage+0x804>)
 8002152:	2000      	movs	r0, #0
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	9400      	str	r4, [sp, #0]
 8002158:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800215c:	f7ff f926 	bl	80013ac <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8002160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002164:	f001 f840 	bl	80031e8 <HAL_Delay>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002168:	2100      	movs	r1, #0
 800216a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800216e:	4608      	mov	r0, r1
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	9400      	str	r4, [sp, #0]
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 8002174:	4689      	mov	r9, r1
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002176:	f7fe ff8d 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color(80, 100, output_text, RED, WHITE);
 800217a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217e:	f04f 0832 	mov.w	r8, #50	; 0x32
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4631      	mov	r1, r6
 8002186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800218a:	2050      	movs	r0, #80	; 0x50
 800218c:	4a98      	ldr	r2, [pc, #608]	; (80023f0 <accelerometerPage+0x808>)
 800218e:	f7ff f8e5 	bl	800135c <LCD_DrawString_Color>
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 8002192:	4643      	mov	r3, r8
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 8002194:	f04f 0b06 	mov.w	fp, #6
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 8002198:	46ca      	mov	sl, r9
 800219a:	46c8      	mov	r8, r9
 800219c:	461d      	mov	r5, r3
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 800219e:	4f92      	ldr	r7, [pc, #584]	; (80023e8 <accelerometerPage+0x800>)
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80021a0:	2006      	movs	r0, #6
 80021a2:	f002 ff19 	bl	8004fd8 <malloc>
 80021a6:	4604      	mov	r4, r0
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 80021a8:	2232      	movs	r2, #50	; 0x32
 80021aa:	213a      	movs	r1, #58	; 0x3a
 80021ac:	2301      	movs	r3, #1
 80021ae:	4638      	mov	r0, r7
 80021b0:	e9cd b601 	strd	fp, r6, [sp, #4]
 80021b4:	9400      	str	r4, [sp, #0]
 80021b6:	f002 f8b7 	bl	8004328 <HAL_I2C_Mem_Read>
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80021ba:	f9b4 3000 	ldrsh.w	r3, [r4]
            free(arrayOfData);
 80021be:	4620      	mov	r0, r4
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80021c0:	eb08 1863 	add.w	r8, r8, r3, asr #5
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 80021c4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        for (short i = 0; i < 50; ++i) {
 80021c8:	3d01      	subs	r5, #1
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 80021ca:	eb0a 1a63 	add.w	sl, sl, r3, asr #5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 80021ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        for (short i = 0; i < 50; ++i) {
 80021d2:	b2ad      	uxth	r5, r5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 80021d4:	eb09 1963 	add.w	r9, r9, r3, asr #5
            free(arrayOfData);
 80021d8:	f002 ff06 	bl	8004fe8 <free>
            HAL_Delay(10);
 80021dc:	200a      	movs	r0, #10
 80021de:	f001 f803 	bl	80031e8 <HAL_Delay>
        for (short i = 0; i < 50; ++i) {
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d1dc      	bne.n	80021a0 <accelerometerPage+0x5b8>
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80021e6:	462b      	mov	r3, r5
 80021e8:	4645      	mov	r5, r8
 80021ea:	4628      	mov	r0, r5
 80021ec:	4698      	mov	r8, r3
 80021ee:	f7fe f975 	bl	80004dc <__aeabi_i2d>
 80021f2:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <accelerometerPage+0x80c>)
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 80021f4:	4a80      	ldr	r2, [pc, #512]	; (80023f8 <accelerometerPage+0x810>)
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 80021f6:	4c81      	ldr	r4, [pc, #516]	; (80023fc <accelerometerPage+0x814>)
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80021f8:	930a      	str	r3, [sp, #40]	; 0x28
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 80021fa:	920c      	str	r2, [sp, #48]	; 0x30
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80021fc:	ab1c      	add	r3, sp, #112	; 0x70
 80021fe:	aa21      	add	r2, sp, #132	; 0x84
 8002200:	9305      	str	r3, [sp, #20]
 8002202:	9208      	str	r2, [sp, #32]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002204:	4b7e      	ldr	r3, [pc, #504]	; (8002400 <accelerometerPage+0x818>)
 8002206:	2200      	movs	r2, #0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002208:	9406      	str	r4, [sp, #24]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 800220a:	f7fe fafb 	bl	8000804 <__aeabi_ddiv>
 800220e:	f007 fb23 	bl	8009858 <floor>
 8002212:	f7fe fc7d 	bl	8000b10 <__aeabi_d2iz>
 8002216:	4603      	mov	r3, r0
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002218:	4650      	mov	r0, sl
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 800221a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80023f4 <accelerometerPage+0x80c>
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 800221e:	af1b      	add	r7, sp, #108	; 0x6c
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002220:	f8aa 3000 	strh.w	r3, [sl]
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002224:	f7fe f95a 	bl	80004dc <__aeabi_i2d>
 8002228:	2200      	movs	r2, #0
 800222a:	4b75      	ldr	r3, [pc, #468]	; (8002400 <accelerometerPage+0x818>)
 800222c:	f7fe faea 	bl	8000804 <__aeabi_ddiv>
 8002230:	f007 fb12 	bl	8009858 <floor>
 8002234:	f7fe fc6c 	bl	8000b10 <__aeabi_d2iz>
 8002238:	4603      	mov	r3, r0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 800223a:	4648      	mov	r0, r9
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800223c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80023f8 <accelerometerPage+0x810>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002240:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002244:	f8a9 3000 	strh.w	r3, [r9]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002248:	f7fe f948 	bl	80004dc <__aeabi_i2d>
 800224c:	2200      	movs	r2, #0
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <accelerometerPage+0x818>)
 8002250:	f7fe fad8 	bl	8000804 <__aeabi_ddiv>
 8002254:	f007 fb00 	bl	8009858 <floor>
 8002258:	f7fe fc5a 	bl	8000b10 <__aeabi_d2iz>
 800225c:	4967      	ldr	r1, [pc, #412]	; (80023fc <accelerometerPage+0x814>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 800225e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002262:	22f0      	movs	r2, #240	; 0xf0
 8002264:	f8cd 8000 	str.w	r8, [sp]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002268:	8008      	strh	r0, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800226a:	4641      	mov	r1, r8
 800226c:	4640      	mov	r0, r8
 800226e:	f7fe ff11 	bl	8001094 <LCD_Clear>
        initializeHMC5883L();
 8002272:	f7ff fbbd 	bl	80019f0 <initializeHMC5883L>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8002276:	200a      	movs	r0, #10
 8002278:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800227c:	2164      	movs	r1, #100	; 0x64
 800227e:	e9cd 8000 	strd	r8, r0, [sp]
 8002282:	4a60      	ldr	r2, [pc, #384]	; (8002404 <accelerometerPage+0x81c>)
 8002284:	4640      	mov	r0, r8
 8002286:	f7ff f891 	bl	80013ac <LCD_DrawString_Color_With_Delay>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 800228a:	9b05      	ldr	r3, [sp, #20]
 800228c:	9a08      	ldr	r2, [sp, #32]
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 800228e:	ae20      	add	r6, sp, #128	; 0x80
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002290:	e9cd 881b 	strd	r8, r8, [sp, #108]	; 0x6c
 8002294:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
 8002298:	e9c3 8801 	strd	r8, r8, [r3, #4]
 800229c:	f8c3 800c 	str.w	r8, [r3, #12]
 80022a0:	e9cd 8825 	strd	r8, r8, [sp, #148]	; 0x94
 80022a4:	e9c2 8801 	strd	r8, r8, [r2, #4]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80022a8:	4957      	ldr	r1, [pc, #348]	; (8002408 <accelerometerPage+0x820>)
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80022aa:	f8c2 800c 	str.w	r8, [r2, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80022ae:	4638      	mov	r0, r7
 80022b0:	f9ba 2000 	ldrsh.w	r2, [sl]
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80022b4:	e9cb 8801 	strd	r8, r8, [fp, #4]
 80022b8:	f8cb 800c 	str.w	r8, [fp, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80022bc:	f003 fe1c 	bl	8005ef8 <siprintf>
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 80022c0:	f9b9 2000 	ldrsh.w	r2, [r9]
 80022c4:	4950      	ldr	r1, [pc, #320]	; (8002408 <accelerometerPage+0x820>)
 80022c6:	4630      	mov	r0, r6
 80022c8:	f003 fe16 	bl	8005ef8 <siprintf>
        sprintf(z_debug, "%05d", initZ_Acc_Reading);
 80022cc:	9906      	ldr	r1, [sp, #24]
 80022ce:	ad25      	add	r5, sp, #148	; 0x94
 80022d0:	f9b1 2000 	ldrsh.w	r2, [r1]
 80022d4:	4628      	mov	r0, r5
 80022d6:	494c      	ldr	r1, [pc, #304]	; (8002408 <accelerometerPage+0x820>)
 80022d8:	f003 fe0e 	bl	8005ef8 <siprintf>
        strcat(x_debug, "  x");
 80022dc:	4638      	mov	r0, r7
 80022de:	f7fd ffa3 	bl	8000228 <strlen>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a49      	ldr	r2, [pc, #292]	; (800240c <accelerometerPage+0x824>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 80022e6:	f64f 74ff 	movw	r4, #65535	; 0xffff
        strcat(x_debug, "  x");
 80022ea:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 80022ec:	f04f 090a 	mov.w	r9, #10
        strcat(x_debug, "  x");
 80022f0:	50f8      	str	r0, [r7, r3]
        strcat(y_debug, "  y");
 80022f2:	4630      	mov	r0, r6
 80022f4:	f7fd ff98 	bl	8000228 <strlen>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a45      	ldr	r2, [pc, #276]	; (8002410 <accelerometerPage+0x828>)
 80022fc:	6810      	ldr	r0, [r2, #0]
 80022fe:	50f0      	str	r0, [r6, r3]
        strcat(z_debug, "  z");
 8002300:	4628      	mov	r0, r5
 8002302:	f7fd ff91 	bl	8000228 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	4a42      	ldr	r2, [pc, #264]	; (8002414 <accelerometerPage+0x82c>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 800230a:	218c      	movs	r1, #140	; 0x8c
        strcat(z_debug, "  z");
 800230c:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 800230e:	9400      	str	r4, [sp, #0]
 8002310:	463a      	mov	r2, r7
        strcat(z_debug, "  z");
 8002312:	50e8      	str	r0, [r5, r3]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002314:	4643      	mov	r3, r8
 8002316:	203c      	movs	r0, #60	; 0x3c
 8002318:	f7ff f820 	bl	800135c <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 160, y_debug, BLACK, WHITE);
 800231c:	4643      	mov	r3, r8
 800231e:	4632      	mov	r2, r6
 8002320:	21a0      	movs	r1, #160	; 0xa0
 8002322:	203c      	movs	r0, #60	; 0x3c
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	f7ff f819 	bl	800135c <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 180, z_debug, BLACK, WHITE);
 800232a:	4643      	mov	r3, r8
 800232c:	462a      	mov	r2, r5
 800232e:	21b4      	movs	r1, #180	; 0xb4
 8002330:	203c      	movs	r0, #60	; 0x3c
 8002332:	9400      	str	r4, [sp, #0]
 8002334:	f7ff f812 	bl	800135c <LCD_DrawString_Color>
        HAL_Delay(1500);
 8002338:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800233c:	f000 ff54 	bl	80031e8 <HAL_Delay>
        currentPage = accelerometer;
 8002340:	2202      	movs	r2, #2
        changingPage = 0;
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <accelerometerPage+0x830>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002344:	4641      	mov	r1, r8
        changingPage = 0;
 8002346:	f8c3 8000 	str.w	r8, [r3]
        currentPage = accelerometer;
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <accelerometerPage+0x834>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 800234c:	4640      	mov	r0, r8
 800234e:	f8cd 8000 	str.w	r8, [sp]
        currentPage = accelerometer;
 8002352:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002354:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002358:	22f0      	movs	r2, #240	; 0xf0
 800235a:	f7fe fe9b 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 800235e:	231f      	movs	r3, #31
 8002360:	2128      	movs	r1, #40	; 0x28
 8002362:	4648      	mov	r0, r9
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <accelerometerPage+0x838>)
 8002366:	e9cd 4900 	strd	r4, r9, [sp]
 800236a:	f7ff f81f 	bl	80013ac <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 800236e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002372:	2282      	movs	r2, #130	; 0x82
 8002374:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002378:	2014      	movs	r0, #20
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2319      	movs	r3, #25
 800237e:	f7fe fe89 	bl	8001094 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8002382:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002386:	f240 111d 	movw	r1, #285	; 0x11d
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <accelerometerPage+0x83c>)
 800238c:	201e      	movs	r0, #30
 800238e:	e9cd 8900 	strd	r8, r9, [sp]
 8002392:	f7ff f80b 	bl	80013ac <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 8002396:	2014      	movs	r0, #20
 8002398:	f000 ff26 	bl	80031e8 <HAL_Delay>
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 800239c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80023a0:	2164      	movs	r1, #100	; 0x64
 80023a2:	2028      	movs	r0, #40	; 0x28
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <accelerometerPage+0x840>)
 80023a6:	f8cd 8000 	str.w	r8, [sp]
 80023aa:	f7fe ffd7 	bl	800135c <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 80023ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023b2:	2182      	movs	r1, #130	; 0x82
 80023b4:	2028      	movs	r0, #40	; 0x28
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <accelerometerPage+0x844>)
 80023b8:	f8cd 8000 	str.w	r8, [sp]
 80023bc:	f7fe ffce 	bl	800135c <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 80023c0:	231f      	movs	r3, #31
 80023c2:	21a0      	movs	r1, #160	; 0xa0
 80023c4:	2028      	movs	r0, #40	; 0x28
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <accelerometerPage+0x848>)
 80023c8:	f8cd 8000 	str.w	r8, [sp]
 80023cc:	f7fe ffc6 	bl	800135c <LCD_DrawString_Color>
 80023d0:	e030      	b.n	8002434 <accelerometerPage+0x84c>
 80023d2:	bf00      	nop
 80023d4:	20000238 	.word	0x20000238
 80023d8:	20000234 	.word	0x20000234
 80023dc:	20000564 	.word	0x20000564
 80023e0:	20000498 	.word	0x20000498
 80023e4:	20000560 	.word	0x20000560
 80023e8:	20000598 	.word	0x20000598
 80023ec:	0800a6c0 	.word	0x0800a6c0
 80023f0:	0800a6f0 	.word	0x0800a6f0
 80023f4:	20000634 	.word	0x20000634
 80023f8:	20000636 	.word	0x20000636
 80023fc:	20000638 	.word	0x20000638
 8002400:	40490000 	.word	0x40490000
 8002404:	0800a700 	.word	0x0800a700
 8002408:	0800a724 	.word	0x0800a724
 800240c:	0800a72c 	.word	0x0800a72c
 8002410:	0800a730 	.word	0x0800a730
 8002414:	0800a734 	.word	0x0800a734
 8002418:	20000000 	.word	0x20000000
 800241c:	20000562 	.word	0x20000562
 8002420:	0800a738 	.word	0x0800a738
 8002424:	0800a630 	.word	0x0800a630
 8002428:	0800a754 	.word	0x0800a754
 800242c:	0800a758 	.word	0x0800a758
 8002430:	0800a75c 	.word	0x0800a75c
        LCD_DrawString_Color(25, 190, output_text, WHITE, BLACK);
 8002434:	4623      	mov	r3, r4
 8002436:	21be      	movs	r1, #190	; 0xbe
 8002438:	2019      	movs	r0, #25
 800243a:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <accelerometerPage+0x900>)
 800243c:	f8cd 8000 	str.w	r8, [sp]
 8002440:	f7fe ff8c 	bl	800135c <LCD_DrawString_Color>
        if (debug != 0xE5) {
 8002444:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002448:	2be5      	cmp	r3, #229	; 0xe5
 800244a:	f43f abf1 	beq.w	8001c30 <accelerometerPage+0x48>
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 800244e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002452:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002456:	208c      	movs	r0, #140	; 0x8c
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <accelerometerPage+0x904>)
 800245a:	9400      	str	r4, [sp, #0]
 800245c:	f7fe ff7e 	bl	800135c <LCD_DrawString_Color>
 8002460:	f7ff bbe6 	b.w	8001c30 <accelerometerPage+0x48>
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8002464:	f7fe f83a 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002468:	a31d      	add	r3, pc, #116	; (adr r3, 80024e0 <accelerometerPage+0x8f8>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f89f 	bl	80005b0 <__aeabi_dmul>
 8002472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002476:	e4d5      	b.n	8001e24 <accelerometerPage+0x23c>
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 8002478:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800247c:	4631      	mov	r1, r6
 800247e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002482:	2032      	movs	r0, #50	; 0x32
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <accelerometerPage+0x908>)
 8002486:	f8cd 8004 	str.w	r8, [sp, #4]
 800248a:	9400      	str	r4, [sp, #0]
 800248c:	f7fe ff8e 	bl	80013ac <LCD_DrawString_Color_With_Delay>
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 8002490:	2300      	movs	r3, #0
 8002492:	2003      	movs	r0, #3
 8002494:	2196      	movs	r1, #150	; 0x96
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <accelerometerPage+0x90c>)
 8002498:	9001      	str	r0, [sp, #4]
 800249a:	9400      	str	r4, [sp, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff85 	bl	80013ac <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 80024a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024a6:	f000 fe9f 	bl	80031e8 <HAL_Delay>
            currentPage = home;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <accelerometerPage+0x910>)
            changingPage = 1;
 80024ac:	4a13      	ldr	r2, [pc, #76]	; (80024fc <accelerometerPage+0x914>)
            currentPage = home;
 80024ae:	701d      	strb	r5, [r3, #0]
            changingPage = 1;
 80024b0:	6017      	str	r7, [r2, #0]
}
 80024b2:	b02b      	add	sp, #172	; 0xac
 80024b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                                                                                     : 0.0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	2400      	movs	r4, #0
 80024bc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80024c0:	e4ca      	b.n	8001e58 <accelerometerPage+0x270>
                                                                                                     : 0.0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	2400      	movs	r4, #0
 80024c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80024ca:	e4df      	b.n	8001e8c <accelerometerPage+0x2a4>
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 80024cc:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 80024d0:	4628      	mov	r0, r5
 80024d2:	f7fe fb1d 	bl	8000b10 <__aeabi_d2iz>
 80024d6:	f5c0 74b4 	rsb	r4, r0, #360	; 0x168
 80024da:	b2a4      	uxth	r4, r4
 80024dc:	e560      	b.n	8001fa0 <accelerometerPage+0x3b8>
 80024de:	bf00      	nop
 80024e0:	8e8a71de 	.word	0x8e8a71de
 80024e4:	3f6ff2e4 	.word	0x3f6ff2e4
 80024e8:	0800a760 	.word	0x0800a760
 80024ec:	0800a768 	.word	0x0800a768
 80024f0:	0800a67c 	.word	0x0800a67c
 80024f4:	0800a690 	.word	0x0800a690
 80024f8:	20000562 	.word	0x20000562
 80024fc:	20000000 	.word	0x20000000

08002500 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002500:	2001      	movs	r0, #1
{
 8002502:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002504:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800250c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002510:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002512:	900c      	str	r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002514:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002516:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002518:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002520:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002524:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002528:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800252c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002530:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002532:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002536:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002538:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800253c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253e:	f002 f87f 	bl	8004640 <HAL_RCC_OscConfig>
 8002542:	b108      	cbz	r0, 8002548 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002546:	e7fe      	b.n	8002546 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002548:	4603      	mov	r3, r0
 800254a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254c:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002550:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002556:	4621      	mov	r1, r4
 8002558:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800255a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255c:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800255e:	f002 fa9b 	bl	8004a98 <HAL_RCC_ClockConfig>
 8002562:	b108      	cbz	r0, 8002568 <SystemClock_Config+0x68>
 8002564:	b672      	cpsid	i
  while (1)
 8002566:	e7fe      	b.n	8002566 <SystemClock_Config+0x66>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256c:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800256e:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002570:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002572:	f002 fb51 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 8002576:	b108      	cbz	r0, 800257c <SystemClock_Config+0x7c>
 8002578:	b672      	cpsid	i
  while (1)
 800257a:	e7fe      	b.n	800257a <SystemClock_Config+0x7a>
}
 800257c:	b016      	add	sp, #88	; 0x58
 800257e:	bd10      	pop	{r4, pc}

08002580 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	2400      	movs	r4, #0
{
 8002582:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002584:	2710      	movs	r7, #16
{
 8002586:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8002588:	f000 fe0a 	bl	80031a0 <HAL_Init>
  SystemClock_Config();
 800258c:	f7ff ffb8 	bl	8002500 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002594:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002598:	4ba4      	ldr	r3, [pc, #656]	; (800282c <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800259c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800259e:	2107      	movs	r1, #7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80025a8:	48a1      	ldr	r0, [pc, #644]	; (8002830 <main+0x2b0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80025ae:	9202      	str	r2, [sp, #8]
 80025b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b4:	2603      	movs	r6, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	433a      	orrs	r2, r7
 80025b8:	619a      	str	r2, [r3, #24]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	403a      	ands	r2, r7
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	f042 0204 	orr.w	r2, r2, #4
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	f002 0204 	and.w	r2, r2, #4
 80025d0:	9204      	str	r2, [sp, #16]
 80025d2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	f002 0208 	and.w	r2, r2, #8
 80025e2:	9205      	str	r2, [sp, #20]
 80025e4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80025f0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	9306      	str	r3, [sp, #24]
 80025f8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80025fa:	f001 faf7 	bl	8003bec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80025fe:	4622      	mov	r2, r4
 8002600:	4639      	mov	r1, r7
 8002602:	488c      	ldr	r0, [pc, #560]	; (8002834 <main+0x2b4>)
 8002604:	f001 faf2 	bl	8003bec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002608:	2123      	movs	r1, #35	; 0x23
 800260a:	462a      	mov	r2, r5
 800260c:	488a      	ldr	r0, [pc, #552]	; (8002838 <main+0x2b8>)
 800260e:	f001 faed 	bl	8003bec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002612:	4622      	mov	r2, r4
 8002614:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002618:	4888      	ldr	r0, [pc, #544]	; (800283c <main+0x2bc>)
 800261a:	f001 fae7 	bl	8003bec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800261e:	4622      	mov	r2, r4
 8002620:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002624:	4886      	ldr	r0, [pc, #536]	; (8002840 <main+0x2c0>)
 8002626:	f001 fae1 	bl	8003bec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 800262a:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262c:	4880      	ldr	r0, [pc, #512]	; (8002830 <main+0x2b0>)
 800262e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8002630:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002636:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002638:	f001 f9aa 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800263c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800263e:	487c      	ldr	r0, [pc, #496]	; (8002830 <main+0x2b0>)
 8002640:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002642:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002644:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002648:	f001 f9a2 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800264c:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <main+0x2c4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264e:	4878      	ldr	r0, [pc, #480]	; (8002830 <main+0x2b0>)
 8002650:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002652:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002654:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002656:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002658:	f001 f99a 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800265c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002660:	4877      	ldr	r0, [pc, #476]	; (8002840 <main+0x2c0>)
 8002662:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002664:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f001 f991 	bl	8003990 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	4871      	ldr	r0, [pc, #452]	; (8002834 <main+0x2b4>)
 8002670:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f001 f98a 	bl	8003990 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	486d      	ldr	r0, [pc, #436]	; (8002834 <main+0x2b4>)
 800267e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	e9cd 7507 	strd	r7, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002684:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f001 f982 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800268c:	2323      	movs	r3, #35	; 0x23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	486a      	ldr	r0, [pc, #424]	; (8002838 <main+0x2b8>)
 8002690:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002692:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f001 f979 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800269e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a2:	4866      	ldr	r0, [pc, #408]	; (800283c <main+0x2bc>)
 80026a4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ac:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f001 f96f 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ba:	4861      	ldr	r0, [pc, #388]	; (8002840 <main+0x2c0>)
 80026bc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c4:	f001 f964 	bl	8003990 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80026c8:	4622      	mov	r2, r4
 80026ca:	4621      	mov	r1, r4
 80026cc:	200a      	movs	r0, #10
 80026ce:	f001 f8fb 	bl	80038c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80026d2:	200a      	movs	r0, #10
 80026d4:	f001 f936 	bl	8003944 <HAL_NVIC_EnableIRQ>
  Timing.AddressSetupTime = 15;
 80026d8:	230f      	movs	r3, #15
  Timing.DataSetupTime = 255;
 80026da:	20ff      	movs	r0, #255	; 0xff
  Timing.AddressHoldTime = 15;
 80026dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Timing.BusTurnAroundDuration = 15;
 80026e0:	930a      	str	r3, [sp, #40]	; 0x28
  Timing.DataLatency = 17;
 80026e2:	2311      	movs	r3, #17
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80026e4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80026e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.DataSetupTime = 255;
 80026ec:	9009      	str	r0, [sp, #36]	; 0x24
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80026ee:	4856      	ldr	r0, [pc, #344]	; (8002848 <main+0x2c8>)
  Timing.DataLatency = 17;
 80026f0:	930c      	str	r3, [sp, #48]	; 0x30
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80026f2:	4b56      	ldr	r3, [pc, #344]	; (800284c <main+0x2cc>)
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80026f4:	6001      	str	r1, [r0, #0]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80026f6:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80026f8:	a907      	add	r1, sp, #28
 80026fa:	4622      	mov	r2, r4
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80026fc:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002700:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002704:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002708:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800270c:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002710:	940d      	str	r4, [sp, #52]	; 0x34
  Timing.CLKDivision = 16;
 8002712:	970b      	str	r7, [sp, #44]	; 0x2c
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002714:	6147      	str	r7, [r0, #20]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002716:	6104      	str	r4, [r0, #16]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002718:	6043      	str	r3, [r0, #4]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800271a:	f002 fb85 	bl	8004e28 <HAL_SRAM_Init>
 800271e:	b108      	cbz	r0, 8002724 <main+0x1a4>
 8002720:	b672      	cpsid	i
  while (1)
 8002722:	e7fe      	b.n	8002722 <main+0x1a2>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002724:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002728:	4a49      	ldr	r2, [pc, #292]	; (8002850 <main+0x2d0>)
  hadc2.Instance = ADC2;
 800272a:	4c4a      	ldr	r4, [pc, #296]	; (8002854 <main+0x2d4>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800272c:	69d3      	ldr	r3, [r2, #28]
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	61d3      	str	r3, [r2, #28]
  hadc2.Instance = ADC2;
 8002734:	4b48      	ldr	r3, [pc, #288]	; (8002858 <main+0x2d8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002736:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800273a:	9009      	str	r0, [sp, #36]	; 0x24
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800273c:	60a0      	str	r0, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800273e:	7520      	strb	r0, [r4, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002740:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002742:	4620      	mov	r0, r4
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002744:	7325      	strb	r5, [r4, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002746:	61e1      	str	r1, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 8002748:	6125      	str	r5, [r4, #16]
  hadc2.Instance = ADC2;
 800274a:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800274c:	f000 ff82 	bl	8003654 <HAL_ADC_Init>
 8002750:	b108      	cbz	r0, 8002756 <main+0x1d6>
 8002752:	b672      	cpsid	i
  while (1)
 8002754:	e7fe      	b.n	8002754 <main+0x1d4>
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002756:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002758:	4620      	mov	r0, r4
 800275a:	a907      	add	r1, sp, #28
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800275c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800275e:	e9cd 6507 	strd	r6, r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002762:	f000 fe09 	bl	8003378 <HAL_ADC_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	b108      	cbz	r0, 800276e <main+0x1ee>
 800276a:	b672      	cpsid	i
  while (1)
 800276c:	e7fe      	b.n	800276c <main+0x1ec>
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Instance = I2C2;
 8002772:	483a      	ldr	r0, [pc, #232]	; (800285c <main+0x2dc>)
 8002774:	493a      	ldr	r1, [pc, #232]	; (8002860 <main+0x2e0>)
  hi2c2.Init.OwnAddress2 = 0;
 8002776:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c2.Instance = I2C2;
 800277a:	6001      	str	r1, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800277c:	4939      	ldr	r1, [pc, #228]	; (8002864 <main+0x2e4>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800277e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002782:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002784:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.ClockSpeed = 400000;
 8002786:	6041      	str	r1, [r0, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002788:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800278a:	f001 fc51 	bl	8004030 <HAL_I2C_Init>
 800278e:	4606      	mov	r6, r0
 8002790:	2800      	cmp	r0, #0
 8002792:	d13f      	bne.n	8002814 <main+0x294>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8002794:	4620      	mov	r0, r4
 8002796:	f001 f809 	bl	80037ac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_PollForConversion(&hadc2, 1000);
 800279a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 fd34 	bl	800320c <HAL_ADC_PollForConversion>
  currentPage = home;
 80027a4:	4d30      	ldr	r5, [pc, #192]	; (8002868 <main+0x2e8>)
  HAL_ADC_Start(&hadc2);
 80027a6:	4620      	mov	r0, r4
 80027a8:	f000 fec4 	bl	8003534 <HAL_ADC_Start>
  LCD_INIT();
 80027ac:	f7fe fc18 	bl	8000fe0 <LCD_INIT>
  HAL_Delay(50);
 80027b0:	2032      	movs	r0, #50	; 0x32
  currentPage = home;
 80027b2:	702e      	strb	r6, [r5, #0]
  HAL_Delay(50);
 80027b4:	f000 fd18 	bl	80031e8 <HAL_Delay>
  while (!XPT2046_Touch_Calibrate());
 80027b8:	f000 fa96 	bl	8002ce8 <XPT2046_Touch_Calibrate>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d0fb      	beq.n	80027b8 <main+0x238>
  LCD_GramScan(1);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe fe21 	bl	8001408 <LCD_GramScan>
  LCD_Clear(0, 0, 240, 320, BLACK);
 80027c6:	2100      	movs	r1, #0
    if (changingPage) {
 80027c8:	4e28      	ldr	r6, [pc, #160]	; (800286c <main+0x2ec>)
  LCD_Clear(0, 0, 240, 320, BLACK);
 80027ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027ce:	22f0      	movs	r2, #240	; 0xf0
 80027d0:	4608      	mov	r0, r1
 80027d2:	9100      	str	r1, [sp, #0]
 80027d4:	f7fe fc5e 	bl	8001094 <LCD_Clear>
    if (changingPage) {
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	bb1b      	cbnz	r3, 8002824 <main+0x2a4>
  HAL_Delay(500);
 80027dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027e0:	f000 fd02 	bl	80031e8 <HAL_Delay>
        ucXPT2046_TouchFlag = 0;
 80027e4:	2700      	movs	r7, #0
 80027e6:	4c22      	ldr	r4, [pc, #136]	; (8002870 <main+0x2f0>)
 80027e8:	e008      	b.n	80027fc <main+0x27c>
    if (ucXPT2046_TouchFlag == 1) {
 80027ea:	7823      	ldrb	r3, [r4, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <main+0x276>
        Check_touchkey();
 80027f0:	f7fe fedc 	bl	80015ac <Check_touchkey>
        ucXPT2046_TouchFlag = 0;
 80027f4:	7027      	strb	r7, [r4, #0]
    HAL_Delay(150);
 80027f6:	2096      	movs	r0, #150	; 0x96
 80027f8:	f000 fcf6 	bl	80031e8 <HAL_Delay>
  	if (currentPage == home) mainPage();
 80027fc:	782b      	ldrb	r3, [r5, #0]
 80027fe:	b11b      	cbz	r3, 8002808 <main+0x288>
    else if (currentPage == weight) weightPage();
 8002800:	2b01      	cmp	r3, #1
 8002802:	d009      	beq.n	8002818 <main+0x298>
    else if (currentPage == accelerometer) accelerometerPage();
 8002804:	2b02      	cmp	r3, #2
 8002806:	d00a      	beq.n	800281e <main+0x29e>
    if (changingPage) {
 8002808:	6833      	ldr	r3, [r6, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ed      	beq.n	80027ea <main+0x26a>
 800280e:	f7fe fe6d 	bl	80014ec <mainPage.part.0>
 8002812:	e7ea      	b.n	80027ea <main+0x26a>
 8002814:	b672      	cpsid	i
  while (1)
 8002816:	e7fe      	b.n	8002816 <main+0x296>
    else if (currentPage == weight) weightPage();
 8002818:	f7ff f90e 	bl	8001a38 <weightPage>
 800281c:	e7e5      	b.n	80027ea <main+0x26a>
    else if (currentPage == accelerometer) accelerometerPage();
 800281e:	f7ff f9e3 	bl	8001be8 <accelerometerPage>
 8002822:	e7e2      	b.n	80027ea <main+0x26a>
 8002824:	f7fe fe62 	bl	80014ec <mainPage.part.0>
 8002828:	e7d8      	b.n	80027dc <main+0x25c>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40011800 	.word	0x40011800
 8002834:	40010800 	.word	0x40010800
 8002838:	40010c00 	.word	0x40010c00
 800283c:	40011400 	.word	0x40011400
 8002840:	40011000 	.word	0x40011000
 8002844:	10210000 	.word	0x10210000
 8002848:	200005ec 	.word	0x200005ec
 800284c:	a0000104 	.word	0xa0000104
 8002850:	40010000 	.word	0x40010000
 8002854:	20000568 	.word	0x20000568
 8002858:	40012800 	.word	0x40012800
 800285c:	20000598 	.word	0x20000598
 8002860:	40005800 	.word	0x40005800
 8002864:	00061a80 	.word	0x00061a80
 8002868:	20000562 	.word	0x20000562
 800286c:	20000000 	.word	0x20000000
 8002870:	200006f8 	.word	0x200006f8

08002874 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_MspInit+0x3c>)
{
 8002876:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002878:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800287a:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	f002 0201 	and.w	r2, r2, #1
 8002888:	9200      	str	r2, [sp, #0]
 800288a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002892:	61da      	str	r2, [r3, #28]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800289e:	684b      	ldr	r3, [r1, #4]
 80028a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	b002      	add	sp, #8
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000

080028b8 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	2300      	movs	r3, #0
{
 80028ba:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC2)
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_ADC_MspInit+0x5c>)
 80028be:	6801      	ldr	r1, [r0, #0]
{
 80028c0:	b087      	sub	sp, #28
  if(hadc->Instance==ADC2)
 80028c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC2)
 80028cc:	d001      	beq.n	80028d2 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80028ce:	b007      	add	sp, #28
 80028d0:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028d2:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d4:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028e6:	619a      	str	r2, [r3, #24]
 80028e8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	f042 0204 	orr.w	r2, r2, #4
 80028fc:	619a      	str	r2, [r3, #24]
 80028fe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002900:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f001 f840 	bl	8003990 <HAL_GPIO_Init>
}
 8002910:	b007      	add	sp, #28
 8002912:	bd30      	pop	{r4, r5, pc}
 8002914:	40012800 	.word	0x40012800
 8002918:	40010800 	.word	0x40010800

0800291c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	2300      	movs	r3, #0
{
 800291e:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_I2C_MspInit+0x5c>)
 8002922:	6801      	ldr	r1, [r0, #0]
{
 8002924:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8002926:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800292c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8002930:	d001      	beq.n	8002936 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002932:	b007      	add	sp, #28
 8002934:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002936:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293c:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	4c0f      	ldr	r4, [pc, #60]	; (800297c <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	69a3      	ldr	r3, [r4, #24]
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	61a3      	str	r3, [r4, #24]
 800294a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800294c:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002958:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800295a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f001 f818 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002960:	69e3      	ldr	r3, [r4, #28]
 8002962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002966:	61e3      	str	r3, [r4, #28]
 8002968:	69e3      	ldr	r3, [r4, #28]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	9b01      	ldr	r3, [sp, #4]
}
 8002972:	b007      	add	sp, #28
 8002974:	bd30      	pop	{r4, r5, pc}
 8002976:	bf00      	nop
 8002978:	40005800 	.word	0x40005800
 800297c:	40021000 	.word	0x40021000
 8002980:	40010c00 	.word	0x40010c00

08002984 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002984:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002986:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800298a:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 800298c:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800298e:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8002990:	bb12      	cbnz	r2, 80029d8 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8002992:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002996:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002998:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 800299c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80029a0:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 80029a4:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029a6:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ae:	6153      	str	r3, [r2, #20]
 80029b0:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b2:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80029bc:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c2:	f000 ffe5 	bl	8003990 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029c6:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <HAL_SRAM_MspInit+0x60>)
 80029cc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029d2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d4:	f000 ffdc 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80029d8:	b007      	add	sp, #28
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029dc:	200006f0 	.word	0x200006f0
 80029e0:	40011800 	.word	0x40011800
 80029e4:	40011400 	.word	0x40011400

080029e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler>
 80029ea:	bf00      	nop

080029ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <HardFault_Handler>
 80029ee:	bf00      	nop

080029f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler>
 80029f2:	bf00      	nop

080029f4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <BusFault_Handler>
 80029f6:	bf00      	nop

080029f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <UsageFault_Handler>
 80029fa:	bf00      	nop

080029fc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <DebugMon_Handler>:
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <PendSV_Handler>:
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 bbdc 	b.w	80031c4 <HAL_IncTick>

08002a0c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a0c:	2010      	movs	r0, #16
 8002a0e:	f001 b8f3 	b.w	8003bf8 <HAL_GPIO_EXTI_IRQHandler>
 8002a12:	bf00      	nop

08002a14 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002a14:	2001      	movs	r0, #1
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002a1a:	f002 fab3 	bl	8004f84 <__errno>
 8002a1e:	2216      	movs	r2, #22
 8002a20:	4603      	mov	r3, r0
	return -1;
}
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	bd08      	pop	{r3, pc}
 8002a2a:	bf00      	nop

08002a2c <_exit>:

void _exit (int status)
{
 8002a2c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002a2e:	f002 faa9 	bl	8004f84 <__errno>
 8002a32:	2316      	movs	r3, #22
 8002a34:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002a36:	e7fe      	b.n	8002a36 <_exit+0xa>

08002a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	1e16      	subs	r6, r2, #0
 8002a3c:	dd07      	ble.n	8002a4e <_read+0x16>
 8002a3e:	460c      	mov	r4, r1
 8002a40:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002a42:	f3af 8000 	nop.w
 8002a46:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	42a5      	cmp	r5, r4
 8002a4c:	d1f9      	bne.n	8002a42 <_read+0xa>
	}

return len;
}
 8002a4e:	4630      	mov	r0, r6
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop

08002a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a54:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	1e16      	subs	r6, r2, #0
 8002a58:	dd07      	ble.n	8002a6a <_write+0x16>
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002a5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	42a5      	cmp	r5, r4
 8002a68:	d1f9      	bne.n	8002a5e <_write+0xa>
	}
	return len;
}
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	bf00      	nop

08002a70 <_close>:

int _close(int file)
{
	return -1;
}
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002a7c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002a7e:	604b      	str	r3, [r1, #4]
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002a84:	2001      	movs	r0, #1
 8002a86:	4770      	bx	lr

08002a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002a88:	2000      	movs	r0, #0
 8002a8a:	4770      	bx	lr

08002a8c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	490d      	ldr	r1, [pc, #52]	; (8002ac4 <_sbrk+0x38>)
{
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a92:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <_sbrk+0x3c>)
 8002a94:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002a96:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a98:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002a9a:	b120      	cbz	r0, 8002aa6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9c:	4403      	add	r3, r0
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d807      	bhi.n	8002ab2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002aa2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002aa4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002aa6:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <_sbrk+0x44>)
 8002aa8:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002aaa:	4403      	add	r3, r0
 8002aac:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8002aae:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002ab0:	d9f7      	bls.n	8002aa2 <_sbrk+0x16>
    errno = ENOMEM;
 8002ab2:	f002 fa67 	bl	8004f84 <__errno>
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	4603      	mov	r3, r0
    return (void *)-1;
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bd10      	pop	{r4, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200006f4 	.word	0x200006f4
 8002ac8:	20010000 	.word	0x20010000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	20000710 	.word	0x20000710

08002ad4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <XPT2046_WriteCMD>:
    }

}


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4606      	mov	r6, r0
    uint8_t i;


    macXPT2046_MOSI_0();
 8002adc:	4815      	ldr	r0, [pc, #84]	; (8002b34 <XPT2046_WriteCMD+0x5c>)
 8002ade:	2200      	movs	r2, #0

    macXPT2046_CLK_LOW();

    for (i = 0; i < 8; i++) {
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002ae0:	4605      	mov	r5, r0
    macXPT2046_MOSI_0();
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	f001 f882 	bl	8003bec <HAL_GPIO_WritePin>
    macXPT2046_CLK_LOW();
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2101      	movs	r1, #1
 8002aec:	4628      	mov	r0, r5
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002aee:	2407      	movs	r4, #7
    macXPT2046_CLK_LOW();
 8002af0:	f001 f87c 	bl	8003bec <HAL_GPIO_WritePin>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002af4:	fa46 f204 	asr.w	r2, r6, r4
 8002af8:	f012 0201 	ands.w	r2, r2, #1
 8002afc:	bf18      	it	ne
 8002afe:	2201      	movne	r2, #1
 8002b00:	2104      	movs	r1, #4
 8002b02:	4628      	mov	r0, r5
 8002b04:	f001 f872 	bl	8003bec <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d3fc      	bcc.n	8002b0a <XPT2046_WriteCMD+0x32>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_HIGH();
 8002b10:	2201      	movs	r2, #1
 8002b12:	4628      	mov	r0, r5
 8002b14:	4611      	mov	r1, r2
 8002b16:	f001 f869 	bl	8003bec <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d3fc      	bcc.n	8002b1c <XPT2046_WriteCMD+0x44>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_LOW();
 8002b22:	2200      	movs	r2, #0
 8002b24:	2101      	movs	r1, #1
 8002b26:	4628      	mov	r0, r5
    for (i = 0; i < 8; i++) {
 8002b28:	3c01      	subs	r4, #1
        macXPT2046_CLK_LOW();
 8002b2a:	f001 f85f 	bl	8003bec <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 8002b2e:	1c63      	adds	r3, r4, #1
 8002b30:	d1e0      	bne.n	8002af4 <XPT2046_WriteCMD+0x1c>
    }

}
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	40011800 	.word	0x40011800

08002b38 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002b38:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    uint16_t usBuf = 0, usTemp;


    macXPT2046_MOSI_0();
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	4811      	ldr	r0, [pc, #68]	; (8002b84 <XPT2046_ReadCMD+0x4c>)
 8002b40:	f001 f854 	bl	8003bec <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002b44:	2201      	movs	r2, #1
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <XPT2046_ReadCMD+0x4c>)
 8002b48:	4611      	mov	r1, r2
 8002b4a:	250b      	movs	r5, #11
    uint16_t usBuf = 0, usTemp;
 8002b4c:	2400      	movs	r4, #0

    for (i = 0; i < 12; i++) {
        macXPT2046_CLK_LOW();
 8002b4e:	4606      	mov	r6, r0
    macXPT2046_CLK_HIGH();
 8002b50:	f001 f84c 	bl	8003bec <HAL_GPIO_WritePin>
        macXPT2046_CLK_LOW();
 8002b54:	2200      	movs	r2, #0
 8002b56:	2101      	movs	r1, #1
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f001 f847 	bl	8003bec <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 8002b5e:	2108      	movs	r1, #8
 8002b60:	4630      	mov	r0, r6
 8002b62:	f001 f83d 	bl	8003be0 <HAL_GPIO_ReadPin>

        usBuf |= usTemp << (11 - i);

        macXPT2046_CLK_HIGH();
 8002b66:	2201      	movs	r2, #1
        usTemp = macXPT2046_MISO();
 8002b68:	4603      	mov	r3, r0
        macXPT2046_CLK_HIGH();
 8002b6a:	4611      	mov	r1, r2
        usBuf |= usTemp << (11 - i);
 8002b6c:	40ab      	lsls	r3, r5
        macXPT2046_CLK_HIGH();
 8002b6e:	4630      	mov	r0, r6
    for (i = 0; i < 12; i++) {
 8002b70:	3d01      	subs	r5, #1
        usBuf |= usTemp << (11 - i);
 8002b72:	431c      	orrs	r4, r3
        macXPT2046_CLK_HIGH();
 8002b74:	f001 f83a 	bl	8003bec <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8002b78:	1c6b      	adds	r3, r5, #1
        usBuf |= usTemp << (11 - i);
 8002b7a:	b2a4      	uxth	r4, r4
    for (i = 0; i < 12; i++) {
 8002b7c:	d1ea      	bne.n	8002b54 <XPT2046_ReadCMD+0x1c>

    }

    return usBuf;

}
 8002b7e:	4620      	mov	r0, r4
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	bf00      	nop
 8002b84:	40011800 	.word	0x40011800

08002b88 <XPT2046_ReadAdc_Smooth_XY>:

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
    uint8_t ucCount = 0, i;

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8002b88:	2100      	movs	r1, #0
static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	4680      	mov	r8, r0
    int16_t sBufferArray[2][10] = {{0},
 8002b92:	2228      	movs	r2, #40	; 0x28
 8002b94:	4668      	mov	r0, sp
 8002b96:	466e      	mov	r6, sp
    uint8_t ucCount = 0, i;
 8002b98:	460c      	mov	r4, r1
        sBufferArray[0][ucCount] = sAD_X;
        sBufferArray[1][ucCount] = sAD_Y;

        ucCount++;

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002b9a:	4f51      	ldr	r7, [pc, #324]	; (8002ce0 <XPT2046_ReadAdc_Smooth_XY+0x158>)
    int16_t sBufferArray[2][10] = {{0},
 8002b9c:	f002 fa46 	bl	800502c <memset>
    XPT2046_WriteCMD(ucChannel);
 8002ba0:	2090      	movs	r0, #144	; 0x90
 8002ba2:	f7ff ff99 	bl	8002ad8 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002ba6:	f7ff ffc7 	bl	8002b38 <XPT2046_ReadCMD>
    for (i = 0; i < ulCount; i++) {
 8002baa:	2300      	movs	r3, #0
    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 8002bac:	b205      	sxth	r5, r0
    for (i = 0; i < ulCount; i++) {
 8002bae:	3301      	adds	r3, #1
 8002bb0:	d0fd      	beq.n	8002bae <XPT2046_ReadAdc_Smooth_XY+0x26>
    XPT2046_WriteCMD(ucChannel);
 8002bb2:	20d0      	movs	r0, #208	; 0xd0
 8002bb4:	f7ff ff90 	bl	8002ad8 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002bb8:	f7ff ffbe 	bl	8002b38 <XPT2046_ReadCMD>
 8002bbc:	4603      	mov	r3, r0
        sBufferArray[0][ucCount] = sAD_X;
 8002bbe:	f826 5b02 	strh.w	r5, [r6], #2
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	4638      	mov	r0, r7
        sBufferArray[1][ucCount] = sAD_Y;
 8002bc6:	8273      	strh	r3, [r6, #18]
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002bc8:	f001 f80a 	bl	8003be0 <HAL_GPIO_ReadPin>
        ucCount++;
 8002bcc:	3401      	adds	r4, #1
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002bce:	4605      	mov	r5, r0
        ucCount++;
 8002bd0:	b2e4      	uxtb	r4, r4
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d174      	bne.n	8002cc0 <XPT2046_ReadAdc_Smooth_XY+0x138>
 8002bd6:	2c0a      	cmp	r4, #10
 8002bd8:	d1e2      	bne.n	8002ba0 <XPT2046_ReadAdc_Smooth_XY+0x18>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002bda:	2110      	movs	r1, #16
 8002bdc:	4840      	ldr	r0, [pc, #256]	; (8002ce0 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002bde:	f000 ffff 	bl	8003be0 <HAL_GPIO_ReadPin>
 8002be2:	b108      	cbz	r0, 8002be8 <XPT2046_ReadAdc_Smooth_XY+0x60>
        ucXPT2046_TouchFlag = 0;
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002be6:	701d      	strb	r5, [r3, #0]


    if (ucCount == 10) {
        lX_Max = lX_Min = sBufferArray[0][0];
 8002be8:	f9bd c000 	ldrsh.w	ip, [sp]
        lY_Max = lY_Min = sBufferArray[1][0];
 8002bec:	466b      	mov	r3, sp
        lX_Max = lX_Min = sBufferArray[0][0];
 8002bee:	4664      	mov	r4, ip
 8002bf0:	4661      	mov	r1, ip
        lY_Max = lY_Min = sBufferArray[1][0];
 8002bf2:	f9bd 7014 	ldrsh.w	r7, [sp, #20]

        for (i = 1; i < 10; i++) {
 8002bf6:	f10d 0012 	add.w	r0, sp, #18
 8002bfa:	e004      	b.n	8002c06 <XPT2046_ReadAdc_Smooth_XY+0x7e>
 8002bfc:	4294      	cmp	r4, r2
 8002bfe:	bfb8      	it	lt
 8002c00:	4614      	movlt	r4, r2
 8002c02:	4298      	cmp	r0, r3
 8002c04:	d006      	beq.n	8002c14 <XPT2046_ReadAdc_Smooth_XY+0x8c>
            if (sBufferArray[0][i] < lX_Min)
 8002c06:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002c0a:	428a      	cmp	r2, r1
 8002c0c:	daf6      	bge.n	8002bfc <XPT2046_ReadAdc_Smooth_XY+0x74>
        for (i = 1; i < 10; i++) {
 8002c0e:	4298      	cmp	r0, r3
 8002c10:	4611      	mov	r1, r2
 8002c12:	d1f8      	bne.n	8002c06 <XPT2046_ReadAdc_Smooth_XY+0x7e>
        lY_Max = lY_Min = sBufferArray[1][0];
 8002c14:	4638      	mov	r0, r7
 8002c16:	463d      	mov	r5, r7
 8002c18:	f10d 0626 	add.w	r6, sp, #38	; 0x26
 8002c1c:	ab05      	add	r3, sp, #20
 8002c1e:	e004      	b.n	8002c2a <XPT2046_ReadAdc_Smooth_XY+0xa2>
 8002c20:	4290      	cmp	r0, r2
 8002c22:	bfb8      	it	lt
 8002c24:	4610      	movlt	r0, r2
            else if (sBufferArray[0][i] > lX_Max)
                lX_Max = sBufferArray[0][i];

        }

        for (i = 1; i < 10; i++) {
 8002c26:	42b3      	cmp	r3, r6
 8002c28:	d006      	beq.n	8002c38 <XPT2046_ReadAdc_Smooth_XY+0xb0>
            if (sBufferArray[1][i] < lY_Min)
 8002c2a:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002c2e:	42aa      	cmp	r2, r5
 8002c30:	daf6      	bge.n	8002c20 <XPT2046_ReadAdc_Smooth_XY+0x98>
        for (i = 1; i < 10; i++) {
 8002c32:	42b3      	cmp	r3, r6
 8002c34:	4615      	mov	r5, r2
 8002c36:	d1f8      	bne.n	8002c2a <XPT2046_ReadAdc_Smooth_XY+0xa2>
                lY_Max = sBufferArray[1][i];

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002c38:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002c3c:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
                                sBufferArray[0][4] +
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002c40:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002c44:	4462      	add	r2, ip
 8002c46:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002c48:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8002c4c:	443b      	add	r3, r7
 8002c4e:	4433      	add	r3, r6
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002c50:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8002c54:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002c56:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8002c5a:	4433      	add	r3, r6
                                sBufferArray[0][4] +
 8002c5c:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002c60:	4432      	add	r2, r6
                                sBufferArray[1][4] +
 8002c62:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002c66:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002c68:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
                                sBufferArray[0][4] +
 8002c6c:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002c6e:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
                                sBufferArray[1][4] +
 8002c72:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002c74:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8002c78:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002c7a:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8002c7e:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002c80:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8002c84:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002c86:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8002c8a:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002c8c:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8002c90:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002c92:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8002c96:	4433      	add	r3, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8002c98:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002c9c:	4432      	add	r2, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8002c9e:	1a52      	subs	r2, r2, r1
 8002ca0:	1b12      	subs	r2, r2, r4
 8002ca2:	10d2      	asrs	r2, r2, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002ca4:	f8a8 2000 	strh.w	r2, [r8]
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002ca8:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002cac:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002cae:	1b5b      	subs	r3, r3, r5
 8002cb0:	1a1b      	subs	r3, r3, r0


        return 1;
 8002cb2:	2001      	movs	r0, #1
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002cb4:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002cb6:	f8a8 3002 	strh.w	r3, [r8, #2]


    return 0;


}
 8002cba:	b00a      	add	sp, #40	; 0x28
 8002cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002cc4:	f000 ff8c 	bl	8003be0 <HAL_GPIO_ReadPin>
 8002cc8:	b930      	cbnz	r0, 8002cd8 <XPT2046_ReadAdc_Smooth_XY+0x150>
    if (ucCount == 10) {
 8002cca:	2c0a      	cmp	r4, #10
    return 0;
 8002ccc:	bf18      	it	ne
 8002cce:	2000      	movne	r0, #0
    if (ucCount == 10) {
 8002cd0:	d08a      	beq.n	8002be8 <XPT2046_ReadAdc_Smooth_XY+0x60>
}
 8002cd2:	b00a      	add	sp, #40	; 0x28
 8002cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ucXPT2046_TouchFlag = 0;
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e7f4      	b.n	8002cca <XPT2046_ReadAdc_Smooth_XY+0x142>
 8002ce0:	40011800 	.word	0x40011800
 8002ce4:	200006f8 	.word	0x200006f8

08002ce8 <XPT2046_Touch_Calibrate>:


}


uint8_t XPT2046_Touch_Calibrate(void) {
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002cec:	213c      	movs	r1, #60	; 0x3c
    strCrossCoordinate[0].y = usScreenHeigth >> 2;

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002cee:	22f0      	movs	r2, #240	; 0xf0

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002cf0:	23b4      	movs	r3, #180	; 0xb4
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002cf2:	f04f 0a50 	mov.w	sl, #80	; 0x50


    LCD_GramScan(1);
 8002cf6:	2001      	movs	r0, #1
uint8_t XPT2046_Touch_Calibrate(void) {
 8002cf8:	b09b      	sub	sp, #108	; 0x6c
    LCD_GramScan(1);
 8002cfa:	4607      	mov	r7, r0

    for (i = 0; i < 4; i++) {
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);

        pStr = "Touch Calibrate ......";
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002cfc:	f8df b340 	ldr.w	fp, [pc, #832]	; 8003040 <XPT2046_Touch_Calibrate+0x358>
 8002d00:	4ed0      	ldr	r6, [pc, #832]	; (8003044 <XPT2046_Touch_Calibrate+0x35c>)
 8002d02:	ad16      	add	r5, sp, #88	; 0x58
 8002d04:	f10d 084e 	add.w	r8, sp, #78	; 0x4e
    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002d08:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002d0c:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002d10:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002d14:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002d18:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8002d1c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002d20:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    LCD_GramScan(1);
 8002d24:	f7fe fb70 	bl	8001408 <LCD_GramScan>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002d28:	2400      	movs	r4, #0
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002d2a:	f44f 4978 	mov.w	r9, #63488	; 0xf800
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002d2e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d32:	22f0      	movs	r2, #240	; 0xf0
 8002d34:	4621      	mov	r1, r4
 8002d36:	4620      	mov	r0, r4
 8002d38:	9400      	str	r4, [sp, #0]
 8002d3a:	f7fe f9ab 	bl	8001094 <LCD_Clear>
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002d3e:	4623      	mov	r3, r4
 8002d40:	465a      	mov	r2, fp
 8002d42:	21a0      	movs	r1, #160	; 0xa0
 8002d44:	203c      	movs	r0, #60	; 0x3c
 8002d46:	f8cd 9000 	str.w	r9, [sp]
 8002d4a:	f7fe fb07 	bl	800135c <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 8002d4e:	463a      	mov	r2, r7
 8002d50:	49bd      	ldr	r1, [pc, #756]	; (8003048 <XPT2046_Touch_Calibrate+0x360>)
 8002d52:	a80f      	add	r0, sp, #60	; 0x3c
 8002d54:	f003 f8d0 	bl	8005ef8 <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 8002d58:	4623      	mov	r3, r4
 8002d5a:	2190      	movs	r1, #144	; 0x90
 8002d5c:	2078      	movs	r0, #120	; 0x78
 8002d5e:	f8cd 9000 	str.w	r9, [sp]
 8002d62:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d64:	f7fe fafa 	bl	800135c <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 8002d68:	4623      	mov	r3, r4
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	42b3      	cmp	r3, r6
 8002d6e:	d3fc      	bcc.n	8002d6a <XPT2046_Touch_Calibrate+0x82>

        XPT2046_DelayUS(100000);

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002d70:	4651      	mov	r1, sl
 8002d72:	f838 0c06 	ldrh.w	r0, [r8, #-6]
 8002d76:	f7fe fac5 	bl	8001304 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff ff04 	bl	8002b88 <XPT2046_ReadAdc_Smooth_XY>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d0fa      	beq.n	8002d7a <XPT2046_Touch_Calibrate+0x92>
    for (i = 0; i < 4; i++) {
 8002d84:	3701      	adds	r7, #1
 8002d86:	2f05      	cmp	r7, #5
 8002d88:	f105 0504 	add.w	r5, r5, #4
 8002d8c:	f108 0804 	add.w	r8, r8, #4
 8002d90:	d002      	beq.n	8002d98 <XPT2046_Touch_Calibrate+0xb0>
        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002d92:	f838 ac04 	ldrh.w	sl, [r8, #-4]
 8002d96:	e7c7      	b.n	8002d28 <XPT2046_Touch_Calibrate+0x40>
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8002d98:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8002d9c:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
 8002da0:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8002da4:	f8bd 805e 	ldrh.w	r8, [sp, #94]	; 0x5e
 8002da8:	1b32      	subs	r2, r6, r4
 8002daa:	eba8 0307 	sub.w	r3, r8, r7
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	9304      	str	r3, [sp, #16]
 8002db4:	4613      	mov	r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8002db6:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002dba:	f8bd 905a 	ldrh.w	r9, [sp, #90]	; 0x5a
 8002dbe:	eba5 0a04 	sub.w	sl, r5, r4
 8002dc2:	eba9 0207 	sub.w	r2, r9, r7
 8002dc6:	fb0a fb02 	mul.w	fp, sl, r2
    if (pCalibrationFactor->Divider == 0)
 8002dca:	455b      	cmp	r3, fp
 8002dcc:	9302      	str	r3, [sp, #8]
 8002dce:	f000 8115 	beq.w	8002ffc <XPT2046_Touch_Calibrate+0x314>
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8002dd2:	eba8 0009 	sub.w	r0, r8, r9
 8002dd6:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->An =
 8002dda:	00c0      	lsls	r0, r0, #3
 8002ddc:	f7fd fb7e 	bl	80004dc <__aeabi_i2d>
 8002de0:	460a      	mov	r2, r1
 8002de2:	4601      	mov	r1, r0
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8002de4:	1b70      	subs	r0, r6, r5
 8002de6:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->Bn =
 8002dea:	00c0      	lsls	r0, r0, #3
        pCalibrationFactor->An =
 8002dec:	e9cd 1206 	strd	r1, r2, [sp, #24]
        pCalibrationFactor->Bn =
 8002df0:	f7fd fb74 	bl	80004dc <__aeabi_i2d>
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002df4:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
        pCalibrationFactor->Bn =
 8002df8:	e9cd 0108 	strd	r0, r1, [sp, #32]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002dfc:	fb0c f006 	mul.w	r0, ip, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002e00:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002e04:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002e08:	fb0c fc05 	mul.w	ip, ip, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002e0c:	fb08 f000 	mul.w	r0, r8, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002e10:	1baa      	subs	r2, r5, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002e12:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002e16:	fb07 f202 	mul.w	r2, r7, r2
                pScreenSample[0].y +
 8002e1a:	fb09 000c 	mla	r0, r9, ip, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002e1e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
        pCalibrationFactor->Cn =
 8002e22:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002e26:	f7fd fb59 	bl	80004dc <__aeabi_i2d>
        pCalibrationFactor->Dn =
 8002e2a:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Cn =
 8002e2e:	460a      	mov	r2, r1
 8002e30:	4601      	mov	r1, r0
        pCalibrationFactor->Dn =
 8002e32:	9b04      	ldr	r3, [sp, #16]
        pCalibrationFactor->Cn =
 8002e34:	e9cd 1204 	strd	r1, r2, [sp, #16]
        pCalibrationFactor->Dn =
 8002e38:	fb0c f003 	mul.w	r0, ip, r3
 8002e3c:	f7fd fb4e 	bl	80004dc <__aeabi_i2d>
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002e40:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Dn =
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002e48:	fb0c f00a 	mul.w	r0, ip, sl
        pCalibrationFactor->En =
 8002e4c:	4240      	negs	r0, r0
        pCalibrationFactor->Dn =
 8002e4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        pCalibrationFactor->En =
 8002e52:	f7fd fb43 	bl	80004dc <__aeabi_i2d>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002e5a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002e5e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002e62:	1b64      	subs	r4, r4, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002e64:	0109      	lsls	r1, r1, #4
 8002e66:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002e6a:	fb09 f404 	mul.w	r4, r9, r4
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002e6e:	fb08 f801 	mul.w	r8, r8, r1
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002e72:	eb05 0585 	add.w	r5, r5, r5, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002e76:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002e7a:	012d      	lsls	r5, r5, #4
                pScreenSample[0].y +
 8002e7c:	eb08 1404 	add.w	r4, r8, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002e80:	eba5 1506 	sub.w	r5, r5, r6, lsl #4
        pCalibrationFactor->Fn =
 8002e84:	fb07 4005 	mla	r0, r7, r5, r4
        pCalibrationFactor->En =
 8002e88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        pCalibrationFactor->Fn =
 8002e8c:	f7fd fb26 	bl	80004dc <__aeabi_i2d>
    pCalibrationFactor->Divider =
 8002e90:	9b02      	ldr	r3, [sp, #8]
        pCalibrationFactor->Fn =
 8002e92:	4680      	mov	r8, r0
    pCalibrationFactor->Divider =
 8002e94:	eba3 000b 	sub.w	r0, r3, fp
        pCalibrationFactor->Fn =
 8002e98:	4689      	mov	r9, r1
    pCalibrationFactor->Divider =
 8002e9a:	f7fd fb1f 	bl	80004dc <__aeabi_i2d>
 8002e9e:	4682      	mov	sl, r0
    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);

    if (CalibrationFactor.Divider == 0) goto Failure;


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002ea0:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    pCalibrationFactor->Divider =
 8002ea4:	468b      	mov	fp, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002ea6:	f7fd fb19 	bl	80004dc <__aeabi_i2d>
 8002eaa:	4606      	mov	r6, r0
 8002eac:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
 8002eb0:	460f      	mov	r7, r1
 8002eb2:	f7fd fb13 	bl	80004dc <__aeabi_i2d>
 8002eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	4639      	mov	r1, r7
 8002ec2:	f7fd fb75 	bl	80005b0 <__aeabi_dmul>
 8002ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ece:	4620      	mov	r0, r4
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	f7fd fb6d 	bl	80005b0 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ede:	f7fd f9b1 	bl	8000244 <__adddf3>
 8002ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ee6:	f7fd f9ad 	bl	8000244 <__adddf3>
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8002eea:	4652      	mov	r2, sl
 8002eec:	465b      	mov	r3, fp
 8002eee:	f7fd fc89 	bl	8000804 <__aeabi_ddiv>
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002ef2:	f7fd fe35 	bl	8000b60 <__aeabi_d2uiz>
 8002ef6:	4603      	mov	r3, r0
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002ef8:	4639      	mov	r1, r7
 8002efa:	4630      	mov	r0, r6
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002efc:	b29e      	uxth	r6, r3
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002efe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f02:	f7fd fb55 	bl	80005b0 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	4614      	mov	r4, r2
 8002f10:	461d      	mov	r5, r3
 8002f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002f16:	f7fd fb4b 	bl	80005b0 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd f98f 	bl	8000244 <__adddf3>
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	f7fd f98b 	bl	8000244 <__adddf3>
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8002f2e:	4652      	mov	r2, sl
 8002f30:	465b      	mov	r3, fp
 8002f32:	f7fd fc67 	bl	8000804 <__aeabi_ddiv>
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002f36:	f7fd fe13 	bl	8000b60 <__aeabi_d2uiz>

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002f3a:	2eb4      	cmp	r6, #180	; 0xb4
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002f3c:	b280      	uxth	r0, r0
    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002f3e:	bf8c      	ite	hi
 8002f40:	f1a6 02b4 	subhi.w	r2, r6, #180	; 0xb4
 8002f44:	f1c6 02b4 	rsbls	r2, r6, #180	; 0xb4
 8002f48:	b292      	uxth	r2, r2
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002f4a:	2850      	cmp	r0, #80	; 0x50
 8002f4c:	bf8c      	ite	hi
 8002f4e:	f1a0 0350 	subhi.w	r3, r0, #80	; 0x50
 8002f52:	f1c0 0350 	rsbls	r3, r0, #80	; 0x50
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002f56:	2a0a      	cmp	r2, #10
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002f58:	b29b      	uxth	r3, r3
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002f5a:	d84f      	bhi.n	8002ffc <XPT2046_Touch_Calibrate+0x314>
 8002f5c:	2b0a      	cmp	r3, #10
 8002f5e:	d84d      	bhi.n	8002ffc <XPT2046_Touch_Calibrate+0x314>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8002f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f64:	4652      	mov	r2, sl
 8002f66:	465b      	mov	r3, fp
 8002f68:	f7fd fc4c 	bl	8000804 <__aeabi_ddiv>
 8002f6c:	4d37      	ldr	r5, [pc, #220]	; (800304c <XPT2046_Touch_Calibrate+0x364>)
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002f6e:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8002f70:	e9c5 0100 	strd	r0, r1, [r5]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002f78:	465b      	mov	r3, fp
 8002f7a:	f7fd fc43 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002f7e:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002f80:	e9c5 0102 	strd	r0, r1, [r5, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f88:	465b      	mov	r3, fp
 8002f8a:	f7fd fc3b 	bl	8000804 <__aeabi_ddiv>

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002f8e:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002f90:	e9c5 0104 	strd	r0, r1, [r5, #16]
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002f94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f98:	465b      	mov	r3, fp
 8002f9a:	f7fd fc33 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002f9e:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002fa0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fa8:	465b      	mov	r3, fp
 8002faa:	f7fd fc2b 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002fae:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002fb0:	e9c5 0108 	strd	r0, r1, [r5, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f7fd fc23 	bl	8000804 <__aeabi_ddiv>


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002fbe:	2400      	movs	r4, #0
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	460f      	mov	r7, r1
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002fc4:	9400      	str	r4, [sp, #0]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002fc6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

    pStr = "Calibrate Succeed";
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002fca:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002fce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fd2:	22f0      	movs	r2, #240	; 0xf0
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7fe f85c 	bl	8001094 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002fdc:	4623      	mov	r3, r4
 8002fde:	21a0      	movs	r1, #160	; 0xa0
 8002fe0:	2034      	movs	r0, #52	; 0x34
 8002fe2:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <XPT2046_Touch_Calibrate+0x368>)
 8002fe4:	9500      	str	r5, [sp, #0]
 8002fe6:	f7fe f9b9 	bl	800135c <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 8002fea:	f24c 3350 	movw	r3, #50000	; 0xc350
    for (i = 0; i < ulCount; i++) {
 8002fee:	3401      	adds	r4, #1
 8002ff0:	429c      	cmp	r4, r3
 8002ff2:	d3fc      	bcc.n	8002fee <XPT2046_Touch_Calibrate+0x306>

    return 1;
 8002ff4:	2001      	movs	r0, #1
    XPT2046_DelayUS(300000);

    return 0;


}
 8002ff6:	b01b      	add	sp, #108	; 0x6c
 8002ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002ffc:	2400      	movs	r4, #0
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002ffe:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003002:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003006:	22f0      	movs	r2, #240	; 0xf0
 8003008:	4621      	mov	r1, r4
 800300a:	4620      	mov	r0, r4
 800300c:	9400      	str	r4, [sp, #0]
 800300e:	f7fe f841 	bl	8001094 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003012:	4623      	mov	r3, r4
 8003014:	21a0      	movs	r1, #160	; 0xa0
 8003016:	2040      	movs	r0, #64	; 0x40
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <XPT2046_Touch_Calibrate+0x36c>)
 800301a:	9500      	str	r5, [sp, #0]
 800301c:	f7fe f99e 	bl	800135c <LCD_DrawString_Color>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 8003020:	4623      	mov	r3, r4
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <XPT2046_Touch_Calibrate+0x370>)
 8003024:	21b0      	movs	r1, #176	; 0xb0
 8003026:	2054      	movs	r0, #84	; 0x54
 8003028:	9500      	str	r5, [sp, #0]
 800302a:	f7fe f997 	bl	800135c <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 800302e:	4623      	mov	r3, r4
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <XPT2046_Touch_Calibrate+0x374>)
 8003032:	3301      	adds	r3, #1
 8003034:	4293      	cmp	r3, r2
 8003036:	d3fc      	bcc.n	8003032 <XPT2046_Touch_Calibrate+0x34a>
    return 0;
 8003038:	2000      	movs	r0, #0
}
 800303a:	b01b      	add	sp, #108	; 0x6c
 800303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003040:	0800a7c0 	.word	0x0800a7c0
 8003044:	000186a0 	.word	0x000186a0
 8003048:	0800a7d8 	.word	0x0800a7d8
 800304c:	20000008 	.word	0x20000008
 8003050:	0800a7dc 	.word	0x0800a7dc
 8003054:	0800a7f0 	.word	0x0800a7f0
 8003058:	0800a800 	.word	0x0800a800
 800305c:	000493e0 	.word	0x000493e0

08003060 <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	b083      	sub	sp, #12
 8003066:	4683      	mov	fp, r0
    uint8_t ucRet = 1;

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8003068:	a801      	add	r0, sp, #4
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 800306a:	468a      	mov	sl, r1
    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 800306c:	f7ff fd8c 	bl	8002b88 <XPT2046_ReadAdc_Smooth_XY>
 8003070:	2800      	cmp	r0, #0
 8003072:	d048      	beq.n	8003106 <XPT2046_Get_TouchedPoint+0xa6>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003074:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003078:	f7fd fa30 	bl	80004dc <__aeabi_i2d>
 800307c:	4606      	mov	r6, r0
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800307e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003082:	460f      	mov	r7, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003084:	f7fd fa2a 	bl	80004dc <__aeabi_i2d>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003088:	e9da 2300 	ldrd	r2, r3, [sl]
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800308c:	4604      	mov	r4, r0
 800308e:	460d      	mov	r5, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003090:	4630      	mov	r0, r6
 8003092:	4639      	mov	r1, r7
 8003094:	f7fd fa8c 	bl	80005b0 <__aeabi_dmul>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003098:	e9da 2302 	ldrd	r2, r3, [sl, #8]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 800309c:	4680      	mov	r8, r0
 800309e:	4689      	mov	r9, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd fa84 	bl	80005b0 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80030ac:	4640      	mov	r0, r8
 80030ae:	4649      	mov	r1, r9
 80030b0:	f7fd f8c8 	bl	8000244 <__adddf3>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80030b4:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 80030b8:	f7fd f8c4 	bl	8000244 <__adddf3>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80030bc:	f7fd fd50 	bl	8000b60 <__aeabi_d2uiz>
 80030c0:	4603      	mov	r3, r0
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80030c2:	4639      	mov	r1, r7
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80030c4:	f8ab 3000 	strh.w	r3, [fp]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80030c8:	4630      	mov	r0, r6
 80030ca:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 80030ce:	f7fd fa6f 	bl	80005b0 <__aeabi_dmul>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80030da:	4614      	mov	r4, r2
 80030dc:	461d      	mov	r5, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80030de:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 80030e2:	f7fd fa65 	bl	80005b0 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd f8a9 	bl	8000244 <__adddf3>
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80030f2:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 80030f6:	f7fd f8a5 	bl	8000244 <__adddf3>
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80030fa:	f7fd fd31 	bl	8000b60 <__aeabi_d2uiz>
 80030fe:	4603      	mov	r3, r0
    uint8_t ucRet = 1;
 8003100:	2001      	movs	r0, #1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003102:	f8ab 3002 	strh.w	r3, [fp, #2]
    } else ucRet = 0;

    return ucRet;


}
 8003106:	b003      	add	sp, #12
 8003108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800310c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800310c:	480c      	ldr	r0, [pc, #48]	; (8003140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800310e:	490d      	ldr	r1, [pc, #52]	; (8003144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003114:	e002      	b.n	800311c <LoopCopyDataInit>

08003116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311a:	3304      	adds	r3, #4

0800311c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800311c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003120:	d3f9      	bcc.n	8003116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003124:	4c0a      	ldr	r4, [pc, #40]	; (8003150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003128:	e001      	b.n	800312e <LoopFillZerobss>

0800312a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800312c:	3204      	adds	r2, #4

0800312e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003130:	d3fb      	bcc.n	800312a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003132:	f7ff fccf 	bl	8002ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003136:	f001 ff2b 	bl	8004f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800313a:	f7ff fa21 	bl	8002580 <main>
  bx lr
 800313e:	4770      	bx	lr
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003148:	0800ad40 	.word	0x0800ad40
  ldr r2, =_sbss
 800314c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003150:	20000710 	.word	0x20000710

08003154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC1_2_IRQHandler>
	...

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800315a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315e:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_InitTick+0x3c>)
{
 8003160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003162:	7811      	ldrb	r1, [r2, #0]
 8003164:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <HAL_InitTick+0x40>)
 8003166:	fbb3 f3f1 	udiv	r3, r3, r1
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003170:	f000 fbf6 	bl	8003960 <HAL_SYSTICK_Config>
 8003174:	b908      	cbnz	r0, 800317a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003176:	2d0f      	cmp	r5, #15
 8003178:	d901      	bls.n	800317e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800317a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800317c:	bd38      	pop	{r3, r4, r5, pc}
 800317e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	4602      	mov	r2, r0
 8003182:	4629      	mov	r1, r5
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 fb9e 	bl	80038c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_InitTick+0x44>)
 800318e:	4620      	mov	r0, r4
 8003190:	601d      	str	r5, [r3, #0]
}
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	20000038 	.word	0x20000038
 8003198:	20000004 	.word	0x20000004
 800319c:	2000003c 	.word	0x2000003c

080031a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <HAL_Init+0x20>)
{
 80031a2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a8:	f043 0310 	orr.w	r3, r3, #16
 80031ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ae:	f000 fb79 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	200f      	movs	r0, #15
 80031b4:	f7ff ffd0 	bl	8003158 <HAL_InitTick>
  HAL_MspInit();
 80031b8:	f7ff fb5c 	bl	8002874 <HAL_MspInit>
}
 80031bc:	2000      	movs	r0, #0
 80031be:	bd08      	pop	{r3, pc}
 80031c0:	40022000 	.word	0x40022000

080031c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80031c4:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_IncTick+0x10>)
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_IncTick+0x14>)
 80031c8:	6811      	ldr	r1, [r2, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	440b      	add	r3, r1
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200006fc 	.word	0x200006fc
 80031d8:	20000038 	.word	0x20000038

080031dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <HAL_GetTick+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200006fc 	.word	0x200006fc

080031e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fff6 	bl	80031dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80031f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80031f4:	d002      	beq.n	80031fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <HAL_Delay+0x20>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	1b40      	subs	r0, r0, r5
 8003202:	42a0      	cmp	r0, r4
 8003204:	d3fa      	bcc.n	80031fc <HAL_Delay+0x14>
  {
  }
}
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	20000038 	.word	0x20000038

0800320c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003210:	2500      	movs	r5, #0
{
 8003212:	b083      	sub	sp, #12
 8003214:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003216:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003218:	f7ff ffe0 	bl	80031dc <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	05d7      	lsls	r7, r2, #23
 8003222:	d472      	bmi.n	800330a <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4607      	mov	r7, r0
 8003228:	05d5      	lsls	r5, r2, #23
 800322a:	d403      	bmi.n	8003234 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800322e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003232:	d01e      	beq.n	8003272 <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003234:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_ADC_PollForConversion+0x154>)
 8003236:	2002      	movs	r0, #2
 8003238:	681d      	ldr	r5, [r3, #0]
 800323a:	f001 fd6f 	bl	8004d1c <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800323e:	6833      	ldr	r3, [r6, #0]
 8003240:	4a48      	ldr	r2, [pc, #288]	; (8003364 <HAL_ADC_PollForConversion+0x158>)
 8003242:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003244:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003248:	4211      	tst	r1, r2
 800324a:	d125      	bne.n	8003298 <HAL_ADC_PollForConversion+0x8c>
 800324c:	68d9      	ldr	r1, [r3, #12]
 800324e:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8003252:	4211      	tst	r1, r2
 8003254:	d120      	bne.n	8003298 <HAL_ADC_PollForConversion+0x8c>
 8003256:	6919      	ldr	r1, [r3, #16]
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_ADC_PollForConversion+0x15c>)
 800325a:	4211      	tst	r1, r2
 800325c:	d17e      	bne.n	800335c <HAL_ADC_PollForConversion+0x150>
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8003264:	4211      	tst	r1, r2
 8003266:	bf14      	ite	ne
 8003268:	2029      	movne	r0, #41	; 0x29
 800326a:	2014      	moveq	r0, #20
 800326c:	e01e      	b.n	80032ac <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 800326e:	1c60      	adds	r0, r4, #1
 8003270:	d154      	bne.n	800331c <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	0791      	lsls	r1, r2, #30
 8003276:	d5fa      	bpl.n	800326e <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003278:	f06f 0212 	mvn.w	r2, #18
 800327c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800327e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003284:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800328c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003290:	d055      	beq.n	800333e <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003292:	2000      	movs	r0, #0
}
 8003294:	b003      	add	sp, #12
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003298:	6919      	ldr	r1, [r3, #16]
 800329a:	4a33      	ldr	r2, [pc, #204]	; (8003368 <HAL_ADC_PollForConversion+0x15c>)
 800329c:	4211      	tst	r1, r2
 800329e:	d12a      	bne.n	80032f6 <HAL_ADC_PollForConversion+0xea>
 80032a0:	68d9      	ldr	r1, [r3, #12]
 80032a2:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80032a6:	4211      	tst	r1, r2
 80032a8:	d125      	bne.n	80032f6 <HAL_ADC_PollForConversion+0xea>
 80032aa:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80032ac:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032b0:	9a01      	ldr	r2, [sp, #4]
 80032b2:	4295      	cmp	r5, r2
 80032b4:	d809      	bhi.n	80032ca <HAL_ADC_PollForConversion+0xbe>
 80032b6:	e7df      	b.n	8003278 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032b8:	9b01      	ldr	r3, [sp, #4]
 80032ba:	42ab      	cmp	r3, r5
 80032bc:	d311      	bcc.n	80032e2 <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 80032be:	9b01      	ldr	r3, [sp, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032c4:	9b01      	ldr	r3, [sp, #4]
 80032c6:	42ab      	cmp	r3, r5
 80032c8:	d237      	bcs.n	800333a <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 80032ca:	1c62      	adds	r2, r4, #1
 80032cc:	d0f7      	beq.n	80032be <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80032ce:	2c00      	cmp	r4, #0
 80032d0:	d0f2      	beq.n	80032b8 <HAL_ADC_PollForConversion+0xac>
 80032d2:	f7ff ff83 	bl	80031dc <HAL_GetTick>
 80032d6:	1bc0      	subs	r0, r0, r7
 80032d8:	42a0      	cmp	r0, r4
 80032da:	d9f0      	bls.n	80032be <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032dc:	9b01      	ldr	r3, [sp, #4]
 80032de:	42ab      	cmp	r3, r5
 80032e0:	d2ed      	bcs.n	80032be <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 80032e2:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80032e4:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80032e8:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80032f2:	b003      	add	sp, #12
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032f6:	6919      	ldr	r1, [r3, #16]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_ADC_PollForConversion+0x160>)
 80032fa:	4211      	tst	r1, r2
 80032fc:	d114      	bne.n	8003328 <HAL_ADC_PollForConversion+0x11c>
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	4211      	tst	r1, r2
 8003302:	bf14      	ite	ne
 8003304:	20fc      	movne	r0, #252	; 0xfc
 8003306:	2054      	moveq	r0, #84	; 0x54
 8003308:	e7d0      	b.n	80032ac <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 800330a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800330e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003312:	f043 0320 	orr.w	r3, r3, #32
 8003316:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8003318:	b003      	add	sp, #12
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800331c:	b934      	cbnz	r4, 800332c <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	f012 0202 	ands.w	r2, r2, #2
 8003324:	d1a5      	bne.n	8003272 <HAL_ADC_PollForConversion+0x66>
 8003326:	e7dd      	b.n	80032e4 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003328:	20fc      	movs	r0, #252	; 0xfc
 800332a:	e7bf      	b.n	80032ac <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800332c:	f7ff ff56 	bl	80031dc <HAL_GetTick>
 8003330:	1bc3      	subs	r3, r0, r7
 8003332:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003334:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003336:	d99c      	bls.n	8003272 <HAL_ADC_PollForConversion+0x66>
 8003338:	e7f1      	b.n	800331e <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800333a:	6833      	ldr	r3, [r6, #0]
 800333c:	e79c      	b.n	8003278 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800333e:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003340:	2800      	cmp	r0, #0
 8003342:	d1a6      	bne.n	8003292 <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003344:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334a:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800334c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800334e:	04db      	lsls	r3, r3, #19
 8003350:	d49f      	bmi.n	8003292 <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003352:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	62b3      	str	r3, [r6, #40]	; 0x28
 800335a:	e79b      	b.n	8003294 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800335c:	2029      	movs	r0, #41	; 0x29
 800335e:	e7a5      	b.n	80032ac <HAL_ADC_PollForConversion+0xa0>
 8003360:	20000004 	.word	0x20000004
 8003364:	24924924 	.word	0x24924924
 8003368:	12492492 	.word	0x12492492
 800336c:	00249249 	.word	0x00249249

08003370 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003378:	2300      	movs	r3, #0
{ 
 800337a:	b530      	push	{r4, r5, lr}
 800337c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800337e:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003380:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003384:	2b01      	cmp	r3, #1
 8003386:	d074      	beq.n	8003472 <HAL_ADC_ConfigChannel+0xfa>
 8003388:	2301      	movs	r3, #1
 800338a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800338e:	684b      	ldr	r3, [r1, #4]
 8003390:	4602      	mov	r2, r0
 8003392:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003394:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8003396:	d932      	bls.n	80033fe <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003398:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800339a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800339e:	d84e      	bhi.n	800343e <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033a0:	f04f 0c1f 	mov.w	ip, #31
 80033a4:	6808      	ldr	r0, [r1, #0]
 80033a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80033a8:	3b23      	subs	r3, #35	; 0x23
 80033aa:	fa00 fe03 	lsl.w	lr, r0, r3
 80033ae:	fa0c f303 	lsl.w	r3, ip, r3
 80033b2:	ea25 0303 	bic.w	r3, r5, r3
 80033b6:	ea43 030e 	orr.w	r3, r3, lr
 80033ba:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033bc:	2809      	cmp	r0, #9
 80033be:	d930      	bls.n	8003422 <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033c0:	f04f 0c07 	mov.w	ip, #7
 80033c4:	688d      	ldr	r5, [r1, #8]
 80033c6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80033ca:	68e3      	ldr	r3, [r4, #12]
 80033cc:	391e      	subs	r1, #30
 80033ce:	408d      	lsls	r5, r1
 80033d0:	fa0c f101 	lsl.w	r1, ip, r1
 80033d4:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033d8:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033dc:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033de:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033e0:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033e2:	d844      	bhi.n	800346e <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033e4:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_ADC_ConfigChannel+0x128>)
 80033e6:	429c      	cmp	r4, r3
 80033e8:	d038      	beq.n	800345c <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80033ee:	f043 0320 	orr.w	r3, r3, #32
 80033f2:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f4:	2300      	movs	r3, #0
 80033f6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80033fa:	b003      	add	sp, #12
 80033fc:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033fe:	f04f 0c1f 	mov.w	ip, #31
 8003402:	6808      	ldr	r0, [r1, #0]
 8003404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003408:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800340a:	3b05      	subs	r3, #5
 800340c:	fa00 fe03 	lsl.w	lr, r0, r3
 8003410:	fa0c f303 	lsl.w	r3, ip, r3
 8003414:	ea25 0303 	bic.w	r3, r5, r3
 8003418:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800341c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800341e:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003420:	d8ce      	bhi.n	80033c0 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003422:	2507      	movs	r5, #7
 8003424:	6889      	ldr	r1, [r1, #8]
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800342c:	4081      	lsls	r1, r0
 800342e:	fa05 f000 	lsl.w	r0, r5, r0
 8003432:	ea23 0300 	bic.w	r3, r3, r0
 8003436:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800343a:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800343c:	e7da      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800343e:	f04f 0c1f 	mov.w	ip, #31
 8003442:	6808      	ldr	r0, [r1, #0]
 8003444:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003446:	3b41      	subs	r3, #65	; 0x41
 8003448:	fa00 fe03 	lsl.w	lr, r0, r3
 800344c:	fa0c f303 	lsl.w	r3, ip, r3
 8003450:	ea25 0303 	bic.w	r3, r5, r3
 8003454:	ea43 030e 	orr.w	r3, r3, lr
 8003458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800345a:	e7af      	b.n	80033bc <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	d405      	bmi.n	800346e <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003462:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003464:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800346a:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346e:	2000      	movs	r0, #0
 8003470:	e7c0      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8003472:	2002      	movs	r0, #2
}
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_ADC_ConfigChannel+0x12c>)
 800347a:	490b      	ldr	r1, [pc, #44]	; (80034a8 <HAL_ADC_ConfigChannel+0x130>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fba1 1303 	umull	r1, r3, r1, r3
 8003482:	0c9b      	lsrs	r3, r3, #18
 8003484:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ed      	beq.n	800346e <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	3b01      	subs	r3, #1
 8003496:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f9      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x11a>
 800349e:	e7e6      	b.n	800346e <HAL_ADC_ConfigChannel+0xf6>
 80034a0:	40012400 	.word	0x40012400
 80034a4:	20000004 	.word	0x20000004
 80034a8:	431bde83 	.word	0x431bde83

080034ac <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80034ac:	2300      	movs	r3, #0
{
 80034ae:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034b0:	6802      	ldr	r2, [r0, #0]
{
 80034b2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80034b4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034b6:	6893      	ldr	r3, [r2, #8]
 80034b8:	07d9      	lsls	r1, r3, #31
 80034ba:	d427      	bmi.n	800350c <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <ADC_Enable+0x80>)
 80034be:	4604      	mov	r4, r0
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	481b      	ldr	r0, [pc, #108]	; (8003530 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80034c4:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034c6:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80034ca:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ce:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80034d0:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034d2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80034d4:	9b01      	ldr	r3, [sp, #4]
 80034d6:	b12b      	cbz	r3, 80034e4 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 80034d8:	9b01      	ldr	r3, [sp, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034e4:	f7ff fe7a 	bl	80031dc <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034e8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80034ea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	07da      	lsls	r2, r3, #31
 80034f0:	d40c      	bmi.n	800350c <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f2:	f7ff fe73 	bl	80031dc <HAL_GetTick>
 80034f6:	1b43      	subs	r3, r0, r5
 80034f8:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034fa:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034fc:	d903      	bls.n	8003506 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	f012 0201 	ands.w	r2, r2, #1
 8003504:	d005      	beq.n	8003512 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	07db      	lsls	r3, r3, #31
 800350a:	d5f2      	bpl.n	80034f2 <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800350c:	2000      	movs	r0, #0
}
 800350e:	b003      	add	sp, #12
 8003510:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8003516:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	f043 0310 	orr.w	r3, r3, #16
 800351e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003520:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003522:	4303      	orrs	r3, r0
 8003524:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003526:	b003      	add	sp, #12
 8003528:	bd30      	pop	{r4, r5, pc}
 800352a:	bf00      	nop
 800352c:	20000004 	.word	0x20000004
 8003530:	431bde83 	.word	0x431bde83

08003534 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003534:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003538:	2b01      	cmp	r3, #1
 800353a:	d038      	beq.n	80035ae <HAL_ADC_Start+0x7a>
 800353c:	2301      	movs	r3, #1
{
 800353e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003540:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003544:	4604      	mov	r4, r0
 8003546:	f7ff ffb1 	bl	80034ac <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800354a:	bb60      	cbnz	r0, 80035a6 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	4929      	ldr	r1, [pc, #164]	; (80035f8 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800355e:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003562:	d026      	beq.n	80035b2 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003566:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800356a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800356c:	6853      	ldr	r3, [r2, #4]
 800356e:	0559      	lsls	r1, r3, #21
 8003570:	d42b      	bmi.n	80035ca <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8003574:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003576:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800357a:	bf18      	it	ne
 800357c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800357e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003582:	bf18      	it	ne
 8003584:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003588:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800358a:	f06f 0302 	mvn.w	r3, #2
 800358e:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003590:	6893      	ldr	r3, [r2, #8]
 8003592:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003596:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800359a:	d01d      	beq.n	80035d8 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800359c:	6893      	ldr	r3, [r2, #8]
 800359e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a2:	6093      	str	r3, [r2, #8]
}
 80035a4:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80035a6:	2300      	movs	r3, #0
 80035a8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80035ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80035ae:	2002      	movs	r0, #2
}
 80035b0:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_ADC_Start+0xc8>)
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80035ba:	d0d3      	beq.n	8003564 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80035be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80035c2:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	055b      	lsls	r3, r3, #21
 80035c8:	d5d3      	bpl.n	8003572 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80035d6:	e7cc      	b.n	8003572 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <HAL_ADC_Start+0xc4>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80035de:	6893      	ldr	r3, [r2, #8]
 80035e0:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80035e4:	6093      	str	r3, [r2, #8]
}
 80035e6:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80035ec:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035ee:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80035f2:	d1d3      	bne.n	800359c <HAL_ADC_Start+0x68>
 80035f4:	e7f3      	b.n	80035de <HAL_ADC_Start+0xaa>
 80035f6:	bf00      	nop
 80035f8:	40012800 	.word	0x40012800
 80035fc:	40012400 	.word	0x40012400

08003600 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003600:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003602:	6803      	ldr	r3, [r0, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	07d4      	lsls	r4, r2, #31
 8003608:	d401      	bmi.n	800360e <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800360a:	2000      	movs	r0, #0
}
 800360c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800360e:	4604      	mov	r4, r0
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003618:	f7ff fde0 	bl	80031dc <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800361c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800361e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	d5f1      	bpl.n	800360a <ADC_ConversionStop_Disable+0xa>
 8003626:	e002      	b.n	800362e <ADC_ConversionStop_Disable+0x2e>
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	07db      	lsls	r3, r3, #31
 800362c:	d5ed      	bpl.n	800360a <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800362e:	f7ff fdd5 	bl	80031dc <HAL_GetTick>
 8003632:	1b43      	subs	r3, r0, r5
 8003634:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003636:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003638:	d9f6      	bls.n	8003628 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	07d2      	lsls	r2, r2, #31
 800363e:	d5f3      	bpl.n	8003628 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800364c:	4303      	orrs	r3, r0
 800364e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003650:	bd38      	pop	{r3, r4, r5, pc}
 8003652:	bf00      	nop

08003654 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003654:	2800      	cmp	r0, #0
 8003656:	d075      	beq.n	8003744 <HAL_ADC_Init+0xf0>
{
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 800365a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800365c:	4604      	mov	r4, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d052      	beq.n	8003708 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003662:	4620      	mov	r0, r4
 8003664:	f7ff ffcc 	bl	8003600 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800366a:	f013 0310 	ands.w	r3, r3, #16
 800366e:	d145      	bne.n	80036fc <HAL_ADC_Init+0xa8>
 8003670:	2800      	cmp	r0, #0
 8003672:	d143      	bne.n	80036fc <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8003674:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003676:	4d4a      	ldr	r5, [pc, #296]	; (80037a0 <HAL_ADC_Init+0x14c>)
 8003678:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800367a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800367e:	f021 0102 	bic.w	r1, r1, #2
 8003682:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003686:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8003688:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800368a:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800368c:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800368e:	d053      	beq.n	8003738 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003690:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003692:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8003696:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003698:	68a5      	ldr	r5, [r4, #8]
 800369a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800369e:	d039      	beq.n	8003714 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036a0:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80036a4:	2d01      	cmp	r5, #1
 80036a6:	bf0c      	ite	eq
 80036a8:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 80036ac:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036b0:	f1be 0f01 	cmp.w	lr, #1
 80036b4:	d052      	beq.n	800375c <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 80036b6:	6856      	ldr	r6, [r2, #4]
 80036b8:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80036bc:	ea46 060c 	orr.w	r6, r6, ip
 80036c0:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80036c2:	6897      	ldr	r7, [r2, #8]
 80036c4:	4e37      	ldr	r6, [pc, #220]	; (80037a4 <HAL_ADC_Init+0x150>)
 80036c6:	403e      	ands	r6, r7
 80036c8:	430e      	orrs	r6, r1
 80036ca:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036cc:	2d01      	cmp	r5, #1
 80036ce:	d02f      	beq.n	8003730 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 80036d0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80036d2:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 80036d6:	ea4c 0303 	orr.w	r3, ip, r3
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036dc:	6892      	ldr	r2, [r2, #8]
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_ADC_Init+0x154>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	4299      	cmp	r1, r3
 80036e4:	d030      	beq.n	8003748 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 80036e6:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80036e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036ea:	f023 0312 	bic.w	r3, r3, #18
 80036ee:	f043 0310 	orr.w	r3, r3, #16
 80036f2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036f6:	4303      	orrs	r3, r0
 80036f8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80036fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80036fe:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003700:	f043 0310 	orr.w	r3, r3, #16
 8003704:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8003708:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800370a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800370e:	f7ff f8d3 	bl	80028b8 <HAL_ADC_MspInit>
 8003712:	e7a6      	b.n	8003662 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003714:	7d27      	ldrb	r7, [r4, #20]
 8003716:	2f01      	cmp	r7, #1
 8003718:	d01f      	beq.n	800375a <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 800371a:	6853      	ldr	r3, [r2, #4]
 800371c:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003726:	6895      	ldr	r5, [r2, #8]
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <HAL_ADC_Init+0x150>)
 800372a:	402b      	ands	r3, r5
 800372c:	430b      	orrs	r3, r1
 800372e:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	3b01      	subs	r3, #1
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	e7cb      	b.n	80036d0 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003738:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 800373c:	bf08      	it	eq
 800373e:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8003742:	e7a5      	b.n	8003690 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8003744:	2001      	movs	r0, #1
}
 8003746:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8003748:	2300      	movs	r3, #0
 800374a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800374c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800375a:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800375c:	b1c6      	cbz	r6, 8003790 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003760:	f046 0620 	orr.w	r6, r6, #32
 8003764:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003768:	f046 0601 	orr.w	r6, r6, #1
 800376c:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 800376e:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003770:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003774:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003778:	ea46 060c 	orr.w	r6, r6, ip
 800377c:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800377e:	6897      	ldr	r7, [r2, #8]
 8003780:	4e08      	ldr	r6, [pc, #32]	; (80037a4 <HAL_ADC_Init+0x150>)
 8003782:	ea06 0607 	and.w	r6, r6, r7
 8003786:	ea46 0601 	orr.w	r6, r6, r1
 800378a:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800378c:	d19e      	bne.n	80036cc <HAL_ADC_Init+0x78>
 800378e:	e7cf      	b.n	8003730 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003790:	69a6      	ldr	r6, [r4, #24]
 8003792:	3e01      	subs	r6, #1
 8003794:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8003798:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 800379c:	e7e7      	b.n	800376e <HAL_ADC_Init+0x11a>
 800379e:	bf00      	nop
 80037a0:	40013c00 	.word	0x40013c00
 80037a4:	ffe1f7fd 	.word	0xffe1f7fd
 80037a8:	ff1f0efe 	.word	0xff1f0efe

080037ac <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80037ac:	2300      	movs	r3, #0
{
 80037ae:	b570      	push	{r4, r5, r6, lr}
 80037b0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80037b2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d05f      	beq.n	800387c <HAL_ADCEx_Calibration_Start+0xd0>
 80037bc:	2301      	movs	r3, #1
 80037be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037c2:	4604      	mov	r4, r0
 80037c4:	f7ff ff1c 	bl	8003600 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037c8:	4605      	mov	r5, r0
 80037ca:	b128      	cbz	r0, 80037d8 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037cc:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 80037ce:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 80037d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80037d4:	b002      	add	sp, #8
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80037d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037da:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 80037dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037e0:	f023 0302 	bic.w	r3, r3, #2
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037ea:	2002      	movs	r0, #2
 80037ec:	6816      	ldr	r6, [r2, #0]
 80037ee:	f001 fa95 	bl	8004d1c <HAL_RCCEx_GetPeriphCLKFreq>
 80037f2:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80037f6:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80037f8:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	b12b      	cbz	r3, 800380a <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 80037fe:	9b01      	ldr	r3, [sp, #4]
 8003800:	3b01      	subs	r3, #1
 8003802:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f9      	bne.n	80037fe <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 800380a:	4620      	mov	r0, r4
 800380c:	f7ff fe4e 	bl	80034ac <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	6893      	ldr	r3, [r2, #8]
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800381a:	f7ff fcdf 	bl	80031dc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800381e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8003820:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	0711      	lsls	r1, r2, #28
 8003826:	d50b      	bpl.n	8003840 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003828:	f7ff fcd8 	bl	80031dc <HAL_GetTick>
 800382c:	1b83      	subs	r3, r0, r6
 800382e:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003830:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003832:	d902      	bls.n	800383a <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	0712      	lsls	r2, r2, #28
 8003838:	d424      	bmi.n	8003884 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	0710      	lsls	r0, r2, #28
 800383e:	d4f3      	bmi.n	8003828 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	f042 0204 	orr.w	r2, r2, #4
 8003846:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003848:	f7ff fcc8 	bl	80031dc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800384c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800384e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0759      	lsls	r1, r3, #29
 8003854:	d50b      	bpl.n	800386e <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003856:	f7ff fcc1 	bl	80031dc <HAL_GetTick>
 800385a:	1b83      	subs	r3, r0, r6
 800385c:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800385e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003860:	d902      	bls.n	8003868 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	0752      	lsls	r2, r2, #29
 8003866:	d40d      	bmi.n	8003884 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	075b      	lsls	r3, r3, #29
 800386c:	d4f3      	bmi.n	8003856 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003870:	f023 0303 	bic.w	r3, r3, #3
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	62a3      	str	r3, [r4, #40]	; 0x28
 800387a:	e7a7      	b.n	80037cc <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 800387c:	2502      	movs	r5, #2
}
 800387e:	4628      	mov	r0, r5
 8003880:	b002      	add	sp, #8
 8003882:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8003884:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8003886:	2200      	movs	r2, #0
}
 8003888:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 800388a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800388c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8003890:	f023 0312 	bic.w	r3, r3, #18
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800389a:	b002      	add	sp, #8
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	bf00      	nop
 80038a0:	20000004 	.word	0x20000004

080038a4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4906      	ldr	r1, [pc, #24]	; (80038c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80038c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ca:	b500      	push	{lr}
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d2:	f1c3 0e07 	rsb	lr, r3, #7
 80038d6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038de:	bf28      	it	cs
 80038e0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e4:	f1bc 0f06 	cmp.w	ip, #6
 80038e8:	d91b      	bls.n	8003922 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ea:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ee:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	fa0c fc03 	lsl.w	ip, ip, r3
 80038f4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 3cff 	mov.w	ip, #4294967295
 80038fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003900:	ea21 010c 	bic.w	r1, r1, ip
 8003904:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003906:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800390c:	db0c      	blt.n	8003928 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	0109      	lsls	r1, r1, #4
 8003910:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003914:	b2c9      	uxtb	r1, r1
 8003916:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800391a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800391e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003922:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003924:	4613      	mov	r3, r2
 8003926:	e7e7      	b.n	80038f8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_NVIC_SetPriority+0x78>)
 800392a:	f000 000f 	and.w	r0, r0, #15
 800392e:	0109      	lsls	r1, r1, #4
 8003930:	b2c9      	uxtb	r1, r1
 8003932:	4403      	add	r3, r0
 8003934:	7619      	strb	r1, [r3, #24]
 8003936:	f85d fb04 	ldr.w	pc, [sp], #4
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00
 8003940:	e000ecfc 	.word	0xe000ecfc

08003944 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003944:	2800      	cmp	r0, #0
 8003946:	db07      	blt.n	8003958 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003948:	2301      	movs	r3, #1
 800394a:	f000 011f 	and.w	r1, r0, #31
 800394e:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_NVIC_EnableIRQ+0x18>)
 8003950:	0940      	lsrs	r0, r0, #5
 8003952:	408b      	lsls	r3, r1
 8003954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100

08003960 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003960:	3801      	subs	r0, #1
 8003962:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003966:	d20f      	bcs.n	8003988 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003970:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003972:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003974:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	4c05      	ldr	r4, [pc, #20]	; (800398c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003978:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800397e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003980:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003982:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003984:	6119      	str	r1, [r3, #16]
 8003986:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003988:	2001      	movs	r0, #1
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003994:	680e      	ldr	r6, [r1, #0]
{
 8003996:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	2e00      	cmp	r6, #0
 800399a:	f000 80be 	beq.w	8003b1a <HAL_GPIO_Init+0x18a>
 800399e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039a0:	4f85      	ldr	r7, [pc, #532]	; (8003bb8 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 80039a2:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80039a4:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039a6:	4d85      	ldr	r5, [pc, #532]	; (8003bbc <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 80039a8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8003bc0 <HAL_GPIO_Init+0x230>
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80039ae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b0:	fa36 f403 	lsrs.w	r4, r6, r3
 80039b4:	f102 0204 	add.w	r2, r2, #4
 80039b8:	f000 80af 	beq.w	8003b1a <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 80039bc:	2401      	movs	r4, #1
 80039be:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80039c0:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039c4:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80039c8:	d1f1      	bne.n	80039ae <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80039ca:	684e      	ldr	r6, [r1, #4]
 80039cc:	2e12      	cmp	r6, #18
 80039ce:	f200 80a7 	bhi.w	8003b20 <HAL_GPIO_Init+0x190>
 80039d2:	2e12      	cmp	r6, #18
 80039d4:	d81a      	bhi.n	8003a0c <HAL_GPIO_Init+0x7c>
 80039d6:	e8df f006 	tbb	[pc, r6]
 80039da:	c2b0      	.short	0xc2b0
 80039dc:	1919d7be 	.word	0x1919d7be
 80039e0:	19191919 	.word	0x19191919
 80039e4:	19191919 	.word	0x19191919
 80039e8:	ba191919 	.word	0xba191919
 80039ec:	c5          	.byte	0xc5
 80039ed:	00          	.byte	0x00
 80039ee:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003bc4 <HAL_GPIO_Init+0x234>
 80039f2:	4576      	cmp	r6, lr
 80039f4:	f000 80a1 	beq.w	8003b3a <HAL_GPIO_Init+0x1aa>
 80039f8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80039fc:	4576      	cmp	r6, lr
 80039fe:	f000 809c 	beq.w	8003b3a <HAL_GPIO_Init+0x1aa>
 8003a02:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8003a06:	4576      	cmp	r6, lr
 8003a08:	f000 8097 	beq.w	8003b3a <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003a10:	bf9c      	itt	ls
 8003a12:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a14:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a16:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a1a:	bf84      	itt	hi
 8003a1c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a20:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a24:	f8de 4000 	ldr.w	r4, [lr]
 8003a28:	fa0a f90b 	lsl.w	r9, sl, fp
 8003a2c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003a30:	ea24 040b 	bic.w	r4, r4, fp
 8003a34:	ea44 0409 	orr.w	r4, r4, r9
 8003a38:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3c:	684c      	ldr	r4, [r1, #4]
 8003a3e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003a42:	f000 8082 	beq.w	8003b4a <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a46:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a4a:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a4e:	f04e 0e01 	orr.w	lr, lr, #1
 8003a52:	f8c7 e018 	str.w	lr, [r7, #24]
 8003a56:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a5a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a5e:	f00e 0e01 	and.w	lr, lr, #1
 8003a62:	f8cd e004 	str.w	lr, [sp, #4]
 8003a66:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003a6a:	f023 0e03 	bic.w	lr, r3, #3
 8003a6e:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003a72:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003a76:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a7a:	fa06 f609 	lsl.w	r6, r6, r9
 8003a7e:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a82:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003bc8 <HAL_GPIO_Init+0x238>
 8003a86:	4558      	cmp	r0, fp
 8003a88:	d01b      	beq.n	8003ac2 <HAL_GPIO_Init+0x132>
 8003a8a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8003a8e:	4558      	cmp	r0, fp
 8003a90:	d073      	beq.n	8003b7a <HAL_GPIO_Init+0x1ea>
 8003a92:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003bcc <HAL_GPIO_Init+0x23c>
 8003a96:	4558      	cmp	r0, fp
 8003a98:	d068      	beq.n	8003b6c <HAL_GPIO_Init+0x1dc>
 8003a9a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8003bd0 <HAL_GPIO_Init+0x240>
 8003a9e:	4558      	cmp	r0, fp
 8003aa0:	d07c      	beq.n	8003b9c <HAL_GPIO_Init+0x20c>
 8003aa2:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003bd4 <HAL_GPIO_Init+0x244>
 8003aa6:	4558      	cmp	r0, fp
 8003aa8:	d07f      	beq.n	8003baa <HAL_GPIO_Init+0x21a>
 8003aaa:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003bd8 <HAL_GPIO_Init+0x248>
 8003aae:	4558      	cmp	r0, fp
 8003ab0:	bf0c      	ite	eq
 8003ab2:	f04f 0b05 	moveq.w	fp, #5
 8003ab6:	f04f 0b06 	movne.w	fp, #6
 8003aba:	fa0b f909 	lsl.w	r9, fp, r9
 8003abe:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003ac2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003ac6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003acc:	bf14      	ite	ne
 8003ace:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ad2:	ea26 060c 	biceq.w	r6, r6, ip
 8003ad6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003ad8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ada:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003ade:	bf14      	ite	ne
 8003ae0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ae4:	ea26 060c 	biceq.w	r6, r6, ip
 8003ae8:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aea:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aec:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003af0:	bf14      	ite	ne
 8003af2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003af6:	ea26 060c 	biceq.w	r6, r6, ip
 8003afa:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003afc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b00:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b02:	d01f      	beq.n	8003b44 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b04:	ea44 040c 	orr.w	r4, r4, ip
 8003b08:	60ec      	str	r4, [r5, #12]
 8003b0a:	680e      	ldr	r6, [r1, #0]
	position++;
 8003b0c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0e:	fa36 f403 	lsrs.w	r4, r6, r3
 8003b12:	f102 0204 	add.w	r2, r2, #4
 8003b16:	f47f af51 	bne.w	80039bc <HAL_GPIO_Init+0x2c>
  }
}
 8003b1a:	b003      	add	sp, #12
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003b20:	4546      	cmp	r6, r8
 8003b22:	d00a      	beq.n	8003b3a <HAL_GPIO_Init+0x1aa>
 8003b24:	f67f af63 	bls.w	80039ee <HAL_GPIO_Init+0x5e>
 8003b28:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003bdc <HAL_GPIO_Init+0x24c>
 8003b2c:	4576      	cmp	r6, lr
 8003b2e:	d004      	beq.n	8003b3a <HAL_GPIO_Init+0x1aa>
 8003b30:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003b34:	4576      	cmp	r6, lr
 8003b36:	f47f af69 	bne.w	8003a0c <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b3a:	688e      	ldr	r6, [r1, #8]
 8003b3c:	bb3e      	cbnz	r6, 8003b8e <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b3e:	f04f 0a04 	mov.w	sl, #4
 8003b42:	e763      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b44:	ea24 040c 	bic.w	r4, r4, ip
 8003b48:	60ec      	str	r4, [r5, #12]
 8003b4a:	680e      	ldr	r6, [r1, #0]
 8003b4c:	e72f      	b.n	80039ae <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b4e:	68cc      	ldr	r4, [r1, #12]
 8003b50:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003b54:	e75a      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b56:	68cc      	ldr	r4, [r1, #12]
 8003b58:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003b5c:	e756      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b5e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003b62:	e753      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b64:	68cc      	ldr	r4, [r1, #12]
 8003b66:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003b6a:	e74f      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b6c:	f04f 0b02 	mov.w	fp, #2
 8003b70:	fa0b f909 	lsl.w	r9, fp, r9
 8003b74:	ea46 0609 	orr.w	r6, r6, r9
 8003b78:	e7a3      	b.n	8003ac2 <HAL_GPIO_Init+0x132>
 8003b7a:	f04f 0b01 	mov.w	fp, #1
 8003b7e:	fa0b f909 	lsl.w	r9, fp, r9
 8003b82:	ea46 0609 	orr.w	r6, r6, r9
 8003b86:	e79c      	b.n	8003ac2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8003b88:	f04f 0a00 	mov.w	sl, #0
 8003b8c:	e73e      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b8e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b90:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003b94:	bf0c      	ite	eq
 8003b96:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003b98:	6144      	strne	r4, [r0, #20]
 8003b9a:	e737      	b.n	8003a0c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b9c:	f04f 0b03 	mov.w	fp, #3
 8003ba0:	fa0b f909 	lsl.w	r9, fp, r9
 8003ba4:	ea46 0609 	orr.w	r6, r6, r9
 8003ba8:	e78b      	b.n	8003ac2 <HAL_GPIO_Init+0x132>
 8003baa:	f04f 0b04 	mov.w	fp, #4
 8003bae:	fa0b f909 	lsl.w	r9, fp, r9
 8003bb2:	ea46 0609 	orr.w	r6, r6, r9
 8003bb6:	e784      	b.n	8003ac2 <HAL_GPIO_Init+0x132>
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	10220000 	.word	0x10220000
 8003bc4:	10120000 	.word	0x10120000
 8003bc8:	40010800 	.word	0x40010800
 8003bcc:	40011000 	.word	0x40011000
 8003bd0:	40011400 	.word	0x40011400
 8003bd4:	40011800 	.word	0x40011800
 8003bd8:	40011c00 	.word	0x40011c00
 8003bdc:	10310000 	.word	0x10310000

08003be0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003be0:	6883      	ldr	r3, [r0, #8]
 8003be2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003be4:	bf14      	ite	ne
 8003be6:	2001      	movne	r0, #1
 8003be8:	2000      	moveq	r0, #0
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bec:	b902      	cbnz	r2, 8003bf0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bee:	0409      	lsls	r1, r1, #16
 8003bf0:	6101      	str	r1, [r0, #16]
  }
}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003bfa:	6951      	ldr	r1, [r2, #20]
 8003bfc:	4201      	tst	r1, r0
 8003bfe:	d100      	bne.n	8003c02 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c00:	4770      	bx	lr
{
 8003c02:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c04:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c06:	f7ff fff5 	bl	8003bf4 <HAL_GPIO_EXTI_Callback>
}
 8003c0a:	bd08      	pop	{r3, pc}
 8003c0c:	40010400 	.word	0x40010400

08003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c14:	4680      	mov	r8, r0
 8003c16:	460e      	mov	r6, r1
 8003c18:	4617      	mov	r7, r2
 8003c1a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c20:	e004      	b.n	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c22:	6965      	ldr	r5, [r4, #20]
 8003c24:	056a      	lsls	r2, r5, #21
 8003c26:	d409      	bmi.n	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	1c7b      	adds	r3, r7, #1
 8003c2a:	d121      	bne.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c2c:	6960      	ldr	r0, [r4, #20]
 8003c2e:	ea26 0000 	bic.w	r0, r6, r0
 8003c32:	b280      	uxth	r0, r0
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1f4      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8003c46:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4c:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c50:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c60:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 8003c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c70:	f7ff fab4 	bl	80031dc <HAL_GetTick>
 8003c74:	eba0 0009 	sub.w	r0, r0, r9
 8003c78:	42b8      	cmp	r0, r7
 8003c7a:	d801      	bhi.n	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8003c7c:	2f00      	cmp	r7, #0
 8003c7e:	d1cd      	bne.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c80:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c82:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003c94:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c96:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003c9a:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003ca2:	e7c9      	b.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08003ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	460d      	mov	r5, r1
 8003caa:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cac:	e008      	b.n	8003cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cae:	6962      	ldr	r2, [r4, #20]
 8003cb0:	06d2      	lsls	r2, r2, #27
 8003cb2:	d41b      	bmi.n	8003cec <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7ff fa92 	bl	80031dc <HAL_GetTick>
 8003cb8:	1bc0      	subs	r0, r0, r7
 8003cba:	42a8      	cmp	r0, r5
 8003cbc:	d807      	bhi.n	8003cce <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8003cbe:	b135      	cbz	r5, 8003cce <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc0:	6834      	ldr	r4, [r6, #0]
 8003cc2:	6963      	ldr	r3, [r4, #20]
 8003cc4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003cc8:	d0f1      	beq.n	8003cae <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003cca:	2000      	movs	r0, #0
}
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cce:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cd4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003cde:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 8003ce6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce8:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cec:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf2:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf4:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfa:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cfe:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d00:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d06:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0a:	bf00      	nop

08003d0c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4605      	mov	r5, r0
 8003d10:	460e      	mov	r6, r1
 8003d12:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d14:	682c      	ldr	r4, [r5, #0]
 8003d16:	e001      	b.n	8003d1c <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	1c73      	adds	r3, r6, #1
 8003d1a:	d119      	bne.n	8003d50 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d1c:	6963      	ldr	r3, [r4, #20]
 8003d1e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003d22:	d113      	bne.n	8003d4c <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d24:	6960      	ldr	r0, [r4, #20]
 8003d26:	0542      	lsls	r2, r0, #21
 8003d28:	d5f6      	bpl.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2a:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d2e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d32:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3c:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d42:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d48:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7ff fa44 	bl	80031dc <HAL_GetTick>
 8003d54:	1bc0      	subs	r0, r0, r7
 8003d56:	42b0      	cmp	r0, r6
 8003d58:	d801      	bhi.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	d1da      	bne.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d6e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003d76:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d7c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	4605      	mov	r5, r0
 8003d80:	460e      	mov	r6, r1
 8003d82:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d84:	682c      	ldr	r4, [r5, #0]
 8003d86:	e001      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	1c73      	adds	r3, r6, #1
 8003d8a:	d119      	bne.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8c:	6963      	ldr	r3, [r4, #20]
 8003d8e:	f013 0304 	ands.w	r3, r3, #4
 8003d92:	d113      	bne.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d94:	6960      	ldr	r0, [r4, #20]
 8003d96:	0542      	lsls	r2, r0, #21
 8003d98:	d5f6      	bpl.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d9e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da0:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003da2:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003dae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db2:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db8:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003dbc:	2000      	movs	r0, #0
}
 8003dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7ff fa0c 	bl	80031dc <HAL_GetTick>
 8003dc4:	1bc0      	subs	r0, r0, r7
 8003dc6:	42b0      	cmp	r0, r6
 8003dc8:	d801      	bhi.n	8003dce <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	d1da      	bne.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dce:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003dde:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003de6:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dec <I2C_RequestMemoryWrite>:
{
 8003dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	6805      	ldr	r5, [r0, #0]
{
 8003df2:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df4:	682b      	ldr	r3, [r5, #0]
{
 8003df6:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 8003e02:	4688      	mov	r8, r1
 8003e04:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e08:	e001      	b.n	8003e0e <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	1c71      	adds	r1, r6, #1
 8003e0c:	d110      	bne.n	8003e30 <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0e:	696c      	ldr	r4, [r5, #20]
 8003e10:	07e3      	lsls	r3, r4, #31
 8003e12:	d5fa      	bpl.n	8003e0a <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e14:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003e18:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1a:	4653      	mov	r3, sl
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4638      	mov	r0, r7
 8003e20:	492e      	ldr	r1, [pc, #184]	; (8003edc <I2C_RequestMemoryWrite+0xf0>)
 8003e22:	f7ff fef5 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e26:	b160      	cbz	r0, 8003e42 <I2C_RequestMemoryWrite+0x56>
    return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1
}
 8003e2a:	b003      	add	sp, #12
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7ff f9d4 	bl	80031dc <HAL_GetTick>
 8003e34:	eba0 000a 	sub.w	r0, r0, sl
 8003e38:	4286      	cmp	r6, r0
 8003e3a:	d31a      	bcc.n	8003e72 <I2C_RequestMemoryWrite+0x86>
 8003e3c:	b1ce      	cbz	r6, 8003e72 <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3e:	683d      	ldr	r5, [r7, #0]
 8003e40:	e7e5      	b.n	8003e0e <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9001      	str	r0, [sp, #4]
 8003e46:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e48:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4a:	9101      	str	r1, [sp, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e56:	f7ff ff59 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d133      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5e:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e62:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e64:	d121      	bne.n	8003eaa <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e66:	fa5f f289 	uxtb.w	r2, r9
 8003e6a:	611a      	str	r2, [r3, #16]
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e72:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e74:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e76:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e78:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e82:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003e88:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e8e:	680b      	ldr	r3, [r1, #0]
 8003e90:	05da      	lsls	r2, r3, #23
 8003e92:	d506      	bpl.n	8003ea2 <I2C_RequestMemoryWrite+0xb6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e94:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003e98:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003e9c:	b003      	add	sp, #12
 8003e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003ea2:	2003      	movs	r0, #3
}
 8003ea4:	b003      	add	sp, #12
 8003ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eaa:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8003eae:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb0:	4652      	mov	r2, sl
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ff29 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eba:	b920      	cbnz	r0, 8003ec6 <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	fa5f f389 	uxtb.w	r3, r9
 8003ec2:	6113      	str	r3, [r2, #16]
 8003ec4:	e7b1      	b.n	8003e2a <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d1ad      	bne.n	8003e28 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 8003ece:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	6813      	ldr	r3, [r2, #0]
 8003ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e7a7      	b.n	8003e2a <I2C_RequestMemoryWrite+0x3e>
 8003eda:	bf00      	nop
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_RequestMemoryRead>:
{
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee4:	6805      	ldr	r5, [r0, #0]
{
 8003ee6:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	682b      	ldr	r3, [r5, #0]
{
 8003eea:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef0:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	682b      	ldr	r3, [r5, #0]
{
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003efe:	4688      	mov	r8, r1
 8003f00:	4692      	mov	sl, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f02:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e001      	b.n	8003f0a <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	1c74      	adds	r4, r6, #1
 8003f08:	d112      	bne.n	8003f30 <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f0a:	696c      	ldr	r4, [r5, #20]
 8003f0c:	07e1      	lsls	r1, r4, #31
 8003f0e:	d5fa      	bpl.n	8003f06 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f10:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8003f14:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f16:	4632      	mov	r2, r6
 8003f18:	464b      	mov	r3, r9
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	4943      	ldr	r1, [pc, #268]	; (800402c <I2C_RequestMemoryRead+0x14c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f1e:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f22:	f7ff fe75 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f26:	b168      	cbz	r0, 8003f44 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
}
 8003f2a:	b003      	add	sp, #12
 8003f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7ff f954 	bl	80031dc <HAL_GetTick>
 8003f34:	eba0 0009 	sub.w	r0, r0, r9
 8003f38:	4286      	cmp	r6, r0
 8003f3a:	d337      	bcc.n	8003fac <I2C_RequestMemoryRead+0xcc>
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	d035      	beq.n	8003fac <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f40:	683d      	ldr	r5, [r7, #0]
 8003f42:	e7e2      	b.n	8003f0a <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	9001      	str	r0, [sp, #4]
 8003f48:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	464a      	mov	r2, r9
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4c:	9101      	str	r1, [sp, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f50:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f54:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	f7ff fed8 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d13d      	bne.n	8003fdc <I2C_RequestMemoryRead+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f60:	f1bb 0f01 	cmp.w	fp, #1
 8003f64:	d148      	bne.n	8003ff8 <I2C_RequestMemoryRead+0x118>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	fa5f f28a 	uxtb.w	r2, sl
 8003f6c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6e:	464a      	mov	r2, r9
 8003f70:	4631      	mov	r1, r6
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff feca 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d12f      	bne.n	8003fdc <I2C_RequestMemoryRead+0xfc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	680b      	ldr	r3, [r1, #0]
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f86:	e001      	b.n	8003f8c <I2C_RequestMemoryRead+0xac>
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	1c72      	adds	r2, r6, #1
 8003f8a:	d145      	bne.n	8004018 <I2C_RequestMemoryRead+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f8c:	694b      	ldr	r3, [r1, #20]
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d5fa      	bpl.n	8003f88 <I2C_RequestMemoryRead+0xa8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f92:	f048 0401 	orr.w	r4, r8, #1
 8003f96:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f98:	464b      	mov	r3, r9
 8003f9a:	4632      	mov	r2, r6
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	4923      	ldr	r1, [pc, #140]	; (800402c <I2C_RequestMemoryRead+0x14c>)
 8003fa0:	f7ff fe36 	bl	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003fa4:	3800      	subs	r0, #0
 8003fa6:	bf18      	it	ne
 8003fa8:	2001      	movne	r0, #1
 8003faa:	e7be      	b.n	8003f2a <I2C_RequestMemoryRead+0x4a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fac:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fb0:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fb6:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fbc:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fbe:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003fc2:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fc6:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	05d8      	lsls	r0, r3, #23
 8003fcc:	d510      	bpl.n	8003ff0 <I2C_RequestMemoryRead+0x110>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fce:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003fd2:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003fd6:	b003      	add	sp, #12
 8003fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d1a2      	bne.n	8003f28 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe2:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8003fe4:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e79c      	b.n	8003f2a <I2C_RequestMemoryRead+0x4a>
    return HAL_TIMEOUT;
 8003ff0:	2003      	movs	r0, #3
}
 8003ff2:	b003      	add	sp, #12
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8003ffe:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004000:	4631      	mov	r1, r6
 8004002:	464a      	mov	r2, r9
 8004004:	4638      	mov	r0, r7
 8004006:	f7ff fe81 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 800400a:	2800      	cmp	r0, #0
 800400c:	d1e6      	bne.n	8003fdc <I2C_RequestMemoryRead+0xfc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	fa5f f38a 	uxtb.w	r3, sl
 8004014:	6113      	str	r3, [r2, #16]
 8004016:	e7aa      	b.n	8003f6e <I2C_RequestMemoryRead+0x8e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004018:	f7ff f8e0 	bl	80031dc <HAL_GetTick>
 800401c:	eba0 0309 	sub.w	r3, r0, r9
 8004020:	429e      	cmp	r6, r3
 8004022:	d3c3      	bcc.n	8003fac <I2C_RequestMemoryRead+0xcc>
 8004024:	2e00      	cmp	r6, #0
 8004026:	d0c1      	beq.n	8003fac <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	e7af      	b.n	8003f8c <I2C_RequestMemoryRead+0xac>
 800402c:	00010002 	.word	0x00010002

08004030 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004030:	2800      	cmp	r0, #0
 8004032:	f000 80b9 	beq.w	80041a8 <HAL_I2C_Init+0x178>
{
 8004036:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004038:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800403c:	4604      	mov	r4, r0
 800403e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8098 	beq.w	8004178 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800404a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800404c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004066:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004068:	f000 fdb6 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	494f      	ldr	r1, [pc, #316]	; (80041ac <HAL_I2C_Init+0x17c>)
 8004070:	428b      	cmp	r3, r1
 8004072:	d84f      	bhi.n	8004114 <HAL_I2C_Init+0xe4>
 8004074:	4a4e      	ldr	r2, [pc, #312]	; (80041b0 <HAL_I2C_Init+0x180>)
 8004076:	4290      	cmp	r0, r2
 8004078:	d97c      	bls.n	8004174 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800407a:	4d4e      	ldr	r5, [pc, #312]	; (80041b4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800407c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004082:	1e43      	subs	r3, r0, #1
 8004084:	fbb3 f3f2 	udiv	r3, r3, r2
 8004088:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800408e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004090:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004092:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004096:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800409a:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800409e:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040a2:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80040a8:	ea41 010c 	orr.w	r1, r1, ip
 80040ac:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ae:	69d1      	ldr	r1, [r2, #28]
 80040b0:	ea13 0f0e 	tst.w	r3, lr
 80040b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80040b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80040bc:	d161      	bne.n	8004182 <HAL_I2C_Init+0x152>
 80040be:	2304      	movs	r3, #4
 80040c0:	430b      	orrs	r3, r1
 80040c2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040c4:	6811      	ldr	r1, [r2, #0]
 80040c6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80040ca:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80040ce:	4303      	orrs	r3, r0
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d4:	6891      	ldr	r1, [r2, #8]
 80040d6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80040da:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80040de:	4303      	orrs	r3, r0
 80040e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e8:	68d0      	ldr	r0, [r2, #12]
 80040ea:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80040ee:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80040f2:	430b      	orrs	r3, r1
 80040f4:	4303      	orrs	r3, r0
 80040f6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80040f8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fa:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004102:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004110:	4608      	mov	r0, r1
}
 8004112:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004114:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <HAL_I2C_Init+0x188>)
 8004116:	4290      	cmp	r0, r2
 8004118:	d92c      	bls.n	8004174 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800411a:	4d26      	ldr	r5, [pc, #152]	; (80041b4 <HAL_I2C_Init+0x184>)
 800411c:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004120:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004124:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004128:	fb02 f101 	mul.w	r1, r2, r1
 800412c:	4d23      	ldr	r5, [pc, #140]	; (80041bc <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800412e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004130:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004134:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004136:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004138:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800413c:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004140:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004142:	6a15      	ldr	r5, [r2, #32]
 8004144:	3101      	adds	r1, #1
 8004146:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800414a:	4329      	orrs	r1, r5
 800414c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800414e:	69d1      	ldr	r1, [r2, #28]
 8004150:	68a5      	ldr	r5, [r4, #8]
 8004152:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004156:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800415a:	b9ad      	cbnz	r5, 8004188 <HAL_I2C_Init+0x158>
 800415c:	3801      	subs	r0, #1
 800415e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	b1d3      	cbz	r3, 80041a4 <HAL_I2C_Init+0x174>
 800416e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004172:	e7a5      	b.n	80040c0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004174:	2001      	movs	r0, #1
}
 8004176:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004178:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800417c:	f7fe fbce 	bl	800291c <HAL_I2C_MspInit>
 8004180:	e762      	b.n	8004048 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004186:	e79b      	b.n	80040c0 <HAL_I2C_Init+0x90>
 8004188:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800418c:	3801      	subs	r0, #1
 800418e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004192:	fbb0 f3f3 	udiv	r3, r0, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419c:	b113      	cbz	r3, 80041a4 <HAL_I2C_Init+0x174>
 800419e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a2:	e78d      	b.n	80040c0 <HAL_I2C_Init+0x90>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e78b      	b.n	80040c0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
}
 80041aa:	4770      	bx	lr
 80041ac:	000186a0 	.word	0x000186a0
 80041b0:	001e847f 	.word	0x001e847f
 80041b4:	431bde83 	.word	0x431bde83
 80041b8:	003d08ff 	.word	0x003d08ff
 80041bc:	10624dd3 	.word	0x10624dd3

080041c0 <HAL_I2C_Mem_Write>:
{
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4604      	mov	r4, r0
 80041c6:	b083      	sub	sp, #12
 80041c8:	4699      	mov	r9, r3
 80041ca:	460f      	mov	r7, r1
 80041cc:	4690      	mov	r8, r2
 80041ce:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80041d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80041d4:	f7ff f802 	bl	80031dc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d003      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80041e0:	2002      	movs	r0, #2
}
 80041e2:	b003      	add	sp, #12
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	4605      	mov	r5, r0
 80041ea:	e004      	b.n	80041f6 <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fe fff6 	bl	80031dc <HAL_GetTick>
 80041f0:	1b40      	subs	r0, r0, r5
 80041f2:	2819      	cmp	r0, #25
 80041f4:	d87b      	bhi.n	80042ee <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	6983      	ldr	r3, [r0, #24]
 80041fa:	ea6f 0c03 	mvn.w	ip, r3
 80041fe:	f01c 0b02 	ands.w	fp, ip, #2
 8004202:	d0f3      	beq.n	80041ec <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8004204:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d0e9      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x20>
 800420c:	2301      	movs	r3, #1
 800420e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	07da      	lsls	r2, r3, #31
 8004216:	d565      	bpl.n	80042e4 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004218:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800421a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800421e:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004222:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004226:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004228:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800422a:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422c:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004230:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004232:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004234:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004236:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800423a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800423e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004242:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004246:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800424c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424e:	4835      	ldr	r0, [pc, #212]	; (8004324 <HAL_I2C_Mem_Write+0x164>)
 8004250:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff fdca 	bl	8003dec <I2C_RequestMemoryWrite>
 8004258:	2800      	cmp	r0, #0
 800425a:	d13f      	bne.n	80042dc <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 800425c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d029      	beq.n	80042b6 <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004262:	462a      	mov	r2, r5
 8004264:	4631      	mov	r1, r6
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff fd50 	bl	8003d0c <I2C_WaitOnTXEFlagUntilTimeout>
 800426c:	2800      	cmp	r0, #0
 800426e:	d14f      	bne.n	8004310 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004270:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	4639      	mov	r1, r7
 8004276:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800427a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800427e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8004280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004282:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 8004286:	3b01      	subs	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428c:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 800428e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004290:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8004292:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004294:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004296:	d50c      	bpl.n	80042b2 <HAL_I2C_Mem_Write+0xf2>
 8004298:	b16a      	cbz	r2, 80042b6 <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429a:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 800429c:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a0:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80042a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80042a4:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80042a6:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80042a8:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80042aa:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80042ac:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80042ae:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80042b0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1d5      	bne.n	8004262 <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	462a      	mov	r2, r5
 80042b8:	4631      	mov	r1, r6
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff fd5e 	bl	8003d7c <I2C_WaitOnBTFFlagUntilTimeout>
 80042c0:	bb30      	cbnz	r0, 8004310 <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042cc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80042d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80042da:	e782      	b.n	80041e2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80042dc:	2001      	movs	r0, #1
}
 80042de:	b003      	add	sp, #12
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 80042e4:	6803      	ldr	r3, [r0, #0]
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6003      	str	r3, [r0, #0]
 80042ec:	e794      	b.n	8004218 <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ee:	2320      	movs	r3, #32
      return HAL_BUSY;
 80042f0:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042f2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042fa:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004300:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	6423      	str	r3, [r4, #64]	; 0x40
}
 800430a:	b003      	add	sp, #12
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d1e2      	bne.n	80042dc <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e75e      	b.n	80041e2 <HAL_I2C_Mem_Write+0x22>
 8004324:	ffff0000 	.word	0xffff0000

08004328 <HAL_I2C_Mem_Read>:
{
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 800432c:	2400      	movs	r4, #0
{
 800432e:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004330:	9403      	str	r4, [sp, #12]
{
 8004332:	4604      	mov	r4, r0
 8004334:	4699      	mov	r9, r3
 8004336:	460f      	mov	r7, r1
 8004338:	4690      	mov	r8, r2
 800433a:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 800433e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8004340:	f7fe ff4c 	bl	80031dc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004344:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004348:	2b20      	cmp	r3, #32
 800434a:	d004      	beq.n	8004356 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 800434c:	2702      	movs	r7, #2
}
 800434e:	4638      	mov	r0, r7
 8004350:	b009      	add	sp, #36	; 0x24
 8004352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004356:	4606      	mov	r6, r0
 8004358:	e005      	b.n	8004366 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fe ff3f 	bl	80031dc <HAL_GetTick>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	2819      	cmp	r0, #25
 8004362:	f200 80b9 	bhi.w	80044d8 <HAL_I2C_Mem_Read+0x1b0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	ea6f 0c03 	mvn.w	ip, r3
 800436e:	f01c 0b02 	ands.w	fp, ip, #2
 8004372:	d0f2      	beq.n	800435a <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8004374:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d0e7      	beq.n	800434c <HAL_I2C_Mem_Read+0x24>
 800437c:	2301      	movs	r3, #1
 800437e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004382:	6803      	ldr	r3, [r0, #0]
 8004384:	07db      	lsls	r3, r3, #31
 8004386:	d539      	bpl.n	80043fc <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004388:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438e:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004392:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004396:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004398:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800439a:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439c:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80043a0:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80043a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80043a4:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a6:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043aa:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ae:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b2:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80043b6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80043bc:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043be:	489d      	ldr	r0, [pc, #628]	; (8004634 <HAL_I2C_Mem_Read+0x30c>)
 80043c0:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fd8c 	bl	8003ee0 <I2C_RequestMemoryRead>
 80043c8:	4607      	mov	r7, r0
 80043ca:	2800      	cmp	r0, #0
 80043cc:	f040 809d 	bne.w	800450a <HAL_I2C_Mem_Read+0x1e2>
    if (hi2c->XferSize == 0U)
 80043d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043d2:	b9c3      	cbnz	r3, 8004406 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	9004      	str	r0, [sp, #16]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	9204      	str	r2, [sp, #16]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	9204      	str	r2, [sp, #16]
 80043e0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80043ec:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80043ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80043fa:	e7a8      	b.n	800434e <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 80043fc:	6803      	ldr	r3, [r0, #0]
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6003      	str	r3, [r0, #0]
 8004404:	e7c0      	b.n	8004388 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8004406:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004408:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 800440a:	f000 8100 	beq.w	800460e <HAL_I2C_Mem_Read+0x2e6>
    else if (hi2c->XferSize == 2U)
 800440e:	2b02      	cmp	r3, #2
 8004410:	f000 80c9 	beq.w	80045a6 <HAL_I2C_Mem_Read+0x27e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800441a:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441c:	9007      	str	r0, [sp, #28]
 800441e:	6951      	ldr	r1, [r2, #20]
 8004420:	9107      	str	r1, [sp, #28]
 8004422:	6992      	ldr	r2, [r2, #24]
 8004424:	9207      	str	r2, [sp, #28]
 8004426:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8004428:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800442a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004638 <HAL_I2C_Mem_Read+0x310>
 800442e:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800463c <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8004432:	d832      	bhi.n	800449a <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8004434:	2b01      	cmp	r3, #1
 8004436:	d061      	beq.n	80044fc <HAL_I2C_Mem_Read+0x1d4>
        else if (hi2c->XferSize == 2U)
 8004438:	2b02      	cmp	r3, #2
 800443a:	d172      	bne.n	8004522 <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	e002      	b.n	8004446 <HAL_I2C_Mem_Read+0x11e>
    if (Timeout != HAL_MAX_DELAY)
 8004440:	1c69      	adds	r1, r5, #1
 8004442:	f040 80c6 	bne.w	80045d2 <HAL_I2C_Mem_Read+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004446:	6953      	ldr	r3, [r2, #20]
 8004448:	075b      	lsls	r3, r3, #29
 800444a:	d5f9      	bpl.n	8004440 <HAL_I2C_Mem_Read+0x118>
 800444c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800445e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004460:	3b01      	subs	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004468:	3301      	adds	r3, #1
 800446a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800446c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004472:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800447a:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800447c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800447e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004480:	3a01      	subs	r2, #1
 8004482:	b292      	uxth	r2, r2
 8004484:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004486:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004488:	3b01      	subs	r3, #1
 800448a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800448c:	3201      	adds	r2, #1
          hi2c->XferSize--;
 800448e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004490:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0a9      	beq.n	80043ea <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8004496:	2b03      	cmp	r3, #3
 8004498:	d9cc      	bls.n	8004434 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449a:	4632      	mov	r2, r6
 800449c:	4629      	mov	r1, r5
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff fc00 	bl	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d130      	bne.n	800450a <HAL_I2C_Mem_Read+0x1e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ae:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80044b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b2:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80044ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80044bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044be:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80044c4:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c8:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80044ca:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80044cc:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044d0:	d5df      	bpl.n	8004492 <HAL_I2C_Mem_Read+0x16a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	7053      	strb	r3, [r2, #1]
 80044d6:	e7d1      	b.n	800447c <HAL_I2C_Mem_Read+0x154>
      return HAL_BUSY;
 80044d8:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 80044da:	2320      	movs	r3, #32
}
 80044dc:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044de:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044e6:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80044ec:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	f043 0320 	orr.w	r3, r3, #32
 80044f4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80044f6:	b009      	add	sp, #36	; 0x24
 80044f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fc:	4632      	mov	r2, r6
 80044fe:	4629      	mov	r1, r5
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff fbcf 	bl	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004506:	2800      	cmp	r0, #0
 8004508:	d0b4      	beq.n	8004474 <HAL_I2C_Mem_Read+0x14c>
      return HAL_ERROR;
 800450a:	2701      	movs	r7, #1
}
 800450c:	4638      	mov	r0, r7
 800450e:	b009      	add	sp, #36	; 0x24
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7fe fe62 	bl	80031dc <HAL_GetTick>
 8004518:	1b80      	subs	r0, r0, r6
 800451a:	4285      	cmp	r5, r0
 800451c:	d361      	bcc.n	80045e2 <HAL_I2C_Mem_Read+0x2ba>
 800451e:	2d00      	cmp	r5, #0
 8004520:	d05f      	beq.n	80045e2 <HAL_I2C_Mem_Read+0x2ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	e001      	b.n	800452a <HAL_I2C_Mem_Read+0x202>
    if (Timeout != HAL_MAX_DELAY)
 8004526:	1c68      	adds	r0, r5, #1
 8004528:	d1f4      	bne.n	8004514 <HAL_I2C_Mem_Read+0x1ec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800452a:	6953      	ldr	r3, [r2, #20]
 800452c:	0759      	lsls	r1, r3, #29
 800452e:	d5fa      	bpl.n	8004526 <HAL_I2C_Mem_Read+0x1fe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004536:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004538:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004540:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004542:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8004546:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 800454e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8004556:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004558:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 800455c:	b292      	uxth	r2, r2
 800455e:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004560:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8004562:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004568:	1c4b      	adds	r3, r1, #1
 800456a:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800456c:	e003      	b.n	8004576 <HAL_I2C_Mem_Read+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	0752      	lsls	r2, r2, #29
 8004574:	d444      	bmi.n	8004600 <HAL_I2C_Mem_Read+0x2d8>
            count--;
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	3b01      	subs	r3, #1
 800457a:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f5      	bne.n	800456e <HAL_I2C_Mem_Read+0x246>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004586:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004596:	b662      	cpsie	i
              return HAL_ERROR;
 8004598:	2701      	movs	r7, #1
}
 800459a:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 800459c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80045a0:	b009      	add	sp, #36	; 0x24
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045ae:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	9006      	str	r0, [sp, #24]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	9206      	str	r2, [sp, #24]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	9206      	str	r2, [sp, #24]
 80045bc:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045c6:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80045c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f47f af2c 	bne.w	8004428 <HAL_I2C_Mem_Read+0x100>
 80045d0:	e70b      	b.n	80043ea <HAL_I2C_Mem_Read+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fe fe03 	bl	80031dc <HAL_GetTick>
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	4285      	cmp	r5, r0
 80045da:	d302      	bcc.n	80045e2 <HAL_I2C_Mem_Read+0x2ba>
 80045dc:	2d00      	cmp	r5, #0
 80045de:	f47f af2d 	bne.w	800443c <HAL_I2C_Mem_Read+0x114>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045e2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80045e4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045e6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 80045f2:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80045f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80045fe:	e6a6      	b.n	800434e <HAL_I2C_Mem_Read+0x26>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004606:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	704b      	strb	r3, [r1, #1]
 800460c:	e727      	b.n	800445e <HAL_I2C_Mem_Read+0x136>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004614:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004616:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	9005      	str	r0, [sp, #20]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	9205      	str	r2, [sp, #20]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	9205      	str	r2, [sp, #20]
 8004624:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800462e:	b662      	cpsie	i
}
 8004630:	e7ca      	b.n	80045c8 <HAL_I2C_Mem_Read+0x2a0>
 8004632:	bf00      	nop
 8004634:	ffff0000 	.word	0xffff0000
 8004638:	20000004 	.word	0x20000004
 800463c:	14f8b589 	.word	0x14f8b589

08004640 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004640:	2800      	cmp	r0, #0
 8004642:	f000 81b6 	beq.w	80049b2 <HAL_RCC_OscConfig+0x372>
{
 8004646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464a:	6803      	ldr	r3, [r0, #0]
 800464c:	4604      	mov	r4, r0
 800464e:	07dd      	lsls	r5, r3, #31
{
 8004650:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	d535      	bpl.n	80046c0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	499a      	ldr	r1, [pc, #616]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004656:	684a      	ldr	r2, [r1, #4]
 8004658:	f002 020c 	and.w	r2, r2, #12
 800465c:	2a04      	cmp	r2, #4
 800465e:	f000 80ef 	beq.w	8004840 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004662:	684a      	ldr	r2, [r1, #4]
 8004664:	f002 020c 	and.w	r2, r2, #12
 8004668:	2a08      	cmp	r2, #8
 800466a:	f000 80e5 	beq.w	8004838 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d010      	beq.n	8004698 <HAL_RCC_OscConfig+0x58>
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 810c 	beq.w	8004894 <HAL_RCC_OscConfig+0x254>
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004680:	f000 8182 	beq.w	8004988 <HAL_RCC_OscConfig+0x348>
 8004684:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e004      	b.n	80046a2 <HAL_RCC_OscConfig+0x62>
 8004698:	4a89      	ldr	r2, [pc, #548]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fe fd9b 	bl	80031dc <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4e86      	ldr	r6, [pc, #536]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80046a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	e005      	b.n	80046b8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fe fd96 	bl	80031dc <HAL_GetTick>
 80046b0:	1b40      	subs	r0, r0, r5
 80046b2:	2864      	cmp	r0, #100	; 0x64
 80046b4:	f200 80ea 	bhi.w	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	039a      	lsls	r2, r3, #14
 80046bc:	d5f6      	bpl.n	80046ac <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	079f      	lsls	r7, r3, #30
 80046c2:	d528      	bpl.n	8004716 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c4:	4a7e      	ldr	r2, [pc, #504]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 80046c6:	6851      	ldr	r1, [r2, #4]
 80046c8:	f011 0f0c 	tst.w	r1, #12
 80046cc:	f000 808d 	beq.w	80047ea <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046d0:	6851      	ldr	r1, [r2, #4]
 80046d2:	f001 010c 	and.w	r1, r1, #12
 80046d6:	2908      	cmp	r1, #8
 80046d8:	f000 8083 	beq.w	80047e2 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8118 	beq.w	8004914 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	2201      	movs	r2, #1
 80046e6:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4e75      	ldr	r6, [pc, #468]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 80046ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046ec:	f7fe fd76 	bl	80031dc <HAL_GetTick>
 80046f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	e005      	b.n	8004700 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fe fd72 	bl	80031dc <HAL_GetTick>
 80046f8:	1b40      	subs	r0, r0, r5
 80046fa:	2802      	cmp	r0, #2
 80046fc:	f200 80c6 	bhi.w	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	0798      	lsls	r0, r3, #30
 8004704:	d5f6      	bpl.n	80046f4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	6833      	ldr	r3, [r6, #0]
 8004708:	6962      	ldr	r2, [r4, #20]
 800470a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800470e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004712:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	071a      	lsls	r2, r3, #28
 8004718:	d41f      	bmi.n	800475a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471a:	075d      	lsls	r5, r3, #29
 800471c:	d542      	bpl.n	80047a4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	00d0      	lsls	r0, r2, #3
 8004724:	d57d      	bpl.n	8004822 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4e67      	ldr	r6, [pc, #412]	; (80048c8 <HAL_RCC_OscConfig+0x288>)
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	05d9      	lsls	r1, r3, #23
 800472e:	f140 809d 	bpl.w	800486c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	f000 80fe 	beq.w	8004936 <HAL_RCC_OscConfig+0x2f6>
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80ca 	beq.w	80048d4 <HAL_RCC_OscConfig+0x294>
 8004740:	2b05      	cmp	r3, #5
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f000 812c 	beq.w	80049a2 <HAL_RCC_OscConfig+0x362>
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	621a      	str	r2, [r3, #32]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	621a      	str	r2, [r3, #32]
 8004758:	e0f2      	b.n	8004940 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475a:	69a3      	ldr	r3, [r4, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d04f      	beq.n	8004800 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8004760:	2201      	movs	r2, #1
 8004762:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004764:	4e56      	ldr	r6, [pc, #344]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8004766:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800476a:	f7fe fd37 	bl	80031dc <HAL_GetTick>
 800476e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004770:	e005      	b.n	800477e <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004772:	f7fe fd33 	bl	80031dc <HAL_GetTick>
 8004776:	1b40      	subs	r0, r0, r5
 8004778:	2802      	cmp	r0, #2
 800477a:	f200 8087 	bhi.w	800488c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	d5f6      	bpl.n	8004772 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004784:	4b51      	ldr	r3, [pc, #324]	; (80048cc <HAL_RCC_OscConfig+0x28c>)
 8004786:	4a52      	ldr	r2, [pc, #328]	; (80048d0 <HAL_RCC_OscConfig+0x290>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0a5b      	lsrs	r3, r3, #9
 8004790:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004792:	bf00      	nop
  }
  while (Delay --);
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	9201      	str	r2, [sp, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f9      	bne.n	8004792 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	075d      	lsls	r5, r3, #29
 80047a2:	d4bc      	bmi.n	800471e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	69e0      	ldr	r0, [r4, #28]
 80047a6:	b1c0      	cbz	r0, 80047da <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a8:	4d45      	ldr	r5, [pc, #276]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 80047aa:	686b      	ldr	r3, [r5, #4]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f000 80d8 	beq.w	8004966 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80047b6:	2200      	movs	r2, #0
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	f000 80fa 	beq.w	80049b6 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80047c2:	f7fe fd0b 	bl	80031dc <HAL_GetTick>
 80047c6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	e004      	b.n	80047d4 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe fd07 	bl	80031dc <HAL_GetTick>
 80047ce:	1b00      	subs	r0, r0, r4
 80047d0:	2802      	cmp	r0, #2
 80047d2:	d85b      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	019b      	lsls	r3, r3, #6
 80047d8:	d4f7      	bmi.n	80047ca <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80047da:	2000      	movs	r0, #0
}
 80047dc:	b002      	add	sp, #8
 80047de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047e2:	6852      	ldr	r2, [r2, #4]
 80047e4:	03d6      	lsls	r6, r2, #15
 80047e6:	f53f af79 	bmi.w	80046dc <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ea:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	0795      	lsls	r5, r2, #30
 80047f0:	d530      	bpl.n	8004854 <HAL_RCC_OscConfig+0x214>
 80047f2:	6922      	ldr	r2, [r4, #16]
 80047f4:	2a01      	cmp	r2, #1
 80047f6:	d02d      	beq.n	8004854 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80047f8:	2001      	movs	r0, #1
}
 80047fa:	b002      	add	sp, #8
 80047fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004800:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004802:	4e2f      	ldr	r6, [pc, #188]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004804:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004808:	f7fe fce8 	bl	80031dc <HAL_GetTick>
 800480c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480e:	e004      	b.n	800481a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fe fce4 	bl	80031dc <HAL_GetTick>
 8004814:	1b40      	subs	r0, r0, r5
 8004816:	2802      	cmp	r0, #2
 8004818:	d838      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800481c:	079f      	lsls	r7, r3, #30
 800481e:	d4f7      	bmi.n	8004810 <HAL_RCC_OscConfig+0x1d0>
 8004820:	e7bd      	b.n	800479e <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004824:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800482a:	61da      	str	r2, [r3, #28]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004836:	e777      	b.n	8004728 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004838:	684a      	ldr	r2, [r1, #4]
 800483a:	03d0      	lsls	r0, r2, #15
 800483c:	f57f af17 	bpl.w	800466e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	0391      	lsls	r1, r2, #14
 8004846:	f57f af3b 	bpl.w	80046c0 <HAL_RCC_OscConfig+0x80>
 800484a:	6862      	ldr	r2, [r4, #4]
 800484c:	2a00      	cmp	r2, #0
 800484e:	f47f af37 	bne.w	80046c0 <HAL_RCC_OscConfig+0x80>
 8004852:	e7d1      	b.n	80047f8 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	491a      	ldr	r1, [pc, #104]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004856:	6960      	ldr	r0, [r4, #20]
 8004858:	680a      	ldr	r2, [r1, #0]
 800485a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800485e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004862:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004864:	071a      	lsls	r2, r3, #28
 8004866:	f57f af58 	bpl.w	800471a <HAL_RCC_OscConfig+0xda>
 800486a:	e776      	b.n	800475a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004872:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004874:	f7fe fcb2 	bl	80031dc <HAL_GetTick>
 8004878:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	6833      	ldr	r3, [r6, #0]
 800487c:	05da      	lsls	r2, r3, #23
 800487e:	f53f af58 	bmi.w	8004732 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fe fcab 	bl	80031dc <HAL_GetTick>
 8004886:	1bc0      	subs	r0, r0, r7
 8004888:	2864      	cmp	r0, #100	; 0x64
 800488a:	d9f6      	bls.n	800487a <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
}
 800488e:	b002      	add	sp, #8
 8004890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004894:	4d0a      	ldr	r5, [pc, #40]	; (80048c0 <HAL_RCC_OscConfig+0x280>)
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048a6:	f7fe fc99 	bl	80031dc <HAL_GetTick>
 80048aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ae:	f7fe fc95 	bl	80031dc <HAL_GetTick>
 80048b2:	1b80      	subs	r0, r0, r6
 80048b4:	2864      	cmp	r0, #100	; 0x64
 80048b6:	d8e9      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	039b      	lsls	r3, r3, #14
 80048bc:	d4f7      	bmi.n	80048ae <HAL_RCC_OscConfig+0x26e>
 80048be:	e6fe      	b.n	80046be <HAL_RCC_OscConfig+0x7e>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	42420000 	.word	0x42420000
 80048c8:	40007000 	.word	0x40007000
 80048cc:	20000004 	.word	0x20000004
 80048d0:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	4e50      	ldr	r6, [pc, #320]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048da:	6a33      	ldr	r3, [r6, #32]
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	6233      	str	r3, [r6, #32]
 80048e2:	6a33      	ldr	r3, [r6, #32]
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80048ea:	f7fe fc77 	bl	80031dc <HAL_GetTick>
 80048ee:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f0:	e004      	b.n	80048fc <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fe fc73 	bl	80031dc <HAL_GetTick>
 80048f6:	1bc0      	subs	r0, r0, r7
 80048f8:	4540      	cmp	r0, r8
 80048fa:	d8c7      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fc:	6a33      	ldr	r3, [r6, #32]
 80048fe:	0798      	lsls	r0, r3, #30
 8004900:	d4f7      	bmi.n	80048f2 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004902:	2d00      	cmp	r5, #0
 8004904:	f43f af4e 	beq.w	80047a4 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
 800490a:	69d3      	ldr	r3, [r2, #28]
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004910:	61d3      	str	r3, [r2, #28]
 8004912:	e747      	b.n	80047a4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004914:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	4e40      	ldr	r6, [pc, #256]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8004918:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800491a:	f7fe fc5f 	bl	80031dc <HAL_GetTick>
 800491e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004920:	e004      	b.n	800492c <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004922:	f7fe fc5b 	bl	80031dc <HAL_GetTick>
 8004926:	1b40      	subs	r0, r0, r5
 8004928:	2802      	cmp	r0, #2
 800492a:	d8af      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	0799      	lsls	r1, r3, #30
 8004930:	d4f7      	bmi.n	8004922 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	e6ef      	b.n	8004716 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004936:	4a38      	ldr	r2, [pc, #224]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
 8004938:	6a13      	ldr	r3, [r2, #32]
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004940:	f7fe fc4c 	bl	80031dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004948:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494a:	4f33      	ldr	r7, [pc, #204]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
 800494c:	e004      	b.n	8004958 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fe fc45 	bl	80031dc <HAL_GetTick>
 8004952:	1b80      	subs	r0, r0, r6
 8004954:	4540      	cmp	r0, r8
 8004956:	d899      	bhi.n	800488c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	d5f7      	bpl.n	800494e <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800495e:	2d00      	cmp	r5, #0
 8004960:	f43f af20 	beq.w	80047a4 <HAL_RCC_OscConfig+0x164>
 8004964:	e7d0      	b.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004966:	2801      	cmp	r0, #1
 8004968:	f43f af38 	beq.w	80047dc <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 800496c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	6a22      	ldr	r2, [r4, #32]
 8004970:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004974:	4291      	cmp	r1, r2
 8004976:	f47f af3f 	bne.w	80047f8 <HAL_RCC_OscConfig+0x1b8>
 800497a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800497c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8004980:	1a18      	subs	r0, r3, r0
 8004982:	bf18      	it	ne
 8004984:	2001      	movne	r0, #1
 8004986:	e729      	b.n	80047dc <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800498c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e67f      	b.n	80046a2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a2:	f042 0204 	orr.w	r2, r2, #4
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	621a      	str	r2, [r3, #32]
 80049b0:	e7c6      	b.n	8004940 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 80049b2:	2001      	movs	r0, #1
}
 80049b4:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80049b6:	f7fe fc11 	bl	80031dc <HAL_GetTick>
 80049ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049bc:	e005      	b.n	80049ca <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fe fc0d 	bl	80031dc <HAL_GetTick>
 80049c2:	1b80      	subs	r0, r0, r6
 80049c4:	2802      	cmp	r0, #2
 80049c6:	f63f af61 	bhi.w	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	0199      	lsls	r1, r3, #6
 80049ce:	d4f6      	bmi.n	80049be <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d105      	bne.n	80049e4 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049d8:	686a      	ldr	r2, [r5, #4]
 80049da:	68a1      	ldr	r1, [r4, #8]
 80049dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80049e0:	430a      	orrs	r2, r1
 80049e2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80049e4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	4d0c      	ldr	r5, [pc, #48]	; (8004a18 <HAL_RCC_OscConfig+0x3d8>)
 80049e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049ea:	686a      	ldr	r2, [r5, #4]
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f4:	4313      	orrs	r3, r2
 80049f6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80049f8:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80049fa:	f7fe fbef 	bl	80031dc <HAL_GetTick>
 80049fe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a00:	e005      	b.n	8004a0e <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a02:	f7fe fbeb 	bl	80031dc <HAL_GetTick>
 8004a06:	1b00      	subs	r0, r0, r4
 8004a08:	2802      	cmp	r0, #2
 8004a0a:	f63f af3f 	bhi.w	800488c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	019a      	lsls	r2, r3, #6
 8004a12:	d5f6      	bpl.n	8004a02 <HAL_RCC_OscConfig+0x3c2>
 8004a14:	e6e1      	b.n	80047da <HAL_RCC_OscConfig+0x19a>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	42420000 	.word	0x42420000

08004a20 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a20:	f240 2c01 	movw	ip, #513	; 0x201
{
 8004a24:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004a28:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a2a:	f10d 0e18 	add.w	lr, sp, #24
 8004a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a30:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004a34:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a36:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8004a3a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004a3c:	f003 010c 	and.w	r1, r3, #12
 8004a40:	2908      	cmp	r1, #8
 8004a42:	d003      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8004a44:	4812      	ldr	r0, [pc, #72]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x70>)
}
 8004a46:	b007      	add	sp, #28
 8004a48:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a4c:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8004a50:	3118      	adds	r1, #24
 8004a52:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a54:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a56:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a5a:	d50e      	bpl.n	8004a7a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a5c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a5e:	4a0c      	ldr	r2, [pc, #48]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a60:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a64:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a68:	3318      	adds	r3, #24
 8004a6a:	446b      	add	r3, sp
 8004a6c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a70:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004a74:	b007      	add	sp, #28
 8004a76:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x74>)
 8004a7c:	fb03 f000 	mul.w	r0, r3, r0
}
 8004a80:	b007      	add	sp, #28
 8004a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a86:	bf00      	nop
 8004a88:	0800a80c 	.word	0x0800a80c
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	003d0900 	.word	0x003d0900

08004a98 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f000 808c 	beq.w	8004bb6 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9e:	4a49      	ldr	r2, [pc, #292]	; (8004bc4 <HAL_RCC_ClockConfig+0x12c>)
{
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	6813      	ldr	r3, [r2, #0]
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	428b      	cmp	r3, r1
 8004aae:	460d      	mov	r5, r1
 8004ab0:	d20c      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	f023 0307 	bic.w	r3, r3, #7
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	428b      	cmp	r3, r1
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
}
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	0798      	lsls	r0, r3, #30
 8004ad0:	d514      	bpl.n	8004afc <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad2:	0759      	lsls	r1, r3, #29
 8004ad4:	d504      	bpl.n	8004ae0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad6:	493c      	ldr	r1, [pc, #240]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004ad8:	684a      	ldr	r2, [r1, #4]
 8004ada:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ade:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	071a      	lsls	r2, r3, #28
 8004ae2:	d504      	bpl.n	8004aee <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae4:	4938      	ldr	r1, [pc, #224]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004ae6:	684a      	ldr	r2, [r1, #4]
 8004ae8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004aec:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aee:	4936      	ldr	r1, [pc, #216]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004af0:	68a0      	ldr	r0, [r4, #8]
 8004af2:	684a      	ldr	r2, [r1, #4]
 8004af4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004af8:	4302      	orrs	r2, r0
 8004afa:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afc:	07df      	lsls	r7, r3, #31
 8004afe:	d520      	bpl.n	8004b42 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b00:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b08:	d057      	beq.n	8004bba <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	2a02      	cmp	r2, #2
 8004b0c:	d050      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0e:	0799      	lsls	r1, r3, #30
 8004b10:	d5d9      	bpl.n	8004ac6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4e2d      	ldr	r6, [pc, #180]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b18:	6873      	ldr	r3, [r6, #4]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004b22:	f7fe fb5b 	bl	80031dc <HAL_GetTick>
 8004b26:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b28:	e004      	b.n	8004b34 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2a:	f7fe fb57 	bl	80031dc <HAL_GetTick>
 8004b2e:	1bc0      	subs	r0, r0, r7
 8004b30:	4540      	cmp	r0, r8
 8004b32:	d845      	bhi.n	8004bc0 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b34:	6873      	ldr	r3, [r6, #4]
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b40:	d1f3      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b42:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_RCC_ClockConfig+0x12c>)
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	42ab      	cmp	r3, r5
 8004b4c:	d909      	bls.n	8004b62 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	f023 0307 	bic.w	r3, r3, #7
 8004b54:	432b      	orrs	r3, r5
 8004b56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	42ab      	cmp	r3, r5
 8004b60:	d1b1      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	075a      	lsls	r2, r3, #29
 8004b66:	d506      	bpl.n	8004b76 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4917      	ldr	r1, [pc, #92]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004b6a:	68e0      	ldr	r0, [r4, #12]
 8004b6c:	684a      	ldr	r2, [r1, #4]
 8004b6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b72:	4302      	orrs	r2, r0
 8004b74:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	071b      	lsls	r3, r3, #28
 8004b78:	d507      	bpl.n	8004b8a <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004b7c:	6921      	ldr	r1, [r4, #16]
 8004b7e:	6853      	ldr	r3, [r2, #4]
 8004b80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b88:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b8a:	f7ff ff49 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <HAL_RCC_ClockConfig+0x130>)
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x134>)
 8004b94:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004b96:	480e      	ldr	r0, [pc, #56]	; (8004bd0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b98:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004b9c:	5c89      	ldrb	r1, [r1, r2]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <HAL_RCC_ClockConfig+0x13c>)
 8004ba0:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8004ba2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004ba6:	f7fe fad7 	bl	8003158 <HAL_InitTick>
  return HAL_OK;
 8004baa:	2000      	movs	r0, #0
}
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	0198      	lsls	r0, r3, #6
 8004bb2:	d4ae      	bmi.n	8004b12 <HAL_RCC_ClockConfig+0x7a>
 8004bb4:	e787      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004bb6:	2001      	movs	r0, #1
}
 8004bb8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	039e      	lsls	r6, r3, #14
 8004bbc:	d4a9      	bmi.n	8004b12 <HAL_RCC_ClockConfig+0x7a>
 8004bbe:	e782      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004bc0:	2003      	movs	r0, #3
 8004bc2:	e781      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x30>
 8004bc4:	40022000 	.word	0x40022000
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	0800a7a8 	.word	0x0800a7a8
 8004bd0:	2000003c 	.word	0x2000003c
 8004bd4:	20000004 	.word	0x20000004

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4905      	ldr	r1, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004be0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004be4:	5ccb      	ldrb	r3, [r1, r3]
 8004be6:	6810      	ldr	r0, [r2, #0]
}
 8004be8:	40d8      	lsrs	r0, r3
 8004bea:	4770      	bx	lr
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	20000004 	.word	0x20000004
 8004bf4:	0800a7b8 	.word	0x0800a7b8

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4905      	ldr	r1, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c00:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c04:	5ccb      	ldrb	r3, [r1, r3]
 8004c06:	6810      	ldr	r0, [r2, #0]
}
 8004c08:	40d8      	lsrs	r0, r3
 8004c0a:	4770      	bx	lr
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	20000004 	.word	0x20000004
 8004c14:	0800a7b8 	.word	0x0800a7b8

08004c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c1e:	6800      	ldr	r0, [r0, #0]
{
 8004c20:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c22:	07c1      	lsls	r1, r0, #31
 8004c24:	d52c      	bpl.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c28:	69da      	ldr	r2, [r3, #28]
 8004c2a:	00d2      	lsls	r2, r2, #3
 8004c2c:	d53f      	bpl.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2e:	4d39      	ldr	r5, [pc, #228]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8004c30:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	05df      	lsls	r7, r3, #23
 8004c36:	d548      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c38:	4d35      	ldr	r5, [pc, #212]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c3a:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c3c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004c40:	d011      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c42:	6861      	ldr	r1, [r4, #4]
 8004c44:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d00d      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c4c:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c50:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c52:	4a31      	ldr	r2, [pc, #196]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c58:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c60:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c62:	07d9      	lsls	r1, r3, #31
 8004c64:	d444      	bmi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c66:	6861      	ldr	r1, [r4, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c6a:	6a13      	ldr	r3, [r2, #32]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c74:	b11e      	cbz	r6, 8004c7e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c76:	69d3      	ldr	r3, [r2, #28]
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	0783      	lsls	r3, r0, #30
 8004c82:	d506      	bpl.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c84:	4922      	ldr	r1, [pc, #136]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	684a      	ldr	r2, [r1, #4]
 8004c8a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c92:	f010 0010 	ands.w	r0, r0, #16
 8004c96:	d007      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c98:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c9a:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004c9c:	6961      	ldr	r1, [r4, #20]
 8004c9e:	6853      	ldr	r3, [r2, #4]
 8004ca0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6053      	str	r3, [r2, #4]
}
 8004ca8:	b002      	add	sp, #8
 8004caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4d18      	ldr	r5, [pc, #96]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cb6:	61da      	str	r2, [r3, #28]
 8004cb8:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004cba:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	05df      	lsls	r7, r3, #23
 8004cc8:	d4b6      	bmi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cca:	682b      	ldr	r3, [r5, #0]
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fa83 	bl	80031dc <HAL_GetTick>
 8004cd6:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	05d8      	lsls	r0, r3, #23
 8004cdc:	d4ac      	bmi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fe fa7d 	bl	80031dc <HAL_GetTick>
 8004ce2:	1bc3      	subs	r3, r0, r7
 8004ce4:	2b64      	cmp	r3, #100	; 0x64
 8004ce6:	d9f7      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004ce8:	2003      	movs	r0, #3
}
 8004cea:	b002      	add	sp, #8
 8004cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004cf0:	f7fe fa74 	bl	80031dc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004cf8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e004      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fa6e 	bl	80031dc <HAL_GetTick>
 8004d00:	1bc0      	subs	r0, r0, r7
 8004d02:	4540      	cmp	r0, r8
 8004d04:	d8f0      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	6a2b      	ldr	r3, [r5, #32]
 8004d08:	079a      	lsls	r2, r3, #30
 8004d0a:	d5f7      	bpl.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004d0c:	e7ab      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42420000 	.word	0x42420000

08004d1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d1c:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 8004d20:	b087      	sub	sp, #28
 8004d22:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d26:	f10d 0e18 	add.w	lr, sp, #24
 8004d2a:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d2e:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d32:	f10c 30ff 	add.w	r0, ip, #4294967295
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d36:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8004d3a:	280f      	cmp	r0, #15
 8004d3c:	d819      	bhi.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004d3e:	e8df f000 	tbb	[pc, r0]
 8004d42:	2108      	.short	0x2108
 8004d44:	18181c18 	.word	0x18181c18
 8004d48:	18181c18 	.word	0x18181c18
 8004d4c:	18181818 	.word	0x18181818
 8004d50:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d52:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004d56:	4930      	ldr	r1, [pc, #192]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004d58:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004d60:	d055      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6a:	d048      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d70:	d03d      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d72:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004d74:	b007      	add	sp, #28
 8004d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d7a:	b007      	add	sp, #28
 8004d7c:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 8004d80:	f7ff be4e 	b.w	8004a20 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d84:	f7ff ff38 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004d90:	3301      	adds	r3, #1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004d98:	b007      	add	sp, #28
 8004d9a:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004da0:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004da8:	d0e4      	beq.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004daa:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8004dae:	3118      	adds	r1, #24
 8004db0:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004db2:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004db4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004db8:	d40c      	bmi.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8004dbc:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	025b      	lsls	r3, r3, #9
 8004dc6:	d4d5      	bmi.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8004dca:	0040      	lsls	r0, r0, #1
 8004dcc:	fba3 3000 	umull	r3, r0, r3, r0
 8004dd0:	0840      	lsrs	r0, r0, #1
 8004dd2:	e7cf      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd4:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004ddc:	3318      	adds	r3, #24
 8004dde:	446b      	add	r3, sp
 8004de0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	fb03 f000 	mul.w	r0, r3, r0
 8004dec:	e7e8      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 8004dee:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004df2:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004df4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004df8:	bf18      	it	ne
 8004dfa:	4618      	movne	r0, r3
 8004dfc:	e7ba      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 8004dfe:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e02:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004e04:	f010 0002 	ands.w	r0, r0, #2
 8004e08:	bf18      	it	ne
 8004e0a:	4618      	movne	r0, r3
 8004e0c:	e7b2      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 8004e0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e12:	e7af      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004e14:	0800a80c 	.word	0x0800a80c
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	003d0900 	.word	0x003d0900
 8004e20:	aaaaaaab 	.word	0xaaaaaaab
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004e28:	b368      	cbz	r0, 8004e86 <HAL_SRAM_Init+0x5e>
 8004e2a:	6983      	ldr	r3, [r0, #24]
{
 8004e2c:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e32:	4604      	mov	r4, r0
 8004e34:	d029      	beq.n	8004e8a <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004e36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e3a:	4615      	mov	r5, r2
 8004e3c:	460e      	mov	r6, r1
 8004e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e42:	b1db      	cbz	r3, 8004e7c <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004e44:	4621      	mov	r1, r4
 8004e46:	f851 0b08 	ldr.w	r0, [r1], #8
 8004e4a:	f000 f821 	bl	8004e90 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004e4e:	4631      	mov	r1, r6
 8004e50:	68a2      	ldr	r2, [r4, #8]
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	f000 f852 	bl	8004efc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004e58:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8004e5c:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004e5e:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e62:	f000 f86d 	bl	8004f40 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8004e6a:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e70:	432b      	orrs	r3, r5
 8004e72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8004e76:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8004e7c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8004e80:	f7fd fd80 	bl	8002984 <HAL_SRAM_MspInit>
 8004e84:	e7de      	b.n	8004e44 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8004e86:	2001      	movs	r0, #1
}
 8004e88:	4770      	bx	lr
    return HAL_ERROR;
 8004e8a:	2001      	movs	r0, #1
}
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	bf00      	nop

08004e90 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004e90:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8004e92:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004e94:	688b      	ldr	r3, [r1, #8]
{
 8004e96:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	bf0c      	ite	eq
 8004e9c:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8004ea0:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004ea2:	684e      	ldr	r6, [r1, #4]
 8004ea4:	680c      	ldr	r4, [r1, #0]
 8004ea6:	4333      	orrs	r3, r6
 8004ea8:	68ce      	ldr	r6, [r1, #12]
 8004eaa:	4d13      	ldr	r5, [pc, #76]	; (8004ef8 <FSMC_NORSRAM_Init+0x68>)
 8004eac:	4333      	orrs	r3, r6
 8004eae:	690e      	ldr	r6, [r1, #16]
 8004eb0:	4333      	orrs	r3, r6
 8004eb2:	694e      	ldr	r6, [r1, #20]
 8004eb4:	4333      	orrs	r3, r6
 8004eb6:	69ce      	ldr	r6, [r1, #28]
 8004eb8:	4333      	orrs	r3, r6
 8004eba:	6a0e      	ldr	r6, [r1, #32]
 8004ebc:	4333      	orrs	r3, r6
 8004ebe:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004ec0:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004ec2:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8004ec6:	f026 0601 	bic.w	r6, r6, #1
 8004eca:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004ece:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004ed0:	4333      	orrs	r3, r6
 8004ed2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004ed4:	4333      	orrs	r3, r6
 8004ed6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8004ed8:	4333      	orrs	r3, r6
 8004eda:	698e      	ldr	r6, [r1, #24]
 8004edc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004ede:	4333      	orrs	r3, r6
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8004ee6:	400d      	ands	r5, r1
 8004ee8:	432b      	orrs	r3, r5
 8004eea:	ea43 030c 	orr.w	r3, r3, ip
 8004eee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8004ef2:	bc70      	pop	{r4, r5, r6}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	fff00080 	.word	0xfff00080

08004efc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004efc:	4603      	mov	r3, r0
 8004efe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004f02:	6853      	ldr	r3, [r2, #4]
{
 8004f04:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004f06:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8004f0a:	698c      	ldr	r4, [r1, #24]
 8004f0c:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8004f0e:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004f10:	4323      	orrs	r3, r4
 8004f12:	684c      	ldr	r4, [r1, #4]
 8004f14:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004f18:	688c      	ldr	r4, [r1, #8]
 8004f1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004f1e:	68cc      	ldr	r4, [r1, #12]
 8004f20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f24:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8004f28:	f104 3eff 	add.w	lr, r4, #4294967295
 8004f2c:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8004f30:	3902      	subs	r1, #2
 8004f32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004f36:	ea43 030c 	orr.w	r3, r3, ip
 8004f3a:	6053      	str	r3, [r2, #4]
}
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	bf00      	nop

08004f40 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f44:	d005      	beq.n	8004f52 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004f46:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004f4a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004f4e:	2000      	movs	r0, #0
 8004f50:	4770      	bx	lr
{
 8004f52:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004f54:	680b      	ldr	r3, [r1, #0]
 8004f56:	698d      	ldr	r5, [r1, #24]
 8004f58:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004f5c:	432b      	orrs	r3, r5
 8004f5e:	684d      	ldr	r5, [r1, #4]
 8004f60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004f64:	688d      	ldr	r5, [r1, #8]
 8004f66:	68c9      	ldr	r1, [r1, #12]
 8004f68:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004f70:	4903      	ldr	r1, [pc, #12]	; (8004f80 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8004f72:	4021      	ands	r1, r4
 8004f74:	430b      	orrs	r3, r1
 8004f76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004f7a:	bc30      	pop	{r4, r5}
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	4770      	bx	lr
 8004f80:	cff00000 	.word	0xcff00000

08004f84 <__errno>:
 8004f84:	4b01      	ldr	r3, [pc, #4]	; (8004f8c <__errno+0x8>)
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000040 	.word	0x20000040

08004f90 <__libc_init_array>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	2600      	movs	r6, #0
 8004f94:	4d0c      	ldr	r5, [pc, #48]	; (8004fc8 <__libc_init_array+0x38>)
 8004f96:	4c0d      	ldr	r4, [pc, #52]	; (8004fcc <__libc_init_array+0x3c>)
 8004f98:	1b64      	subs	r4, r4, r5
 8004f9a:	10a4      	asrs	r4, r4, #2
 8004f9c:	42a6      	cmp	r6, r4
 8004f9e:	d109      	bne.n	8004fb4 <__libc_init_array+0x24>
 8004fa0:	f005 f814 	bl	8009fcc <_init>
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	4d0a      	ldr	r5, [pc, #40]	; (8004fd0 <__libc_init_array+0x40>)
 8004fa8:	4c0a      	ldr	r4, [pc, #40]	; (8004fd4 <__libc_init_array+0x44>)
 8004faa:	1b64      	subs	r4, r4, r5
 8004fac:	10a4      	asrs	r4, r4, #2
 8004fae:	42a6      	cmp	r6, r4
 8004fb0:	d105      	bne.n	8004fbe <__libc_init_array+0x2e>
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb8:	4798      	blx	r3
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7ee      	b.n	8004f9c <__libc_init_array+0xc>
 8004fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc2:	4798      	blx	r3
 8004fc4:	3601      	adds	r6, #1
 8004fc6:	e7f2      	b.n	8004fae <__libc_init_array+0x1e>
 8004fc8:	0800ad38 	.word	0x0800ad38
 8004fcc:	0800ad38 	.word	0x0800ad38
 8004fd0:	0800ad38 	.word	0x0800ad38
 8004fd4:	0800ad3c 	.word	0x0800ad3c

08004fd8 <malloc>:
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <malloc+0xc>)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f000 b895 	b.w	800510c <_malloc_r>
 8004fe2:	bf00      	nop
 8004fe4:	20000040 	.word	0x20000040

08004fe8 <free>:
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <free+0xc>)
 8004fea:	4601      	mov	r1, r0
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f000 b825 	b.w	800503c <_free_r>
 8004ff2:	bf00      	nop
 8004ff4:	20000040 	.word	0x20000040

08004ff8 <memmove>:
 8004ff8:	4288      	cmp	r0, r1
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	eb01 0402 	add.w	r4, r1, r2
 8005000:	d902      	bls.n	8005008 <memmove+0x10>
 8005002:	4284      	cmp	r4, r0
 8005004:	4623      	mov	r3, r4
 8005006:	d807      	bhi.n	8005018 <memmove+0x20>
 8005008:	1e43      	subs	r3, r0, #1
 800500a:	42a1      	cmp	r1, r4
 800500c:	d008      	beq.n	8005020 <memmove+0x28>
 800500e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005016:	e7f8      	b.n	800500a <memmove+0x12>
 8005018:	4601      	mov	r1, r0
 800501a:	4402      	add	r2, r0
 800501c:	428a      	cmp	r2, r1
 800501e:	d100      	bne.n	8005022 <memmove+0x2a>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800502a:	e7f7      	b.n	800501c <memmove+0x24>

0800502c <memset>:
 800502c:	4603      	mov	r3, r0
 800502e:	4402      	add	r2, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <_free_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4605      	mov	r5, r0
 8005040:	2900      	cmp	r1, #0
 8005042:	d040      	beq.n	80050c6 <_free_r+0x8a>
 8005044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005048:	1f0c      	subs	r4, r1, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	18e4      	addlt	r4, r4, r3
 8005050:	f003 f814 	bl	800807c <__malloc_lock>
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <_free_r+0x8c>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	b933      	cbnz	r3, 8005068 <_free_r+0x2c>
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	4628      	mov	r0, r5
 8005060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005064:	f003 b810 	b.w	8008088 <__malloc_unlock>
 8005068:	42a3      	cmp	r3, r4
 800506a:	d908      	bls.n	800507e <_free_r+0x42>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	1821      	adds	r1, r4, r0
 8005070:	428b      	cmp	r3, r1
 8005072:	bf01      	itttt	eq
 8005074:	6819      	ldreq	r1, [r3, #0]
 8005076:	685b      	ldreq	r3, [r3, #4]
 8005078:	1809      	addeq	r1, r1, r0
 800507a:	6021      	streq	r1, [r4, #0]
 800507c:	e7ed      	b.n	800505a <_free_r+0x1e>
 800507e:	461a      	mov	r2, r3
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	b10b      	cbz	r3, 8005088 <_free_r+0x4c>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d9fa      	bls.n	800507e <_free_r+0x42>
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	1850      	adds	r0, r2, r1
 800508c:	42a0      	cmp	r0, r4
 800508e:	d10b      	bne.n	80050a8 <_free_r+0x6c>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	4401      	add	r1, r0
 8005094:	1850      	adds	r0, r2, r1
 8005096:	4283      	cmp	r3, r0
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	d1e0      	bne.n	800505e <_free_r+0x22>
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4401      	add	r1, r0
 80050a2:	6011      	str	r1, [r2, #0]
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	e7da      	b.n	800505e <_free_r+0x22>
 80050a8:	d902      	bls.n	80050b0 <_free_r+0x74>
 80050aa:	230c      	movs	r3, #12
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	e7d6      	b.n	800505e <_free_r+0x22>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	6063      	str	r3, [r4, #4]
 80050c2:	6054      	str	r4, [r2, #4]
 80050c4:	e7cb      	b.n	800505e <_free_r+0x22>
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000700 	.word	0x20000700

080050cc <sbrk_aligned>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4e0e      	ldr	r6, [pc, #56]	; (8005108 <sbrk_aligned+0x3c>)
 80050d0:	460c      	mov	r4, r1
 80050d2:	6831      	ldr	r1, [r6, #0]
 80050d4:	4605      	mov	r5, r0
 80050d6:	b911      	cbnz	r1, 80050de <sbrk_aligned+0x12>
 80050d8:	f000 fefa 	bl	8005ed0 <_sbrk_r>
 80050dc:	6030      	str	r0, [r6, #0]
 80050de:	4621      	mov	r1, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fef5 	bl	8005ed0 <_sbrk_r>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	d00a      	beq.n	8005100 <sbrk_aligned+0x34>
 80050ea:	1cc4      	adds	r4, r0, #3
 80050ec:	f024 0403 	bic.w	r4, r4, #3
 80050f0:	42a0      	cmp	r0, r4
 80050f2:	d007      	beq.n	8005104 <sbrk_aligned+0x38>
 80050f4:	1a21      	subs	r1, r4, r0
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 feea 	bl	8005ed0 <_sbrk_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d101      	bne.n	8005104 <sbrk_aligned+0x38>
 8005100:	f04f 34ff 	mov.w	r4, #4294967295
 8005104:	4620      	mov	r0, r4
 8005106:	bd70      	pop	{r4, r5, r6, pc}
 8005108:	20000704 	.word	0x20000704

0800510c <_malloc_r>:
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	1ccd      	adds	r5, r1, #3
 8005112:	f025 0503 	bic.w	r5, r5, #3
 8005116:	3508      	adds	r5, #8
 8005118:	2d0c      	cmp	r5, #12
 800511a:	bf38      	it	cc
 800511c:	250c      	movcc	r5, #12
 800511e:	2d00      	cmp	r5, #0
 8005120:	4607      	mov	r7, r0
 8005122:	db01      	blt.n	8005128 <_malloc_r+0x1c>
 8005124:	42a9      	cmp	r1, r5
 8005126:	d905      	bls.n	8005134 <_malloc_r+0x28>
 8005128:	230c      	movs	r3, #12
 800512a:	2600      	movs	r6, #0
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4630      	mov	r0, r6
 8005130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005134:	4e2e      	ldr	r6, [pc, #184]	; (80051f0 <_malloc_r+0xe4>)
 8005136:	f002 ffa1 	bl	800807c <__malloc_lock>
 800513a:	6833      	ldr	r3, [r6, #0]
 800513c:	461c      	mov	r4, r3
 800513e:	bb34      	cbnz	r4, 800518e <_malloc_r+0x82>
 8005140:	4629      	mov	r1, r5
 8005142:	4638      	mov	r0, r7
 8005144:	f7ff ffc2 	bl	80050cc <sbrk_aligned>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	4604      	mov	r4, r0
 800514c:	d14d      	bne.n	80051ea <_malloc_r+0xde>
 800514e:	6834      	ldr	r4, [r6, #0]
 8005150:	4626      	mov	r6, r4
 8005152:	2e00      	cmp	r6, #0
 8005154:	d140      	bne.n	80051d8 <_malloc_r+0xcc>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	4631      	mov	r1, r6
 800515a:	4638      	mov	r0, r7
 800515c:	eb04 0803 	add.w	r8, r4, r3
 8005160:	f000 feb6 	bl	8005ed0 <_sbrk_r>
 8005164:	4580      	cmp	r8, r0
 8005166:	d13a      	bne.n	80051de <_malloc_r+0xd2>
 8005168:	6821      	ldr	r1, [r4, #0]
 800516a:	3503      	adds	r5, #3
 800516c:	1a6d      	subs	r5, r5, r1
 800516e:	f025 0503 	bic.w	r5, r5, #3
 8005172:	3508      	adds	r5, #8
 8005174:	2d0c      	cmp	r5, #12
 8005176:	bf38      	it	cc
 8005178:	250c      	movcc	r5, #12
 800517a:	4638      	mov	r0, r7
 800517c:	4629      	mov	r1, r5
 800517e:	f7ff ffa5 	bl	80050cc <sbrk_aligned>
 8005182:	3001      	adds	r0, #1
 8005184:	d02b      	beq.n	80051de <_malloc_r+0xd2>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	442b      	add	r3, r5
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	e00e      	b.n	80051ac <_malloc_r+0xa0>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	1b52      	subs	r2, r2, r5
 8005192:	d41e      	bmi.n	80051d2 <_malloc_r+0xc6>
 8005194:	2a0b      	cmp	r2, #11
 8005196:	d916      	bls.n	80051c6 <_malloc_r+0xba>
 8005198:	1961      	adds	r1, r4, r5
 800519a:	42a3      	cmp	r3, r4
 800519c:	6025      	str	r5, [r4, #0]
 800519e:	bf18      	it	ne
 80051a0:	6059      	strne	r1, [r3, #4]
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	bf08      	it	eq
 80051a6:	6031      	streq	r1, [r6, #0]
 80051a8:	5162      	str	r2, [r4, r5]
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	4638      	mov	r0, r7
 80051ae:	f104 060b 	add.w	r6, r4, #11
 80051b2:	f002 ff69 	bl	8008088 <__malloc_unlock>
 80051b6:	f026 0607 	bic.w	r6, r6, #7
 80051ba:	1d23      	adds	r3, r4, #4
 80051bc:	1af2      	subs	r2, r6, r3
 80051be:	d0b6      	beq.n	800512e <_malloc_r+0x22>
 80051c0:	1b9b      	subs	r3, r3, r6
 80051c2:	50a3      	str	r3, [r4, r2]
 80051c4:	e7b3      	b.n	800512e <_malloc_r+0x22>
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	bf0c      	ite	eq
 80051cc:	6032      	streq	r2, [r6, #0]
 80051ce:	605a      	strne	r2, [r3, #4]
 80051d0:	e7ec      	b.n	80051ac <_malloc_r+0xa0>
 80051d2:	4623      	mov	r3, r4
 80051d4:	6864      	ldr	r4, [r4, #4]
 80051d6:	e7b2      	b.n	800513e <_malloc_r+0x32>
 80051d8:	4634      	mov	r4, r6
 80051da:	6876      	ldr	r6, [r6, #4]
 80051dc:	e7b9      	b.n	8005152 <_malloc_r+0x46>
 80051de:	230c      	movs	r3, #12
 80051e0:	4638      	mov	r0, r7
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	f002 ff50 	bl	8008088 <__malloc_unlock>
 80051e8:	e7a1      	b.n	800512e <_malloc_r+0x22>
 80051ea:	6025      	str	r5, [r4, #0]
 80051ec:	e7de      	b.n	80051ac <_malloc_r+0xa0>
 80051ee:	bf00      	nop
 80051f0:	20000700 	.word	0x20000700

080051f4 <__cvt>:
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fa:	461f      	mov	r7, r3
 80051fc:	bfbb      	ittet	lt
 80051fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005202:	461f      	movlt	r7, r3
 8005204:	2300      	movge	r3, #0
 8005206:	232d      	movlt	r3, #45	; 0x2d
 8005208:	b088      	sub	sp, #32
 800520a:	4614      	mov	r4, r2
 800520c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800520e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005210:	7013      	strb	r3, [r2, #0]
 8005212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005214:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005218:	f023 0820 	bic.w	r8, r3, #32
 800521c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005220:	d005      	beq.n	800522e <__cvt+0x3a>
 8005222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005226:	d100      	bne.n	800522a <__cvt+0x36>
 8005228:	3501      	adds	r5, #1
 800522a:	2302      	movs	r3, #2
 800522c:	e000      	b.n	8005230 <__cvt+0x3c>
 800522e:	2303      	movs	r3, #3
 8005230:	aa07      	add	r2, sp, #28
 8005232:	9204      	str	r2, [sp, #16]
 8005234:	aa06      	add	r2, sp, #24
 8005236:	e9cd a202 	strd	sl, r2, [sp, #8]
 800523a:	e9cd 3500 	strd	r3, r5, [sp]
 800523e:	4622      	mov	r2, r4
 8005240:	463b      	mov	r3, r7
 8005242:	f001 fd95 	bl	8006d70 <_dtoa_r>
 8005246:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800524a:	4606      	mov	r6, r0
 800524c:	d102      	bne.n	8005254 <__cvt+0x60>
 800524e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005250:	07db      	lsls	r3, r3, #31
 8005252:	d522      	bpl.n	800529a <__cvt+0xa6>
 8005254:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005258:	eb06 0905 	add.w	r9, r6, r5
 800525c:	d110      	bne.n	8005280 <__cvt+0x8c>
 800525e:	7833      	ldrb	r3, [r6, #0]
 8005260:	2b30      	cmp	r3, #48	; 0x30
 8005262:	d10a      	bne.n	800527a <__cvt+0x86>
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	4620      	mov	r0, r4
 800526a:	4639      	mov	r1, r7
 800526c:	f7fb fc08 	bl	8000a80 <__aeabi_dcmpeq>
 8005270:	b918      	cbnz	r0, 800527a <__cvt+0x86>
 8005272:	f1c5 0501 	rsb	r5, r5, #1
 8005276:	f8ca 5000 	str.w	r5, [sl]
 800527a:	f8da 3000 	ldr.w	r3, [sl]
 800527e:	4499      	add	r9, r3
 8005280:	2200      	movs	r2, #0
 8005282:	2300      	movs	r3, #0
 8005284:	4620      	mov	r0, r4
 8005286:	4639      	mov	r1, r7
 8005288:	f7fb fbfa 	bl	8000a80 <__aeabi_dcmpeq>
 800528c:	b108      	cbz	r0, 8005292 <__cvt+0x9e>
 800528e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005292:	2230      	movs	r2, #48	; 0x30
 8005294:	9b07      	ldr	r3, [sp, #28]
 8005296:	454b      	cmp	r3, r9
 8005298:	d307      	bcc.n	80052aa <__cvt+0xb6>
 800529a:	4630      	mov	r0, r6
 800529c:	9b07      	ldr	r3, [sp, #28]
 800529e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052a0:	1b9b      	subs	r3, r3, r6
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	b008      	add	sp, #32
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	9107      	str	r1, [sp, #28]
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e7f0      	b.n	8005294 <__cvt+0xa0>

080052b2 <__exponent>:
 80052b2:	4603      	mov	r3, r0
 80052b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	f803 2b02 	strb.w	r2, [r3], #2
 80052bc:	bfb6      	itet	lt
 80052be:	222d      	movlt	r2, #45	; 0x2d
 80052c0:	222b      	movge	r2, #43	; 0x2b
 80052c2:	4249      	neglt	r1, r1
 80052c4:	2909      	cmp	r1, #9
 80052c6:	7042      	strb	r2, [r0, #1]
 80052c8:	dd2b      	ble.n	8005322 <__exponent+0x70>
 80052ca:	f10d 0407 	add.w	r4, sp, #7
 80052ce:	46a4      	mov	ip, r4
 80052d0:	270a      	movs	r7, #10
 80052d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80052d6:	460a      	mov	r2, r1
 80052d8:	46a6      	mov	lr, r4
 80052da:	fb07 1516 	mls	r5, r7, r6, r1
 80052de:	2a63      	cmp	r2, #99	; 0x63
 80052e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80052e4:	4631      	mov	r1, r6
 80052e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80052ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052ee:	dcf0      	bgt.n	80052d2 <__exponent+0x20>
 80052f0:	3130      	adds	r1, #48	; 0x30
 80052f2:	f1ae 0502 	sub.w	r5, lr, #2
 80052f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052fa:	4629      	mov	r1, r5
 80052fc:	1c44      	adds	r4, r0, #1
 80052fe:	4561      	cmp	r1, ip
 8005300:	d30a      	bcc.n	8005318 <__exponent+0x66>
 8005302:	f10d 0209 	add.w	r2, sp, #9
 8005306:	eba2 020e 	sub.w	r2, r2, lr
 800530a:	4565      	cmp	r5, ip
 800530c:	bf88      	it	hi
 800530e:	2200      	movhi	r2, #0
 8005310:	4413      	add	r3, r2
 8005312:	1a18      	subs	r0, r3, r0
 8005314:	b003      	add	sp, #12
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005320:	e7ed      	b.n	80052fe <__exponent+0x4c>
 8005322:	2330      	movs	r3, #48	; 0x30
 8005324:	3130      	adds	r1, #48	; 0x30
 8005326:	7083      	strb	r3, [r0, #2]
 8005328:	70c1      	strb	r1, [r0, #3]
 800532a:	1d03      	adds	r3, r0, #4
 800532c:	e7f1      	b.n	8005312 <__exponent+0x60>
	...

08005330 <_printf_float>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	b091      	sub	sp, #68	; 0x44
 8005336:	460c      	mov	r4, r1
 8005338:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800533c:	4616      	mov	r6, r2
 800533e:	461f      	mov	r7, r3
 8005340:	4605      	mov	r5, r0
 8005342:	f002 fe69 	bl	8008018 <_localeconv_r>
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	9309      	str	r3, [sp, #36]	; 0x24
 800534c:	f7fa ff6c 	bl	8000228 <strlen>
 8005350:	2300      	movs	r3, #0
 8005352:	930e      	str	r3, [sp, #56]	; 0x38
 8005354:	f8d8 3000 	ldr.w	r3, [r8]
 8005358:	900a      	str	r0, [sp, #40]	; 0x28
 800535a:	3307      	adds	r3, #7
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	f103 0208 	add.w	r2, r3, #8
 8005364:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005368:	f8d4 b000 	ldr.w	fp, [r4]
 800536c:	f8c8 2000 	str.w	r2, [r8]
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005378:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800537c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005380:	930b      	str	r3, [sp, #44]	; 0x2c
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	4640      	mov	r0, r8
 8005388:	4b9c      	ldr	r3, [pc, #624]	; (80055fc <_printf_float+0x2cc>)
 800538a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800538c:	f7fb fbaa 	bl	8000ae4 <__aeabi_dcmpun>
 8005390:	bb70      	cbnz	r0, 80053f0 <_printf_float+0xc0>
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	4640      	mov	r0, r8
 8005398:	4b98      	ldr	r3, [pc, #608]	; (80055fc <_printf_float+0x2cc>)
 800539a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539c:	f7fb fb84 	bl	8000aa8 <__aeabi_dcmple>
 80053a0:	bb30      	cbnz	r0, 80053f0 <_printf_float+0xc0>
 80053a2:	2200      	movs	r2, #0
 80053a4:	2300      	movs	r3, #0
 80053a6:	4640      	mov	r0, r8
 80053a8:	4651      	mov	r1, sl
 80053aa:	f7fb fb73 	bl	8000a94 <__aeabi_dcmplt>
 80053ae:	b110      	cbz	r0, 80053b6 <_printf_float+0x86>
 80053b0:	232d      	movs	r3, #45	; 0x2d
 80053b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b6:	4b92      	ldr	r3, [pc, #584]	; (8005600 <_printf_float+0x2d0>)
 80053b8:	4892      	ldr	r0, [pc, #584]	; (8005604 <_printf_float+0x2d4>)
 80053ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80053be:	bf94      	ite	ls
 80053c0:	4698      	movls	r8, r3
 80053c2:	4680      	movhi	r8, r0
 80053c4:	2303      	movs	r3, #3
 80053c6:	f04f 0a00 	mov.w	sl, #0
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	f02b 0304 	bic.w	r3, fp, #4
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	4633      	mov	r3, r6
 80053d4:	4621      	mov	r1, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	9700      	str	r7, [sp, #0]
 80053da:	aa0f      	add	r2, sp, #60	; 0x3c
 80053dc:	f000 f9d4 	bl	8005788 <_printf_common>
 80053e0:	3001      	adds	r0, #1
 80053e2:	f040 8090 	bne.w	8005506 <_printf_float+0x1d6>
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	b011      	add	sp, #68	; 0x44
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f0:	4642      	mov	r2, r8
 80053f2:	4653      	mov	r3, sl
 80053f4:	4640      	mov	r0, r8
 80053f6:	4651      	mov	r1, sl
 80053f8:	f7fb fb74 	bl	8000ae4 <__aeabi_dcmpun>
 80053fc:	b148      	cbz	r0, 8005412 <_printf_float+0xe2>
 80053fe:	f1ba 0f00 	cmp.w	sl, #0
 8005402:	bfb8      	it	lt
 8005404:	232d      	movlt	r3, #45	; 0x2d
 8005406:	4880      	ldr	r0, [pc, #512]	; (8005608 <_printf_float+0x2d8>)
 8005408:	bfb8      	it	lt
 800540a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800540e:	4b7f      	ldr	r3, [pc, #508]	; (800560c <_printf_float+0x2dc>)
 8005410:	e7d3      	b.n	80053ba <_printf_float+0x8a>
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	d142      	bne.n	80054a2 <_printf_float+0x172>
 800541c:	2306      	movs	r3, #6
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	9206      	str	r2, [sp, #24]
 8005424:	aa0e      	add	r2, sp, #56	; 0x38
 8005426:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800542a:	aa0d      	add	r2, sp, #52	; 0x34
 800542c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005430:	9203      	str	r2, [sp, #12]
 8005432:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005436:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	6863      	ldr	r3, [r4, #4]
 800543e:	4642      	mov	r2, r8
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4628      	mov	r0, r5
 8005444:	4653      	mov	r3, sl
 8005446:	910b      	str	r1, [sp, #44]	; 0x2c
 8005448:	f7ff fed4 	bl	80051f4 <__cvt>
 800544c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800544e:	4680      	mov	r8, r0
 8005450:	2947      	cmp	r1, #71	; 0x47
 8005452:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005454:	d108      	bne.n	8005468 <_printf_float+0x138>
 8005456:	1cc8      	adds	r0, r1, #3
 8005458:	db02      	blt.n	8005460 <_printf_float+0x130>
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	4299      	cmp	r1, r3
 800545e:	dd40      	ble.n	80054e2 <_printf_float+0x1b2>
 8005460:	f1a9 0902 	sub.w	r9, r9, #2
 8005464:	fa5f f989 	uxtb.w	r9, r9
 8005468:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800546c:	d81f      	bhi.n	80054ae <_printf_float+0x17e>
 800546e:	464a      	mov	r2, r9
 8005470:	3901      	subs	r1, #1
 8005472:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005476:	910d      	str	r1, [sp, #52]	; 0x34
 8005478:	f7ff ff1b 	bl	80052b2 <__exponent>
 800547c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800547e:	4682      	mov	sl, r0
 8005480:	1813      	adds	r3, r2, r0
 8005482:	2a01      	cmp	r2, #1
 8005484:	6123      	str	r3, [r4, #16]
 8005486:	dc02      	bgt.n	800548e <_printf_float+0x15e>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	07d2      	lsls	r2, r2, #31
 800548c:	d501      	bpl.n	8005492 <_printf_float+0x162>
 800548e:	3301      	adds	r3, #1
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005496:	2b00      	cmp	r3, #0
 8005498:	d09b      	beq.n	80053d2 <_printf_float+0xa2>
 800549a:	232d      	movs	r3, #45	; 0x2d
 800549c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a0:	e797      	b.n	80053d2 <_printf_float+0xa2>
 80054a2:	2947      	cmp	r1, #71	; 0x47
 80054a4:	d1bc      	bne.n	8005420 <_printf_float+0xf0>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ba      	bne.n	8005420 <_printf_float+0xf0>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e7b7      	b.n	800541e <_printf_float+0xee>
 80054ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80054b2:	d118      	bne.n	80054e6 <_printf_float+0x1b6>
 80054b4:	2900      	cmp	r1, #0
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	dd0b      	ble.n	80054d2 <_printf_float+0x1a2>
 80054ba:	6121      	str	r1, [r4, #16]
 80054bc:	b913      	cbnz	r3, 80054c4 <_printf_float+0x194>
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	07d0      	lsls	r0, r2, #31
 80054c2:	d502      	bpl.n	80054ca <_printf_float+0x19a>
 80054c4:	3301      	adds	r3, #1
 80054c6:	440b      	add	r3, r1
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	f04f 0a00 	mov.w	sl, #0
 80054ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80054d0:	e7df      	b.n	8005492 <_printf_float+0x162>
 80054d2:	b913      	cbnz	r3, 80054da <_printf_float+0x1aa>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	07d2      	lsls	r2, r2, #31
 80054d8:	d501      	bpl.n	80054de <_printf_float+0x1ae>
 80054da:	3302      	adds	r3, #2
 80054dc:	e7f4      	b.n	80054c8 <_printf_float+0x198>
 80054de:	2301      	movs	r3, #1
 80054e0:	e7f2      	b.n	80054c8 <_printf_float+0x198>
 80054e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80054e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e8:	4299      	cmp	r1, r3
 80054ea:	db05      	blt.n	80054f8 <_printf_float+0x1c8>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	6121      	str	r1, [r4, #16]
 80054f0:	07d8      	lsls	r0, r3, #31
 80054f2:	d5ea      	bpl.n	80054ca <_printf_float+0x19a>
 80054f4:	1c4b      	adds	r3, r1, #1
 80054f6:	e7e7      	b.n	80054c8 <_printf_float+0x198>
 80054f8:	2900      	cmp	r1, #0
 80054fa:	bfcc      	ite	gt
 80054fc:	2201      	movgt	r2, #1
 80054fe:	f1c1 0202 	rsble	r2, r1, #2
 8005502:	4413      	add	r3, r2
 8005504:	e7e0      	b.n	80054c8 <_printf_float+0x198>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	055a      	lsls	r2, r3, #21
 800550a:	d407      	bmi.n	800551c <_printf_float+0x1ec>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	4642      	mov	r2, r8
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	d12b      	bne.n	8005572 <_printf_float+0x242>
 800551a:	e764      	b.n	80053e6 <_printf_float+0xb6>
 800551c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005520:	f240 80dd 	bls.w	80056de <_printf_float+0x3ae>
 8005524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	f7fb faa8 	bl	8000a80 <__aeabi_dcmpeq>
 8005530:	2800      	cmp	r0, #0
 8005532:	d033      	beq.n	800559c <_printf_float+0x26c>
 8005534:	2301      	movs	r3, #1
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	4a35      	ldr	r2, [pc, #212]	; (8005610 <_printf_float+0x2e0>)
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f af51 	beq.w	80053e6 <_printf_float+0xb6>
 8005544:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005548:	429a      	cmp	r2, r3
 800554a:	db02      	blt.n	8005552 <_printf_float+0x222>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	07d8      	lsls	r0, r3, #31
 8005550:	d50f      	bpl.n	8005572 <_printf_float+0x242>
 8005552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f af42 	beq.w	80053e6 <_printf_float+0xb6>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 091a 	add.w	r9, r4, #26
 800556a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800556c:	3b01      	subs	r3, #1
 800556e:	4543      	cmp	r3, r8
 8005570:	dc09      	bgt.n	8005586 <_printf_float+0x256>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	079b      	lsls	r3, r3, #30
 8005576:	f100 8102 	bmi.w	800577e <_printf_float+0x44e>
 800557a:	68e0      	ldr	r0, [r4, #12]
 800557c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800557e:	4298      	cmp	r0, r3
 8005580:	bfb8      	it	lt
 8005582:	4618      	movlt	r0, r3
 8005584:	e731      	b.n	80053ea <_printf_float+0xba>
 8005586:	2301      	movs	r3, #1
 8005588:	464a      	mov	r2, r9
 800558a:	4631      	mov	r1, r6
 800558c:	4628      	mov	r0, r5
 800558e:	47b8      	blx	r7
 8005590:	3001      	adds	r0, #1
 8005592:	f43f af28 	beq.w	80053e6 <_printf_float+0xb6>
 8005596:	f108 0801 	add.w	r8, r8, #1
 800559a:	e7e6      	b.n	800556a <_printf_float+0x23a>
 800559c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dc38      	bgt.n	8005614 <_printf_float+0x2e4>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <_printf_float+0x2e0>)
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f af1a 	beq.w	80053e6 <_printf_float+0xb6>
 80055b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055b6:	4313      	orrs	r3, r2
 80055b8:	d102      	bne.n	80055c0 <_printf_float+0x290>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	07d9      	lsls	r1, r3, #31
 80055be:	d5d8      	bpl.n	8005572 <_printf_float+0x242>
 80055c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af0b 	beq.w	80053e6 <_printf_float+0xb6>
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	f104 0a1a 	add.w	sl, r4, #26
 80055d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055da:	425b      	negs	r3, r3
 80055dc:	454b      	cmp	r3, r9
 80055de:	dc01      	bgt.n	80055e4 <_printf_float+0x2b4>
 80055e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e2:	e794      	b.n	800550e <_printf_float+0x1de>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4652      	mov	r2, sl
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f aef9 	beq.w	80053e6 <_printf_float+0xb6>
 80055f4:	f109 0901 	add.w	r9, r9, #1
 80055f8:	e7ee      	b.n	80055d8 <_printf_float+0x2a8>
 80055fa:	bf00      	nop
 80055fc:	7fefffff 	.word	0x7fefffff
 8005600:	0800a824 	.word	0x0800a824
 8005604:	0800a828 	.word	0x0800a828
 8005608:	0800a830 	.word	0x0800a830
 800560c:	0800a82c 	.word	0x0800a82c
 8005610:	0800a834 	.word	0x0800a834
 8005614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005618:	429a      	cmp	r2, r3
 800561a:	bfa8      	it	ge
 800561c:	461a      	movge	r2, r3
 800561e:	2a00      	cmp	r2, #0
 8005620:	4691      	mov	r9, r2
 8005622:	dc37      	bgt.n	8005694 <_printf_float+0x364>
 8005624:	f04f 0b00 	mov.w	fp, #0
 8005628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562c:	f104 021a 	add.w	r2, r4, #26
 8005630:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005634:	ebaa 0309 	sub.w	r3, sl, r9
 8005638:	455b      	cmp	r3, fp
 800563a:	dc33      	bgt.n	80056a4 <_printf_float+0x374>
 800563c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005640:	429a      	cmp	r2, r3
 8005642:	db3b      	blt.n	80056bc <_printf_float+0x38c>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d438      	bmi.n	80056bc <_printf_float+0x38c>
 800564a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800564e:	eba3 020a 	sub.w	r2, r3, sl
 8005652:	eba3 0901 	sub.w	r9, r3, r1
 8005656:	4591      	cmp	r9, r2
 8005658:	bfa8      	it	ge
 800565a:	4691      	movge	r9, r2
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	dc34      	bgt.n	80056cc <_printf_float+0x39c>
 8005662:	f04f 0800 	mov.w	r8, #0
 8005666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566a:	f104 0a1a 	add.w	sl, r4, #26
 800566e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	eba3 0309 	sub.w	r3, r3, r9
 8005678:	4543      	cmp	r3, r8
 800567a:	f77f af7a 	ble.w	8005572 <_printf_float+0x242>
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f aeac 	beq.w	80053e6 <_printf_float+0xb6>
 800568e:	f108 0801 	add.w	r8, r8, #1
 8005692:	e7ec      	b.n	800566e <_printf_float+0x33e>
 8005694:	4613      	mov	r3, r2
 8005696:	4631      	mov	r1, r6
 8005698:	4642      	mov	r2, r8
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	d1c0      	bne.n	8005624 <_printf_float+0x2f4>
 80056a2:	e6a0      	b.n	80053e6 <_printf_float+0xb6>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f ae99 	beq.w	80053e6 <_printf_float+0xb6>
 80056b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056b6:	f10b 0b01 	add.w	fp, fp, #1
 80056ba:	e7b9      	b.n	8005630 <_printf_float+0x300>
 80056bc:	4631      	mov	r1, r6
 80056be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1bf      	bne.n	800564a <_printf_float+0x31a>
 80056ca:	e68c      	b.n	80053e6 <_printf_float+0xb6>
 80056cc:	464b      	mov	r3, r9
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	eb08 020a 	add.w	r2, r8, sl
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	d1c2      	bne.n	8005662 <_printf_float+0x332>
 80056dc:	e683      	b.n	80053e6 <_printf_float+0xb6>
 80056de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e0:	2a01      	cmp	r2, #1
 80056e2:	dc01      	bgt.n	80056e8 <_printf_float+0x3b8>
 80056e4:	07db      	lsls	r3, r3, #31
 80056e6:	d537      	bpl.n	8005758 <_printf_float+0x428>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4642      	mov	r2, r8
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f ae77 	beq.w	80053e6 <_printf_float+0xb6>
 80056f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f ae6f 	beq.w	80053e6 <_printf_float+0xb6>
 8005708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	f7fb f9b6 	bl	8000a80 <__aeabi_dcmpeq>
 8005714:	b9d8      	cbnz	r0, 800574e <_printf_float+0x41e>
 8005716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005718:	f108 0201 	add.w	r2, r8, #1
 800571c:	3b01      	subs	r3, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	d10e      	bne.n	8005746 <_printf_float+0x416>
 8005728:	e65d      	b.n	80053e6 <_printf_float+0xb6>
 800572a:	2301      	movs	r3, #1
 800572c:	464a      	mov	r2, r9
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae56 	beq.w	80053e6 <_printf_float+0xb6>
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005740:	3b01      	subs	r3, #1
 8005742:	4543      	cmp	r3, r8
 8005744:	dcf1      	bgt.n	800572a <_printf_float+0x3fa>
 8005746:	4653      	mov	r3, sl
 8005748:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800574c:	e6e0      	b.n	8005510 <_printf_float+0x1e0>
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	f104 091a 	add.w	r9, r4, #26
 8005756:	e7f2      	b.n	800573e <_printf_float+0x40e>
 8005758:	2301      	movs	r3, #1
 800575a:	4642      	mov	r2, r8
 800575c:	e7df      	b.n	800571e <_printf_float+0x3ee>
 800575e:	2301      	movs	r3, #1
 8005760:	464a      	mov	r2, r9
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f ae3c 	beq.w	80053e6 <_printf_float+0xb6>
 800576e:	f108 0801 	add.w	r8, r8, #1
 8005772:	68e3      	ldr	r3, [r4, #12]
 8005774:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005776:	1a5b      	subs	r3, r3, r1
 8005778:	4543      	cmp	r3, r8
 800577a:	dcf0      	bgt.n	800575e <_printf_float+0x42e>
 800577c:	e6fd      	b.n	800557a <_printf_float+0x24a>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	f104 0919 	add.w	r9, r4, #25
 8005786:	e7f4      	b.n	8005772 <_printf_float+0x442>

08005788 <_printf_common>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	4616      	mov	r6, r2
 800578e:	4699      	mov	r9, r3
 8005790:	688a      	ldr	r2, [r1, #8]
 8005792:	690b      	ldr	r3, [r1, #16]
 8005794:	4607      	mov	r7, r0
 8005796:	4293      	cmp	r3, r2
 8005798:	bfb8      	it	lt
 800579a:	4613      	movlt	r3, r2
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a2:	460c      	mov	r4, r1
 80057a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057a8:	b10a      	cbz	r2, 80057ae <_printf_common+0x26>
 80057aa:	3301      	adds	r3, #1
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	0699      	lsls	r1, r3, #26
 80057b2:	bf42      	ittt	mi
 80057b4:	6833      	ldrmi	r3, [r6, #0]
 80057b6:	3302      	addmi	r3, #2
 80057b8:	6033      	strmi	r3, [r6, #0]
 80057ba:	6825      	ldr	r5, [r4, #0]
 80057bc:	f015 0506 	ands.w	r5, r5, #6
 80057c0:	d106      	bne.n	80057d0 <_printf_common+0x48>
 80057c2:	f104 0a19 	add.w	sl, r4, #25
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	6832      	ldr	r2, [r6, #0]
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dc28      	bgt.n	8005822 <_printf_common+0x9a>
 80057d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d4:	1e13      	subs	r3, r2, #0
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	bf18      	it	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	0692      	lsls	r2, r2, #26
 80057de:	d42d      	bmi.n	800583c <_printf_common+0xb4>
 80057e0:	4649      	mov	r1, r9
 80057e2:	4638      	mov	r0, r7
 80057e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d020      	beq.n	8005830 <_printf_common+0xa8>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	68e5      	ldr	r5, [r4, #12]
 80057f2:	f003 0306 	and.w	r3, r3, #6
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	bf18      	it	ne
 80057fa:	2500      	movne	r5, #0
 80057fc:	6832      	ldr	r2, [r6, #0]
 80057fe:	f04f 0600 	mov.w	r6, #0
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	bf08      	it	eq
 8005806:	1aad      	subeq	r5, r5, r2
 8005808:	6922      	ldr	r2, [r4, #16]
 800580a:	bf08      	it	eq
 800580c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005810:	4293      	cmp	r3, r2
 8005812:	bfc4      	itt	gt
 8005814:	1a9b      	subgt	r3, r3, r2
 8005816:	18ed      	addgt	r5, r5, r3
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xcc>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xac>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4649      	mov	r1, r9
 8005828:	4638      	mov	r0, r7
 800582a:	47c0      	blx	r8
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xb0>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c4      	b.n	80057c6 <_printf_common+0x3e>
 800583c:	2030      	movs	r0, #48	; 0x30
 800583e:	18e1      	adds	r1, r4, r3
 8005840:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800584a:	4422      	add	r2, r4
 800584c:	3302      	adds	r3, #2
 800584e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005852:	e7c5      	b.n	80057e0 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	47c0      	blx	r8
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa8>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x92>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	7e0f      	ldrb	r7, [r1, #24]
 800586e:	4691      	mov	r9, r2
 8005870:	2f78      	cmp	r7, #120	; 0x78
 8005872:	4680      	mov	r8, r0
 8005874:	460c      	mov	r4, r1
 8005876:	469a      	mov	sl, r3
 8005878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800587a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	; 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d9 	beq.w	8005a3c <_printf_i+0x1d4>
 800588a:	2f58      	cmp	r7, #88	; 0x58
 800588c:	f000 80a4 	beq.w	80059d8 <_printf_i+0x170>
 8005890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a101      	add	r1, pc, #4	; (adr r1, 80058a8 <_printf_i+0x40>)
 80058a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a23 	.word	0x08005a23
 80058d8:	08005945 	.word	0x08005945
 80058dc:	08005a05 	.word	0x08005a05
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a45 	.word	0x08005a45
 80058ec:	08005891 	.word	0x08005891
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	08005a0d 	.word	0x08005a0d
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e0a4      	b.n	8005a5e <_printf_i+0x1f6>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	6829      	ldr	r1, [r5, #0]
 8005918:	0606      	lsls	r6, r0, #24
 800591a:	f101 0304 	add.w	r3, r1, #4
 800591e:	d50a      	bpl.n	8005936 <_printf_i+0xce>
 8005920:	680e      	ldr	r6, [r1, #0]
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	2e00      	cmp	r6, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xc8>
 8005928:	232d      	movs	r3, #45	; 0x2d
 800592a:	4276      	negs	r6, r6
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005930:	230a      	movs	r3, #10
 8005932:	485e      	ldr	r0, [pc, #376]	; (8005aac <_printf_i+0x244>)
 8005934:	e019      	b.n	800596a <_printf_i+0x102>
 8005936:	680e      	ldr	r6, [r1, #0]
 8005938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	bf18      	it	ne
 8005940:	b236      	sxthne	r6, r6
 8005942:	e7ef      	b.n	8005924 <_printf_i+0xbc>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1d19      	adds	r1, r3, #4
 800594a:	6029      	str	r1, [r5, #0]
 800594c:	0601      	lsls	r1, r0, #24
 800594e:	d501      	bpl.n	8005954 <_printf_i+0xec>
 8005950:	681e      	ldr	r6, [r3, #0]
 8005952:	e002      	b.n	800595a <_printf_i+0xf2>
 8005954:	0646      	lsls	r6, r0, #25
 8005956:	d5fb      	bpl.n	8005950 <_printf_i+0xe8>
 8005958:	881e      	ldrh	r6, [r3, #0]
 800595a:	2f6f      	cmp	r7, #111	; 0x6f
 800595c:	bf0c      	ite	eq
 800595e:	2308      	moveq	r3, #8
 8005960:	230a      	movne	r3, #10
 8005962:	4852      	ldr	r0, [pc, #328]	; (8005aac <_printf_i+0x244>)
 8005964:	2100      	movs	r1, #0
 8005966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800596a:	6865      	ldr	r5, [r4, #4]
 800596c:	2d00      	cmp	r5, #0
 800596e:	bfa8      	it	ge
 8005970:	6821      	ldrge	r1, [r4, #0]
 8005972:	60a5      	str	r5, [r4, #8]
 8005974:	bfa4      	itt	ge
 8005976:	f021 0104 	bicge.w	r1, r1, #4
 800597a:	6021      	strge	r1, [r4, #0]
 800597c:	b90e      	cbnz	r6, 8005982 <_printf_i+0x11a>
 800597e:	2d00      	cmp	r5, #0
 8005980:	d04d      	beq.n	8005a1e <_printf_i+0x1b6>
 8005982:	4615      	mov	r5, r2
 8005984:	fbb6 f1f3 	udiv	r1, r6, r3
 8005988:	fb03 6711 	mls	r7, r3, r1, r6
 800598c:	5dc7      	ldrb	r7, [r0, r7]
 800598e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005992:	4637      	mov	r7, r6
 8005994:	42bb      	cmp	r3, r7
 8005996:	460e      	mov	r6, r1
 8005998:	d9f4      	bls.n	8005984 <_printf_i+0x11c>
 800599a:	2b08      	cmp	r3, #8
 800599c:	d10b      	bne.n	80059b6 <_printf_i+0x14e>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	07de      	lsls	r6, r3, #31
 80059a2:	d508      	bpl.n	80059b6 <_printf_i+0x14e>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	6861      	ldr	r1, [r4, #4]
 80059a8:	4299      	cmp	r1, r3
 80059aa:	bfde      	ittt	le
 80059ac:	2330      	movle	r3, #48	; 0x30
 80059ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059b6:	1b52      	subs	r2, r2, r5
 80059b8:	6122      	str	r2, [r4, #16]
 80059ba:	464b      	mov	r3, r9
 80059bc:	4621      	mov	r1, r4
 80059be:	4640      	mov	r0, r8
 80059c0:	f8cd a000 	str.w	sl, [sp]
 80059c4:	aa03      	add	r2, sp, #12
 80059c6:	f7ff fedf 	bl	8005788 <_printf_common>
 80059ca:	3001      	adds	r0, #1
 80059cc:	d14c      	bne.n	8005a68 <_printf_i+0x200>
 80059ce:	f04f 30ff 	mov.w	r0, #4294967295
 80059d2:	b004      	add	sp, #16
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	4834      	ldr	r0, [pc, #208]	; (8005aac <_printf_i+0x244>)
 80059da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059de:	6829      	ldr	r1, [r5, #0]
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80059e6:	6029      	str	r1, [r5, #0]
 80059e8:	061d      	lsls	r5, r3, #24
 80059ea:	d514      	bpl.n	8005a16 <_printf_i+0x1ae>
 80059ec:	07df      	lsls	r7, r3, #31
 80059ee:	bf44      	itt	mi
 80059f0:	f043 0320 	orrmi.w	r3, r3, #32
 80059f4:	6023      	strmi	r3, [r4, #0]
 80059f6:	b91e      	cbnz	r6, 8005a00 <_printf_i+0x198>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	2310      	movs	r3, #16
 8005a02:	e7af      	b.n	8005964 <_printf_i+0xfc>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	f043 0320 	orr.w	r3, r3, #32
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	2378      	movs	r3, #120	; 0x78
 8005a0e:	4828      	ldr	r0, [pc, #160]	; (8005ab0 <_printf_i+0x248>)
 8005a10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a14:	e7e3      	b.n	80059de <_printf_i+0x176>
 8005a16:	0659      	lsls	r1, r3, #25
 8005a18:	bf48      	it	mi
 8005a1a:	b2b6      	uxthmi	r6, r6
 8005a1c:	e7e6      	b.n	80059ec <_printf_i+0x184>
 8005a1e:	4615      	mov	r5, r2
 8005a20:	e7bb      	b.n	800599a <_printf_i+0x132>
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	6826      	ldr	r6, [r4, #0]
 8005a26:	1d18      	adds	r0, r3, #4
 8005a28:	6961      	ldr	r1, [r4, #20]
 8005a2a:	6028      	str	r0, [r5, #0]
 8005a2c:	0635      	lsls	r5, r6, #24
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	d501      	bpl.n	8005a36 <_printf_i+0x1ce>
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	e002      	b.n	8005a3c <_printf_i+0x1d4>
 8005a36:	0670      	lsls	r0, r6, #25
 8005a38:	d5fb      	bpl.n	8005a32 <_printf_i+0x1ca>
 8005a3a:	8019      	strh	r1, [r3, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4615      	mov	r5, r2
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	e7ba      	b.n	80059ba <_printf_i+0x152>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	2100      	movs	r1, #0
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	602a      	str	r2, [r5, #0]
 8005a4c:	681d      	ldr	r5, [r3, #0]
 8005a4e:	6862      	ldr	r2, [r4, #4]
 8005a50:	4628      	mov	r0, r5
 8005a52:	f002 faf7 	bl	8008044 <memchr>
 8005a56:	b108      	cbz	r0, 8005a5c <_printf_i+0x1f4>
 8005a58:	1b40      	subs	r0, r0, r5
 8005a5a:	6060      	str	r0, [r4, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	2300      	movs	r3, #0
 8005a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a66:	e7a8      	b.n	80059ba <_printf_i+0x152>
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	47d0      	blx	sl
 8005a72:	3001      	adds	r0, #1
 8005a74:	d0ab      	beq.n	80059ce <_printf_i+0x166>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	079b      	lsls	r3, r3, #30
 8005a7a:	d413      	bmi.n	8005aa4 <_printf_i+0x23c>
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	4298      	cmp	r0, r3
 8005a82:	bfb8      	it	lt
 8005a84:	4618      	movlt	r0, r3
 8005a86:	e7a4      	b.n	80059d2 <_printf_i+0x16a>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4640      	mov	r0, r8
 8005a90:	47d0      	blx	sl
 8005a92:	3001      	adds	r0, #1
 8005a94:	d09b      	beq.n	80059ce <_printf_i+0x166>
 8005a96:	3501      	adds	r5, #1
 8005a98:	68e3      	ldr	r3, [r4, #12]
 8005a9a:	9903      	ldr	r1, [sp, #12]
 8005a9c:	1a5b      	subs	r3, r3, r1
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	dcf2      	bgt.n	8005a88 <_printf_i+0x220>
 8005aa2:	e7eb      	b.n	8005a7c <_printf_i+0x214>
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	f104 0619 	add.w	r6, r4, #25
 8005aaa:	e7f5      	b.n	8005a98 <_printf_i+0x230>
 8005aac:	0800a836 	.word	0x0800a836
 8005ab0:	0800a847 	.word	0x0800a847

08005ab4 <_scanf_float>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	688b      	ldr	r3, [r1, #8]
 8005abe:	4617      	mov	r7, r2
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ac6:	bf85      	ittet	hi
 8005ac8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005acc:	195b      	addhi	r3, r3, r5
 8005ace:	2300      	movls	r3, #0
 8005ad0:	9302      	strhi	r3, [sp, #8]
 8005ad2:	bf88      	it	hi
 8005ad4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ad8:	468b      	mov	fp, r1
 8005ada:	f04f 0500 	mov.w	r5, #0
 8005ade:	bf8c      	ite	hi
 8005ae0:	608b      	strhi	r3, [r1, #8]
 8005ae2:	9302      	strls	r3, [sp, #8]
 8005ae4:	680b      	ldr	r3, [r1, #0]
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005aec:	f84b 3b1c 	str.w	r3, [fp], #28
 8005af0:	460c      	mov	r4, r1
 8005af2:	465e      	mov	r6, fp
 8005af4:	46aa      	mov	sl, r5
 8005af6:	46a9      	mov	r9, r5
 8005af8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005afc:	9501      	str	r5, [sp, #4]
 8005afe:	68a2      	ldr	r2, [r4, #8]
 8005b00:	b152      	cbz	r2, 8005b18 <_scanf_float+0x64>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b4e      	cmp	r3, #78	; 0x4e
 8005b08:	d864      	bhi.n	8005bd4 <_scanf_float+0x120>
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d83c      	bhi.n	8005b88 <_scanf_float+0xd4>
 8005b0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b12:	b2c8      	uxtb	r0, r1
 8005b14:	280e      	cmp	r0, #14
 8005b16:	d93a      	bls.n	8005b8e <_scanf_float+0xda>
 8005b18:	f1b9 0f00 	cmp.w	r9, #0
 8005b1c:	d003      	beq.n	8005b26 <_scanf_float+0x72>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b2a:	f1ba 0f01 	cmp.w	sl, #1
 8005b2e:	f200 8113 	bhi.w	8005d58 <_scanf_float+0x2a4>
 8005b32:	455e      	cmp	r6, fp
 8005b34:	f200 8105 	bhi.w	8005d42 <_scanf_float+0x28e>
 8005b38:	2501      	movs	r5, #1
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	b007      	add	sp, #28
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005b46:	2a0d      	cmp	r2, #13
 8005b48:	d8e6      	bhi.n	8005b18 <_scanf_float+0x64>
 8005b4a:	a101      	add	r1, pc, #4	; (adr r1, 8005b50 <_scanf_float+0x9c>)
 8005b4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b50:	08005c8f 	.word	0x08005c8f
 8005b54:	08005b19 	.word	0x08005b19
 8005b58:	08005b19 	.word	0x08005b19
 8005b5c:	08005b19 	.word	0x08005b19
 8005b60:	08005cef 	.word	0x08005cef
 8005b64:	08005cc7 	.word	0x08005cc7
 8005b68:	08005b19 	.word	0x08005b19
 8005b6c:	08005b19 	.word	0x08005b19
 8005b70:	08005c9d 	.word	0x08005c9d
 8005b74:	08005b19 	.word	0x08005b19
 8005b78:	08005b19 	.word	0x08005b19
 8005b7c:	08005b19 	.word	0x08005b19
 8005b80:	08005b19 	.word	0x08005b19
 8005b84:	08005c55 	.word	0x08005c55
 8005b88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b8c:	e7db      	b.n	8005b46 <_scanf_float+0x92>
 8005b8e:	290e      	cmp	r1, #14
 8005b90:	d8c2      	bhi.n	8005b18 <_scanf_float+0x64>
 8005b92:	a001      	add	r0, pc, #4	; (adr r0, 8005b98 <_scanf_float+0xe4>)
 8005b94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b98:	08005c47 	.word	0x08005c47
 8005b9c:	08005b19 	.word	0x08005b19
 8005ba0:	08005c47 	.word	0x08005c47
 8005ba4:	08005cdb 	.word	0x08005cdb
 8005ba8:	08005b19 	.word	0x08005b19
 8005bac:	08005bf5 	.word	0x08005bf5
 8005bb0:	08005c31 	.word	0x08005c31
 8005bb4:	08005c31 	.word	0x08005c31
 8005bb8:	08005c31 	.word	0x08005c31
 8005bbc:	08005c31 	.word	0x08005c31
 8005bc0:	08005c31 	.word	0x08005c31
 8005bc4:	08005c31 	.word	0x08005c31
 8005bc8:	08005c31 	.word	0x08005c31
 8005bcc:	08005c31 	.word	0x08005c31
 8005bd0:	08005c31 	.word	0x08005c31
 8005bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8005bd6:	d809      	bhi.n	8005bec <_scanf_float+0x138>
 8005bd8:	2b60      	cmp	r3, #96	; 0x60
 8005bda:	d8b2      	bhi.n	8005b42 <_scanf_float+0x8e>
 8005bdc:	2b54      	cmp	r3, #84	; 0x54
 8005bde:	d077      	beq.n	8005cd0 <_scanf_float+0x21c>
 8005be0:	2b59      	cmp	r3, #89	; 0x59
 8005be2:	d199      	bne.n	8005b18 <_scanf_float+0x64>
 8005be4:	2d07      	cmp	r5, #7
 8005be6:	d197      	bne.n	8005b18 <_scanf_float+0x64>
 8005be8:	2508      	movs	r5, #8
 8005bea:	e029      	b.n	8005c40 <_scanf_float+0x18c>
 8005bec:	2b74      	cmp	r3, #116	; 0x74
 8005bee:	d06f      	beq.n	8005cd0 <_scanf_float+0x21c>
 8005bf0:	2b79      	cmp	r3, #121	; 0x79
 8005bf2:	e7f6      	b.n	8005be2 <_scanf_float+0x12e>
 8005bf4:	6821      	ldr	r1, [r4, #0]
 8005bf6:	05c8      	lsls	r0, r1, #23
 8005bf8:	d51a      	bpl.n	8005c30 <_scanf_float+0x17c>
 8005bfa:	9b02      	ldr	r3, [sp, #8]
 8005bfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c00:	6021      	str	r1, [r4, #0]
 8005c02:	f109 0901 	add.w	r9, r9, #1
 8005c06:	b11b      	cbz	r3, 8005c10 <_scanf_float+0x15c>
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	3201      	adds	r2, #1
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	60a2      	str	r2, [r4, #8]
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	60a3      	str	r3, [r4, #8]
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	f340 8084 	ble.w	8005d30 <_scanf_float+0x27c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	e766      	b.n	8005afe <_scanf_float+0x4a>
 8005c30:	eb1a 0f05 	cmn.w	sl, r5
 8005c34:	f47f af70 	bne.w	8005b18 <_scanf_float+0x64>
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005c3e:	6022      	str	r2, [r4, #0]
 8005c40:	f806 3b01 	strb.w	r3, [r6], #1
 8005c44:	e7e4      	b.n	8005c10 <_scanf_float+0x15c>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	0610      	lsls	r0, r2, #24
 8005c4a:	f57f af65 	bpl.w	8005b18 <_scanf_float+0x64>
 8005c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c52:	e7f4      	b.n	8005c3e <_scanf_float+0x18a>
 8005c54:	f1ba 0f00 	cmp.w	sl, #0
 8005c58:	d10e      	bne.n	8005c78 <_scanf_float+0x1c4>
 8005c5a:	f1b9 0f00 	cmp.w	r9, #0
 8005c5e:	d10e      	bne.n	8005c7e <_scanf_float+0x1ca>
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c6a:	d108      	bne.n	8005c7e <_scanf_float+0x1ca>
 8005c6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c70:	f04f 0a01 	mov.w	sl, #1
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	e7e3      	b.n	8005c40 <_scanf_float+0x18c>
 8005c78:	f1ba 0f02 	cmp.w	sl, #2
 8005c7c:	d055      	beq.n	8005d2a <_scanf_float+0x276>
 8005c7e:	2d01      	cmp	r5, #1
 8005c80:	d002      	beq.n	8005c88 <_scanf_float+0x1d4>
 8005c82:	2d04      	cmp	r5, #4
 8005c84:	f47f af48 	bne.w	8005b18 <_scanf_float+0x64>
 8005c88:	3501      	adds	r5, #1
 8005c8a:	b2ed      	uxtb	r5, r5
 8005c8c:	e7d8      	b.n	8005c40 <_scanf_float+0x18c>
 8005c8e:	f1ba 0f01 	cmp.w	sl, #1
 8005c92:	f47f af41 	bne.w	8005b18 <_scanf_float+0x64>
 8005c96:	f04f 0a02 	mov.w	sl, #2
 8005c9a:	e7d1      	b.n	8005c40 <_scanf_float+0x18c>
 8005c9c:	b97d      	cbnz	r5, 8005cbe <_scanf_float+0x20a>
 8005c9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ca2:	f47f af3c 	bne.w	8005b1e <_scanf_float+0x6a>
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005cac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005cb0:	f47f af39 	bne.w	8005b26 <_scanf_float+0x72>
 8005cb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cb8:	2501      	movs	r5, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	e7c0      	b.n	8005c40 <_scanf_float+0x18c>
 8005cbe:	2d03      	cmp	r5, #3
 8005cc0:	d0e2      	beq.n	8005c88 <_scanf_float+0x1d4>
 8005cc2:	2d05      	cmp	r5, #5
 8005cc4:	e7de      	b.n	8005c84 <_scanf_float+0x1d0>
 8005cc6:	2d02      	cmp	r5, #2
 8005cc8:	f47f af26 	bne.w	8005b18 <_scanf_float+0x64>
 8005ccc:	2503      	movs	r5, #3
 8005cce:	e7b7      	b.n	8005c40 <_scanf_float+0x18c>
 8005cd0:	2d06      	cmp	r5, #6
 8005cd2:	f47f af21 	bne.w	8005b18 <_scanf_float+0x64>
 8005cd6:	2507      	movs	r5, #7
 8005cd8:	e7b2      	b.n	8005c40 <_scanf_float+0x18c>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	0591      	lsls	r1, r2, #22
 8005cde:	f57f af1b 	bpl.w	8005b18 <_scanf_float+0x64>
 8005ce2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cec:	e7a8      	b.n	8005c40 <_scanf_float+0x18c>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005cf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005cf8:	d006      	beq.n	8005d08 <_scanf_float+0x254>
 8005cfa:	0550      	lsls	r0, r2, #21
 8005cfc:	f57f af0c 	bpl.w	8005b18 <_scanf_float+0x64>
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	f43f af0f 	beq.w	8005b26 <_scanf_float+0x72>
 8005d08:	0591      	lsls	r1, r2, #22
 8005d0a:	bf58      	it	pl
 8005d0c:	9901      	ldrpl	r1, [sp, #4]
 8005d0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d12:	bf58      	it	pl
 8005d14:	eba9 0101 	subpl.w	r1, r9, r1
 8005d18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d1c:	f04f 0900 	mov.w	r9, #0
 8005d20:	bf58      	it	pl
 8005d22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d26:	6022      	str	r2, [r4, #0]
 8005d28:	e78a      	b.n	8005c40 <_scanf_float+0x18c>
 8005d2a:	f04f 0a03 	mov.w	sl, #3
 8005d2e:	e787      	b.n	8005c40 <_scanf_float+0x18c>
 8005d30:	4639      	mov	r1, r7
 8005d32:	4640      	mov	r0, r8
 8005d34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d38:	4798      	blx	r3
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f43f aedf 	beq.w	8005afe <_scanf_float+0x4a>
 8005d40:	e6ea      	b.n	8005b18 <_scanf_float+0x64>
 8005d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d46:	463a      	mov	r2, r7
 8005d48:	4640      	mov	r0, r8
 8005d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d4e:	4798      	blx	r3
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	e6ec      	b.n	8005b32 <_scanf_float+0x7e>
 8005d58:	1e6b      	subs	r3, r5, #1
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d825      	bhi.n	8005daa <_scanf_float+0x2f6>
 8005d5e:	2d02      	cmp	r5, #2
 8005d60:	d836      	bhi.n	8005dd0 <_scanf_float+0x31c>
 8005d62:	455e      	cmp	r6, fp
 8005d64:	f67f aee8 	bls.w	8005b38 <_scanf_float+0x84>
 8005d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d74:	4798      	blx	r3
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	e7f1      	b.n	8005d62 <_scanf_float+0x2ae>
 8005d7e:	9802      	ldr	r0, [sp, #8]
 8005d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d88:	463a      	mov	r2, r7
 8005d8a:	9002      	str	r0, [sp, #8]
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	4798      	blx	r3
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d9a:	fa5f fa8a 	uxtb.w	sl, sl
 8005d9e:	f1ba 0f02 	cmp.w	sl, #2
 8005da2:	d1ec      	bne.n	8005d7e <_scanf_float+0x2ca>
 8005da4:	3d03      	subs	r5, #3
 8005da6:	b2ed      	uxtb	r5, r5
 8005da8:	1b76      	subs	r6, r6, r5
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	05da      	lsls	r2, r3, #23
 8005dae:	d52f      	bpl.n	8005e10 <_scanf_float+0x35c>
 8005db0:	055b      	lsls	r3, r3, #21
 8005db2:	d510      	bpl.n	8005dd6 <_scanf_float+0x322>
 8005db4:	455e      	cmp	r6, fp
 8005db6:	f67f aebf 	bls.w	8005b38 <_scanf_float+0x84>
 8005dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dbe:	463a      	mov	r2, r7
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dc6:	4798      	blx	r3
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	e7f1      	b.n	8005db4 <_scanf_float+0x300>
 8005dd0:	46aa      	mov	sl, r5
 8005dd2:	9602      	str	r6, [sp, #8]
 8005dd4:	e7df      	b.n	8005d96 <_scanf_float+0x2e2>
 8005dd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	2965      	cmp	r1, #101	; 0x65
 8005dde:	f103 33ff 	add.w	r3, r3, #4294967295
 8005de2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	d00c      	beq.n	8005e04 <_scanf_float+0x350>
 8005dea:	2945      	cmp	r1, #69	; 0x45
 8005dec:	d00a      	beq.n	8005e04 <_scanf_float+0x350>
 8005dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005df2:	463a      	mov	r2, r7
 8005df4:	4640      	mov	r0, r8
 8005df6:	4798      	blx	r3
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	1eb5      	subs	r5, r6, #2
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	463a      	mov	r2, r7
 8005e06:	4640      	mov	r0, r8
 8005e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e0c:	4798      	blx	r3
 8005e0e:	462e      	mov	r6, r5
 8005e10:	6825      	ldr	r5, [r4, #0]
 8005e12:	f015 0510 	ands.w	r5, r5, #16
 8005e16:	d155      	bne.n	8005ec4 <_scanf_float+0x410>
 8005e18:	7035      	strb	r5, [r6, #0]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d11b      	bne.n	8005e5e <_scanf_float+0x3aa>
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	454b      	cmp	r3, r9
 8005e2a:	eba3 0209 	sub.w	r2, r3, r9
 8005e2e:	d123      	bne.n	8005e78 <_scanf_float+0x3c4>
 8005e30:	2200      	movs	r2, #0
 8005e32:	4659      	mov	r1, fp
 8005e34:	4640      	mov	r0, r8
 8005e36:	f000 fe8b 	bl	8006b50 <_strtod_r>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	f012 0f02 	tst.w	r2, #2
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	d021      	beq.n	8005e8e <_scanf_float+0x3da>
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	9903      	ldr	r1, [sp, #12]
 8005e4e:	600a      	str	r2, [r1, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	e9c3 6700 	strd	r6, r7, [r3]
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60e3      	str	r3, [r4, #12]
 8005e5c:	e66d      	b.n	8005b3a <_scanf_float+0x86>
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0e5      	beq.n	8005e30 <_scanf_float+0x37c>
 8005e64:	9905      	ldr	r1, [sp, #20]
 8005e66:	230a      	movs	r3, #10
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	3101      	adds	r1, #1
 8005e6e:	f000 fef1 	bl	8006c54 <_strtol_r>
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	9e05      	ldr	r6, [sp, #20]
 8005e76:	1ac2      	subs	r2, r0, r3
 8005e78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e7c:	429e      	cmp	r6, r3
 8005e7e:	bf28      	it	cs
 8005e80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e84:	4630      	mov	r0, r6
 8005e86:	4910      	ldr	r1, [pc, #64]	; (8005ec8 <_scanf_float+0x414>)
 8005e88:	f000 f836 	bl	8005ef8 <siprintf>
 8005e8c:	e7d0      	b.n	8005e30 <_scanf_float+0x37c>
 8005e8e:	f012 0f04 	tst.w	r2, #4
 8005e92:	f103 0204 	add.w	r2, r3, #4
 8005e96:	d1d9      	bne.n	8005e4c <_scanf_float+0x398>
 8005e98:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005e9c:	f8cc 2000 	str.w	r2, [ip]
 8005ea0:	f8d3 8000 	ldr.w	r8, [r3]
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	f7fa fe1c 	bl	8000ae4 <__aeabi_dcmpun>
 8005eac:	b128      	cbz	r0, 8005eba <_scanf_float+0x406>
 8005eae:	4807      	ldr	r0, [pc, #28]	; (8005ecc <_scanf_float+0x418>)
 8005eb0:	f000 f81e 	bl	8005ef0 <nanf>
 8005eb4:	f8c8 0000 	str.w	r0, [r8]
 8005eb8:	e7cd      	b.n	8005e56 <_scanf_float+0x3a2>
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fe6f 	bl	8000ba0 <__aeabi_d2f>
 8005ec2:	e7f7      	b.n	8005eb4 <_scanf_float+0x400>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	e638      	b.n	8005b3a <_scanf_float+0x86>
 8005ec8:	0800a858 	.word	0x0800a858
 8005ecc:	0800ac60 	.word	0x0800ac60

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4d05      	ldr	r5, [pc, #20]	; (8005eec <_sbrk_r+0x1c>)
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fc fdd6 	bl	8002a8c <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	20000708 	.word	0x20000708

08005ef0 <nanf>:
 8005ef0:	4800      	ldr	r0, [pc, #0]	; (8005ef4 <nanf+0x4>)
 8005ef2:	4770      	bx	lr
 8005ef4:	7fc00000 	.word	0x7fc00000

08005ef8 <siprintf>:
 8005ef8:	b40e      	push	{r1, r2, r3}
 8005efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005efe:	b500      	push	{lr}
 8005f00:	b09c      	sub	sp, #112	; 0x70
 8005f02:	ab1d      	add	r3, sp, #116	; 0x74
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9006      	str	r0, [sp, #24]
 8005f08:	9107      	str	r1, [sp, #28]
 8005f0a:	9104      	str	r1, [sp, #16]
 8005f0c:	4808      	ldr	r0, [pc, #32]	; (8005f30 <siprintf+0x38>)
 8005f0e:	4909      	ldr	r1, [pc, #36]	; (8005f34 <siprintf+0x3c>)
 8005f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f14:	9105      	str	r1, [sp, #20]
 8005f16:	6800      	ldr	r0, [r0, #0]
 8005f18:	a902      	add	r1, sp, #8
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	f002 fde2 	bl	8008ae4 <_svfiprintf_r>
 8005f20:	2200      	movs	r2, #0
 8005f22:	9b02      	ldr	r3, [sp, #8]
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	b01c      	add	sp, #112	; 0x70
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	b003      	add	sp, #12
 8005f2e:	4770      	bx	lr
 8005f30:	20000040 	.word	0x20000040
 8005f34:	ffff0208 	.word	0xffff0208

08005f38 <sulp>:
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	460f      	mov	r7, r1
 8005f3e:	4690      	mov	r8, r2
 8005f40:	f002 fc18 	bl	8008774 <__ulp>
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	f1b8 0f00 	cmp.w	r8, #0
 8005f4c:	d011      	beq.n	8005f72 <sulp+0x3a>
 8005f4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	dd0b      	ble.n	8005f72 <sulp+0x3a>
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	051b      	lsls	r3, r3, #20
 8005f5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f7fa fb21 	bl	80005b0 <__aeabi_dmul>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	460d      	mov	r5, r1
 8005f72:	4620      	mov	r0, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7a:	0000      	movs	r0, r0
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <_strtod_l>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	469b      	mov	fp, r3
 8005f86:	2300      	movs	r3, #0
 8005f88:	b09f      	sub	sp, #124	; 0x7c
 8005f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f8c:	4b9e      	ldr	r3, [pc, #632]	; (8006208 <_strtod_l+0x288>)
 8005f8e:	4682      	mov	sl, r0
 8005f90:	681f      	ldr	r7, [r3, #0]
 8005f92:	460e      	mov	r6, r1
 8005f94:	4638      	mov	r0, r7
 8005f96:	9215      	str	r2, [sp, #84]	; 0x54
 8005f98:	f7fa f946 	bl	8000228 <strlen>
 8005f9c:	f04f 0800 	mov.w	r8, #0
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	f04f 0900 	mov.w	r9, #0
 8005fa6:	9619      	str	r6, [sp, #100]	; 0x64
 8005fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	2a2b      	cmp	r2, #43	; 0x2b
 8005fae:	d04c      	beq.n	800604a <_strtod_l+0xca>
 8005fb0:	d83a      	bhi.n	8006028 <_strtod_l+0xa8>
 8005fb2:	2a0d      	cmp	r2, #13
 8005fb4:	d833      	bhi.n	800601e <_strtod_l+0x9e>
 8005fb6:	2a08      	cmp	r2, #8
 8005fb8:	d833      	bhi.n	8006022 <_strtod_l+0xa2>
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d03d      	beq.n	800603a <_strtod_l+0xba>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005fc4:	782b      	ldrb	r3, [r5, #0]
 8005fc6:	2b30      	cmp	r3, #48	; 0x30
 8005fc8:	f040 80aa 	bne.w	8006120 <_strtod_l+0x1a0>
 8005fcc:	786b      	ldrb	r3, [r5, #1]
 8005fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fd2:	2b58      	cmp	r3, #88	; 0x58
 8005fd4:	d166      	bne.n	80060a4 <_strtod_l+0x124>
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	4650      	mov	r0, sl
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	ab1a      	add	r3, sp, #104	; 0x68
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4a8a      	ldr	r2, [pc, #552]	; (800620c <_strtod_l+0x28c>)
 8005fe2:	f8cd b008 	str.w	fp, [sp, #8]
 8005fe6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005fe8:	a919      	add	r1, sp, #100	; 0x64
 8005fea:	f001 fd17 	bl	8007a1c <__gethex>
 8005fee:	f010 0607 	ands.w	r6, r0, #7
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	d005      	beq.n	8006002 <_strtod_l+0x82>
 8005ff6:	2e06      	cmp	r6, #6
 8005ff8:	d129      	bne.n	800604e <_strtod_l+0xce>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	9519      	str	r5, [sp, #100]	; 0x64
 8006000:	930a      	str	r3, [sp, #40]	; 0x28
 8006002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 858a 	bne.w	8006b1e <_strtod_l+0xb9e>
 800600a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600c:	b1d3      	cbz	r3, 8006044 <_strtod_l+0xc4>
 800600e:	4642      	mov	r2, r8
 8006010:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	b01f      	add	sp, #124	; 0x7c
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	2a20      	cmp	r2, #32
 8006020:	d1cd      	bne.n	8005fbe <_strtod_l+0x3e>
 8006022:	3301      	adds	r3, #1
 8006024:	9319      	str	r3, [sp, #100]	; 0x64
 8006026:	e7bf      	b.n	8005fa8 <_strtod_l+0x28>
 8006028:	2a2d      	cmp	r2, #45	; 0x2d
 800602a:	d1c8      	bne.n	8005fbe <_strtod_l+0x3e>
 800602c:	2201      	movs	r2, #1
 800602e:	920a      	str	r2, [sp, #40]	; 0x28
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	9219      	str	r2, [sp, #100]	; 0x64
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1c3      	bne.n	8005fc2 <_strtod_l+0x42>
 800603a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800603c:	9619      	str	r6, [sp, #100]	; 0x64
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 856b 	bne.w	8006b1a <_strtod_l+0xb9a>
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	e7e4      	b.n	8006014 <_strtod_l+0x94>
 800604a:	2200      	movs	r2, #0
 800604c:	e7ef      	b.n	800602e <_strtod_l+0xae>
 800604e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006050:	b13a      	cbz	r2, 8006062 <_strtod_l+0xe2>
 8006052:	2135      	movs	r1, #53	; 0x35
 8006054:	a81c      	add	r0, sp, #112	; 0x70
 8006056:	f002 fc91 	bl	800897c <__copybits>
 800605a:	4650      	mov	r0, sl
 800605c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800605e:	f002 f859 	bl	8008114 <_Bfree>
 8006062:	3e01      	subs	r6, #1
 8006064:	2e04      	cmp	r6, #4
 8006066:	d806      	bhi.n	8006076 <_strtod_l+0xf6>
 8006068:	e8df f006 	tbb	[pc, r6]
 800606c:	1714030a 	.word	0x1714030a
 8006070:	0a          	.byte	0x0a
 8006071:	00          	.byte	0x00
 8006072:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006076:	0721      	lsls	r1, r4, #28
 8006078:	d5c3      	bpl.n	8006002 <_strtod_l+0x82>
 800607a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800607e:	e7c0      	b.n	8006002 <_strtod_l+0x82>
 8006080:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006082:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006086:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800608a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800608e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006092:	e7f0      	b.n	8006076 <_strtod_l+0xf6>
 8006094:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006210 <_strtod_l+0x290>
 8006098:	e7ed      	b.n	8006076 <_strtod_l+0xf6>
 800609a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800609e:	f04f 38ff 	mov.w	r8, #4294967295
 80060a2:	e7e8      	b.n	8006076 <_strtod_l+0xf6>
 80060a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	9219      	str	r2, [sp, #100]	; 0x64
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d0f9      	beq.n	80060a4 <_strtod_l+0x124>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0a6      	beq.n	8006002 <_strtod_l+0x82>
 80060b4:	2301      	movs	r3, #1
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060ba:	220a      	movs	r2, #10
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	2300      	movs	r3, #0
 80060c0:	469b      	mov	fp, r3
 80060c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80060c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80060c8:	7805      	ldrb	r5, [r0, #0]
 80060ca:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80060ce:	b2d9      	uxtb	r1, r3
 80060d0:	2909      	cmp	r1, #9
 80060d2:	d927      	bls.n	8006124 <_strtod_l+0x1a4>
 80060d4:	4622      	mov	r2, r4
 80060d6:	4639      	mov	r1, r7
 80060d8:	f002 fe0a 	bl	8008cf0 <strncmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d033      	beq.n	8006148 <_strtod_l+0x1c8>
 80060e0:	2000      	movs	r0, #0
 80060e2:	462a      	mov	r2, r5
 80060e4:	465c      	mov	r4, fp
 80060e6:	4603      	mov	r3, r0
 80060e8:	9004      	str	r0, [sp, #16]
 80060ea:	2a65      	cmp	r2, #101	; 0x65
 80060ec:	d001      	beq.n	80060f2 <_strtod_l+0x172>
 80060ee:	2a45      	cmp	r2, #69	; 0x45
 80060f0:	d114      	bne.n	800611c <_strtod_l+0x19c>
 80060f2:	b91c      	cbnz	r4, 80060fc <_strtod_l+0x17c>
 80060f4:	9a07      	ldr	r2, [sp, #28]
 80060f6:	4302      	orrs	r2, r0
 80060f8:	d09f      	beq.n	800603a <_strtod_l+0xba>
 80060fa:	2400      	movs	r4, #0
 80060fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80060fe:	1c72      	adds	r2, r6, #1
 8006100:	9219      	str	r2, [sp, #100]	; 0x64
 8006102:	7872      	ldrb	r2, [r6, #1]
 8006104:	2a2b      	cmp	r2, #43	; 0x2b
 8006106:	d079      	beq.n	80061fc <_strtod_l+0x27c>
 8006108:	2a2d      	cmp	r2, #45	; 0x2d
 800610a:	f000 8083 	beq.w	8006214 <_strtod_l+0x294>
 800610e:	2700      	movs	r7, #0
 8006110:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006114:	2909      	cmp	r1, #9
 8006116:	f240 8083 	bls.w	8006220 <_strtod_l+0x2a0>
 800611a:	9619      	str	r6, [sp, #100]	; 0x64
 800611c:	2500      	movs	r5, #0
 800611e:	e09f      	b.n	8006260 <_strtod_l+0x2e0>
 8006120:	2300      	movs	r3, #0
 8006122:	e7c8      	b.n	80060b6 <_strtod_l+0x136>
 8006124:	f1bb 0f08 	cmp.w	fp, #8
 8006128:	bfd5      	itete	le
 800612a:	9906      	ldrle	r1, [sp, #24]
 800612c:	9905      	ldrgt	r1, [sp, #20]
 800612e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006132:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006136:	f100 0001 	add.w	r0, r0, #1
 800613a:	bfd4      	ite	le
 800613c:	9306      	strle	r3, [sp, #24]
 800613e:	9305      	strgt	r3, [sp, #20]
 8006140:	f10b 0b01 	add.w	fp, fp, #1
 8006144:	9019      	str	r0, [sp, #100]	; 0x64
 8006146:	e7be      	b.n	80060c6 <_strtod_l+0x146>
 8006148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800614a:	191a      	adds	r2, r3, r4
 800614c:	9219      	str	r2, [sp, #100]	; 0x64
 800614e:	5d1a      	ldrb	r2, [r3, r4]
 8006150:	f1bb 0f00 	cmp.w	fp, #0
 8006154:	d036      	beq.n	80061c4 <_strtod_l+0x244>
 8006156:	465c      	mov	r4, fp
 8006158:	9004      	str	r0, [sp, #16]
 800615a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d912      	bls.n	8006188 <_strtod_l+0x208>
 8006162:	2301      	movs	r3, #1
 8006164:	e7c1      	b.n	80060ea <_strtod_l+0x16a>
 8006166:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006168:	3001      	adds	r0, #1
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	9219      	str	r2, [sp, #100]	; 0x64
 800616e:	785a      	ldrb	r2, [r3, #1]
 8006170:	2a30      	cmp	r2, #48	; 0x30
 8006172:	d0f8      	beq.n	8006166 <_strtod_l+0x1e6>
 8006174:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006178:	2b08      	cmp	r3, #8
 800617a:	f200 84d5 	bhi.w	8006b28 <_strtod_l+0xba8>
 800617e:	9004      	str	r0, [sp, #16]
 8006180:	2000      	movs	r0, #0
 8006182:	4604      	mov	r4, r0
 8006184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006186:	9308      	str	r3, [sp, #32]
 8006188:	3a30      	subs	r2, #48	; 0x30
 800618a:	f100 0301 	add.w	r3, r0, #1
 800618e:	d013      	beq.n	80061b8 <_strtod_l+0x238>
 8006190:	9904      	ldr	r1, [sp, #16]
 8006192:	1905      	adds	r5, r0, r4
 8006194:	4419      	add	r1, r3
 8006196:	9104      	str	r1, [sp, #16]
 8006198:	4623      	mov	r3, r4
 800619a:	210a      	movs	r1, #10
 800619c:	42ab      	cmp	r3, r5
 800619e:	d113      	bne.n	80061c8 <_strtod_l+0x248>
 80061a0:	1823      	adds	r3, r4, r0
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	f104 0401 	add.w	r4, r4, #1
 80061a8:	4404      	add	r4, r0
 80061aa:	dc1b      	bgt.n	80061e4 <_strtod_l+0x264>
 80061ac:	230a      	movs	r3, #10
 80061ae:	9906      	ldr	r1, [sp, #24]
 80061b0:	fb03 2301 	mla	r3, r3, r1, r2
 80061b4:	9306      	str	r3, [sp, #24]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061ba:	4618      	mov	r0, r3
 80061bc:	1c51      	adds	r1, r2, #1
 80061be:	9119      	str	r1, [sp, #100]	; 0x64
 80061c0:	7852      	ldrb	r2, [r2, #1]
 80061c2:	e7ca      	b.n	800615a <_strtod_l+0x1da>
 80061c4:	4658      	mov	r0, fp
 80061c6:	e7d3      	b.n	8006170 <_strtod_l+0x1f0>
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	dc04      	bgt.n	80061d6 <_strtod_l+0x256>
 80061cc:	9f06      	ldr	r7, [sp, #24]
 80061ce:	434f      	muls	r7, r1
 80061d0:	9706      	str	r7, [sp, #24]
 80061d2:	3301      	adds	r3, #1
 80061d4:	e7e2      	b.n	800619c <_strtod_l+0x21c>
 80061d6:	1c5f      	adds	r7, r3, #1
 80061d8:	2f10      	cmp	r7, #16
 80061da:	bfde      	ittt	le
 80061dc:	9f05      	ldrle	r7, [sp, #20]
 80061de:	434f      	mulle	r7, r1
 80061e0:	9705      	strle	r7, [sp, #20]
 80061e2:	e7f6      	b.n	80061d2 <_strtod_l+0x252>
 80061e4:	2c10      	cmp	r4, #16
 80061e6:	bfdf      	itttt	le
 80061e8:	230a      	movle	r3, #10
 80061ea:	9905      	ldrle	r1, [sp, #20]
 80061ec:	fb03 2301 	mlale	r3, r3, r1, r2
 80061f0:	9305      	strle	r3, [sp, #20]
 80061f2:	e7e0      	b.n	80061b6 <_strtod_l+0x236>
 80061f4:	2300      	movs	r3, #0
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	2301      	movs	r3, #1
 80061fa:	e77b      	b.n	80060f4 <_strtod_l+0x174>
 80061fc:	2700      	movs	r7, #0
 80061fe:	1cb2      	adds	r2, r6, #2
 8006200:	9219      	str	r2, [sp, #100]	; 0x64
 8006202:	78b2      	ldrb	r2, [r6, #2]
 8006204:	e784      	b.n	8006110 <_strtod_l+0x190>
 8006206:	bf00      	nop
 8006208:	0800aaa8 	.word	0x0800aaa8
 800620c:	0800a860 	.word	0x0800a860
 8006210:	7ff00000 	.word	0x7ff00000
 8006214:	2701      	movs	r7, #1
 8006216:	e7f2      	b.n	80061fe <_strtod_l+0x27e>
 8006218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800621a:	1c51      	adds	r1, r2, #1
 800621c:	9119      	str	r1, [sp, #100]	; 0x64
 800621e:	7852      	ldrb	r2, [r2, #1]
 8006220:	2a30      	cmp	r2, #48	; 0x30
 8006222:	d0f9      	beq.n	8006218 <_strtod_l+0x298>
 8006224:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006228:	2908      	cmp	r1, #8
 800622a:	f63f af77 	bhi.w	800611c <_strtod_l+0x19c>
 800622e:	f04f 0e0a 	mov.w	lr, #10
 8006232:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006236:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006238:	9209      	str	r2, [sp, #36]	; 0x24
 800623a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800623c:	1c51      	adds	r1, r2, #1
 800623e:	9119      	str	r1, [sp, #100]	; 0x64
 8006240:	7852      	ldrb	r2, [r2, #1]
 8006242:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006246:	2d09      	cmp	r5, #9
 8006248:	d935      	bls.n	80062b6 <_strtod_l+0x336>
 800624a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800624c:	1b49      	subs	r1, r1, r5
 800624e:	2908      	cmp	r1, #8
 8006250:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006254:	dc02      	bgt.n	800625c <_strtod_l+0x2dc>
 8006256:	4565      	cmp	r5, ip
 8006258:	bfa8      	it	ge
 800625a:	4665      	movge	r5, ip
 800625c:	b107      	cbz	r7, 8006260 <_strtod_l+0x2e0>
 800625e:	426d      	negs	r5, r5
 8006260:	2c00      	cmp	r4, #0
 8006262:	d14c      	bne.n	80062fe <_strtod_l+0x37e>
 8006264:	9907      	ldr	r1, [sp, #28]
 8006266:	4301      	orrs	r1, r0
 8006268:	f47f aecb 	bne.w	8006002 <_strtod_l+0x82>
 800626c:	2b00      	cmp	r3, #0
 800626e:	f47f aee4 	bne.w	800603a <_strtod_l+0xba>
 8006272:	2a69      	cmp	r2, #105	; 0x69
 8006274:	d026      	beq.n	80062c4 <_strtod_l+0x344>
 8006276:	dc23      	bgt.n	80062c0 <_strtod_l+0x340>
 8006278:	2a49      	cmp	r2, #73	; 0x49
 800627a:	d023      	beq.n	80062c4 <_strtod_l+0x344>
 800627c:	2a4e      	cmp	r2, #78	; 0x4e
 800627e:	f47f aedc 	bne.w	800603a <_strtod_l+0xba>
 8006282:	499d      	ldr	r1, [pc, #628]	; (80064f8 <_strtod_l+0x578>)
 8006284:	a819      	add	r0, sp, #100	; 0x64
 8006286:	f001 fe17 	bl	8007eb8 <__match>
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f aed5 	beq.w	800603a <_strtod_l+0xba>
 8006290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d12c      	bne.n	80062f2 <_strtod_l+0x372>
 8006298:	4998      	ldr	r1, [pc, #608]	; (80064fc <_strtod_l+0x57c>)
 800629a:	aa1c      	add	r2, sp, #112	; 0x70
 800629c:	a819      	add	r0, sp, #100	; 0x64
 800629e:	f001 fe1f 	bl	8007ee0 <__hexnan>
 80062a2:	2805      	cmp	r0, #5
 80062a4:	d125      	bne.n	80062f2 <_strtod_l+0x372>
 80062a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80062ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80062b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80062b4:	e6a5      	b.n	8006002 <_strtod_l+0x82>
 80062b6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80062ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80062be:	e7bc      	b.n	800623a <_strtod_l+0x2ba>
 80062c0:	2a6e      	cmp	r2, #110	; 0x6e
 80062c2:	e7dc      	b.n	800627e <_strtod_l+0x2fe>
 80062c4:	498e      	ldr	r1, [pc, #568]	; (8006500 <_strtod_l+0x580>)
 80062c6:	a819      	add	r0, sp, #100	; 0x64
 80062c8:	f001 fdf6 	bl	8007eb8 <__match>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f43f aeb4 	beq.w	800603a <_strtod_l+0xba>
 80062d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062d4:	498b      	ldr	r1, [pc, #556]	; (8006504 <_strtod_l+0x584>)
 80062d6:	3b01      	subs	r3, #1
 80062d8:	a819      	add	r0, sp, #100	; 0x64
 80062da:	9319      	str	r3, [sp, #100]	; 0x64
 80062dc:	f001 fdec 	bl	8007eb8 <__match>
 80062e0:	b910      	cbnz	r0, 80062e8 <_strtod_l+0x368>
 80062e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062e4:	3301      	adds	r3, #1
 80062e6:	9319      	str	r3, [sp, #100]	; 0x64
 80062e8:	f04f 0800 	mov.w	r8, #0
 80062ec:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006508 <_strtod_l+0x588>
 80062f0:	e687      	b.n	8006002 <_strtod_l+0x82>
 80062f2:	4886      	ldr	r0, [pc, #536]	; (800650c <_strtod_l+0x58c>)
 80062f4:	f002 fcf6 	bl	8008ce4 <nan>
 80062f8:	4680      	mov	r8, r0
 80062fa:	4689      	mov	r9, r1
 80062fc:	e681      	b.n	8006002 <_strtod_l+0x82>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	f1bb 0f00 	cmp.w	fp, #0
 8006304:	bf08      	it	eq
 8006306:	46a3      	moveq	fp, r4
 8006308:	1aeb      	subs	r3, r5, r3
 800630a:	2c10      	cmp	r4, #16
 800630c:	9806      	ldr	r0, [sp, #24]
 800630e:	4626      	mov	r6, r4
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	bfa8      	it	ge
 8006314:	2610      	movge	r6, #16
 8006316:	f7fa f8d1 	bl	80004bc <__aeabi_ui2d>
 800631a:	2c09      	cmp	r4, #9
 800631c:	4680      	mov	r8, r0
 800631e:	4689      	mov	r9, r1
 8006320:	dd13      	ble.n	800634a <_strtod_l+0x3ca>
 8006322:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <_strtod_l+0x590>)
 8006324:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006328:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800632c:	f7fa f940 	bl	80005b0 <__aeabi_dmul>
 8006330:	4680      	mov	r8, r0
 8006332:	9805      	ldr	r0, [sp, #20]
 8006334:	4689      	mov	r9, r1
 8006336:	f7fa f8c1 	bl	80004bc <__aeabi_ui2d>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7f9 ff7f 	bl	8000244 <__adddf3>
 8006346:	4680      	mov	r8, r0
 8006348:	4689      	mov	r9, r1
 800634a:	2c0f      	cmp	r4, #15
 800634c:	dc36      	bgt.n	80063bc <_strtod_l+0x43c>
 800634e:	9b07      	ldr	r3, [sp, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f ae56 	beq.w	8006002 <_strtod_l+0x82>
 8006356:	dd22      	ble.n	800639e <_strtod_l+0x41e>
 8006358:	2b16      	cmp	r3, #22
 800635a:	dc09      	bgt.n	8006370 <_strtod_l+0x3f0>
 800635c:	496c      	ldr	r1, [pc, #432]	; (8006510 <_strtod_l+0x590>)
 800635e:	4642      	mov	r2, r8
 8006360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006364:	464b      	mov	r3, r9
 8006366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800636a:	f7fa f921 	bl	80005b0 <__aeabi_dmul>
 800636e:	e7c3      	b.n	80062f8 <_strtod_l+0x378>
 8006370:	9a07      	ldr	r2, [sp, #28]
 8006372:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006376:	4293      	cmp	r3, r2
 8006378:	db20      	blt.n	80063bc <_strtod_l+0x43c>
 800637a:	4d65      	ldr	r5, [pc, #404]	; (8006510 <_strtod_l+0x590>)
 800637c:	f1c4 040f 	rsb	r4, r4, #15
 8006380:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006384:	4642      	mov	r2, r8
 8006386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638a:	464b      	mov	r3, r9
 800638c:	f7fa f910 	bl	80005b0 <__aeabi_dmul>
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	1b1c      	subs	r4, r3, r4
 8006394:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800639c:	e7e5      	b.n	800636a <_strtod_l+0x3ea>
 800639e:	9b07      	ldr	r3, [sp, #28]
 80063a0:	3316      	adds	r3, #22
 80063a2:	db0b      	blt.n	80063bc <_strtod_l+0x43c>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	4640      	mov	r0, r8
 80063a8:	1b5d      	subs	r5, r3, r5
 80063aa:	4b59      	ldr	r3, [pc, #356]	; (8006510 <_strtod_l+0x590>)
 80063ac:	4649      	mov	r1, r9
 80063ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063b6:	f7fa fa25 	bl	8000804 <__aeabi_ddiv>
 80063ba:	e79d      	b.n	80062f8 <_strtod_l+0x378>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	1ba6      	subs	r6, r4, r6
 80063c0:	441e      	add	r6, r3
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	dd74      	ble.n	80064b0 <_strtod_l+0x530>
 80063c6:	f016 030f 	ands.w	r3, r6, #15
 80063ca:	d00a      	beq.n	80063e2 <_strtod_l+0x462>
 80063cc:	4950      	ldr	r1, [pc, #320]	; (8006510 <_strtod_l+0x590>)
 80063ce:	4642      	mov	r2, r8
 80063d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d8:	464b      	mov	r3, r9
 80063da:	f7fa f8e9 	bl	80005b0 <__aeabi_dmul>
 80063de:	4680      	mov	r8, r0
 80063e0:	4689      	mov	r9, r1
 80063e2:	f036 060f 	bics.w	r6, r6, #15
 80063e6:	d052      	beq.n	800648e <_strtod_l+0x50e>
 80063e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80063ec:	dd27      	ble.n	800643e <_strtod_l+0x4be>
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	f8cd b010 	str.w	fp, [sp, #16]
 80063f6:	f8cd b020 	str.w	fp, [sp, #32]
 80063fa:	f8cd b018 	str.w	fp, [sp, #24]
 80063fe:	2322      	movs	r3, #34	; 0x22
 8006400:	f04f 0800 	mov.w	r8, #0
 8006404:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006508 <_strtod_l+0x588>
 8006408:	f8ca 3000 	str.w	r3, [sl]
 800640c:	9b08      	ldr	r3, [sp, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f43f adf7 	beq.w	8006002 <_strtod_l+0x82>
 8006414:	4650      	mov	r0, sl
 8006416:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006418:	f001 fe7c 	bl	8008114 <_Bfree>
 800641c:	4650      	mov	r0, sl
 800641e:	9906      	ldr	r1, [sp, #24]
 8006420:	f001 fe78 	bl	8008114 <_Bfree>
 8006424:	4650      	mov	r0, sl
 8006426:	9904      	ldr	r1, [sp, #16]
 8006428:	f001 fe74 	bl	8008114 <_Bfree>
 800642c:	4650      	mov	r0, sl
 800642e:	9908      	ldr	r1, [sp, #32]
 8006430:	f001 fe70 	bl	8008114 <_Bfree>
 8006434:	4659      	mov	r1, fp
 8006436:	4650      	mov	r0, sl
 8006438:	f001 fe6c 	bl	8008114 <_Bfree>
 800643c:	e5e1      	b.n	8006002 <_strtod_l+0x82>
 800643e:	4b35      	ldr	r3, [pc, #212]	; (8006514 <_strtod_l+0x594>)
 8006440:	4640      	mov	r0, r8
 8006442:	9305      	str	r3, [sp, #20]
 8006444:	2300      	movs	r3, #0
 8006446:	4649      	mov	r1, r9
 8006448:	461f      	mov	r7, r3
 800644a:	1136      	asrs	r6, r6, #4
 800644c:	2e01      	cmp	r6, #1
 800644e:	dc21      	bgt.n	8006494 <_strtod_l+0x514>
 8006450:	b10b      	cbz	r3, 8006456 <_strtod_l+0x4d6>
 8006452:	4680      	mov	r8, r0
 8006454:	4689      	mov	r9, r1
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <_strtod_l+0x594>)
 8006458:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800645c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006460:	4642      	mov	r2, r8
 8006462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006466:	464b      	mov	r3, r9
 8006468:	f7fa f8a2 	bl	80005b0 <__aeabi_dmul>
 800646c:	4b26      	ldr	r3, [pc, #152]	; (8006508 <_strtod_l+0x588>)
 800646e:	460a      	mov	r2, r1
 8006470:	400b      	ands	r3, r1
 8006472:	4929      	ldr	r1, [pc, #164]	; (8006518 <_strtod_l+0x598>)
 8006474:	4680      	mov	r8, r0
 8006476:	428b      	cmp	r3, r1
 8006478:	d8b9      	bhi.n	80063ee <_strtod_l+0x46e>
 800647a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800647e:	428b      	cmp	r3, r1
 8006480:	bf86      	itte	hi
 8006482:	f04f 38ff 	movhi.w	r8, #4294967295
 8006486:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800651c <_strtod_l+0x59c>
 800648a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800648e:	2300      	movs	r3, #0
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	e07f      	b.n	8006594 <_strtod_l+0x614>
 8006494:	07f2      	lsls	r2, r6, #31
 8006496:	d505      	bpl.n	80064a4 <_strtod_l+0x524>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7fa f887 	bl	80005b0 <__aeabi_dmul>
 80064a2:	2301      	movs	r3, #1
 80064a4:	9a05      	ldr	r2, [sp, #20]
 80064a6:	3701      	adds	r7, #1
 80064a8:	3208      	adds	r2, #8
 80064aa:	1076      	asrs	r6, r6, #1
 80064ac:	9205      	str	r2, [sp, #20]
 80064ae:	e7cd      	b.n	800644c <_strtod_l+0x4cc>
 80064b0:	d0ed      	beq.n	800648e <_strtod_l+0x50e>
 80064b2:	4276      	negs	r6, r6
 80064b4:	f016 020f 	ands.w	r2, r6, #15
 80064b8:	d00a      	beq.n	80064d0 <_strtod_l+0x550>
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <_strtod_l+0x590>)
 80064bc:	4640      	mov	r0, r8
 80064be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c2:	4649      	mov	r1, r9
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f99c 	bl	8000804 <__aeabi_ddiv>
 80064cc:	4680      	mov	r8, r0
 80064ce:	4689      	mov	r9, r1
 80064d0:	1136      	asrs	r6, r6, #4
 80064d2:	d0dc      	beq.n	800648e <_strtod_l+0x50e>
 80064d4:	2e1f      	cmp	r6, #31
 80064d6:	dd23      	ble.n	8006520 <_strtod_l+0x5a0>
 80064d8:	f04f 0b00 	mov.w	fp, #0
 80064dc:	f8cd b010 	str.w	fp, [sp, #16]
 80064e0:	f8cd b020 	str.w	fp, [sp, #32]
 80064e4:	f8cd b018 	str.w	fp, [sp, #24]
 80064e8:	2322      	movs	r3, #34	; 0x22
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	f04f 0900 	mov.w	r9, #0
 80064f2:	f8ca 3000 	str.w	r3, [sl]
 80064f6:	e789      	b.n	800640c <_strtod_l+0x48c>
 80064f8:	0800a831 	.word	0x0800a831
 80064fc:	0800a874 	.word	0x0800a874
 8006500:	0800a829 	.word	0x0800a829
 8006504:	0800a9b4 	.word	0x0800a9b4
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	0800ac60 	.word	0x0800ac60
 8006510:	0800ab40 	.word	0x0800ab40
 8006514:	0800ab18 	.word	0x0800ab18
 8006518:	7ca00000 	.word	0x7ca00000
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	f016 0310 	ands.w	r3, r6, #16
 8006524:	bf18      	it	ne
 8006526:	236a      	movne	r3, #106	; 0x6a
 8006528:	4640      	mov	r0, r8
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	4649      	mov	r1, r9
 800652e:	2300      	movs	r3, #0
 8006530:	4fb0      	ldr	r7, [pc, #704]	; (80067f4 <_strtod_l+0x874>)
 8006532:	07f2      	lsls	r2, r6, #31
 8006534:	d504      	bpl.n	8006540 <_strtod_l+0x5c0>
 8006536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653a:	f7fa f839 	bl	80005b0 <__aeabi_dmul>
 800653e:	2301      	movs	r3, #1
 8006540:	1076      	asrs	r6, r6, #1
 8006542:	f107 0708 	add.w	r7, r7, #8
 8006546:	d1f4      	bne.n	8006532 <_strtod_l+0x5b2>
 8006548:	b10b      	cbz	r3, 800654e <_strtod_l+0x5ce>
 800654a:	4680      	mov	r8, r0
 800654c:	4689      	mov	r9, r1
 800654e:	9b05      	ldr	r3, [sp, #20]
 8006550:	b1c3      	cbz	r3, 8006584 <_strtod_l+0x604>
 8006552:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006556:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800655a:	2b00      	cmp	r3, #0
 800655c:	4649      	mov	r1, r9
 800655e:	dd11      	ble.n	8006584 <_strtod_l+0x604>
 8006560:	2b1f      	cmp	r3, #31
 8006562:	f340 8127 	ble.w	80067b4 <_strtod_l+0x834>
 8006566:	2b34      	cmp	r3, #52	; 0x34
 8006568:	bfd8      	it	le
 800656a:	f04f 33ff 	movle.w	r3, #4294967295
 800656e:	f04f 0800 	mov.w	r8, #0
 8006572:	bfcf      	iteee	gt
 8006574:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006578:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800657c:	fa03 f202 	lslle.w	r2, r3, r2
 8006580:	ea02 0901 	andle.w	r9, r2, r1
 8006584:	2200      	movs	r2, #0
 8006586:	2300      	movs	r3, #0
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa fa78 	bl	8000a80 <__aeabi_dcmpeq>
 8006590:	2800      	cmp	r0, #0
 8006592:	d1a1      	bne.n	80064d8 <_strtod_l+0x558>
 8006594:	9b06      	ldr	r3, [sp, #24]
 8006596:	465a      	mov	r2, fp
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4650      	mov	r0, sl
 800659c:	4623      	mov	r3, r4
 800659e:	9908      	ldr	r1, [sp, #32]
 80065a0:	f001 fe20 	bl	80081e4 <__s2b>
 80065a4:	9008      	str	r0, [sp, #32]
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f43f af21 	beq.w	80063ee <_strtod_l+0x46e>
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	f04f 0b00 	mov.w	fp, #0
 80065b2:	1b5d      	subs	r5, r3, r5
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	f8cd b010 	str.w	fp, [sp, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bfb4      	ite	lt
 80065be:	462b      	movlt	r3, r5
 80065c0:	2300      	movge	r3, #0
 80065c2:	930e      	str	r3, [sp, #56]	; 0x38
 80065c4:	9b07      	ldr	r3, [sp, #28]
 80065c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065ca:	9314      	str	r3, [sp, #80]	; 0x50
 80065cc:	9b08      	ldr	r3, [sp, #32]
 80065ce:	4650      	mov	r0, sl
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	f001 fd5f 	bl	8008094 <_Balloc>
 80065d6:	9006      	str	r0, [sp, #24]
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f af10 	beq.w	80063fe <_strtod_l+0x47e>
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	300c      	adds	r0, #12
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	f103 010c 	add.w	r1, r3, #12
 80065e8:	3202      	adds	r2, #2
 80065ea:	0092      	lsls	r2, r2, #2
 80065ec:	f001 fd38 	bl	8008060 <memcpy>
 80065f0:	ab1c      	add	r3, sp, #112	; 0x70
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	4650      	mov	r0, sl
 80065fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006602:	f002 f931 	bl	8008868 <__d2b>
 8006606:	901a      	str	r0, [sp, #104]	; 0x68
 8006608:	2800      	cmp	r0, #0
 800660a:	f43f aef8 	beq.w	80063fe <_strtod_l+0x47e>
 800660e:	2101      	movs	r1, #1
 8006610:	4650      	mov	r0, sl
 8006612:	f001 fe7f 	bl	8008314 <__i2b>
 8006616:	4603      	mov	r3, r0
 8006618:	9004      	str	r0, [sp, #16]
 800661a:	2800      	cmp	r0, #0
 800661c:	f43f aeef 	beq.w	80063fe <_strtod_l+0x47e>
 8006620:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006622:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006624:	2d00      	cmp	r5, #0
 8006626:	bfab      	itete	ge
 8006628:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800662a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800662c:	18ee      	addge	r6, r5, r3
 800662e:	1b5c      	sublt	r4, r3, r5
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	bfa8      	it	ge
 8006634:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006636:	eba5 0503 	sub.w	r5, r5, r3
 800663a:	4415      	add	r5, r2
 800663c:	4b6e      	ldr	r3, [pc, #440]	; (80067f8 <_strtod_l+0x878>)
 800663e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006642:	bfb8      	it	lt
 8006644:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006646:	429d      	cmp	r5, r3
 8006648:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800664c:	f280 80c4 	bge.w	80067d8 <_strtod_l+0x858>
 8006650:	1b5b      	subs	r3, r3, r5
 8006652:	2b1f      	cmp	r3, #31
 8006654:	f04f 0701 	mov.w	r7, #1
 8006658:	eba2 0203 	sub.w	r2, r2, r3
 800665c:	f300 80b1 	bgt.w	80067c2 <_strtod_l+0x842>
 8006660:	2500      	movs	r5, #0
 8006662:	fa07 f303 	lsl.w	r3, r7, r3
 8006666:	930f      	str	r3, [sp, #60]	; 0x3c
 8006668:	18b7      	adds	r7, r6, r2
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	42be      	cmp	r6, r7
 800666e:	4414      	add	r4, r2
 8006670:	441c      	add	r4, r3
 8006672:	4633      	mov	r3, r6
 8006674:	bfa8      	it	ge
 8006676:	463b      	movge	r3, r7
 8006678:	42a3      	cmp	r3, r4
 800667a:	bfa8      	it	ge
 800667c:	4623      	movge	r3, r4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfc2      	ittt	gt
 8006682:	1aff      	subgt	r7, r7, r3
 8006684:	1ae4      	subgt	r4, r4, r3
 8006686:	1af6      	subgt	r6, r6, r3
 8006688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800668a:	2b00      	cmp	r3, #0
 800668c:	dd17      	ble.n	80066be <_strtod_l+0x73e>
 800668e:	461a      	mov	r2, r3
 8006690:	4650      	mov	r0, sl
 8006692:	9904      	ldr	r1, [sp, #16]
 8006694:	f001 fefc 	bl	8008490 <__pow5mult>
 8006698:	9004      	str	r0, [sp, #16]
 800669a:	2800      	cmp	r0, #0
 800669c:	f43f aeaf 	beq.w	80063fe <_strtod_l+0x47e>
 80066a0:	4601      	mov	r1, r0
 80066a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066a4:	4650      	mov	r0, sl
 80066a6:	f001 fe4b 	bl	8008340 <__multiply>
 80066aa:	9009      	str	r0, [sp, #36]	; 0x24
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f43f aea6 	beq.w	80063fe <_strtod_l+0x47e>
 80066b2:	4650      	mov	r0, sl
 80066b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066b6:	f001 fd2d 	bl	8008114 <_Bfree>
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	931a      	str	r3, [sp, #104]	; 0x68
 80066be:	2f00      	cmp	r7, #0
 80066c0:	f300 808e 	bgt.w	80067e0 <_strtod_l+0x860>
 80066c4:	9b07      	ldr	r3, [sp, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd08      	ble.n	80066dc <_strtod_l+0x75c>
 80066ca:	4650      	mov	r0, sl
 80066cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066ce:	9906      	ldr	r1, [sp, #24]
 80066d0:	f001 fede 	bl	8008490 <__pow5mult>
 80066d4:	9006      	str	r0, [sp, #24]
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f43f ae91 	beq.w	80063fe <_strtod_l+0x47e>
 80066dc:	2c00      	cmp	r4, #0
 80066de:	dd08      	ble.n	80066f2 <_strtod_l+0x772>
 80066e0:	4622      	mov	r2, r4
 80066e2:	4650      	mov	r0, sl
 80066e4:	9906      	ldr	r1, [sp, #24]
 80066e6:	f001 ff2d 	bl	8008544 <__lshift>
 80066ea:	9006      	str	r0, [sp, #24]
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f43f ae86 	beq.w	80063fe <_strtod_l+0x47e>
 80066f2:	2e00      	cmp	r6, #0
 80066f4:	dd08      	ble.n	8006708 <_strtod_l+0x788>
 80066f6:	4632      	mov	r2, r6
 80066f8:	4650      	mov	r0, sl
 80066fa:	9904      	ldr	r1, [sp, #16]
 80066fc:	f001 ff22 	bl	8008544 <__lshift>
 8006700:	9004      	str	r0, [sp, #16]
 8006702:	2800      	cmp	r0, #0
 8006704:	f43f ae7b 	beq.w	80063fe <_strtod_l+0x47e>
 8006708:	4650      	mov	r0, sl
 800670a:	9a06      	ldr	r2, [sp, #24]
 800670c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800670e:	f001 ffa5 	bl	800865c <__mdiff>
 8006712:	4683      	mov	fp, r0
 8006714:	2800      	cmp	r0, #0
 8006716:	f43f ae72 	beq.w	80063fe <_strtod_l+0x47e>
 800671a:	2400      	movs	r4, #0
 800671c:	68c3      	ldr	r3, [r0, #12]
 800671e:	9904      	ldr	r1, [sp, #16]
 8006720:	60c4      	str	r4, [r0, #12]
 8006722:	930b      	str	r3, [sp, #44]	; 0x2c
 8006724:	f001 ff7e 	bl	8008624 <__mcmp>
 8006728:	42a0      	cmp	r0, r4
 800672a:	da6b      	bge.n	8006804 <_strtod_l+0x884>
 800672c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800672e:	ea53 0308 	orrs.w	r3, r3, r8
 8006732:	f040 8091 	bne.w	8006858 <_strtod_l+0x8d8>
 8006736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 808c 	bne.w	8006858 <_strtod_l+0x8d8>
 8006740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006744:	0d1b      	lsrs	r3, r3, #20
 8006746:	051b      	lsls	r3, r3, #20
 8006748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800674c:	f240 8084 	bls.w	8006858 <_strtod_l+0x8d8>
 8006750:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006754:	b91b      	cbnz	r3, 800675e <_strtod_l+0x7de>
 8006756:	f8db 3010 	ldr.w	r3, [fp, #16]
 800675a:	2b01      	cmp	r3, #1
 800675c:	dd7c      	ble.n	8006858 <_strtod_l+0x8d8>
 800675e:	4659      	mov	r1, fp
 8006760:	2201      	movs	r2, #1
 8006762:	4650      	mov	r0, sl
 8006764:	f001 feee 	bl	8008544 <__lshift>
 8006768:	9904      	ldr	r1, [sp, #16]
 800676a:	4683      	mov	fp, r0
 800676c:	f001 ff5a 	bl	8008624 <__mcmp>
 8006770:	2800      	cmp	r0, #0
 8006772:	dd71      	ble.n	8006858 <_strtod_l+0x8d8>
 8006774:	9905      	ldr	r1, [sp, #20]
 8006776:	464b      	mov	r3, r9
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <_strtod_l+0x87c>)
 800677a:	2900      	cmp	r1, #0
 800677c:	f000 808c 	beq.w	8006898 <_strtod_l+0x918>
 8006780:	ea02 0109 	and.w	r1, r2, r9
 8006784:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006788:	f300 8086 	bgt.w	8006898 <_strtod_l+0x918>
 800678c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006790:	f77f aeaa 	ble.w	80064e8 <_strtod_l+0x568>
 8006794:	4640      	mov	r0, r8
 8006796:	4649      	mov	r1, r9
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <_strtod_l+0x880>)
 800679a:	2200      	movs	r2, #0
 800679c:	f7f9 ff08 	bl	80005b0 <__aeabi_dmul>
 80067a0:	460b      	mov	r3, r1
 80067a2:	4303      	orrs	r3, r0
 80067a4:	bf08      	it	eq
 80067a6:	2322      	moveq	r3, #34	; 0x22
 80067a8:	4680      	mov	r8, r0
 80067aa:	4689      	mov	r9, r1
 80067ac:	bf08      	it	eq
 80067ae:	f8ca 3000 	streq.w	r3, [sl]
 80067b2:	e62f      	b.n	8006414 <_strtod_l+0x494>
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	ea03 0808 	and.w	r8, r3, r8
 80067c0:	e6e0      	b.n	8006584 <_strtod_l+0x604>
 80067c2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80067c6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80067ca:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80067ce:	35e2      	adds	r5, #226	; 0xe2
 80067d0:	fa07 f505 	lsl.w	r5, r7, r5
 80067d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80067d6:	e747      	b.n	8006668 <_strtod_l+0x6e8>
 80067d8:	2301      	movs	r3, #1
 80067da:	2500      	movs	r5, #0
 80067dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067de:	e743      	b.n	8006668 <_strtod_l+0x6e8>
 80067e0:	463a      	mov	r2, r7
 80067e2:	4650      	mov	r0, sl
 80067e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067e6:	f001 fead 	bl	8008544 <__lshift>
 80067ea:	901a      	str	r0, [sp, #104]	; 0x68
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f47f af69 	bne.w	80066c4 <_strtod_l+0x744>
 80067f2:	e604      	b.n	80063fe <_strtod_l+0x47e>
 80067f4:	0800a888 	.word	0x0800a888
 80067f8:	fffffc02 	.word	0xfffffc02
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	39500000 	.word	0x39500000
 8006804:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006808:	d165      	bne.n	80068d6 <_strtod_l+0x956>
 800680a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800680c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006810:	b35a      	cbz	r2, 800686a <_strtod_l+0x8ea>
 8006812:	4a99      	ldr	r2, [pc, #612]	; (8006a78 <_strtod_l+0xaf8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d12b      	bne.n	8006870 <_strtod_l+0x8f0>
 8006818:	9b05      	ldr	r3, [sp, #20]
 800681a:	4641      	mov	r1, r8
 800681c:	b303      	cbz	r3, 8006860 <_strtod_l+0x8e0>
 800681e:	464a      	mov	r2, r9
 8006820:	4b96      	ldr	r3, [pc, #600]	; (8006a7c <_strtod_l+0xafc>)
 8006822:	4013      	ands	r3, r2
 8006824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	d81b      	bhi.n	8006866 <_strtod_l+0x8e6>
 800682e:	0d1b      	lsrs	r3, r3, #20
 8006830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	4299      	cmp	r1, r3
 800683a:	d119      	bne.n	8006870 <_strtod_l+0x8f0>
 800683c:	4b90      	ldr	r3, [pc, #576]	; (8006a80 <_strtod_l+0xb00>)
 800683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006840:	429a      	cmp	r2, r3
 8006842:	d102      	bne.n	800684a <_strtod_l+0x8ca>
 8006844:	3101      	adds	r1, #1
 8006846:	f43f adda 	beq.w	80063fe <_strtod_l+0x47e>
 800684a:	f04f 0800 	mov.w	r8, #0
 800684e:	4b8b      	ldr	r3, [pc, #556]	; (8006a7c <_strtod_l+0xafc>)
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	401a      	ands	r2, r3
 8006854:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006858:	9b05      	ldr	r3, [sp, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d19a      	bne.n	8006794 <_strtod_l+0x814>
 800685e:	e5d9      	b.n	8006414 <_strtod_l+0x494>
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	e7e8      	b.n	8006838 <_strtod_l+0x8b8>
 8006866:	4613      	mov	r3, r2
 8006868:	e7e6      	b.n	8006838 <_strtod_l+0x8b8>
 800686a:	ea53 0308 	orrs.w	r3, r3, r8
 800686e:	d081      	beq.n	8006774 <_strtod_l+0x7f4>
 8006870:	b1e5      	cbz	r5, 80068ac <_strtod_l+0x92c>
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	421d      	tst	r5, r3
 8006876:	d0ef      	beq.n	8006858 <_strtod_l+0x8d8>
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	9a05      	ldr	r2, [sp, #20]
 8006880:	b1c3      	cbz	r3, 80068b4 <_strtod_l+0x934>
 8006882:	f7ff fb59 	bl	8005f38 <sulp>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800688e:	f7f9 fcd9 	bl	8000244 <__adddf3>
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	e7df      	b.n	8006858 <_strtod_l+0x8d8>
 8006898:	4013      	ands	r3, r2
 800689a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800689e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80068a2:	f04f 38ff 	mov.w	r8, #4294967295
 80068a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80068aa:	e7d5      	b.n	8006858 <_strtod_l+0x8d8>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ae:	ea13 0f08 	tst.w	r3, r8
 80068b2:	e7e0      	b.n	8006876 <_strtod_l+0x8f6>
 80068b4:	f7ff fb40 	bl	8005f38 <sulp>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068c0:	f7f9 fcbe 	bl	8000240 <__aeabi_dsub>
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	f7fa f8d8 	bl	8000a80 <__aeabi_dcmpeq>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0c1      	beq.n	8006858 <_strtod_l+0x8d8>
 80068d4:	e608      	b.n	80064e8 <_strtod_l+0x568>
 80068d6:	4658      	mov	r0, fp
 80068d8:	9904      	ldr	r1, [sp, #16]
 80068da:	f002 f821 	bl	8008920 <__ratio>
 80068de:	2200      	movs	r2, #0
 80068e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068e4:	4606      	mov	r6, r0
 80068e6:	460f      	mov	r7, r1
 80068e8:	f7fa f8de 	bl	8000aa8 <__aeabi_dcmple>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d070      	beq.n	80069d2 <_strtod_l+0xa52>
 80068f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d042      	beq.n	800697c <_strtod_l+0x9fc>
 80068f6:	2600      	movs	r6, #0
 80068f8:	4f62      	ldr	r7, [pc, #392]	; (8006a84 <_strtod_l+0xb04>)
 80068fa:	4d62      	ldr	r5, [pc, #392]	; (8006a84 <_strtod_l+0xb04>)
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006902:	0d1b      	lsrs	r3, r3, #20
 8006904:	051b      	lsls	r3, r3, #20
 8006906:	930f      	str	r3, [sp, #60]	; 0x3c
 8006908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800690a:	4b5f      	ldr	r3, [pc, #380]	; (8006a88 <_strtod_l+0xb08>)
 800690c:	429a      	cmp	r2, r3
 800690e:	f040 80c3 	bne.w	8006a98 <_strtod_l+0xb18>
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	4640      	mov	r0, r8
 8006916:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800691a:	4649      	mov	r1, r9
 800691c:	f001 ff2a 	bl	8008774 <__ulp>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fe42 	bl	80005b0 <__aeabi_dmul>
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	f7f9 fc88 	bl	8000244 <__adddf3>
 8006934:	460b      	mov	r3, r1
 8006936:	4951      	ldr	r1, [pc, #324]	; (8006a7c <_strtod_l+0xafc>)
 8006938:	4a54      	ldr	r2, [pc, #336]	; (8006a8c <_strtod_l+0xb0c>)
 800693a:	4019      	ands	r1, r3
 800693c:	4291      	cmp	r1, r2
 800693e:	4680      	mov	r8, r0
 8006940:	d95d      	bls.n	80069fe <_strtod_l+0xa7e>
 8006942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006944:	4b4e      	ldr	r3, [pc, #312]	; (8006a80 <_strtod_l+0xb00>)
 8006946:	429a      	cmp	r2, r3
 8006948:	d103      	bne.n	8006952 <_strtod_l+0x9d2>
 800694a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800694c:	3301      	adds	r3, #1
 800694e:	f43f ad56 	beq.w	80063fe <_strtod_l+0x47e>
 8006952:	f04f 38ff 	mov.w	r8, #4294967295
 8006956:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006a80 <_strtod_l+0xb00>
 800695a:	4650      	mov	r0, sl
 800695c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800695e:	f001 fbd9 	bl	8008114 <_Bfree>
 8006962:	4650      	mov	r0, sl
 8006964:	9906      	ldr	r1, [sp, #24]
 8006966:	f001 fbd5 	bl	8008114 <_Bfree>
 800696a:	4650      	mov	r0, sl
 800696c:	9904      	ldr	r1, [sp, #16]
 800696e:	f001 fbd1 	bl	8008114 <_Bfree>
 8006972:	4659      	mov	r1, fp
 8006974:	4650      	mov	r0, sl
 8006976:	f001 fbcd 	bl	8008114 <_Bfree>
 800697a:	e627      	b.n	80065cc <_strtod_l+0x64c>
 800697c:	f1b8 0f00 	cmp.w	r8, #0
 8006980:	d119      	bne.n	80069b6 <_strtod_l+0xa36>
 8006982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006988:	b9e3      	cbnz	r3, 80069c4 <_strtod_l+0xa44>
 800698a:	2200      	movs	r2, #0
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	4b3c      	ldr	r3, [pc, #240]	; (8006a84 <_strtod_l+0xb04>)
 8006992:	f7fa f87f 	bl	8000a94 <__aeabi_dcmplt>
 8006996:	b9c8      	cbnz	r0, 80069cc <_strtod_l+0xa4c>
 8006998:	2200      	movs	r2, #0
 800699a:	4630      	mov	r0, r6
 800699c:	4639      	mov	r1, r7
 800699e:	4b3c      	ldr	r3, [pc, #240]	; (8006a90 <_strtod_l+0xb10>)
 80069a0:	f7f9 fe06 	bl	80005b0 <__aeabi_dmul>
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069ac:	9416      	str	r4, [sp, #88]	; 0x58
 80069ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80069b0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80069b4:	e7a2      	b.n	80068fc <_strtod_l+0x97c>
 80069b6:	f1b8 0f01 	cmp.w	r8, #1
 80069ba:	d103      	bne.n	80069c4 <_strtod_l+0xa44>
 80069bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f43f ad92 	beq.w	80064e8 <_strtod_l+0x568>
 80069c4:	2600      	movs	r6, #0
 80069c6:	2400      	movs	r4, #0
 80069c8:	4f32      	ldr	r7, [pc, #200]	; (8006a94 <_strtod_l+0xb14>)
 80069ca:	e796      	b.n	80068fa <_strtod_l+0x97a>
 80069cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80069ce:	4d30      	ldr	r5, [pc, #192]	; (8006a90 <_strtod_l+0xb10>)
 80069d0:	e7ea      	b.n	80069a8 <_strtod_l+0xa28>
 80069d2:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <_strtod_l+0xb10>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7f9 fde9 	bl	80005b0 <__aeabi_dmul>
 80069de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e0:	4604      	mov	r4, r0
 80069e2:	460d      	mov	r5, r1
 80069e4:	b933      	cbnz	r3, 80069f4 <_strtod_l+0xa74>
 80069e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ea:	9010      	str	r0, [sp, #64]	; 0x40
 80069ec:	9311      	str	r3, [sp, #68]	; 0x44
 80069ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069f2:	e783      	b.n	80068fc <_strtod_l+0x97c>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80069fc:	e7f7      	b.n	80069ee <_strtod_l+0xa6e>
 80069fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006a02:	9b05      	ldr	r3, [sp, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1a8      	bne.n	800695a <_strtod_l+0x9da>
 8006a08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a0e:	0d1b      	lsrs	r3, r3, #20
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d1a1      	bne.n	800695a <_strtod_l+0x9da>
 8006a16:	4620      	mov	r0, r4
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7fa f911 	bl	8000c40 <__aeabi_d2lz>
 8006a1e:	f7f9 fd99 	bl	8000554 <__aeabi_l2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7f9 fc09 	bl	8000240 <__aeabi_dsub>
 8006a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a34:	ea43 0308 	orr.w	r3, r3, r8
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	d066      	beq.n	8006b0e <_strtod_l+0xb8e>
 8006a40:	a309      	add	r3, pc, #36	; (adr r3, 8006a68 <_strtod_l+0xae8>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7fa f825 	bl	8000a94 <__aeabi_dcmplt>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	f47f ace2 	bne.w	8006414 <_strtod_l+0x494>
 8006a50:	a307      	add	r3, pc, #28	; (adr r3, 8006a70 <_strtod_l+0xaf0>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7fa f839 	bl	8000ad0 <__aeabi_dcmpgt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f43f af7b 	beq.w	800695a <_strtod_l+0x9da>
 8006a64:	e4d6      	b.n	8006414 <_strtod_l+0x494>
 8006a66:	bf00      	nop
 8006a68:	94a03595 	.word	0x94a03595
 8006a6c:	3fdfffff 	.word	0x3fdfffff
 8006a70:	35afe535 	.word	0x35afe535
 8006a74:	3fe00000 	.word	0x3fe00000
 8006a78:	000fffff 	.word	0x000fffff
 8006a7c:	7ff00000 	.word	0x7ff00000
 8006a80:	7fefffff 	.word	0x7fefffff
 8006a84:	3ff00000 	.word	0x3ff00000
 8006a88:	7fe00000 	.word	0x7fe00000
 8006a8c:	7c9fffff 	.word	0x7c9fffff
 8006a90:	3fe00000 	.word	0x3fe00000
 8006a94:	bff00000 	.word	0xbff00000
 8006a98:	9b05      	ldr	r3, [sp, #20]
 8006a9a:	b313      	cbz	r3, 8006ae2 <_strtod_l+0xb62>
 8006a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006aa2:	d81e      	bhi.n	8006ae2 <_strtod_l+0xb62>
 8006aa4:	a326      	add	r3, pc, #152	; (adr r3, 8006b40 <_strtod_l+0xbc0>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 fffb 	bl	8000aa8 <__aeabi_dcmple>
 8006ab2:	b190      	cbz	r0, 8006ada <_strtod_l+0xb5a>
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7fa f852 	bl	8000b60 <__aeabi_d2uiz>
 8006abc:	2801      	cmp	r0, #1
 8006abe:	bf38      	it	cc
 8006ac0:	2001      	movcc	r0, #1
 8006ac2:	f7f9 fcfb 	bl	80004bc <__aeabi_ui2d>
 8006ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac8:	4604      	mov	r4, r0
 8006aca:	460d      	mov	r5, r1
 8006acc:	b9d3      	cbnz	r3, 8006b04 <_strtod_l+0xb84>
 8006ace:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ad2:	9012      	str	r0, [sp, #72]	; 0x48
 8006ad4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ad6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006adc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006ae0:	1a9f      	subs	r7, r3, r2
 8006ae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ae6:	f001 fe45 	bl	8008774 <__ulp>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fd5d 	bl	80005b0 <__aeabi_dmul>
 8006af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006afa:	f7f9 fba3 	bl	8000244 <__adddf3>
 8006afe:	4680      	mov	r8, r0
 8006b00:	4689      	mov	r9, r1
 8006b02:	e77e      	b.n	8006a02 <_strtod_l+0xa82>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006b0c:	e7e3      	b.n	8006ad6 <_strtod_l+0xb56>
 8006b0e:	a30e      	add	r3, pc, #56	; (adr r3, 8006b48 <_strtod_l+0xbc8>)
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f7f9 ffbe 	bl	8000a94 <__aeabi_dcmplt>
 8006b18:	e7a1      	b.n	8006a5e <_strtod_l+0xade>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	f7ff ba71 	b.w	800600a <_strtod_l+0x8a>
 8006b28:	2a65      	cmp	r2, #101	; 0x65
 8006b2a:	f43f ab63 	beq.w	80061f4 <_strtod_l+0x274>
 8006b2e:	2a45      	cmp	r2, #69	; 0x45
 8006b30:	f43f ab60 	beq.w	80061f4 <_strtod_l+0x274>
 8006b34:	2301      	movs	r3, #1
 8006b36:	f7ff bb95 	b.w	8006264 <_strtod_l+0x2e4>
 8006b3a:	bf00      	nop
 8006b3c:	f3af 8000 	nop.w
 8006b40:	ffc00000 	.word	0xffc00000
 8006b44:	41dfffff 	.word	0x41dfffff
 8006b48:	94a03595 	.word	0x94a03595
 8006b4c:	3fcfffff 	.word	0x3fcfffff

08006b50 <_strtod_r>:
 8006b50:	4b01      	ldr	r3, [pc, #4]	; (8006b58 <_strtod_r+0x8>)
 8006b52:	f7ff ba15 	b.w	8005f80 <_strtod_l>
 8006b56:	bf00      	nop
 8006b58:	200000a8 	.word	0x200000a8

08006b5c <_strtol_l.constprop.0>:
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b62:	4680      	mov	r8, r0
 8006b64:	d001      	beq.n	8006b6a <_strtol_l.constprop.0+0xe>
 8006b66:	2b24      	cmp	r3, #36	; 0x24
 8006b68:	d906      	bls.n	8006b78 <_strtol_l.constprop.0+0x1c>
 8006b6a:	f7fe fa0b 	bl	8004f84 <__errno>
 8006b6e:	2316      	movs	r3, #22
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	2000      	movs	r0, #0
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4f35      	ldr	r7, [pc, #212]	; (8006c50 <_strtol_l.constprop.0+0xf4>)
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b82:	5de6      	ldrb	r6, [r4, r7]
 8006b84:	f016 0608 	ands.w	r6, r6, #8
 8006b88:	d1f8      	bne.n	8006b7c <_strtol_l.constprop.0+0x20>
 8006b8a:	2c2d      	cmp	r4, #45	; 0x2d
 8006b8c:	d12f      	bne.n	8006bee <_strtol_l.constprop.0+0x92>
 8006b8e:	2601      	movs	r6, #1
 8006b90:	782c      	ldrb	r4, [r5, #0]
 8006b92:	1c85      	adds	r5, r0, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d057      	beq.n	8006c48 <_strtol_l.constprop.0+0xec>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d109      	bne.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006b9c:	2c30      	cmp	r4, #48	; 0x30
 8006b9e:	d107      	bne.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006ba0:	7828      	ldrb	r0, [r5, #0]
 8006ba2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ba6:	2858      	cmp	r0, #88	; 0x58
 8006ba8:	d149      	bne.n	8006c3e <_strtol_l.constprop.0+0xe2>
 8006baa:	2310      	movs	r3, #16
 8006bac:	786c      	ldrb	r4, [r5, #1]
 8006bae:	3502      	adds	r5, #2
 8006bb0:	2700      	movs	r7, #0
 8006bb2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006bb6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006bba:	fbbe f9f3 	udiv	r9, lr, r3
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	fb03 ea19 	mls	sl, r3, r9, lr
 8006bc4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006bc8:	f1bc 0f09 	cmp.w	ip, #9
 8006bcc:	d814      	bhi.n	8006bf8 <_strtol_l.constprop.0+0x9c>
 8006bce:	4664      	mov	r4, ip
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	dd22      	ble.n	8006c1a <_strtol_l.constprop.0+0xbe>
 8006bd4:	2f00      	cmp	r7, #0
 8006bd6:	db1d      	blt.n	8006c14 <_strtol_l.constprop.0+0xb8>
 8006bd8:	4581      	cmp	r9, r0
 8006bda:	d31b      	bcc.n	8006c14 <_strtol_l.constprop.0+0xb8>
 8006bdc:	d101      	bne.n	8006be2 <_strtol_l.constprop.0+0x86>
 8006bde:	45a2      	cmp	sl, r4
 8006be0:	db18      	blt.n	8006c14 <_strtol_l.constprop.0+0xb8>
 8006be2:	2701      	movs	r7, #1
 8006be4:	fb00 4003 	mla	r0, r0, r3, r4
 8006be8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bec:	e7ea      	b.n	8006bc4 <_strtol_l.constprop.0+0x68>
 8006bee:	2c2b      	cmp	r4, #43	; 0x2b
 8006bf0:	bf04      	itt	eq
 8006bf2:	782c      	ldrbeq	r4, [r5, #0]
 8006bf4:	1c85      	addeq	r5, r0, #2
 8006bf6:	e7cd      	b.n	8006b94 <_strtol_l.constprop.0+0x38>
 8006bf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006bfc:	f1bc 0f19 	cmp.w	ip, #25
 8006c00:	d801      	bhi.n	8006c06 <_strtol_l.constprop.0+0xaa>
 8006c02:	3c37      	subs	r4, #55	; 0x37
 8006c04:	e7e4      	b.n	8006bd0 <_strtol_l.constprop.0+0x74>
 8006c06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c0a:	f1bc 0f19 	cmp.w	ip, #25
 8006c0e:	d804      	bhi.n	8006c1a <_strtol_l.constprop.0+0xbe>
 8006c10:	3c57      	subs	r4, #87	; 0x57
 8006c12:	e7dd      	b.n	8006bd0 <_strtol_l.constprop.0+0x74>
 8006c14:	f04f 37ff 	mov.w	r7, #4294967295
 8006c18:	e7e6      	b.n	8006be8 <_strtol_l.constprop.0+0x8c>
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	da07      	bge.n	8006c2e <_strtol_l.constprop.0+0xd2>
 8006c1e:	2322      	movs	r3, #34	; 0x22
 8006c20:	4670      	mov	r0, lr
 8006c22:	f8c8 3000 	str.w	r3, [r8]
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	d0a4      	beq.n	8006b74 <_strtol_l.constprop.0+0x18>
 8006c2a:	1e69      	subs	r1, r5, #1
 8006c2c:	e005      	b.n	8006c3a <_strtol_l.constprop.0+0xde>
 8006c2e:	b106      	cbz	r6, 8006c32 <_strtol_l.constprop.0+0xd6>
 8006c30:	4240      	negs	r0, r0
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d09e      	beq.n	8006b74 <_strtol_l.constprop.0+0x18>
 8006c36:	2f00      	cmp	r7, #0
 8006c38:	d1f7      	bne.n	8006c2a <_strtol_l.constprop.0+0xce>
 8006c3a:	6011      	str	r1, [r2, #0]
 8006c3c:	e79a      	b.n	8006b74 <_strtol_l.constprop.0+0x18>
 8006c3e:	2430      	movs	r4, #48	; 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1b5      	bne.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006c44:	2308      	movs	r3, #8
 8006c46:	e7b3      	b.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006c48:	2c30      	cmp	r4, #48	; 0x30
 8006c4a:	d0a9      	beq.n	8006ba0 <_strtol_l.constprop.0+0x44>
 8006c4c:	230a      	movs	r3, #10
 8006c4e:	e7af      	b.n	8006bb0 <_strtol_l.constprop.0+0x54>
 8006c50:	0800a8b1 	.word	0x0800a8b1

08006c54 <_strtol_r>:
 8006c54:	f7ff bf82 	b.w	8006b5c <_strtol_l.constprop.0>

08006c58 <quorem>:
 8006c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	6903      	ldr	r3, [r0, #16]
 8006c5e:	690c      	ldr	r4, [r1, #16]
 8006c60:	4607      	mov	r7, r0
 8006c62:	42a3      	cmp	r3, r4
 8006c64:	f2c0 8082 	blt.w	8006d6c <quorem+0x114>
 8006c68:	3c01      	subs	r4, #1
 8006c6a:	f100 0514 	add.w	r5, r0, #20
 8006c6e:	f101 0814 	add.w	r8, r1, #20
 8006c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c80:	3301      	adds	r3, #1
 8006c82:	429a      	cmp	r2, r3
 8006c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c90:	d331      	bcc.n	8006cf6 <quorem+0x9e>
 8006c92:	f04f 0e00 	mov.w	lr, #0
 8006c96:	4640      	mov	r0, r8
 8006c98:	46ac      	mov	ip, r5
 8006c9a:	46f2      	mov	sl, lr
 8006c9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ca0:	b293      	uxth	r3, r2
 8006ca2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ca6:	0c12      	lsrs	r2, r2, #16
 8006ca8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	fb06 e202 	mla	r2, r6, r2, lr
 8006cb2:	ebaa 0303 	sub.w	r3, sl, r3
 8006cb6:	f8dc a000 	ldr.w	sl, [ip]
 8006cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cbe:	fa1f fa8a 	uxth.w	sl, sl
 8006cc2:	4453      	add	r3, sl
 8006cc4:	f8dc a000 	ldr.w	sl, [ip]
 8006cc8:	b292      	uxth	r2, r2
 8006cca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cd8:	4581      	cmp	r9, r0
 8006cda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cde:	f84c 3b04 	str.w	r3, [ip], #4
 8006ce2:	d2db      	bcs.n	8006c9c <quorem+0x44>
 8006ce4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ce8:	b92b      	cbnz	r3, 8006cf6 <quorem+0x9e>
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	3b04      	subs	r3, #4
 8006cee:	429d      	cmp	r5, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	d32f      	bcc.n	8006d54 <quorem+0xfc>
 8006cf4:	613c      	str	r4, [r7, #16]
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	f001 fc94 	bl	8008624 <__mcmp>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	db25      	blt.n	8006d4c <quorem+0xf4>
 8006d00:	4628      	mov	r0, r5
 8006d02:	f04f 0c00 	mov.w	ip, #0
 8006d06:	3601      	adds	r6, #1
 8006d08:	f858 1b04 	ldr.w	r1, [r8], #4
 8006d0c:	f8d0 e000 	ldr.w	lr, [r0]
 8006d10:	b28b      	uxth	r3, r1
 8006d12:	ebac 0303 	sub.w	r3, ip, r3
 8006d16:	fa1f f28e 	uxth.w	r2, lr
 8006d1a:	4413      	add	r3, r2
 8006d1c:	0c0a      	lsrs	r2, r1, #16
 8006d1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2c:	45c1      	cmp	r9, r8
 8006d2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d32:	f840 3b04 	str.w	r3, [r0], #4
 8006d36:	d2e7      	bcs.n	8006d08 <quorem+0xb0>
 8006d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d40:	b922      	cbnz	r2, 8006d4c <quorem+0xf4>
 8006d42:	3b04      	subs	r3, #4
 8006d44:	429d      	cmp	r5, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	d30a      	bcc.n	8006d60 <quorem+0x108>
 8006d4a:	613c      	str	r4, [r7, #16]
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	b003      	add	sp, #12
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	3b04      	subs	r3, #4
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d1cb      	bne.n	8006cf4 <quorem+0x9c>
 8006d5c:	3c01      	subs	r4, #1
 8006d5e:	e7c6      	b.n	8006cee <quorem+0x96>
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	3b04      	subs	r3, #4
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	d1f0      	bne.n	8006d4a <quorem+0xf2>
 8006d68:	3c01      	subs	r4, #1
 8006d6a:	e7eb      	b.n	8006d44 <quorem+0xec>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7ee      	b.n	8006d4e <quorem+0xf6>

08006d70 <_dtoa_r>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4616      	mov	r6, r2
 8006d76:	461f      	mov	r7, r3
 8006d78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d7a:	b099      	sub	sp, #100	; 0x64
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d86:	b974      	cbnz	r4, 8006da6 <_dtoa_r+0x36>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7fe f925 	bl	8004fd8 <malloc>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6268      	str	r0, [r5, #36]	; 0x24
 8006d92:	b920      	cbnz	r0, 8006d9e <_dtoa_r+0x2e>
 8006d94:	21ea      	movs	r1, #234	; 0xea
 8006d96:	4ba8      	ldr	r3, [pc, #672]	; (8007038 <_dtoa_r+0x2c8>)
 8006d98:	48a8      	ldr	r0, [pc, #672]	; (800703c <_dtoa_r+0x2cc>)
 8006d9a:	f001 ffcb 	bl	8008d34 <__assert_func>
 8006d9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da2:	6004      	str	r4, [r0, #0]
 8006da4:	60c4      	str	r4, [r0, #12]
 8006da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	b151      	cbz	r1, 8006dc2 <_dtoa_r+0x52>
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	2301      	movs	r3, #1
 8006db0:	4093      	lsls	r3, r2
 8006db2:	604a      	str	r2, [r1, #4]
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	4628      	mov	r0, r5
 8006db8:	f001 f9ac 	bl	8008114 <_Bfree>
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	1e3b      	subs	r3, r7, #0
 8006dc4:	bfaf      	iteee	ge
 8006dc6:	2300      	movge	r3, #0
 8006dc8:	2201      	movlt	r2, #1
 8006dca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dce:	9305      	strlt	r3, [sp, #20]
 8006dd0:	bfa8      	it	ge
 8006dd2:	f8c8 3000 	strge.w	r3, [r8]
 8006dd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006dda:	4b99      	ldr	r3, [pc, #612]	; (8007040 <_dtoa_r+0x2d0>)
 8006ddc:	bfb8      	it	lt
 8006dde:	f8c8 2000 	strlt.w	r2, [r8]
 8006de2:	ea33 0309 	bics.w	r3, r3, r9
 8006de6:	d119      	bne.n	8006e1c <_dtoa_r+0xac>
 8006de8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006df4:	4333      	orrs	r3, r6
 8006df6:	f000 857f 	beq.w	80078f8 <_dtoa_r+0xb88>
 8006dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dfc:	b953      	cbnz	r3, 8006e14 <_dtoa_r+0xa4>
 8006dfe:	4b91      	ldr	r3, [pc, #580]	; (8007044 <_dtoa_r+0x2d4>)
 8006e00:	e022      	b.n	8006e48 <_dtoa_r+0xd8>
 8006e02:	4b91      	ldr	r3, [pc, #580]	; (8007048 <_dtoa_r+0x2d8>)
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	3308      	adds	r3, #8
 8006e08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	9803      	ldr	r0, [sp, #12]
 8006e0e:	b019      	add	sp, #100	; 0x64
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	4b8b      	ldr	r3, [pc, #556]	; (8007044 <_dtoa_r+0x2d4>)
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	3303      	adds	r3, #3
 8006e1a:	e7f5      	b.n	8006e08 <_dtoa_r+0x98>
 8006e1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f7f9 fe28 	bl	8000a80 <__aeabi_dcmpeq>
 8006e30:	4680      	mov	r8, r0
 8006e32:	b158      	cbz	r0, 8006e4c <_dtoa_r+0xdc>
 8006e34:	2301      	movs	r3, #1
 8006e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8558 	beq.w	80078f2 <_dtoa_r+0xb82>
 8006e42:	4882      	ldr	r0, [pc, #520]	; (800704c <_dtoa_r+0x2dc>)
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	1e43      	subs	r3, r0, #1
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	e7df      	b.n	8006e0c <_dtoa_r+0x9c>
 8006e4c:	ab16      	add	r3, sp, #88	; 0x58
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	ab17      	add	r3, sp, #92	; 0x5c
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4628      	mov	r0, r5
 8006e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e5a:	f001 fd05 	bl	8008868 <__d2b>
 8006e5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e62:	4683      	mov	fp, r0
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	d07f      	beq.n	8006f68 <_dtoa_r+0x1f8>
 8006e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e82:	2200      	movs	r2, #0
 8006e84:	4b72      	ldr	r3, [pc, #456]	; (8007050 <_dtoa_r+0x2e0>)
 8006e86:	f7f9 f9db 	bl	8000240 <__aeabi_dsub>
 8006e8a:	a365      	add	r3, pc, #404	; (adr r3, 8007020 <_dtoa_r+0x2b0>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 fb8e 	bl	80005b0 <__aeabi_dmul>
 8006e94:	a364      	add	r3, pc, #400	; (adr r3, 8007028 <_dtoa_r+0x2b8>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 f9d3 	bl	8000244 <__adddf3>
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	f7f9 fb1a 	bl	80004dc <__aeabi_i2d>
 8006ea8:	a361      	add	r3, pc, #388	; (adr r3, 8007030 <_dtoa_r+0x2c0>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fb7f 	bl	80005b0 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 f9c3 	bl	8000244 <__adddf3>
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	f7f9 fe25 	bl	8000b10 <__aeabi_d2iz>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4682      	mov	sl, r0
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 fde0 	bl	8000a94 <__aeabi_dcmplt>
 8006ed4:	b148      	cbz	r0, 8006eea <_dtoa_r+0x17a>
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f7f9 fb00 	bl	80004dc <__aeabi_i2d>
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	f7f9 fdce 	bl	8000a80 <__aeabi_dcmpeq>
 8006ee4:	b908      	cbnz	r0, 8006eea <_dtoa_r+0x17a>
 8006ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eea:	f1ba 0f16 	cmp.w	sl, #22
 8006eee:	d858      	bhi.n	8006fa2 <_dtoa_r+0x232>
 8006ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ef4:	4b57      	ldr	r3, [pc, #348]	; (8007054 <_dtoa_r+0x2e4>)
 8006ef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 fdc9 	bl	8000a94 <__aeabi_dcmplt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d04f      	beq.n	8006fa6 <_dtoa_r+0x236>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f10:	1b1c      	subs	r4, r3, r4
 8006f12:	1e63      	subs	r3, r4, #1
 8006f14:	9309      	str	r3, [sp, #36]	; 0x24
 8006f16:	bf49      	itett	mi
 8006f18:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f1c:	2300      	movpl	r3, #0
 8006f1e:	9306      	strmi	r3, [sp, #24]
 8006f20:	2300      	movmi	r3, #0
 8006f22:	bf54      	ite	pl
 8006f24:	9306      	strpl	r3, [sp, #24]
 8006f26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f28:	f1ba 0f00 	cmp.w	sl, #0
 8006f2c:	db3d      	blt.n	8006faa <_dtoa_r+0x23a>
 8006f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f34:	4453      	add	r3, sl
 8006f36:	9309      	str	r3, [sp, #36]	; 0x24
 8006f38:	2300      	movs	r3, #0
 8006f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f3e:	2b09      	cmp	r3, #9
 8006f40:	f200 808c 	bhi.w	800705c <_dtoa_r+0x2ec>
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	bfc4      	itt	gt
 8006f48:	3b04      	subgt	r3, #4
 8006f4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f4e:	bfc8      	it	gt
 8006f50:	2400      	movgt	r4, #0
 8006f52:	f1a3 0302 	sub.w	r3, r3, #2
 8006f56:	bfd8      	it	le
 8006f58:	2401      	movle	r4, #1
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	f200 808a 	bhi.w	8007074 <_dtoa_r+0x304>
 8006f60:	e8df f003 	tbb	[pc, r3]
 8006f64:	5b4d4f2d 	.word	0x5b4d4f2d
 8006f68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f6c:	441c      	add	r4, r3
 8006f6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	bfc3      	ittte	gt
 8006f76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006f7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f82:	f1c3 0320 	rsble	r3, r3, #32
 8006f86:	bfc6      	itte	gt
 8006f88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f8c:	4318      	orrgt	r0, r3
 8006f8e:	fa06 f003 	lslle.w	r0, r6, r3
 8006f92:	f7f9 fa93 	bl	80004bc <__aeabi_ui2d>
 8006f96:	2301      	movs	r3, #1
 8006f98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006f9c:	3c01      	subs	r4, #1
 8006f9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fa0:	e76f      	b.n	8006e82 <_dtoa_r+0x112>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7b2      	b.n	8006f0c <_dtoa_r+0x19c>
 8006fa6:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fa8:	e7b1      	b.n	8006f0e <_dtoa_r+0x19e>
 8006faa:	9b06      	ldr	r3, [sp, #24]
 8006fac:	eba3 030a 	sub.w	r3, r3, sl
 8006fb0:	9306      	str	r3, [sp, #24]
 8006fb2:	f1ca 0300 	rsb	r3, sl, #0
 8006fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb8:	2300      	movs	r3, #0
 8006fba:	930e      	str	r3, [sp, #56]	; 0x38
 8006fbc:	e7be      	b.n	8006f3c <_dtoa_r+0x1cc>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dc58      	bgt.n	800707a <_dtoa_r+0x30a>
 8006fc8:	f04f 0901 	mov.w	r9, #1
 8006fcc:	464b      	mov	r3, r9
 8006fce:	f8cd 9020 	str.w	r9, [sp, #32]
 8006fd2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006fda:	6042      	str	r2, [r0, #4]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	f102 0614 	add.w	r6, r2, #20
 8006fe2:	429e      	cmp	r6, r3
 8006fe4:	6841      	ldr	r1, [r0, #4]
 8006fe6:	d94e      	bls.n	8007086 <_dtoa_r+0x316>
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f001 f853 	bl	8008094 <_Balloc>
 8006fee:	9003      	str	r0, [sp, #12]
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d14c      	bne.n	800708e <_dtoa_r+0x31e>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ffa:	4b17      	ldr	r3, [pc, #92]	; (8007058 <_dtoa_r+0x2e8>)
 8006ffc:	e6cc      	b.n	8006d98 <_dtoa_r+0x28>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7de      	b.n	8006fc0 <_dtoa_r+0x250>
 8007002:	2300      	movs	r3, #0
 8007004:	930b      	str	r3, [sp, #44]	; 0x2c
 8007006:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007008:	eb0a 0903 	add.w	r9, sl, r3
 800700c:	f109 0301 	add.w	r3, r9, #1
 8007010:	2b01      	cmp	r3, #1
 8007012:	9308      	str	r3, [sp, #32]
 8007014:	bfb8      	it	lt
 8007016:	2301      	movlt	r3, #1
 8007018:	e7dd      	b.n	8006fd6 <_dtoa_r+0x266>
 800701a:	2301      	movs	r3, #1
 800701c:	e7f2      	b.n	8007004 <_dtoa_r+0x294>
 800701e:	bf00      	nop
 8007020:	636f4361 	.word	0x636f4361
 8007024:	3fd287a7 	.word	0x3fd287a7
 8007028:	8b60c8b3 	.word	0x8b60c8b3
 800702c:	3fc68a28 	.word	0x3fc68a28
 8007030:	509f79fb 	.word	0x509f79fb
 8007034:	3fd34413 	.word	0x3fd34413
 8007038:	0800a9be 	.word	0x0800a9be
 800703c:	0800a9d5 	.word	0x0800a9d5
 8007040:	7ff00000 	.word	0x7ff00000
 8007044:	0800a9ba 	.word	0x0800a9ba
 8007048:	0800a9b1 	.word	0x0800a9b1
 800704c:	0800a835 	.word	0x0800a835
 8007050:	3ff80000 	.word	0x3ff80000
 8007054:	0800ab40 	.word	0x0800ab40
 8007058:	0800aa30 	.word	0x0800aa30
 800705c:	2401      	movs	r4, #1
 800705e:	2300      	movs	r3, #0
 8007060:	940b      	str	r4, [sp, #44]	; 0x2c
 8007062:	9322      	str	r3, [sp, #136]	; 0x88
 8007064:	f04f 39ff 	mov.w	r9, #4294967295
 8007068:	2200      	movs	r2, #0
 800706a:	2312      	movs	r3, #18
 800706c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007070:	9223      	str	r2, [sp, #140]	; 0x8c
 8007072:	e7b0      	b.n	8006fd6 <_dtoa_r+0x266>
 8007074:	2301      	movs	r3, #1
 8007076:	930b      	str	r3, [sp, #44]	; 0x2c
 8007078:	e7f4      	b.n	8007064 <_dtoa_r+0x2f4>
 800707a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800707e:	464b      	mov	r3, r9
 8007080:	f8cd 9020 	str.w	r9, [sp, #32]
 8007084:	e7a7      	b.n	8006fd6 <_dtoa_r+0x266>
 8007086:	3101      	adds	r1, #1
 8007088:	6041      	str	r1, [r0, #4]
 800708a:	0052      	lsls	r2, r2, #1
 800708c:	e7a7      	b.n	8006fde <_dtoa_r+0x26e>
 800708e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007090:	9a03      	ldr	r2, [sp, #12]
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	2b0e      	cmp	r3, #14
 8007098:	f200 80a8 	bhi.w	80071ec <_dtoa_r+0x47c>
 800709c:	2c00      	cmp	r4, #0
 800709e:	f000 80a5 	beq.w	80071ec <_dtoa_r+0x47c>
 80070a2:	f1ba 0f00 	cmp.w	sl, #0
 80070a6:	dd34      	ble.n	8007112 <_dtoa_r+0x3a2>
 80070a8:	4a9a      	ldr	r2, [pc, #616]	; (8007314 <_dtoa_r+0x5a4>)
 80070aa:	f00a 030f 	and.w	r3, sl, #15
 80070ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070be:	ea4f 142a 	mov.w	r4, sl, asr #4
 80070c2:	d016      	beq.n	80070f2 <_dtoa_r+0x382>
 80070c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070c8:	4b93      	ldr	r3, [pc, #588]	; (8007318 <_dtoa_r+0x5a8>)
 80070ca:	2703      	movs	r7, #3
 80070cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070d0:	f7f9 fb98 	bl	8000804 <__aeabi_ddiv>
 80070d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070d8:	f004 040f 	and.w	r4, r4, #15
 80070dc:	4e8e      	ldr	r6, [pc, #568]	; (8007318 <_dtoa_r+0x5a8>)
 80070de:	b954      	cbnz	r4, 80070f6 <_dtoa_r+0x386>
 80070e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e8:	f7f9 fb8c 	bl	8000804 <__aeabi_ddiv>
 80070ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f0:	e029      	b.n	8007146 <_dtoa_r+0x3d6>
 80070f2:	2702      	movs	r7, #2
 80070f4:	e7f2      	b.n	80070dc <_dtoa_r+0x36c>
 80070f6:	07e1      	lsls	r1, r4, #31
 80070f8:	d508      	bpl.n	800710c <_dtoa_r+0x39c>
 80070fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007102:	f7f9 fa55 	bl	80005b0 <__aeabi_dmul>
 8007106:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800710a:	3701      	adds	r7, #1
 800710c:	1064      	asrs	r4, r4, #1
 800710e:	3608      	adds	r6, #8
 8007110:	e7e5      	b.n	80070de <_dtoa_r+0x36e>
 8007112:	f000 80a5 	beq.w	8007260 <_dtoa_r+0x4f0>
 8007116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800711a:	f1ca 0400 	rsb	r4, sl, #0
 800711e:	4b7d      	ldr	r3, [pc, #500]	; (8007314 <_dtoa_r+0x5a4>)
 8007120:	f004 020f 	and.w	r2, r4, #15
 8007124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f7f9 fa40 	bl	80005b0 <__aeabi_dmul>
 8007130:	2702      	movs	r7, #2
 8007132:	2300      	movs	r3, #0
 8007134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007138:	4e77      	ldr	r6, [pc, #476]	; (8007318 <_dtoa_r+0x5a8>)
 800713a:	1124      	asrs	r4, r4, #4
 800713c:	2c00      	cmp	r4, #0
 800713e:	f040 8084 	bne.w	800724a <_dtoa_r+0x4da>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1d2      	bne.n	80070ec <_dtoa_r+0x37c>
 8007146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 808b 	beq.w	8007264 <_dtoa_r+0x4f4>
 800714e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007152:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007156:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800715a:	2200      	movs	r2, #0
 800715c:	4b6f      	ldr	r3, [pc, #444]	; (800731c <_dtoa_r+0x5ac>)
 800715e:	f7f9 fc99 	bl	8000a94 <__aeabi_dcmplt>
 8007162:	2800      	cmp	r0, #0
 8007164:	d07e      	beq.n	8007264 <_dtoa_r+0x4f4>
 8007166:	9b08      	ldr	r3, [sp, #32]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d07b      	beq.n	8007264 <_dtoa_r+0x4f4>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	dd38      	ble.n	80071e4 <_dtoa_r+0x474>
 8007172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007176:	2200      	movs	r2, #0
 8007178:	4b69      	ldr	r3, [pc, #420]	; (8007320 <_dtoa_r+0x5b0>)
 800717a:	f7f9 fa19 	bl	80005b0 <__aeabi_dmul>
 800717e:	464c      	mov	r4, r9
 8007180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007184:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007188:	3701      	adds	r7, #1
 800718a:	4638      	mov	r0, r7
 800718c:	f7f9 f9a6 	bl	80004dc <__aeabi_i2d>
 8007190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007194:	f7f9 fa0c 	bl	80005b0 <__aeabi_dmul>
 8007198:	2200      	movs	r2, #0
 800719a:	4b62      	ldr	r3, [pc, #392]	; (8007324 <_dtoa_r+0x5b4>)
 800719c:	f7f9 f852 	bl	8000244 <__adddf3>
 80071a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071a8:	9611      	str	r6, [sp, #68]	; 0x44
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	d15d      	bne.n	800726a <_dtoa_r+0x4fa>
 80071ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b2:	2200      	movs	r2, #0
 80071b4:	4b5c      	ldr	r3, [pc, #368]	; (8007328 <_dtoa_r+0x5b8>)
 80071b6:	f7f9 f843 	bl	8000240 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071c2:	4633      	mov	r3, r6
 80071c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071c6:	f7f9 fc83 	bl	8000ad0 <__aeabi_dcmpgt>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f040 829c 	bne.w	8007708 <_dtoa_r+0x998>
 80071d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071da:	f7f9 fc5b 	bl	8000a94 <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f040 8290 	bne.w	8007704 <_dtoa_r+0x994>
 80071e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80071e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f2c0 8152 	blt.w	8007498 <_dtoa_r+0x728>
 80071f4:	f1ba 0f0e 	cmp.w	sl, #14
 80071f8:	f300 814e 	bgt.w	8007498 <_dtoa_r+0x728>
 80071fc:	4b45      	ldr	r3, [pc, #276]	; (8007314 <_dtoa_r+0x5a4>)
 80071fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007202:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007206:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800720a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800720c:	2b00      	cmp	r3, #0
 800720e:	f280 80db 	bge.w	80073c8 <_dtoa_r+0x658>
 8007212:	9b08      	ldr	r3, [sp, #32]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f300 80d7 	bgt.w	80073c8 <_dtoa_r+0x658>
 800721a:	f040 8272 	bne.w	8007702 <_dtoa_r+0x992>
 800721e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007222:	2200      	movs	r2, #0
 8007224:	4b40      	ldr	r3, [pc, #256]	; (8007328 <_dtoa_r+0x5b8>)
 8007226:	f7f9 f9c3 	bl	80005b0 <__aeabi_dmul>
 800722a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800722e:	f7f9 fc45 	bl	8000abc <__aeabi_dcmpge>
 8007232:	9c08      	ldr	r4, [sp, #32]
 8007234:	4626      	mov	r6, r4
 8007236:	2800      	cmp	r0, #0
 8007238:	f040 8248 	bne.w	80076cc <_dtoa_r+0x95c>
 800723c:	2331      	movs	r3, #49	; 0x31
 800723e:	9f03      	ldr	r7, [sp, #12]
 8007240:	f10a 0a01 	add.w	sl, sl, #1
 8007244:	f807 3b01 	strb.w	r3, [r7], #1
 8007248:	e244      	b.n	80076d4 <_dtoa_r+0x964>
 800724a:	07e2      	lsls	r2, r4, #31
 800724c:	d505      	bpl.n	800725a <_dtoa_r+0x4ea>
 800724e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007252:	f7f9 f9ad 	bl	80005b0 <__aeabi_dmul>
 8007256:	2301      	movs	r3, #1
 8007258:	3701      	adds	r7, #1
 800725a:	1064      	asrs	r4, r4, #1
 800725c:	3608      	adds	r6, #8
 800725e:	e76d      	b.n	800713c <_dtoa_r+0x3cc>
 8007260:	2702      	movs	r7, #2
 8007262:	e770      	b.n	8007146 <_dtoa_r+0x3d6>
 8007264:	46d0      	mov	r8, sl
 8007266:	9c08      	ldr	r4, [sp, #32]
 8007268:	e78f      	b.n	800718a <_dtoa_r+0x41a>
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <_dtoa_r+0x5a4>)
 800726e:	4421      	add	r1, r4
 8007270:	9112      	str	r1, [sp, #72]	; 0x48
 8007272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007278:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800727c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007280:	2900      	cmp	r1, #0
 8007282:	d055      	beq.n	8007330 <_dtoa_r+0x5c0>
 8007284:	2000      	movs	r0, #0
 8007286:	4929      	ldr	r1, [pc, #164]	; (800732c <_dtoa_r+0x5bc>)
 8007288:	f7f9 fabc 	bl	8000804 <__aeabi_ddiv>
 800728c:	463b      	mov	r3, r7
 800728e:	4632      	mov	r2, r6
 8007290:	f7f8 ffd6 	bl	8000240 <__aeabi_dsub>
 8007294:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007298:	9f03      	ldr	r7, [sp, #12]
 800729a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800729e:	f7f9 fc37 	bl	8000b10 <__aeabi_d2iz>
 80072a2:	4604      	mov	r4, r0
 80072a4:	f7f9 f91a 	bl	80004dc <__aeabi_i2d>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b0:	f7f8 ffc6 	bl	8000240 <__aeabi_dsub>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	3430      	adds	r4, #48	; 0x30
 80072ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072c2:	f807 4b01 	strb.w	r4, [r7], #1
 80072c6:	f7f9 fbe5 	bl	8000a94 <__aeabi_dcmplt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d174      	bne.n	80073b8 <_dtoa_r+0x648>
 80072ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d2:	2000      	movs	r0, #0
 80072d4:	4911      	ldr	r1, [pc, #68]	; (800731c <_dtoa_r+0x5ac>)
 80072d6:	f7f8 ffb3 	bl	8000240 <__aeabi_dsub>
 80072da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072de:	f7f9 fbd9 	bl	8000a94 <__aeabi_dcmplt>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	f040 80b7 	bne.w	8007456 <_dtoa_r+0x6e6>
 80072e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ea:	429f      	cmp	r7, r3
 80072ec:	f43f af7a 	beq.w	80071e4 <_dtoa_r+0x474>
 80072f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072f4:	2200      	movs	r2, #0
 80072f6:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <_dtoa_r+0x5b0>)
 80072f8:	f7f9 f95a 	bl	80005b0 <__aeabi_dmul>
 80072fc:	2200      	movs	r2, #0
 80072fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <_dtoa_r+0x5b0>)
 8007308:	f7f9 f952 	bl	80005b0 <__aeabi_dmul>
 800730c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007310:	e7c3      	b.n	800729a <_dtoa_r+0x52a>
 8007312:	bf00      	nop
 8007314:	0800ab40 	.word	0x0800ab40
 8007318:	0800ab18 	.word	0x0800ab18
 800731c:	3ff00000 	.word	0x3ff00000
 8007320:	40240000 	.word	0x40240000
 8007324:	401c0000 	.word	0x401c0000
 8007328:	40140000 	.word	0x40140000
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 f93c 	bl	80005b0 <__aeabi_dmul>
 8007338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800733a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800733e:	9c03      	ldr	r4, [sp, #12]
 8007340:	9314      	str	r3, [sp, #80]	; 0x50
 8007342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007346:	f7f9 fbe3 	bl	8000b10 <__aeabi_d2iz>
 800734a:	9015      	str	r0, [sp, #84]	; 0x54
 800734c:	f7f9 f8c6 	bl	80004dc <__aeabi_i2d>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007358:	f7f8 ff72 	bl	8000240 <__aeabi_dsub>
 800735c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800735e:	4606      	mov	r6, r0
 8007360:	3330      	adds	r3, #48	; 0x30
 8007362:	f804 3b01 	strb.w	r3, [r4], #1
 8007366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007368:	460f      	mov	r7, r1
 800736a:	429c      	cmp	r4, r3
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	d124      	bne.n	80073bc <_dtoa_r+0x64c>
 8007372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007376:	4bb0      	ldr	r3, [pc, #704]	; (8007638 <_dtoa_r+0x8c8>)
 8007378:	f7f8 ff64 	bl	8000244 <__adddf3>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f9 fba4 	bl	8000ad0 <__aeabi_dcmpgt>
 8007388:	2800      	cmp	r0, #0
 800738a:	d163      	bne.n	8007454 <_dtoa_r+0x6e4>
 800738c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007390:	2000      	movs	r0, #0
 8007392:	49a9      	ldr	r1, [pc, #676]	; (8007638 <_dtoa_r+0x8c8>)
 8007394:	f7f8 ff54 	bl	8000240 <__aeabi_dsub>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fb78 	bl	8000a94 <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f43f af1d 	beq.w	80071e4 <_dtoa_r+0x474>
 80073aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073ac:	1e7b      	subs	r3, r7, #1
 80073ae:	9314      	str	r3, [sp, #80]	; 0x50
 80073b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80073b4:	2b30      	cmp	r3, #48	; 0x30
 80073b6:	d0f8      	beq.n	80073aa <_dtoa_r+0x63a>
 80073b8:	46c2      	mov	sl, r8
 80073ba:	e03b      	b.n	8007434 <_dtoa_r+0x6c4>
 80073bc:	4b9f      	ldr	r3, [pc, #636]	; (800763c <_dtoa_r+0x8cc>)
 80073be:	f7f9 f8f7 	bl	80005b0 <__aeabi_dmul>
 80073c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c6:	e7bc      	b.n	8007342 <_dtoa_r+0x5d2>
 80073c8:	9f03      	ldr	r7, [sp, #12]
 80073ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	f7f9 fa15 	bl	8000804 <__aeabi_ddiv>
 80073da:	f7f9 fb99 	bl	8000b10 <__aeabi_d2iz>
 80073de:	4604      	mov	r4, r0
 80073e0:	f7f9 f87c 	bl	80004dc <__aeabi_i2d>
 80073e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e8:	f7f9 f8e2 	bl	80005b0 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 ff24 	bl	8000240 <__aeabi_dsub>
 80073f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80073fc:	f807 6b01 	strb.w	r6, [r7], #1
 8007400:	9e03      	ldr	r6, [sp, #12]
 8007402:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007406:	1bbe      	subs	r6, r7, r6
 8007408:	45b4      	cmp	ip, r6
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	d136      	bne.n	800747e <_dtoa_r+0x70e>
 8007410:	f7f8 ff18 	bl	8000244 <__adddf3>
 8007414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007418:	4680      	mov	r8, r0
 800741a:	4689      	mov	r9, r1
 800741c:	f7f9 fb58 	bl	8000ad0 <__aeabi_dcmpgt>
 8007420:	bb58      	cbnz	r0, 800747a <_dtoa_r+0x70a>
 8007422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f9 fb29 	bl	8000a80 <__aeabi_dcmpeq>
 800742e:	b108      	cbz	r0, 8007434 <_dtoa_r+0x6c4>
 8007430:	07e1      	lsls	r1, r4, #31
 8007432:	d422      	bmi.n	800747a <_dtoa_r+0x70a>
 8007434:	4628      	mov	r0, r5
 8007436:	4659      	mov	r1, fp
 8007438:	f000 fe6c 	bl	8008114 <_Bfree>
 800743c:	2300      	movs	r3, #0
 800743e:	703b      	strb	r3, [r7, #0]
 8007440:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007442:	f10a 0001 	add.w	r0, sl, #1
 8007446:	6018      	str	r0, [r3, #0]
 8007448:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800744a:	2b00      	cmp	r3, #0
 800744c:	f43f acde 	beq.w	8006e0c <_dtoa_r+0x9c>
 8007450:	601f      	str	r7, [r3, #0]
 8007452:	e4db      	b.n	8006e0c <_dtoa_r+0x9c>
 8007454:	4627      	mov	r7, r4
 8007456:	463b      	mov	r3, r7
 8007458:	461f      	mov	r7, r3
 800745a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745e:	2a39      	cmp	r2, #57	; 0x39
 8007460:	d107      	bne.n	8007472 <_dtoa_r+0x702>
 8007462:	9a03      	ldr	r2, [sp, #12]
 8007464:	429a      	cmp	r2, r3
 8007466:	d1f7      	bne.n	8007458 <_dtoa_r+0x6e8>
 8007468:	2230      	movs	r2, #48	; 0x30
 800746a:	9903      	ldr	r1, [sp, #12]
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	700a      	strb	r2, [r1, #0]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	3201      	adds	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e79e      	b.n	80073b8 <_dtoa_r+0x648>
 800747a:	46d0      	mov	r8, sl
 800747c:	e7eb      	b.n	8007456 <_dtoa_r+0x6e6>
 800747e:	2200      	movs	r2, #0
 8007480:	4b6e      	ldr	r3, [pc, #440]	; (800763c <_dtoa_r+0x8cc>)
 8007482:	f7f9 f895 	bl	80005b0 <__aeabi_dmul>
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	4680      	mov	r8, r0
 800748c:	4689      	mov	r9, r1
 800748e:	f7f9 faf7 	bl	8000a80 <__aeabi_dcmpeq>
 8007492:	2800      	cmp	r0, #0
 8007494:	d09b      	beq.n	80073ce <_dtoa_r+0x65e>
 8007496:	e7cd      	b.n	8007434 <_dtoa_r+0x6c4>
 8007498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800749a:	2a00      	cmp	r2, #0
 800749c:	f000 80d0 	beq.w	8007640 <_dtoa_r+0x8d0>
 80074a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074a2:	2a01      	cmp	r2, #1
 80074a4:	f300 80ae 	bgt.w	8007604 <_dtoa_r+0x894>
 80074a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	f000 80a6 	beq.w	80075fc <_dtoa_r+0x88c>
 80074b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074b6:	9f06      	ldr	r7, [sp, #24]
 80074b8:	9a06      	ldr	r2, [sp, #24]
 80074ba:	2101      	movs	r1, #1
 80074bc:	441a      	add	r2, r3
 80074be:	9206      	str	r2, [sp, #24]
 80074c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c2:	4628      	mov	r0, r5
 80074c4:	441a      	add	r2, r3
 80074c6:	9209      	str	r2, [sp, #36]	; 0x24
 80074c8:	f000 ff24 	bl	8008314 <__i2b>
 80074cc:	4606      	mov	r6, r0
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	dd0c      	ble.n	80074ec <_dtoa_r+0x77c>
 80074d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd09      	ble.n	80074ec <_dtoa_r+0x77c>
 80074d8:	42bb      	cmp	r3, r7
 80074da:	bfa8      	it	ge
 80074dc:	463b      	movge	r3, r7
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	1aff      	subs	r7, r7, r3
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	9206      	str	r2, [sp, #24]
 80074e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	9309      	str	r3, [sp, #36]	; 0x24
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	b1f3      	cbz	r3, 800752e <_dtoa_r+0x7be>
 80074f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a8 	beq.w	8007648 <_dtoa_r+0x8d8>
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	dd10      	ble.n	800751e <_dtoa_r+0x7ae>
 80074fc:	4631      	mov	r1, r6
 80074fe:	4622      	mov	r2, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f000 ffc5 	bl	8008490 <__pow5mult>
 8007506:	465a      	mov	r2, fp
 8007508:	4601      	mov	r1, r0
 800750a:	4606      	mov	r6, r0
 800750c:	4628      	mov	r0, r5
 800750e:	f000 ff17 	bl	8008340 <__multiply>
 8007512:	4680      	mov	r8, r0
 8007514:	4659      	mov	r1, fp
 8007516:	4628      	mov	r0, r5
 8007518:	f000 fdfc 	bl	8008114 <_Bfree>
 800751c:	46c3      	mov	fp, r8
 800751e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007520:	1b1a      	subs	r2, r3, r4
 8007522:	d004      	beq.n	800752e <_dtoa_r+0x7be>
 8007524:	4659      	mov	r1, fp
 8007526:	4628      	mov	r0, r5
 8007528:	f000 ffb2 	bl	8008490 <__pow5mult>
 800752c:	4683      	mov	fp, r0
 800752e:	2101      	movs	r1, #1
 8007530:	4628      	mov	r0, r5
 8007532:	f000 feef 	bl	8008314 <__i2b>
 8007536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007538:	4604      	mov	r4, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f340 8086 	ble.w	800764c <_dtoa_r+0x8dc>
 8007540:	461a      	mov	r2, r3
 8007542:	4601      	mov	r1, r0
 8007544:	4628      	mov	r0, r5
 8007546:	f000 ffa3 	bl	8008490 <__pow5mult>
 800754a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754c:	4604      	mov	r4, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	dd7f      	ble.n	8007652 <_dtoa_r+0x8e2>
 8007552:	f04f 0800 	mov.w	r8, #0
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800755c:	6918      	ldr	r0, [r3, #16]
 800755e:	f000 fe8b 	bl	8008278 <__hi0bits>
 8007562:	f1c0 0020 	rsb	r0, r0, #32
 8007566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007568:	4418      	add	r0, r3
 800756a:	f010 001f 	ands.w	r0, r0, #31
 800756e:	f000 8092 	beq.w	8007696 <_dtoa_r+0x926>
 8007572:	f1c0 0320 	rsb	r3, r0, #32
 8007576:	2b04      	cmp	r3, #4
 8007578:	f340 808a 	ble.w	8007690 <_dtoa_r+0x920>
 800757c:	f1c0 001c 	rsb	r0, r0, #28
 8007580:	9b06      	ldr	r3, [sp, #24]
 8007582:	4407      	add	r7, r0
 8007584:	4403      	add	r3, r0
 8007586:	9306      	str	r3, [sp, #24]
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	4403      	add	r3, r0
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	9b06      	ldr	r3, [sp, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	dd05      	ble.n	80075a0 <_dtoa_r+0x830>
 8007594:	4659      	mov	r1, fp
 8007596:	461a      	mov	r2, r3
 8007598:	4628      	mov	r0, r5
 800759a:	f000 ffd3 	bl	8008544 <__lshift>
 800759e:	4683      	mov	fp, r0
 80075a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd05      	ble.n	80075b2 <_dtoa_r+0x842>
 80075a6:	4621      	mov	r1, r4
 80075a8:	461a      	mov	r2, r3
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 ffca 	bl	8008544 <__lshift>
 80075b0:	4604      	mov	r4, r0
 80075b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d070      	beq.n	800769a <_dtoa_r+0x92a>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4658      	mov	r0, fp
 80075bc:	f001 f832 	bl	8008624 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	da6a      	bge.n	800769a <_dtoa_r+0x92a>
 80075c4:	2300      	movs	r3, #0
 80075c6:	4659      	mov	r1, fp
 80075c8:	220a      	movs	r2, #10
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 fdc4 	bl	8008158 <__multadd>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	4683      	mov	fp, r0
 80075d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8194 	beq.w	8007906 <_dtoa_r+0xb96>
 80075de:	4631      	mov	r1, r6
 80075e0:	2300      	movs	r3, #0
 80075e2:	220a      	movs	r2, #10
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 fdb7 	bl	8008158 <__multadd>
 80075ea:	f1b9 0f00 	cmp.w	r9, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	f300 8093 	bgt.w	800771a <_dtoa_r+0x9aa>
 80075f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	dc57      	bgt.n	80076aa <_dtoa_r+0x93a>
 80075fa:	e08e      	b.n	800771a <_dtoa_r+0x9aa>
 80075fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007602:	e757      	b.n	80074b4 <_dtoa_r+0x744>
 8007604:	9b08      	ldr	r3, [sp, #32]
 8007606:	1e5c      	subs	r4, r3, #1
 8007608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760a:	42a3      	cmp	r3, r4
 800760c:	bfb7      	itett	lt
 800760e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007610:	1b1c      	subge	r4, r3, r4
 8007612:	1ae2      	sublt	r2, r4, r3
 8007614:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007616:	bfbe      	ittt	lt
 8007618:	940a      	strlt	r4, [sp, #40]	; 0x28
 800761a:	189b      	addlt	r3, r3, r2
 800761c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800761e:	9b08      	ldr	r3, [sp, #32]
 8007620:	bfb8      	it	lt
 8007622:	2400      	movlt	r4, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	bfbb      	ittet	lt
 8007628:	9b06      	ldrlt	r3, [sp, #24]
 800762a:	9a08      	ldrlt	r2, [sp, #32]
 800762c:	9f06      	ldrge	r7, [sp, #24]
 800762e:	1a9f      	sublt	r7, r3, r2
 8007630:	bfac      	ite	ge
 8007632:	9b08      	ldrge	r3, [sp, #32]
 8007634:	2300      	movlt	r3, #0
 8007636:	e73f      	b.n	80074b8 <_dtoa_r+0x748>
 8007638:	3fe00000 	.word	0x3fe00000
 800763c:	40240000 	.word	0x40240000
 8007640:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007642:	9f06      	ldr	r7, [sp, #24]
 8007644:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007646:	e742      	b.n	80074ce <_dtoa_r+0x75e>
 8007648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800764a:	e76b      	b.n	8007524 <_dtoa_r+0x7b4>
 800764c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800764e:	2b01      	cmp	r3, #1
 8007650:	dc19      	bgt.n	8007686 <_dtoa_r+0x916>
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	b9bb      	cbnz	r3, 8007686 <_dtoa_r+0x916>
 8007656:	9b05      	ldr	r3, [sp, #20]
 8007658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800765c:	b99b      	cbnz	r3, 8007686 <_dtoa_r+0x916>
 800765e:	9b05      	ldr	r3, [sp, #20]
 8007660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007664:	0d1b      	lsrs	r3, r3, #20
 8007666:	051b      	lsls	r3, r3, #20
 8007668:	b183      	cbz	r3, 800768c <_dtoa_r+0x91c>
 800766a:	f04f 0801 	mov.w	r8, #1
 800766e:	9b06      	ldr	r3, [sp, #24]
 8007670:	3301      	adds	r3, #1
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007676:	3301      	adds	r3, #1
 8007678:	9309      	str	r3, [sp, #36]	; 0x24
 800767a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f af6a 	bne.w	8007556 <_dtoa_r+0x7e6>
 8007682:	2001      	movs	r0, #1
 8007684:	e76f      	b.n	8007566 <_dtoa_r+0x7f6>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	e7f6      	b.n	800767a <_dtoa_r+0x90a>
 800768c:	4698      	mov	r8, r3
 800768e:	e7f4      	b.n	800767a <_dtoa_r+0x90a>
 8007690:	f43f af7d 	beq.w	800758e <_dtoa_r+0x81e>
 8007694:	4618      	mov	r0, r3
 8007696:	301c      	adds	r0, #28
 8007698:	e772      	b.n	8007580 <_dtoa_r+0x810>
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dc36      	bgt.n	800770e <_dtoa_r+0x99e>
 80076a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	dd33      	ble.n	800770e <_dtoa_r+0x99e>
 80076a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076aa:	f1b9 0f00 	cmp.w	r9, #0
 80076ae:	d10d      	bne.n	80076cc <_dtoa_r+0x95c>
 80076b0:	4621      	mov	r1, r4
 80076b2:	464b      	mov	r3, r9
 80076b4:	2205      	movs	r2, #5
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 fd4e 	bl	8008158 <__multadd>
 80076bc:	4601      	mov	r1, r0
 80076be:	4604      	mov	r4, r0
 80076c0:	4658      	mov	r0, fp
 80076c2:	f000 ffaf 	bl	8008624 <__mcmp>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f73f adb8 	bgt.w	800723c <_dtoa_r+0x4cc>
 80076cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ce:	9f03      	ldr	r7, [sp, #12]
 80076d0:	ea6f 0a03 	mvn.w	sl, r3
 80076d4:	f04f 0800 	mov.w	r8, #0
 80076d8:	4621      	mov	r1, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 fd1a 	bl	8008114 <_Bfree>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	f43f aea7 	beq.w	8007434 <_dtoa_r+0x6c4>
 80076e6:	f1b8 0f00 	cmp.w	r8, #0
 80076ea:	d005      	beq.n	80076f8 <_dtoa_r+0x988>
 80076ec:	45b0      	cmp	r8, r6
 80076ee:	d003      	beq.n	80076f8 <_dtoa_r+0x988>
 80076f0:	4641      	mov	r1, r8
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 fd0e 	bl	8008114 <_Bfree>
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	f000 fd0a 	bl	8008114 <_Bfree>
 8007700:	e698      	b.n	8007434 <_dtoa_r+0x6c4>
 8007702:	2400      	movs	r4, #0
 8007704:	4626      	mov	r6, r4
 8007706:	e7e1      	b.n	80076cc <_dtoa_r+0x95c>
 8007708:	46c2      	mov	sl, r8
 800770a:	4626      	mov	r6, r4
 800770c:	e596      	b.n	800723c <_dtoa_r+0x4cc>
 800770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80fd 	beq.w	8007914 <_dtoa_r+0xba4>
 800771a:	2f00      	cmp	r7, #0
 800771c:	dd05      	ble.n	800772a <_dtoa_r+0x9ba>
 800771e:	4631      	mov	r1, r6
 8007720:	463a      	mov	r2, r7
 8007722:	4628      	mov	r0, r5
 8007724:	f000 ff0e 	bl	8008544 <__lshift>
 8007728:	4606      	mov	r6, r0
 800772a:	f1b8 0f00 	cmp.w	r8, #0
 800772e:	d05c      	beq.n	80077ea <_dtoa_r+0xa7a>
 8007730:	4628      	mov	r0, r5
 8007732:	6871      	ldr	r1, [r6, #4]
 8007734:	f000 fcae 	bl	8008094 <_Balloc>
 8007738:	4607      	mov	r7, r0
 800773a:	b928      	cbnz	r0, 8007748 <_dtoa_r+0x9d8>
 800773c:	4602      	mov	r2, r0
 800773e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007742:	4b7f      	ldr	r3, [pc, #508]	; (8007940 <_dtoa_r+0xbd0>)
 8007744:	f7ff bb28 	b.w	8006d98 <_dtoa_r+0x28>
 8007748:	6932      	ldr	r2, [r6, #16]
 800774a:	f106 010c 	add.w	r1, r6, #12
 800774e:	3202      	adds	r2, #2
 8007750:	0092      	lsls	r2, r2, #2
 8007752:	300c      	adds	r0, #12
 8007754:	f000 fc84 	bl	8008060 <memcpy>
 8007758:	2201      	movs	r2, #1
 800775a:	4639      	mov	r1, r7
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fef1 	bl	8008544 <__lshift>
 8007762:	46b0      	mov	r8, r6
 8007764:	4606      	mov	r6, r0
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	9308      	str	r3, [sp, #32]
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	444b      	add	r3, r9
 8007770:	930a      	str	r3, [sp, #40]	; 0x28
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	9309      	str	r3, [sp, #36]	; 0x24
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	4621      	mov	r1, r4
 800777e:	3b01      	subs	r3, #1
 8007780:	4658      	mov	r0, fp
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	f7ff fa68 	bl	8006c58 <quorem>
 8007788:	4603      	mov	r3, r0
 800778a:	4641      	mov	r1, r8
 800778c:	3330      	adds	r3, #48	; 0x30
 800778e:	9006      	str	r0, [sp, #24]
 8007790:	4658      	mov	r0, fp
 8007792:	930b      	str	r3, [sp, #44]	; 0x2c
 8007794:	f000 ff46 	bl	8008624 <__mcmp>
 8007798:	4632      	mov	r2, r6
 800779a:	4681      	mov	r9, r0
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 ff5c 	bl	800865c <__mdiff>
 80077a4:	68c2      	ldr	r2, [r0, #12]
 80077a6:	4607      	mov	r7, r0
 80077a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077aa:	bb02      	cbnz	r2, 80077ee <_dtoa_r+0xa7e>
 80077ac:	4601      	mov	r1, r0
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 ff38 	bl	8008624 <__mcmp>
 80077b4:	4602      	mov	r2, r0
 80077b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b8:	4639      	mov	r1, r7
 80077ba:	4628      	mov	r0, r5
 80077bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80077c0:	f000 fca8 	bl	8008114 <_Bfree>
 80077c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c8:	9f08      	ldr	r7, [sp, #32]
 80077ca:	ea43 0102 	orr.w	r1, r3, r2
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	430b      	orrs	r3, r1
 80077d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d4:	d10d      	bne.n	80077f2 <_dtoa_r+0xa82>
 80077d6:	2b39      	cmp	r3, #57	; 0x39
 80077d8:	d029      	beq.n	800782e <_dtoa_r+0xabe>
 80077da:	f1b9 0f00 	cmp.w	r9, #0
 80077de:	dd01      	ble.n	80077e4 <_dtoa_r+0xa74>
 80077e0:	9b06      	ldr	r3, [sp, #24]
 80077e2:	3331      	adds	r3, #49	; 0x31
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	7013      	strb	r3, [r2, #0]
 80077e8:	e776      	b.n	80076d8 <_dtoa_r+0x968>
 80077ea:	4630      	mov	r0, r6
 80077ec:	e7b9      	b.n	8007762 <_dtoa_r+0x9f2>
 80077ee:	2201      	movs	r2, #1
 80077f0:	e7e2      	b.n	80077b8 <_dtoa_r+0xa48>
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	db06      	blt.n	8007806 <_dtoa_r+0xa96>
 80077f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80077fa:	ea41 0909 	orr.w	r9, r1, r9
 80077fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007800:	ea59 0101 	orrs.w	r1, r9, r1
 8007804:	d120      	bne.n	8007848 <_dtoa_r+0xad8>
 8007806:	2a00      	cmp	r2, #0
 8007808:	ddec      	ble.n	80077e4 <_dtoa_r+0xa74>
 800780a:	4659      	mov	r1, fp
 800780c:	2201      	movs	r2, #1
 800780e:	4628      	mov	r0, r5
 8007810:	9308      	str	r3, [sp, #32]
 8007812:	f000 fe97 	bl	8008544 <__lshift>
 8007816:	4621      	mov	r1, r4
 8007818:	4683      	mov	fp, r0
 800781a:	f000 ff03 	bl	8008624 <__mcmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	dc02      	bgt.n	800782a <_dtoa_r+0xaba>
 8007824:	d1de      	bne.n	80077e4 <_dtoa_r+0xa74>
 8007826:	07da      	lsls	r2, r3, #31
 8007828:	d5dc      	bpl.n	80077e4 <_dtoa_r+0xa74>
 800782a:	2b39      	cmp	r3, #57	; 0x39
 800782c:	d1d8      	bne.n	80077e0 <_dtoa_r+0xa70>
 800782e:	2339      	movs	r3, #57	; 0x39
 8007830:	9a04      	ldr	r2, [sp, #16]
 8007832:	7013      	strb	r3, [r2, #0]
 8007834:	463b      	mov	r3, r7
 8007836:	461f      	mov	r7, r3
 8007838:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800783c:	3b01      	subs	r3, #1
 800783e:	2a39      	cmp	r2, #57	; 0x39
 8007840:	d050      	beq.n	80078e4 <_dtoa_r+0xb74>
 8007842:	3201      	adds	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e747      	b.n	80076d8 <_dtoa_r+0x968>
 8007848:	2a00      	cmp	r2, #0
 800784a:	dd03      	ble.n	8007854 <_dtoa_r+0xae4>
 800784c:	2b39      	cmp	r3, #57	; 0x39
 800784e:	d0ee      	beq.n	800782e <_dtoa_r+0xabe>
 8007850:	3301      	adds	r3, #1
 8007852:	e7c7      	b.n	80077e4 <_dtoa_r+0xa74>
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007858:	f802 3c01 	strb.w	r3, [r2, #-1]
 800785c:	428a      	cmp	r2, r1
 800785e:	d02a      	beq.n	80078b6 <_dtoa_r+0xb46>
 8007860:	4659      	mov	r1, fp
 8007862:	2300      	movs	r3, #0
 8007864:	220a      	movs	r2, #10
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fc76 	bl	8008158 <__multadd>
 800786c:	45b0      	cmp	r8, r6
 800786e:	4683      	mov	fp, r0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	f04f 020a 	mov.w	r2, #10
 8007878:	4641      	mov	r1, r8
 800787a:	4628      	mov	r0, r5
 800787c:	d107      	bne.n	800788e <_dtoa_r+0xb1e>
 800787e:	f000 fc6b 	bl	8008158 <__multadd>
 8007882:	4680      	mov	r8, r0
 8007884:	4606      	mov	r6, r0
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	3301      	adds	r3, #1
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	e775      	b.n	800777a <_dtoa_r+0xa0a>
 800788e:	f000 fc63 	bl	8008158 <__multadd>
 8007892:	4631      	mov	r1, r6
 8007894:	4680      	mov	r8, r0
 8007896:	2300      	movs	r3, #0
 8007898:	220a      	movs	r2, #10
 800789a:	4628      	mov	r0, r5
 800789c:	f000 fc5c 	bl	8008158 <__multadd>
 80078a0:	4606      	mov	r6, r0
 80078a2:	e7f0      	b.n	8007886 <_dtoa_r+0xb16>
 80078a4:	f1b9 0f00 	cmp.w	r9, #0
 80078a8:	bfcc      	ite	gt
 80078aa:	464f      	movgt	r7, r9
 80078ac:	2701      	movle	r7, #1
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	9a03      	ldr	r2, [sp, #12]
 80078b4:	4417      	add	r7, r2
 80078b6:	4659      	mov	r1, fp
 80078b8:	2201      	movs	r2, #1
 80078ba:	4628      	mov	r0, r5
 80078bc:	9308      	str	r3, [sp, #32]
 80078be:	f000 fe41 	bl	8008544 <__lshift>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4683      	mov	fp, r0
 80078c6:	f000 fead 	bl	8008624 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	dcb2      	bgt.n	8007834 <_dtoa_r+0xac4>
 80078ce:	d102      	bne.n	80078d6 <_dtoa_r+0xb66>
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d4ae      	bmi.n	8007834 <_dtoa_r+0xac4>
 80078d6:	463b      	mov	r3, r7
 80078d8:	461f      	mov	r7, r3
 80078da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078de:	2a30      	cmp	r2, #48	; 0x30
 80078e0:	d0fa      	beq.n	80078d8 <_dtoa_r+0xb68>
 80078e2:	e6f9      	b.n	80076d8 <_dtoa_r+0x968>
 80078e4:	9a03      	ldr	r2, [sp, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d1a5      	bne.n	8007836 <_dtoa_r+0xac6>
 80078ea:	2331      	movs	r3, #49	; 0x31
 80078ec:	f10a 0a01 	add.w	sl, sl, #1
 80078f0:	e779      	b.n	80077e6 <_dtoa_r+0xa76>
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <_dtoa_r+0xbd4>)
 80078f4:	f7ff baa8 	b.w	8006e48 <_dtoa_r+0xd8>
 80078f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f aa81 	bne.w	8006e02 <_dtoa_r+0x92>
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <_dtoa_r+0xbd8>)
 8007902:	f7ff baa1 	b.w	8006e48 <_dtoa_r+0xd8>
 8007906:	f1b9 0f00 	cmp.w	r9, #0
 800790a:	dc03      	bgt.n	8007914 <_dtoa_r+0xba4>
 800790c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790e:	2b02      	cmp	r3, #2
 8007910:	f73f aecb 	bgt.w	80076aa <_dtoa_r+0x93a>
 8007914:	9f03      	ldr	r7, [sp, #12]
 8007916:	4621      	mov	r1, r4
 8007918:	4658      	mov	r0, fp
 800791a:	f7ff f99d 	bl	8006c58 <quorem>
 800791e:	9a03      	ldr	r2, [sp, #12]
 8007920:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007924:	f807 3b01 	strb.w	r3, [r7], #1
 8007928:	1aba      	subs	r2, r7, r2
 800792a:	4591      	cmp	r9, r2
 800792c:	ddba      	ble.n	80078a4 <_dtoa_r+0xb34>
 800792e:	4659      	mov	r1, fp
 8007930:	2300      	movs	r3, #0
 8007932:	220a      	movs	r2, #10
 8007934:	4628      	mov	r0, r5
 8007936:	f000 fc0f 	bl	8008158 <__multadd>
 800793a:	4683      	mov	fp, r0
 800793c:	e7eb      	b.n	8007916 <_dtoa_r+0xba6>
 800793e:	bf00      	nop
 8007940:	0800aa30 	.word	0x0800aa30
 8007944:	0800a834 	.word	0x0800a834
 8007948:	0800a9b1 	.word	0x0800a9b1

0800794c <rshift>:
 800794c:	6903      	ldr	r3, [r0, #16]
 800794e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007952:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007956:	f100 0414 	add.w	r4, r0, #20
 800795a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800795e:	dd46      	ble.n	80079ee <rshift+0xa2>
 8007960:	f011 011f 	ands.w	r1, r1, #31
 8007964:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007968:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800796c:	d10c      	bne.n	8007988 <rshift+0x3c>
 800796e:	4629      	mov	r1, r5
 8007970:	f100 0710 	add.w	r7, r0, #16
 8007974:	42b1      	cmp	r1, r6
 8007976:	d335      	bcc.n	80079e4 <rshift+0x98>
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	1eea      	subs	r2, r5, #3
 800797e:	4296      	cmp	r6, r2
 8007980:	bf38      	it	cc
 8007982:	2300      	movcc	r3, #0
 8007984:	4423      	add	r3, r4
 8007986:	e015      	b.n	80079b4 <rshift+0x68>
 8007988:	46a1      	mov	r9, r4
 800798a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800798e:	f1c1 0820 	rsb	r8, r1, #32
 8007992:	40cf      	lsrs	r7, r1
 8007994:	f105 0e04 	add.w	lr, r5, #4
 8007998:	4576      	cmp	r6, lr
 800799a:	46f4      	mov	ip, lr
 800799c:	d816      	bhi.n	80079cc <rshift+0x80>
 800799e:	1a9a      	subs	r2, r3, r2
 80079a0:	0092      	lsls	r2, r2, #2
 80079a2:	3a04      	subs	r2, #4
 80079a4:	3501      	adds	r5, #1
 80079a6:	42ae      	cmp	r6, r5
 80079a8:	bf38      	it	cc
 80079aa:	2200      	movcc	r2, #0
 80079ac:	18a3      	adds	r3, r4, r2
 80079ae:	50a7      	str	r7, [r4, r2]
 80079b0:	b107      	cbz	r7, 80079b4 <rshift+0x68>
 80079b2:	3304      	adds	r3, #4
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	eba3 0204 	sub.w	r2, r3, r4
 80079ba:	bf08      	it	eq
 80079bc:	2300      	moveq	r3, #0
 80079be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079c2:	6102      	str	r2, [r0, #16]
 80079c4:	bf08      	it	eq
 80079c6:	6143      	streq	r3, [r0, #20]
 80079c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079cc:	f8dc c000 	ldr.w	ip, [ip]
 80079d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80079d4:	ea4c 0707 	orr.w	r7, ip, r7
 80079d8:	f849 7b04 	str.w	r7, [r9], #4
 80079dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079e0:	40cf      	lsrs	r7, r1
 80079e2:	e7d9      	b.n	8007998 <rshift+0x4c>
 80079e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80079e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ec:	e7c2      	b.n	8007974 <rshift+0x28>
 80079ee:	4623      	mov	r3, r4
 80079f0:	e7e0      	b.n	80079b4 <rshift+0x68>

080079f2 <__hexdig_fun>:
 80079f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d802      	bhi.n	8007a00 <__hexdig_fun+0xe>
 80079fa:	3820      	subs	r0, #32
 80079fc:	b2c0      	uxtb	r0, r0
 80079fe:	4770      	bx	lr
 8007a00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a04:	2b05      	cmp	r3, #5
 8007a06:	d801      	bhi.n	8007a0c <__hexdig_fun+0x1a>
 8007a08:	3847      	subs	r0, #71	; 0x47
 8007a0a:	e7f7      	b.n	80079fc <__hexdig_fun+0xa>
 8007a0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a10:	2b05      	cmp	r3, #5
 8007a12:	d801      	bhi.n	8007a18 <__hexdig_fun+0x26>
 8007a14:	3827      	subs	r0, #39	; 0x27
 8007a16:	e7f1      	b.n	80079fc <__hexdig_fun+0xa>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	4770      	bx	lr

08007a1c <__gethex>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	b08b      	sub	sp, #44	; 0x2c
 8007a22:	9305      	str	r3, [sp, #20]
 8007a24:	4bb2      	ldr	r3, [pc, #712]	; (8007cf0 <__gethex+0x2d4>)
 8007a26:	9002      	str	r0, [sp, #8]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	4690      	mov	r8, r2
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	f7f8 fbf9 	bl	8000228 <strlen>
 8007a36:	4682      	mov	sl, r0
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	f8db 2000 	ldr.w	r2, [fp]
 8007a3e:	4403      	add	r3, r0
 8007a40:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	1c93      	adds	r3, r2, #2
 8007a48:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a4c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a50:	32fe      	adds	r2, #254	; 0xfe
 8007a52:	18d1      	adds	r1, r2, r3
 8007a54:	461f      	mov	r7, r3
 8007a56:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a5a:	9101      	str	r1, [sp, #4]
 8007a5c:	2830      	cmp	r0, #48	; 0x30
 8007a5e:	d0f8      	beq.n	8007a52 <__gethex+0x36>
 8007a60:	f7ff ffc7 	bl	80079f2 <__hexdig_fun>
 8007a64:	4604      	mov	r4, r0
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d13a      	bne.n	8007ae0 <__gethex+0xc4>
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	9903      	ldr	r1, [sp, #12]
 8007a70:	f001 f93e 	bl	8008cf0 <strncmp>
 8007a74:	4605      	mov	r5, r0
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d166      	bne.n	8007b48 <__gethex+0x12c>
 8007a7a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007a7e:	eb07 060a 	add.w	r6, r7, sl
 8007a82:	f7ff ffb6 	bl	80079f2 <__hexdig_fun>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d060      	beq.n	8007b4c <__gethex+0x130>
 8007a8a:	4633      	mov	r3, r6
 8007a8c:	7818      	ldrb	r0, [r3, #0]
 8007a8e:	461f      	mov	r7, r3
 8007a90:	2830      	cmp	r0, #48	; 0x30
 8007a92:	f103 0301 	add.w	r3, r3, #1
 8007a96:	d0f9      	beq.n	8007a8c <__gethex+0x70>
 8007a98:	f7ff ffab 	bl	80079f2 <__hexdig_fun>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	fab0 f480 	clz	r4, r0
 8007aa2:	4635      	mov	r5, r6
 8007aa4:	0964      	lsrs	r4, r4, #5
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	463a      	mov	r2, r7
 8007aaa:	4616      	mov	r6, r2
 8007aac:	7830      	ldrb	r0, [r6, #0]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	f7ff ff9f 	bl	80079f2 <__hexdig_fun>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d1f8      	bne.n	8007aaa <__gethex+0x8e>
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4630      	mov	r0, r6
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	f001 f917 	bl	8008cf0 <strncmp>
 8007ac2:	b980      	cbnz	r0, 8007ae6 <__gethex+0xca>
 8007ac4:	b94d      	cbnz	r5, 8007ada <__gethex+0xbe>
 8007ac6:	eb06 050a 	add.w	r5, r6, sl
 8007aca:	462a      	mov	r2, r5
 8007acc:	4616      	mov	r6, r2
 8007ace:	7830      	ldrb	r0, [r6, #0]
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	f7ff ff8e 	bl	80079f2 <__hexdig_fun>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d1f8      	bne.n	8007acc <__gethex+0xb0>
 8007ada:	1bad      	subs	r5, r5, r6
 8007adc:	00ad      	lsls	r5, r5, #2
 8007ade:	e004      	b.n	8007aea <__gethex+0xce>
 8007ae0:	2400      	movs	r4, #0
 8007ae2:	4625      	mov	r5, r4
 8007ae4:	e7e0      	b.n	8007aa8 <__gethex+0x8c>
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	d1f7      	bne.n	8007ada <__gethex+0xbe>
 8007aea:	7833      	ldrb	r3, [r6, #0]
 8007aec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007af0:	2b50      	cmp	r3, #80	; 0x50
 8007af2:	d139      	bne.n	8007b68 <__gethex+0x14c>
 8007af4:	7873      	ldrb	r3, [r6, #1]
 8007af6:	2b2b      	cmp	r3, #43	; 0x2b
 8007af8:	d02a      	beq.n	8007b50 <__gethex+0x134>
 8007afa:	2b2d      	cmp	r3, #45	; 0x2d
 8007afc:	d02c      	beq.n	8007b58 <__gethex+0x13c>
 8007afe:	f04f 0900 	mov.w	r9, #0
 8007b02:	1c71      	adds	r1, r6, #1
 8007b04:	7808      	ldrb	r0, [r1, #0]
 8007b06:	f7ff ff74 	bl	80079f2 <__hexdig_fun>
 8007b0a:	1e43      	subs	r3, r0, #1
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b18      	cmp	r3, #24
 8007b10:	d82a      	bhi.n	8007b68 <__gethex+0x14c>
 8007b12:	f1a0 0210 	sub.w	r2, r0, #16
 8007b16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b1a:	f7ff ff6a 	bl	80079f2 <__hexdig_fun>
 8007b1e:	1e43      	subs	r3, r0, #1
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b18      	cmp	r3, #24
 8007b24:	d91b      	bls.n	8007b5e <__gethex+0x142>
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	d000      	beq.n	8007b2e <__gethex+0x112>
 8007b2c:	4252      	negs	r2, r2
 8007b2e:	4415      	add	r5, r2
 8007b30:	f8cb 1000 	str.w	r1, [fp]
 8007b34:	b1d4      	cbz	r4, 8007b6c <__gethex+0x150>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf14      	ite	ne
 8007b3c:	2700      	movne	r7, #0
 8007b3e:	2706      	moveq	r7, #6
 8007b40:	4638      	mov	r0, r7
 8007b42:	b00b      	add	sp, #44	; 0x2c
 8007b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b48:	463e      	mov	r6, r7
 8007b4a:	4625      	mov	r5, r4
 8007b4c:	2401      	movs	r4, #1
 8007b4e:	e7cc      	b.n	8007aea <__gethex+0xce>
 8007b50:	f04f 0900 	mov.w	r9, #0
 8007b54:	1cb1      	adds	r1, r6, #2
 8007b56:	e7d5      	b.n	8007b04 <__gethex+0xe8>
 8007b58:	f04f 0901 	mov.w	r9, #1
 8007b5c:	e7fa      	b.n	8007b54 <__gethex+0x138>
 8007b5e:	230a      	movs	r3, #10
 8007b60:	fb03 0202 	mla	r2, r3, r2, r0
 8007b64:	3a10      	subs	r2, #16
 8007b66:	e7d6      	b.n	8007b16 <__gethex+0xfa>
 8007b68:	4631      	mov	r1, r6
 8007b6a:	e7e1      	b.n	8007b30 <__gethex+0x114>
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	1bf3      	subs	r3, r6, r7
 8007b70:	3b01      	subs	r3, #1
 8007b72:	2b07      	cmp	r3, #7
 8007b74:	dc0a      	bgt.n	8007b8c <__gethex+0x170>
 8007b76:	9802      	ldr	r0, [sp, #8]
 8007b78:	f000 fa8c 	bl	8008094 <_Balloc>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	b940      	cbnz	r0, 8007b92 <__gethex+0x176>
 8007b80:	4602      	mov	r2, r0
 8007b82:	21de      	movs	r1, #222	; 0xde
 8007b84:	4b5b      	ldr	r3, [pc, #364]	; (8007cf4 <__gethex+0x2d8>)
 8007b86:	485c      	ldr	r0, [pc, #368]	; (8007cf8 <__gethex+0x2dc>)
 8007b88:	f001 f8d4 	bl	8008d34 <__assert_func>
 8007b8c:	3101      	adds	r1, #1
 8007b8e:	105b      	asrs	r3, r3, #1
 8007b90:	e7ef      	b.n	8007b72 <__gethex+0x156>
 8007b92:	f04f 0b00 	mov.w	fp, #0
 8007b96:	f100 0914 	add.w	r9, r0, #20
 8007b9a:	f1ca 0301 	rsb	r3, sl, #1
 8007b9e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ba2:	f8cd b004 	str.w	fp, [sp, #4]
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	42b7      	cmp	r7, r6
 8007baa:	d33f      	bcc.n	8007c2c <__gethex+0x210>
 8007bac:	9f04      	ldr	r7, [sp, #16]
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	f847 3b04 	str.w	r3, [r7], #4
 8007bb4:	eba7 0709 	sub.w	r7, r7, r9
 8007bb8:	10bf      	asrs	r7, r7, #2
 8007bba:	6127      	str	r7, [r4, #16]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fb5b 	bl	8008278 <__hi0bits>
 8007bc2:	017f      	lsls	r7, r7, #5
 8007bc4:	f8d8 6000 	ldr.w	r6, [r8]
 8007bc8:	1a3f      	subs	r7, r7, r0
 8007bca:	42b7      	cmp	r7, r6
 8007bcc:	dd62      	ble.n	8007c94 <__gethex+0x278>
 8007bce:	1bbf      	subs	r7, r7, r6
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fef5 	bl	80089c2 <__any_on>
 8007bd8:	4682      	mov	sl, r0
 8007bda:	b1a8      	cbz	r0, 8007c08 <__gethex+0x1ec>
 8007bdc:	f04f 0a01 	mov.w	sl, #1
 8007be0:	1e7b      	subs	r3, r7, #1
 8007be2:	1159      	asrs	r1, r3, #5
 8007be4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007be8:	f003 021f 	and.w	r2, r3, #31
 8007bec:	fa0a f202 	lsl.w	r2, sl, r2
 8007bf0:	420a      	tst	r2, r1
 8007bf2:	d009      	beq.n	8007c08 <__gethex+0x1ec>
 8007bf4:	4553      	cmp	r3, sl
 8007bf6:	dd05      	ble.n	8007c04 <__gethex+0x1e8>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	1eb9      	subs	r1, r7, #2
 8007bfc:	f000 fee1 	bl	80089c2 <__any_on>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d144      	bne.n	8007c8e <__gethex+0x272>
 8007c04:	f04f 0a02 	mov.w	sl, #2
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff fe9e 	bl	800794c <rshift>
 8007c10:	443d      	add	r5, r7
 8007c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c16:	42ab      	cmp	r3, r5
 8007c18:	da4a      	bge.n	8007cb0 <__gethex+0x294>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	9802      	ldr	r0, [sp, #8]
 8007c1e:	f000 fa79 	bl	8008114 <_Bfree>
 8007c22:	2300      	movs	r3, #0
 8007c24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c26:	27a3      	movs	r7, #163	; 0xa3
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	e789      	b.n	8007b40 <__gethex+0x124>
 8007c2c:	1e73      	subs	r3, r6, #1
 8007c2e:	9a06      	ldr	r2, [sp, #24]
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d019      	beq.n	8007c6e <__gethex+0x252>
 8007c3a:	f1bb 0f20 	cmp.w	fp, #32
 8007c3e:	d107      	bne.n	8007c50 <__gethex+0x234>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	9a01      	ldr	r2, [sp, #4]
 8007c44:	f843 2b04 	str.w	r2, [r3], #4
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	469b      	mov	fp, r3
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c54:	f7ff fecd 	bl	80079f2 <__hexdig_fun>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	f000 000f 	and.w	r0, r0, #15
 8007c5e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c62:	4303      	orrs	r3, r0
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f10b 0b04 	add.w	fp, fp, #4
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	e00d      	b.n	8007c8a <__gethex+0x26e>
 8007c6e:	9a08      	ldr	r2, [sp, #32]
 8007c70:	1e73      	subs	r3, r6, #1
 8007c72:	4413      	add	r3, r2
 8007c74:	42bb      	cmp	r3, r7
 8007c76:	d3e0      	bcc.n	8007c3a <__gethex+0x21e>
 8007c78:	4618      	mov	r0, r3
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	f001 f836 	bl	8008cf0 <strncmp>
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d1d7      	bne.n	8007c3a <__gethex+0x21e>
 8007c8a:	461e      	mov	r6, r3
 8007c8c:	e78c      	b.n	8007ba8 <__gethex+0x18c>
 8007c8e:	f04f 0a03 	mov.w	sl, #3
 8007c92:	e7b9      	b.n	8007c08 <__gethex+0x1ec>
 8007c94:	da09      	bge.n	8007caa <__gethex+0x28e>
 8007c96:	1bf7      	subs	r7, r6, r7
 8007c98:	4621      	mov	r1, r4
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	9802      	ldr	r0, [sp, #8]
 8007c9e:	f000 fc51 	bl	8008544 <__lshift>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	1bed      	subs	r5, r5, r7
 8007ca6:	f100 0914 	add.w	r9, r0, #20
 8007caa:	f04f 0a00 	mov.w	sl, #0
 8007cae:	e7b0      	b.n	8007c12 <__gethex+0x1f6>
 8007cb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007cb4:	42a8      	cmp	r0, r5
 8007cb6:	dd72      	ble.n	8007d9e <__gethex+0x382>
 8007cb8:	1b45      	subs	r5, r0, r5
 8007cba:	42ae      	cmp	r6, r5
 8007cbc:	dc35      	bgt.n	8007d2a <__gethex+0x30e>
 8007cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d029      	beq.n	8007d1a <__gethex+0x2fe>
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d02b      	beq.n	8007d22 <__gethex+0x306>
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d11c      	bne.n	8007d08 <__gethex+0x2ec>
 8007cce:	42ae      	cmp	r6, r5
 8007cd0:	d11a      	bne.n	8007d08 <__gethex+0x2ec>
 8007cd2:	2e01      	cmp	r6, #1
 8007cd4:	d112      	bne.n	8007cfc <__gethex+0x2e0>
 8007cd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cda:	9a05      	ldr	r2, [sp, #20]
 8007cdc:	2762      	movs	r7, #98	; 0x62
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	f8c9 3000 	str.w	r3, [r9]
 8007ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cea:	601c      	str	r4, [r3, #0]
 8007cec:	e728      	b.n	8007b40 <__gethex+0x124>
 8007cee:	bf00      	nop
 8007cf0:	0800aaa8 	.word	0x0800aaa8
 8007cf4:	0800aa30 	.word	0x0800aa30
 8007cf8:	0800aa41 	.word	0x0800aa41
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	1e71      	subs	r1, r6, #1
 8007d00:	f000 fe5f 	bl	80089c2 <__any_on>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d1e6      	bne.n	8007cd6 <__gethex+0x2ba>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	9802      	ldr	r0, [sp, #8]
 8007d0c:	f000 fa02 	bl	8008114 <_Bfree>
 8007d10:	2300      	movs	r3, #0
 8007d12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d14:	2750      	movs	r7, #80	; 0x50
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e712      	b.n	8007b40 <__gethex+0x124>
 8007d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1f3      	bne.n	8007d08 <__gethex+0x2ec>
 8007d20:	e7d9      	b.n	8007cd6 <__gethex+0x2ba>
 8007d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1d6      	bne.n	8007cd6 <__gethex+0x2ba>
 8007d28:	e7ee      	b.n	8007d08 <__gethex+0x2ec>
 8007d2a:	1e6f      	subs	r7, r5, #1
 8007d2c:	f1ba 0f00 	cmp.w	sl, #0
 8007d30:	d132      	bne.n	8007d98 <__gethex+0x37c>
 8007d32:	b127      	cbz	r7, 8007d3e <__gethex+0x322>
 8007d34:	4639      	mov	r1, r7
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 fe43 	bl	80089c2 <__any_on>
 8007d3c:	4682      	mov	sl, r0
 8007d3e:	2101      	movs	r1, #1
 8007d40:	117b      	asrs	r3, r7, #5
 8007d42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d46:	f007 071f 	and.w	r7, r7, #31
 8007d4a:	fa01 f707 	lsl.w	r7, r1, r7
 8007d4e:	421f      	tst	r7, r3
 8007d50:	f04f 0702 	mov.w	r7, #2
 8007d54:	4629      	mov	r1, r5
 8007d56:	4620      	mov	r0, r4
 8007d58:	bf18      	it	ne
 8007d5a:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d5e:	1b76      	subs	r6, r6, r5
 8007d60:	f7ff fdf4 	bl	800794c <rshift>
 8007d64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d68:	f1ba 0f00 	cmp.w	sl, #0
 8007d6c:	d048      	beq.n	8007e00 <__gethex+0x3e4>
 8007d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d015      	beq.n	8007da2 <__gethex+0x386>
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d017      	beq.n	8007daa <__gethex+0x38e>
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d109      	bne.n	8007d92 <__gethex+0x376>
 8007d7e:	f01a 0f02 	tst.w	sl, #2
 8007d82:	d006      	beq.n	8007d92 <__gethex+0x376>
 8007d84:	f8d9 0000 	ldr.w	r0, [r9]
 8007d88:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d8c:	f01a 0f01 	tst.w	sl, #1
 8007d90:	d10e      	bne.n	8007db0 <__gethex+0x394>
 8007d92:	f047 0710 	orr.w	r7, r7, #16
 8007d96:	e033      	b.n	8007e00 <__gethex+0x3e4>
 8007d98:	f04f 0a01 	mov.w	sl, #1
 8007d9c:	e7cf      	b.n	8007d3e <__gethex+0x322>
 8007d9e:	2701      	movs	r7, #1
 8007da0:	e7e2      	b.n	8007d68 <__gethex+0x34c>
 8007da2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007da4:	f1c3 0301 	rsb	r3, r3, #1
 8007da8:	9315      	str	r3, [sp, #84]	; 0x54
 8007daa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f0      	beq.n	8007d92 <__gethex+0x376>
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007db8:	f104 0314 	add.w	r3, r4, #20
 8007dbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007dc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dce:	d01c      	beq.n	8007e0a <__gethex+0x3ee>
 8007dd0:	3201      	adds	r2, #1
 8007dd2:	6002      	str	r2, [r0, #0]
 8007dd4:	2f02      	cmp	r7, #2
 8007dd6:	f104 0314 	add.w	r3, r4, #20
 8007dda:	d13d      	bne.n	8007e58 <__gethex+0x43c>
 8007ddc:	f8d8 2000 	ldr.w	r2, [r8]
 8007de0:	3a01      	subs	r2, #1
 8007de2:	42b2      	cmp	r2, r6
 8007de4:	d10a      	bne.n	8007dfc <__gethex+0x3e0>
 8007de6:	2201      	movs	r2, #1
 8007de8:	1171      	asrs	r1, r6, #5
 8007dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dee:	f006 061f 	and.w	r6, r6, #31
 8007df2:	fa02 f606 	lsl.w	r6, r2, r6
 8007df6:	421e      	tst	r6, r3
 8007df8:	bf18      	it	ne
 8007dfa:	4617      	movne	r7, r2
 8007dfc:	f047 0720 	orr.w	r7, r7, #32
 8007e00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e02:	601c      	str	r4, [r3, #0]
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	601d      	str	r5, [r3, #0]
 8007e08:	e69a      	b.n	8007b40 <__gethex+0x124>
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e10:	d8d8      	bhi.n	8007dc4 <__gethex+0x3a8>
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	459b      	cmp	fp, r3
 8007e16:	db17      	blt.n	8007e48 <__gethex+0x42c>
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	9802      	ldr	r0, [sp, #8]
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	f000 f939 	bl	8008094 <_Balloc>
 8007e22:	4681      	mov	r9, r0
 8007e24:	b918      	cbnz	r0, 8007e2e <__gethex+0x412>
 8007e26:	4602      	mov	r2, r0
 8007e28:	2184      	movs	r1, #132	; 0x84
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <__gethex+0x474>)
 8007e2c:	e6ab      	b.n	8007b86 <__gethex+0x16a>
 8007e2e:	6922      	ldr	r2, [r4, #16]
 8007e30:	f104 010c 	add.w	r1, r4, #12
 8007e34:	3202      	adds	r2, #2
 8007e36:	0092      	lsls	r2, r2, #2
 8007e38:	300c      	adds	r0, #12
 8007e3a:	f000 f911 	bl	8008060 <memcpy>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	9802      	ldr	r0, [sp, #8]
 8007e42:	f000 f967 	bl	8008114 <_Bfree>
 8007e46:	464c      	mov	r4, r9
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	6122      	str	r2, [r4, #16]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e54:	615a      	str	r2, [r3, #20]
 8007e56:	e7bd      	b.n	8007dd4 <__gethex+0x3b8>
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	455a      	cmp	r2, fp
 8007e5c:	dd0b      	ble.n	8007e76 <__gethex+0x45a>
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7ff fd73 	bl	800794c <rshift>
 8007e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e6a:	3501      	adds	r5, #1
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	f6ff aed4 	blt.w	8007c1a <__gethex+0x1fe>
 8007e72:	2701      	movs	r7, #1
 8007e74:	e7c2      	b.n	8007dfc <__gethex+0x3e0>
 8007e76:	f016 061f 	ands.w	r6, r6, #31
 8007e7a:	d0fa      	beq.n	8007e72 <__gethex+0x456>
 8007e7c:	4453      	add	r3, sl
 8007e7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e82:	f000 f9f9 	bl	8008278 <__hi0bits>
 8007e86:	f1c6 0620 	rsb	r6, r6, #32
 8007e8a:	42b0      	cmp	r0, r6
 8007e8c:	dbe7      	blt.n	8007e5e <__gethex+0x442>
 8007e8e:	e7f0      	b.n	8007e72 <__gethex+0x456>
 8007e90:	0800aa30 	.word	0x0800aa30

08007e94 <L_shift>:
 8007e94:	f1c2 0208 	rsb	r2, r2, #8
 8007e98:	0092      	lsls	r2, r2, #2
 8007e9a:	b570      	push	{r4, r5, r6, lr}
 8007e9c:	f1c2 0620 	rsb	r6, r2, #32
 8007ea0:	6843      	ldr	r3, [r0, #4]
 8007ea2:	6804      	ldr	r4, [r0, #0]
 8007ea4:	fa03 f506 	lsl.w	r5, r3, r6
 8007ea8:	432c      	orrs	r4, r5
 8007eaa:	40d3      	lsrs	r3, r2
 8007eac:	6004      	str	r4, [r0, #0]
 8007eae:	f840 3f04 	str.w	r3, [r0, #4]!
 8007eb2:	4288      	cmp	r0, r1
 8007eb4:	d3f4      	bcc.n	8007ea0 <L_shift+0xc>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}

08007eb8 <__match>:
 8007eb8:	b530      	push	{r4, r5, lr}
 8007eba:	6803      	ldr	r3, [r0, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec2:	b914      	cbnz	r4, 8007eca <__match+0x12>
 8007ec4:	6003      	str	r3, [r0, #0]
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	bd30      	pop	{r4, r5, pc}
 8007eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ece:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ed2:	2d19      	cmp	r5, #25
 8007ed4:	bf98      	it	ls
 8007ed6:	3220      	addls	r2, #32
 8007ed8:	42a2      	cmp	r2, r4
 8007eda:	d0f0      	beq.n	8007ebe <__match+0x6>
 8007edc:	2000      	movs	r0, #0
 8007ede:	e7f3      	b.n	8007ec8 <__match+0x10>

08007ee0 <__hexnan>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	680b      	ldr	r3, [r1, #0]
 8007ee8:	4682      	mov	sl, r0
 8007eea:	115e      	asrs	r6, r3, #5
 8007eec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ef0:	f013 031f 	ands.w	r3, r3, #31
 8007ef4:	bf18      	it	ne
 8007ef6:	3604      	addne	r6, #4
 8007ef8:	1f37      	subs	r7, r6, #4
 8007efa:	46b9      	mov	r9, r7
 8007efc:	463c      	mov	r4, r7
 8007efe:	46ab      	mov	fp, r5
 8007f00:	b087      	sub	sp, #28
 8007f02:	4690      	mov	r8, r2
 8007f04:	6802      	ldr	r2, [r0, #0]
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f0c:	9502      	str	r5, [sp, #8]
 8007f0e:	7851      	ldrb	r1, [r2, #1]
 8007f10:	1c53      	adds	r3, r2, #1
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	b341      	cbz	r1, 8007f68 <__hexnan+0x88>
 8007f16:	4608      	mov	r0, r1
 8007f18:	9205      	str	r2, [sp, #20]
 8007f1a:	9104      	str	r1, [sp, #16]
 8007f1c:	f7ff fd69 	bl	80079f2 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d14f      	bne.n	8007fc4 <__hexnan+0xe4>
 8007f24:	9904      	ldr	r1, [sp, #16]
 8007f26:	9a05      	ldr	r2, [sp, #20]
 8007f28:	2920      	cmp	r1, #32
 8007f2a:	d818      	bhi.n	8007f5e <__hexnan+0x7e>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	459b      	cmp	fp, r3
 8007f30:	dd13      	ble.n	8007f5a <__hexnan+0x7a>
 8007f32:	454c      	cmp	r4, r9
 8007f34:	d206      	bcs.n	8007f44 <__hexnan+0x64>
 8007f36:	2d07      	cmp	r5, #7
 8007f38:	dc04      	bgt.n	8007f44 <__hexnan+0x64>
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7ff ffa8 	bl	8007e94 <L_shift>
 8007f44:	4544      	cmp	r4, r8
 8007f46:	d950      	bls.n	8007fea <__hexnan+0x10a>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f52:	461d      	mov	r5, r3
 8007f54:	464c      	mov	r4, r9
 8007f56:	f8cd b008 	str.w	fp, [sp, #8]
 8007f5a:	9a03      	ldr	r2, [sp, #12]
 8007f5c:	e7d7      	b.n	8007f0e <__hexnan+0x2e>
 8007f5e:	2929      	cmp	r1, #41	; 0x29
 8007f60:	d156      	bne.n	8008010 <__hexnan+0x130>
 8007f62:	3202      	adds	r2, #2
 8007f64:	f8ca 2000 	str.w	r2, [sl]
 8007f68:	f1bb 0f00 	cmp.w	fp, #0
 8007f6c:	d050      	beq.n	8008010 <__hexnan+0x130>
 8007f6e:	454c      	cmp	r4, r9
 8007f70:	d206      	bcs.n	8007f80 <__hexnan+0xa0>
 8007f72:	2d07      	cmp	r5, #7
 8007f74:	dc04      	bgt.n	8007f80 <__hexnan+0xa0>
 8007f76:	462a      	mov	r2, r5
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff ff8a 	bl	8007e94 <L_shift>
 8007f80:	4544      	cmp	r4, r8
 8007f82:	d934      	bls.n	8007fee <__hexnan+0x10e>
 8007f84:	4623      	mov	r3, r4
 8007f86:	f1a8 0204 	sub.w	r2, r8, #4
 8007f8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f8e:	429f      	cmp	r7, r3
 8007f90:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f94:	d2f9      	bcs.n	8007f8a <__hexnan+0xaa>
 8007f96:	1b3b      	subs	r3, r7, r4
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	3401      	adds	r4, #1
 8007fa0:	3e03      	subs	r6, #3
 8007fa2:	42b4      	cmp	r4, r6
 8007fa4:	bf88      	it	hi
 8007fa6:	2304      	movhi	r3, #4
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4443      	add	r3, r8
 8007fac:	f843 2b04 	str.w	r2, [r3], #4
 8007fb0:	429f      	cmp	r7, r3
 8007fb2:	d2fb      	bcs.n	8007fac <__hexnan+0xcc>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	b91b      	cbnz	r3, 8007fc0 <__hexnan+0xe0>
 8007fb8:	4547      	cmp	r7, r8
 8007fba:	d127      	bne.n	800800c <__hexnan+0x12c>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	2005      	movs	r0, #5
 8007fc2:	e026      	b.n	8008012 <__hexnan+0x132>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	2d08      	cmp	r5, #8
 8007fc8:	f10b 0b01 	add.w	fp, fp, #1
 8007fcc:	dd06      	ble.n	8007fdc <__hexnan+0xfc>
 8007fce:	4544      	cmp	r4, r8
 8007fd0:	d9c3      	bls.n	8007f5a <__hexnan+0x7a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2501      	movs	r5, #1
 8007fd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fda:	3c04      	subs	r4, #4
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	f000 000f 	and.w	r0, r0, #15
 8007fe2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	e7b7      	b.n	8007f5a <__hexnan+0x7a>
 8007fea:	2508      	movs	r5, #8
 8007fec:	e7b5      	b.n	8007f5a <__hexnan+0x7a>
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0df      	beq.n	8007fb4 <__hexnan+0xd4>
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	f1c3 0320 	rsb	r3, r3, #32
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8008000:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008004:	401a      	ands	r2, r3
 8008006:	f846 2c04 	str.w	r2, [r6, #-4]
 800800a:	e7d3      	b.n	8007fb4 <__hexnan+0xd4>
 800800c:	3f04      	subs	r7, #4
 800800e:	e7d1      	b.n	8007fb4 <__hexnan+0xd4>
 8008010:	2004      	movs	r0, #4
 8008012:	b007      	add	sp, #28
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008018 <_localeconv_r>:
 8008018:	4800      	ldr	r0, [pc, #0]	; (800801c <_localeconv_r+0x4>)
 800801a:	4770      	bx	lr
 800801c:	20000198 	.word	0x20000198

08008020 <__ascii_mbtowc>:
 8008020:	b082      	sub	sp, #8
 8008022:	b901      	cbnz	r1, 8008026 <__ascii_mbtowc+0x6>
 8008024:	a901      	add	r1, sp, #4
 8008026:	b142      	cbz	r2, 800803a <__ascii_mbtowc+0x1a>
 8008028:	b14b      	cbz	r3, 800803e <__ascii_mbtowc+0x1e>
 800802a:	7813      	ldrb	r3, [r2, #0]
 800802c:	600b      	str	r3, [r1, #0]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	1e10      	subs	r0, r2, #0
 8008032:	bf18      	it	ne
 8008034:	2001      	movne	r0, #1
 8008036:	b002      	add	sp, #8
 8008038:	4770      	bx	lr
 800803a:	4610      	mov	r0, r2
 800803c:	e7fb      	b.n	8008036 <__ascii_mbtowc+0x16>
 800803e:	f06f 0001 	mvn.w	r0, #1
 8008042:	e7f8      	b.n	8008036 <__ascii_mbtowc+0x16>

08008044 <memchr>:
 8008044:	4603      	mov	r3, r0
 8008046:	b510      	push	{r4, lr}
 8008048:	b2c9      	uxtb	r1, r1
 800804a:	4402      	add	r2, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	4618      	mov	r0, r3
 8008050:	d101      	bne.n	8008056 <memchr+0x12>
 8008052:	2000      	movs	r0, #0
 8008054:	e003      	b.n	800805e <memchr+0x1a>
 8008056:	7804      	ldrb	r4, [r0, #0]
 8008058:	3301      	adds	r3, #1
 800805a:	428c      	cmp	r4, r1
 800805c:	d1f6      	bne.n	800804c <memchr+0x8>
 800805e:	bd10      	pop	{r4, pc}

08008060 <memcpy>:
 8008060:	440a      	add	r2, r1
 8008062:	4291      	cmp	r1, r2
 8008064:	f100 33ff 	add.w	r3, r0, #4294967295
 8008068:	d100      	bne.n	800806c <memcpy+0xc>
 800806a:	4770      	bx	lr
 800806c:	b510      	push	{r4, lr}
 800806e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008072:	4291      	cmp	r1, r2
 8008074:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008078:	d1f9      	bne.n	800806e <memcpy+0xe>
 800807a:	bd10      	pop	{r4, pc}

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__malloc_lock+0x8>)
 800807e:	f000 be8a 	b.w	8008d96 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	2000070c 	.word	0x2000070c

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_unlock+0x8>)
 800808a:	f000 be85 	b.w	8008d98 <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	2000070c 	.word	0x2000070c

08008094 <_Balloc>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	b976      	cbnz	r6, 80080bc <_Balloc+0x28>
 800809e:	2010      	movs	r0, #16
 80080a0:	f7fc ff9a 	bl	8004fd8 <malloc>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6260      	str	r0, [r4, #36]	; 0x24
 80080a8:	b920      	cbnz	r0, 80080b4 <_Balloc+0x20>
 80080aa:	2166      	movs	r1, #102	; 0x66
 80080ac:	4b17      	ldr	r3, [pc, #92]	; (800810c <_Balloc+0x78>)
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <_Balloc+0x7c>)
 80080b0:	f000 fe40 	bl	8008d34 <__assert_func>
 80080b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b8:	6006      	str	r6, [r0, #0]
 80080ba:	60c6      	str	r6, [r0, #12]
 80080bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080be:	68f3      	ldr	r3, [r6, #12]
 80080c0:	b183      	cbz	r3, 80080e4 <_Balloc+0x50>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ca:	b9b8      	cbnz	r0, 80080fc <_Balloc+0x68>
 80080cc:	2101      	movs	r1, #1
 80080ce:	fa01 f605 	lsl.w	r6, r1, r5
 80080d2:	1d72      	adds	r2, r6, #5
 80080d4:	4620      	mov	r0, r4
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	f000 fc94 	bl	8008a04 <_calloc_r>
 80080dc:	b160      	cbz	r0, 80080f8 <_Balloc+0x64>
 80080de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e2:	e00e      	b.n	8008102 <_Balloc+0x6e>
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	2104      	movs	r1, #4
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fc8b 	bl	8008a04 <_calloc_r>
 80080ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f0:	60f0      	str	r0, [r6, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <_Balloc+0x2e>
 80080f8:	2000      	movs	r0, #0
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	6802      	ldr	r2, [r0, #0]
 80080fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008102:	2300      	movs	r3, #0
 8008104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008108:	e7f7      	b.n	80080fa <_Balloc+0x66>
 800810a:	bf00      	nop
 800810c:	0800a9be 	.word	0x0800a9be
 8008110:	0800aabc 	.word	0x0800aabc

08008114 <_Bfree>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b976      	cbnz	r6, 800813c <_Bfree+0x28>
 800811e:	2010      	movs	r0, #16
 8008120:	f7fc ff5a 	bl	8004fd8 <malloc>
 8008124:	4602      	mov	r2, r0
 8008126:	6268      	str	r0, [r5, #36]	; 0x24
 8008128:	b920      	cbnz	r0, 8008134 <_Bfree+0x20>
 800812a:	218a      	movs	r1, #138	; 0x8a
 800812c:	4b08      	ldr	r3, [pc, #32]	; (8008150 <_Bfree+0x3c>)
 800812e:	4809      	ldr	r0, [pc, #36]	; (8008154 <_Bfree+0x40>)
 8008130:	f000 fe00 	bl	8008d34 <__assert_func>
 8008134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008138:	6006      	str	r6, [r0, #0]
 800813a:	60c6      	str	r6, [r0, #12]
 800813c:	b13c      	cbz	r4, 800814e <_Bfree+0x3a>
 800813e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008140:	6862      	ldr	r2, [r4, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008148:	6021      	str	r1, [r4, #0]
 800814a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	0800a9be 	.word	0x0800a9be
 8008154:	0800aabc 	.word	0x0800aabc

08008158 <__multadd>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	4607      	mov	r7, r0
 800815e:	460c      	mov	r4, r1
 8008160:	461e      	mov	r6, r3
 8008162:	2000      	movs	r0, #0
 8008164:	690d      	ldr	r5, [r1, #16]
 8008166:	f101 0c14 	add.w	ip, r1, #20
 800816a:	f8dc 3000 	ldr.w	r3, [ip]
 800816e:	3001      	adds	r0, #1
 8008170:	b299      	uxth	r1, r3
 8008172:	fb02 6101 	mla	r1, r2, r1, r6
 8008176:	0c1e      	lsrs	r6, r3, #16
 8008178:	0c0b      	lsrs	r3, r1, #16
 800817a:	fb02 3306 	mla	r3, r2, r6, r3
 800817e:	b289      	uxth	r1, r1
 8008180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008184:	4285      	cmp	r5, r0
 8008186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	dcec      	bgt.n	800816a <__multadd+0x12>
 8008190:	b30e      	cbz	r6, 80081d6 <__multadd+0x7e>
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc19      	bgt.n	80081cc <__multadd+0x74>
 8008198:	6861      	ldr	r1, [r4, #4]
 800819a:	4638      	mov	r0, r7
 800819c:	3101      	adds	r1, #1
 800819e:	f7ff ff79 	bl	8008094 <_Balloc>
 80081a2:	4680      	mov	r8, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__multadd+0x5a>
 80081a6:	4602      	mov	r2, r0
 80081a8:	21b5      	movs	r1, #181	; 0xb5
 80081aa:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <__multadd+0x84>)
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <__multadd+0x88>)
 80081ae:	f000 fdc1 	bl	8008d34 <__assert_func>
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	f104 010c 	add.w	r1, r4, #12
 80081b8:	3202      	adds	r2, #2
 80081ba:	0092      	lsls	r2, r2, #2
 80081bc:	300c      	adds	r0, #12
 80081be:	f7ff ff4f 	bl	8008060 <memcpy>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ffa5 	bl	8008114 <_Bfree>
 80081ca:	4644      	mov	r4, r8
 80081cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d0:	3501      	adds	r5, #1
 80081d2:	615e      	str	r6, [r3, #20]
 80081d4:	6125      	str	r5, [r4, #16]
 80081d6:	4620      	mov	r0, r4
 80081d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081dc:	0800aa30 	.word	0x0800aa30
 80081e0:	0800aabc 	.word	0x0800aabc

080081e4 <__s2b>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4615      	mov	r5, r2
 80081ea:	2209      	movs	r2, #9
 80081ec:	461f      	mov	r7, r3
 80081ee:	3308      	adds	r3, #8
 80081f0:	460c      	mov	r4, r1
 80081f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f6:	4606      	mov	r6, r0
 80081f8:	2201      	movs	r2, #1
 80081fa:	2100      	movs	r1, #0
 80081fc:	429a      	cmp	r2, r3
 80081fe:	db09      	blt.n	8008214 <__s2b+0x30>
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ff47 	bl	8008094 <_Balloc>
 8008206:	b940      	cbnz	r0, 800821a <__s2b+0x36>
 8008208:	4602      	mov	r2, r0
 800820a:	21ce      	movs	r1, #206	; 0xce
 800820c:	4b18      	ldr	r3, [pc, #96]	; (8008270 <__s2b+0x8c>)
 800820e:	4819      	ldr	r0, [pc, #100]	; (8008274 <__s2b+0x90>)
 8008210:	f000 fd90 	bl	8008d34 <__assert_func>
 8008214:	0052      	lsls	r2, r2, #1
 8008216:	3101      	adds	r1, #1
 8008218:	e7f0      	b.n	80081fc <__s2b+0x18>
 800821a:	9b08      	ldr	r3, [sp, #32]
 800821c:	2d09      	cmp	r5, #9
 800821e:	6143      	str	r3, [r0, #20]
 8008220:	f04f 0301 	mov.w	r3, #1
 8008224:	6103      	str	r3, [r0, #16]
 8008226:	dd16      	ble.n	8008256 <__s2b+0x72>
 8008228:	f104 0909 	add.w	r9, r4, #9
 800822c:	46c8      	mov	r8, r9
 800822e:	442c      	add	r4, r5
 8008230:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008234:	4601      	mov	r1, r0
 8008236:	220a      	movs	r2, #10
 8008238:	4630      	mov	r0, r6
 800823a:	3b30      	subs	r3, #48	; 0x30
 800823c:	f7ff ff8c 	bl	8008158 <__multadd>
 8008240:	45a0      	cmp	r8, r4
 8008242:	d1f5      	bne.n	8008230 <__s2b+0x4c>
 8008244:	f1a5 0408 	sub.w	r4, r5, #8
 8008248:	444c      	add	r4, r9
 800824a:	1b2d      	subs	r5, r5, r4
 800824c:	1963      	adds	r3, r4, r5
 800824e:	42bb      	cmp	r3, r7
 8008250:	db04      	blt.n	800825c <__s2b+0x78>
 8008252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008256:	2509      	movs	r5, #9
 8008258:	340a      	adds	r4, #10
 800825a:	e7f6      	b.n	800824a <__s2b+0x66>
 800825c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008260:	4601      	mov	r1, r0
 8008262:	220a      	movs	r2, #10
 8008264:	4630      	mov	r0, r6
 8008266:	3b30      	subs	r3, #48	; 0x30
 8008268:	f7ff ff76 	bl	8008158 <__multadd>
 800826c:	e7ee      	b.n	800824c <__s2b+0x68>
 800826e:	bf00      	nop
 8008270:	0800aa30 	.word	0x0800aa30
 8008274:	0800aabc 	.word	0x0800aabc

08008278 <__hi0bits>:
 8008278:	0c02      	lsrs	r2, r0, #16
 800827a:	0412      	lsls	r2, r2, #16
 800827c:	4603      	mov	r3, r0
 800827e:	b9ca      	cbnz	r2, 80082b4 <__hi0bits+0x3c>
 8008280:	0403      	lsls	r3, r0, #16
 8008282:	2010      	movs	r0, #16
 8008284:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008288:	bf04      	itt	eq
 800828a:	021b      	lsleq	r3, r3, #8
 800828c:	3008      	addeq	r0, #8
 800828e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008292:	bf04      	itt	eq
 8008294:	011b      	lsleq	r3, r3, #4
 8008296:	3004      	addeq	r0, #4
 8008298:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800829c:	bf04      	itt	eq
 800829e:	009b      	lsleq	r3, r3, #2
 80082a0:	3002      	addeq	r0, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	db05      	blt.n	80082b2 <__hi0bits+0x3a>
 80082a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80082aa:	f100 0001 	add.w	r0, r0, #1
 80082ae:	bf08      	it	eq
 80082b0:	2020      	moveq	r0, #32
 80082b2:	4770      	bx	lr
 80082b4:	2000      	movs	r0, #0
 80082b6:	e7e5      	b.n	8008284 <__hi0bits+0xc>

080082b8 <__lo0bits>:
 80082b8:	6803      	ldr	r3, [r0, #0]
 80082ba:	4602      	mov	r2, r0
 80082bc:	f013 0007 	ands.w	r0, r3, #7
 80082c0:	d00b      	beq.n	80082da <__lo0bits+0x22>
 80082c2:	07d9      	lsls	r1, r3, #31
 80082c4:	d421      	bmi.n	800830a <__lo0bits+0x52>
 80082c6:	0798      	lsls	r0, r3, #30
 80082c8:	bf49      	itett	mi
 80082ca:	085b      	lsrmi	r3, r3, #1
 80082cc:	089b      	lsrpl	r3, r3, #2
 80082ce:	2001      	movmi	r0, #1
 80082d0:	6013      	strmi	r3, [r2, #0]
 80082d2:	bf5c      	itt	pl
 80082d4:	2002      	movpl	r0, #2
 80082d6:	6013      	strpl	r3, [r2, #0]
 80082d8:	4770      	bx	lr
 80082da:	b299      	uxth	r1, r3
 80082dc:	b909      	cbnz	r1, 80082e2 <__lo0bits+0x2a>
 80082de:	2010      	movs	r0, #16
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	b2d9      	uxtb	r1, r3
 80082e4:	b909      	cbnz	r1, 80082ea <__lo0bits+0x32>
 80082e6:	3008      	adds	r0, #8
 80082e8:	0a1b      	lsrs	r3, r3, #8
 80082ea:	0719      	lsls	r1, r3, #28
 80082ec:	bf04      	itt	eq
 80082ee:	091b      	lsreq	r3, r3, #4
 80082f0:	3004      	addeq	r0, #4
 80082f2:	0799      	lsls	r1, r3, #30
 80082f4:	bf04      	itt	eq
 80082f6:	089b      	lsreq	r3, r3, #2
 80082f8:	3002      	addeq	r0, #2
 80082fa:	07d9      	lsls	r1, r3, #31
 80082fc:	d403      	bmi.n	8008306 <__lo0bits+0x4e>
 80082fe:	085b      	lsrs	r3, r3, #1
 8008300:	f100 0001 	add.w	r0, r0, #1
 8008304:	d003      	beq.n	800830e <__lo0bits+0x56>
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	4770      	bx	lr
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr
 800830e:	2020      	movs	r0, #32
 8008310:	4770      	bx	lr
	...

08008314 <__i2b>:
 8008314:	b510      	push	{r4, lr}
 8008316:	460c      	mov	r4, r1
 8008318:	2101      	movs	r1, #1
 800831a:	f7ff febb 	bl	8008094 <_Balloc>
 800831e:	4602      	mov	r2, r0
 8008320:	b928      	cbnz	r0, 800832e <__i2b+0x1a>
 8008322:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008326:	4b04      	ldr	r3, [pc, #16]	; (8008338 <__i2b+0x24>)
 8008328:	4804      	ldr	r0, [pc, #16]	; (800833c <__i2b+0x28>)
 800832a:	f000 fd03 	bl	8008d34 <__assert_func>
 800832e:	2301      	movs	r3, #1
 8008330:	6144      	str	r4, [r0, #20]
 8008332:	6103      	str	r3, [r0, #16]
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	0800aa30 	.word	0x0800aa30
 800833c:	0800aabc 	.word	0x0800aabc

08008340 <__multiply>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	4691      	mov	r9, r2
 8008346:	690a      	ldr	r2, [r1, #16]
 8008348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800834c:	460c      	mov	r4, r1
 800834e:	429a      	cmp	r2, r3
 8008350:	bfbe      	ittt	lt
 8008352:	460b      	movlt	r3, r1
 8008354:	464c      	movlt	r4, r9
 8008356:	4699      	movlt	r9, r3
 8008358:	6927      	ldr	r7, [r4, #16]
 800835a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	6861      	ldr	r1, [r4, #4]
 8008362:	eb07 060a 	add.w	r6, r7, sl
 8008366:	42b3      	cmp	r3, r6
 8008368:	b085      	sub	sp, #20
 800836a:	bfb8      	it	lt
 800836c:	3101      	addlt	r1, #1
 800836e:	f7ff fe91 	bl	8008094 <_Balloc>
 8008372:	b930      	cbnz	r0, 8008382 <__multiply+0x42>
 8008374:	4602      	mov	r2, r0
 8008376:	f240 115d 	movw	r1, #349	; 0x15d
 800837a:	4b43      	ldr	r3, [pc, #268]	; (8008488 <__multiply+0x148>)
 800837c:	4843      	ldr	r0, [pc, #268]	; (800848c <__multiply+0x14c>)
 800837e:	f000 fcd9 	bl	8008d34 <__assert_func>
 8008382:	f100 0514 	add.w	r5, r0, #20
 8008386:	462b      	mov	r3, r5
 8008388:	2200      	movs	r2, #0
 800838a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800838e:	4543      	cmp	r3, r8
 8008390:	d321      	bcc.n	80083d6 <__multiply+0x96>
 8008392:	f104 0314 	add.w	r3, r4, #20
 8008396:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800839a:	f109 0314 	add.w	r3, r9, #20
 800839e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083a2:	9202      	str	r2, [sp, #8]
 80083a4:	1b3a      	subs	r2, r7, r4
 80083a6:	3a15      	subs	r2, #21
 80083a8:	f022 0203 	bic.w	r2, r2, #3
 80083ac:	3204      	adds	r2, #4
 80083ae:	f104 0115 	add.w	r1, r4, #21
 80083b2:	428f      	cmp	r7, r1
 80083b4:	bf38      	it	cc
 80083b6:	2204      	movcc	r2, #4
 80083b8:	9201      	str	r2, [sp, #4]
 80083ba:	9a02      	ldr	r2, [sp, #8]
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d80c      	bhi.n	80083dc <__multiply+0x9c>
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	dd03      	ble.n	80083ce <__multiply+0x8e>
 80083c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d059      	beq.n	8008482 <__multiply+0x142>
 80083ce:	6106      	str	r6, [r0, #16]
 80083d0:	b005      	add	sp, #20
 80083d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d6:	f843 2b04 	str.w	r2, [r3], #4
 80083da:	e7d8      	b.n	800838e <__multiply+0x4e>
 80083dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80083e0:	f1ba 0f00 	cmp.w	sl, #0
 80083e4:	d023      	beq.n	800842e <__multiply+0xee>
 80083e6:	46a9      	mov	r9, r5
 80083e8:	f04f 0c00 	mov.w	ip, #0
 80083ec:	f104 0e14 	add.w	lr, r4, #20
 80083f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083f4:	f8d9 1000 	ldr.w	r1, [r9]
 80083f8:	fa1f fb82 	uxth.w	fp, r2
 80083fc:	b289      	uxth	r1, r1
 80083fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8008402:	4461      	add	r1, ip
 8008404:	f8d9 c000 	ldr.w	ip, [r9]
 8008408:	0c12      	lsrs	r2, r2, #16
 800840a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800840e:	fb0a c202 	mla	r2, sl, r2, ip
 8008412:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008416:	b289      	uxth	r1, r1
 8008418:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800841c:	4577      	cmp	r7, lr
 800841e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008422:	f849 1b04 	str.w	r1, [r9], #4
 8008426:	d8e3      	bhi.n	80083f0 <__multiply+0xb0>
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	f845 c002 	str.w	ip, [r5, r2]
 800842e:	9a03      	ldr	r2, [sp, #12]
 8008430:	3304      	adds	r3, #4
 8008432:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008436:	f1b9 0f00 	cmp.w	r9, #0
 800843a:	d020      	beq.n	800847e <__multiply+0x13e>
 800843c:	46ae      	mov	lr, r5
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	6829      	ldr	r1, [r5, #0]
 8008444:	f104 0c14 	add.w	ip, r4, #20
 8008448:	f8bc b000 	ldrh.w	fp, [ip]
 800844c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008450:	b289      	uxth	r1, r1
 8008452:	fb09 220b 	mla	r2, r9, fp, r2
 8008456:	4492      	add	sl, r2
 8008458:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800845c:	f84e 1b04 	str.w	r1, [lr], #4
 8008460:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008464:	f8be 1000 	ldrh.w	r1, [lr]
 8008468:	0c12      	lsrs	r2, r2, #16
 800846a:	fb09 1102 	mla	r1, r9, r2, r1
 800846e:	4567      	cmp	r7, ip
 8008470:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008474:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008478:	d8e6      	bhi.n	8008448 <__multiply+0x108>
 800847a:	9a01      	ldr	r2, [sp, #4]
 800847c:	50a9      	str	r1, [r5, r2]
 800847e:	3504      	adds	r5, #4
 8008480:	e79b      	b.n	80083ba <__multiply+0x7a>
 8008482:	3e01      	subs	r6, #1
 8008484:	e79d      	b.n	80083c2 <__multiply+0x82>
 8008486:	bf00      	nop
 8008488:	0800aa30 	.word	0x0800aa30
 800848c:	0800aabc 	.word	0x0800aabc

08008490 <__pow5mult>:
 8008490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008494:	4615      	mov	r5, r2
 8008496:	f012 0203 	ands.w	r2, r2, #3
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	d007      	beq.n	80084b0 <__pow5mult+0x20>
 80084a0:	4c25      	ldr	r4, [pc, #148]	; (8008538 <__pow5mult+0xa8>)
 80084a2:	3a01      	subs	r2, #1
 80084a4:	2300      	movs	r3, #0
 80084a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084aa:	f7ff fe55 	bl	8008158 <__multadd>
 80084ae:	4607      	mov	r7, r0
 80084b0:	10ad      	asrs	r5, r5, #2
 80084b2:	d03d      	beq.n	8008530 <__pow5mult+0xa0>
 80084b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084b6:	b97c      	cbnz	r4, 80084d8 <__pow5mult+0x48>
 80084b8:	2010      	movs	r0, #16
 80084ba:	f7fc fd8d 	bl	8004fd8 <malloc>
 80084be:	4602      	mov	r2, r0
 80084c0:	6270      	str	r0, [r6, #36]	; 0x24
 80084c2:	b928      	cbnz	r0, 80084d0 <__pow5mult+0x40>
 80084c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084c8:	4b1c      	ldr	r3, [pc, #112]	; (800853c <__pow5mult+0xac>)
 80084ca:	481d      	ldr	r0, [pc, #116]	; (8008540 <__pow5mult+0xb0>)
 80084cc:	f000 fc32 	bl	8008d34 <__assert_func>
 80084d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084d4:	6004      	str	r4, [r0, #0]
 80084d6:	60c4      	str	r4, [r0, #12]
 80084d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e0:	b94c      	cbnz	r4, 80084f6 <__pow5mult+0x66>
 80084e2:	f240 2171 	movw	r1, #625	; 0x271
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7ff ff14 	bl	8008314 <__i2b>
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	07eb      	lsls	r3, r5, #31
 80084fc:	d50a      	bpl.n	8008514 <__pow5mult+0x84>
 80084fe:	4639      	mov	r1, r7
 8008500:	4622      	mov	r2, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ff1c 	bl	8008340 <__multiply>
 8008508:	4680      	mov	r8, r0
 800850a:	4639      	mov	r1, r7
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff fe01 	bl	8008114 <_Bfree>
 8008512:	4647      	mov	r7, r8
 8008514:	106d      	asrs	r5, r5, #1
 8008516:	d00b      	beq.n	8008530 <__pow5mult+0xa0>
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	b938      	cbnz	r0, 800852c <__pow5mult+0x9c>
 800851c:	4622      	mov	r2, r4
 800851e:	4621      	mov	r1, r4
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff ff0d 	bl	8008340 <__multiply>
 8008526:	6020      	str	r0, [r4, #0]
 8008528:	f8c0 9000 	str.w	r9, [r0]
 800852c:	4604      	mov	r4, r0
 800852e:	e7e4      	b.n	80084fa <__pow5mult+0x6a>
 8008530:	4638      	mov	r0, r7
 8008532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008536:	bf00      	nop
 8008538:	0800ac08 	.word	0x0800ac08
 800853c:	0800a9be 	.word	0x0800a9be
 8008540:	0800aabc 	.word	0x0800aabc

08008544 <__lshift>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	460c      	mov	r4, r1
 800854a:	4607      	mov	r7, r0
 800854c:	4691      	mov	r9, r2
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6849      	ldr	r1, [r1, #4]
 8008552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800855c:	f108 0601 	add.w	r6, r8, #1
 8008560:	42b3      	cmp	r3, r6
 8008562:	db0b      	blt.n	800857c <__lshift+0x38>
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff fd95 	bl	8008094 <_Balloc>
 800856a:	4605      	mov	r5, r0
 800856c:	b948      	cbnz	r0, 8008582 <__lshift+0x3e>
 800856e:	4602      	mov	r2, r0
 8008570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008574:	4b29      	ldr	r3, [pc, #164]	; (800861c <__lshift+0xd8>)
 8008576:	482a      	ldr	r0, [pc, #168]	; (8008620 <__lshift+0xdc>)
 8008578:	f000 fbdc 	bl	8008d34 <__assert_func>
 800857c:	3101      	adds	r1, #1
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	e7ee      	b.n	8008560 <__lshift+0x1c>
 8008582:	2300      	movs	r3, #0
 8008584:	f100 0114 	add.w	r1, r0, #20
 8008588:	f100 0210 	add.w	r2, r0, #16
 800858c:	4618      	mov	r0, r3
 800858e:	4553      	cmp	r3, sl
 8008590:	db37      	blt.n	8008602 <__lshift+0xbe>
 8008592:	6920      	ldr	r0, [r4, #16]
 8008594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008598:	f104 0314 	add.w	r3, r4, #20
 800859c:	f019 091f 	ands.w	r9, r9, #31
 80085a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085a8:	d02f      	beq.n	800860a <__lshift+0xc6>
 80085aa:	468a      	mov	sl, r1
 80085ac:	f04f 0c00 	mov.w	ip, #0
 80085b0:	f1c9 0e20 	rsb	lr, r9, #32
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	fa02 f209 	lsl.w	r2, r2, r9
 80085ba:	ea42 020c 	orr.w	r2, r2, ip
 80085be:	f84a 2b04 	str.w	r2, [sl], #4
 80085c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c6:	4298      	cmp	r0, r3
 80085c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085cc:	d8f2      	bhi.n	80085b4 <__lshift+0x70>
 80085ce:	1b03      	subs	r3, r0, r4
 80085d0:	3b15      	subs	r3, #21
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	3304      	adds	r3, #4
 80085d8:	f104 0215 	add.w	r2, r4, #21
 80085dc:	4290      	cmp	r0, r2
 80085de:	bf38      	it	cc
 80085e0:	2304      	movcc	r3, #4
 80085e2:	f841 c003 	str.w	ip, [r1, r3]
 80085e6:	f1bc 0f00 	cmp.w	ip, #0
 80085ea:	d001      	beq.n	80085f0 <__lshift+0xac>
 80085ec:	f108 0602 	add.w	r6, r8, #2
 80085f0:	3e01      	subs	r6, #1
 80085f2:	4638      	mov	r0, r7
 80085f4:	4621      	mov	r1, r4
 80085f6:	612e      	str	r6, [r5, #16]
 80085f8:	f7ff fd8c 	bl	8008114 <_Bfree>
 80085fc:	4628      	mov	r0, r5
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	f842 0f04 	str.w	r0, [r2, #4]!
 8008606:	3301      	adds	r3, #1
 8008608:	e7c1      	b.n	800858e <__lshift+0x4a>
 800860a:	3904      	subs	r1, #4
 800860c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008610:	4298      	cmp	r0, r3
 8008612:	f841 2f04 	str.w	r2, [r1, #4]!
 8008616:	d8f9      	bhi.n	800860c <__lshift+0xc8>
 8008618:	e7ea      	b.n	80085f0 <__lshift+0xac>
 800861a:	bf00      	nop
 800861c:	0800aa30 	.word	0x0800aa30
 8008620:	0800aabc 	.word	0x0800aabc

08008624 <__mcmp>:
 8008624:	4603      	mov	r3, r0
 8008626:	690a      	ldr	r2, [r1, #16]
 8008628:	6900      	ldr	r0, [r0, #16]
 800862a:	b530      	push	{r4, r5, lr}
 800862c:	1a80      	subs	r0, r0, r2
 800862e:	d10d      	bne.n	800864c <__mcmp+0x28>
 8008630:	3314      	adds	r3, #20
 8008632:	3114      	adds	r1, #20
 8008634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800863c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008644:	4295      	cmp	r5, r2
 8008646:	d002      	beq.n	800864e <__mcmp+0x2a>
 8008648:	d304      	bcc.n	8008654 <__mcmp+0x30>
 800864a:	2001      	movs	r0, #1
 800864c:	bd30      	pop	{r4, r5, pc}
 800864e:	42a3      	cmp	r3, r4
 8008650:	d3f4      	bcc.n	800863c <__mcmp+0x18>
 8008652:	e7fb      	b.n	800864c <__mcmp+0x28>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	e7f8      	b.n	800864c <__mcmp+0x28>
	...

0800865c <__mdiff>:
 800865c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	460d      	mov	r5, r1
 8008662:	4607      	mov	r7, r0
 8008664:	4611      	mov	r1, r2
 8008666:	4628      	mov	r0, r5
 8008668:	4614      	mov	r4, r2
 800866a:	f7ff ffdb 	bl	8008624 <__mcmp>
 800866e:	1e06      	subs	r6, r0, #0
 8008670:	d111      	bne.n	8008696 <__mdiff+0x3a>
 8008672:	4631      	mov	r1, r6
 8008674:	4638      	mov	r0, r7
 8008676:	f7ff fd0d 	bl	8008094 <_Balloc>
 800867a:	4602      	mov	r2, r0
 800867c:	b928      	cbnz	r0, 800868a <__mdiff+0x2e>
 800867e:	f240 2132 	movw	r1, #562	; 0x232
 8008682:	4b3a      	ldr	r3, [pc, #232]	; (800876c <__mdiff+0x110>)
 8008684:	483a      	ldr	r0, [pc, #232]	; (8008770 <__mdiff+0x114>)
 8008686:	f000 fb55 	bl	8008d34 <__assert_func>
 800868a:	2301      	movs	r3, #1
 800868c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008690:	4610      	mov	r0, r2
 8008692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008696:	bfa4      	itt	ge
 8008698:	4623      	movge	r3, r4
 800869a:	462c      	movge	r4, r5
 800869c:	4638      	mov	r0, r7
 800869e:	6861      	ldr	r1, [r4, #4]
 80086a0:	bfa6      	itte	ge
 80086a2:	461d      	movge	r5, r3
 80086a4:	2600      	movge	r6, #0
 80086a6:	2601      	movlt	r6, #1
 80086a8:	f7ff fcf4 	bl	8008094 <_Balloc>
 80086ac:	4602      	mov	r2, r0
 80086ae:	b918      	cbnz	r0, 80086b8 <__mdiff+0x5c>
 80086b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086b4:	4b2d      	ldr	r3, [pc, #180]	; (800876c <__mdiff+0x110>)
 80086b6:	e7e5      	b.n	8008684 <__mdiff+0x28>
 80086b8:	f102 0814 	add.w	r8, r2, #20
 80086bc:	46c2      	mov	sl, r8
 80086be:	f04f 0c00 	mov.w	ip, #0
 80086c2:	6927      	ldr	r7, [r4, #16]
 80086c4:	60c6      	str	r6, [r0, #12]
 80086c6:	692e      	ldr	r6, [r5, #16]
 80086c8:	f104 0014 	add.w	r0, r4, #20
 80086cc:	f105 0914 	add.w	r9, r5, #20
 80086d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80086d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086d8:	3410      	adds	r4, #16
 80086da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80086de:	f859 3b04 	ldr.w	r3, [r9], #4
 80086e2:	fa1f f18b 	uxth.w	r1, fp
 80086e6:	448c      	add	ip, r1
 80086e8:	b299      	uxth	r1, r3
 80086ea:	0c1b      	lsrs	r3, r3, #16
 80086ec:	ebac 0101 	sub.w	r1, ip, r1
 80086f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086f8:	b289      	uxth	r1, r1
 80086fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80086fe:	454e      	cmp	r6, r9
 8008700:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008704:	f84a 3b04 	str.w	r3, [sl], #4
 8008708:	d8e7      	bhi.n	80086da <__mdiff+0x7e>
 800870a:	1b73      	subs	r3, r6, r5
 800870c:	3b15      	subs	r3, #21
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	3515      	adds	r5, #21
 8008714:	3304      	adds	r3, #4
 8008716:	42ae      	cmp	r6, r5
 8008718:	bf38      	it	cc
 800871a:	2304      	movcc	r3, #4
 800871c:	4418      	add	r0, r3
 800871e:	4443      	add	r3, r8
 8008720:	461e      	mov	r6, r3
 8008722:	4605      	mov	r5, r0
 8008724:	4575      	cmp	r5, lr
 8008726:	d30e      	bcc.n	8008746 <__mdiff+0xea>
 8008728:	f10e 0103 	add.w	r1, lr, #3
 800872c:	1a09      	subs	r1, r1, r0
 800872e:	f021 0103 	bic.w	r1, r1, #3
 8008732:	3803      	subs	r0, #3
 8008734:	4586      	cmp	lr, r0
 8008736:	bf38      	it	cc
 8008738:	2100      	movcc	r1, #0
 800873a:	4419      	add	r1, r3
 800873c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008740:	b18b      	cbz	r3, 8008766 <__mdiff+0x10a>
 8008742:	6117      	str	r7, [r2, #16]
 8008744:	e7a4      	b.n	8008690 <__mdiff+0x34>
 8008746:	f855 8b04 	ldr.w	r8, [r5], #4
 800874a:	fa1f f188 	uxth.w	r1, r8
 800874e:	4461      	add	r1, ip
 8008750:	140c      	asrs	r4, r1, #16
 8008752:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008756:	b289      	uxth	r1, r1
 8008758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800875c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008760:	f846 1b04 	str.w	r1, [r6], #4
 8008764:	e7de      	b.n	8008724 <__mdiff+0xc8>
 8008766:	3f01      	subs	r7, #1
 8008768:	e7e8      	b.n	800873c <__mdiff+0xe0>
 800876a:	bf00      	nop
 800876c:	0800aa30 	.word	0x0800aa30
 8008770:	0800aabc 	.word	0x0800aabc

08008774 <__ulp>:
 8008774:	4b11      	ldr	r3, [pc, #68]	; (80087bc <__ulp+0x48>)
 8008776:	400b      	ands	r3, r1
 8008778:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd02      	ble.n	8008786 <__ulp+0x12>
 8008780:	2000      	movs	r0, #0
 8008782:	4619      	mov	r1, r3
 8008784:	4770      	bx	lr
 8008786:	425b      	negs	r3, r3
 8008788:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800878c:	f04f 0000 	mov.w	r0, #0
 8008790:	f04f 0100 	mov.w	r1, #0
 8008794:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008798:	da04      	bge.n	80087a4 <__ulp+0x30>
 800879a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800879e:	fa43 f102 	asr.w	r1, r3, r2
 80087a2:	4770      	bx	lr
 80087a4:	f1a2 0314 	sub.w	r3, r2, #20
 80087a8:	2b1e      	cmp	r3, #30
 80087aa:	bfd6      	itet	le
 80087ac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80087b0:	2301      	movgt	r3, #1
 80087b2:	fa22 f303 	lsrle.w	r3, r2, r3
 80087b6:	4618      	mov	r0, r3
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	7ff00000 	.word	0x7ff00000

080087c0 <__b2d>:
 80087c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c4:	6907      	ldr	r7, [r0, #16]
 80087c6:	f100 0914 	add.w	r9, r0, #20
 80087ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80087ce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80087d2:	f1a7 0804 	sub.w	r8, r7, #4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff fd4e 	bl	8008278 <__hi0bits>
 80087dc:	f1c0 0320 	rsb	r3, r0, #32
 80087e0:	280a      	cmp	r0, #10
 80087e2:	600b      	str	r3, [r1, #0]
 80087e4:	491f      	ldr	r1, [pc, #124]	; (8008864 <__b2d+0xa4>)
 80087e6:	dc17      	bgt.n	8008818 <__b2d+0x58>
 80087e8:	45c1      	cmp	r9, r8
 80087ea:	bf28      	it	cs
 80087ec:	2200      	movcs	r2, #0
 80087ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80087f2:	fa26 f30c 	lsr.w	r3, r6, ip
 80087f6:	bf38      	it	cc
 80087f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80087fc:	ea43 0501 	orr.w	r5, r3, r1
 8008800:	f100 0315 	add.w	r3, r0, #21
 8008804:	fa06 f303 	lsl.w	r3, r6, r3
 8008808:	fa22 f20c 	lsr.w	r2, r2, ip
 800880c:	ea43 0402 	orr.w	r4, r3, r2
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008818:	45c1      	cmp	r9, r8
 800881a:	bf2e      	itee	cs
 800881c:	2200      	movcs	r2, #0
 800881e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008822:	f1a7 0808 	subcc.w	r8, r7, #8
 8008826:	f1b0 030b 	subs.w	r3, r0, #11
 800882a:	d016      	beq.n	800885a <__b2d+0x9a>
 800882c:	f1c3 0720 	rsb	r7, r3, #32
 8008830:	fa22 f107 	lsr.w	r1, r2, r7
 8008834:	45c8      	cmp	r8, r9
 8008836:	fa06 f603 	lsl.w	r6, r6, r3
 800883a:	ea46 0601 	orr.w	r6, r6, r1
 800883e:	bf94      	ite	ls
 8008840:	2100      	movls	r1, #0
 8008842:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008846:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800884a:	fa02 f003 	lsl.w	r0, r2, r3
 800884e:	40f9      	lsrs	r1, r7
 8008850:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008854:	ea40 0401 	orr.w	r4, r0, r1
 8008858:	e7da      	b.n	8008810 <__b2d+0x50>
 800885a:	4614      	mov	r4, r2
 800885c:	ea46 0501 	orr.w	r5, r6, r1
 8008860:	e7d6      	b.n	8008810 <__b2d+0x50>
 8008862:	bf00      	nop
 8008864:	3ff00000 	.word	0x3ff00000

08008868 <__d2b>:
 8008868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800886c:	2101      	movs	r1, #1
 800886e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008872:	4690      	mov	r8, r2
 8008874:	461d      	mov	r5, r3
 8008876:	f7ff fc0d 	bl	8008094 <_Balloc>
 800887a:	4604      	mov	r4, r0
 800887c:	b930      	cbnz	r0, 800888c <__d2b+0x24>
 800887e:	4602      	mov	r2, r0
 8008880:	f240 310a 	movw	r1, #778	; 0x30a
 8008884:	4b24      	ldr	r3, [pc, #144]	; (8008918 <__d2b+0xb0>)
 8008886:	4825      	ldr	r0, [pc, #148]	; (800891c <__d2b+0xb4>)
 8008888:	f000 fa54 	bl	8008d34 <__assert_func>
 800888c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008890:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008894:	bb2d      	cbnz	r5, 80088e2 <__d2b+0x7a>
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	f1b8 0300 	subs.w	r3, r8, #0
 800889c:	d026      	beq.n	80088ec <__d2b+0x84>
 800889e:	4668      	mov	r0, sp
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	f7ff fd09 	bl	80082b8 <__lo0bits>
 80088a6:	9900      	ldr	r1, [sp, #0]
 80088a8:	b1f0      	cbz	r0, 80088e8 <__d2b+0x80>
 80088aa:	9a01      	ldr	r2, [sp, #4]
 80088ac:	f1c0 0320 	rsb	r3, r0, #32
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	430b      	orrs	r3, r1
 80088b6:	40c2      	lsrs	r2, r0
 80088b8:	6163      	str	r3, [r4, #20]
 80088ba:	9201      	str	r2, [sp, #4]
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bf14      	ite	ne
 80088c2:	2102      	movne	r1, #2
 80088c4:	2101      	moveq	r1, #1
 80088c6:	61a3      	str	r3, [r4, #24]
 80088c8:	6121      	str	r1, [r4, #16]
 80088ca:	b1c5      	cbz	r5, 80088fe <__d2b+0x96>
 80088cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088d0:	4405      	add	r5, r0
 80088d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088d6:	603d      	str	r5, [r7, #0]
 80088d8:	6030      	str	r0, [r6, #0]
 80088da:	4620      	mov	r0, r4
 80088dc:	b002      	add	sp, #8
 80088de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e6:	e7d6      	b.n	8008896 <__d2b+0x2e>
 80088e8:	6161      	str	r1, [r4, #20]
 80088ea:	e7e7      	b.n	80088bc <__d2b+0x54>
 80088ec:	a801      	add	r0, sp, #4
 80088ee:	f7ff fce3 	bl	80082b8 <__lo0bits>
 80088f2:	2101      	movs	r1, #1
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	6121      	str	r1, [r4, #16]
 80088f8:	6163      	str	r3, [r4, #20]
 80088fa:	3020      	adds	r0, #32
 80088fc:	e7e5      	b.n	80088ca <__d2b+0x62>
 80088fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008902:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008906:	6038      	str	r0, [r7, #0]
 8008908:	6918      	ldr	r0, [r3, #16]
 800890a:	f7ff fcb5 	bl	8008278 <__hi0bits>
 800890e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008912:	6031      	str	r1, [r6, #0]
 8008914:	e7e1      	b.n	80088da <__d2b+0x72>
 8008916:	bf00      	nop
 8008918:	0800aa30 	.word	0x0800aa30
 800891c:	0800aabc 	.word	0x0800aabc

08008920 <__ratio>:
 8008920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	4688      	mov	r8, r1
 8008926:	4669      	mov	r1, sp
 8008928:	4681      	mov	r9, r0
 800892a:	f7ff ff49 	bl	80087c0 <__b2d>
 800892e:	460f      	mov	r7, r1
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4640      	mov	r0, r8
 8008936:	a901      	add	r1, sp, #4
 8008938:	f7ff ff42 	bl	80087c0 <__b2d>
 800893c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008940:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008944:	468b      	mov	fp, r1
 8008946:	eba3 0c02 	sub.w	ip, r3, r2
 800894a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfd5      	itete	le
 8008958:	460a      	movle	r2, r1
 800895a:	462a      	movgt	r2, r5
 800895c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008960:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008964:	bfd8      	it	le
 8008966:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800896a:	465b      	mov	r3, fp
 800896c:	4602      	mov	r2, r0
 800896e:	4639      	mov	r1, r7
 8008970:	4620      	mov	r0, r4
 8008972:	f7f7 ff47 	bl	8000804 <__aeabi_ddiv>
 8008976:	b003      	add	sp, #12
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800897c <__copybits>:
 800897c:	3901      	subs	r1, #1
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	1149      	asrs	r1, r1, #5
 8008982:	6914      	ldr	r4, [r2, #16]
 8008984:	3101      	adds	r1, #1
 8008986:	f102 0314 	add.w	r3, r2, #20
 800898a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800898e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008992:	1f05      	subs	r5, r0, #4
 8008994:	42a3      	cmp	r3, r4
 8008996:	d30c      	bcc.n	80089b2 <__copybits+0x36>
 8008998:	1aa3      	subs	r3, r4, r2
 800899a:	3b11      	subs	r3, #17
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	3211      	adds	r2, #17
 80089a2:	42a2      	cmp	r2, r4
 80089a4:	bf88      	it	hi
 80089a6:	2300      	movhi	r3, #0
 80089a8:	4418      	add	r0, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	4288      	cmp	r0, r1
 80089ae:	d305      	bcc.n	80089bc <__copybits+0x40>
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80089b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80089ba:	e7eb      	b.n	8008994 <__copybits+0x18>
 80089bc:	f840 3b04 	str.w	r3, [r0], #4
 80089c0:	e7f4      	b.n	80089ac <__copybits+0x30>

080089c2 <__any_on>:
 80089c2:	f100 0214 	add.w	r2, r0, #20
 80089c6:	6900      	ldr	r0, [r0, #16]
 80089c8:	114b      	asrs	r3, r1, #5
 80089ca:	4298      	cmp	r0, r3
 80089cc:	b510      	push	{r4, lr}
 80089ce:	db11      	blt.n	80089f4 <__any_on+0x32>
 80089d0:	dd0a      	ble.n	80089e8 <__any_on+0x26>
 80089d2:	f011 011f 	ands.w	r1, r1, #31
 80089d6:	d007      	beq.n	80089e8 <__any_on+0x26>
 80089d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089dc:	fa24 f001 	lsr.w	r0, r4, r1
 80089e0:	fa00 f101 	lsl.w	r1, r0, r1
 80089e4:	428c      	cmp	r4, r1
 80089e6:	d10b      	bne.n	8008a00 <__any_on+0x3e>
 80089e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d803      	bhi.n	80089f8 <__any_on+0x36>
 80089f0:	2000      	movs	r0, #0
 80089f2:	bd10      	pop	{r4, pc}
 80089f4:	4603      	mov	r3, r0
 80089f6:	e7f7      	b.n	80089e8 <__any_on+0x26>
 80089f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089fc:	2900      	cmp	r1, #0
 80089fe:	d0f5      	beq.n	80089ec <__any_on+0x2a>
 8008a00:	2001      	movs	r0, #1
 8008a02:	e7f6      	b.n	80089f2 <__any_on+0x30>

08008a04 <_calloc_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	fba1 5402 	umull	r5, r4, r1, r2
 8008a0a:	b934      	cbnz	r4, 8008a1a <_calloc_r+0x16>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7fc fb7d 	bl	800510c <_malloc_r>
 8008a12:	4606      	mov	r6, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <_calloc_r+0x1e>
 8008a16:	4630      	mov	r0, r6
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	220c      	movs	r2, #12
 8008a1c:	2600      	movs	r6, #0
 8008a1e:	6002      	str	r2, [r0, #0]
 8008a20:	e7f9      	b.n	8008a16 <_calloc_r+0x12>
 8008a22:	462a      	mov	r2, r5
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7fc fb01 	bl	800502c <memset>
 8008a2a:	e7f4      	b.n	8008a16 <_calloc_r+0x12>

08008a2c <__ssputs_r>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	688e      	ldr	r6, [r1, #8]
 8008a32:	4682      	mov	sl, r0
 8008a34:	429e      	cmp	r6, r3
 8008a36:	460c      	mov	r4, r1
 8008a38:	4690      	mov	r8, r2
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	d838      	bhi.n	8008ab0 <__ssputs_r+0x84>
 8008a3e:	898a      	ldrh	r2, [r1, #12]
 8008a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a44:	d032      	beq.n	8008aac <__ssputs_r+0x80>
 8008a46:	6825      	ldr	r5, [r4, #0]
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	eba5 0901 	sub.w	r9, r5, r1
 8008a50:	6965      	ldr	r5, [r4, #20]
 8008a52:	444b      	add	r3, r9
 8008a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a5c:	106d      	asrs	r5, r5, #1
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	bf38      	it	cc
 8008a62:	461d      	movcc	r5, r3
 8008a64:	0553      	lsls	r3, r2, #21
 8008a66:	d531      	bpl.n	8008acc <__ssputs_r+0xa0>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7fc fb4f 	bl	800510c <_malloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	b950      	cbnz	r0, 8008a88 <__ssputs_r+0x5c>
 8008a72:	230c      	movs	r3, #12
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	f8ca 3000 	str.w	r3, [sl]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	464a      	mov	r2, r9
 8008a8a:	6921      	ldr	r1, [r4, #16]
 8008a8c:	f7ff fae8 	bl	8008060 <memcpy>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	6126      	str	r6, [r4, #16]
 8008a9e:	444e      	add	r6, r9
 8008aa0:	6026      	str	r6, [r4, #0]
 8008aa2:	463e      	mov	r6, r7
 8008aa4:	6165      	str	r5, [r4, #20]
 8008aa6:	eba5 0509 	sub.w	r5, r5, r9
 8008aaa:	60a5      	str	r5, [r4, #8]
 8008aac:	42be      	cmp	r6, r7
 8008aae:	d900      	bls.n	8008ab2 <__ssputs_r+0x86>
 8008ab0:	463e      	mov	r6, r7
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	f7fc fa9e 	bl	8004ff8 <memmove>
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	2000      	movs	r0, #0
 8008ac0:	1b9b      	subs	r3, r3, r6
 8008ac2:	60a3      	str	r3, [r4, #8]
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	4433      	add	r3, r6
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	e7db      	b.n	8008a84 <__ssputs_r+0x58>
 8008acc:	462a      	mov	r2, r5
 8008ace:	f000 f964 	bl	8008d9a <_realloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1e1      	bne.n	8008a9c <__ssputs_r+0x70>
 8008ad8:	4650      	mov	r0, sl
 8008ada:	6921      	ldr	r1, [r4, #16]
 8008adc:	f7fc faae 	bl	800503c <_free_r>
 8008ae0:	e7c7      	b.n	8008a72 <__ssputs_r+0x46>
	...

08008ae4 <_svfiprintf_r>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4698      	mov	r8, r3
 8008aea:	898b      	ldrh	r3, [r1, #12]
 8008aec:	4607      	mov	r7, r0
 8008aee:	061b      	lsls	r3, r3, #24
 8008af0:	460d      	mov	r5, r1
 8008af2:	4614      	mov	r4, r2
 8008af4:	b09d      	sub	sp, #116	; 0x74
 8008af6:	d50e      	bpl.n	8008b16 <_svfiprintf_r+0x32>
 8008af8:	690b      	ldr	r3, [r1, #16]
 8008afa:	b963      	cbnz	r3, 8008b16 <_svfiprintf_r+0x32>
 8008afc:	2140      	movs	r1, #64	; 0x40
 8008afe:	f7fc fb05 	bl	800510c <_malloc_r>
 8008b02:	6028      	str	r0, [r5, #0]
 8008b04:	6128      	str	r0, [r5, #16]
 8008b06:	b920      	cbnz	r0, 8008b12 <_svfiprintf_r+0x2e>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e0d1      	b.n	8008cb6 <_svfiprintf_r+0x1d2>
 8008b12:	2340      	movs	r3, #64	; 0x40
 8008b14:	616b      	str	r3, [r5, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b20:	2330      	movs	r3, #48	; 0x30
 8008b22:	f04f 0901 	mov.w	r9, #1
 8008b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008cd0 <_svfiprintf_r+0x1ec>
 8008b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b32:	4623      	mov	r3, r4
 8008b34:	469a      	mov	sl, r3
 8008b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3a:	b10a      	cbz	r2, 8008b40 <_svfiprintf_r+0x5c>
 8008b3c:	2a25      	cmp	r2, #37	; 0x25
 8008b3e:	d1f9      	bne.n	8008b34 <_svfiprintf_r+0x50>
 8008b40:	ebba 0b04 	subs.w	fp, sl, r4
 8008b44:	d00b      	beq.n	8008b5e <_svfiprintf_r+0x7a>
 8008b46:	465b      	mov	r3, fp
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff6d 	bl	8008a2c <__ssputs_r>
 8008b52:	3001      	adds	r0, #1
 8008b54:	f000 80aa 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5a:	445a      	add	r2, fp
 8008b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 80a2 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b80:	4654      	mov	r4, sl
 8008b82:	2205      	movs	r2, #5
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	4851      	ldr	r0, [pc, #324]	; (8008cd0 <_svfiprintf_r+0x1ec>)
 8008b8a:	f7ff fa5b 	bl	8008044 <memchr>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	b9d8      	cbnz	r0, 8008bca <_svfiprintf_r+0xe6>
 8008b92:	06d0      	lsls	r0, r2, #27
 8008b94:	bf44      	itt	mi
 8008b96:	2320      	movmi	r3, #32
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9c:	0711      	lsls	r1, r2, #28
 8008b9e:	bf44      	itt	mi
 8008ba0:	232b      	movmi	r3, #43	; 0x2b
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8008baa:	2b2a      	cmp	r3, #42	; 0x2a
 8008bac:	d015      	beq.n	8008bda <_svfiprintf_r+0xf6>
 8008bae:	4654      	mov	r4, sl
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	9a07      	ldr	r2, [sp, #28]
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d94e      	bls.n	8008c62 <_svfiprintf_r+0x17e>
 8008bc4:	b1b0      	cbz	r0, 8008bf4 <_svfiprintf_r+0x110>
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	e014      	b.n	8008bf4 <_svfiprintf_r+0x110>
 8008bca:	eba0 0308 	sub.w	r3, r0, r8
 8008bce:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	46a2      	mov	sl, r4
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	e7d2      	b.n	8008b80 <_svfiprintf_r+0x9c>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9103      	str	r1, [sp, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfbb      	ittet	lt
 8008be6:	425b      	neglt	r3, r3
 8008be8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bec:	9307      	strge	r3, [sp, #28]
 8008bee:	9307      	strlt	r3, [sp, #28]
 8008bf0:	bfb8      	it	lt
 8008bf2:	9204      	strlt	r2, [sp, #16]
 8008bf4:	7823      	ldrb	r3, [r4, #0]
 8008bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf8:	d10c      	bne.n	8008c14 <_svfiprintf_r+0x130>
 8008bfa:	7863      	ldrb	r3, [r4, #1]
 8008bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfe:	d135      	bne.n	8008c6c <_svfiprintf_r+0x188>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	3402      	adds	r4, #2
 8008c04:	1d1a      	adds	r2, r3, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	9203      	str	r2, [sp, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bfb8      	it	lt
 8008c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008cd4 <_svfiprintf_r+0x1f0>
 8008c18:	2203      	movs	r2, #3
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	7821      	ldrb	r1, [r4, #0]
 8008c1e:	f7ff fa11 	bl	8008044 <memchr>
 8008c22:	b140      	cbz	r0, 8008c36 <_svfiprintf_r+0x152>
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	eba0 000a 	sub.w	r0, r0, sl
 8008c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	3401      	adds	r4, #1
 8008c32:	4303      	orrs	r3, r0
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3a:	2206      	movs	r2, #6
 8008c3c:	4826      	ldr	r0, [pc, #152]	; (8008cd8 <_svfiprintf_r+0x1f4>)
 8008c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c42:	f7ff f9ff 	bl	8008044 <memchr>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d038      	beq.n	8008cbc <_svfiprintf_r+0x1d8>
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <_svfiprintf_r+0x1f8>)
 8008c4c:	bb1b      	cbnz	r3, 8008c96 <_svfiprintf_r+0x1b2>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	3307      	adds	r3, #7
 8008c52:	f023 0307 	bic.w	r3, r3, #7
 8008c56:	3308      	adds	r3, #8
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5c:	4433      	add	r3, r6
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	e767      	b.n	8008b32 <_svfiprintf_r+0x4e>
 8008c62:	460c      	mov	r4, r1
 8008c64:	2001      	movs	r0, #1
 8008c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6a:	e7a5      	b.n	8008bb8 <_svfiprintf_r+0xd4>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f04f 0c0a 	mov.w	ip, #10
 8008c72:	4619      	mov	r1, r3
 8008c74:	3401      	adds	r4, #1
 8008c76:	9305      	str	r3, [sp, #20]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c7e:	3a30      	subs	r2, #48	; 0x30
 8008c80:	2a09      	cmp	r2, #9
 8008c82:	d903      	bls.n	8008c8c <_svfiprintf_r+0x1a8>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0c5      	beq.n	8008c14 <_svfiprintf_r+0x130>
 8008c88:	9105      	str	r1, [sp, #20]
 8008c8a:	e7c3      	b.n	8008c14 <_svfiprintf_r+0x130>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	2301      	movs	r3, #1
 8008c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c94:	e7f0      	b.n	8008c78 <_svfiprintf_r+0x194>
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <_svfiprintf_r+0x1fc>)
 8008ca0:	a904      	add	r1, sp, #16
 8008ca2:	f7fc fb45 	bl	8005330 <_printf_float>
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	4606      	mov	r6, r0
 8008caa:	d1d6      	bne.n	8008c5a <_svfiprintf_r+0x176>
 8008cac:	89ab      	ldrh	r3, [r5, #12]
 8008cae:	065b      	lsls	r3, r3, #25
 8008cb0:	f53f af2c 	bmi.w	8008b0c <_svfiprintf_r+0x28>
 8008cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb6:	b01d      	add	sp, #116	; 0x74
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <_svfiprintf_r+0x1fc>)
 8008cc6:	a904      	add	r1, sp, #16
 8008cc8:	f7fc fdce 	bl	8005868 <_printf_i>
 8008ccc:	e7eb      	b.n	8008ca6 <_svfiprintf_r+0x1c2>
 8008cce:	bf00      	nop
 8008cd0:	0800ac14 	.word	0x0800ac14
 8008cd4:	0800ac1a 	.word	0x0800ac1a
 8008cd8:	0800ac1e 	.word	0x0800ac1e
 8008cdc:	08005331 	.word	0x08005331
 8008ce0:	08008a2d 	.word	0x08008a2d

08008ce4 <nan>:
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	4901      	ldr	r1, [pc, #4]	; (8008cec <nan+0x8>)
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	7ff80000 	.word	0x7ff80000

08008cf0 <strncmp>:
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	b172      	cbz	r2, 8008d14 <strncmp+0x24>
 8008cf6:	3901      	subs	r1, #1
 8008cf8:	1884      	adds	r4, r0, r2
 8008cfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d02:	4290      	cmp	r0, r2
 8008d04:	d101      	bne.n	8008d0a <strncmp+0x1a>
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	d101      	bne.n	8008d0e <strncmp+0x1e>
 8008d0a:	1a80      	subs	r0, r0, r2
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d1f3      	bne.n	8008cfa <strncmp+0xa>
 8008d12:	e7fa      	b.n	8008d0a <strncmp+0x1a>
 8008d14:	4610      	mov	r0, r2
 8008d16:	e7f9      	b.n	8008d0c <strncmp+0x1c>

08008d18 <__ascii_wctomb>:
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	b141      	cbz	r1, 8008d30 <__ascii_wctomb+0x18>
 8008d1e:	2aff      	cmp	r2, #255	; 0xff
 8008d20:	d904      	bls.n	8008d2c <__ascii_wctomb+0x14>
 8008d22:	228a      	movs	r2, #138	; 0x8a
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	4770      	bx	lr
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	700a      	strb	r2, [r1, #0]
 8008d30:	4770      	bx	lr
	...

08008d34 <__assert_func>:
 8008d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d36:	4614      	mov	r4, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <__assert_func+0x2c>)
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68d8      	ldr	r0, [r3, #12]
 8008d42:	b14c      	cbz	r4, 8008d58 <__assert_func+0x24>
 8008d44:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <__assert_func+0x30>)
 8008d46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d4a:	9100      	str	r1, [sp, #0]
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	4906      	ldr	r1, [pc, #24]	; (8008d68 <__assert_func+0x34>)
 8008d50:	f000 f80e 	bl	8008d70 <fiprintf>
 8008d54:	f000 fa68 	bl	8009228 <abort>
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <__assert_func+0x38>)
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	e7f3      	b.n	8008d46 <__assert_func+0x12>
 8008d5e:	bf00      	nop
 8008d60:	20000040 	.word	0x20000040
 8008d64:	0800ac25 	.word	0x0800ac25
 8008d68:	0800ac32 	.word	0x0800ac32
 8008d6c:	0800ac60 	.word	0x0800ac60

08008d70 <fiprintf>:
 8008d70:	b40e      	push	{r1, r2, r3}
 8008d72:	b503      	push	{r0, r1, lr}
 8008d74:	4601      	mov	r1, r0
 8008d76:	ab03      	add	r3, sp, #12
 8008d78:	4805      	ldr	r0, [pc, #20]	; (8008d90 <fiprintf+0x20>)
 8008d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	f000 f861 	bl	8008e48 <_vfiprintf_r>
 8008d86:	b002      	add	sp, #8
 8008d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d8c:	b003      	add	sp, #12
 8008d8e:	4770      	bx	lr
 8008d90:	20000040 	.word	0x20000040

08008d94 <__retarget_lock_init_recursive>:
 8008d94:	4770      	bx	lr

08008d96 <__retarget_lock_acquire_recursive>:
 8008d96:	4770      	bx	lr

08008d98 <__retarget_lock_release_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <_realloc_r>:
 8008d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	4680      	mov	r8, r0
 8008da0:	4614      	mov	r4, r2
 8008da2:	460e      	mov	r6, r1
 8008da4:	b921      	cbnz	r1, 8008db0 <_realloc_r+0x16>
 8008da6:	4611      	mov	r1, r2
 8008da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	f7fc b9ae 	b.w	800510c <_malloc_r>
 8008db0:	b92a      	cbnz	r2, 8008dbe <_realloc_r+0x24>
 8008db2:	f7fc f943 	bl	800503c <_free_r>
 8008db6:	4625      	mov	r5, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbe:	f000 fc53 	bl	8009668 <_malloc_usable_size_r>
 8008dc2:	4284      	cmp	r4, r0
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	d802      	bhi.n	8008dce <_realloc_r+0x34>
 8008dc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dcc:	d812      	bhi.n	8008df4 <_realloc_r+0x5a>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	f7fc f99b 	bl	800510c <_malloc_r>
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0ed      	beq.n	8008db8 <_realloc_r+0x1e>
 8008ddc:	42bc      	cmp	r4, r7
 8008dde:	4622      	mov	r2, r4
 8008de0:	4631      	mov	r1, r6
 8008de2:	bf28      	it	cs
 8008de4:	463a      	movcs	r2, r7
 8008de6:	f7ff f93b 	bl	8008060 <memcpy>
 8008dea:	4631      	mov	r1, r6
 8008dec:	4640      	mov	r0, r8
 8008dee:	f7fc f925 	bl	800503c <_free_r>
 8008df2:	e7e1      	b.n	8008db8 <_realloc_r+0x1e>
 8008df4:	4635      	mov	r5, r6
 8008df6:	e7df      	b.n	8008db8 <_realloc_r+0x1e>

08008df8 <__sfputc_r>:
 8008df8:	6893      	ldr	r3, [r2, #8]
 8008dfa:	b410      	push	{r4}
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	6093      	str	r3, [r2, #8]
 8008e02:	da07      	bge.n	8008e14 <__sfputc_r+0x1c>
 8008e04:	6994      	ldr	r4, [r2, #24]
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	db01      	blt.n	8008e0e <__sfputc_r+0x16>
 8008e0a:	290a      	cmp	r1, #10
 8008e0c:	d102      	bne.n	8008e14 <__sfputc_r+0x1c>
 8008e0e:	bc10      	pop	{r4}
 8008e10:	f000 b94a 	b.w	80090a8 <__swbuf_r>
 8008e14:	6813      	ldr	r3, [r2, #0]
 8008e16:	1c58      	adds	r0, r3, #1
 8008e18:	6010      	str	r0, [r2, #0]
 8008e1a:	7019      	strb	r1, [r3, #0]
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	bc10      	pop	{r4}
 8008e20:	4770      	bx	lr

08008e22 <__sfputs_r>:
 8008e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	4614      	mov	r4, r2
 8008e2a:	18d5      	adds	r5, r2, r3
 8008e2c:	42ac      	cmp	r4, r5
 8008e2e:	d101      	bne.n	8008e34 <__sfputs_r+0x12>
 8008e30:	2000      	movs	r0, #0
 8008e32:	e007      	b.n	8008e44 <__sfputs_r+0x22>
 8008e34:	463a      	mov	r2, r7
 8008e36:	4630      	mov	r0, r6
 8008e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3c:	f7ff ffdc 	bl	8008df8 <__sfputc_r>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d1f3      	bne.n	8008e2c <__sfputs_r+0xa>
 8008e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e48 <_vfiprintf_r>:
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	4614      	mov	r4, r2
 8008e50:	4698      	mov	r8, r3
 8008e52:	4606      	mov	r6, r0
 8008e54:	b09d      	sub	sp, #116	; 0x74
 8008e56:	b118      	cbz	r0, 8008e60 <_vfiprintf_r+0x18>
 8008e58:	6983      	ldr	r3, [r0, #24]
 8008e5a:	b90b      	cbnz	r3, 8008e60 <_vfiprintf_r+0x18>
 8008e5c:	f000 fb02 	bl	8009464 <__sinit>
 8008e60:	4b89      	ldr	r3, [pc, #548]	; (8009088 <_vfiprintf_r+0x240>)
 8008e62:	429d      	cmp	r5, r3
 8008e64:	d11b      	bne.n	8008e9e <_vfiprintf_r+0x56>
 8008e66:	6875      	ldr	r5, [r6, #4]
 8008e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e6a:	07d9      	lsls	r1, r3, #31
 8008e6c:	d405      	bmi.n	8008e7a <_vfiprintf_r+0x32>
 8008e6e:	89ab      	ldrh	r3, [r5, #12]
 8008e70:	059a      	lsls	r2, r3, #22
 8008e72:	d402      	bmi.n	8008e7a <_vfiprintf_r+0x32>
 8008e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e76:	f7ff ff8e 	bl	8008d96 <__retarget_lock_acquire_recursive>
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	071b      	lsls	r3, r3, #28
 8008e7e:	d501      	bpl.n	8008e84 <_vfiprintf_r+0x3c>
 8008e80:	692b      	ldr	r3, [r5, #16]
 8008e82:	b9eb      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x78>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4630      	mov	r0, r6
 8008e88:	f000 f960 	bl	800914c <__swsetup_r>
 8008e8c:	b1c0      	cbz	r0, 8008ec0 <_vfiprintf_r+0x78>
 8008e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e90:	07dc      	lsls	r4, r3, #31
 8008e92:	d50e      	bpl.n	8008eb2 <_vfiprintf_r+0x6a>
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b01d      	add	sp, #116	; 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	4b7b      	ldr	r3, [pc, #492]	; (800908c <_vfiprintf_r+0x244>)
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	d101      	bne.n	8008ea8 <_vfiprintf_r+0x60>
 8008ea4:	68b5      	ldr	r5, [r6, #8]
 8008ea6:	e7df      	b.n	8008e68 <_vfiprintf_r+0x20>
 8008ea8:	4b79      	ldr	r3, [pc, #484]	; (8009090 <_vfiprintf_r+0x248>)
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	bf08      	it	eq
 8008eae:	68f5      	ldreq	r5, [r6, #12]
 8008eb0:	e7da      	b.n	8008e68 <_vfiprintf_r+0x20>
 8008eb2:	89ab      	ldrh	r3, [r5, #12]
 8008eb4:	0598      	lsls	r0, r3, #22
 8008eb6:	d4ed      	bmi.n	8008e94 <_vfiprintf_r+0x4c>
 8008eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eba:	f7ff ff6d 	bl	8008d98 <__retarget_lock_release_recursive>
 8008ebe:	e7e9      	b.n	8008e94 <_vfiprintf_r+0x4c>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec4:	2320      	movs	r3, #32
 8008ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eca:	2330      	movs	r3, #48	; 0x30
 8008ecc:	f04f 0901 	mov.w	r9, #1
 8008ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009094 <_vfiprintf_r+0x24c>
 8008ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008edc:	4623      	mov	r3, r4
 8008ede:	469a      	mov	sl, r3
 8008ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee4:	b10a      	cbz	r2, 8008eea <_vfiprintf_r+0xa2>
 8008ee6:	2a25      	cmp	r2, #37	; 0x25
 8008ee8:	d1f9      	bne.n	8008ede <_vfiprintf_r+0x96>
 8008eea:	ebba 0b04 	subs.w	fp, sl, r4
 8008eee:	d00b      	beq.n	8008f08 <_vfiprintf_r+0xc0>
 8008ef0:	465b      	mov	r3, fp
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7ff ff93 	bl	8008e22 <__sfputs_r>
 8008efc:	3001      	adds	r0, #1
 8008efe:	f000 80aa 	beq.w	8009056 <_vfiprintf_r+0x20e>
 8008f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f04:	445a      	add	r2, fp
 8008f06:	9209      	str	r2, [sp, #36]	; 0x24
 8008f08:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80a2 	beq.w	8009056 <_vfiprintf_r+0x20e>
 8008f12:	2300      	movs	r3, #0
 8008f14:	f04f 32ff 	mov.w	r2, #4294967295
 8008f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f1c:	f10a 0a01 	add.w	sl, sl, #1
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	9307      	str	r3, [sp, #28]
 8008f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f28:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2a:	4654      	mov	r4, sl
 8008f2c:	2205      	movs	r2, #5
 8008f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f32:	4858      	ldr	r0, [pc, #352]	; (8009094 <_vfiprintf_r+0x24c>)
 8008f34:	f7ff f886 	bl	8008044 <memchr>
 8008f38:	9a04      	ldr	r2, [sp, #16]
 8008f3a:	b9d8      	cbnz	r0, 8008f74 <_vfiprintf_r+0x12c>
 8008f3c:	06d1      	lsls	r1, r2, #27
 8008f3e:	bf44      	itt	mi
 8008f40:	2320      	movmi	r3, #32
 8008f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f46:	0713      	lsls	r3, r2, #28
 8008f48:	bf44      	itt	mi
 8008f4a:	232b      	movmi	r3, #43	; 0x2b
 8008f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f50:	f89a 3000 	ldrb.w	r3, [sl]
 8008f54:	2b2a      	cmp	r3, #42	; 0x2a
 8008f56:	d015      	beq.n	8008f84 <_vfiprintf_r+0x13c>
 8008f58:	4654      	mov	r4, sl
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f04f 0c0a 	mov.w	ip, #10
 8008f60:	9a07      	ldr	r2, [sp, #28]
 8008f62:	4621      	mov	r1, r4
 8008f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f68:	3b30      	subs	r3, #48	; 0x30
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d94e      	bls.n	800900c <_vfiprintf_r+0x1c4>
 8008f6e:	b1b0      	cbz	r0, 8008f9e <_vfiprintf_r+0x156>
 8008f70:	9207      	str	r2, [sp, #28]
 8008f72:	e014      	b.n	8008f9e <_vfiprintf_r+0x156>
 8008f74:	eba0 0308 	sub.w	r3, r0, r8
 8008f78:	fa09 f303 	lsl.w	r3, r9, r3
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	46a2      	mov	sl, r4
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	e7d2      	b.n	8008f2a <_vfiprintf_r+0xe2>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1d19      	adds	r1, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	9103      	str	r1, [sp, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfbb      	ittet	lt
 8008f90:	425b      	neglt	r3, r3
 8008f92:	f042 0202 	orrlt.w	r2, r2, #2
 8008f96:	9307      	strge	r3, [sp, #28]
 8008f98:	9307      	strlt	r3, [sp, #28]
 8008f9a:	bfb8      	it	lt
 8008f9c:	9204      	strlt	r2, [sp, #16]
 8008f9e:	7823      	ldrb	r3, [r4, #0]
 8008fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa2:	d10c      	bne.n	8008fbe <_vfiprintf_r+0x176>
 8008fa4:	7863      	ldrb	r3, [r4, #1]
 8008fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa8:	d135      	bne.n	8009016 <_vfiprintf_r+0x1ce>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	3402      	adds	r4, #2
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9203      	str	r2, [sp, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfb8      	it	lt
 8008fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009098 <_vfiprintf_r+0x250>
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	7821      	ldrb	r1, [r4, #0]
 8008fc8:	f7ff f83c 	bl	8008044 <memchr>
 8008fcc:	b140      	cbz	r0, 8008fe0 <_vfiprintf_r+0x198>
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	eba0 000a 	sub.w	r0, r0, sl
 8008fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd8:	9b04      	ldr	r3, [sp, #16]
 8008fda:	3401      	adds	r4, #1
 8008fdc:	4303      	orrs	r3, r0
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	482d      	ldr	r0, [pc, #180]	; (800909c <_vfiprintf_r+0x254>)
 8008fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fec:	f7ff f82a 	bl	8008044 <memchr>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d03f      	beq.n	8009074 <_vfiprintf_r+0x22c>
 8008ff4:	4b2a      	ldr	r3, [pc, #168]	; (80090a0 <_vfiprintf_r+0x258>)
 8008ff6:	bb1b      	cbnz	r3, 8009040 <_vfiprintf_r+0x1f8>
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	3307      	adds	r3, #7
 8008ffc:	f023 0307 	bic.w	r3, r3, #7
 8009000:	3308      	adds	r3, #8
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009006:	443b      	add	r3, r7
 8009008:	9309      	str	r3, [sp, #36]	; 0x24
 800900a:	e767      	b.n	8008edc <_vfiprintf_r+0x94>
 800900c:	460c      	mov	r4, r1
 800900e:	2001      	movs	r0, #1
 8009010:	fb0c 3202 	mla	r2, ip, r2, r3
 8009014:	e7a5      	b.n	8008f62 <_vfiprintf_r+0x11a>
 8009016:	2300      	movs	r3, #0
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4619      	mov	r1, r3
 800901e:	3401      	adds	r4, #1
 8009020:	9305      	str	r3, [sp, #20]
 8009022:	4620      	mov	r0, r4
 8009024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009028:	3a30      	subs	r2, #48	; 0x30
 800902a:	2a09      	cmp	r2, #9
 800902c:	d903      	bls.n	8009036 <_vfiprintf_r+0x1ee>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0c5      	beq.n	8008fbe <_vfiprintf_r+0x176>
 8009032:	9105      	str	r1, [sp, #20]
 8009034:	e7c3      	b.n	8008fbe <_vfiprintf_r+0x176>
 8009036:	4604      	mov	r4, r0
 8009038:	2301      	movs	r3, #1
 800903a:	fb0c 2101 	mla	r1, ip, r1, r2
 800903e:	e7f0      	b.n	8009022 <_vfiprintf_r+0x1da>
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	462a      	mov	r2, r5
 8009046:	4630      	mov	r0, r6
 8009048:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <_vfiprintf_r+0x25c>)
 800904a:	a904      	add	r1, sp, #16
 800904c:	f7fc f970 	bl	8005330 <_printf_float>
 8009050:	4607      	mov	r7, r0
 8009052:	1c78      	adds	r0, r7, #1
 8009054:	d1d6      	bne.n	8009004 <_vfiprintf_r+0x1bc>
 8009056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009058:	07d9      	lsls	r1, r3, #31
 800905a:	d405      	bmi.n	8009068 <_vfiprintf_r+0x220>
 800905c:	89ab      	ldrh	r3, [r5, #12]
 800905e:	059a      	lsls	r2, r3, #22
 8009060:	d402      	bmi.n	8009068 <_vfiprintf_r+0x220>
 8009062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009064:	f7ff fe98 	bl	8008d98 <__retarget_lock_release_recursive>
 8009068:	89ab      	ldrh	r3, [r5, #12]
 800906a:	065b      	lsls	r3, r3, #25
 800906c:	f53f af12 	bmi.w	8008e94 <_vfiprintf_r+0x4c>
 8009070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009072:	e711      	b.n	8008e98 <_vfiprintf_r+0x50>
 8009074:	ab03      	add	r3, sp, #12
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	462a      	mov	r2, r5
 800907a:	4630      	mov	r0, r6
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <_vfiprintf_r+0x25c>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	f7fc fbf2 	bl	8005868 <_printf_i>
 8009084:	e7e4      	b.n	8009050 <_vfiprintf_r+0x208>
 8009086:	bf00      	nop
 8009088:	0800ac84 	.word	0x0800ac84
 800908c:	0800aca4 	.word	0x0800aca4
 8009090:	0800ac64 	.word	0x0800ac64
 8009094:	0800ac14 	.word	0x0800ac14
 8009098:	0800ac1a 	.word	0x0800ac1a
 800909c:	0800ac1e 	.word	0x0800ac1e
 80090a0:	08005331 	.word	0x08005331
 80090a4:	08008e23 	.word	0x08008e23

080090a8 <__swbuf_r>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	460e      	mov	r6, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	4605      	mov	r5, r0
 80090b0:	b118      	cbz	r0, 80090ba <__swbuf_r+0x12>
 80090b2:	6983      	ldr	r3, [r0, #24]
 80090b4:	b90b      	cbnz	r3, 80090ba <__swbuf_r+0x12>
 80090b6:	f000 f9d5 	bl	8009464 <__sinit>
 80090ba:	4b21      	ldr	r3, [pc, #132]	; (8009140 <__swbuf_r+0x98>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d12b      	bne.n	8009118 <__swbuf_r+0x70>
 80090c0:	686c      	ldr	r4, [r5, #4]
 80090c2:	69a3      	ldr	r3, [r4, #24]
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	071a      	lsls	r2, r3, #28
 80090ca:	d52f      	bpl.n	800912c <__swbuf_r+0x84>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b36b      	cbz	r3, 800912c <__swbuf_r+0x84>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	b2f6      	uxtb	r6, r6
 80090d6:	1ac0      	subs	r0, r0, r3
 80090d8:	6963      	ldr	r3, [r4, #20]
 80090da:	4637      	mov	r7, r6
 80090dc:	4283      	cmp	r3, r0
 80090de:	dc04      	bgt.n	80090ea <__swbuf_r+0x42>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f92a 	bl	800933c <_fflush_r>
 80090e8:	bb30      	cbnz	r0, 8009138 <__swbuf_r+0x90>
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	3001      	adds	r0, #1
 80090ee:	3b01      	subs	r3, #1
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	701e      	strb	r6, [r3, #0]
 80090fa:	6963      	ldr	r3, [r4, #20]
 80090fc:	4283      	cmp	r3, r0
 80090fe:	d004      	beq.n	800910a <__swbuf_r+0x62>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	07db      	lsls	r3, r3, #31
 8009104:	d506      	bpl.n	8009114 <__swbuf_r+0x6c>
 8009106:	2e0a      	cmp	r6, #10
 8009108:	d104      	bne.n	8009114 <__swbuf_r+0x6c>
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f915 	bl	800933c <_fflush_r>
 8009112:	b988      	cbnz	r0, 8009138 <__swbuf_r+0x90>
 8009114:	4638      	mov	r0, r7
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <__swbuf_r+0x9c>)
 800911a:	429c      	cmp	r4, r3
 800911c:	d101      	bne.n	8009122 <__swbuf_r+0x7a>
 800911e:	68ac      	ldr	r4, [r5, #8]
 8009120:	e7cf      	b.n	80090c2 <__swbuf_r+0x1a>
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <__swbuf_r+0xa0>)
 8009124:	429c      	cmp	r4, r3
 8009126:	bf08      	it	eq
 8009128:	68ec      	ldreq	r4, [r5, #12]
 800912a:	e7ca      	b.n	80090c2 <__swbuf_r+0x1a>
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f80c 	bl	800914c <__swsetup_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	d0cb      	beq.n	80090d0 <__swbuf_r+0x28>
 8009138:	f04f 37ff 	mov.w	r7, #4294967295
 800913c:	e7ea      	b.n	8009114 <__swbuf_r+0x6c>
 800913e:	bf00      	nop
 8009140:	0800ac84 	.word	0x0800ac84
 8009144:	0800aca4 	.word	0x0800aca4
 8009148:	0800ac64 	.word	0x0800ac64

0800914c <__swsetup_r>:
 800914c:	4b32      	ldr	r3, [pc, #200]	; (8009218 <__swsetup_r+0xcc>)
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	4606      	mov	r6, r0
 8009154:	460c      	mov	r4, r1
 8009156:	b125      	cbz	r5, 8009162 <__swsetup_r+0x16>
 8009158:	69ab      	ldr	r3, [r5, #24]
 800915a:	b913      	cbnz	r3, 8009162 <__swsetup_r+0x16>
 800915c:	4628      	mov	r0, r5
 800915e:	f000 f981 	bl	8009464 <__sinit>
 8009162:	4b2e      	ldr	r3, [pc, #184]	; (800921c <__swsetup_r+0xd0>)
 8009164:	429c      	cmp	r4, r3
 8009166:	d10f      	bne.n	8009188 <__swsetup_r+0x3c>
 8009168:	686c      	ldr	r4, [r5, #4]
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009170:	0719      	lsls	r1, r3, #28
 8009172:	d42c      	bmi.n	80091ce <__swsetup_r+0x82>
 8009174:	06dd      	lsls	r5, r3, #27
 8009176:	d411      	bmi.n	800919c <__swsetup_r+0x50>
 8009178:	2309      	movs	r3, #9
 800917a:	6033      	str	r3, [r6, #0]
 800917c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	e03e      	b.n	8009206 <__swsetup_r+0xba>
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <__swsetup_r+0xd4>)
 800918a:	429c      	cmp	r4, r3
 800918c:	d101      	bne.n	8009192 <__swsetup_r+0x46>
 800918e:	68ac      	ldr	r4, [r5, #8]
 8009190:	e7eb      	b.n	800916a <__swsetup_r+0x1e>
 8009192:	4b24      	ldr	r3, [pc, #144]	; (8009224 <__swsetup_r+0xd8>)
 8009194:	429c      	cmp	r4, r3
 8009196:	bf08      	it	eq
 8009198:	68ec      	ldreq	r4, [r5, #12]
 800919a:	e7e6      	b.n	800916a <__swsetup_r+0x1e>
 800919c:	0758      	lsls	r0, r3, #29
 800919e:	d512      	bpl.n	80091c6 <__swsetup_r+0x7a>
 80091a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a2:	b141      	cbz	r1, 80091b6 <__swsetup_r+0x6a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__swsetup_r+0x66>
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7fb ff45 	bl	800503c <_free_r>
 80091b2:	2300      	movs	r3, #0
 80091b4:	6363      	str	r3, [r4, #52]	; 0x34
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	2300      	movs	r3, #0
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	b94b      	cbnz	r3, 80091e6 <__swsetup_r+0x9a>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091dc:	d003      	beq.n	80091e6 <__swsetup_r+0x9a>
 80091de:	4621      	mov	r1, r4
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 fa01 	bl	80095e8 <__smakebuf_r>
 80091e6:	89a0      	ldrh	r0, [r4, #12]
 80091e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ec:	f010 0301 	ands.w	r3, r0, #1
 80091f0:	d00a      	beq.n	8009208 <__swsetup_r+0xbc>
 80091f2:	2300      	movs	r3, #0
 80091f4:	60a3      	str	r3, [r4, #8]
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	425b      	negs	r3, r3
 80091fa:	61a3      	str	r3, [r4, #24]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	b943      	cbnz	r3, 8009212 <__swsetup_r+0xc6>
 8009200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009204:	d1ba      	bne.n	800917c <__swsetup_r+0x30>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	0781      	lsls	r1, r0, #30
 800920a:	bf58      	it	pl
 800920c:	6963      	ldrpl	r3, [r4, #20]
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	e7f4      	b.n	80091fc <__swsetup_r+0xb0>
 8009212:	2000      	movs	r0, #0
 8009214:	e7f7      	b.n	8009206 <__swsetup_r+0xba>
 8009216:	bf00      	nop
 8009218:	20000040 	.word	0x20000040
 800921c:	0800ac84 	.word	0x0800ac84
 8009220:	0800aca4 	.word	0x0800aca4
 8009224:	0800ac64 	.word	0x0800ac64

08009228 <abort>:
 8009228:	2006      	movs	r0, #6
 800922a:	b508      	push	{r3, lr}
 800922c:	f000 fa4c 	bl	80096c8 <raise>
 8009230:	2001      	movs	r0, #1
 8009232:	f7f9 fbfb 	bl	8002a2c <_exit>
	...

08009238 <__sflush_r>:
 8009238:	898a      	ldrh	r2, [r1, #12]
 800923a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923c:	4605      	mov	r5, r0
 800923e:	0710      	lsls	r0, r2, #28
 8009240:	460c      	mov	r4, r1
 8009242:	d457      	bmi.n	80092f4 <__sflush_r+0xbc>
 8009244:	684b      	ldr	r3, [r1, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dc04      	bgt.n	8009254 <__sflush_r+0x1c>
 800924a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	dc01      	bgt.n	8009254 <__sflush_r+0x1c>
 8009250:	2000      	movs	r0, #0
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009256:	2e00      	cmp	r6, #0
 8009258:	d0fa      	beq.n	8009250 <__sflush_r+0x18>
 800925a:	2300      	movs	r3, #0
 800925c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009260:	682f      	ldr	r7, [r5, #0]
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	d032      	beq.n	80092cc <__sflush_r+0x94>
 8009266:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	075a      	lsls	r2, r3, #29
 800926c:	d505      	bpl.n	800927a <__sflush_r+0x42>
 800926e:	6863      	ldr	r3, [r4, #4]
 8009270:	1ac0      	subs	r0, r0, r3
 8009272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009274:	b10b      	cbz	r3, 800927a <__sflush_r+0x42>
 8009276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009278:	1ac0      	subs	r0, r0, r3
 800927a:	2300      	movs	r3, #0
 800927c:	4602      	mov	r2, r0
 800927e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009280:	4628      	mov	r0, r5
 8009282:	6a21      	ldr	r1, [r4, #32]
 8009284:	47b0      	blx	r6
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	d106      	bne.n	800929a <__sflush_r+0x62>
 800928c:	6829      	ldr	r1, [r5, #0]
 800928e:	291d      	cmp	r1, #29
 8009290:	d82c      	bhi.n	80092ec <__sflush_r+0xb4>
 8009292:	4a29      	ldr	r2, [pc, #164]	; (8009338 <__sflush_r+0x100>)
 8009294:	40ca      	lsrs	r2, r1
 8009296:	07d6      	lsls	r6, r2, #31
 8009298:	d528      	bpl.n	80092ec <__sflush_r+0xb4>
 800929a:	2200      	movs	r2, #0
 800929c:	6062      	str	r2, [r4, #4]
 800929e:	6922      	ldr	r2, [r4, #16]
 80092a0:	04d9      	lsls	r1, r3, #19
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	d504      	bpl.n	80092b0 <__sflush_r+0x78>
 80092a6:	1c42      	adds	r2, r0, #1
 80092a8:	d101      	bne.n	80092ae <__sflush_r+0x76>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	b903      	cbnz	r3, 80092b0 <__sflush_r+0x78>
 80092ae:	6560      	str	r0, [r4, #84]	; 0x54
 80092b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b2:	602f      	str	r7, [r5, #0]
 80092b4:	2900      	cmp	r1, #0
 80092b6:	d0cb      	beq.n	8009250 <__sflush_r+0x18>
 80092b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092bc:	4299      	cmp	r1, r3
 80092be:	d002      	beq.n	80092c6 <__sflush_r+0x8e>
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7fb febb 	bl	800503c <_free_r>
 80092c6:	2000      	movs	r0, #0
 80092c8:	6360      	str	r0, [r4, #52]	; 0x34
 80092ca:	e7c2      	b.n	8009252 <__sflush_r+0x1a>
 80092cc:	6a21      	ldr	r1, [r4, #32]
 80092ce:	2301      	movs	r3, #1
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b0      	blx	r6
 80092d4:	1c41      	adds	r1, r0, #1
 80092d6:	d1c7      	bne.n	8009268 <__sflush_r+0x30>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0c4      	beq.n	8009268 <__sflush_r+0x30>
 80092de:	2b1d      	cmp	r3, #29
 80092e0:	d001      	beq.n	80092e6 <__sflush_r+0xae>
 80092e2:	2b16      	cmp	r3, #22
 80092e4:	d101      	bne.n	80092ea <__sflush_r+0xb2>
 80092e6:	602f      	str	r7, [r5, #0]
 80092e8:	e7b2      	b.n	8009250 <__sflush_r+0x18>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	e7ae      	b.n	8009252 <__sflush_r+0x1a>
 80092f4:	690f      	ldr	r7, [r1, #16]
 80092f6:	2f00      	cmp	r7, #0
 80092f8:	d0aa      	beq.n	8009250 <__sflush_r+0x18>
 80092fa:	0793      	lsls	r3, r2, #30
 80092fc:	bf18      	it	ne
 80092fe:	2300      	movne	r3, #0
 8009300:	680e      	ldr	r6, [r1, #0]
 8009302:	bf08      	it	eq
 8009304:	694b      	ldreq	r3, [r1, #20]
 8009306:	1bf6      	subs	r6, r6, r7
 8009308:	600f      	str	r7, [r1, #0]
 800930a:	608b      	str	r3, [r1, #8]
 800930c:	2e00      	cmp	r6, #0
 800930e:	dd9f      	ble.n	8009250 <__sflush_r+0x18>
 8009310:	4633      	mov	r3, r6
 8009312:	463a      	mov	r2, r7
 8009314:	4628      	mov	r0, r5
 8009316:	6a21      	ldr	r1, [r4, #32]
 8009318:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800931c:	47e0      	blx	ip
 800931e:	2800      	cmp	r0, #0
 8009320:	dc06      	bgt.n	8009330 <__sflush_r+0xf8>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	e790      	b.n	8009252 <__sflush_r+0x1a>
 8009330:	4407      	add	r7, r0
 8009332:	1a36      	subs	r6, r6, r0
 8009334:	e7ea      	b.n	800930c <__sflush_r+0xd4>
 8009336:	bf00      	nop
 8009338:	20400001 	.word	0x20400001

0800933c <_fflush_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	690b      	ldr	r3, [r1, #16]
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	b913      	cbnz	r3, 800934c <_fflush_r+0x10>
 8009346:	2500      	movs	r5, #0
 8009348:	4628      	mov	r0, r5
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	b118      	cbz	r0, 8009356 <_fflush_r+0x1a>
 800934e:	6983      	ldr	r3, [r0, #24]
 8009350:	b90b      	cbnz	r3, 8009356 <_fflush_r+0x1a>
 8009352:	f000 f887 	bl	8009464 <__sinit>
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <_fflush_r+0x6c>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d11b      	bne.n	8009394 <_fflush_r+0x58>
 800935c:	686c      	ldr	r4, [r5, #4]
 800935e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ef      	beq.n	8009346 <_fflush_r+0xa>
 8009366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009368:	07d0      	lsls	r0, r2, #31
 800936a:	d404      	bmi.n	8009376 <_fflush_r+0x3a>
 800936c:	0599      	lsls	r1, r3, #22
 800936e:	d402      	bmi.n	8009376 <_fflush_r+0x3a>
 8009370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009372:	f7ff fd10 	bl	8008d96 <__retarget_lock_acquire_recursive>
 8009376:	4628      	mov	r0, r5
 8009378:	4621      	mov	r1, r4
 800937a:	f7ff ff5d 	bl	8009238 <__sflush_r>
 800937e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009380:	4605      	mov	r5, r0
 8009382:	07da      	lsls	r2, r3, #31
 8009384:	d4e0      	bmi.n	8009348 <_fflush_r+0xc>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	059b      	lsls	r3, r3, #22
 800938a:	d4dd      	bmi.n	8009348 <_fflush_r+0xc>
 800938c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938e:	f7ff fd03 	bl	8008d98 <__retarget_lock_release_recursive>
 8009392:	e7d9      	b.n	8009348 <_fflush_r+0xc>
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <_fflush_r+0x70>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <_fflush_r+0x62>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7df      	b.n	800935e <_fflush_r+0x22>
 800939e:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <_fflush_r+0x74>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7da      	b.n	800935e <_fflush_r+0x22>
 80093a8:	0800ac84 	.word	0x0800ac84
 80093ac:	0800aca4 	.word	0x0800aca4
 80093b0:	0800ac64 	.word	0x0800ac64

080093b4 <std>:
 80093b4:	2300      	movs	r3, #0
 80093b6:	b510      	push	{r4, lr}
 80093b8:	4604      	mov	r4, r0
 80093ba:	e9c0 3300 	strd	r3, r3, [r0]
 80093be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093c2:	6083      	str	r3, [r0, #8]
 80093c4:	8181      	strh	r1, [r0, #12]
 80093c6:	6643      	str	r3, [r0, #100]	; 0x64
 80093c8:	81c2      	strh	r2, [r0, #14]
 80093ca:	6183      	str	r3, [r0, #24]
 80093cc:	4619      	mov	r1, r3
 80093ce:	2208      	movs	r2, #8
 80093d0:	305c      	adds	r0, #92	; 0x5c
 80093d2:	f7fb fe2b 	bl	800502c <memset>
 80093d6:	4b05      	ldr	r3, [pc, #20]	; (80093ec <std+0x38>)
 80093d8:	6224      	str	r4, [r4, #32]
 80093da:	6263      	str	r3, [r4, #36]	; 0x24
 80093dc:	4b04      	ldr	r3, [pc, #16]	; (80093f0 <std+0x3c>)
 80093de:	62a3      	str	r3, [r4, #40]	; 0x28
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <std+0x40>)
 80093e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <std+0x44>)
 80093e6:	6323      	str	r3, [r4, #48]	; 0x30
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	bf00      	nop
 80093ec:	08009701 	.word	0x08009701
 80093f0:	08009723 	.word	0x08009723
 80093f4:	0800975b 	.word	0x0800975b
 80093f8:	0800977f 	.word	0x0800977f

080093fc <_cleanup_r>:
 80093fc:	4901      	ldr	r1, [pc, #4]	; (8009404 <_cleanup_r+0x8>)
 80093fe:	f000 b8af 	b.w	8009560 <_fwalk_reent>
 8009402:	bf00      	nop
 8009404:	0800933d 	.word	0x0800933d

08009408 <__sfmoreglue>:
 8009408:	2268      	movs	r2, #104	; 0x68
 800940a:	b570      	push	{r4, r5, r6, lr}
 800940c:	1e4d      	subs	r5, r1, #1
 800940e:	4355      	muls	r5, r2
 8009410:	460e      	mov	r6, r1
 8009412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009416:	f7fb fe79 	bl	800510c <_malloc_r>
 800941a:	4604      	mov	r4, r0
 800941c:	b140      	cbz	r0, 8009430 <__sfmoreglue+0x28>
 800941e:	2100      	movs	r1, #0
 8009420:	e9c0 1600 	strd	r1, r6, [r0]
 8009424:	300c      	adds	r0, #12
 8009426:	60a0      	str	r0, [r4, #8]
 8009428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800942c:	f7fb fdfe 	bl	800502c <memset>
 8009430:	4620      	mov	r0, r4
 8009432:	bd70      	pop	{r4, r5, r6, pc}

08009434 <__sfp_lock_acquire>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__sfp_lock_acquire+0x8>)
 8009436:	f7ff bcae 	b.w	8008d96 <__retarget_lock_acquire_recursive>
 800943a:	bf00      	nop
 800943c:	2000070d 	.word	0x2000070d

08009440 <__sfp_lock_release>:
 8009440:	4801      	ldr	r0, [pc, #4]	; (8009448 <__sfp_lock_release+0x8>)
 8009442:	f7ff bca9 	b.w	8008d98 <__retarget_lock_release_recursive>
 8009446:	bf00      	nop
 8009448:	2000070d 	.word	0x2000070d

0800944c <__sinit_lock_acquire>:
 800944c:	4801      	ldr	r0, [pc, #4]	; (8009454 <__sinit_lock_acquire+0x8>)
 800944e:	f7ff bca2 	b.w	8008d96 <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	2000070e 	.word	0x2000070e

08009458 <__sinit_lock_release>:
 8009458:	4801      	ldr	r0, [pc, #4]	; (8009460 <__sinit_lock_release+0x8>)
 800945a:	f7ff bc9d 	b.w	8008d98 <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	2000070e 	.word	0x2000070e

08009464 <__sinit>:
 8009464:	b510      	push	{r4, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	f7ff fff0 	bl	800944c <__sinit_lock_acquire>
 800946c:	69a3      	ldr	r3, [r4, #24]
 800946e:	b11b      	cbz	r3, 8009478 <__sinit+0x14>
 8009470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009474:	f7ff bff0 	b.w	8009458 <__sinit_lock_release>
 8009478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800947c:	6523      	str	r3, [r4, #80]	; 0x50
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <__sinit+0x68>)
 8009480:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <__sinit+0x6c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	62a2      	str	r2, [r4, #40]	; 0x28
 8009486:	42a3      	cmp	r3, r4
 8009488:	bf08      	it	eq
 800948a:	2301      	moveq	r3, #1
 800948c:	4620      	mov	r0, r4
 800948e:	bf08      	it	eq
 8009490:	61a3      	streq	r3, [r4, #24]
 8009492:	f000 f81f 	bl	80094d4 <__sfp>
 8009496:	6060      	str	r0, [r4, #4]
 8009498:	4620      	mov	r0, r4
 800949a:	f000 f81b 	bl	80094d4 <__sfp>
 800949e:	60a0      	str	r0, [r4, #8]
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 f817 	bl	80094d4 <__sfp>
 80094a6:	2200      	movs	r2, #0
 80094a8:	2104      	movs	r1, #4
 80094aa:	60e0      	str	r0, [r4, #12]
 80094ac:	6860      	ldr	r0, [r4, #4]
 80094ae:	f7ff ff81 	bl	80093b4 <std>
 80094b2:	2201      	movs	r2, #1
 80094b4:	2109      	movs	r1, #9
 80094b6:	68a0      	ldr	r0, [r4, #8]
 80094b8:	f7ff ff7c 	bl	80093b4 <std>
 80094bc:	2202      	movs	r2, #2
 80094be:	2112      	movs	r1, #18
 80094c0:	68e0      	ldr	r0, [r4, #12]
 80094c2:	f7ff ff77 	bl	80093b4 <std>
 80094c6:	2301      	movs	r3, #1
 80094c8:	61a3      	str	r3, [r4, #24]
 80094ca:	e7d1      	b.n	8009470 <__sinit+0xc>
 80094cc:	0800a820 	.word	0x0800a820
 80094d0:	080093fd 	.word	0x080093fd

080094d4 <__sfp>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	4607      	mov	r7, r0
 80094d8:	f7ff ffac 	bl	8009434 <__sfp_lock_acquire>
 80094dc:	4b1e      	ldr	r3, [pc, #120]	; (8009558 <__sfp+0x84>)
 80094de:	681e      	ldr	r6, [r3, #0]
 80094e0:	69b3      	ldr	r3, [r6, #24]
 80094e2:	b913      	cbnz	r3, 80094ea <__sfp+0x16>
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff ffbd 	bl	8009464 <__sinit>
 80094ea:	3648      	adds	r6, #72	; 0x48
 80094ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	d503      	bpl.n	80094fc <__sfp+0x28>
 80094f4:	6833      	ldr	r3, [r6, #0]
 80094f6:	b30b      	cbz	r3, 800953c <__sfp+0x68>
 80094f8:	6836      	ldr	r6, [r6, #0]
 80094fa:	e7f7      	b.n	80094ec <__sfp+0x18>
 80094fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009500:	b9d5      	cbnz	r5, 8009538 <__sfp+0x64>
 8009502:	4b16      	ldr	r3, [pc, #88]	; (800955c <__sfp+0x88>)
 8009504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009508:	60e3      	str	r3, [r4, #12]
 800950a:	6665      	str	r5, [r4, #100]	; 0x64
 800950c:	f7ff fc42 	bl	8008d94 <__retarget_lock_init_recursive>
 8009510:	f7ff ff96 	bl	8009440 <__sfp_lock_release>
 8009514:	2208      	movs	r2, #8
 8009516:	4629      	mov	r1, r5
 8009518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800951c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009520:	6025      	str	r5, [r4, #0]
 8009522:	61a5      	str	r5, [r4, #24]
 8009524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009528:	f7fb fd80 	bl	800502c <memset>
 800952c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009534:	4620      	mov	r0, r4
 8009536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009538:	3468      	adds	r4, #104	; 0x68
 800953a:	e7d9      	b.n	80094f0 <__sfp+0x1c>
 800953c:	2104      	movs	r1, #4
 800953e:	4638      	mov	r0, r7
 8009540:	f7ff ff62 	bl	8009408 <__sfmoreglue>
 8009544:	4604      	mov	r4, r0
 8009546:	6030      	str	r0, [r6, #0]
 8009548:	2800      	cmp	r0, #0
 800954a:	d1d5      	bne.n	80094f8 <__sfp+0x24>
 800954c:	f7ff ff78 	bl	8009440 <__sfp_lock_release>
 8009550:	230c      	movs	r3, #12
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	e7ee      	b.n	8009534 <__sfp+0x60>
 8009556:	bf00      	nop
 8009558:	0800a820 	.word	0x0800a820
 800955c:	ffff0001 	.word	0xffff0001

08009560 <_fwalk_reent>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4606      	mov	r6, r0
 8009566:	4688      	mov	r8, r1
 8009568:	2700      	movs	r7, #0
 800956a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800956e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009572:	f1b9 0901 	subs.w	r9, r9, #1
 8009576:	d505      	bpl.n	8009584 <_fwalk_reent+0x24>
 8009578:	6824      	ldr	r4, [r4, #0]
 800957a:	2c00      	cmp	r4, #0
 800957c:	d1f7      	bne.n	800956e <_fwalk_reent+0xe>
 800957e:	4638      	mov	r0, r7
 8009580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009584:	89ab      	ldrh	r3, [r5, #12]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d907      	bls.n	800959a <_fwalk_reent+0x3a>
 800958a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800958e:	3301      	adds	r3, #1
 8009590:	d003      	beq.n	800959a <_fwalk_reent+0x3a>
 8009592:	4629      	mov	r1, r5
 8009594:	4630      	mov	r0, r6
 8009596:	47c0      	blx	r8
 8009598:	4307      	orrs	r7, r0
 800959a:	3568      	adds	r5, #104	; 0x68
 800959c:	e7e9      	b.n	8009572 <_fwalk_reent+0x12>

0800959e <__swhatbuf_r>:
 800959e:	b570      	push	{r4, r5, r6, lr}
 80095a0:	460e      	mov	r6, r1
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	4614      	mov	r4, r2
 80095a8:	2900      	cmp	r1, #0
 80095aa:	461d      	mov	r5, r3
 80095ac:	b096      	sub	sp, #88	; 0x58
 80095ae:	da08      	bge.n	80095c2 <__swhatbuf_r+0x24>
 80095b0:	2200      	movs	r2, #0
 80095b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095b6:	602a      	str	r2, [r5, #0]
 80095b8:	061a      	lsls	r2, r3, #24
 80095ba:	d410      	bmi.n	80095de <__swhatbuf_r+0x40>
 80095bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c0:	e00e      	b.n	80095e0 <__swhatbuf_r+0x42>
 80095c2:	466a      	mov	r2, sp
 80095c4:	f000 f902 	bl	80097cc <_fstat_r>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dbf1      	blt.n	80095b0 <__swhatbuf_r+0x12>
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095d6:	425a      	negs	r2, r3
 80095d8:	415a      	adcs	r2, r3
 80095da:	602a      	str	r2, [r5, #0]
 80095dc:	e7ee      	b.n	80095bc <__swhatbuf_r+0x1e>
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	2000      	movs	r0, #0
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	b016      	add	sp, #88	; 0x58
 80095e6:	bd70      	pop	{r4, r5, r6, pc}

080095e8 <__smakebuf_r>:
 80095e8:	898b      	ldrh	r3, [r1, #12]
 80095ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095ec:	079d      	lsls	r5, r3, #30
 80095ee:	4606      	mov	r6, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	d507      	bpl.n	8009604 <__smakebuf_r+0x1c>
 80095f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	2301      	movs	r3, #1
 80095fe:	6163      	str	r3, [r4, #20]
 8009600:	b002      	add	sp, #8
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	466a      	mov	r2, sp
 8009606:	ab01      	add	r3, sp, #4
 8009608:	f7ff ffc9 	bl	800959e <__swhatbuf_r>
 800960c:	9900      	ldr	r1, [sp, #0]
 800960e:	4605      	mov	r5, r0
 8009610:	4630      	mov	r0, r6
 8009612:	f7fb fd7b 	bl	800510c <_malloc_r>
 8009616:	b948      	cbnz	r0, 800962c <__smakebuf_r+0x44>
 8009618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800961c:	059a      	lsls	r2, r3, #22
 800961e:	d4ef      	bmi.n	8009600 <__smakebuf_r+0x18>
 8009620:	f023 0303 	bic.w	r3, r3, #3
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	e7e3      	b.n	80095f4 <__smakebuf_r+0xc>
 800962c:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <__smakebuf_r+0x7c>)
 800962e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	6020      	str	r0, [r4, #0]
 8009634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	6120      	str	r0, [r4, #16]
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	9b01      	ldr	r3, [sp, #4]
 8009642:	b15b      	cbz	r3, 800965c <__smakebuf_r+0x74>
 8009644:	4630      	mov	r0, r6
 8009646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800964a:	f000 f8d1 	bl	80097f0 <_isatty_r>
 800964e:	b128      	cbz	r0, 800965c <__smakebuf_r+0x74>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	89a0      	ldrh	r0, [r4, #12]
 800965e:	4305      	orrs	r5, r0
 8009660:	81a5      	strh	r5, [r4, #12]
 8009662:	e7cd      	b.n	8009600 <__smakebuf_r+0x18>
 8009664:	080093fd 	.word	0x080093fd

08009668 <_malloc_usable_size_r>:
 8009668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966c:	1f18      	subs	r0, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbc      	itt	lt
 8009672:	580b      	ldrlt	r3, [r1, r0]
 8009674:	18c0      	addlt	r0, r0, r3
 8009676:	4770      	bx	lr

08009678 <_raise_r>:
 8009678:	291f      	cmp	r1, #31
 800967a:	b538      	push	{r3, r4, r5, lr}
 800967c:	4604      	mov	r4, r0
 800967e:	460d      	mov	r5, r1
 8009680:	d904      	bls.n	800968c <_raise_r+0x14>
 8009682:	2316      	movs	r3, #22
 8009684:	6003      	str	r3, [r0, #0]
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800968e:	b112      	cbz	r2, 8009696 <_raise_r+0x1e>
 8009690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009694:	b94b      	cbnz	r3, 80096aa <_raise_r+0x32>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f830 	bl	80096fc <_getpid_r>
 800969c:	462a      	mov	r2, r5
 800969e:	4601      	mov	r1, r0
 80096a0:	4620      	mov	r0, r4
 80096a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096a6:	f000 b817 	b.w	80096d8 <_kill_r>
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d00a      	beq.n	80096c4 <_raise_r+0x4c>
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	d103      	bne.n	80096ba <_raise_r+0x42>
 80096b2:	2316      	movs	r3, #22
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	2001      	movs	r0, #1
 80096b8:	e7e7      	b.n	800968a <_raise_r+0x12>
 80096ba:	2400      	movs	r4, #0
 80096bc:	4628      	mov	r0, r5
 80096be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096c2:	4798      	blx	r3
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7e0      	b.n	800968a <_raise_r+0x12>

080096c8 <raise>:
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <raise+0xc>)
 80096ca:	4601      	mov	r1, r0
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f7ff bfd3 	b.w	8009678 <_raise_r>
 80096d2:	bf00      	nop
 80096d4:	20000040 	.word	0x20000040

080096d8 <_kill_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	2300      	movs	r3, #0
 80096dc:	4d06      	ldr	r5, [pc, #24]	; (80096f8 <_kill_r+0x20>)
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	4611      	mov	r1, r2
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	f7f9 f997 	bl	8002a18 <_kill>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	d102      	bne.n	80096f4 <_kill_r+0x1c>
 80096ee:	682b      	ldr	r3, [r5, #0]
 80096f0:	b103      	cbz	r3, 80096f4 <_kill_r+0x1c>
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	bd38      	pop	{r3, r4, r5, pc}
 80096f6:	bf00      	nop
 80096f8:	20000708 	.word	0x20000708

080096fc <_getpid_r>:
 80096fc:	f7f9 b98a 	b.w	8002a14 <_getpid>

08009700 <__sread>:
 8009700:	b510      	push	{r4, lr}
 8009702:	460c      	mov	r4, r1
 8009704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009708:	f000 f894 	bl	8009834 <_read_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	bfab      	itete	ge
 8009710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009712:	89a3      	ldrhlt	r3, [r4, #12]
 8009714:	181b      	addge	r3, r3, r0
 8009716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800971a:	bfac      	ite	ge
 800971c:	6563      	strge	r3, [r4, #84]	; 0x54
 800971e:	81a3      	strhlt	r3, [r4, #12]
 8009720:	bd10      	pop	{r4, pc}

08009722 <__swrite>:
 8009722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	461f      	mov	r7, r3
 8009728:	898b      	ldrh	r3, [r1, #12]
 800972a:	4605      	mov	r5, r0
 800972c:	05db      	lsls	r3, r3, #23
 800972e:	460c      	mov	r4, r1
 8009730:	4616      	mov	r6, r2
 8009732:	d505      	bpl.n	8009740 <__swrite+0x1e>
 8009734:	2302      	movs	r3, #2
 8009736:	2200      	movs	r2, #0
 8009738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973c:	f000 f868 	bl	8009810 <_lseek_r>
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	4632      	mov	r2, r6
 8009744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	4628      	mov	r0, r5
 800974c:	463b      	mov	r3, r7
 800974e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009756:	f000 b817 	b.w	8009788 <_write_r>

0800975a <__sseek>:
 800975a:	b510      	push	{r4, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009762:	f000 f855 	bl	8009810 <_lseek_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	bf15      	itete	ne
 800976c:	6560      	strne	r0, [r4, #84]	; 0x54
 800976e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009776:	81a3      	strheq	r3, [r4, #12]
 8009778:	bf18      	it	ne
 800977a:	81a3      	strhne	r3, [r4, #12]
 800977c:	bd10      	pop	{r4, pc}

0800977e <__sclose>:
 800977e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009782:	f000 b813 	b.w	80097ac <_close_r>
	...

08009788 <_write_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4604      	mov	r4, r0
 800978c:	4608      	mov	r0, r1
 800978e:	4611      	mov	r1, r2
 8009790:	2200      	movs	r2, #0
 8009792:	4d05      	ldr	r5, [pc, #20]	; (80097a8 <_write_r+0x20>)
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f7f9 f95c 	bl	8002a54 <_write>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_write_r+0x1e>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_write_r+0x1e>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20000708 	.word	0x20000708

080097ac <_close_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	2300      	movs	r3, #0
 80097b0:	4d05      	ldr	r5, [pc, #20]	; (80097c8 <_close_r+0x1c>)
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f9 f95a 	bl	8002a70 <_close>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_close_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_close_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20000708 	.word	0x20000708

080097cc <_fstat_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	2300      	movs	r3, #0
 80097d0:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_fstat_r+0x20>)
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	f7f9 f94d 	bl	8002a78 <_fstat>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d102      	bne.n	80097e8 <_fstat_r+0x1c>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	b103      	cbz	r3, 80097e8 <_fstat_r+0x1c>
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	bd38      	pop	{r3, r4, r5, pc}
 80097ea:	bf00      	nop
 80097ec:	20000708 	.word	0x20000708

080097f0 <_isatty_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	2300      	movs	r3, #0
 80097f4:	4d05      	ldr	r5, [pc, #20]	; (800980c <_isatty_r+0x1c>)
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f9 f942 	bl	8002a84 <_isatty>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_isatty_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_isatty_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20000708 	.word	0x20000708

08009810 <_lseek_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	4611      	mov	r1, r2
 8009818:	2200      	movs	r2, #0
 800981a:	4d05      	ldr	r5, [pc, #20]	; (8009830 <_lseek_r+0x20>)
 800981c:	602a      	str	r2, [r5, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	f7f9 f932 	bl	8002a88 <_lseek>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_lseek_r+0x1e>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_lseek_r+0x1e>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	20000708 	.word	0x20000708

08009834 <_read_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	2200      	movs	r2, #0
 800983e:	4d05      	ldr	r5, [pc, #20]	; (8009854 <_read_r+0x20>)
 8009840:	602a      	str	r2, [r5, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f7f9 f8f8 	bl	8002a38 <_read>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_read_r+0x1e>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_read_r+0x1e>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000708 	.word	0x20000708

08009858 <floor>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009860:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009864:	2e13      	cmp	r6, #19
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	4607      	mov	r7, r0
 800986c:	460c      	mov	r4, r1
 800986e:	4605      	mov	r5, r0
 8009870:	dc33      	bgt.n	80098da <floor+0x82>
 8009872:	2e00      	cmp	r6, #0
 8009874:	da14      	bge.n	80098a0 <floor+0x48>
 8009876:	a334      	add	r3, pc, #208	; (adr r3, 8009948 <floor+0xf0>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f7f6 fce2 	bl	8000244 <__adddf3>
 8009880:	2200      	movs	r2, #0
 8009882:	2300      	movs	r3, #0
 8009884:	f7f7 f924 	bl	8000ad0 <__aeabi_dcmpgt>
 8009888:	b138      	cbz	r0, 800989a <floor+0x42>
 800988a:	2c00      	cmp	r4, #0
 800988c:	da58      	bge.n	8009940 <floor+0xe8>
 800988e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009892:	431d      	orrs	r5, r3
 8009894:	d001      	beq.n	800989a <floor+0x42>
 8009896:	2500      	movs	r5, #0
 8009898:	4c2d      	ldr	r4, [pc, #180]	; (8009950 <floor+0xf8>)
 800989a:	4623      	mov	r3, r4
 800989c:	462f      	mov	r7, r5
 800989e:	e025      	b.n	80098ec <floor+0x94>
 80098a0:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <floor+0xfc>)
 80098a2:	fa42 f806 	asr.w	r8, r2, r6
 80098a6:	ea01 0208 	and.w	r2, r1, r8
 80098aa:	4302      	orrs	r2, r0
 80098ac:	d01e      	beq.n	80098ec <floor+0x94>
 80098ae:	a326      	add	r3, pc, #152	; (adr r3, 8009948 <floor+0xf0>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 fcc6 	bl	8000244 <__adddf3>
 80098b8:	2200      	movs	r2, #0
 80098ba:	2300      	movs	r3, #0
 80098bc:	f7f7 f908 	bl	8000ad0 <__aeabi_dcmpgt>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0ea      	beq.n	800989a <floor+0x42>
 80098c4:	2c00      	cmp	r4, #0
 80098c6:	bfbe      	ittt	lt
 80098c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80098cc:	fa43 f606 	asrlt.w	r6, r3, r6
 80098d0:	19a4      	addlt	r4, r4, r6
 80098d2:	2500      	movs	r5, #0
 80098d4:	ea24 0408 	bic.w	r4, r4, r8
 80098d8:	e7df      	b.n	800989a <floor+0x42>
 80098da:	2e33      	cmp	r6, #51	; 0x33
 80098dc:	dd0a      	ble.n	80098f4 <floor+0x9c>
 80098de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098e2:	d103      	bne.n	80098ec <floor+0x94>
 80098e4:	f7f6 fcae 	bl	8000244 <__adddf3>
 80098e8:	4607      	mov	r7, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4638      	mov	r0, r7
 80098ee:	4619      	mov	r1, r3
 80098f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295
 80098f8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80098fc:	fa22 f808 	lsr.w	r8, r2, r8
 8009900:	ea18 0f00 	tst.w	r8, r0
 8009904:	d0f2      	beq.n	80098ec <floor+0x94>
 8009906:	a310      	add	r3, pc, #64	; (adr r3, 8009948 <floor+0xf0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 fc9a 	bl	8000244 <__adddf3>
 8009910:	2200      	movs	r2, #0
 8009912:	2300      	movs	r3, #0
 8009914:	f7f7 f8dc 	bl	8000ad0 <__aeabi_dcmpgt>
 8009918:	2800      	cmp	r0, #0
 800991a:	d0be      	beq.n	800989a <floor+0x42>
 800991c:	2c00      	cmp	r4, #0
 800991e:	da02      	bge.n	8009926 <floor+0xce>
 8009920:	2e14      	cmp	r6, #20
 8009922:	d103      	bne.n	800992c <floor+0xd4>
 8009924:	3401      	adds	r4, #1
 8009926:	ea25 0508 	bic.w	r5, r5, r8
 800992a:	e7b6      	b.n	800989a <floor+0x42>
 800992c:	2301      	movs	r3, #1
 800992e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009932:	fa03 f606 	lsl.w	r6, r3, r6
 8009936:	4435      	add	r5, r6
 8009938:	42bd      	cmp	r5, r7
 800993a:	bf38      	it	cc
 800993c:	18e4      	addcc	r4, r4, r3
 800993e:	e7f2      	b.n	8009926 <floor+0xce>
 8009940:	2500      	movs	r5, #0
 8009942:	462c      	mov	r4, r5
 8009944:	e7a9      	b.n	800989a <floor+0x42>
 8009946:	bf00      	nop
 8009948:	8800759c 	.word	0x8800759c
 800994c:	7e37e43c 	.word	0x7e37e43c
 8009950:	bff00000 	.word	0xbff00000
 8009954:	000fffff 	.word	0x000fffff

08009958 <atan2>:
 8009958:	f000 b826 	b.w	80099a8 <__ieee754_atan2>

0800995c <sqrt>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	4606      	mov	r6, r0
 8009960:	460f      	mov	r7, r1
 8009962:	f000 f8f3 	bl	8009b4c <__ieee754_sqrt>
 8009966:	4632      	mov	r2, r6
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	463b      	mov	r3, r7
 800996e:	4630      	mov	r0, r6
 8009970:	4639      	mov	r1, r7
 8009972:	f7f7 f8b7 	bl	8000ae4 <__aeabi_dcmpun>
 8009976:	b990      	cbnz	r0, 800999e <sqrt+0x42>
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	4630      	mov	r0, r6
 800997e:	4639      	mov	r1, r7
 8009980:	f7f7 f888 	bl	8000a94 <__aeabi_dcmplt>
 8009984:	b158      	cbz	r0, 800999e <sqrt+0x42>
 8009986:	f7fb fafd 	bl	8004f84 <__errno>
 800998a:	2321      	movs	r3, #33	; 0x21
 800998c:	2200      	movs	r2, #0
 800998e:	6003      	str	r3, [r0, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	4610      	mov	r0, r2
 8009994:	4619      	mov	r1, r3
 8009996:	f7f6 ff35 	bl	8000804 <__aeabi_ddiv>
 800999a:	4604      	mov	r4, r0
 800999c:	460d      	mov	r5, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a4:	0000      	movs	r0, r0
	...

080099a8 <__ieee754_atan2>:
 80099a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4692      	mov	sl, r2
 80099ae:	4699      	mov	r9, r3
 80099b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099b4:	461f      	mov	r7, r3
 80099b6:	f1ca 0300 	rsb	r3, sl, #0
 80099ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009b40 <__ieee754_atan2+0x198>
 80099be:	ea43 030a 	orr.w	r3, r3, sl
 80099c2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80099c6:	4573      	cmp	r3, lr
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	d808      	bhi.n	80099e0 <__ieee754_atan2+0x38>
 80099ce:	4246      	negs	r6, r0
 80099d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099d4:	4306      	orrs	r6, r0
 80099d6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80099da:	4576      	cmp	r6, lr
 80099dc:	468c      	mov	ip, r1
 80099de:	d908      	bls.n	80099f2 <__ieee754_atan2+0x4a>
 80099e0:	4652      	mov	r2, sl
 80099e2:	464b      	mov	r3, r9
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc2c 	bl	8000244 <__adddf3>
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	e019      	b.n	8009a26 <__ieee754_atan2+0x7e>
 80099f2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80099f6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80099fa:	ea56 060a 	orrs.w	r6, r6, sl
 80099fe:	d103      	bne.n	8009a08 <__ieee754_atan2+0x60>
 8009a00:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	f000 b954 	b.w	8009cb0 <atan>
 8009a08:	17be      	asrs	r6, r7, #30
 8009a0a:	f006 0602 	and.w	r6, r6, #2
 8009a0e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009a12:	ea53 0100 	orrs.w	r1, r3, r0
 8009a16:	d10a      	bne.n	8009a2e <__ieee754_atan2+0x86>
 8009a18:	2e02      	cmp	r6, #2
 8009a1a:	d067      	beq.n	8009aec <__ieee754_atan2+0x144>
 8009a1c:	2e03      	cmp	r6, #3
 8009a1e:	d102      	bne.n	8009a26 <__ieee754_atan2+0x7e>
 8009a20:	a53b      	add	r5, pc, #236	; (adr r5, 8009b10 <__ieee754_atan2+0x168>)
 8009a22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2e:	ea52 010a 	orrs.w	r1, r2, sl
 8009a32:	d106      	bne.n	8009a42 <__ieee754_atan2+0x9a>
 8009a34:	f1bc 0f00 	cmp.w	ip, #0
 8009a38:	da63      	bge.n	8009b02 <__ieee754_atan2+0x15a>
 8009a3a:	a537      	add	r5, pc, #220	; (adr r5, 8009b18 <__ieee754_atan2+0x170>)
 8009a3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a40:	e7f1      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009a42:	4572      	cmp	r2, lr
 8009a44:	d10f      	bne.n	8009a66 <__ieee754_atan2+0xbe>
 8009a46:	4293      	cmp	r3, r2
 8009a48:	f106 36ff 	add.w	r6, r6, #4294967295
 8009a4c:	d107      	bne.n	8009a5e <__ieee754_atan2+0xb6>
 8009a4e:	2e02      	cmp	r6, #2
 8009a50:	d850      	bhi.n	8009af4 <__ieee754_atan2+0x14c>
 8009a52:	4b3c      	ldr	r3, [pc, #240]	; (8009b44 <__ieee754_atan2+0x19c>)
 8009a54:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a58:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009a5c:	e7e3      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009a5e:	2e02      	cmp	r6, #2
 8009a60:	d84c      	bhi.n	8009afc <__ieee754_atan2+0x154>
 8009a62:	4b39      	ldr	r3, [pc, #228]	; (8009b48 <__ieee754_atan2+0x1a0>)
 8009a64:	e7f6      	b.n	8009a54 <__ieee754_atan2+0xac>
 8009a66:	4573      	cmp	r3, lr
 8009a68:	d0e4      	beq.n	8009a34 <__ieee754_atan2+0x8c>
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009a70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a74:	da20      	bge.n	8009ab8 <__ieee754_atan2+0x110>
 8009a76:	2f00      	cmp	r7, #0
 8009a78:	da01      	bge.n	8009a7e <__ieee754_atan2+0xd6>
 8009a7a:	323c      	adds	r2, #60	; 0x3c
 8009a7c:	db20      	blt.n	8009ac0 <__ieee754_atan2+0x118>
 8009a7e:	4652      	mov	r2, sl
 8009a80:	464b      	mov	r3, r9
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7f6 febd 	bl	8000804 <__aeabi_ddiv>
 8009a8a:	f000 fa9b 	bl	8009fc4 <fabs>
 8009a8e:	f000 f90f 	bl	8009cb0 <atan>
 8009a92:	4604      	mov	r4, r0
 8009a94:	460d      	mov	r5, r1
 8009a96:	2e01      	cmp	r6, #1
 8009a98:	d015      	beq.n	8009ac6 <__ieee754_atan2+0x11e>
 8009a9a:	2e02      	cmp	r6, #2
 8009a9c:	d017      	beq.n	8009ace <__ieee754_atan2+0x126>
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d0c1      	beq.n	8009a26 <__ieee754_atan2+0x7e>
 8009aa2:	a31f      	add	r3, pc, #124	; (adr r3, 8009b20 <__ieee754_atan2+0x178>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	f7f6 fbc8 	bl	8000240 <__aeabi_dsub>
 8009ab0:	a31d      	add	r3, pc, #116	; (adr r3, 8009b28 <__ieee754_atan2+0x180>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	e016      	b.n	8009ae6 <__ieee754_atan2+0x13e>
 8009ab8:	a51d      	add	r5, pc, #116	; (adr r5, 8009b30 <__ieee754_atan2+0x188>)
 8009aba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009abe:	e7ea      	b.n	8009a96 <__ieee754_atan2+0xee>
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	e7e7      	b.n	8009a96 <__ieee754_atan2+0xee>
 8009ac6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009aca:	461d      	mov	r5, r3
 8009acc:	e7ab      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009ace:	a314      	add	r3, pc, #80	; (adr r3, 8009b20 <__ieee754_atan2+0x178>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fbb2 	bl	8000240 <__aeabi_dsub>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	a111      	add	r1, pc, #68	; (adr r1, 8009b28 <__ieee754_atan2+0x180>)
 8009ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae6:	f7f6 fbab 	bl	8000240 <__aeabi_dsub>
 8009aea:	e77f      	b.n	80099ec <__ieee754_atan2+0x44>
 8009aec:	a50e      	add	r5, pc, #56	; (adr r5, 8009b28 <__ieee754_atan2+0x180>)
 8009aee:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009af2:	e798      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009af4:	a510      	add	r5, pc, #64	; (adr r5, 8009b38 <__ieee754_atan2+0x190>)
 8009af6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009afa:	e794      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009afc:	2400      	movs	r4, #0
 8009afe:	2500      	movs	r5, #0
 8009b00:	e791      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009b02:	a50b      	add	r5, pc, #44	; (adr r5, 8009b30 <__ieee754_atan2+0x188>)
 8009b04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b08:	e78d      	b.n	8009a26 <__ieee754_atan2+0x7e>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	54442d18 	.word	0x54442d18
 8009b14:	c00921fb 	.word	0xc00921fb
 8009b18:	54442d18 	.word	0x54442d18
 8009b1c:	bff921fb 	.word	0xbff921fb
 8009b20:	33145c07 	.word	0x33145c07
 8009b24:	3ca1a626 	.word	0x3ca1a626
 8009b28:	54442d18 	.word	0x54442d18
 8009b2c:	400921fb 	.word	0x400921fb
 8009b30:	54442d18 	.word	0x54442d18
 8009b34:	3ff921fb 	.word	0x3ff921fb
 8009b38:	54442d18 	.word	0x54442d18
 8009b3c:	3fe921fb 	.word	0x3fe921fb
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	0800acc8 	.word	0x0800acc8
 8009b48:	0800ace0 	.word	0x0800ace0

08009b4c <__ieee754_sqrt>:
 8009b4c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009ca8 <__ieee754_sqrt+0x15c>
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	ea3c 0c01 	bics.w	ip, ip, r1
 8009b58:	4606      	mov	r6, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	460a      	mov	r2, r1
 8009b60:	4607      	mov	r7, r0
 8009b62:	4603      	mov	r3, r0
 8009b64:	d10f      	bne.n	8009b86 <__ieee754_sqrt+0x3a>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	f7f6 fd21 	bl	80005b0 <__aeabi_dmul>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4630      	mov	r0, r6
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fb65 	bl	8000244 <__adddf3>
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4629      	mov	r1, r5
 8009b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b86:	2900      	cmp	r1, #0
 8009b88:	dc0e      	bgt.n	8009ba8 <__ieee754_sqrt+0x5c>
 8009b8a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009b8e:	ea5c 0707 	orrs.w	r7, ip, r7
 8009b92:	d0f4      	beq.n	8009b7e <__ieee754_sqrt+0x32>
 8009b94:	b141      	cbz	r1, 8009ba8 <__ieee754_sqrt+0x5c>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	f7f6 fb51 	bl	8000240 <__aeabi_dsub>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	f7f6 fe2f 	bl	8000804 <__aeabi_ddiv>
 8009ba6:	e7e8      	b.n	8009b7a <__ieee754_sqrt+0x2e>
 8009ba8:	1521      	asrs	r1, r4, #20
 8009baa:	d075      	beq.n	8009c98 <__ieee754_sqrt+0x14c>
 8009bac:	07cc      	lsls	r4, r1, #31
 8009bae:	f04f 0400 	mov.w	r4, #0
 8009bb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009bb6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009bba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009bbe:	bf5e      	ittt	pl
 8009bc0:	0fd9      	lsrpl	r1, r3, #31
 8009bc2:	005b      	lslpl	r3, r3, #1
 8009bc4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009bc8:	0fd9      	lsrs	r1, r3, #31
 8009bca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009bce:	2516      	movs	r5, #22
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bd6:	107f      	asrs	r7, r7, #1
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	1846      	adds	r6, r0, r1
 8009bdc:	4296      	cmp	r6, r2
 8009bde:	bfde      	ittt	le
 8009be0:	1b92      	suble	r2, r2, r6
 8009be2:	1870      	addle	r0, r6, r1
 8009be4:	1864      	addle	r4, r4, r1
 8009be6:	0052      	lsls	r2, r2, #1
 8009be8:	3d01      	subs	r5, #1
 8009bea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009bee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009bf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009bf6:	d1f0      	bne.n	8009bda <__ieee754_sqrt+0x8e>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f04f 0e20 	mov.w	lr, #32
 8009bfe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009c02:	4282      	cmp	r2, r0
 8009c04:	eb06 0c05 	add.w	ip, r6, r5
 8009c08:	dc02      	bgt.n	8009c10 <__ieee754_sqrt+0xc4>
 8009c0a:	d113      	bne.n	8009c34 <__ieee754_sqrt+0xe8>
 8009c0c:	459c      	cmp	ip, r3
 8009c0e:	d811      	bhi.n	8009c34 <__ieee754_sqrt+0xe8>
 8009c10:	f1bc 0f00 	cmp.w	ip, #0
 8009c14:	eb0c 0506 	add.w	r5, ip, r6
 8009c18:	da43      	bge.n	8009ca2 <__ieee754_sqrt+0x156>
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	db41      	blt.n	8009ca2 <__ieee754_sqrt+0x156>
 8009c1e:	f100 0801 	add.w	r8, r0, #1
 8009c22:	1a12      	subs	r2, r2, r0
 8009c24:	4640      	mov	r0, r8
 8009c26:	459c      	cmp	ip, r3
 8009c28:	bf88      	it	hi
 8009c2a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009c2e:	eba3 030c 	sub.w	r3, r3, ip
 8009c32:	4431      	add	r1, r6
 8009c34:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009c38:	f1be 0e01 	subs.w	lr, lr, #1
 8009c3c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c48:	d1db      	bne.n	8009c02 <__ieee754_sqrt+0xb6>
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	d006      	beq.n	8009c5c <__ieee754_sqrt+0x110>
 8009c4e:	1c48      	adds	r0, r1, #1
 8009c50:	bf0b      	itete	eq
 8009c52:	4671      	moveq	r1, lr
 8009c54:	3101      	addne	r1, #1
 8009c56:	3401      	addeq	r4, #1
 8009c58:	f021 0101 	bicne.w	r1, r1, #1
 8009c5c:	1063      	asrs	r3, r4, #1
 8009c5e:	0849      	lsrs	r1, r1, #1
 8009c60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c64:	07e2      	lsls	r2, r4, #31
 8009c66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c6a:	bf48      	it	mi
 8009c6c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009c70:	460e      	mov	r6, r1
 8009c72:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009c76:	e782      	b.n	8009b7e <__ieee754_sqrt+0x32>
 8009c78:	0ada      	lsrs	r2, r3, #11
 8009c7a:	3815      	subs	r0, #21
 8009c7c:	055b      	lsls	r3, r3, #21
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d0fa      	beq.n	8009c78 <__ieee754_sqrt+0x12c>
 8009c82:	02d5      	lsls	r5, r2, #11
 8009c84:	d50a      	bpl.n	8009c9c <__ieee754_sqrt+0x150>
 8009c86:	f1c1 0420 	rsb	r4, r1, #32
 8009c8a:	fa23 f404 	lsr.w	r4, r3, r4
 8009c8e:	1e4d      	subs	r5, r1, #1
 8009c90:	408b      	lsls	r3, r1
 8009c92:	4322      	orrs	r2, r4
 8009c94:	1b41      	subs	r1, r0, r5
 8009c96:	e789      	b.n	8009bac <__ieee754_sqrt+0x60>
 8009c98:	4608      	mov	r0, r1
 8009c9a:	e7f0      	b.n	8009c7e <__ieee754_sqrt+0x132>
 8009c9c:	0052      	lsls	r2, r2, #1
 8009c9e:	3101      	adds	r1, #1
 8009ca0:	e7ef      	b.n	8009c82 <__ieee754_sqrt+0x136>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	e7bd      	b.n	8009c22 <__ieee754_sqrt+0xd6>
 8009ca6:	bf00      	nop
 8009ca8:	7ff00000 	.word	0x7ff00000
 8009cac:	00000000 	.word	0x00000000

08009cb0 <atan>:
 8009cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	4bb6      	ldr	r3, [pc, #728]	; (8009f90 <atan+0x2e0>)
 8009cb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	460d      	mov	r5, r1
 8009cc0:	468b      	mov	fp, r1
 8009cc2:	dd17      	ble.n	8009cf4 <atan+0x44>
 8009cc4:	4bb3      	ldr	r3, [pc, #716]	; (8009f94 <atan+0x2e4>)
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	dc01      	bgt.n	8009cce <atan+0x1e>
 8009cca:	d109      	bne.n	8009ce0 <atan+0x30>
 8009ccc:	b140      	cbz	r0, 8009ce0 <atan+0x30>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fab5 	bl	8000244 <__adddf3>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	460d      	mov	r5, r1
 8009cde:	e005      	b.n	8009cec <atan+0x3c>
 8009ce0:	f1bb 0f00 	cmp.w	fp, #0
 8009ce4:	4cac      	ldr	r4, [pc, #688]	; (8009f98 <atan+0x2e8>)
 8009ce6:	f300 8121 	bgt.w	8009f2c <atan+0x27c>
 8009cea:	4dac      	ldr	r5, [pc, #688]	; (8009f9c <atan+0x2ec>)
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf4:	4baa      	ldr	r3, [pc, #680]	; (8009fa0 <atan+0x2f0>)
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	dc11      	bgt.n	8009d1e <atan+0x6e>
 8009cfa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	dc0a      	bgt.n	8009d18 <atan+0x68>
 8009d02:	a38b      	add	r3, pc, #556	; (adr r3, 8009f30 <atan+0x280>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fa9c 	bl	8000244 <__adddf3>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4ba5      	ldr	r3, [pc, #660]	; (8009fa4 <atan+0x2f4>)
 8009d10:	f7f6 fede 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1e9      	bne.n	8009cec <atan+0x3c>
 8009d18:	f04f 3aff 	mov.w	sl, #4294967295
 8009d1c:	e027      	b.n	8009d6e <atan+0xbe>
 8009d1e:	f000 f951 	bl	8009fc4 <fabs>
 8009d22:	4ba1      	ldr	r3, [pc, #644]	; (8009fa8 <atan+0x2f8>)
 8009d24:	4604      	mov	r4, r0
 8009d26:	429e      	cmp	r6, r3
 8009d28:	460d      	mov	r5, r1
 8009d2a:	f300 80b8 	bgt.w	8009e9e <atan+0x1ee>
 8009d2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009d32:	429e      	cmp	r6, r3
 8009d34:	f300 809c 	bgt.w	8009e70 <atan+0x1c0>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	f7f6 fa82 	bl	8000244 <__adddf3>
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b98      	ldr	r3, [pc, #608]	; (8009fa4 <atan+0x2f4>)
 8009d44:	f7f6 fa7c 	bl	8000240 <__aeabi_dsub>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fa75 	bl	8000244 <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 fd4f 	bl	8000804 <__aeabi_ddiv>
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	4622      	mov	r2, r4
 8009d70:	462b      	mov	r3, r5
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fc1b 	bl	80005b0 <__aeabi_dmul>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4689      	mov	r9, r1
 8009d82:	f7f6 fc15 	bl	80005b0 <__aeabi_dmul>
 8009d86:	a36c      	add	r3, pc, #432	; (adr r3, 8009f38 <atan+0x288>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	f7f6 fc0e 	bl	80005b0 <__aeabi_dmul>
 8009d94:	a36a      	add	r3, pc, #424	; (adr r3, 8009f40 <atan+0x290>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	f7f6 fa53 	bl	8000244 <__adddf3>
 8009d9e:	4632      	mov	r2, r6
 8009da0:	463b      	mov	r3, r7
 8009da2:	f7f6 fc05 	bl	80005b0 <__aeabi_dmul>
 8009da6:	a368      	add	r3, pc, #416	; (adr r3, 8009f48 <atan+0x298>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fa4a 	bl	8000244 <__adddf3>
 8009db0:	4632      	mov	r2, r6
 8009db2:	463b      	mov	r3, r7
 8009db4:	f7f6 fbfc 	bl	80005b0 <__aeabi_dmul>
 8009db8:	a365      	add	r3, pc, #404	; (adr r3, 8009f50 <atan+0x2a0>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fa41 	bl	8000244 <__adddf3>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	f7f6 fbf3 	bl	80005b0 <__aeabi_dmul>
 8009dca:	a363      	add	r3, pc, #396	; (adr r3, 8009f58 <atan+0x2a8>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f7f6 fa38 	bl	8000244 <__adddf3>
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	f7f6 fbea 	bl	80005b0 <__aeabi_dmul>
 8009ddc:	a360      	add	r3, pc, #384	; (adr r3, 8009f60 <atan+0x2b0>)
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	f7f6 fa2f 	bl	8000244 <__adddf3>
 8009de6:	4642      	mov	r2, r8
 8009de8:	464b      	mov	r3, r9
 8009dea:	f7f6 fbe1 	bl	80005b0 <__aeabi_dmul>
 8009dee:	a35e      	add	r3, pc, #376	; (adr r3, 8009f68 <atan+0x2b8>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4680      	mov	r8, r0
 8009df6:	4689      	mov	r9, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fbd8 	bl	80005b0 <__aeabi_dmul>
 8009e00:	a35b      	add	r3, pc, #364	; (adr r3, 8009f70 <atan+0x2c0>)
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	f7f6 fa1b 	bl	8000240 <__aeabi_dsub>
 8009e0a:	4632      	mov	r2, r6
 8009e0c:	463b      	mov	r3, r7
 8009e0e:	f7f6 fbcf 	bl	80005b0 <__aeabi_dmul>
 8009e12:	a359      	add	r3, pc, #356	; (adr r3, 8009f78 <atan+0x2c8>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fa12 	bl	8000240 <__aeabi_dsub>
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	463b      	mov	r3, r7
 8009e20:	f7f6 fbc6 	bl	80005b0 <__aeabi_dmul>
 8009e24:	a356      	add	r3, pc, #344	; (adr r3, 8009f80 <atan+0x2d0>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7f6 fa09 	bl	8000240 <__aeabi_dsub>
 8009e2e:	4632      	mov	r2, r6
 8009e30:	463b      	mov	r3, r7
 8009e32:	f7f6 fbbd 	bl	80005b0 <__aeabi_dmul>
 8009e36:	a354      	add	r3, pc, #336	; (adr r3, 8009f88 <atan+0x2d8>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	f7f6 fa00 	bl	8000240 <__aeabi_dsub>
 8009e40:	4632      	mov	r2, r6
 8009e42:	463b      	mov	r3, r7
 8009e44:	f7f6 fbb4 	bl	80005b0 <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 f9f8 	bl	8000244 <__adddf3>
 8009e54:	4622      	mov	r2, r4
 8009e56:	462b      	mov	r3, r5
 8009e58:	f7f6 fbaa 	bl	80005b0 <__aeabi_dmul>
 8009e5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	d144      	bne.n	8009ef0 <atan+0x240>
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 f9e9 	bl	8000240 <__aeabi_dsub>
 8009e6e:	e734      	b.n	8009cda <atan+0x2a>
 8009e70:	2200      	movs	r2, #0
 8009e72:	4b4c      	ldr	r3, [pc, #304]	; (8009fa4 <atan+0x2f4>)
 8009e74:	f7f6 f9e4 	bl	8000240 <__aeabi_dsub>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	4b48      	ldr	r3, [pc, #288]	; (8009fa4 <atan+0x2f4>)
 8009e84:	f7f6 f9de 	bl	8000244 <__adddf3>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fcb8 	bl	8000804 <__aeabi_ddiv>
 8009e94:	f04f 0a01 	mov.w	sl, #1
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	e767      	b.n	8009d6e <atan+0xbe>
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <atan+0x2fc>)
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	da1a      	bge.n	8009eda <atan+0x22a>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <atan+0x300>)
 8009ea8:	f7f6 f9ca 	bl	8000240 <__aeabi_dsub>
 8009eac:	2200      	movs	r2, #0
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4b3e      	ldr	r3, [pc, #248]	; (8009fb0 <atan+0x300>)
 8009eb8:	f7f6 fb7a 	bl	80005b0 <__aeabi_dmul>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4b39      	ldr	r3, [pc, #228]	; (8009fa4 <atan+0x2f4>)
 8009ec0:	f7f6 f9c0 	bl	8000244 <__adddf3>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fc9a 	bl	8000804 <__aeabi_ddiv>
 8009ed0:	f04f 0a02 	mov.w	sl, #2
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	e749      	b.n	8009d6e <atan+0xbe>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	2000      	movs	r0, #0
 8009ee0:	4934      	ldr	r1, [pc, #208]	; (8009fb4 <atan+0x304>)
 8009ee2:	f7f6 fc8f 	bl	8000804 <__aeabi_ddiv>
 8009ee6:	f04f 0a03 	mov.w	sl, #3
 8009eea:	4604      	mov	r4, r0
 8009eec:	460d      	mov	r5, r1
 8009eee:	e73e      	b.n	8009d6e <atan+0xbe>
 8009ef0:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <atan+0x308>)
 8009ef2:	4e32      	ldr	r6, [pc, #200]	; (8009fbc <atan+0x30c>)
 8009ef4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ef8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009efc:	e9da 2300 	ldrd	r2, r3, [sl]
 8009f00:	f7f6 f99e 	bl	8000240 <__aeabi_dsub>
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	f7f6 f99a 	bl	8000240 <__aeabi_dsub>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009f14:	f7f6 f994 	bl	8000240 <__aeabi_dsub>
 8009f18:	f1bb 0f00 	cmp.w	fp, #0
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	460d      	mov	r5, r1
 8009f20:	f6bf aee4 	bge.w	8009cec <atan+0x3c>
 8009f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f28:	461d      	mov	r5, r3
 8009f2a:	e6df      	b.n	8009cec <atan+0x3c>
 8009f2c:	4d24      	ldr	r5, [pc, #144]	; (8009fc0 <atan+0x310>)
 8009f2e:	e6dd      	b.n	8009cec <atan+0x3c>
 8009f30:	8800759c 	.word	0x8800759c
 8009f34:	7e37e43c 	.word	0x7e37e43c
 8009f38:	e322da11 	.word	0xe322da11
 8009f3c:	3f90ad3a 	.word	0x3f90ad3a
 8009f40:	24760deb 	.word	0x24760deb
 8009f44:	3fa97b4b 	.word	0x3fa97b4b
 8009f48:	a0d03d51 	.word	0xa0d03d51
 8009f4c:	3fb10d66 	.word	0x3fb10d66
 8009f50:	c54c206e 	.word	0xc54c206e
 8009f54:	3fb745cd 	.word	0x3fb745cd
 8009f58:	920083ff 	.word	0x920083ff
 8009f5c:	3fc24924 	.word	0x3fc24924
 8009f60:	5555550d 	.word	0x5555550d
 8009f64:	3fd55555 	.word	0x3fd55555
 8009f68:	2c6a6c2f 	.word	0x2c6a6c2f
 8009f6c:	bfa2b444 	.word	0xbfa2b444
 8009f70:	52defd9a 	.word	0x52defd9a
 8009f74:	3fadde2d 	.word	0x3fadde2d
 8009f78:	af749a6d 	.word	0xaf749a6d
 8009f7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009f80:	fe231671 	.word	0xfe231671
 8009f84:	3fbc71c6 	.word	0x3fbc71c6
 8009f88:	9998ebc4 	.word	0x9998ebc4
 8009f8c:	3fc99999 	.word	0x3fc99999
 8009f90:	440fffff 	.word	0x440fffff
 8009f94:	7ff00000 	.word	0x7ff00000
 8009f98:	54442d18 	.word	0x54442d18
 8009f9c:	bff921fb 	.word	0xbff921fb
 8009fa0:	3fdbffff 	.word	0x3fdbffff
 8009fa4:	3ff00000 	.word	0x3ff00000
 8009fa8:	3ff2ffff 	.word	0x3ff2ffff
 8009fac:	40038000 	.word	0x40038000
 8009fb0:	3ff80000 	.word	0x3ff80000
 8009fb4:	bff00000 	.word	0xbff00000
 8009fb8:	0800ad18 	.word	0x0800ad18
 8009fbc:	0800acf8 	.word	0x0800acf8
 8009fc0:	3ff921fb 	.word	0x3ff921fb

08009fc4 <fabs>:
 8009fc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009fc8:	4770      	bx	lr
	...

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
