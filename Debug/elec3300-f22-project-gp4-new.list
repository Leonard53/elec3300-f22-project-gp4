
elec3300-f22-project-gp4-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d084  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  0800d270  0800d270  0001d270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e000  0800e000  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800e000  0800e000  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e000  0800e000  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e000  0800e000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e004  0800e004  0001e004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e008  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000218  0800e21c  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800e21c  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caee  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ab  00000000  00000000  0002cd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5a1  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f93  00000000  00000000  0004bf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c1f9  00000000  00000000  0005cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  000f9178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000218 	.word	0x20000218
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d254 	.word	0x0800d254

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000021c 	.word	0x2000021c
 8000224:	0800d254 	.word	0x0800d254

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <HueToRGB565>:

void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);

uint16_t HueToRGB565(uint8_t hue) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    uint16_t portion = hue * 6;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	81fb      	strh	r3, [r7, #14]

    if (portion < 256) { // 0 <= degree < 60
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d81f      	bhi.n	8000d0e <HueToRGB565+0x5e>
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc03 	bl	80004dc <__aeabi_i2d>
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000cdc:	f7ff fd92 	bl	8000804 <__aeabi_ddiv>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <HueToRGB565+0x1f4>)
 8000cee:	f7ff fc5f 	bl	80005b0 <__aeabi_dmul>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f7ff ff09 	bl	8000b10 <__aeabi_d2iz>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	e0c4      	b.n	8000e98 <HueToRGB565+0x1e8>
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d14:	d224      	bcs.n	8000d60 <HueToRGB565+0xb0>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fbdd 	bl	80004dc <__aeabi_i2d>
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000d28:	f7ff fd6c 	bl	8000804 <__aeabi_ddiv>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <HueToRGB565+0x1f8>)
 8000d3a:	f7ff fc39 	bl	80005b0 <__aeabi_dmul>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff fee3 	bl	8000b10 <__aeabi_d2iz>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f1c3 031f 	rsb	r3, r3, #31
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	02db      	lsls	r3, r3, #11
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	e09b      	b.n	8000e98 <HueToRGB565+0x1e8>
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d66:	d21f      	bcs.n	8000da8 <HueToRGB565+0xf8>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fbb4 	bl	80004dc <__aeabi_i2d>
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000d7a:	f7ff fd43 	bl	8000804 <__aeabi_ddiv>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HueToRGB565+0x1f8>)
 8000d8c:	f7ff fc10 	bl	80005b0 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff feba 	bl	8000b10 <__aeabi_d2iz>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	e077      	b.n	8000e98 <HueToRGB565+0x1e8>
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8000da8:	89fb      	ldrh	r3, [r7, #14]
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d223      	bcs.n	8000df8 <HueToRGB565+0x148>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb90 	bl	80004dc <__aeabi_i2d>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000dc2:	f7ff fd1f 	bl	8000804 <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <HueToRGB565+0x1f4>)
 8000dd4:	f7ff fbec 	bl	80005b0 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fe96 	bl	8000b10 <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	331f      	adds	r3, #31
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	e04f      	b.n	8000e98 <HueToRGB565+0x1e8>
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8000df8:	89fb      	ldrh	r3, [r7, #14]
 8000dfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dfe:	d220      	bcs.n	8000e42 <HueToRGB565+0x192>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fb68 	bl	80004dc <__aeabi_i2d>
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000e12:	f7ff fcf7 	bl	8000804 <__aeabi_ddiv>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HueToRGB565+0x1f8>)
 8000e24:	f7ff fbc4 	bl	80005b0 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fe6e 	bl	8000b10 <__aeabi_d2iz>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	02db      	lsls	r3, r3, #11
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	331f      	adds	r3, #31
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	e02a      	b.n	8000e98 <HueToRGB565+0x1e8>
    } else if (portion < 256 * 6) { // 300 <= degree < 360
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e48:	d226      	bcs.n	8000e98 <HueToRGB565+0x1e8>
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb43 	bl	80004dc <__aeabi_i2d>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HueToRGB565+0x1f0>)
 8000e5c:	f7ff fcd2 	bl	8000804 <__aeabi_ddiv>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HueToRGB565+0x1f8>)
 8000e6e:	f7ff fb9f 	bl	80005b0 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <HueToRGB565+0x1fc>)
 8000e7c:	f7ff f9e0 	bl	8000240 <__aeabi_dsub>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fe42 	bl	8000b10 <__aeabi_d2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	e7ff      	b.n	8000e98 <HueToRGB565+0x1e8>
    }
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40700000 	.word	0x40700000
 8000ea4:	40500000 	.word	0x40500000
 8000ea8:	40400000 	.word	0x40400000
 8000eac:	403f0000 	.word	0x403f0000

08000eb0 <Delay>:


void Delay(__IO uint32_t nCount) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    for (; nCount != 0; nCount--);
 8000eb8:	e002      	b.n	8000ec0 <Delay+0x10>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <Delay+0xa>
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <LCD_INIT>:

void LCD_INIT(void) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af02      	add	r7, sp, #8
    LCD_BackLed_Control(ENABLE);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 f829 	bl	8000f30 <LCD_BackLed_Control>
    LCD_Rst();
 8000ede:	f000 f80f 	bl	8000f00 <LCD_Rst>
    LCD_REG_Config();
 8000ee2:	f000 f85f 	bl	8000fa4 <LCD_REG_Config>
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eee:	22f0      	movs	r2, #240	; 0xf0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f9e7 	bl	80012c6 <LCD_Clear>
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <LCD_Rst>:


void LCD_Rst(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <LCD_Rst+0x28>)
 8000f0a:	f004 fc3a 	bl	8005782 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <LCD_Rst+0x2c>)
 8000f10:	f7ff ffce 	bl	8000eb0 <Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <LCD_Rst+0x28>)
 8000f1a:	f004 fc32 	bl	8005782 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <LCD_Rst+0x2c>)
 8000f20:	f7ff ffc6 	bl	8000eb0 <Delay>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40011800 	.word	0x40011800
 8000f2c:	0002bffc 	.word	0x0002bffc

08000f30 <LCD_BackLed_Control>:


void LCD_BackLed_Control(FunctionalState enumState) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    if (enumState)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <LCD_BackLed_Control+0x1e>
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <LCD_BackLed_Control+0x34>)
 8000f48:	f004 fc1b 	bl	8005782 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}
 8000f4c:	e005      	b.n	8000f5a <LCD_BackLed_Control+0x2a>
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <LCD_BackLed_Control+0x34>)
 8000f56:	f004 fc14 	bl	8005782 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40011400 	.word	0x40011400

08000f68 <LCD_Write_Cmd>:


void LCD_Write_Cmd(uint16_t usCmd) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f72:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	8013      	strh	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LCD_Write_Data>:


void LCD_Write_Data(uint16_t usData) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <LCD_Write_Data+0x1c>)
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	8013      	strh	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	60020000 	.word	0x60020000

08000fa4 <LCD_REG_Config>:
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    /*  Power control B (CFh)  */
    DEBUG_DELAY  ();
    LCD_Write_Cmd(0xCF);
 8000fa8:	20cf      	movs	r0, #207	; 0xcf
 8000faa:	f7ff ffdd 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff ffe8 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8000fb4:	2081      	movs	r0, #129	; 0x81
 8000fb6:	f7ff ffe5 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8000fba:	2030      	movs	r0, #48	; 0x30
 8000fbc:	f7ff ffe2 	bl	8000f84 <LCD_Write_Data>

    /*  Power on sequence control (EDh) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xED);
 8000fc0:	20ed      	movs	r0, #237	; 0xed
 8000fc2:	f7ff ffd1 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f7ff ffdc 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff ffd9 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8000fd2:	2012      	movs	r0, #18
 8000fd4:	f7ff ffd6 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8000fd8:	2081      	movs	r0, #129	; 0x81
 8000fda:	f7ff ffd3 	bl	8000f84 <LCD_Write_Data>

    /*  Driver timing control A (E8h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xE8);
 8000fde:	20e8      	movs	r0, #232	; 0xe8
 8000fe0:	f7ff ffc2 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8000fe4:	2085      	movs	r0, #133	; 0x85
 8000fe6:	f7ff ffcd 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8000fea:	2010      	movs	r0, #16
 8000fec:	f7ff ffca 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8000ff0:	2078      	movs	r0, #120	; 0x78
 8000ff2:	f7ff ffc7 	bl	8000f84 <LCD_Write_Data>

    /*  Power control A (CBh) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xCB);
 8000ff6:	20cb      	movs	r0, #203	; 0xcb
 8000ff8:	f7ff ffb6 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8000ffc:	2039      	movs	r0, #57	; 0x39
 8000ffe:	f7ff ffc1 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001002:	202c      	movs	r0, #44	; 0x2c
 8001004:	f7ff ffbe 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ffbb 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 800100e:	2034      	movs	r0, #52	; 0x34
 8001010:	f7ff ffb8 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff ffb5 	bl	8000f84 <LCD_Write_Data>

    /* Pump ratio control (F7h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xF7);
 800101a:	20f7      	movs	r0, #247	; 0xf7
 800101c:	f7ff ffa4 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001020:	2020      	movs	r0, #32
 8001022:	f7ff ffaf 	bl	8000f84 <LCD_Write_Data>

    /* Driver timing control B */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xEA);
 8001026:	20ea      	movs	r0, #234	; 0xea
 8001028:	f7ff ff9e 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffa9 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffa6 	bl	8000f84 <LCD_Write_Data>

    /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xB1);
 8001038:	20b1      	movs	r0, #177	; 0xb1
 800103a:	f7ff ff95 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffa0 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x1B);
 8001044:	201b      	movs	r0, #27
 8001046:	f7ff ff9d 	bl	8000f84 <LCD_Write_Data>

    /*  Display Function Control (B6h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xB6);
 800104a:	20b6      	movs	r0, #182	; 0xb6
 800104c:	f7ff ff8c 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x0A);
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff ff97 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0xA2);
 8001056:	20a2      	movs	r0, #162	; 0xa2
 8001058:	f7ff ff94 	bl	8000f84 <LCD_Write_Data>

    /* Power Control 1 (C0h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xC0);
 800105c:	20c0      	movs	r0, #192	; 0xc0
 800105e:	f7ff ff83 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x35);
 8001062:	2035      	movs	r0, #53	; 0x35
 8001064:	f7ff ff8e 	bl	8000f84 <LCD_Write_Data>

    /* Power Control 2 (C1h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xC1);
 8001068:	20c1      	movs	r0, #193	; 0xc1
 800106a:	f7ff ff7d 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x11);
 800106e:	2011      	movs	r0, #17
 8001070:	f7ff ff88 	bl	8000f84 <LCD_Write_Data>

    /* VCOM Control 1 (C5h) */
    LCD_Write_Cmd(0xC5);
 8001074:	20c5      	movs	r0, #197	; 0xc5
 8001076:	f7ff ff77 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x45);
 800107a:	2045      	movs	r0, #69	; 0x45
 800107c:	f7ff ff82 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x45);
 8001080:	2045      	movs	r0, #69	; 0x45
 8001082:	f7ff ff7f 	bl	8000f84 <LCD_Write_Data>

    /*  VCOM Control 2 (C7h)  */
    LCD_Write_Cmd(0xC7);
 8001086:	20c7      	movs	r0, #199	; 0xc7
 8001088:	f7ff ff6e 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0xA2);
 800108c:	20a2      	movs	r0, #162	; 0xa2
 800108e:	f7ff ff79 	bl	8000f84 <LCD_Write_Data>

    /* Enable 3G (F2h) */
    LCD_Write_Cmd(0xF2);
 8001092:	20f2      	movs	r0, #242	; 0xf2
 8001094:	f7ff ff68 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff73 	bl	8000f84 <LCD_Write_Data>

    /* Gamma Set (26h) */
    LCD_Write_Cmd(0x26);
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f7ff ff62 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff6d 	bl	8000f84 <LCD_Write_Data>
    DEBUG_DELAY ();

    /* Positive Gamma Correction */
    LCD_Write_Cmd(0xE0); //Set Gamma
 80010aa:	20e0      	movs	r0, #224	; 0xe0
 80010ac:	f7ff ff5c 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f7ff ff67 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x26);
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f7ff ff64 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x24);
 80010bc:	2024      	movs	r0, #36	; 0x24
 80010be:	f7ff ff61 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x0B);
 80010c2:	200b      	movs	r0, #11
 80010c4:	f7ff ff5e 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 80010c8:	200e      	movs	r0, #14
 80010ca:	f7ff ff5b 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 80010ce:	2009      	movs	r0, #9
 80010d0:	f7ff ff58 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x54);
 80010d4:	2054      	movs	r0, #84	; 0x54
 80010d6:	f7ff ff55 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0xA8);
 80010da:	20a8      	movs	r0, #168	; 0xa8
 80010dc:	f7ff ff52 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x46);
 80010e0:	2046      	movs	r0, #70	; 0x46
 80010e2:	f7ff ff4f 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 80010e6:	200c      	movs	r0, #12
 80010e8:	f7ff ff4c 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x17);
 80010ec:	2017      	movs	r0, #23
 80010ee:	f7ff ff49 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 80010f2:	2009      	movs	r0, #9
 80010f4:	f7ff ff46 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 80010f8:	200f      	movs	r0, #15
 80010fa:	f7ff ff43 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 80010fe:	2007      	movs	r0, #7
 8001100:	f7ff ff40 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff ff3d 	bl	8000f84 <LCD_Write_Data>

    /* Negative Gamma Correction (E1h) */
    LCD_Write_Cmd(0XE1); //Set Gamma
 800110a:	20e1      	movs	r0, #225	; 0xe1
 800110c:	f7ff ff2c 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff37 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x19);
 8001116:	2019      	movs	r0, #25
 8001118:	f7ff ff34 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x1B);
 800111c:	201b      	movs	r0, #27
 800111e:	f7ff ff31 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x04);
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff ff2e 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff2b 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 800112e:	2007      	movs	r0, #7
 8001130:	f7ff ff28 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x2A);
 8001134:	202a      	movs	r0, #42	; 0x2a
 8001136:	f7ff ff25 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x47);
 800113a:	2047      	movs	r0, #71	; 0x47
 800113c:	f7ff ff22 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x39);
 8001140:	2039      	movs	r0, #57	; 0x39
 8001142:	f7ff ff1f 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff ff1c 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x06);
 800114c:	2006      	movs	r0, #6
 800114e:	f7ff ff19 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x06);
 8001152:	2006      	movs	r0, #6
 8001154:	f7ff ff16 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001158:	2030      	movs	r0, #48	; 0x30
 800115a:	f7ff ff13 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x38);
 800115e:	2038      	movs	r0, #56	; 0x38
 8001160:	f7ff ff10 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff ff0d 	bl	8000f84 <LCD_Write_Data>

    /* memory access control set */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0x36);
 800116a:	2036      	movs	r0, #54	; 0x36
 800116c:	f7ff fefc 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0xC8);
 8001170:	20c8      	movs	r0, #200	; 0xc8
 8001172:	f7ff ff07 	bl	8000f84 <LCD_Write_Data>
    DEBUG_DELAY ();

    /* column address control set */
    LCD_Write_Cmd(CMD_Set_COLUMN);
 8001176:	202a      	movs	r0, #42	; 0x2a
 8001178:	f7ff fef6 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff01 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fefe 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fefb 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0xEF);
 800118e:	20ef      	movs	r0, #239	; 0xef
 8001190:	f7ff fef8 	bl	8000f84 <LCD_Write_Data>

    /* page address control set */
    DEBUG_DELAY ();
    LCD_Write_Cmd(CMD_Set_PAGE);
 8001194:	202b      	movs	r0, #43	; 0x2b
 8001196:	f7ff fee7 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fef2 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff feef 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x01);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff feec 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(0x3F);
 80011ac:	203f      	movs	r0, #63	; 0x3f
 80011ae:	f7ff fee9 	bl	8000f84 <LCD_Write_Data>

    /*  Pixel Format Set (3Ah)  */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0x3a);
 80011b2:	203a      	movs	r0, #58	; 0x3a
 80011b4:	f7ff fed8 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(0x55);
 80011b8:	2055      	movs	r0, #85	; 0x55
 80011ba:	f7ff fee3 	bl	8000f84 <LCD_Write_Data>

    /* Sleep Out (11h)  */
    LCD_Write_Cmd(0x11);
 80011be:	2011      	movs	r0, #17
 80011c0:	f7ff fed2 	bl	8000f68 <LCD_Write_Cmd>
    Delay(0xAFFf << 2);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <LCD_REG_Config+0x230>)
 80011c6:	f7ff fe73 	bl	8000eb0 <Delay>
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);
 80011ca:	2029      	movs	r0, #41	; 0x29
 80011cc:	f7ff fecc 	bl	8000f68 <LCD_Write_Cmd>

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0002bffc 	.word	0x0002bffc

080011d8 <LCD_OpenWindow>:


void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	80fb      	strh	r3, [r7, #6]
 80011ea:	4603      	mov	r3, r0
 80011ec:	80bb      	strh	r3, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(CMD_Set_COLUMN);
 80011f6:	202a      	movs	r0, #42	; 0x2a
 80011f8:	f7ff feb6 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(usCOLUMN >> 8);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	b29b      	uxth	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff febe 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(usCOLUMN & 0xff);
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff feb8 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	4413      	add	r3, r2
 800121a:	3b01      	subs	r3, #1
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff feaf 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea4 	bl	8000f84 <LCD_Write_Data>

    LCD_Write_Cmd(CMD_Set_PAGE);
 800123c:	202b      	movs	r0, #43	; 0x2b
 800123e:	f7ff fe93 	bl	8000f68 <LCD_Write_Cmd>
    LCD_Write_Data(usPAGE >> 8);
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe9b 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data(usPAGE & 0xff);
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe95 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 800125a:	88ba      	ldrh	r2, [r7, #4]
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	3b01      	subs	r3, #1
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe8c 	bl	8000f84 <LCD_Write_Data>
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	883b      	ldrh	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe81 	bl	8000f84 <LCD_Write_Data>

}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}

0800128a <LCD_FillColor>:


void LCD_FillColor(uint32_t usPoint, uint16_t usColor) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
    uint32_t i = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);
 800129a:	202c      	movs	r0, #44	; 0x2c
 800129c:	f7ff fe64 	bl	8000f68 <LCD_Write_Cmd>

    for (i = 0; i < usPoint; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e006      	b.n	80012b4 <LCD_FillColor+0x2a>
        LCD_Write_Data(usColor);
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe6b 	bl	8000f84 <LCD_Write_Data>
    for (i = 0; i < usPoint; i++)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3f4      	bcc.n	80012a6 <LCD_FillColor+0x1c>

}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LCD_Clear>:


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4604      	mov	r4, r0
 80012ce:	4608      	mov	r0, r1
 80012d0:	4611      	mov	r1, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	4623      	mov	r3, r4
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	4603      	mov	r3, r0
 80012da:	80bb      	strh	r3, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	803b      	strh	r3, [r7, #0]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	88b9      	ldrh	r1, [r7, #4]
 80012ea:	88f8      	ldrh	r0, [r7, #6]
 80012ec:	f7ff ff74 	bl	80011d8 <LCD_OpenWindow>

    LCD_FillColor(usWidth * usHeight, usColor);
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	883a      	ldrh	r2, [r7, #0]
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	8b3b      	ldrh	r3, [r7, #24]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff ffc3 	bl	800128a <LCD_FillColor>

}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <LCD_DrawDot>:
    }

}


void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	460b      	mov	r3, r1
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	807b      	strh	r3, [r7, #2]
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2bef      	cmp	r3, #239	; 0xef
 8001322:	d809      	bhi.n	8001338 <LCD_DrawDot+0x2c>
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800132a:	d205      	bcs.n	8001338 <LCD_DrawDot+0x2c>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 800132c:	88b9      	ldrh	r1, [r7, #4]
 800132e:	88f8      	ldrh	r0, [r7, #6]
 8001330:	2301      	movs	r3, #1
 8001332:	2201      	movs	r2, #1
 8001334:	f7ff ff50 	bl	80011d8 <LCD_OpenWindow>
    LCD_FillColor(1, usColor);
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4619      	mov	r1, r3
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ffa4 	bl	800128a <LCD_FillColor>

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <LCD_SetPinColor>:
		} else {
			data[i].x = 70;
			data[i].y = 120 + (i - 4) * 40;
		}
}
void LCD_SetPinColor(struct YPinData *data, uint16_t color) {
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
	data->color = color;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	711a      	strb	r2, [r3, #4]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LCD_DistSqr>:

uint16_t LCD_DistSqr(struct YPinData *data, uint16_t x, uint16_t y) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	803b      	strh	r3, [r7, #0]
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8aa 	bl	80004dc <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	f00a fdf8 	bl	800bf84 <pow>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	461a      	mov	r2, r3
 800139e:	883b      	ldrh	r3, [r7, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f89a 	bl	80004dc <__aeabi_i2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b0:	f00a fde8 	bl	800bf84 <pow>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7fe ff42 	bl	8000244 <__adddf3>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbca 	bl	8000b60 <__aeabi_d2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29b      	uxth	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}

080013d8 <LCD_PrintHeatMap>:

void LCD_PrintHeatMap(struct YPinData *data) {
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	// Loop all pixels inside the rectangular heat map
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3312      	adds	r3, #18
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b14      	subs	r3, #20
 80013e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013ea:	e141      	b.n	8001670 <LCD_PrintHeatMap+0x298>
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3312      	adds	r3, #18
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	3b14      	subs	r3, #20
 80013f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013f6:	e130      	b.n	800165a <LCD_PrintHeatMap+0x282>
			// Check if in safe circle and altered circle, -1 means not exist
			int8_t inSafeCircle = -1;
 80013f8:	23ff      	movs	r3, #255	; 0xff
 80013fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			int16_t distSqrInAlteredCircle[8] = {-1};
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001410:	813b      	strh	r3, [r7, #8]

			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001418:	e029      	b.n	800146e <LCD_PrintHeatMap+0x96>
				uint16_t dist_sqr = LCD_DistSqr(&data[sensor], col, pag);
 800141a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800142e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff99 	bl	8001368 <LCD_DistSqr>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]
				if (dist_sqr <= 100) {
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	2b64      	cmp	r3, #100	; 0x64
 800143e:	d804      	bhi.n	800144a <LCD_PrintHeatMap+0x72>
					inSafeCircle = sensor;
 8001440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 8001448:	e015      	b.n	8001476 <LCD_PrintHeatMap+0x9e>
				} else if (dist_sqr <= 900) {
 800144a:	8b7b      	ldrh	r3, [r7, #26]
 800144c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001450:	d808      	bhi.n	8001464 <LCD_PrintHeatMap+0x8c>
					distSqrInAlteredCircle[sensor] = dist_sqr;
 8001452:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001456:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	3328      	adds	r3, #40	; 0x28
 800145e:	443b      	add	r3, r7
 8001460:	f823 2c20 	strh.w	r2, [r3, #-32]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001468:	3301      	adds	r3, #1
 800146a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800146e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001472:	2b07      	cmp	r3, #7
 8001474:	d9d1      	bls.n	800141a <LCD_PrintHeatMap+0x42>
				}
			}

			if (inSafeCircle != -1) {
 8001476:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147e:	d014      	beq.n	80014aa <LCD_PrintHeatMap+0xd2>
				LCD_DrawDot(col, pag, HueToRGB565(data[inSafeCircle].color));
 8001480:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc0b 	bl	8000cb0 <HueToRGB565>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff32 	bl	800130c <LCD_DrawDot>
 80014a8:	e0d4      	b.n	8001654 <LCD_PrintHeatMap+0x27c>
				continue;
			}

			uint16_t distSqrSum = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	843b      	strh	r3, [r7, #32]
			uint16_t weightedHue = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	83fb      	strh	r3, [r7, #30]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	777b      	strb	r3, [r7, #29]
 80014b6:	e0b9      	b.n	800162c <LCD_PrintHeatMap+0x254>
				if (distSqrInAlteredCircle[sensor] != -1) {
 80014b8:	7f7b      	ldrb	r3, [r7, #29]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	3328      	adds	r3, #40	; 0x28
 80014be:	443b      	add	r3, r7
 80014c0:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014c8:	f000 80ad 	beq.w	8001626 <LCD_PrintHeatMap+0x24e>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 80014cc:	7f7a      	ldrb	r2, [r7, #29]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fffa 	bl	80004dc <__aeabi_i2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
 80014ec:	7f7b      	ldrb	r3, [r7, #29]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	3328      	adds	r3, #40	; 0x28
 80014f2:	443b      	add	r3, r7
 80014f4:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffef 	bl	80004dc <__aeabi_i2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f00a fda5 	bl	800c054 <sqrt>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <LCD_PrintHeatMap+0x2b4>)
 8001510:	f7fe fe96 	bl	8000240 <__aeabi_dsub>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7ff f848 	bl	80005b0 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <LCD_PrintHeatMap+0x2b8>)
 800152e:	f7ff f969 	bl	8000804 <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4614      	mov	r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	7f7a      	ldrb	r2, [r7, #29]
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffc5 	bl	80004dc <__aeabi_i2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe fe73 	bl	8000244 <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fafb 	bl	8000b60 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	767b      	strb	r3, [r7, #25]
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 800156e:	7f7b      	ldrb	r3, [r7, #29]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	3328      	adds	r3, #40	; 0x28
 8001574:	443b      	add	r3, r7
 8001576:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffae 	bl	80004dc <__aeabi_i2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f00a fd64 	bl	800c054 <sqrt>
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	8c3b      	ldrh	r3, [r7, #32]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffa2 	bl	80004dc <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7fe fe50 	bl	8000244 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fad8 	bl	8000b60 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	843b      	strh	r3, [r7, #32]
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 80015b4:	7f7b      	ldrb	r3, [r7, #29]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	3328      	adds	r3, #40	; 0x28
 80015ba:	443b      	add	r3, r7
 80015bc:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff8b 	bl	80004dc <__aeabi_i2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f00a fd41 	bl	800c054 <sqrt>
 80015d2:	4604      	mov	r4, r0
 80015d4:	460d      	mov	r5, r1
 80015d6:	7f7a      	ldrb	r2, [r7, #29]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff77 	bl	80004dc <__aeabi_i2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe ffdb 	bl	80005b0 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4614      	mov	r4, r2
 8001600:	461d      	mov	r5, r3
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff69 	bl	80004dc <__aeabi_i2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7fe fe17 	bl	8000244 <__adddf3>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa9f 	bl	8000b60 <__aeabi_d2uiz>
 8001622:	4603      	mov	r3, r0
 8001624:	83fb      	strh	r3, [r7, #30]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001626:	7f7b      	ldrb	r3, [r7, #29]
 8001628:	3301      	adds	r3, #1
 800162a:	777b      	strb	r3, [r7, #29]
 800162c:	7f7b      	ldrb	r3, [r7, #29]
 800162e:	2b07      	cmp	r3, #7
 8001630:	f67f af42 	bls.w	80014b8 <LCD_PrintHeatMap+0xe0>
				}
			}

			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 8001634:	8bfa      	ldrh	r2, [r7, #30]
 8001636:	8c3b      	ldrh	r3, [r7, #32]
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb35 	bl	8000cb0 <HueToRGB565>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800164c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe5c 	bl	800130c <LCD_DrawDot>
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	84bb      	strh	r3, [r7, #36]	; 0x24
 800165a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	332a      	adds	r3, #42	; 0x2a
 8001660:	885b      	ldrh	r3, [r3, #2]
 8001662:	3314      	adds	r3, #20
 8001664:	429a      	cmp	r2, r3
 8001666:	f77f aec7 	ble.w	80013f8 <LCD_PrintHeatMap+0x20>
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 800166a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166c:	3301      	adds	r3, #1
 800166e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001670:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3318      	adds	r3, #24
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	3314      	adds	r3, #20
 800167a:	429a      	cmp	r2, r3
 800167c:	f77f aeb6 	ble.w	80013ec <LCD_PrintHeatMap+0x14>
		}
	}
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bdb0      	pop	{r4, r5, r7, pc}
 800168a:	bf00      	nop
 800168c:	40240000 	.word	0x40240000
 8001690:	40340000 	.word	0x40340000

08001694 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	4603      	mov	r3, r0
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
 80016ae:	4613      	mov	r3, r2
 80016b0:	803b      	strh	r3, [r7, #0]
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	3b20      	subs	r3, #32
 80016b6:	733b      	strb	r3, [r7, #12]

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80016b8:	88b9      	ldrh	r1, [r7, #4]
 80016ba:	88f8      	ldrh	r0, [r7, #6]
 80016bc:	2310      	movs	r3, #16
 80016be:	2208      	movs	r2, #8
 80016c0:	f7ff fd8a 	bl	80011d8 <LCD_OpenWindow>

    LCD_Write_Cmd(CMD_SetPixel);
 80016c4:	202c      	movs	r0, #44	; 0x2c
 80016c6:	f7ff fc4f 	bl	8000f68 <LCD_Write_Cmd>

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	73bb      	strb	r3, [r7, #14]
 80016ce:	e024      	b.n	800171a <LCD_DrawChar_Color+0x86>
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 80016d0:	7b3a      	ldrb	r2, [r7, #12]
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	4915      	ldr	r1, [pc, #84]	; (800172c <LCD_DrawChar_Color+0x98>)
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	440a      	add	r2, r1
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	73fb      	strb	r3, [r7, #15]

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	737b      	strb	r3, [r7, #13]
 80016e4:	e013      	b.n	800170e <LCD_DrawChar_Color+0x7a>
            if (ucTemp & 0x01)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <LCD_DrawChar_Color+0x66>
                LCD_Write_Data(usColor_Foreground);
 80016f0:	8c3b      	ldrh	r3, [r7, #32]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc46 	bl	8000f84 <LCD_Write_Data>
 80016f8:	e003      	b.n	8001702 <LCD_DrawChar_Color+0x6e>

            else
                LCD_Write_Data(usColor_Background);
 80016fa:	883b      	ldrh	r3, [r7, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc41 	bl	8000f84 <LCD_Write_Data>

            ucTemp >>= 1;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	3301      	adds	r3, #1
 800170c:	737b      	strb	r3, [r7, #13]
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d9e8      	bls.n	80016e6 <LCD_DrawChar_Color+0x52>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	3301      	adds	r3, #1
 8001718:	73bb      	strb	r3, [r7, #14]
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d9d7      	bls.n	80016d0 <LCD_DrawChar_Color+0x3c>

        }

    }

}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	0800d4ac 	.word	0x0800d4ac

08001730 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af02      	add	r7, sp, #8
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	4613      	mov	r3, r2
 800173e:	80bb      	strh	r3, [r7, #4]
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	3b0a      	subs	r3, #10
 8001744:	b298      	uxth	r0, r3
 8001746:	88b9      	ldrh	r1, [r7, #4]
 8001748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2214      	movs	r2, #20
 8001752:	f7ff fdb8 	bl	80012c6 <LCD_Clear>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	3b0a      	subs	r3, #10
 800175a:	b299      	uxth	r1, r3
 800175c:	88f8      	ldrh	r0, [r7, #6]
 800175e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2314      	movs	r3, #20
 8001766:	2201      	movs	r2, #1
 8001768:	f7ff fdad 	bl	80012c6 <LCD_Clear>

}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af02      	add	r7, sp, #8
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	461a      	mov	r2, r3
 800177e:	4603      	mov	r3, r0
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	460b      	mov	r3, r1
 8001784:	81bb      	strh	r3, [r7, #12]
 8001786:	4613      	mov	r3, r2
 8001788:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0') {
 800178a:	e01f      	b.n	80017cc <LCD_DrawString_Color+0x58>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	2be8      	cmp	r3, #232	; 0xe8
 8001790:	d904      	bls.n	800179c <LCD_DrawString_Color+0x28>
            usC = LCD_DispWindow_Start_COLUMN;
 8001792:	2300      	movs	r3, #0
 8001794:	81fb      	strh	r3, [r7, #14]
            usP += HEIGHT_EN_CHAR;
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	3310      	adds	r3, #16
 800179a:	81bb      	strh	r3, [r7, #12]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 800179c:	89bb      	ldrh	r3, [r7, #12]
 800179e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80017a2:	d903      	bls.n	80017ac <LCD_DrawString_Color+0x38>
            usC = LCD_DispWindow_Start_COLUMN;
 80017a4:	2300      	movs	r3, #0
 80017a6:	81fb      	strh	r3, [r7, #14]
            usP = LCD_DispWindow_Start_PAGE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81bb      	strh	r3, [r7, #12]
        }

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	88fc      	ldrh	r4, [r7, #6]
 80017b2:	89b9      	ldrh	r1, [r7, #12]
 80017b4:	89f8      	ldrh	r0, [r7, #14]
 80017b6:	8c3b      	ldrh	r3, [r7, #32]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7ff ff6a 	bl	8001694 <LCD_DrawChar_Color>

        pStr++;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]

        usC += WIDTH_EN_CHAR;
 80017c6:	89fb      	ldrh	r3, [r7, #14]
 80017c8:	3308      	adds	r3, #8
 80017ca:	81fb      	strh	r3, [r7, #14]
    while (*pStr != '\0') {
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1db      	bne.n	800178c <LCD_DrawString_Color+0x18>

    }

}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}

080017de <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80017de:	b590      	push	{r4, r7, lr}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af02      	add	r7, sp, #8
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	460b      	mov	r3, r1
 80017ee:	81bb      	strh	r3, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0') {
 80017f4:	e024      	b.n	8001840 <LCD_DrawString_Color_With_Delay+0x62>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	2be8      	cmp	r3, #232	; 0xe8
 80017fa:	d904      	bls.n	8001806 <LCD_DrawString_Color_With_Delay+0x28>
            usC = LCD_DispWindow_Start_COLUMN;
 80017fc:	2300      	movs	r3, #0
 80017fe:	81fb      	strh	r3, [r7, #14]
            usP += HEIGHT_EN_CHAR;
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	3310      	adds	r3, #16
 8001804:	81bb      	strh	r3, [r7, #12]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800180c:	d903      	bls.n	8001816 <LCD_DrawString_Color_With_Delay+0x38>
            usC = LCD_DispWindow_Start_COLUMN;
 800180e:	2300      	movs	r3, #0
 8001810:	81fb      	strh	r3, [r7, #14]
            usP = LCD_DispWindow_Start_PAGE;
 8001812:	2300      	movs	r3, #0
 8001814:	81bb      	strh	r3, [r7, #12]
        }

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	88fc      	ldrh	r4, [r7, #6]
 800181c:	89b9      	ldrh	r1, [r7, #12]
 800181e:	89f8      	ldrh	r0, [r7, #14]
 8001820:	8c3b      	ldrh	r3, [r7, #32]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4623      	mov	r3, r4
 8001826:	f7ff ff35 	bl	8001694 <LCD_DrawChar_Color>

        pStr++;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3301      	adds	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]

        usC += WIDTH_EN_CHAR;
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	3308      	adds	r3, #8
 8001834:	81fb      	strh	r3, [r7, #14]
        HAL_Delay(delayEachChar);
 8001836:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800183a:	4618      	mov	r0, r3
 800183c:	f002 ffda 	bl	80047f4 <HAL_Delay>
    while (*pStr != '\0') {
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1d6      	bne.n	80017f6 <LCD_DrawString_Color_With_Delay+0x18>
    }

}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
	...

08001854 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
    switch (ucOption) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	3b01      	subs	r3, #1
 8001862:	2b03      	cmp	r3, #3
 8001864:	f200 80a0 	bhi.w	80019a8 <LCD_GramScan+0x154>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <LCD_GramScan+0x1c>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001881 	.word	0x08001881
 8001874:	080018cb 	.word	0x080018cb
 8001878:	08001915 	.word	0x08001915
 800187c:	0800195f 	.word	0x0800195f

//		____ x(240)
//	 |
//	 |	y(320)

            LCD_Write_Cmd(0x36);
 8001880:	2036      	movs	r0, #54	; 0x36
 8001882:	f7ff fb71 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0xC8);
 8001886:	20c8      	movs	r0, #200	; 0xc8
 8001888:	f7ff fb7c 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 800188c:	202a      	movs	r0, #42	; 0x2a
 800188e:	f7ff fb6b 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);    /* x start */
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fb76 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fb73 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);  /* x end */
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fb70 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 80018a4:	20ef      	movs	r0, #239	; 0xef
 80018a6:	f7ff fb6d 	bl	8000f84 <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 80018aa:	202b      	movs	r0, #43	; 0x2b
 80018ac:	f7ff fb5c 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);    /* y start */
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff fb67 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fb64 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x01);    /* y end */
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fb61 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 80018c2:	203f      	movs	r0, #63	; 0x3f
 80018c4:	f7ff fb5e 	bl	8000f84 <LCD_Write_Data>

            break;
 80018c8:	e06e      	b.n	80019a8 <LCD_GramScan+0x154>

//		|x(320)
//		|
//		|___ y(240)

            LCD_Write_Cmd(0x36);
 80018ca:	2036      	movs	r0, #54	; 0x36
 80018cc:	f7ff fb4c 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x68);
 80018d0:	2068      	movs	r0, #104	; 0x68
 80018d2:	f7ff fb57 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 80018d6:	202a      	movs	r0, #42	; 0x2a
 80018d8:	f7ff fb46 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fb51 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fb4e 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x01);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff fb4b 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 80018ee:	203f      	movs	r0, #63	; 0x3f
 80018f0:	f7ff fb48 	bl	8000f84 <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 80018f4:	202b      	movs	r0, #43	; 0x2b
 80018f6:	f7ff fb37 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fb42 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fb3f 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fb3c 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 800190c:	20ef      	movs	r0, #239	; 0xef
 800190e:	f7ff fb39 	bl	8000f84 <LCD_Write_Data>

            break;
 8001912:	e049      	b.n	80019a8 <LCD_GramScan+0x154>

//		           |x(320)
//		           |
//		y(240) ____|

            LCD_Write_Cmd(0x36);
 8001914:	2036      	movs	r0, #54	; 0x36
 8001916:	f7ff fb27 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x28);
 800191a:	2028      	movs	r0, #40	; 0x28
 800191c:	f7ff fb32 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 8001920:	202a      	movs	r0, #42	; 0x2a
 8001922:	f7ff fb21 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fb2c 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fb29 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x01);
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fb26 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 8001938:	203f      	movs	r0, #63	; 0x3f
 800193a:	f7ff fb23 	bl	8000f84 <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 800193e:	202b      	movs	r0, #43	; 0x2b
 8001940:	f7ff fb12 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fb1d 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fb1a 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fb17 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 8001956:	20ef      	movs	r0, #239	; 0xef
 8001958:	f7ff fb14 	bl	8000f84 <LCD_Write_Data>

            break;
 800195c:	e024      	b.n	80019a8 <LCD_GramScan+0x154>

//		|y(320)
//		|
//		|___ x(240)

            LCD_Write_Cmd(0x36);
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff fb02 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x48);
 8001964:	2048      	movs	r0, #72	; 0x48
 8001966:	f7ff fb0d 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 800196a:	202a      	movs	r0, #42	; 0x2a
 800196c:	f7ff fafc 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fb07 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fb04 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff fb01 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 8001982:	20ef      	movs	r0, #239	; 0xef
 8001984:	f7ff fafe 	bl	8000f84 <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 8001988:	202b      	movs	r0, #43	; 0x2b
 800198a:	f7ff faed 	bl	8000f68 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff faf8 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff faf5 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x01);
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff faf2 	bl	8000f84 <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 80019a0:	203f      	movs	r0, #63	; 0x3f
 80019a2:	f7ff faef 	bl	8000f84 <LCD_Write_Data>

            break;
 80019a6:	bf00      	nop

    }


    /* write gram start */
    LCD_Write_Cmd(0x2C);
 80019a8:	202c      	movs	r0, #44	; 0x2c
 80019aa:	f7ff fadd 	bl	8000f68 <LCD_Write_Cmd>


}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop

080019b8 <Check_touchkey>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Check_touchkey() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
    strType_XPT2046_Coordinate strDisplayCoordinate;
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4921      	ldr	r1, [pc, #132]	; (8001a48 <Check_touchkey+0x90>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fe06 	bl	80045d4 <XPT2046_Get_TouchedPoint>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d037      	beq.n	8001a3e <Check_touchkey+0x86>
        if (currentPage == home) {
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <Check_touchkey+0x94>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11f      	bne.n	8001a16 <Check_touchkey+0x5e>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2bd2      	cmp	r3, #210	; 0xd2
 80019da:	d930      	bls.n	8001a3e <Check_touchkey+0x86>
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2bf9      	cmp	r3, #249	; 0xf9
 80019e0:	d82d      	bhi.n	8001a3e <Check_touchkey+0x86>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	2b14      	cmp	r3, #20
 80019e6:	d909      	bls.n	80019fc <Check_touchkey+0x44>
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	2b63      	cmp	r3, #99	; 0x63
 80019ec:	d806      	bhi.n	80019fc <Check_touchkey+0x44>
                    currentPage = weight;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <Check_touchkey+0x94>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <Check_touchkey+0x98>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
                    changingPage = 1;
                }
            }
        }
    }
}
 80019fa:	e020      	b.n	8001a3e <Check_touchkey+0x86>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	2b82      	cmp	r3, #130	; 0x82
 8001a00:	d91d      	bls.n	8001a3e <Check_touchkey+0x86>
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	2bd1      	cmp	r3, #209	; 0xd1
 8001a06:	d81a      	bhi.n	8001a3e <Check_touchkey+0x86>
                    currentPage = accelerometer;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <Check_touchkey+0x94>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <Check_touchkey+0x98>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	e013      	b.n	8001a3e <Check_touchkey+0x86>
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001a1c:	d30f      	bcc.n	8001a3e <Check_touchkey+0x86>
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 8001a24:	d80b      	bhi.n	8001a3e <Check_touchkey+0x86>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	2b14      	cmp	r3, #20
 8001a2a:	d908      	bls.n	8001a3e <Check_touchkey+0x86>
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	2b95      	cmp	r3, #149	; 0x95
 8001a30:	d805      	bhi.n	8001a3e <Check_touchkey+0x86>
                    currentPage = home;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <Check_touchkey+0x94>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <Check_touchkey+0x98>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000300 	.word	0x20000300
 8001a50:	20000000 	.word	0x20000000

08001a54 <clearAcceleRecord>:

void clearAcceleRecord() {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	80fb      	strh	r3, [r7, #6]
 8001a5e:	e023      	b.n	8001aa8 <clearAcceleRecord+0x54>
        accleRecord[i].rawX = 0;
 8001a60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a64:	4918      	ldr	r1, [pc, #96]	; (8001ac8 <clearAcceleRecord+0x74>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	440b      	add	r3, r1
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
        accleRecord[i].rawY = 0;
 8001a74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a78:	4913      	ldr	r1, [pc, #76]	; (8001ac8 <clearAcceleRecord+0x74>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	3302      	adds	r3, #2
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
        accleRecord[i].rawZ = 0;
 8001a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <clearAcceleRecord+0x74>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	801a      	strh	r2, [r3, #0]
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	2b63      	cmp	r3, #99	; 0x63
 8001aae:	ddd7      	ble.n	8001a60 <clearAcceleRecord+0xc>
    }
    acceleRecordSize = 0;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <clearAcceleRecord+0x78>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
    distanceTraveled = 0;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <clearAcceleRecord+0x7c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000308 	.word	0x20000308
 8001acc:	20000628 	.word	0x20000628
 8001ad0:	2000062c 	.word	0x2000062c

08001ad4 <clearAngleRecord>:

void clearAngleRecord() {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	80fb      	strh	r3, [r7, #6]
 8001ade:	e009      	b.n	8001af4 <clearAngleRecord+0x20>
        angleRecord[i] = 0;
 8001ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae4:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <clearAngleRecord+0x38>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af8:	2b63      	cmp	r3, #99	; 0x63
 8001afa:	ddf1      	ble.n	8001ae0 <clearAngleRecord+0xc>
    }
    angleRecordSize = 0;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <clearAngleRecord+0x3c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	801a      	strh	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000560 	.word	0x20000560
 8001b10:	2000062a 	.word	0x2000062a

08001b14 <shiftAcceleRecord>:

void shiftAcceleRecord() {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
    if (acceleRecordSize < RECORD_MAX_SIZE) {
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <shiftAcceleRecord+0xcc>)
 8001b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b20:	2b63      	cmp	r3, #99	; 0x63
 8001b22:	dd57      	ble.n	8001bd4 <shiftAcceleRecord+0xc0>
        return;
    }
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 8001b24:	2301      	movs	r3, #1
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	e046      	b.n	8001bb8 <shiftAcceleRecord+0xa4>
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 8001b2a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	482b      	ldr	r0, [pc, #172]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001b36:	460b      	mov	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	440b      	add	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4403      	add	r3, r0
 8001b40:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001b44:	4927      	ldr	r1, [pc, #156]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	440b      	add	r3, r1
 8001b50:	4602      	mov	r2, r0
 8001b52:	801a      	strh	r2, [r3, #0]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 8001b54:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	4821      	ldr	r0, [pc, #132]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001b60:	460b      	mov	r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	440b      	add	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4403      	add	r3, r0
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001b70:	491c      	ldr	r1, [pc, #112]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	4602      	mov	r2, r0
 8001b80:	801a      	strh	r2, [r3, #0]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 8001b82:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	4815      	ldr	r0, [pc, #84]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001b8e:	460b      	mov	r3, r1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4403      	add	r3, r0
 8001b98:	3304      	adds	r3, #4
 8001b9a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001b9e:	4911      	ldr	r1, [pc, #68]	; (8001be4 <shiftAcceleRecord+0xd0>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	3304      	adds	r3, #4
 8001bac:	4602      	mov	r2, r0
 8001bae:	801a      	strh	r2, [r3, #0]
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	80fb      	strh	r3, [r7, #6]
 8001bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbc:	2b63      	cmp	r3, #99	; 0x63
 8001bbe:	ddb4      	ble.n	8001b2a <shiftAcceleRecord+0x16>
    }
    --acceleRecordSize;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <shiftAcceleRecord+0xcc>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <shiftAcceleRecord+0xcc>)
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	e000      	b.n	8001bd6 <shiftAcceleRecord+0xc2>
        return;
 8001bd4:	bf00      	nop
}
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000628 	.word	0x20000628
 8001be4:	20000308 	.word	0x20000308

08001be8 <shiftAngleRecord>:

void shiftAngleRecord() {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
    if (angleRecordSize < RECORD_MAX_SIZE) {
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <shiftAngleRecord+0x5c>)
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	2b63      	cmp	r3, #99	; 0x63
 8001bf6:	dd1f      	ble.n	8001c38 <shiftAngleRecord+0x50>
        return;
    }
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	80fb      	strh	r3, [r7, #6]
 8001bfc:	e00e      	b.n	8001c1c <shiftAngleRecord+0x34>
        angleRecord[i - 1] = angleRecord[i];
 8001bfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	490f      	ldr	r1, [pc, #60]	; (8001c48 <shiftAngleRecord+0x60>)
 8001c0a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <shiftAngleRecord+0x60>)
 8001c10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c20:	2b63      	cmp	r3, #99	; 0x63
 8001c22:	ddec      	ble.n	8001bfe <shiftAngleRecord+0x16>
    }
    --angleRecordSize;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <shiftAngleRecord+0x5c>)
 8001c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <shiftAngleRecord+0x5c>)
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	e000      	b.n	8001c3a <shiftAngleRecord+0x52>
        return;
 8001c38:	bf00      	nop
}
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000062a 	.word	0x2000062a
 8001c48:	20000560 	.word	0x20000560

08001c4c <insertAcceleRecord>:

void insertAcceleRecord(uint16_t rawX, uint16_t rawY, uint16_t rawZ) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	460b      	mov	r3, r1
 8001c58:	80bb      	strh	r3, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	807b      	strh	r3, [r7, #2]
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001c5e:	e001      	b.n	8001c64 <insertAcceleRecord+0x18>
        shiftAcceleRecord();
 8001c60:	f7ff ff58 	bl	8001b14 <shiftAcceleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <insertAcceleRecord+0x90>)
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	dcf8      	bgt.n	8001c60 <insertAcceleRecord+0x14>
    }
    accleRecord[acceleRecordSize].rawX = rawX;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <insertAcceleRecord+0x90>)
 8001c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001c7a:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <insertAcceleRecord+0x94>)
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	4602      	mov	r2, r0
 8001c88:	801a      	strh	r2, [r3, #0]
    accleRecord[acceleRecordSize].rawY = rawY;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <insertAcceleRecord+0x90>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <insertAcceleRecord+0x94>)
 8001c98:	460b      	mov	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	440b      	add	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	801a      	strh	r2, [r3, #0]
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <insertAcceleRecord+0x90>)
 8001caa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cae:	b293      	uxth	r3, r2
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	b219      	sxth	r1, r3
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <insertAcceleRecord+0x90>)
 8001cb8:	8019      	strh	r1, [r3, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <insertAcceleRecord+0x94>)
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	4602      	mov	r2, r0
 8001cd0:	801a      	strh	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000628 	.word	0x20000628
 8001ce0:	20000308 	.word	0x20000308

08001ce4 <insertAngleRecord>:

void insertAngleRecord(uint8_t newAngle) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001cee:	e001      	b.n	8001cf4 <insertAngleRecord+0x10>
        shiftAngleRecord();
 8001cf0:	f7ff ff7a 	bl	8001be8 <shiftAngleRecord>
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <insertAngleRecord+0x40>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	dcf8      	bgt.n	8001cf0 <insertAngleRecord+0xc>
    }
    angleRecord[angleRecordSize++] = newAngle;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <insertAngleRecord+0x40>)
 8001d00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d04:	b293      	uxth	r3, r2
 8001d06:	3301      	adds	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b219      	sxth	r1, r3
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <insertAngleRecord+0x40>)
 8001d0e:	8019      	strh	r1, [r3, #0]
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	b299      	uxth	r1, r3
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <insertAngleRecord+0x44>)
 8001d16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000062a 	.word	0x2000062a
 8001d28:	20000560 	.word	0x20000560
 8001d2c:	00000000 	.word	0x00000000

08001d30 <updateDistance>:

/* This function takes in a newRecord and add to the distance traveled below */
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	80bb      	strh	r3, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	807b      	strh	r3, [r7, #2]
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d52:	e0e2      	b.n	8001f1a <updateDistance+0x1ea>
        double ratioDelay; // focus on the most recent samples, old data decaying overtime
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 8001d54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbbf 	bl	80004dc <__aeabi_i2d>
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
 8001d62:	4bc9      	ldr	r3, [pc, #804]	; (8002088 <updateDistance+0x358>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbb7 	bl	80004dc <__aeabi_i2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fd45 	bl	8000804 <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4bc1      	ldr	r3, [pc, #772]	; (800208c <updateDistance+0x35c>)
 8001d88:	f7fe fe84 	bl	8000a94 <__aeabi_dcmplt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <updateDistance+0x6e>
 8001d92:	a3b7      	add	r3, pc, #732	; (adr r3, 8002070 <updateDistance+0x340>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d9c:	e04e      	b.n	8001e3c <updateDistance+0x10c>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 8001d9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb9a 	bl	80004dc <__aeabi_i2d>
 8001da8:	4604      	mov	r4, r0
 8001daa:	460d      	mov	r5, r1
 8001dac:	4bb6      	ldr	r3, [pc, #728]	; (8002088 <updateDistance+0x358>)
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb92 	bl	80004dc <__aeabi_i2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fd20 	bl	8000804 <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4baf      	ldr	r3, [pc, #700]	; (8002090 <updateDistance+0x360>)
 8001dd2:	f7fe fe5f 	bl	8000a94 <__aeabi_dcmplt>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <updateDistance+0xb8>
 8001ddc:	a3a6      	add	r3, pc, #664	; (adr r3, 8002078 <updateDistance+0x348>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001de6:	e029      	b.n	8001e3c <updateDistance+0x10c>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 8001de8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb75 	bl	80004dc <__aeabi_i2d>
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
 8001df6:	4ba4      	ldr	r3, [pc, #656]	; (8002088 <updateDistance+0x358>)
 8001df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb6d 	bl	80004dc <__aeabi_i2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fcfb 	bl	8000804 <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <updateDistance+0x364>)
 8001e1c:	f7fe fe3a 	bl	8000a94 <__aeabi_dcmplt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <updateDistance+0x102>
 8001e26:	a396      	add	r3, pc, #600	; (adr r3, 8002080 <updateDistance+0x350>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001e30:	e004      	b.n	8001e3c <updateDistance+0x10c>
        else ratioDelay = 0.5;
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b96      	ldr	r3, [pc, #600]	; (8002090 <updateDistance+0x360>)
 8001e38:	e9c7 2306 	strd	r2, r3, [r7, #24]
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 8001e3c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001e40:	4995      	ldr	r1, [pc, #596]	; (8002098 <updateDistance+0x368>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb43 	bl	80004dc <__aeabi_i2d>
 8001e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5a:	f7fe fba9 	bl	80005b0 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f00a f80b 	bl	800be80 <floor>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe fe4d 	bl	8000b10 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	4413      	add	r3, r2
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 8001e82:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001e86:	4984      	ldr	r1, [pc, #528]	; (8002098 <updateDistance+0x368>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	3302      	adds	r3, #2
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb1f 	bl	80004dc <__aeabi_i2d>
 8001e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea2:	f7fe fb85 	bl	80005b0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f009 ffe7 	bl	800be80 <floor>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe29 	bl	8000b10 <__aeabi_d2iz>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	4413      	add	r3, r2
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001eca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001ece:	4972      	ldr	r1, [pc, #456]	; (8002098 <updateDistance+0x368>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	3304      	adds	r3, #4
 8001edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fafb 	bl	80004dc <__aeabi_i2d>
 8001ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eea:	f7fe fb61 	bl	80005b0 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f009 ffc3 	bl	800be80 <floor>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe05 	bl	8000b10 <__aeabi_d2iz>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	4413      	add	r3, r2
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <updateDistance+0x358>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f6ff af15 	blt.w	8001d54 <updateDistance+0x24>
    }
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	4a5b      	ldr	r2, [pc, #364]	; (800209c <updateDistance+0x36c>)
 8001f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f32:	1152      	asrs	r2, r2, #5
 8001f34:	17db      	asrs	r3, r3, #31
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	82fb      	strh	r3, [r7, #22]
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	4a57      	ldr	r2, [pc, #348]	; (800209c <updateDistance+0x36c>)
 8001f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f42:	1152      	asrs	r2, r2, #5
 8001f44:	17db      	asrs	r3, r3, #31
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	82bb      	strh	r3, [r7, #20]
            accum_z / RECORD_MAX_SIZE;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	4a53      	ldr	r2, [pc, #332]	; (800209c <updateDistance+0x36c>)
 8001f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f52:	1152      	asrs	r2, r2, #5
 8001f54:	17db      	asrs	r3, r3, #31
 8001f56:	1ad3      	subs	r3, r2, r3
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001f58:	827b      	strh	r3, [r7, #18]
    /* Ignore the axis if the most recent accelerometer is less than the average of recent samples
     * Otherwise, only calculate the difference between the new values and the averaged values*/
    (newX <= avg_x) ? (accum_x = 0) : (accum_x -= avg_x);
 8001f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dc02      	bgt.n	8001f6c <updateDistance+0x23c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6a:	e004      	b.n	8001f76 <updateDistance+0x246>
 8001f6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001f76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dc02      	bgt.n	8001f88 <updateDistance+0x258>
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	e004      	b.n	8001f92 <updateDistance+0x262>
 8001f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001f92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dc02      	bgt.n	8001fa4 <updateDistance+0x274>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	e004      	b.n	8001fae <updateDistance+0x27e>
 8001fa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fb0:	f7fe fa94 	bl	80004dc <__aeabi_i2d>
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbc:	f009 ffe2 	bl	800bf84 <pow>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc6:	f7fe fa89 	bl	80004dc <__aeabi_i2d>
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd2:	f009 ffd7 	bl	800bf84 <pow>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe f931 	bl	8000244 <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	461d      	mov	r5, r3
 8001fea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fec:	f7fe fa76 	bl	80004dc <__aeabi_i2d>
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff8:	f009 ffc4 	bl	800bf84 <pow>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe f91e 	bl	8000244 <__adddf3>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f00a f820 	bl	800c054 <sqrt>
 8002014:	e9c7 0102 	strd	r0, r1, [r7, #8]
    distanceTraveled += (uint16_t) floor(calDis);
 8002018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800201c:	f009 ff30 	bl	800be80 <floor>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd9a 	bl	8000b60 <__aeabi_d2uiz>
 800202c:	4603      	mov	r3, r0
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <updateDistance+0x370>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <updateDistance+0x370>)
 800203a:	6013      	str	r3, [r2, #0]
    actualDistance += (calDis / 1000);
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <updateDistance+0x374>)
 8002042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002046:	f7fe fbdd 	bl	8000804 <__aeabi_ddiv>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <updateDistance+0x378>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe f8f4 	bl	8000244 <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4911      	ldr	r1, [pc, #68]	; (80020a8 <updateDistance+0x378>)
 8002062:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bdb0      	pop	{r4, r5, r7, pc}
 800206e:	bf00      	nop
 8002070:	9999999a 	.word	0x9999999a
 8002074:	3fa99999 	.word	0x3fa99999
 8002078:	33333333 	.word	0x33333333
 800207c:	3fc33333 	.word	0x3fc33333
 8002080:	33333333 	.word	0x33333333
 8002084:	3fd33333 	.word	0x3fd33333
 8002088:	20000628 	.word	0x20000628
 800208c:	3fd00000 	.word	0x3fd00000
 8002090:	3fe00000 	.word	0x3fe00000
 8002094:	3fe80000 	.word	0x3fe80000
 8002098:	20000308 	.word	0x20000308
 800209c:	51eb851f 	.word	0x51eb851f
 80020a0:	2000062c 	.word	0x2000062c
 80020a4:	408f4000 	.word	0x408f4000
 80020a8:	20000630 	.word	0x20000630

080020ac <combineUint_8ts>:

int16_t combineUint_8ts(uint8_t a, uint8_t b) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71bb      	strb	r3, [r7, #6]
    return ((0xFFFF & a) << 8) | (0xFFFF & b);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <getY>:
        } else return 0;
    }
    return 1;
}

void getY(uint8_t index, uint8_t delay) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	460a      	mov	r2, r1
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	71bb      	strb	r3, [r7, #6]
    if ((index & 0x01) == 0) {
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <getY+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	481a      	ldr	r0, [pc, #104]	; (8002160 <getY+0x8c>)
 80020f6:	f003 fb44 	bl	8005782 <HAL_GPIO_WritePin>
 80020fa:	e005      	b.n	8002108 <getY+0x34>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	4817      	ldr	r0, [pc, #92]	; (8002160 <getY+0x8c>)
 8002104:	f003 fb3d 	bl	8005782 <HAL_GPIO_WritePin>
    }

    if ((index & 0x02) == 0) {
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <getY+0x4c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002118:	4811      	ldr	r0, [pc, #68]	; (8002160 <getY+0x8c>)
 800211a:	f003 fb32 	bl	8005782 <HAL_GPIO_WritePin>
 800211e:	e005      	b.n	800212c <getY+0x58>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <getY+0x8c>)
 8002128:	f003 fb2b 	bl	8005782 <HAL_GPIO_WritePin>
    }

    if ((index & 0x04) == 0) {
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <getY+0x70>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213c:	4808      	ldr	r0, [pc, #32]	; (8002160 <getY+0x8c>)
 800213e:	f003 fb20 	bl	8005782 <HAL_GPIO_WritePin>
 8002142:	e005      	b.n	8002150 <getY+0x7c>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <getY+0x8c>)
 800214c:	f003 fb19 	bl	8005782 <HAL_GPIO_WritePin>
    }

    HAL_Delay(delay);
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fb4e 	bl	80047f4 <HAL_Delay>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40011000 	.word	0x40011000

08002164 <initWeightSensors>:
    pin.voltageAtSampledWeight = vAtS;
    pin.weightAtSampledWeight = wAtS;
    pin.weightCoef = wAtS * 1.0 / (vAtS - vAt0);
}

void initWeightSensors(struct YPin *pins) {
 8002164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    pins[0].voltageAtZeroWeight = 1200;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002172:	801a      	strh	r2, [r3, #0]
    pins[0].voltageAtSampledWeight = 1500;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800217a:	805a      	strh	r2, [r3, #2]
    pins[0].weightAtSampledWeight = 270;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002182:	809a      	strh	r2, [r3, #4]

    pins[1].voltageAtZeroWeight = 1300;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3310      	adds	r3, #16
 8002188:	f240 5214 	movw	r2, #1300	; 0x514
 800218c:	801a      	strh	r2, [r3, #0]
    pins[1].voltageAtSampledWeight = 1500;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3310      	adds	r3, #16
 8002192:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002196:	805a      	strh	r2, [r3, #2]
    pins[1].weightAtSampledWeight = 270;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3310      	adds	r3, #16
 800219c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80021a0:	809a      	strh	r2, [r3, #4]

    pins[2].voltageAtZeroWeight = 1800;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3320      	adds	r3, #32
 80021a6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80021aa:	801a      	strh	r2, [r3, #0]
    pins[2].voltageAtSampledWeight = 2600;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	f640 2228 	movw	r2, #2600	; 0xa28
 80021b4:	805a      	strh	r2, [r3, #2]
    pins[2].weightAtSampledWeight = 300;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3320      	adds	r3, #32
 80021ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021be:	809a      	strh	r2, [r3, #4]

    pins[3].voltageAtZeroWeight = 2800;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3330      	adds	r3, #48	; 0x30
 80021c4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80021c8:	801a      	strh	r2, [r3, #0]
    pins[3].voltageAtSampledWeight = 3200;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3330      	adds	r3, #48	; 0x30
 80021ce:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80021d2:	805a      	strh	r2, [r3, #2]
    pins[3].weightAtSampledWeight = 300;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021dc:	809a      	strh	r2, [r3, #4]

    pins[4].voltageAtZeroWeight = 1000;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3340      	adds	r3, #64	; 0x40
 80021e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e6:	801a      	strh	r2, [r3, #0]
    pins[4].voltageAtSampledWeight = 1800;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3340      	adds	r3, #64	; 0x40
 80021ec:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80021f0:	805a      	strh	r2, [r3, #2]
    pins[4].weightAtSampledWeight = 300;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3340      	adds	r3, #64	; 0x40
 80021f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021fa:	809a      	strh	r2, [r3, #4]

    pins[5].voltageAtZeroWeight = 1800;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3350      	adds	r3, #80	; 0x50
 8002200:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002204:	801a      	strh	r2, [r3, #0]
    pins[5].voltageAtSampledWeight = 2000;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3350      	adds	r3, #80	; 0x50
 800220a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800220e:	805a      	strh	r2, [r3, #2]
    pins[5].weightAtSampledWeight = 300;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3350      	adds	r3, #80	; 0x50
 8002214:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002218:	809a      	strh	r2, [r3, #4]

    pins[6].voltageAtZeroWeight = 1800;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3360      	adds	r3, #96	; 0x60
 800221e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002222:	801a      	strh	r2, [r3, #0]
    pins[6].voltageAtSampledWeight = 2100;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3360      	adds	r3, #96	; 0x60
 8002228:	f640 0234 	movw	r2, #2100	; 0x834
 800222c:	805a      	strh	r2, [r3, #2]
    pins[6].weightAtSampledWeight = 300;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3360      	adds	r3, #96	; 0x60
 8002232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002236:	809a      	strh	r2, [r3, #4]

    pins[7].voltageAtZeroWeight = 1000;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3370      	adds	r3, #112	; 0x70
 800223c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002240:	801a      	strh	r2, [r3, #0]
    pins[7].voltageAtSampledWeight = 21500;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3370      	adds	r3, #112	; 0x70
 8002246:	f245 32fc 	movw	r2, #21500	; 0x53fc
 800224a:	805a      	strh	r2, [r3, #2]
    pins[7].weightAtSampledWeight = 300;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3370      	adds	r3, #112	; 0x70
 8002250:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002254:	809a      	strh	r2, [r3, #4]

    for (uint8_t i = 0; i < 8; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	e029      	b.n	80022b0 <initWeightSensors+0x14c>
        pins[i].weightCoef =
                pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f938 	bl	80004dc <__aeabi_i2d>
 800226c:	4604      	mov	r4, r0
 800226e:	460d      	mov	r5, r1
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	885b      	ldrh	r3, [r3, #2]
 800227a:	4619      	mov	r1, r3
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	1acb      	subs	r3, r1, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f927 	bl	80004dc <__aeabi_i2d>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
        pins[i].weightCoef =
 8002292:	7bf9      	ldrb	r1, [r7, #15]
 8002294:	0109      	lsls	r1, r1, #4
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	1846      	adds	r6, r0, r1
                pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe fab1 	bl	8000804 <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
        pins[i].weightCoef =
 80022a6:	e9c6 2302 	strd	r2, r3, [r6, #8]
    for (uint8_t i = 0; i < 8; i++)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d9d2      	bls.n	800225c <initWeightSensors+0xf8>
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c0 <initializeHMC5883L>:

void initializeHMC5883L() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af04      	add	r7, sp, #16
    // 0x1E for developer access
    uint8_t initValue = 0x70;
 80022c6:	2370      	movs	r3, #112	; 0x70
 80022c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80022ca:	2364      	movs	r3, #100	; 0x64
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	2301      	movs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	1dfb      	adds	r3, r7, #7
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	2200      	movs	r2, #0
 80022da:	213c      	movs	r1, #60	; 0x3c
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <initializeHMC5883L+0x48>)
 80022de:	f003 fbcf 	bl	8005a80 <HAL_I2C_Mem_Write>
    initValue = 0xA0;
 80022e2:	23a0      	movs	r3, #160	; 0xa0
 80022e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	2201      	movs	r2, #1
 80022f6:	213c      	movs	r1, #60	; 0x3c
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <initializeHMC5883L+0x48>)
 80022fa:	f003 fbc1 	bl	8005a80 <HAL_I2C_Mem_Write>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000264 	.word	0x20000264

0800230c <mainPage>:

void mainPage(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8
    if (changingPage) {
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <mainPage+0xd0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d05b      	beq.n	80023d2 <mainPage+0xc6>
        changingPage = 0;
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <mainPage+0xd0>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
        currentPage = home;
 8002320:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <mainPage+0xd4>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800232e:	22f0      	movs	r2, #240	; 0xf0
 8002330:	2100      	movs	r1, #0
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe ffc7 	bl	80012c6 <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <mainPage+0xd8>)
 800233a:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 800233c:	230a      	movs	r3, #10
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	231f      	movs	r3, #31
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	2128      	movs	r1, #40	; 0x28
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff fa46 	bl	80017de <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	f002 fa4e 	bl	80047f4 <HAL_Delay>
        output_text = "Please choose an option below.";
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <mainPage+0xdc>)
 800235a:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 800235c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2300      	movs	r3, #0
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fa03 	bl	8001774 <LCD_DrawString_Color>
        HAL_Delay(200);
 800236e:	20c8      	movs	r0, #200	; 0xc8
 8002370:	f002 fa40 	bl	80047f4 <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8002374:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2328      	movs	r3, #40	; 0x28
 800237c:	2250      	movs	r2, #80	; 0x50
 800237e:	21e6      	movs	r1, #230	; 0xe6
 8002380:	2014      	movs	r0, #20
 8002382:	f7fe ffa0 	bl	80012c6 <LCD_Clear>
        output_text = "WEIGHT";
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <mainPage+0xe0>)
 8002388:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 800238a:	230f      	movs	r3, #15
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	21f2      	movs	r1, #242	; 0xf2
 800239a:	2023      	movs	r0, #35	; 0x23
 800239c:	f7ff fa1f 	bl	80017de <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 80023a0:	20c8      	movs	r0, #200	; 0xc8
 80023a2:	f002 fa27 	bl	80047f4 <HAL_Delay>
        output_text = "ACCEL.";
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <mainPage+0xe4>)
 80023a8:	607b      	str	r3, [r7, #4]
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 80023aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2328      	movs	r3, #40	; 0x28
 80023b2:	2250      	movs	r2, #80	; 0x50
 80023b4:	21e6      	movs	r1, #230	; 0xe6
 80023b6:	2082      	movs	r0, #130	; 0x82
 80023b8:	f7fe ff85 	bl	80012c6 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 80023bc:	230f      	movs	r3, #15
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	21f2      	movs	r1, #242	; 0xf2
 80023cc:	2096      	movs	r0, #150	; 0x96
 80023ce:	f7ff fa06 	bl	80017de <LCD_DrawString_Color_With_Delay>
    }
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000300 	.word	0x20000300
 80023e4:	0800d270 	.word	0x0800d270
 80023e8:	0800d298 	.word	0x0800d298
 80023ec:	0800d2b8 	.word	0x0800d2b8
 80023f0:	0800d2c0 	.word	0x0800d2c0

080023f4 <drawBackToHome>:

void drawBackToHome() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
    const char *output_text = "Return to Home";
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <drawBackToHome+0x44>)
 80023fc:	607b      	str	r3, [r7, #4]
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 80023fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2319      	movs	r3, #25
 8002406:	2282      	movs	r2, #130	; 0x82
 8002408:	f44f 718c 	mov.w	r1, #280	; 0x118
 800240c:	2014      	movs	r0, #20
 800240e:	f7fe ff5a 	bl	80012c6 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8002412:	230a      	movs	r3, #10
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	f240 111d 	movw	r1, #285	; 0x11d
 8002424:	201e      	movs	r0, #30
 8002426:	f7ff f9da 	bl	80017de <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 800242a:	2014      	movs	r0, #20
 800242c:	f002 f9e2 	bl	80047f4 <HAL_Delay>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	0800d2c8 	.word	0x0800d2c8

0800243c <weightPage>:

void weightPage(void) {
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af02      	add	r7, sp, #8
    char *output_text;
    if (changingPage) {
 8002442:	4b79      	ldr	r3, [pc, #484]	; (8002628 <weightPage+0x1ec>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d04f      	beq.n	80024ea <weightPage+0xae>
        changingPage = 0;
 800244a:	4b77      	ldr	r3, [pc, #476]	; (8002628 <weightPage+0x1ec>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
        currentPage = weight;
 8002450:	4b76      	ldr	r3, [pc, #472]	; (800262c <weightPage+0x1f0>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
        output_text = "W E I G H T D E T E C T I O N";
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <weightPage+0x1f4>)
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
        LCD_Clear(0, 0, 240, 320, BLACK);
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002462:	22f0      	movs	r2, #240	; 0xf0
 8002464:	2100      	movs	r1, #0
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe ff2d 	bl	80012c6 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 800246c:	230a      	movs	r3, #10
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	231f      	movs	r3, #31
 8002478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247a:	2128      	movs	r1, #40	; 0x28
 800247c:	200a      	movs	r0, #10
 800247e:	f7ff f9ae 	bl	80017de <LCD_DrawString_Color_With_Delay>
        drawBackToHome();
 8002482:	f7ff ffb7 	bl	80023f4 <drawBackToHome>

        for (uint8_t i = 0; i < 8; i++) {
 8002486:	2300      	movs	r3, #0
 8002488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800248c:	e026      	b.n	80024dc <weightPage+0xa0>
            char temp[10] = "";
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	809a      	strh	r2, [r3, #4]
            sprintf(temp, "Y%d: ", i);
 800249c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4963      	ldr	r1, [pc, #396]	; (8002634 <weightPage+0x1f8>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 f81e 	bl	80084e8 <siprintf>
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 80024ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3364      	adds	r3, #100	; 0x64
 80024be:	b299      	uxth	r1, r3
 80024c0:	f107 0210 	add.w	r2, r7, #16
 80024c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	206e      	movs	r0, #110	; 0x6e
 80024ce:	f7ff f951 	bl	8001774 <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 80024d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024d6:	3301      	adds	r3, #1
 80024d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80024dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024e0:	2b07      	cmp	r3, #7
 80024e2:	d9d4      	bls.n	800248e <weightPage+0x52>
        }

        initWeightSensors(weightSensors);
 80024e4:	4854      	ldr	r0, [pc, #336]	; (8002638 <weightPage+0x1fc>)
 80024e6:	f7ff fe3d 	bl	8002164 <initWeightSensors>
    }

    uint16_t sum = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    for (uint8_t counter = 0; counter < 8; counter++) {
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80024f4:	e070      	b.n	80025d8 <weightPage+0x19c>
        getY(counter, 20);
 80024f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80024fa:	2114      	movs	r1, #20
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fde9 	bl	80020d4 <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8002502:	484e      	ldr	r0, [pc, #312]	; (800263c <weightPage+0x200>)
 8002504:	f002 fc38 	bl	8004d78 <HAL_ADC_GetValue>
 8002508:	6338      	str	r0, [r7, #48]	; 0x30
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 800250a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800250e:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <weightPage+0x1fc>)
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	4413      	add	r3, r2
 8002514:	3308      	adds	r3, #8
 8002516:	e9d3 4500 	ldrd	r4, r5, [r3]
 800251a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800251e:	4a46      	ldr	r2, [pc, #280]	; (8002638 <weightPage+0x1fc>)
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd ffc5 	bl	80004bc <__aeabi_ui2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f7fe f839 	bl	80005b0 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fae3 	bl	8000b10 <__aeabi_d2iz>
 800254a:	4603      	mov	r3, r0
 800254c:	873b      	strh	r3, [r7, #56]	; 0x38
        if (weightPin < 0) weightPin = 0;
 800254e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002552:	2b00      	cmp	r3, #0
 8002554:	da01      	bge.n	800255a <weightPage+0x11e>
 8002556:	2300      	movs	r3, #0
 8002558:	873b      	strh	r3, [r7, #56]	; 0x38
        sum += weightPin;
 800255a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800255c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800255e:	4413      	add	r3, r2
 8002560:	87bb      	strh	r3, [r7, #60]	; 0x3c
//        if (counter < 4)
//        	LCD_DrawHeatCircle(30, 240 - counter * 40, 30, 85 - val * 85 / 4096, 85);
//		else
//			LCD_DrawHeatCircle(70, 120 + (counter - 4) * 40, 30, 85 - val * 85 / 4096, 85);

        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8002562:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4a34      	ldr	r2, [pc, #208]	; (8002640 <weightPage+0x204>)
 8002570:	1898      	adds	r0, r3, r2
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	0b1b      	lsrs	r3, r3, #12
 8002580:	b29b      	uxth	r3, r3
 8002582:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002586:	b29b      	uxth	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fede 	bl	800134a <LCD_SetPinColor>

        char dec[12] = "";
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
        sprintf(dec, "%4d %5d", val, weightPin);
 800259c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80025a0:	1d38      	adds	r0, r7, #4
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	4927      	ldr	r1, [pc, #156]	; (8002644 <weightPage+0x208>)
 80025a6:	f005 ff9f 	bl	80084e8 <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80025aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	00d2      	lsls	r2, r2, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3364      	adds	r3, #100	; 0x64
 80025bc:	b299      	uxth	r1, r3
 80025be:	1d3a      	adds	r2, r7, #4
 80025c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	208c      	movs	r0, #140	; 0x8c
 80025ca:	f7ff f8d3 	bl	8001774 <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 80025ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80025d2:	3301      	adds	r3, #1
 80025d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80025d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80025dc:	2b07      	cmp	r3, #7
 80025de:	d98a      	bls.n	80024f6 <weightPage+0xba>
    }
	LCD_PrintHeatMap(weightSensorsData);
 80025e0:	4817      	ldr	r0, [pc, #92]	; (8002640 <weightPage+0x204>)
 80025e2:	f7fe fef9 	bl	80013d8 <LCD_PrintHeatMap>

    char output_gram[20] = "";
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
    sprintf(output_gram, "%6d Gram", sum);
 80025f8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4912      	ldr	r1, [pc, #72]	; (8002648 <weightPage+0x20c>)
 8002600:	4618      	mov	r0, r3
 8002602:	f005 ff71 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, WHITE);
 8002606:	f107 021c 	add.w	r2, r7, #28
 800260a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	231f      	movs	r3, #31
 8002612:	2150      	movs	r1, #80	; 0x50
 8002614:	2078      	movs	r0, #120	; 0x78
 8002616:	f7ff f8ad 	bl	8001774 <LCD_DrawString_Color>

    HAL_Delay(20);
 800261a:	2014      	movs	r0, #20
 800261c:	f002 f8ea 	bl	80047f4 <HAL_Delay>
}
 8002620:	bf00      	nop
 8002622:	3740      	adds	r7, #64	; 0x40
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	20000000 	.word	0x20000000
 800262c:	20000300 	.word	0x20000300
 8002630:	0800d2d8 	.word	0x0800d2d8
 8002634:	0800d2f8 	.word	0x0800d2f8
 8002638:	20000638 	.word	0x20000638
 800263c:	20000234 	.word	0x20000234
 8002640:	200006b8 	.word	0x200006b8
 8002644:	0800d300 	.word	0x0800d300
 8002648:	0800d308 	.word	0x0800d308
 800264c:	00000000 	.word	0x00000000

08002650 <accelerometerPage>:

void accelerometerPage() {
 8002650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002654:	b0be      	sub	sp, #248	; 0xf8
 8002656:	af04      	add	r7, sp, #16
    char *output_text;
    if (changingPage) {
 8002658:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <accelerometerPage+0x184>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8297 	beq.w	8002b90 <accelerometerPage+0x540>
        /* BEGIN CALIBRATING ACCELEROMETER */
        clearAcceleRecord();
 8002662:	f7ff f9f7 	bl	8001a54 <clearAcceleRecord>
        clearAngleRecord();
 8002666:	f7ff fa35 	bl	8001ad4 <clearAngleRecord>
        uint8_t setPWLMode = 0x00; //reset accelerometer
 800266a:	2300      	movs	r3, #0
 800266c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002670:	2364      	movs	r3, #100	; 0x64
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	2301      	movs	r3, #1
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	222d      	movs	r2, #45	; 0x2d
 8002682:	213a      	movs	r1, #58	; 0x3a
 8002684:	4854      	ldr	r0, [pc, #336]	; (80027d8 <accelerometerPage+0x188>)
 8002686:	f003 f9fb 	bl	8005a80 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800268a:	2064      	movs	r0, #100	; 0x64
 800268c:	f002 f8b2 	bl	80047f4 <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 8002690:	2308      	movs	r3, #8
 8002692:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002696:	2364      	movs	r3, #100	; 0x64
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2301      	movs	r3, #1
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	222d      	movs	r2, #45	; 0x2d
 80026a8:	213a      	movs	r1, #58	; 0x3a
 80026aa:	484b      	ldr	r0, [pc, #300]	; (80027d8 <accelerometerPage+0x188>)
 80026ac:	f003 f9e8 	bl	8005a80 <HAL_I2C_Mem_Write>
        uint8_t formatting = 0x05; // full res +-4g
 80026b0:	2305      	movs	r3, #5
 80026b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 80026b6:	2364      	movs	r3, #100	; 0x64
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2301      	movs	r3, #1
 80026c6:	2231      	movs	r2, #49	; 0x31
 80026c8:	213a      	movs	r1, #58	; 0x3a
 80026ca:	4843      	ldr	r0, [pc, #268]	; (80027d8 <accelerometerPage+0x188>)
 80026cc:	f003 f9d8 	bl	8005a80 <HAL_I2C_Mem_Write>
        uint8_t debug = 0x00;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 80026d6:	2364      	movs	r3, #100	; 0x64
 80026d8:	9302      	str	r3, [sp, #8]
 80026da:	2301      	movs	r3, #1
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	2200      	movs	r2, #0
 80026e8:	213a      	movs	r1, #58	; 0x3a
 80026ea:	483b      	ldr	r0, [pc, #236]	; (80027d8 <accelerometerPage+0x188>)
 80026ec:	f003 fac2 	bl	8005c74 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026f8:	22f0      	movs	r2, #240	; 0xf0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fde2 	bl	80012c6 <LCD_Clear>
        HAL_Delay(100);
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f002 f876 	bl	80047f4 <HAL_Delay>
        if (debug != 0xE5) {
 8002708:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800270c:	2be5      	cmp	r3, #229	; 0xe5
 800270e:	d02a      	beq.n	8002766 <accelerometerPage+0x116>
            output_text = "SENSORS NOT PRESENT";
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <accelerometerPage+0x18c>)
 8002712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 8002716:	2305      	movs	r3, #5
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002724:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002728:	2164      	movs	r1, #100	; 0x64
 800272a:	2032      	movs	r0, #50	; 0x32
 800272c:	f7ff f857 	bl	80017de <LCD_DrawString_Color_With_Delay>
            output_text = "PLEASE RETRY AFTER CONNECTING THE ACCELEROMETER";
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <accelerometerPage+0x190>)
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 8002736:	2303      	movs	r3, #3
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2300      	movs	r3, #0
 8002742:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002746:	2196      	movs	r1, #150	; 0x96
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff f848 	bl	80017de <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 800274e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002752:	f002 f84f 	bl	80047f4 <HAL_Delay>
            currentPage = home;
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <accelerometerPage+0x194>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
            changingPage = 1;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <accelerometerPage+0x184>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f000 bcf8 	b.w	8003156 <accelerometerPage+0xb06>
            return; //BACK TO HOME
        }
        output_text = "CALIBRATING IN 2s. DO NOT MOVE YOUR LUGGAGE.";
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <accelerometerPage+0x198>)
 8002768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 800276c:	230a      	movs	r3, #10
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002778:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff f82d 	bl	80017de <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8002784:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002788:	f002 f834 	bl	80047f4 <HAL_Delay>
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        LCD_Clear(0, 0, 240, 320, BLACK);
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027a6:	22f0      	movs	r2, #240	; 0xf0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe fd8b 	bl	80012c6 <LCD_Clear>
        output_text = "CALIBRATING...";
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <accelerometerPage+0x19c>)
 80027b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color(80, 100, output_text, RED, WHITE);
 80027b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80027c4:	2164      	movs	r1, #100	; 0x64
 80027c6:	2050      	movs	r0, #80	; 0x50
 80027c8:	f7fe ffd4 	bl	8001774 <LCD_DrawString_Color>
        for (short i = 0; i < 50; ++i) {
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 80027d2:	e06b      	b.n	80028ac <accelerometerPage+0x25c>
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000264 	.word	0x20000264
 80027dc:	0800d314 	.word	0x0800d314
 80027e0:	0800d328 	.word	0x0800d328
 80027e4:	20000300 	.word	0x20000300
 80027e8:	0800d358 	.word	0x0800d358
 80027ec:	0800d388 	.word	0x0800d388
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80027f0:	2006      	movs	r0, #6
 80027f2:	f004 ff03 	bl	80075fc <malloc>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 80027fc:	2364      	movs	r3, #100	; 0x64
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2306      	movs	r3, #6
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2232      	movs	r2, #50	; 0x32
 800280e:	213a      	movs	r1, #58	; 0x3a
 8002810:	48cd      	ldr	r0, [pc, #820]	; (8002b48 <accelerometerPage+0x4f8>)
 8002812:	f003 fa2f 	bl	8005c74 <HAL_I2C_Mem_Read>
            /* Take maximum reading only */
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 8002816:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800281a:	3301      	adds	r3, #1
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f7ff fc40 	bl	80020ac <combineUint_8ts>
 800282c:	4603      	mov	r3, r0
 800282e:	115b      	asrs	r3, r3, #5
 8002830:	b21b      	sxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002838:	4413      	add	r3, r2
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 800283e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002842:	3303      	adds	r3, #3
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800284a:	3302      	adds	r3, #2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff fc2b 	bl	80020ac <combineUint_8ts>
 8002856:	4603      	mov	r3, r0
 8002858:	115b      	asrs	r3, r3, #5
 800285a:	b21b      	sxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002862:	4413      	add	r3, r2
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 8002868:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800286c:	3305      	adds	r3, #5
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002874:	3304      	adds	r3, #4
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7ff fc16 	bl	80020ac <combineUint_8ts>
 8002880:	4603      	mov	r3, r0
 8002882:	115b      	asrs	r3, r3, #5
 8002884:	b21b      	sxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288c:	4413      	add	r3, r2
 800288e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            free(arrayOfData);
 8002892:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002896:	f004 feb9 	bl	800760c <free>
            HAL_Delay(10);
 800289a:	200a      	movs	r0, #10
 800289c:	f001 ffaa 	bl	80047f4 <HAL_Delay>
        for (short i = 0; i < 50; ++i) {
 80028a0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80028a4:	3301      	adds	r3, #1
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 80028ac:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80028b0:	2b31      	cmp	r3, #49	; 0x31
 80028b2:	dd9d      	ble.n	80027f0 <accelerometerPage+0x1a0>
        }
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80028b4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80028b8:	f7fd fe10 	bl	80004dc <__aeabi_i2d>
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	4ba2      	ldr	r3, [pc, #648]	; (8002b4c <accelerometerPage+0x4fc>)
 80028c2:	f7fd ff9f 	bl	8000804 <__aeabi_ddiv>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f009 fad7 	bl	800be80 <floor>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f919 	bl	8000b10 <__aeabi_d2iz>
 80028de:	4603      	mov	r3, r0
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	4b9b      	ldr	r3, [pc, #620]	; (8002b50 <accelerometerPage+0x500>)
 80028e4:	801a      	strh	r2, [r3, #0]
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 80028e6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80028ea:	f7fd fdf7 	bl	80004dc <__aeabi_i2d>
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	4b96      	ldr	r3, [pc, #600]	; (8002b4c <accelerometerPage+0x4fc>)
 80028f4:	f7fd ff86 	bl	8000804 <__aeabi_ddiv>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f009 fabe 	bl	800be80 <floor>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f900 	bl	8000b10 <__aeabi_d2iz>
 8002910:	4603      	mov	r3, r0
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b8f      	ldr	r3, [pc, #572]	; (8002b54 <accelerometerPage+0x504>)
 8002916:	801a      	strh	r2, [r3, #0]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002918:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800291c:	f7fd fdde 	bl	80004dc <__aeabi_i2d>
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <accelerometerPage+0x4fc>)
 8002926:	f7fd ff6d 	bl	8000804 <__aeabi_ddiv>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f009 faa5 	bl	800be80 <floor>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f8e7 	bl	8000b10 <__aeabi_d2iz>
 8002942:	4603      	mov	r3, r0
 8002944:	b21a      	sxth	r2, r3
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <accelerometerPage+0x508>)
 8002948:	801a      	strh	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002952:	22f0      	movs	r2, #240	; 0xf0
 8002954:	2100      	movs	r1, #0
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe fcb5 	bl	80012c6 <LCD_Clear>
        initializeHMC5883L();
 800295c:	f7ff fcb0 	bl	80022c0 <initializeHMC5883L>
        output_text = "CALIBRATING FINISHED. CONTINUING";
 8002960:	4b7e      	ldr	r3, [pc, #504]	; (8002b5c <accelerometerPage+0x50c>)
 8002962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8002966:	230a      	movs	r3, #10
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002972:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002976:	2164      	movs	r1, #100	; 0x64
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe ff30 	bl	80017de <LCD_DrawString_Color_With_Delay>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <accelerometerPage+0x500>)
 80029b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	4968      	ldr	r1, [pc, #416]	; (8002b60 <accelerometerPage+0x510>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f005 fd91 	bl	80084e8 <siprintf>
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <accelerometerPage+0x504>)
 80029c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029cc:	461a      	mov	r2, r3
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4963      	ldr	r1, [pc, #396]	; (8002b60 <accelerometerPage+0x510>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 fd87 	bl	80084e8 <siprintf>
        sprintf(z_debug, "%05d", initZ_Acc_Reading);
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <accelerometerPage+0x508>)
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	461a      	mov	r2, r3
 80029e2:	463b      	mov	r3, r7
 80029e4:	495e      	ldr	r1, [pc, #376]	; (8002b60 <accelerometerPage+0x510>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f005 fd7e 	bl	80084e8 <siprintf>
        strcat(x_debug, "  x");
 80029ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fc19 	bl	8000228 <strlen>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fe:	4413      	add	r3, r2
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <accelerometerPage+0x514>)
 8002a02:	6810      	ldr	r0, [r2, #0]
 8002a04:	6018      	str	r0, [r3, #0]
        strcat(y_debug, "  y");
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc0c 	bl	8000228 <strlen>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a53      	ldr	r2, [pc, #332]	; (8002b68 <accelerometerPage+0x518>)
 8002a1c:	6810      	ldr	r0, [r2, #0]
 8002a1e:	6018      	str	r0, [r3, #0]
        strcat(z_debug, "  z");
 8002a20:	463b      	mov	r3, r7
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fc00 	bl	8000228 <strlen>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a4e      	ldr	r2, [pc, #312]	; (8002b6c <accelerometerPage+0x51c>)
 8002a32:	6810      	ldr	r0, [r2, #0]
 8002a34:	6018      	str	r0, [r3, #0]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	218c      	movs	r1, #140	; 0x8c
 8002a44:	203c      	movs	r0, #60	; 0x3c
 8002a46:	f7fe fe95 	bl	8001774 <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 160, y_debug, BLACK, WHITE);
 8002a4a:	f107 0214 	add.w	r2, r7, #20
 8002a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	21a0      	movs	r1, #160	; 0xa0
 8002a58:	203c      	movs	r0, #60	; 0x3c
 8002a5a:	f7fe fe8b 	bl	8001774 <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 180, z_debug, BLACK, WHITE);
 8002a5e:	463a      	mov	r2, r7
 8002a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	21b4      	movs	r1, #180	; 0xb4
 8002a6a:	203c      	movs	r0, #60	; 0x3c
 8002a6c:	f7fe fe82 	bl	8001774 <LCD_DrawString_Color>
        HAL_Delay(1500);
 8002a70:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a74:	f001 febe 	bl	80047f4 <HAL_Delay>
        /* COMPLETED CALIBRATING ACCELEROMETER */
        changingPage = 0;
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <accelerometerPage+0x520>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
        currentPage = accelerometer;
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <accelerometerPage+0x524>)
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
        output_text = "A C C E L E R O M E T E R.";
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <accelerometerPage+0x528>)
 8002a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a92:	22f0      	movs	r2, #240	; 0xf0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe fc15 	bl	80012c6 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	231f      	movs	r3, #31
 8002aa8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002aac:	2128      	movs	r1, #40	; 0x28
 8002aae:	200a      	movs	r0, #10
 8002ab0:	f7fe fe95 	bl	80017de <LCD_DrawString_Color_With_Delay>
        drawBackToHome();
 8002ab4:	f7ff fc9e 	bl	80023f4 <drawBackToHome>
        output_text = "X: ";
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <accelerometerPage+0x52c>)
 8002aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002ac6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002aca:	2164      	movs	r1, #100	; 0x64
 8002acc:	2028      	movs	r0, #40	; 0x28
 8002ace:	f7fe fe51 	bl	8001774 <LCD_DrawString_Color>
        output_text = "Y: ";
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <accelerometerPage+0x530>)
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ae0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002ae4:	2182      	movs	r1, #130	; 0x82
 8002ae6:	2028      	movs	r0, #40	; 0x28
 8002ae8:	f7fe fe44 	bl	8001774 <LCD_DrawString_Color>
        output_text = "Z: ";
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <accelerometerPage+0x534>)
 8002aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	231f      	movs	r3, #31
 8002af8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002afc:	21a0      	movs	r1, #160	; 0xa0
 8002afe:	2028      	movs	r0, #40	; 0x28
 8002b00:	f7fe fe38 	bl	8001774 <LCD_DrawString_Color>
        output_text = "DIS: ";
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <accelerometerPage+0x538>)
 8002b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        LCD_DrawString_Color(25, 190, output_text, WHITE, BLACK);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b16:	21be      	movs	r1, #190	; 0xbe
 8002b18:	2019      	movs	r0, #25
 8002b1a:	f7fe fe2b 	bl	8001774 <LCD_DrawString_Color>
        /* DEBUG MESSAGE BELOW */
        if (debug != 0xE5) {
 8002b1e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b22:	2be5      	cmp	r3, #229	; 0xe5
 8002b24:	d034      	beq.n	8002b90 <accelerometerPage+0x540>
            output_text = "SENSOR NP";
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <accelerometerPage+0x53c>)
 8002b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 8002b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b3a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002b3e:	208c      	movs	r0, #140	; 0x8c
 8002b40:	f7fe fe18 	bl	8001774 <LCD_DrawString_Color>
 8002b44:	e024      	b.n	8002b90 <accelerometerPage+0x540>
 8002b46:	bf00      	nop
 8002b48:	20000264 	.word	0x20000264
 8002b4c:	40490000 	.word	0x40490000
 8002b50:	20000302 	.word	0x20000302
 8002b54:	20000304 	.word	0x20000304
 8002b58:	20000306 	.word	0x20000306
 8002b5c:	0800d398 	.word	0x0800d398
 8002b60:	0800d3bc 	.word	0x0800d3bc
 8002b64:	0800d3c4 	.word	0x0800d3c4
 8002b68:	0800d3c8 	.word	0x0800d3c8
 8002b6c:	0800d3cc 	.word	0x0800d3cc
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000300 	.word	0x20000300
 8002b78:	0800d3d0 	.word	0x0800d3d0
 8002b7c:	0800d3ec 	.word	0x0800d3ec
 8002b80:	0800d3f0 	.word	0x0800d3f0
 8002b84:	0800d3f4 	.word	0x0800d3f4
 8002b88:	0800d3f8 	.word	0x0800d3f8
 8002b8c:	0800d400 	.word	0x0800d400
        }
        /* DEBUG MESSAGE ABOVE */
    }
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8002b90:	2006      	movs	r0, #6
 8002b92:	f004 fd33 	bl	80075fc <malloc>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8002b9c:	235a      	movs	r3, #90	; 0x5a
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	2232      	movs	r2, #50	; 0x32
 8002bae:	213a      	movs	r1, #58	; 0x3a
 8002bb0:	48c9      	ldr	r0, [pc, #804]	; (8002ed8 <accelerometerPage+0x888>)
 8002bb2:	f003 f85f 	bl	8005c74 <HAL_I2C_Mem_Read>
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8002be0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 8002bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7ff fa54 	bl	80020ac <combineUint_8ts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	115b      	asrs	r3, r3, #5
 8002c08:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8002c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c10:	3303      	adds	r3, #3
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c18:	3302      	adds	r3, #2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7ff fa44 	bl	80020ac <combineUint_8ts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	115b      	asrs	r3, r3, #5
 8002c28:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8002c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c30:	3305      	adds	r3, #5
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c38:	3304      	adds	r3, #4
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7ff fa34 	bl	80020ac <combineUint_8ts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	115b      	asrs	r3, r3, #5
 8002c48:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8002c4c:	2006      	movs	r0, #6
 8002c4e:	f004 fcd5 	bl	80075fc <malloc>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    uint8_t writeMode = 0x01;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8002c5e:	2364      	movs	r3, #100	; 0x64
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	2301      	movs	r3, #1
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	2202      	movs	r2, #2
 8002c70:	213c      	movs	r1, #60	; 0x3c
 8002c72:	4899      	ldr	r0, [pc, #612]	; (8002ed8 <accelerometerPage+0x888>)
 8002c74:	f002 ff04 	bl	8005a80 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 8002c78:	2364      	movs	r3, #100	; 0x64
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2306      	movs	r3, #6
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	213c      	movs	r1, #60	; 0x3c
 8002c8c:	4892      	ldr	r0, [pc, #584]	; (8002ed8 <accelerometerPage+0x888>)
 8002c8e:	f002 fff1 	bl	8005c74 <HAL_I2C_Mem_Read>
    const int16_t thetaX = combineUint_8ts(compassData[0], compassData[1]);
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f7ff fa02 	bl	80020ac <combineUint_8ts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    const int16_t thetaY = combineUint_8ts(compassData[2], compassData[3]);
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cba:	3303      	adds	r3, #3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f7ff f9f3 	bl	80020ac <combineUint_8ts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
 8002ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd8:	3305      	adds	r3, #5
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7ff f9e4 	bl	80020ac <combineUint_8ts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
    /* DEBUG MESSAGE BELOW */
    sprintf(x_print, "%+06d", combined_aX);
 8002cea:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
 8002cee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cf2:	497a      	ldr	r1, [pc, #488]	; (8002edc <accelerometerPage+0x88c>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 fbf7 	bl	80084e8 <siprintf>
    sprintf(y_print, "%+06d", combined_aY);
 8002cfa:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 8002cfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d02:	4976      	ldr	r1, [pc, #472]	; (8002edc <accelerometerPage+0x88c>)
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 fbef 	bl	80084e8 <siprintf>
    sprintf(z_print, "%+06d", combined_aZ);
 8002d0a:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 8002d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d12:	4972      	ldr	r1, [pc, #456]	; (8002edc <accelerometerPage+0x88c>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 fbe7 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8002d1a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2300      	movs	r3, #0
 8002d26:	21d2      	movs	r1, #210	; 0xd2
 8002d28:	2014      	movs	r0, #20
 8002d2a:	f7fe fd23 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 210, y_print, BLACK, WHITE);
 8002d2e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	21d2      	movs	r1, #210	; 0xd2
 8002d3c:	2050      	movs	r0, #80	; 0x50
 8002d3e:	f7fe fd19 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 210, z_print, BLACK, WHITE);
 8002d42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	21d2      	movs	r1, #210	; 0xd2
 8002d50:	208c      	movs	r0, #140	; 0x8c
 8002d52:	f7fe fd0f 	bl	8001774 <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", initX_Acc_Reading);
 8002d56:	4b62      	ldr	r3, [pc, #392]	; (8002ee0 <accelerometerPage+0x890>)
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d62:	495e      	ldr	r1, [pc, #376]	; (8002edc <accelerometerPage+0x88c>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fbbf 	bl	80084e8 <siprintf>
    sprintf(y_print, "%+06d", initY_Acc_Reading);
 8002d6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <accelerometerPage+0x894>)
 8002d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d76:	4959      	ldr	r1, [pc, #356]	; (8002edc <accelerometerPage+0x88c>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 fbb5 	bl	80084e8 <siprintf>
    sprintf(z_print, "%+06d", initZ_Acc_Reading);
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	; (8002ee8 <accelerometerPage+0x898>)
 8002d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d8a:	4954      	ldr	r1, [pc, #336]	; (8002edc <accelerometerPage+0x88c>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f005 fbab 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(20, 230, x_print, BLACK, WHITE);
 8002d92:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	21e6      	movs	r1, #230	; 0xe6
 8002da0:	2014      	movs	r0, #20
 8002da2:	f7fe fce7 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 230, y_print, BLACK, WHITE);
 8002da6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	21e6      	movs	r1, #230	; 0xe6
 8002db4:	2050      	movs	r0, #80	; 0x50
 8002db6:	f7fe fcdd 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 230, z_print, BLACK, WHITE);
 8002dba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	21e6      	movs	r1, #230	; 0xe6
 8002dc8:	208c      	movs	r0, #140	; 0x8c
 8002dca:	f7fe fcd3 	bl	8001774 <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawX);
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <accelerometerPage+0x89c>)
 8002dd0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dda:	4940      	ldr	r1, [pc, #256]	; (8002edc <accelerometerPage+0x88c>)
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 fb83 	bl	80084e8 <siprintf>
    sprintf(y_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawY);
 8002de2:	4b42      	ldr	r3, [pc, #264]	; (8002eec <accelerometerPage+0x89c>)
 8002de4:	f9b3 312e 	ldrsh.w	r3, [r3, #302]	; 0x12e
 8002de8:	461a      	mov	r2, r3
 8002dea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dee:	493b      	ldr	r1, [pc, #236]	; (8002edc <accelerometerPage+0x88c>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f005 fb79 	bl	80084e8 <siprintf>
    sprintf(z_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawZ);
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <accelerometerPage+0x89c>)
 8002df8:	f9b3 3130 	ldrsh.w	r3, [r3, #304]	; 0x130
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e02:	4936      	ldr	r1, [pc, #216]	; (8002edc <accelerometerPage+0x88c>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f005 fb6f 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(20, 270, x_print, BLACK, WHITE);
 8002e0a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002e1a:	2014      	movs	r0, #20
 8002e1c:	f7fe fcaa 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 270, y_print, BLACK, WHITE);
 8002e20:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002e30:	2050      	movs	r0, #80	; 0x50
 8002e32:	f7fe fc9f 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 270, z_print, BLACK, WHITE);
 8002e36:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002e46:	208c      	movs	r0, #140	; 0x8c
 8002e48:	f7fe fc94 	bl	8001774 <LCD_DrawString_Color>
    /* DEBUG MESSAGE ABOVE */

    // All axes have a scale factor of 7.8
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <accelerometerPage+0x890>)
 8002e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bfb8      	it	lt
 8002e56:	425b      	neglt	r3, r3
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	bfb8      	it	lt
 8002e64:	4252      	neglt	r2, r2
 8002e66:	b292      	uxth	r2, r2
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	da0c      	bge.n	8002e86 <accelerometerPage+0x836>
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8002e6c:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb33 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002e76:	a316      	add	r3, pc, #88	; (adr r3, 8002ed0 <accelerometerPage+0x880>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fb98 	bl	80005b0 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	e003      	b.n	8002e8e <accelerometerPage+0x83e>
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8002e8e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <accelerometerPage+0x894>)
 8002e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bfb8      	it	lt
 8002e9c:	425b      	neglt	r3, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	bfb8      	it	lt
 8002eaa:	4252      	neglt	r2, r2
 8002eac:	b292      	uxth	r2, r2
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	da1e      	bge.n	8002ef0 <accelerometerPage+0x8a0>
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8002eb2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb10 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002ebc:	a304      	add	r3, pc, #16	; (adr r3, 8002ed0 <accelerometerPage+0x880>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f7fd fb75 	bl	80005b0 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e015      	b.n	8002ef8 <accelerometerPage+0x8a8>
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	8e8a71de 	.word	0x8e8a71de
 8002ed4:	3f6ff2e4 	.word	0x3f6ff2e4
 8002ed8:	20000264 	.word	0x20000264
 8002edc:	0800d40c 	.word	0x0800d40c
 8002ee0:	20000302 	.word	0x20000302
 8002ee4:	20000304 	.word	0x20000304
 8002ee8:	20000306 	.word	0x20000306
 8002eec:	20000308 	.word	0x20000308
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8002ef8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8002efc:	4b9c      	ldr	r3, [pc, #624]	; (8003170 <accelerometerPage+0xb20>)
 8002efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bfb8      	it	lt
 8002f06:	425b      	neglt	r3, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 8002f10:	2a00      	cmp	r2, #0
 8002f12:	bfb8      	it	lt
 8002f14:	4252      	neglt	r2, r2
 8002f16:	b292      	uxth	r2, r2
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	da0c      	bge.n	8002f36 <accelerometerPage+0x8e6>
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8002f1c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fadb 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002f26:	a38e      	add	r3, pc, #568	; (adr r3, 8003160 <accelerometerPage+0xb10>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fb40 	bl	80005b0 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	e003      	b.n	8002f3e <accelerometerPage+0x8ee>
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8002f3e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
    sprintf(x_print, "%+0.2f", finalizedX);
 8002f42:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002f46:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002f4a:	498a      	ldr	r1, [pc, #552]	; (8003174 <accelerometerPage+0xb24>)
 8002f4c:	f005 facc 	bl	80084e8 <siprintf>
    sprintf(y_print, "%+0.2f", finalizedY);
 8002f50:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002f54:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002f58:	4986      	ldr	r1, [pc, #536]	; (8003174 <accelerometerPage+0xb24>)
 8002f5a:	f005 fac5 	bl	80084e8 <siprintf>
    sprintf(z_print, "%+0.2f", finalizedZ);
 8002f5e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002f62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002f66:	4983      	ldr	r1, [pc, #524]	; (8003174 <accelerometerPage+0xb24>)
 8002f68:	f005 fabe 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(100, 100, x_print, CYAN, BLACK);
 8002f6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002f70:	2300      	movs	r3, #0
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f78:	2164      	movs	r1, #100	; 0x64
 8002f7a:	2064      	movs	r0, #100	; 0x64
 8002f7c:	f7fe fbfa 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 130, y_print, YELLOW, BLACK);
 8002f80:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002f84:	2300      	movs	r3, #0
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f8c:	2182      	movs	r1, #130	; 0x82
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f7fe fbf0 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 160, z_print, BLUE, BLACK);
 8002f94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	231f      	movs	r3, #31
 8002f9e:	21a0      	movs	r1, #160	; 0xa0
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	f7fe fbe7 	bl	8001774 <LCD_DrawString_Color>
    sprintf(x_print, "%+05d", thetaX);
 8002fa6:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	; 0xbe
 8002faa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fae:	4972      	ldr	r1, [pc, #456]	; (8003178 <accelerometerPage+0xb28>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f005 fa99 	bl	80084e8 <siprintf>
    sprintf(y_print, "%+05d", thetaY);
 8002fb6:	f9b7 20bc 	ldrsh.w	r2, [r7, #188]	; 0xbc
 8002fba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fbe:	496e      	ldr	r1, [pc, #440]	; (8003178 <accelerometerPage+0xb28>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fa91 	bl	80084e8 <siprintf>
    sprintf(z_print, "%+05d", thetaZ);
 8002fc6:	f9b7 20ba 	ldrsh.w	r2, [r7, #186]	; 0xba
 8002fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fce:	496a      	ldr	r1, [pc, #424]	; (8003178 <accelerometerPage+0xb28>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 fa89 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(160, 100, x_print, CYAN, BLACK);
 8002fd6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	20a0      	movs	r0, #160	; 0xa0
 8002fe6:	f7fe fbc5 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 130, y_print, YELLOW, BLACK);
 8002fea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ff6:	2182      	movs	r1, #130	; 0x82
 8002ff8:	20a0      	movs	r0, #160	; 0xa0
 8002ffa:	f7fe fbbb 	bl	8001774 <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 160, z_print, BLUE, BLACK);
 8002ffe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	231f      	movs	r3, #31
 8003008:	21a0      	movs	r1, #160	; 0xa0
 800300a:	20a0      	movs	r0, #160	; 0xa0
 800300c:	f7fe fbb2 	bl	8001774 <LCD_DrawString_Color>
    const double angle = atan2(thetaY, thetaX) * 180 / M_PI;
 8003010:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa61 	bl	80004dc <__aeabi_i2d>
 800301a:	4680      	mov	r8, r0
 800301c:	4689      	mov	r9, r1
 800301e:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa5a 	bl	80004dc <__aeabi_i2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4640      	mov	r0, r8
 800302e:	4649      	mov	r1, r9
 8003030:	f008 ffa6 	bl	800bf80 <atan2>
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <accelerometerPage+0xb2c>)
 800303a:	f7fd fab9 	bl	80005b0 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	a348      	add	r3, pc, #288	; (adr r3, 8003168 <accelerometerPage+0xb18>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd fbda 	bl	8000804 <__aeabi_ddiv>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 8003058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800305c:	f7fd fd58 	bl	8000b10 <__aeabi_d2iz>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	da0f      	bge.n	8003086 <accelerometerPage+0xa36>
 8003066:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800306a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800306e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd fd4b 	bl	8000b10 <__aeabi_d2iz>
 800307a:	4603      	mov	r3, r0
 800307c:	b29b      	uxth	r3, r3
 800307e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8003082:	b29b      	uxth	r3, r3
 8003084:	e005      	b.n	8003092 <accelerometerPage+0xa42>
 8003086:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800308a:	f7fd fd41 	bl	8000b10 <__aeabi_d2iz>
 800308e:	4603      	mov	r3, r0
 8003090:	b29b      	uxth	r3, r3
 8003092:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    char angle_print[8];
    sprintf(angle_print, "%03d deg", polishedAngle);
 8003096:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800309a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800309e:	4938      	ldr	r1, [pc, #224]	; (8003180 <accelerometerPage+0xb30>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 fa21 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(170, 20, angle_print, BLACK, WHITE);
 80030a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80030aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	2114      	movs	r1, #20
 80030b4:	20aa      	movs	r0, #170	; 0xaa
 80030b6:	f7fe fb5d 	bl	8001774 <LCD_DrawString_Color>
    insertAngleRecord(polishedAngle);
 80030ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe0f 	bl	8001ce4 <insertAngleRecord>
    insertAcceleRecord(combined_aX, combined_aY, combined_aZ);
 80030c6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80030ca:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80030ce:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fdba 	bl	8001c4c <insertAcceleRecord>
    //if(isRotating() == 1)
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 80030d8:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 80030dc:	f9b7 10c8 	ldrsh.w	r1, [r7, #200]	; 0xc8
 80030e0:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fe23 	bl	8001d30 <updateDistance>
    char dis_print[10] = "";
 80030ea:	2300      	movs	r3, #0
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
 80030ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	809a      	strh	r2, [r3, #4]
    sprintf(dis_print, "%05lu", distanceTraveled);
 80030f8:	4b22      	ldr	r3, [pc, #136]	; (8003184 <accelerometerPage+0xb34>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003100:	4921      	ldr	r1, [pc, #132]	; (8003188 <accelerometerPage+0xb38>)
 8003102:	4618      	mov	r0, r3
 8003104:	f005 f9f0 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(100, 190, dis_print, WHITE, BLACK);
 8003108:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800310c:	2300      	movs	r3, #0
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003114:	21be      	movs	r1, #190	; 0xbe
 8003116:	2064      	movs	r0, #100	; 0x64
 8003118:	f7fe fb2c 	bl	8001774 <LCD_DrawString_Color>
    sprintf(dis_print, "%0.3f", actualDistance);
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <accelerometerPage+0xb3c>)
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003126:	491a      	ldr	r1, [pc, #104]	; (8003190 <accelerometerPage+0xb40>)
 8003128:	f005 f9de 	bl	80084e8 <siprintf>
    LCD_DrawString_Color(160, 190, dis_print, WHITE, BLACK);
 800312c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003138:	21be      	movs	r1, #190	; 0xbe
 800313a:	20a0      	movs	r0, #160	; 0xa0
 800313c:	f7fe fb1a 	bl	8001774 <LCD_DrawString_Color>
    HAL_Delay(10);
 8003140:	200a      	movs	r0, #10
 8003142:	f001 fb57 	bl	80047f4 <HAL_Delay>
    free(acceleromterData);
 8003146:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800314a:	f004 fa5f 	bl	800760c <free>
    free(compassData);
 800314e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003152:	f004 fa5b 	bl	800760c <free>
}
 8003156:	37e8      	adds	r7, #232	; 0xe8
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800315e:	bf00      	nop
 8003160:	8e8a71de 	.word	0x8e8a71de
 8003164:	3f6ff2e4 	.word	0x3f6ff2e4
 8003168:	54442d18 	.word	0x54442d18
 800316c:	400921fb 	.word	0x400921fb
 8003170:	20000306 	.word	0x20000306
 8003174:	0800d414 	.word	0x0800d414
 8003178:	0800d41c 	.word	0x0800d41c
 800317c:	40668000 	.word	0x40668000
 8003180:	0800d424 	.word	0x0800d424
 8003184:	2000062c 	.word	0x2000062c
 8003188:	0800d430 	.word	0x0800d430
 800318c:	20000630 	.word	0x20000630
 8003190:	0800d438 	.word	0x0800d438

08003194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800319a:	f001 fac9 	bl	8004730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800319e:	f000 f85f 	bl	8003260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031a2:	f000 f927 	bl	80033f4 <MX_GPIO_Init>
  MX_FSMC_Init();
 80031a6:	f000 fa19 	bl	80035dc <MX_FSMC_Init>
  MX_ADC2_Init();
 80031aa:	f000 f8b7 	bl	800331c <MX_ADC2_Init>
  MX_I2C2_Init();
 80031ae:	f000 f8f3 	bl	8003398 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc2);
 80031b2:	4828      	ldr	r0, [pc, #160]	; (8003254 <main+0xc0>)
 80031b4:	f001 ff80 	bl	80050b8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_PollForConversion(&hadc2, 1000);
 80031b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031bc:	4825      	ldr	r0, [pc, #148]	; (8003254 <main+0xc0>)
 80031be:	f001 fcd5 	bl	8004b6c <HAL_ADC_PollForConversion>
  HAL_ADC_Start(&hadc2);
 80031c2:	4824      	ldr	r0, [pc, #144]	; (8003254 <main+0xc0>)
 80031c4:	f001 fc24 	bl	8004a10 <HAL_ADC_Start>
  LCD_INIT();
 80031c8:	f7fd fe83 	bl	8000ed2 <LCD_INIT>
  currentPage = home;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <main+0xc4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(50);
 80031d2:	2032      	movs	r0, #50	; 0x32
 80031d4:	f001 fb0e 	bl	80047f4 <HAL_Delay>
  while (!XPT2046_Touch_Calibrate());
 80031d8:	bf00      	nop
 80031da:	f000 ffc5 	bl	8004168 <XPT2046_Touch_Calibrate>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0fa      	beq.n	80031da <main+0x46>
  LCD_GramScan(1);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f7fe fb35 	bl	8001854 <LCD_GramScan>
  LCD_Clear(0, 0, 240, 320, BLACK);
 80031ea:	2300      	movs	r3, #0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80031f2:	22f0      	movs	r2, #240	; 0xf0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe f865 	bl	80012c6 <LCD_Clear>
  mainPage();
 80031fc:	f7ff f886 	bl	800230c <mainPage>
  HAL_Delay(500);
 8003200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003204:	f001 faf6 	bl	80047f4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if (currentPage == home) mainPage();
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <main+0xc4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <main+0x82>
 8003210:	f7ff f87c 	bl	800230c <mainPage>
 8003214:	e00f      	b.n	8003236 <main+0xa2>
    else if (currentPage == weight) weightPage();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <main+0xc4>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <main+0x90>
 800321e:	f7ff f90d 	bl	800243c <weightPage>
 8003222:	e008      	b.n	8003236 <main+0xa2>
    else if (currentPage == accelerometer) accelerometerPage();
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <main+0xc4>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d102      	bne.n	8003232 <main+0x9e>
 800322c:	f7ff fa10 	bl	8002650 <accelerometerPage>
 8003230:	e001      	b.n	8003236 <main+0xa2>
    else mainPage();
 8003232:	f7ff f86b 	bl	800230c <mainPage>
    if (ucXPT2046_TouchFlag == 1) {
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <main+0xc8>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d104      	bne.n	800324a <main+0xb6>
        Check_touchkey();
 8003240:	f7fe fbba 	bl	80019b8 <Check_touchkey>
        ucXPT2046_TouchFlag = 0;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <main+0xc8>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(150);
 800324a:	2096      	movs	r0, #150	; 0x96
 800324c:	f001 fad2 	bl	80047f4 <HAL_Delay>
  	if (currentPage == home) mainPage();
 8003250:	e7da      	b.n	8003208 <main+0x74>
 8003252:	bf00      	nop
 8003254:	20000234 	.word	0x20000234
 8003258:	20000300 	.word	0x20000300
 800325c:	200006f0 	.word	0x200006f0

08003260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b096      	sub	sp, #88	; 0x58
 8003264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800326a:	2228      	movs	r2, #40	; 0x28
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f004 f9d4 	bl	800761c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003294:	2301      	movs	r3, #1
 8003296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032a2:	2301      	movs	r3, #1
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032a6:	2302      	movs	r3, #2
 80032a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80032b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fa9c 	bl	80067f8 <HAL_RCC_OscConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80032c6:	f000 f9ed 	bl	80036a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ca:	230f      	movs	r3, #15
 80032cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ce:	2302      	movs	r3, #2
 80032d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 fd08 	bl	8006cfc <HAL_RCC_ClockConfig>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80032f2:	f000 f9d7 	bl	80036a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032f6:	2302      	movs	r3, #2
 80032f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fe92 	bl	800702c <HAL_RCCEx_PeriphCLKConfig>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800330e:	f000 f9c9 	bl	80036a4 <Error_Handler>
  }
}
 8003312:	bf00      	nop
 8003314:	3758      	adds	r7, #88	; 0x58
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <MX_ADC2_Init+0x74>)
 800332e:	4a19      	ldr	r2, [pc, #100]	; (8003394 <MX_ADC2_Init+0x78>)
 8003330:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <MX_ADC2_Init+0x74>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <MX_ADC2_Init+0x74>)
 800333a:	2201      	movs	r2, #1
 800333c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_ADC2_Init+0x74>)
 8003340:	2200      	movs	r2, #0
 8003342:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <MX_ADC2_Init+0x74>)
 8003346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800334a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <MX_ADC2_Init+0x74>)
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_ADC2_Init+0x74>)
 8003354:	2201      	movs	r2, #1
 8003356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003358:	480d      	ldr	r0, [pc, #52]	; (8003390 <MX_ADC2_Init+0x74>)
 800335a:	f001 fa6f 	bl	800483c <HAL_ADC_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8003364:	f000 f99e 	bl	80036a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003368:	2303      	movs	r3, #3
 800336a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800336c:	2301      	movs	r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8003370:	2305      	movs	r3, #5
 8003372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_ADC2_Init+0x74>)
 800337a:	f001 fd09 	bl	8004d90 <HAL_ADC_ConfigChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8003384:	f000 f98e 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000234 	.word	0x20000234
 8003394:	40012800 	.word	0x40012800

08003398 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <MX_I2C2_Init+0x50>)
 800339e:	4a13      	ldr	r2, [pc, #76]	; (80033ec <MX_I2C2_Init+0x54>)
 80033a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <MX_I2C2_Init+0x58>)
 80033a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <MX_I2C2_Init+0x50>)
 80033d6:	f002 fa0f 	bl	80057f8 <HAL_I2C_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80033e0:	f000 f960 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000264 	.word	0x20000264
 80033ec:	40005800 	.word	0x40005800
 80033f0:	00061a80 	.word	0x00061a80

080033f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	f107 0318 	add.w	r3, r7, #24
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003408:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4a6c      	ldr	r2, [pc, #432]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800340e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003412:	6193      	str	r3, [r2, #24]
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003420:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a66      	ldr	r2, [pc, #408]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003426:	f043 0310 	orr.w	r3, r3, #16
 800342a:	6193      	str	r3, [r2, #24]
 800342c:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6193      	str	r3, [r2, #24]
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003450:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a5a      	ldr	r2, [pc, #360]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003456:	f043 0308 	orr.w	r3, r3, #8
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003468:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 800346e:	f043 0320 	orr.w	r3, r3, #32
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <MX_GPIO_Init+0x1cc>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	2107      	movs	r1, #7
 8003484:	484f      	ldr	r0, [pc, #316]	; (80035c4 <MX_GPIO_Init+0x1d0>)
 8003486:	f002 f97c 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	2110      	movs	r1, #16
 800348e:	484e      	ldr	r0, [pc, #312]	; (80035c8 <MX_GPIO_Init+0x1d4>)
 8003490:	f002 f977 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8003494:	2201      	movs	r2, #1
 8003496:	2123      	movs	r1, #35	; 0x23
 8003498:	484c      	ldr	r0, [pc, #304]	; (80035cc <MX_GPIO_Init+0x1d8>)
 800349a:	f002 f972 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80034a4:	484a      	ldr	r0, [pc, #296]	; (80035d0 <MX_GPIO_Init+0x1dc>)
 80034a6:	f002 f96c 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80034b0:	4848      	ldr	r0, [pc, #288]	; (80035d4 <MX_GPIO_Init+0x1e0>)
 80034b2:	f002 f966 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 80034b6:	2307      	movs	r3, #7
 80034b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c6:	f107 0318 	add.w	r3, r7, #24
 80034ca:	4619      	mov	r1, r3
 80034cc:	483d      	ldr	r0, [pc, #244]	; (80035c4 <MX_GPIO_Init+0x1d0>)
 80034ce:	f001 ffad 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034d2:	2308      	movs	r3, #8
 80034d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034da:	2301      	movs	r3, #1
 80034dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034de:	f107 0318 	add.w	r3, r7, #24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4837      	ldr	r0, [pc, #220]	; (80035c4 <MX_GPIO_Init+0x1d0>)
 80034e6:	f001 ffa1 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034ea:	2310      	movs	r3, #16
 80034ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034ee:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <MX_GPIO_Init+0x1e4>)
 80034f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	4619      	mov	r1, r3
 80034fc:	4831      	ldr	r0, [pc, #196]	; (80035c4 <MX_GPIO_Init+0x1d0>)
 80034fe:	f001 ff95 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003510:	f107 0318 	add.w	r3, r7, #24
 8003514:	4619      	mov	r1, r3
 8003516:	482f      	ldr	r0, [pc, #188]	; (80035d4 <MX_GPIO_Init+0x1e0>)
 8003518:	f001 ff88 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800351c:	2301      	movs	r3, #1
 800351e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f107 0318 	add.w	r3, r7, #24
 800352c:	4619      	mov	r1, r3
 800352e:	4826      	ldr	r0, [pc, #152]	; (80035c8 <MX_GPIO_Init+0x1d4>)
 8003530:	f001 ff7c 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003534:	2310      	movs	r3, #16
 8003536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003538:	2301      	movs	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	4619      	mov	r1, r3
 800354a:	481f      	ldr	r0, [pc, #124]	; (80035c8 <MX_GPIO_Init+0x1d4>)
 800354c:	f001 ff6e 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003550:	2323      	movs	r3, #35	; 0x23
 8003552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	2301      	movs	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0318 	add.w	r3, r7, #24
 8003564:	4619      	mov	r1, r3
 8003566:	4819      	ldr	r0, [pc, #100]	; (80035cc <MX_GPIO_Init+0x1d8>)
 8003568:	f001 ff60 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800356c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800357e:	f107 0318 	add.w	r3, r7, #24
 8003582:	4619      	mov	r1, r3
 8003584:	4812      	ldr	r0, [pc, #72]	; (80035d0 <MX_GPIO_Init+0x1dc>)
 8003586:	f001 ff51 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800358a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800358e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	2301      	movs	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2302      	movs	r3, #2
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800359c:	f107 0318 	add.w	r3, r7, #24
 80035a0:	4619      	mov	r1, r3
 80035a2:	480c      	ldr	r0, [pc, #48]	; (80035d4 <MX_GPIO_Init+0x1e0>)
 80035a4:	f001 ff42 	bl	800542c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	200a      	movs	r0, #10
 80035ae:	f001 ff06 	bl	80053be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80035b2:	200a      	movs	r0, #10
 80035b4:	f001 ff1f 	bl	80053f6 <HAL_NVIC_EnableIRQ>

}
 80035b8:	bf00      	nop
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40011800 	.word	0x40011800
 80035c8:	40010800 	.word	0x40010800
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40011000 	.word	0x40011000
 80035d8:	10210000 	.word	0x10210000

080035dc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
 80035f0:	615a      	str	r2, [r3, #20]
 80035f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <MX_FSMC_Init+0xbc>)
 80035f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80035fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <MX_FSMC_Init+0xbc>)
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <MX_FSMC_Init+0xc0>)
 8003600:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <MX_FSMC_Init+0xbc>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003616:	2210      	movs	r2, #16
 8003618:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <MX_FSMC_Init+0xbc>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <MX_FSMC_Init+0xbc>)
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <MX_FSMC_Init+0xbc>)
 800363c:	2200      	movs	r2, #0
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003648:	2200      	movs	r2, #0
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <MX_FSMC_Init+0xbc>)
 800364e:	2200      	movs	r2, #0
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003652:	230f      	movs	r3, #15
 8003654:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003656:	230f      	movs	r3, #15
 8003658:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800365a:	23ff      	movs	r3, #255	; 0xff
 800365c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800365e:	230f      	movs	r3, #15
 8003660:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003662:	2310      	movs	r3, #16
 8003664:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003666:	2311      	movs	r3, #17
 8003668:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2200      	movs	r2, #0
 8003672:	4619      	mov	r1, r3
 8003674:	4808      	ldr	r0, [pc, #32]	; (8003698 <MX_FSMC_Init+0xbc>)
 8003676:	f003 fe73 	bl	8007360 <HAL_SRAM_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8003680:	f000 f810 	bl	80036a4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <MX_FSMC_Init+0xc4>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <MX_FSMC_Init+0xc4>)
 800368a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200002b8 	.word	0x200002b8
 800369c:	a0000104 	.word	0xa0000104
 80036a0:	40010000 	.word	0x40010000

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036ac:	e7fe      	b.n	80036ac <Error_Handler+0x8>
	...

080036b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_MspInit+0x5c>)
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <HAL_MspInit+0x5c>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6193      	str	r3, [r2, #24]
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_MspInit+0x5c>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_MspInit+0x5c>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <HAL_MspInit+0x5c>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_MspInit+0x5c>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_MspInit+0x60>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_MspInit+0x60>)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000
 8003710:	40010000 	.word	0x40010000

08003714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <HAL_ADC_MspInit+0x6c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d121      	bne.n	8003778 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_ADC_MspInit+0x70>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_ADC_MspInit+0x70>)
 800373a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373e:	6193      	str	r3, [r2, #24]
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_ADC_MspInit+0x70>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_ADC_MspInit+0x70>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <HAL_ADC_MspInit+0x70>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_ADC_MspInit+0x70>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003764:	2308      	movs	r3, #8
 8003766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003768:	2303      	movs	r3, #3
 800376a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	4619      	mov	r1, r3
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <HAL_ADC_MspInit+0x74>)
 8003774:	f001 fe5a 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003778:	bf00      	nop
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40012800 	.word	0x40012800
 8003784:	40021000 	.word	0x40021000
 8003788:	40010800 	.word	0x40010800

0800378c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_I2C_MspInit+0x74>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d124      	bne.n	80037f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ca:	2312      	movs	r3, #18
 80037cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4619      	mov	r1, r3
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <HAL_I2C_MspInit+0x7c>)
 80037da:	f001 fe27 	bl	800542c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e8:	61d3      	str	r3, [r2, #28]
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_I2C_MspInit+0x78>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40005800 	.word	0x40005800
 8003804:	40021000 	.word	0x40021000
 8003808:	40010c00 	.word	0x40010c00

0800380c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8003820:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_FSMC_MspInit+0x78>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d129      	bne.n	800387c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_FSMC_MspInit+0x78>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_FSMC_MspInit+0x7c>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <HAL_FSMC_MspInit+0x7c>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6153      	str	r3, [r2, #20]
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <HAL_FSMC_MspInit+0x7c>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003846:	f64f 7380 	movw	r3, #65408	; 0xff80
 800384a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4619      	mov	r1, r3
 800385a:	480c      	ldr	r0, [pc, #48]	; (800388c <HAL_FSMC_MspInit+0x80>)
 800385c:	f001 fde6 	bl	800542c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003860:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8003864:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386a:	2303      	movs	r3, #3
 800386c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	4619      	mov	r1, r3
 8003874:	4806      	ldr	r0, [pc, #24]	; (8003890 <HAL_FSMC_MspInit+0x84>)
 8003876:	f001 fdd9 	bl	800542c <HAL_GPIO_Init>
 800387a:	e000      	b.n	800387e <HAL_FSMC_MspInit+0x72>
    return;
 800387c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200006e8 	.word	0x200006e8
 8003888:	40021000 	.word	0x40021000
 800388c:	40011800 	.word	0x40011800
 8003890:	40011400 	.word	0x40011400

08003894 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800389c:	f7ff ffb6 	bl	800380c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038ac:	e7fe      	b.n	80038ac <NMI_Handler+0x4>

080038ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <HardFault_Handler+0x4>

080038b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <MemManage_Handler+0x4>

080038ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <BusFault_Handler+0x4>

080038c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <UsageFault_Handler+0x4>

080038c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ee:	f000 ff65 	bl	80047bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80038fa:	2010      	movs	r0, #16
 80038fc:	f001 ff5a 	bl	80057b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
	return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <_kill>:

int _kill(int pid, int sig)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800391c:	f003 fe44 	bl	80075a8 <__errno>
 8003920:	4603      	mov	r3, r0
 8003922:	2216      	movs	r2, #22
 8003924:	601a      	str	r2, [r3, #0]
	return -1;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_exit>:

void _exit (int status)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800393a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffe7 	bl	8003912 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003944:	e7fe      	b.n	8003944 <_exit+0x12>

08003946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e00a      	b.n	800396e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003958:	f3af 8000 	nop.w
 800395c:	4601      	mov	r1, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	60ba      	str	r2, [r7, #8]
 8003964:	b2ca      	uxtb	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	dbf0      	blt.n	8003958 <_read+0x12>
	}

return len;
 8003976:	687b      	ldr	r3, [r7, #4]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e009      	b.n	80039a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	60ba      	str	r2, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3301      	adds	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	dbf1      	blt.n	8003992 <_write+0x12>
	}
	return len;
 80039ae:	687b      	ldr	r3, [r7, #4]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_close>:

int _close(int file)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	return -1;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039de:	605a      	str	r2, [r3, #4]
	return 0;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <_isatty>:

int _isatty(int file)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	return 1;
 80039f4:	2301      	movs	r3, #1
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <_sbrk+0x5c>)
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <_sbrk+0x60>)
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <_sbrk+0x64>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <_sbrk+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <_sbrk+0x64>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d207      	bcs.n	8003a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a48:	f003 fdae 	bl	80075a8 <__errno>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a56:	e009      	b.n	8003a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <_sbrk+0x64>)
 8003a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20010000 	.word	0x20010000
 8003a78:	00000400 	.word	0x00000400
 8003a7c:	200006ec 	.word	0x200006ec
 8003a80:	20000708 	.word	0x20000708

08003a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <XPT2046_DelayUS>:
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;


static void XPT2046_DelayUS(__IO uint32_t ulCount) {
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    uint32_t i;


    for (i = 0; i < ulCount; i++) {
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e00a      	b.n	8003ab4 <XPT2046_DelayUS+0x24>
        uint8_t uc = 12;
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	72fb      	strb	r3, [r7, #11]

        while (uc--);
 8003aa2:	bf00      	nop
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	72fa      	strb	r2, [r7, #11]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1fa      	bne.n	8003aa4 <XPT2046_DelayUS+0x14>
    for (i = 0; i < ulCount; i++) {
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3f0      	bcc.n	8003a9e <XPT2046_DelayUS+0xe>

    }

}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t i;


    macXPT2046_MOSI_0();
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	481d      	ldr	r0, [pc, #116]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003ad8:	f001 fe53 	bl	8005782 <HAL_GPIO_WritePin>

    macXPT2046_CLK_LOW();
 8003adc:	2200      	movs	r2, #0
 8003ade:	2101      	movs	r1, #1
 8003ae0:	481a      	ldr	r0, [pc, #104]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003ae2:	f001 fe4e 	bl	8005782 <HAL_GPIO_WritePin>

    for (i = 0; i < 8; i++) {
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e027      	b.n	8003b3c <XPT2046_WriteCMD+0x74>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8003aec:	79fa      	ldrb	r2, [r7, #7]
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	f1c3 0307 	rsb	r3, r3, #7
 8003af4:	fa42 f303 	asr.w	r3, r2, r3
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <XPT2046_WriteCMD+0x44>
 8003b00:	2201      	movs	r2, #1
 8003b02:	2104      	movs	r1, #4
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003b06:	f001 fe3c 	bl	8005782 <HAL_GPIO_WritePin>
 8003b0a:	e004      	b.n	8003b16 <XPT2046_WriteCMD+0x4e>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2104      	movs	r1, #4
 8003b10:	480e      	ldr	r0, [pc, #56]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003b12:	f001 fe36 	bl	8005782 <HAL_GPIO_WritePin>

        XPT2046_DelayUS(5);
 8003b16:	2005      	movs	r0, #5
 8003b18:	f7ff ffba 	bl	8003a90 <XPT2046_DelayUS>

        macXPT2046_CLK_HIGH();
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2101      	movs	r1, #1
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003b22:	f001 fe2e 	bl	8005782 <HAL_GPIO_WritePin>

        XPT2046_DelayUS(5);
 8003b26:	2005      	movs	r0, #5
 8003b28:	f7ff ffb2 	bl	8003a90 <XPT2046_DelayUS>

        macXPT2046_CLK_LOW();
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <XPT2046_WriteCMD+0x84>)
 8003b32:	f001 fe26 	bl	8005782 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	d9d4      	bls.n	8003aec <XPT2046_WriteCMD+0x24>
    }

}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40011800 	.word	0x40011800

08003b50 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
    uint8_t i;
    uint16_t usBuf = 0, usTemp;
 8003b56:	2300      	movs	r3, #0
 8003b58:	80bb      	strh	r3, [r7, #4]


    macXPT2046_MOSI_0();
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4819      	ldr	r0, [pc, #100]	; (8003bc4 <XPT2046_ReadCMD+0x74>)
 8003b60:	f001 fe0f 	bl	8005782 <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8003b64:	2201      	movs	r2, #1
 8003b66:	2101      	movs	r1, #1
 8003b68:	4816      	ldr	r0, [pc, #88]	; (8003bc4 <XPT2046_ReadCMD+0x74>)
 8003b6a:	f001 fe0a 	bl	8005782 <HAL_GPIO_WritePin>

    for (i = 0; i < 12; i++) {
 8003b6e:	2300      	movs	r3, #0
 8003b70:	71fb      	strb	r3, [r7, #7]
 8003b72:	e01e      	b.n	8003bb2 <XPT2046_ReadCMD+0x62>
        macXPT2046_CLK_LOW();
 8003b74:	2200      	movs	r2, #0
 8003b76:	2101      	movs	r1, #1
 8003b78:	4812      	ldr	r0, [pc, #72]	; (8003bc4 <XPT2046_ReadCMD+0x74>)
 8003b7a:	f001 fe02 	bl	8005782 <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 8003b7e:	2108      	movs	r1, #8
 8003b80:	4810      	ldr	r0, [pc, #64]	; (8003bc4 <XPT2046_ReadCMD+0x74>)
 8003b82:	f001 fde7 	bl	8005754 <HAL_GPIO_ReadPin>
 8003b86:	4603      	mov	r3, r0
 8003b88:	807b      	strh	r3, [r7, #2]

        usBuf |= usTemp << (11 - i);
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f1c3 030b 	rsb	r3, r3, #11
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	b21a      	sxth	r2, r3
 8003b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b21b      	sxth	r3, r3
 8003ba0:	80bb      	strh	r3, [r7, #4]

        macXPT2046_CLK_HIGH();
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <XPT2046_ReadCMD+0x74>)
 8003ba8:	f001 fdeb 	bl	8005782 <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	71fb      	strb	r3, [r7, #7]
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b0b      	cmp	r3, #11
 8003bb6:	d9dd      	bls.n	8003b74 <XPT2046_ReadCMD+0x24>

    }

    return usBuf;
 8003bb8:	88bb      	ldrh	r3, [r7, #4]

}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40011800 	.word	0x40011800

08003bc8 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
    XPT2046_WriteCMD(ucChannel);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff77 	bl	8003ac8 <XPT2046_WriteCMD>

    return XPT2046_ReadCMD();
 8003bda:	f7ff ffb9 	bl	8003b50 <XPT2046_ReadCMD>
 8003bde:	4603      	mov	r3, r0

}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
    int16_t sX_Ad_Temp, sY_Ad_Temp;


    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 8003bf2:	2090      	movs	r0, #144	; 0x90
 8003bf4:	f7ff ffe8 	bl	8003bc8 <XPT2046_ReadAdc>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	81fb      	strh	r3, [r7, #14]

    XPT2046_DelayUS(1);
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f7ff ff47 	bl	8003a90 <XPT2046_DelayUS>

    sY_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_Y);
 8003c02:	20d0      	movs	r0, #208	; 0xd0
 8003c04:	f7ff ffe0 	bl	8003bc8 <XPT2046_ReadAdc>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	81bb      	strh	r3, [r7, #12]


    *sX_Ad = sX_Ad_Temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	89fa      	ldrh	r2, [r7, #14]
 8003c10:	801a      	strh	r2, [r3, #0]
    *sY_Ad = sY_Ad_Temp;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	89ba      	ldrh	r2, [r7, #12]
 8003c16:	801a      	strh	r2, [r3, #0]


}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <XPT2046_ReadAdc_Smooth_XY>:
}


#else

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b092      	sub	sp, #72	; 0x48
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    uint8_t ucCount = 0, i;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	2228      	movs	r2, #40	; 0x28
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fcf0 	bl	800761c <memset>

    int32_t lX_Min, lX_Max, lY_Min, lY_Max;


    do {
        XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8003c3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c40:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ffce 	bl	8003be8 <XPT2046_ReadAdc_XY>

        sBufferArray[0][ucCount] = sAD_X;
 8003c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c50:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	3348      	adds	r3, #72	; 0x48
 8003c58:	443b      	add	r3, r7
 8003c5a:	f823 2c40 	strh.w	r2, [r3, #-64]
        sBufferArray[1][ucCount] = sAD_Y;
 8003c5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c62:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003c66:	330a      	adds	r3, #10
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	3348      	adds	r3, #72	; 0x48
 8003c6c:	443b      	add	r3, r7
 8003c6e:	f823 2c40 	strh.w	r2, [r3, #-64]

        ucCount++;
 8003c72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c76:	3301      	adds	r3, #1
 8003c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8003c7c:	2110      	movs	r1, #16
 8003c7e:	4871      	ldr	r0, [pc, #452]	; (8003e44 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003c80:	f001 fd68 	bl	8005754 <HAL_GPIO_ReadPin>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8003c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d9d4      	bls.n	8003c3c <XPT2046_ReadAdc_Smooth_XY+0x1c>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8003c92:	2110      	movs	r1, #16
 8003c94:	486b      	ldr	r0, [pc, #428]	; (8003e44 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003c96:	f001 fd5d 	bl	8005754 <HAL_GPIO_ReadPin>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <XPT2046_ReadAdc_Smooth_XY+0x86>
        ucXPT2046_TouchFlag = 0;
 8003ca0:	4b69      	ldr	r3, [pc, #420]	; (8003e48 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]


    if (ucCount == 10) {
 8003ca6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003caa:	2b0a      	cmp	r3, #10
 8003cac:	f040 80c4 	bne.w	8003e38 <XPT2046_ReadAdc_Smooth_XY+0x218>
        lX_Max = lX_Min = sBufferArray[0][0];
 8003cb0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        lY_Max = lY_Min = sBufferArray[1][0];
 8003cba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34

        for (i = 1; i < 10; i++) {
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003cca:	e02b      	b.n	8003d24 <XPT2046_ReadAdc_Smooth_XY+0x104>
            if (sBufferArray[0][i] < lX_Min)
 8003ccc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	3348      	adds	r3, #72	; 0x48
 8003cd4:	443b      	add	r3, r7
 8003cd6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	dd08      	ble.n	8003cf4 <XPT2046_ReadAdc_Smooth_XY+0xd4>
                lX_Min = sBufferArray[0][i];
 8003ce2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	3348      	adds	r3, #72	; 0x48
 8003cea:	443b      	add	r3, r7
 8003cec:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf2:	e012      	b.n	8003d1a <XPT2046_ReadAdc_Smooth_XY+0xfa>

            else if (sBufferArray[0][i] > lX_Max)
 8003cf4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	3348      	adds	r3, #72	; 0x48
 8003cfc:	443b      	add	r3, r7
 8003cfe:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	4293      	cmp	r3, r2
 8003d08:	da07      	bge.n	8003d1a <XPT2046_ReadAdc_Smooth_XY+0xfa>
                lX_Max = sBufferArray[0][i];
 8003d0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	443b      	add	r3, r7
 8003d14:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = 1; i < 10; i++) {
 8003d1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003d24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d9cf      	bls.n	8003ccc <XPT2046_ReadAdc_Smooth_XY+0xac>

        }

        for (i = 1; i < 10; i++) {
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003d32:	e02f      	b.n	8003d94 <XPT2046_ReadAdc_Smooth_XY+0x174>
            if (sBufferArray[1][i] < lY_Min)
 8003d34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d38:	330a      	adds	r3, #10
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	3348      	adds	r3, #72	; 0x48
 8003d3e:	443b      	add	r3, r7
 8003d40:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	dd09      	ble.n	8003d60 <XPT2046_ReadAdc_Smooth_XY+0x140>
                lY_Min = sBufferArray[1][i];
 8003d4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d50:	330a      	adds	r3, #10
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	3348      	adds	r3, #72	; 0x48
 8003d56:	443b      	add	r3, r7
 8003d58:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d5e:	e014      	b.n	8003d8a <XPT2046_ReadAdc_Smooth_XY+0x16a>

            else if (sBufferArray[1][i] > lY_Max)
 8003d60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d64:	330a      	adds	r3, #10
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	3348      	adds	r3, #72	; 0x48
 8003d6a:	443b      	add	r3, r7
 8003d6c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d70:	461a      	mov	r2, r3
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	4293      	cmp	r3, r2
 8003d76:	da08      	bge.n	8003d8a <XPT2046_ReadAdc_Smooth_XY+0x16a>
                lY_Max = sBufferArray[1][i];
 8003d78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d7c:	330a      	adds	r3, #10
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	3348      	adds	r3, #72	; 0x48
 8003d82:	443b      	add	r3, r7
 8003d84:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = 1; i < 10; i++) {
 8003d8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003d94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d98:	2b09      	cmp	r3, #9
 8003d9a:	d9cb      	bls.n	8003d34 <XPT2046_ReadAdc_Smooth_XY+0x114>

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8003d9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003da6:	4413      	add	r3, r2
 8003da8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003db2:	4413      	add	r3, r2
                                sBufferArray[0][4] +
 8003db4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8003db8:	4413      	add	r3, r2
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8003dba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
                                sBufferArray[0][4] +
 8003dbe:	4413      	add	r3, r2
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8003dc0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003dd0:	4413      	add	r3, r2
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8003dd2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8003dd6:	441a      	add	r2, r3
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	801a      	strh	r2, [r3, #0]

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8003de8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003df2:	4413      	add	r3, r2
 8003df4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003dfe:	4413      	add	r3, r2
                                sBufferArray[1][4] +
 8003e00:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8003e04:	4413      	add	r3, r2
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8003e06:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
                                sBufferArray[1][4] +
 8003e0a:	4413      	add	r3, r2
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8003e0c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8003e10:	4413      	add	r3, r2
 8003e12:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003e16:	4413      	add	r3, r2
 8003e18:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003e1c:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8003e1e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8003e22:	441a      	add	r2, r3
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	805a      	strh	r2, [r3, #2]


        return 1;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <XPT2046_ReadAdc_Smooth_XY+0x21a>


    }


    return 0;
 8003e38:	2300      	movs	r3, #0


}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3748      	adds	r7, #72	; 0x48
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40011800 	.word	0x40011800
 8003e48:	200006f0 	.word	0x200006f0

08003e4c <XPT2046_Calculate_CalibrationFactor>:
#endif


static uint8_t XPT2046_Calculate_CalibrationFactor(strType_XPT2046_Coordinate *pDisplayCoordinate,
                                                   strType_XPT2046_Coordinate *pScreenSample,
                                                   strType_XPT2046_Calibration *pCalibrationFactor) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
    uint8_t ucRet = 1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]


    pCalibrationFactor->Divider =
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3308      	adds	r3, #8
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	3204      	adds	r2, #4
 8003e6e:	8852      	ldrh	r2, [r2, #2]
 8003e70:	4611      	mov	r1, r2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	3208      	adds	r2, #8
 8003e76:	8852      	ldrh	r2, [r2, #2]
 8003e78:	1a8a      	subs	r2, r1, r2
 8003e7a:	fb03 f202 	mul.w	r2, r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	1acb      	subs	r3, r1, r3
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	8849      	ldrh	r1, [r1, #2]
 8003e92:	4608      	mov	r0, r1
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	3108      	adds	r1, #8
 8003e98:	8849      	ldrh	r1, [r1, #2]
 8003e9a:	1a41      	subs	r1, r0, r1
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003ea0:	1ad3      	subs	r3, r2, r3
    pCalibrationFactor->Divider =
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fb1a 	bl	80004dc <__aeabi_i2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


    if (pCalibrationFactor->Divider == 0)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f7fc fdde 	bl	8000a80 <__aeabi_dcmpeq>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <XPT2046_Calculate_CalibrationFactor+0x84>
        ucRet = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]
 8003ece:	e145      	b.n	800415c <XPT2046_Calculate_CalibrationFactor+0x310>

    else {

        pCalibrationFactor->An =
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	3204      	adds	r2, #4
 8003ee2:	8852      	ldrh	r2, [r2, #2]
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	8852      	ldrh	r2, [r2, #2]
 8003eec:	1a8a      	subs	r2, r1, r2
 8003eee:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3308      	adds	r3, #8
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	1acb      	subs	r3, r1, r3
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	8849      	ldrh	r1, [r1, #2]
 8003f06:	4608      	mov	r0, r1
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	3108      	adds	r1, #8
 8003f0c:	8849      	ldrh	r1, [r1, #2]
 8003f0e:	1a41      	subs	r1, r0, r1
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003f14:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->An =
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fae0 	bl	80004dc <__aeabi_i2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	e9c1 2300 	strd	r2, r3, [r1]

        pCalibrationFactor->Bn =
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	3204      	adds	r2, #4
 8003f38:	8812      	ldrh	r2, [r2, #0]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	1a8a      	subs	r2, r1, r2
 8003f44:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].x - pScreenSample[2].x));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3308      	adds	r3, #8
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	1acb      	subs	r3, r1, r3
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	3104      	adds	r1, #4
 8003f5a:	8809      	ldrh	r1, [r1, #0]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	3108      	adds	r1, #8
 8003f62:	8809      	ldrh	r1, [r1, #0]
 8003f64:	1a41      	subs	r1, r0, r1
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8003f6a:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->Bn =
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc fab5 	bl	80004dc <__aeabi_i2d>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	e9c1 2302 	strd	r2, r3, [r1, #8]

        pCalibrationFactor->Cn =
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3304      	adds	r3, #4
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	fb03 f202 	mul.w	r2, r3, r2
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3304      	adds	r3, #4
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
                pScreenSample[0].y +
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	8852      	ldrh	r2, [r2, #2]
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003fa6:	fb03 f202 	mul.w	r2, r3, r2
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	fb03 f101 	mul.w	r1, r3, r1
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	fb00 f303 	mul.w	r3, r0, r3
 8003fca:	1acb      	subs	r3, r1, r3
                pScreenSample[1].y +
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	3104      	adds	r1, #4
 8003fd0:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[0].y +
 8003fd6:	441a      	add	r2, r3
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	fb03 f101 	mul.w	r1, r3, r1
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	fb00 f303 	mul.w	r3, r0, r3
 8003ff8:	1acb      	subs	r3, r1, r3
                pScreenSample[2].y;
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	3108      	adds	r1, #8
 8003ffe:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8004000:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[1].y +
 8004004:	4413      	add	r3, r2
        pCalibrationFactor->Cn =
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fa68 	bl	80004dc <__aeabi_i2d>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	e9c1 2304 	strd	r2, r3, [r1, #16]

        pCalibrationFactor->Dn =
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	885b      	ldrh	r3, [r3, #2]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3308      	adds	r3, #8
 8004020:	885b      	ldrh	r3, [r3, #2]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	3204      	adds	r2, #4
 8004028:	8852      	ldrh	r2, [r2, #2]
 800402a:	4611      	mov	r1, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	3208      	adds	r2, #8
 8004030:	8852      	ldrh	r2, [r2, #2]
 8004032:	1a8a      	subs	r2, r1, r2
 8004034:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y) * (pScreenSample[0].y - pScreenSample[2].y));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3304      	adds	r3, #4
 800403c:	885b      	ldrh	r3, [r3, #2]
 800403e:	4619      	mov	r1, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3308      	adds	r3, #8
 8004044:	885b      	ldrh	r3, [r3, #2]
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	8849      	ldrh	r1, [r1, #2]
 800404c:	4608      	mov	r0, r1
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	3108      	adds	r1, #8
 8004052:	8849      	ldrh	r1, [r1, #2]
 8004054:	1a41      	subs	r1, r0, r1
 8004056:	fb01 f303 	mul.w	r3, r1, r3
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800405a:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->Dn =
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc fa3d 	bl	80004dc <__aeabi_i2d>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	e9c1 2306 	strd	r2, r3, [r1, #24]

        pCalibrationFactor->En =
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3308      	adds	r3, #8
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	3204      	adds	r2, #4
 800407e:	8852      	ldrh	r2, [r2, #2]
 8004080:	4611      	mov	r1, r2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	3208      	adds	r2, #8
 8004086:	8852      	ldrh	r2, [r2, #2]
 8004088:	1a8a      	subs	r2, r1, r2
 800408a:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	885b      	ldrh	r3, [r3, #2]
 8004092:	4619      	mov	r1, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3308      	adds	r3, #8
 8004098:	885b      	ldrh	r3, [r3, #2]
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	3104      	adds	r1, #4
 80040a0:	8809      	ldrh	r1, [r1, #0]
 80040a2:	4608      	mov	r0, r1
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	3108      	adds	r1, #8
 80040a8:	8809      	ldrh	r1, [r1, #0]
 80040aa:	1a41      	subs	r1, r0, r1
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 80040b0:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->En =
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fa12 	bl	80004dc <__aeabi_i2d>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	e9c1 2308 	strd	r2, r3, [r1, #32]


        pCalibrationFactor->Fn =
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3308      	adds	r3, #8
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3304      	adds	r3, #4
 80040ce:	885b      	ldrh	r3, [r3, #2]
 80040d0:	fb03 f202 	mul.w	r2, r3, r2
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3304      	adds	r3, #4
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3308      	adds	r3, #8
 80040e0:	885b      	ldrh	r3, [r3, #2]
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	1ad3      	subs	r3, r2, r3
                pScreenSample[0].y +
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	8852      	ldrh	r2, [r2, #2]
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80040ec:	fb03 f202 	mul.w	r2, r3, r2
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3308      	adds	r3, #8
 80040fa:	885b      	ldrh	r3, [r3, #2]
 80040fc:	fb03 f101 	mul.w	r1, r3, r1
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3308      	adds	r3, #8
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	885b      	ldrh	r3, [r3, #2]
 800410c:	fb00 f303 	mul.w	r3, r0, r3
 8004110:	1acb      	subs	r3, r1, r3
                pScreenSample[1].y +
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	3104      	adds	r1, #4
 8004116:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8004118:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[0].y +
 800411c:	441a      	add	r2, r3
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3304      	adds	r3, #4
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	885b      	ldrh	r3, [r3, #2]
 800412a:	fb03 f101 	mul.w	r1, r3, r1
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3304      	adds	r3, #4
 8004138:	885b      	ldrh	r3, [r3, #2]
 800413a:	fb00 f303 	mul.w	r3, r0, r3
 800413e:	1acb      	subs	r3, r1, r3
                pScreenSample[2].y;
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	3108      	adds	r1, #8
 8004144:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8004146:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[1].y +
 800414a:	4413      	add	r3, r2
        pCalibrationFactor->Fn =
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f9c5 	bl	80004dc <__aeabi_i2d>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    }


    return ucRet;
 800415c:	7dfb      	ldrb	r3, [r7, #23]


}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <XPT2046_Touch_Calibrate>:


uint8_t XPT2046_Touch_Calibrate(void) {
 8004168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800416c:	b0a0      	sub	sp, #128	; 0x80
 800416e:	af02      	add	r7, sp, #8
    uint8_t i;

    char cStr[10];

    uint16_t usScreenWidth, usScreenHeigth;
    uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8004176:	2300      	movs	r3, #0
 8004178:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800417c:	2300      	movs	r3, #0
 800417e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8004182:	2300      	movs	r3, #0
 8004184:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    char *pStr = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	66bb      	str	r3, [r7, #104]	; 0x68

    strType_XPT2046_Calibration CalibrationFactor;


#if (macXPT2046_Coordinate_GramScan == 1) || (macXPT2046_Coordinate_GramScan == 4)
    usScreenWidth = LCD_Default_Max_Width;
 800418c:	23f0      	movs	r3, #240	; 0xf0
 800418e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    usScreenHeigth = LCD_Default_Max_Heigth;
 8004192:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004196:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 800419a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    strCrossCoordinate[0].y = usScreenHeigth >> 2;
 80041a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 80041b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 80041ba:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	109b      	asrs	r3, r3, #2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80041cc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80041d0:	4613      	mov	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	109b      	asrs	r3, r3, #2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 80041de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 80041e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 80041ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


    LCD_GramScan(1);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fd fb2c 	bl	8001854 <LCD_GramScan>


    for (i = 0; i < 4; i++) {
 80041fc:	2300      	movs	r3, #0
 80041fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004202:	e063      	b.n	80042cc <XPT2046_Touch_Calibrate+0x164>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8004204:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004208:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800420c:	2100      	movs	r1, #0
 800420e:	9100      	str	r1, [sp, #0]
 8004210:	2100      	movs	r1, #0
 8004212:	2000      	movs	r0, #0
 8004214:	f7fd f857 	bl	80012c6 <LCD_Clear>

        pStr = "Touch Calibrate ......";
 8004218:	4bc4      	ldr	r3, [pc, #784]	; (800452c <XPT2046_Touch_Calibrate+0x3c4>)
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 800421c:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8004220:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004222:	f7fc f801 	bl	8000228 <strlen>
 8004226:	4603      	mov	r3, r0
 8004228:	3b07      	subs	r3, #7
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	1ae3      	subs	r3, r4, r3
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	b298      	uxth	r0, r3
 8004232:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	b299      	uxth	r1, r3
 800423a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004244:	f7fd fa96 	bl	8001774 <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 8004248:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004252:	49b7      	ldr	r1, [pc, #732]	; (8004530 <XPT2046_Touch_Calibrate+0x3c8>)
 8004254:	4618      	mov	r0, r3
 8004256:	f004 f947 	bl	80084e8 <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 800425a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	b298      	uxth	r0, r3
 8004262:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b10      	subs	r3, #16
 800426c:	b299      	uxth	r1, r3
 800426e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004272:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	f7fd fa7b 	bl	8001774 <LCD_DrawString_Color>

        XPT2046_DelayUS(100000);
 800427e:	48ad      	ldr	r0, [pc, #692]	; (8004534 <XPT2046_Touch_Calibrate+0x3cc>)
 8004280:	f7ff fc06 	bl	8003a90 <XPT2046_DelayUS>

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8004284:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	3378      	adds	r3, #120	; 0x78
 800428c:	443b      	add	r3, r7
 800428e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004292:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	3378      	adds	r3, #120	; 0x78
 800429a:	443b      	add	r3, r7
 800429c:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fd fa44 	bl	8001730 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 80042a8:	bf00      	nop
 80042aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fcb2 	bl	8003c20 <XPT2046_ReadAdc_Smooth_XY>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f3      	beq.n	80042aa <XPT2046_Touch_Calibrate+0x142>
    for (i = 0; i < 4; i++) {
 80042c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042c6:	3301      	adds	r3, #1
 80042c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80042cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d997      	bls.n	8004204 <XPT2046_Touch_Calibrate+0x9c>

    }


    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);
 80042d4:	463a      	mov	r2, r7
 80042d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80042da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fdb4 	bl	8003e4c <XPT2046_Calculate_CalibrationFactor>

    if (CalibrationFactor.Divider == 0) goto Failure;
 80042e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	f7fc fbc6 	bl	8000a80 <__aeabi_dcmpeq>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8115 	bne.w	8004526 <XPT2046_Touch_Calibrate+0x3be>


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 80042fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004300:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc f8e9 	bl	80004dc <__aeabi_i2d>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f7fc f94d 	bl	80005b0 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4690      	mov	r8, r2
 800431c:	4699      	mov	r9, r3
 800431e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004322:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc f8d8 	bl	80004dc <__aeabi_i2d>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fc f93c 	bl	80005b0 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4640      	mov	r0, r8
 800433e:	4649      	mov	r1, r9
 8004340:	f7fb ff80 	bl	8000244 <__adddf3>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 800434c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8004350:	f7fb ff78 	bl	8000244 <__adddf3>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 800435c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004360:	f7fc fa50 	bl	8000804 <__aeabi_ddiv>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fbf8 	bl	8000b60 <__aeabi_d2uiz>
 8004370:	4603      	mov	r3, r0
 8004372:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8004376:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800437a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8ac 	bl	80004dc <__aeabi_i2d>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fc f910 	bl	80005b0 <__aeabi_dmul>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4690      	mov	r8, r2
 8004396:	4699      	mov	r9, r3
 8004398:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800439c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f89b 	bl	80004dc <__aeabi_i2d>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc f8ff 	bl	80005b0 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4640      	mov	r0, r8
 80043b8:	4649      	mov	r1, r9
 80043ba:	f7fb ff43 	bl	8000244 <__adddf3>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80043ca:	f7fb ff3b 	bl	8000244 <__adddf3>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80043d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043da:	f7fc fa13 	bl	8000804 <__aeabi_ddiv>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7fc fbbb 	bl	8000b60 <__aeabi_d2uiz>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 80043f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80043f4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d906      	bls.n	800440a <XPT2046_Touch_Calibrate+0x2a2>
 80043fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004400:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	e005      	b.n	8004416 <XPT2046_Touch_Calibrate+0x2ae>
 800440a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800440e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b29b      	uxth	r3, r3
 8004416:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 800441a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800441e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8004422:	429a      	cmp	r2, r3
 8004424:	d906      	bls.n	8004434 <XPT2046_Touch_Calibrate+0x2cc>
 8004426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800442a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	e005      	b.n	8004440 <XPT2046_Touch_Calibrate+0x2d8>
 8004434:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004438:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8004444:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8004448:	2b0a      	cmp	r3, #10
 800444a:	d879      	bhi.n	8004540 <XPT2046_Touch_Calibrate+0x3d8>
 800444c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004450:	2b0a      	cmp	r3, #10
 8004452:	d875      	bhi.n	8004540 <XPT2046_Touch_Calibrate+0x3d8>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8004454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004458:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800445c:	f7fc f9d2 	bl	8000804 <__aeabi_ddiv>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4934      	ldr	r1, [pc, #208]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 8004466:	e9c1 2300 	strd	r2, r3, [r1]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 800446a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800446e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004472:	f7fc f9c7 	bl	8000804 <__aeabi_ddiv>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	492f      	ldr	r1, [pc, #188]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 800447c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8004480:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004488:	f7fc f9bc 	bl	8000804 <__aeabi_ddiv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4929      	ldr	r1, [pc, #164]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 8004492:	e9c1 2304 	strd	r2, r3, [r1, #16]

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8004496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800449a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800449e:	f7fc f9b1 	bl	8000804 <__aeabi_ddiv>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4924      	ldr	r1, [pc, #144]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 80044a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80044ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044b4:	f7fc f9a6 	bl	8000804 <__aeabi_ddiv>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	491e      	ldr	r1, [pc, #120]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 80044be:	e9c1 2308 	strd	r2, r3, [r1, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 80044c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044ca:	f7fc f99b 	bl	8000804 <__aeabi_ddiv>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4919      	ldr	r1, [pc, #100]	; (8004538 <XPT2046_Touch_Calibrate+0x3d0>)
 80044d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80044d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044dc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80044e0:	2100      	movs	r1, #0
 80044e2:	9100      	str	r1, [sp, #0]
 80044e4:	2100      	movs	r1, #0
 80044e6:	2000      	movs	r0, #0
 80044e8:	f7fc feed 	bl	80012c6 <LCD_Clear>

    pStr = "Calibrate Succeed";
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <XPT2046_Touch_Calibrate+0x3d4>)
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 80044f0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80044f4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80044f6:	f7fb fe97 	bl	8000228 <strlen>
 80044fa:	4603      	mov	r3, r0
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	1ae3      	subs	r3, r4, r3
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	b298      	uxth	r0, r3
 8004504:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b299      	uxth	r1, r3
 800450c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004516:	f7fd f92d 	bl	8001774 <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 800451a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800451e:	f7ff fab7 	bl	8003a90 <XPT2046_DelayUS>

    return 1;
 8004522:	2301      	movs	r3, #1
 8004524:	e04b      	b.n	80045be <XPT2046_Touch_Calibrate+0x456>
    if (CalibrationFactor.Divider == 0) goto Failure;
 8004526:	bf00      	nop
 8004528:	e00b      	b.n	8004542 <XPT2046_Touch_Calibrate+0x3da>
 800452a:	bf00      	nop
 800452c:	0800d440 	.word	0x0800d440
 8004530:	0800d458 	.word	0x0800d458
 8004534:	000186a0 	.word	0x000186a0
 8004538:	20000008 	.word	0x20000008
 800453c:	0800d45c 	.word	0x0800d45c
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8004540:	bf00      	nop


    Failure:

    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8004542:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004546:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800454a:	2100      	movs	r1, #0
 800454c:	9100      	str	r1, [sp, #0]
 800454e:	2100      	movs	r1, #0
 8004550:	2000      	movs	r0, #0
 8004552:	f7fc feb8 	bl	80012c6 <LCD_Clear>

    pStr = "Calibrate fail";
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <XPT2046_Touch_Calibrate+0x460>)
 8004558:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 800455a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800455e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004560:	f7fb fe62 	bl	8000228 <strlen>
 8004564:	4603      	mov	r3, r0
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1ae3      	subs	r3, r4, r3
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b298      	uxth	r0, r3
 800456e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	b299      	uxth	r1, r3
 8004576:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004580:	f7fd f8f8 	bl	8001774 <LCD_DrawString_Color>
                         RED);

    pStr = "try again";
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <XPT2046_Touch_Calibrate+0x464>)
 8004586:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 8004588:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800458c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800458e:	f7fb fe4b 	bl	8000228 <strlen>
 8004592:	4603      	mov	r3, r0
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1ae3      	subs	r3, r4, r3
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b298      	uxth	r0, r3
 800459c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3310      	adds	r3, #16
 80045a6:	b299      	uxth	r1, r3
 80045a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	2300      	movs	r3, #0
 80045b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045b2:	f7fd f8df 	bl	8001774 <LCD_DrawString_Color>
                         pStr, BACKGROUND, RED);

    XPT2046_DelayUS(300000);
 80045b6:	4806      	ldr	r0, [pc, #24]	; (80045d0 <XPT2046_Touch_Calibrate+0x468>)
 80045b8:	f7ff fa6a 	bl	8003a90 <XPT2046_DelayUS>

    return 0;
 80045bc:	2300      	movs	r3, #0


}
 80045be:	4618      	mov	r0, r3
 80045c0:	3778      	adds	r7, #120	; 0x78
 80045c2:	46bd      	mov	sp, r7
 80045c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045c8:	0800d470 	.word	0x0800d470
 80045cc:	0800d480 	.word	0x0800d480
 80045d0:	000493e0 	.word	0x000493e0

080045d4 <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80045d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
    uint8_t ucRet = 1;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fb19 	bl	8003c20 <XPT2046_ReadAdc_Smooth_XY>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d06e      	beq.n	80046d2 <XPT2046_Get_TouchedPoint+0xfe>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80045fa:	893b      	ldrh	r3, [r7, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ff6d 	bl	80004dc <__aeabi_i2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4620      	mov	r0, r4
 8004608:	4629      	mov	r1, r5
 800460a:	f7fb ffd1 	bl	80005b0 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4690      	mov	r8, r2
 8004614:	4699      	mov	r9, r3
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800461c:	897b      	ldrh	r3, [r7, #10]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb ff5c 	bl	80004dc <__aeabi_i2d>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4620      	mov	r0, r4
 800462a:	4629      	mov	r1, r5
 800462c:	f7fb ffc0 	bl	80005b0 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8004634:	4640      	mov	r0, r8
 8004636:	4649      	mov	r1, r9
 8004638:	f7fb fe04 	bl	8000244 <__adddf3>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800464a:	f7fb fdfb 	bl	8000244 <__adddf3>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	f7fc fa83 	bl	8000b60 <__aeabi_d2uiz>
 800465a:	4603      	mov	r3, r0
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	801a      	strh	r2, [r3, #0]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb ff36 	bl	80004dc <__aeabi_i2d>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb ff9a 	bl	80005b0 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4690      	mov	r8, r2
 8004682:	4699      	mov	r9, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff25 	bl	80004dc <__aeabi_i2d>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fb ff89 	bl	80005b0 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80046a2:	4640      	mov	r0, r8
 80046a4:	4649      	mov	r1, r9
 80046a6:	f7fb fdcd 	bl	8000244 <__adddf3>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80046b8:	f7fb fdc4 	bl	8000244 <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7fc fa4c 	bl	8000b60 <__aeabi_d2uiz>
 80046c8:	4603      	mov	r3, r0
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	805a      	strh	r2, [r3, #2]
 80046d0:	e001      	b.n	80046d6 <XPT2046_Get_TouchedPoint+0x102>

    } else ucRet = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]

    return ucRet;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]


}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080046e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046e4:	480c      	ldr	r0, [pc, #48]	; (8004718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046e6:	490d      	ldr	r1, [pc, #52]	; (800471c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046e8:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046ec:	e002      	b.n	80046f4 <LoopCopyDataInit>

080046ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046f2:	3304      	adds	r3, #4

080046f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046f8:	d3f9      	bcc.n	80046ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046fc:	4c0a      	ldr	r4, [pc, #40]	; (8004728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004700:	e001      	b.n	8004706 <LoopFillZerobss>

08004702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004704:	3204      	adds	r2, #4

08004706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004708:	d3fb      	bcc.n	8004702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800470a:	f7ff f9bb 	bl	8003a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800470e:	f002 ff51 	bl	80075b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004712:	f7fe fd3f 	bl	8003194 <main>
  bx lr
 8004716:	4770      	bx	lr
  ldr r0, =_sdata
 8004718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800471c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8004720:	0800e008 	.word	0x0800e008
  ldr r2, =_sbss
 8004724:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8004728:	20000708 	.word	0x20000708

0800472c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800472c:	e7fe      	b.n	800472c <ADC1_2_IRQHandler>
	...

08004730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_Init+0x28>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a07      	ldr	r2, [pc, #28]	; (8004758 <HAL_Init+0x28>)
 800473a:	f043 0310 	orr.w	r3, r3, #16
 800473e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f000 fe31 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004746:	200f      	movs	r0, #15
 8004748:	f000 f808 	bl	800475c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800474c:	f7fe ffb0 	bl	80036b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40022000 	.word	0x40022000

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_InitTick+0x54>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_InitTick+0x58>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004772:	fbb3 f3f1 	udiv	r3, r3, r1
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fe49 	bl	8005412 <HAL_SYSTICK_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e00e      	b.n	80047a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d80a      	bhi.n	80047a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004790:	2200      	movs	r2, #0
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004798:	f000 fe11 	bl	80053be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800479c:	4a06      	ldr	r2, [pc, #24]	; (80047b8 <HAL_InitTick+0x5c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000004 	.word	0x20000004
 80047b4:	2000003c 	.word	0x2000003c
 80047b8:	20000038 	.word	0x20000038

080047bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_IncTick+0x1c>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_IncTick+0x20>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	4a03      	ldr	r2, [pc, #12]	; (80047dc <HAL_IncTick+0x20>)
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	2000003c 	.word	0x2000003c
 80047dc:	200006f4 	.word	0x200006f4

080047e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return uwTick;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <HAL_GetTick+0x10>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	200006f4 	.word	0x200006f4

080047f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480c:	d005      	beq.n	800481a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_Delay+0x44>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800481a:	bf00      	nop
 800481c:	f7ff ffe0 	bl	80047e0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	429a      	cmp	r2, r3
 800482a:	d8f7      	bhi.n	800481c <HAL_Delay+0x28>
  {
  }
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000003c 	.word	0x2000003c

0800483c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0ce      	b.n	80049fc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe ff4a 	bl	8003714 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fbd7 	bl	8005034 <ADC_ConversionStop_Disable>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 80a9 	bne.w	80049ea <HAL_ADC_Init+0x1ae>
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80a5 	bne.w	80049ea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4951      	ldr	r1, [pc, #324]	; (8004a04 <HAL_ADC_Init+0x1c8>)
 80048be:	428b      	cmp	r3, r1
 80048c0:	d10a      	bne.n	80048d8 <HAL_ADC_Init+0x9c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048ca:	d002      	beq.n	80048d2 <HAL_ADC_Init+0x96>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	e004      	b.n	80048dc <HAL_ADC_Init+0xa0>
 80048d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048d6:	e001      	b.n	80048dc <HAL_ADC_Init+0xa0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	7b1b      	ldrb	r3, [r3, #12]
 80048e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	d003      	beq.n	80048fe <HAL_ADC_Init+0xc2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_ADC_Init+0xc8>
 80048fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004902:	e000      	b.n	8004906 <HAL_ADC_Init+0xca>
 8004904:	2300      	movs	r3, #0
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7d1b      	ldrb	r3, [r3, #20]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d119      	bne.n	8004948 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7b1b      	ldrb	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	3b01      	subs	r3, #1
 8004922:	035a      	lsls	r2, r3, #13
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e00b      	b.n	8004948 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	f043 0201 	orr.w	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_ADC_Init+0x1cc>)
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	430b      	orrs	r3, r1
 800496e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004978:	d003      	beq.n	8004982 <HAL_ADC_Init+0x146>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d104      	bne.n	800498c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	3b01      	subs	r3, #1
 8004988:	051b      	lsls	r3, r3, #20
 800498a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	430a      	orrs	r2, r1
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_ADC_Init+0x1d0>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d10b      	bne.n	80049c8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049c6:	e018      	b.n	80049fa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f023 0312 	bic.w	r3, r3, #18
 80049d0:	f043 0210 	orr.w	r2, r3, #16
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049e8:	e007      	b.n	80049fa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40013c00 	.word	0x40013c00
 8004a08:	ffe1f7fd 	.word	0xffe1f7fd
 8004a0c:	ff1f0efe 	.word	0xff1f0efe

08004a10 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_Start+0x1a>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e098      	b.n	8004b5c <HAL_ADC_Start+0x14c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 faa4 	bl	8004f80 <ADC_Enable>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8087 	bne.w	8004b52 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a41      	ldr	r2, [pc, #260]	; (8004b64 <HAL_ADC_Start+0x154>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d105      	bne.n	8004a6e <HAL_ADC_Start+0x5e>
 8004a62:	4b41      	ldr	r3, [pc, #260]	; (8004b68 <HAL_ADC_Start+0x158>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d115      	bne.n	8004a9a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d026      	beq.n	8004ad6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a98:	e01d      	b.n	8004ad6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <HAL_ADC_Start+0x158>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_ADC_Start+0xaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2b      	ldr	r2, [pc, #172]	; (8004b64 <HAL_ADC_Start+0x154>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_ADC_Start+0xc6>
 8004aba:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_ADC_Start+0x158>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f023 0206 	bic.w	r2, r3, #6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aee:	e002      	b.n	8004af6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0202 	mvn.w	r2, #2
 8004b06:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b16:	d113      	bne.n	8004b40 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b1c:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <HAL_ADC_Start+0x154>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d105      	bne.n	8004b2e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_ADC_Start+0x158>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d108      	bne.n	8004b40 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	e00c      	b.n	8004b5a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e003      	b.n	8004b5a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40012800 	.word	0x40012800
 8004b68:	40012400 	.word	0x40012400

08004b6c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b82:	f7ff fe2d 	bl	80047e0 <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	f043 0220 	orr.w	r2, r3, #32
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0d3      	b.n	8004d56 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d131      	bne.n	8004c20 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d12a      	bne.n	8004c20 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004bca:	e021      	b.n	8004c10 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd2:	d01d      	beq.n	8004c10 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_ADC_PollForConversion+0x7e>
 8004bda:	f7ff fe01 	bl	80047e0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d212      	bcs.n	8004c10 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0a2      	b.n	8004d56 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0d6      	beq.n	8004bcc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c1e:	e070      	b.n	8004d02 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004c20:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <HAL_ADC_PollForConversion+0x1f4>)
 8004c22:	681c      	ldr	r4, [r3, #0]
 8004c24:	2002      	movs	r0, #2
 8004c26:	f002 fab7 	bl	8007198 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_ADC_PollForConversion+0x1f8>)
 8004c38:	400b      	ands	r3, r1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d118      	bne.n	8004c70 <HAL_ADC_PollForConversion+0x104>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68d9      	ldr	r1, [r3, #12]
 8004c44:	4b48      	ldr	r3, [pc, #288]	; (8004d68 <HAL_ADC_PollForConversion+0x1fc>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d111      	bne.n	8004c70 <HAL_ADC_PollForConversion+0x104>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6919      	ldr	r1, [r3, #16]
 8004c52:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_ADC_PollForConversion+0x200>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d108      	bne.n	8004c6c <HAL_ADC_PollForConversion+0x100>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68d9      	ldr	r1, [r3, #12]
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_ADC_PollForConversion+0x204>)
 8004c62:	400b      	ands	r3, r1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_PollForConversion+0x100>
 8004c68:	2314      	movs	r3, #20
 8004c6a:	e020      	b.n	8004cae <HAL_ADC_PollForConversion+0x142>
 8004c6c:	2329      	movs	r3, #41	; 0x29
 8004c6e:	e01e      	b.n	8004cae <HAL_ADC_PollForConversion+0x142>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_ADC_PollForConversion+0x200>)
 8004c78:	400b      	ands	r3, r1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_ADC_PollForConversion+0x120>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68d9      	ldr	r1, [r3, #12]
 8004c84:	4b3a      	ldr	r3, [pc, #232]	; (8004d70 <HAL_ADC_PollForConversion+0x204>)
 8004c86:	400b      	ands	r3, r1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_ADC_PollForConversion+0x13c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6919      	ldr	r1, [r3, #16]
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_ADC_PollForConversion+0x208>)
 8004c94:	400b      	ands	r3, r1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <HAL_ADC_PollForConversion+0x140>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68d9      	ldr	r1, [r3, #12]
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_ADC_PollForConversion+0x208>)
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_ADC_PollForConversion+0x140>
 8004ca8:	2354      	movs	r3, #84	; 0x54
 8004caa:	e000      	b.n	8004cae <HAL_ADC_PollForConversion+0x142>
 8004cac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004cb4:	e021      	b.n	8004cfa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d01a      	beq.n	8004cf4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_ADC_PollForConversion+0x168>
 8004cc4:	f7ff fd8c 	bl	80047e0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d20f      	bcs.n	8004cf4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d90b      	bls.n	8004cf4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e030      	b.n	8004d56 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d8d9      	bhi.n	8004cb6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0212 	mvn.w	r2, #18
 8004d0a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004d22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004d26:	d115      	bne.n	8004d54 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d111      	bne.n	8004d54 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000004 	.word	0x20000004
 8004d64:	24924924 	.word	0x24924924
 8004d68:	00924924 	.word	0x00924924
 8004d6c:	12492492 	.word	0x12492492
 8004d70:	00492492 	.word	0x00492492
 8004d74:	00249249 	.word	0x00249249

08004d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x20>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0dc      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x1da>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d81c      	bhi.n	8004dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b05      	subs	r3, #5
 8004dd2:	221f      	movs	r2, #31
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	4019      	ands	r1, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	3b05      	subs	r3, #5
 8004dec:	fa00 f203 	lsl.w	r2, r0, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34
 8004df8:	e03c      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d81c      	bhi.n	8004e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	3b23      	subs	r3, #35	; 0x23
 8004e14:	221f      	movs	r2, #31
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	4019      	ands	r1, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b23      	subs	r3, #35	; 0x23
 8004e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3a:	e01b      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b41      	subs	r3, #65	; 0x41
 8004e4e:	221f      	movs	r2, #31
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	4019      	ands	r1, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	3b41      	subs	r3, #65	; 0x41
 8004e68:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b09      	cmp	r3, #9
 8004e7a:	d91c      	bls.n	8004eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3b1e      	subs	r3, #30
 8004e8e:	2207      	movs	r2, #7
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	4019      	ands	r1, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6898      	ldr	r0, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b1e      	subs	r3, #30
 8004ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e019      	b.n	8004eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6919      	ldr	r1, [r3, #16]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4019      	ands	r1, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6898      	ldr	r0, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d003      	beq.n	8004efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ef6:	2b11      	cmp	r3, #17
 8004ef8:	d132      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d125      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d126      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d11a      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	0c9a      	lsrs	r2, r3, #18
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f40:	e002      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f9      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x1b2>
 8004f4e:	e007      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012400 	.word	0x40012400
 8004f78:	20000004 	.word	0x20000004
 8004f7c:	431bde83 	.word	0x431bde83

08004f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d040      	beq.n	8005020 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <ADC_Enable+0xac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <ADC_Enable+0xb0>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	0c9b      	lsrs	r3, r3, #18
 8004fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fbc:	e002      	b.n	8004fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f9      	bne.n	8004fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fca:	f7ff fc09 	bl	80047e0 <HAL_GetTick>
 8004fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004fd0:	e01f      	b.n	8005012 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fd2:	f7ff fc05 	bl	80047e0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d918      	bls.n	8005012 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d011      	beq.n	8005012 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d1d8      	bne.n	8004fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000004 	.word	0x20000004
 8005030:	431bde83 	.word	0x431bde83

08005034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d12e      	bne.n	80050ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800505e:	f7ff fbbf 	bl	80047e0 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005064:	e01b      	b.n	800509e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005066:	f7ff fbbb 	bl	80047e0 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d914      	bls.n	800509e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10d      	bne.n	800509e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e007      	b.n	80050ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d0dc      	beq.n	8005066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_ADCEx_Calibration_Start+0x1e>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e095      	b.n	8005202 <HAL_ADCEx_Calibration_Start+0x14a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffa8 	bl	8005034 <ADC_ConversionStop_Disable>
 80050e4:	4603      	mov	r3, r0
 80050e6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 8084 	bne.w	80051f8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	f043 0202 	orr.w	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005104:	4b41      	ldr	r3, [pc, #260]	; (800520c <HAL_ADCEx_Calibration_Start+0x154>)
 8005106:	681c      	ldr	r4, [r3, #0]
 8005108:	2002      	movs	r0, #2
 800510a:	f002 f845 	bl	8007198 <HAL_RCCEx_GetPeriphCLKFreq>
 800510e:	4603      	mov	r3, r0
 8005110:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005114:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005116:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8005118:	e002      	b.n	8005120 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f9      	bne.n	800511a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff2a 	bl	8004f80 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0208 	orr.w	r2, r2, #8
 800513a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800513c:	f7ff fb50 	bl	80047e0 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005142:	e01b      	b.n	800517c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005144:	f7ff fb4c 	bl	80047e0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b0a      	cmp	r3, #10
 8005150:	d914      	bls.n	800517c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	f023 0312 	bic.w	r3, r3, #18
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e042      	b.n	8005202 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1dc      	bne.n	8005144 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0204 	orr.w	r2, r2, #4
 8005198:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800519a:	f7ff fb21 	bl	80047e0 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80051a0:	e01b      	b.n	80051da <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80051a2:	f7ff fb1d 	bl	80047e0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b0a      	cmp	r3, #10
 80051ae:	d914      	bls.n	80051da <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f023 0312 	bic.w	r3, r3, #18
 80051c6:	f043 0210 	orr.w	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e013      	b.n	8005202 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1dc      	bne.n	80051a2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
}
 8005202:	4618      	mov	r0, r3
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd90      	pop	{r4, r7, pc}
 800520a:	bf00      	nop
 800520c:	20000004 	.word	0x20000004

08005210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005242:	4a04      	ldr	r2, [pc, #16]	; (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	60d3      	str	r3, [r2, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <__NVIC_GetPriorityGrouping+0x18>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0307 	and.w	r3, r3, #7
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db0b      	blt.n	800529e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	4906      	ldr	r1, [pc, #24]	; (80052a8 <__NVIC_EnableIRQ+0x34>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2001      	movs	r0, #1
 8005296:	fa00 f202 	lsl.w	r2, r0, r2
 800529a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	e000e100 	.word	0xe000e100

080052ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db0a      	blt.n	80052d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	490c      	ldr	r1, [pc, #48]	; (80052f8 <__NVIC_SetPriority+0x4c>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	440b      	add	r3, r1
 80052d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d4:	e00a      	b.n	80052ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <__NVIC_SetPriority+0x50>)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	3b04      	subs	r3, #4
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	761a      	strb	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0307 	rsb	r3, r3, #7
 800531a:	2b04      	cmp	r3, #4
 800531c:	bf28      	it	cs
 800531e:	2304      	movcs	r3, #4
 8005320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3304      	adds	r3, #4
 8005326:	2b06      	cmp	r3, #6
 8005328:	d902      	bls.n	8005330 <NVIC_EncodePriority+0x30>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3b03      	subs	r3, #3
 800532e:	e000      	b.n	8005332 <NVIC_EncodePriority+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	401a      	ands	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43d9      	mvns	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	4313      	orrs	r3, r2
         );
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	d301      	bcc.n	800537a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005376:	2301      	movs	r3, #1
 8005378:	e00f      	b.n	800539a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <SysTick_Config+0x40>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005382:	210f      	movs	r1, #15
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005388:	f7ff ff90 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Config+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Config+0x40>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff2d 	bl	8005210 <__NVIC_SetPriorityGrouping>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff42 	bl	8005258 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff90 	bl	8005300 <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5f 	bl	80052ac <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff35 	bl	8005274 <__NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffa2 	bl	8005364 <SysTick_Config>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	b480      	push	{r7}
 800542e:	b08b      	sub	sp, #44	; 0x2c
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800543a:	2300      	movs	r3, #0
 800543c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543e:	e179      	b.n	8005734 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005440:	2201      	movs	r2, #1
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	4013      	ands	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	429a      	cmp	r2, r3
 800545a:	f040 8168 	bne.w	800572e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a96      	ldr	r2, [pc, #600]	; (80056bc <HAL_GPIO_Init+0x290>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d05e      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005468:	4a94      	ldr	r2, [pc, #592]	; (80056bc <HAL_GPIO_Init+0x290>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d875      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800546e:	4a94      	ldr	r2, [pc, #592]	; (80056c0 <HAL_GPIO_Init+0x294>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d058      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005474:	4a92      	ldr	r2, [pc, #584]	; (80056c0 <HAL_GPIO_Init+0x294>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d86f      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800547a:	4a92      	ldr	r2, [pc, #584]	; (80056c4 <HAL_GPIO_Init+0x298>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d052      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005480:	4a90      	ldr	r2, [pc, #576]	; (80056c4 <HAL_GPIO_Init+0x298>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d869      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 8005486:	4a90      	ldr	r2, [pc, #576]	; (80056c8 <HAL_GPIO_Init+0x29c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04c      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 800548c:	4a8e      	ldr	r2, [pc, #568]	; (80056c8 <HAL_GPIO_Init+0x29c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d863      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 8005492:	4a8e      	ldr	r2, [pc, #568]	; (80056cc <HAL_GPIO_Init+0x2a0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d046      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005498:	4a8c      	ldr	r2, [pc, #560]	; (80056cc <HAL_GPIO_Init+0x2a0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d85d      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d82a      	bhi.n	80054f8 <HAL_GPIO_Init+0xcc>
 80054a2:	2b12      	cmp	r3, #18
 80054a4:	d859      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <HAL_GPIO_Init+0x80>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	08005527 	.word	0x08005527
 80054b0:	08005501 	.word	0x08005501
 80054b4:	08005513 	.word	0x08005513
 80054b8:	08005555 	.word	0x08005555
 80054bc:	0800555b 	.word	0x0800555b
 80054c0:	0800555b 	.word	0x0800555b
 80054c4:	0800555b 	.word	0x0800555b
 80054c8:	0800555b 	.word	0x0800555b
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800555b 	.word	0x0800555b
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	0800555b 	.word	0x0800555b
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	0800555b 	.word	0x0800555b
 80054e8:	0800555b 	.word	0x0800555b
 80054ec:	0800555b 	.word	0x0800555b
 80054f0:	08005509 	.word	0x08005509
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <HAL_GPIO_Init+0x2a4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054fe:	e02c      	b.n	800555a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	623b      	str	r3, [r7, #32]
          break;
 8005506:	e029      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	623b      	str	r3, [r7, #32]
          break;
 8005510:	e024      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	3308      	adds	r3, #8
 8005518:	623b      	str	r3, [r7, #32]
          break;
 800551a:	e01f      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	330c      	adds	r3, #12
 8005522:	623b      	str	r3, [r7, #32]
          break;
 8005524:	e01a      	b.n	800555c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800552e:	2304      	movs	r3, #4
 8005530:	623b      	str	r3, [r7, #32]
          break;
 8005532:	e013      	b.n	800555c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800553c:	2308      	movs	r3, #8
 800553e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	611a      	str	r2, [r3, #16]
          break;
 8005546:	e009      	b.n	800555c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005548:	2308      	movs	r3, #8
 800554a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	615a      	str	r2, [r3, #20]
          break;
 8005552:	e003      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
          break;
 8005558:	e000      	b.n	800555c <HAL_GPIO_Init+0x130>
          break;
 800555a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2bff      	cmp	r3, #255	; 0xff
 8005560:	d801      	bhi.n	8005566 <HAL_GPIO_Init+0x13a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	e001      	b.n	800556a <HAL_GPIO_Init+0x13e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2bff      	cmp	r3, #255	; 0xff
 8005570:	d802      	bhi.n	8005578 <HAL_GPIO_Init+0x14c>
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	e002      	b.n	800557e <HAL_GPIO_Init+0x152>
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	3b08      	subs	r3, #8
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	210f      	movs	r1, #15
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	431a      	orrs	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80c1 	beq.w	800572e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <HAL_GPIO_Init+0x2a8>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4a48      	ldr	r2, [pc, #288]	; (80056d4 <HAL_GPIO_Init+0x2a8>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6193      	str	r3, [r2, #24]
 80055b8:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <HAL_GPIO_Init+0x2a8>)
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80055c4:	4a44      	ldr	r2, [pc, #272]	; (80056d8 <HAL_GPIO_Init+0x2ac>)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	089b      	lsrs	r3, r3, #2
 80055ca:	3302      	adds	r3, #2
 80055cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	220f      	movs	r2, #15
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <HAL_GPIO_Init+0x2b0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01f      	beq.n	8005630 <HAL_GPIO_Init+0x204>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3b      	ldr	r2, [pc, #236]	; (80056e0 <HAL_GPIO_Init+0x2b4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d019      	beq.n	800562c <HAL_GPIO_Init+0x200>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3a      	ldr	r2, [pc, #232]	; (80056e4 <HAL_GPIO_Init+0x2b8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <HAL_GPIO_Init+0x1fc>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a39      	ldr	r2, [pc, #228]	; (80056e8 <HAL_GPIO_Init+0x2bc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00d      	beq.n	8005624 <HAL_GPIO_Init+0x1f8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a38      	ldr	r2, [pc, #224]	; (80056ec <HAL_GPIO_Init+0x2c0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <HAL_GPIO_Init+0x1f4>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a37      	ldr	r2, [pc, #220]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <HAL_GPIO_Init+0x1f0>
 8005618:	2305      	movs	r3, #5
 800561a:	e00a      	b.n	8005632 <HAL_GPIO_Init+0x206>
 800561c:	2306      	movs	r3, #6
 800561e:	e008      	b.n	8005632 <HAL_GPIO_Init+0x206>
 8005620:	2304      	movs	r3, #4
 8005622:	e006      	b.n	8005632 <HAL_GPIO_Init+0x206>
 8005624:	2303      	movs	r3, #3
 8005626:	e004      	b.n	8005632 <HAL_GPIO_Init+0x206>
 8005628:	2302      	movs	r3, #2
 800562a:	e002      	b.n	8005632 <HAL_GPIO_Init+0x206>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_GPIO_Init+0x206>
 8005630:	2300      	movs	r3, #0
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	f002 0203 	and.w	r2, r2, #3
 8005638:	0092      	lsls	r2, r2, #2
 800563a:	4093      	lsls	r3, r2
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005642:	4925      	ldr	r1, [pc, #148]	; (80056d8 <HAL_GPIO_Init+0x2ac>)
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4924      	ldr	r1, [pc, #144]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
 8005668:	e006      	b.n	8005678 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	43db      	mvns	r3, r3
 8005672:	4920      	ldr	r1, [pc, #128]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 8005674:	4013      	ands	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d006      	beq.n	8005692 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	491a      	ldr	r1, [pc, #104]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
 8005690:	e006      	b.n	80056a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	43db      	mvns	r3, r3
 800569a:	4916      	ldr	r1, [pc, #88]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 800569c:	4013      	ands	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d025      	beq.n	80056f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80056ac:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4910      	ldr	r1, [pc, #64]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]
 80056b8:	e025      	b.n	8005706 <HAL_GPIO_Init+0x2da>
 80056ba:	bf00      	nop
 80056bc:	10320000 	.word	0x10320000
 80056c0:	10310000 	.word	0x10310000
 80056c4:	10220000 	.word	0x10220000
 80056c8:	10210000 	.word	0x10210000
 80056cc:	10120000 	.word	0x10120000
 80056d0:	10110000 	.word	0x10110000
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40010800 	.word	0x40010800
 80056e0:	40010c00 	.word	0x40010c00
 80056e4:	40011000 	.word	0x40011000
 80056e8:	40011400 	.word	0x40011400
 80056ec:	40011800 	.word	0x40011800
 80056f0:	40011c00 	.word	0x40011c00
 80056f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_GPIO_Init+0x324>)
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	43db      	mvns	r3, r3
 8005700:	4913      	ldr	r1, [pc, #76]	; (8005750 <HAL_GPIO_Init+0x324>)
 8005702:	4013      	ands	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <HAL_GPIO_Init+0x324>)
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	490e      	ldr	r1, [pc, #56]	; (8005750 <HAL_GPIO_Init+0x324>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	60cb      	str	r3, [r1, #12]
 800571e:	e006      	b.n	800572e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_GPIO_Init+0x324>)
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	43db      	mvns	r3, r3
 8005728:	4909      	ldr	r1, [pc, #36]	; (8005750 <HAL_GPIO_Init+0x324>)
 800572a:	4013      	ands	r3, r2
 800572c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	3301      	adds	r3, #1
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	f47f ae7e 	bne.w	8005440 <HAL_GPIO_Init+0x14>
  }
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	372c      	adds	r7, #44	; 0x2c
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	40010400 	.word	0x40010400

08005754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	887b      	ldrh	r3, [r7, #2]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e001      	b.n	8005776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	807b      	strh	r3, [r7, #2]
 800578e:	4613      	mov	r3, r2
 8005790:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005792:	787b      	ldrb	r3, [r7, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800579e:	e003      	b.n	80057a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	041a      	lsls	r2, r3, #16
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d006      	beq.n	80057d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f806 	bl	80057e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40010400 	.word	0x40010400

080057e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e12b      	b.n	8005a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fd ffb4 	bl	800378c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800584a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800585a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800585c:	f001 fba0 	bl	8006fa0 <HAL_RCC_GetPCLK1Freq>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a81      	ldr	r2, [pc, #516]	; (8005a6c <HAL_I2C_Init+0x274>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d807      	bhi.n	800587c <HAL_I2C_Init+0x84>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a80      	ldr	r2, [pc, #512]	; (8005a70 <HAL_I2C_Init+0x278>)
 8005870:	4293      	cmp	r3, r2
 8005872:	bf94      	ite	ls
 8005874:	2301      	movls	r3, #1
 8005876:	2300      	movhi	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e006      	b.n	800588a <HAL_I2C_Init+0x92>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a7d      	ldr	r2, [pc, #500]	; (8005a74 <HAL_I2C_Init+0x27c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	bf94      	ite	ls
 8005884:	2301      	movls	r3, #1
 8005886:	2300      	movhi	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0e7      	b.n	8005a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a78      	ldr	r2, [pc, #480]	; (8005a78 <HAL_I2C_Init+0x280>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	0c9b      	lsrs	r3, r3, #18
 800589c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_I2C_Init+0x274>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d802      	bhi.n	80058cc <HAL_I2C_Init+0xd4>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	3301      	adds	r3, #1
 80058ca:	e009      	b.n	80058e0 <HAL_I2C_Init+0xe8>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	4a69      	ldr	r2, [pc, #420]	; (8005a7c <HAL_I2C_Init+0x284>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	099b      	lsrs	r3, r3, #6
 80058de:	3301      	adds	r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	495c      	ldr	r1, [pc, #368]	; (8005a6c <HAL_I2C_Init+0x274>)
 80058fc:	428b      	cmp	r3, r1
 80058fe:	d819      	bhi.n	8005934 <HAL_I2C_Init+0x13c>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1e59      	subs	r1, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fbb1 f3f3 	udiv	r3, r1, r3
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005914:	400b      	ands	r3, r1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_I2C_Init+0x138>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1e59      	subs	r1, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	fbb1 f3f3 	udiv	r3, r1, r3
 8005928:	3301      	adds	r3, #1
 800592a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592e:	e051      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 8005930:	2304      	movs	r3, #4
 8005932:	e04f      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d111      	bne.n	8005960 <HAL_I2C_Init+0x168>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1e58      	subs	r0, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	440b      	add	r3, r1
 800594a:	fbb0 f3f3 	udiv	r3, r0, r3
 800594e:	3301      	adds	r3, #1
 8005950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e012      	b.n	8005986 <HAL_I2C_Init+0x18e>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e58      	subs	r0, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	0099      	lsls	r1, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	fbb0 f3f3 	udiv	r3, r0, r3
 8005976:	3301      	adds	r3, #1
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_I2C_Init+0x196>
 800598a:	2301      	movs	r3, #1
 800598c:	e022      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <HAL_I2C_Init+0x1bc>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1e58      	subs	r0, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	440b      	add	r3, r1
 80059a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a8:	3301      	adds	r3, #1
 80059aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b2:	e00f      	b.n	80059d4 <HAL_I2C_Init+0x1dc>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1e58      	subs	r0, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	0099      	lsls	r1, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ca:	3301      	adds	r3, #1
 80059cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	6809      	ldr	r1, [r1, #0]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6911      	ldr	r1, [r2, #16]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68d2      	ldr	r2, [r2, #12]
 8005a0e:	4311      	orrs	r1, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	000186a0 	.word	0x000186a0
 8005a70:	001e847f 	.word	0x001e847f
 8005a74:	003d08ff 	.word	0x003d08ff
 8005a78:	431bde83 	.word	0x431bde83
 8005a7c:	10624dd3 	.word	0x10624dd3

08005a80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	460b      	mov	r3, r1
 8005a94:	813b      	strh	r3, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a9a:	f7fe fea1 	bl	80047e0 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	f040 80d9 	bne.w	8005c60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	2319      	movs	r3, #25
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	496d      	ldr	r1, [pc, #436]	; (8005c6c <HAL_I2C_Mem_Write+0x1ec>)
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fcc1 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0cc      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_Mem_Write+0x56>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0c5      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d007      	beq.n	8005afc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2221      	movs	r2, #33	; 0x21
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a4d      	ldr	r2, [pc, #308]	; (8005c70 <HAL_I2C_Mem_Write+0x1f0>)
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3e:	88f8      	ldrh	r0, [r7, #6]
 8005b40:	893a      	ldrh	r2, [r7, #8]
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 faf8 	bl	8006144 <I2C_RequestMemoryWrite>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d052      	beq.n	8005c00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e081      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fd42 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d107      	bne.n	8005b86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06b      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d11b      	bne.n	8005c00 <HAL_I2C_Mem_Write+0x180>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d017      	beq.n	8005c00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1aa      	bne.n	8005b5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fd2e 	bl	800666e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00d      	beq.n	8005c34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d107      	bne.n	8005c30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e016      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	00100002 	.word	0x00100002
 8005c70:	ffff0000 	.word	0xffff0000

08005c74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	817b      	strh	r3, [r7, #10]
 8005c86:	460b      	mov	r3, r1
 8005c88:	813b      	strh	r3, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c92:	f7fe fda5 	bl	80047e0 <HAL_GetTick>
 8005c96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	f040 8244 	bne.w	800612e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	2319      	movs	r3, #25
 8005cac:	2201      	movs	r2, #1
 8005cae:	4982      	ldr	r1, [pc, #520]	; (8005eb8 <HAL_I2C_Mem_Read+0x244>)
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fbc5 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e237      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_I2C_Mem_Read+0x5a>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e230      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d007      	beq.n	8005cf4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2222      	movs	r2, #34	; 0x22
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2240      	movs	r2, #64	; 0x40
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a62      	ldr	r2, [pc, #392]	; (8005ebc <HAL_I2C_Mem_Read+0x248>)
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d36:	88f8      	ldrh	r0, [r7, #6]
 8005d38:	893a      	ldrh	r2, [r7, #8]
 8005d3a:	8979      	ldrh	r1, [r7, #10]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4603      	mov	r3, r0
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa92 	bl	8006270 <I2C_RequestMemoryRead>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e1ec      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d113      	bne.n	8005d86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e1c0      	b.n	8006108 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d11e      	bne.n	8005dcc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9e:	b672      	cpsid	i
}
 8005da0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dc8:	b662      	cpsie	i
}
 8005dca:	e035      	b.n	8005e38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d11e      	bne.n	8005e12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005de4:	b672      	cpsid	i
}
 8005de6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e0e:	b662      	cpsie	i
}
 8005e10:	e012      	b.n	8005e38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e38:	e166      	b.n	8006108 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	f200 811f 	bhi.w	8006082 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d123      	bne.n	8005e94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fc4d 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e167      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e92:	e139      	b.n	8006108 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d152      	bne.n	8005f42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4906      	ldr	r1, [pc, #24]	; (8005ec0 <HAL_I2C_Mem_Read+0x24c>)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 faca 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e13c      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
 8005eb6:	bf00      	nop
 8005eb8:	00100002 	.word	0x00100002
 8005ebc:	ffff0000 	.word	0xffff0000
 8005ec0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec4:	b672      	cpsid	i
}
 8005ec6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f0a:	b662      	cpsie	i
}
 8005f0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f40:	e0e2      	b.n	8006108 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	2200      	movs	r2, #0
 8005f4a:	497b      	ldr	r1, [pc, #492]	; (8006138 <HAL_I2C_Mem_Read+0x4c4>)
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fa77 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0e9      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f6c:	b672      	cpsid	i
}
 8005f6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa2:	4b66      	ldr	r3, [pc, #408]	; (800613c <HAL_I2C_Mem_Read+0x4c8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	08db      	lsrs	r3, r3, #3
 8005fa8:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_I2C_Mem_Read+0x4cc>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a1a      	lsrs	r2, r3, #8
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d118      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005fea:	b662      	cpsie	i
}
 8005fec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e09a      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d1d9      	bne.n	8005fbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800604a:	b662      	cpsie	i
}
 800604c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006080:	e042      	b.n	8006108 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fb32 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e04c      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d118      	bne.n	8006108 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f ae94 	bne.w	8005e3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3728      	adds	r7, #40	; 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	00010004 	.word	0x00010004
 800613c:	20000004 	.word	0x20000004
 8006140:	14f8b589 	.word	0x14f8b589

08006144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f960 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006194:	d103      	bne.n	800619e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e05f      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a2:	897b      	ldrh	r3, [r7, #10]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	492d      	ldr	r1, [pc, #180]	; (800626c <I2C_RequestMemoryWrite+0x128>)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f998 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04c      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa02 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e02b      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	e021      	b.n	8006260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f9dc 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e005      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8c2 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d0:	d103      	bne.n	80062da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0aa      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	4952      	ldr	r1, [pc, #328]	; (800643c <I2C_RequestMemoryRead+0x1cc>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f8fa 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e097      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f964 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b04      	cmp	r3, #4
 8006330:	d107      	bne.n	8006342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e076      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	e021      	b.n	800639c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f93e 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e050      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f923 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d107      	bne.n	80063c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e035      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f82b 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d103      	bne.n	8006408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e013      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <I2C_RequestMemoryRead+0x1cc>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f863 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010002 	.word	0x00010002

08006440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006450:	e025      	b.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006458:	d021      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fe f9c1 	bl	80047e0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d116      	bne.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e023      	b.n	80064e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10d      	bne.n	80064c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	43da      	mvns	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	e00c      	b.n	80064de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d0b6      	beq.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064fc:	e051      	b.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650c:	d123      	bne.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0204 	orr.w	r2, r3, #4
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e046      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655c:	d021      	beq.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fe f93f 	bl	80047e0 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e020      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10c      	bne.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e00b      	b.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d18d      	bne.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f8:	e02d      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f8ce 	bl	800679c <I2C_IsAcknowledgeFailed>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e02d      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006610:	d021      	beq.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fe f8e5 	bl	80047e0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d116      	bne.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e007      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d1ca      	bne.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800667a:	e02d      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f88d 	bl	800679c <I2C_IsAcknowledgeFailed>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e02d      	b.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006692:	d021      	beq.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006694:	f7fe f8a4 	bl	80047e0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d116      	bne.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e007      	b.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d1ca      	bne.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066fc:	e042      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d119      	bne.n	8006740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0210 	mvn.w	r2, #16
 8006714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e029      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006740:	f7fe f84e 	bl	80047e0 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d116      	bne.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e007      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d1b5      	bne.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d11b      	bne.n	80067ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 0204 	orr.w	r2, r3, #4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e272      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8087 	beq.w	8006926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006818:	4b92      	ldr	r3, [pc, #584]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f003 030c 	and.w	r3, r3, #12
 8006820:	2b04      	cmp	r3, #4
 8006822:	d00c      	beq.n	800683e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006824:	4b8f      	ldr	r3, [pc, #572]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f003 030c 	and.w	r3, r3, #12
 800682c:	2b08      	cmp	r3, #8
 800682e:	d112      	bne.n	8006856 <HAL_RCC_OscConfig+0x5e>
 8006830:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d10b      	bne.n	8006856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683e:	4b89      	ldr	r3, [pc, #548]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d06c      	beq.n	8006924 <HAL_RCC_OscConfig+0x12c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d168      	bne.n	8006924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e24c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x76>
 8006860:	4b80      	ldr	r3, [pc, #512]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7f      	ldr	r2, [pc, #508]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e02e      	b.n	80068cc <HAL_RCC_OscConfig+0xd4>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x98>
 8006876:	4b7b      	ldr	r3, [pc, #492]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7a      	ldr	r2, [pc, #488]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 800687c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b78      	ldr	r3, [pc, #480]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a77      	ldr	r2, [pc, #476]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e01d      	b.n	80068cc <HAL_RCC_OscConfig+0xd4>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0xbc>
 800689a:	4b72      	ldr	r3, [pc, #456]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a71      	ldr	r2, [pc, #452]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0xd4>
 80068b4:	4b6b      	ldr	r3, [pc, #428]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6a      	ldr	r2, [pc, #424]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a67      	ldr	r2, [pc, #412]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fd ff84 	bl	80047e0 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fd ff80 	bl	80047e0 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e200      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b5d      	ldr	r3, [pc, #372]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0xe4>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fd ff70 	bl	80047e0 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006904:	f7fd ff6c 	bl	80047e0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	; 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e1ec      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006916:	4b53      	ldr	r3, [pc, #332]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x10c>
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d063      	beq.n	80069fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006932:	4b4c      	ldr	r3, [pc, #304]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800693e:	4b49      	ldr	r3, [pc, #292]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 030c 	and.w	r3, r3, #12
 8006946:	2b08      	cmp	r3, #8
 8006948:	d11c      	bne.n	8006984 <HAL_RCC_OscConfig+0x18c>
 800694a:	4b46      	ldr	r3, [pc, #280]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d116      	bne.n	8006984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006956:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_RCC_OscConfig+0x176>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e1c0      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696e:	4b3d      	ldr	r3, [pc, #244]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4939      	ldr	r1, [pc, #228]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006982:	e03a      	b.n	80069fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <HAL_RCC_OscConfig+0x270>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006992:	f7fd ff25 	bl	80047e0 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699a:	f7fd ff21 	bl	80047e0 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1a1      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ac:	4b2d      	ldr	r3, [pc, #180]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b8:	4b2a      	ldr	r3, [pc, #168]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4927      	ldr	r1, [pc, #156]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
 80069cc:	e015      	b.n	80069fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ce:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <HAL_RCC_OscConfig+0x270>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fd ff04 	bl	80047e0 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069dc:	f7fd ff00 	bl	80047e0 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e180      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ee:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d03a      	beq.n	8006a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d019      	beq.n	8006a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0e:	4b17      	ldr	r3, [pc, #92]	; (8006a6c <HAL_RCC_OscConfig+0x274>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a14:	f7fd fee4 	bl	80047e0 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7fd fee0 	bl	80047e0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e160      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <HAL_RCC_OscConfig+0x26c>)
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f000 fad8 	bl	8006ff0 <RCC_Delay>
 8006a40:	e01c      	b.n	8006a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <HAL_RCC_OscConfig+0x274>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a48:	f7fd feca 	bl	80047e0 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a4e:	e00f      	b.n	8006a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a50:	f7fd fec6 	bl	80047e0 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d908      	bls.n	8006a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e146      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
 8006a62:	bf00      	nop
 8006a64:	40021000 	.word	0x40021000
 8006a68:	42420000 	.word	0x42420000
 8006a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a70:	4b92      	ldr	r3, [pc, #584]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e9      	bne.n	8006a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80a6 	beq.w	8006bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a8e:	4b8b      	ldr	r3, [pc, #556]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a9a:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	4a87      	ldr	r2, [pc, #540]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	61d3      	str	r3, [r2, #28]
 8006aa6:	4b85      	ldr	r3, [pc, #532]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab6:	4b82      	ldr	r3, [pc, #520]	; (8006cc0 <HAL_RCC_OscConfig+0x4c8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d118      	bne.n	8006af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <HAL_RCC_OscConfig+0x4c8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7e      	ldr	r2, [pc, #504]	; (8006cc0 <HAL_RCC_OscConfig+0x4c8>)
 8006ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ace:	f7fd fe87 	bl	80047e0 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad6:	f7fd fe83 	bl	80047e0 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b64      	cmp	r3, #100	; 0x64
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e103      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae8:	4b75      	ldr	r3, [pc, #468]	; (8006cc0 <HAL_RCC_OscConfig+0x4c8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d106      	bne.n	8006b0a <HAL_RCC_OscConfig+0x312>
 8006afc:	4b6f      	ldr	r3, [pc, #444]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	4a6e      	ldr	r2, [pc, #440]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6213      	str	r3, [r2, #32]
 8006b08:	e02d      	b.n	8006b66 <HAL_RCC_OscConfig+0x36e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x334>
 8006b12:	4b6a      	ldr	r3, [pc, #424]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4a69      	ldr	r2, [pc, #420]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6213      	str	r3, [r2, #32]
 8006b1e:	4b67      	ldr	r3, [pc, #412]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	4a66      	ldr	r2, [pc, #408]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	6213      	str	r3, [r2, #32]
 8006b2a:	e01c      	b.n	8006b66 <HAL_RCC_OscConfig+0x36e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d10c      	bne.n	8006b4e <HAL_RCC_OscConfig+0x356>
 8006b34:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	4a60      	ldr	r2, [pc, #384]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b3a:	f043 0304 	orr.w	r3, r3, #4
 8006b3e:	6213      	str	r3, [r2, #32]
 8006b40:	4b5e      	ldr	r3, [pc, #376]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	4a5d      	ldr	r2, [pc, #372]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	6213      	str	r3, [r2, #32]
 8006b4c:	e00b      	b.n	8006b66 <HAL_RCC_OscConfig+0x36e>
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	4a5a      	ldr	r2, [pc, #360]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	6213      	str	r3, [r2, #32]
 8006b5a:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	4a57      	ldr	r2, [pc, #348]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b60:	f023 0304 	bic.w	r3, r3, #4
 8006b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b6e:	f7fd fe37 	bl	80047e0 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fd fe33 	bl	80047e0 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e0b1      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8c:	4b4b      	ldr	r3, [pc, #300]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ee      	beq.n	8006b76 <HAL_RCC_OscConfig+0x37e>
 8006b98:	e014      	b.n	8006bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b9a:	f7fd fe21 	bl	80047e0 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba0:	e00a      	b.n	8006bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba2:	f7fd fe1d 	bl	80047e0 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e09b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb8:	4b40      	ldr	r3, [pc, #256]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ee      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d105      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bca:	4b3c      	ldr	r3, [pc, #240]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4a3b      	ldr	r2, [pc, #236]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8087 	beq.w	8006cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 030c 	and.w	r3, r3, #12
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d061      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d146      	bne.n	8006c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf4:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <HAL_RCC_OscConfig+0x4cc>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfa:	f7fd fdf1 	bl	80047e0 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c02:	f7fd fded 	bl	80047e0 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e06d      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c14:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f0      	bne.n	8006c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c28:	d108      	bne.n	8006c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c2a:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	4921      	ldr	r1, [pc, #132]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c3c:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a19      	ldr	r1, [r3, #32]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	491b      	ldr	r1, [pc, #108]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <HAL_RCC_OscConfig+0x4cc>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5a:	f7fd fdc1 	bl	80047e0 <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c62:	f7fd fdbd 	bl	80047e0 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e03d      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0x46a>
 8006c80:	e035      	b.n	8006cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <HAL_RCC_OscConfig+0x4cc>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c88:	f7fd fdaa 	bl	80047e0 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c90:	f7fd fda6 	bl	80047e0 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e026      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x498>
 8006cae:	e01e      	b.n	8006cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e019      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40007000 	.word	0x40007000
 8006cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <HAL_RCC_OscConfig+0x500>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d106      	bne.n	8006cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d001      	beq.n	8006cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40021000 	.word	0x40021000

08006cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0d0      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d10:	4b6a      	ldr	r3, [pc, #424]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d910      	bls.n	8006d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b67      	ldr	r3, [pc, #412]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 0207 	bic.w	r2, r3, #7
 8006d26:	4965      	ldr	r1, [pc, #404]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b63      	ldr	r3, [pc, #396]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0b8      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d020      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d58:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4a58      	ldr	r2, [pc, #352]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d70:	4b53      	ldr	r3, [pc, #332]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a52      	ldr	r2, [pc, #328]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7c:	4b50      	ldr	r3, [pc, #320]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	494d      	ldr	r1, [pc, #308]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d040      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	4b47      	ldr	r3, [pc, #284]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d115      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e07f      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d107      	bne.n	8006dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dba:	4b41      	ldr	r3, [pc, #260]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e073      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dca:	4b3d      	ldr	r3, [pc, #244]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e06b      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dda:	4b39      	ldr	r3, [pc, #228]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f023 0203 	bic.w	r2, r3, #3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4936      	ldr	r1, [pc, #216]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dec:	f7fd fcf8 	bl	80047e0 <HAL_GetTick>
 8006df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df2:	e00a      	b.n	8006e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df4:	f7fd fcf4 	bl	80047e0 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e053      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0a:	4b2d      	ldr	r3, [pc, #180]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 020c 	and.w	r2, r3, #12
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d1eb      	bne.n	8006df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1c:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d210      	bcs.n	8006e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f023 0207 	bic.w	r2, r3, #7
 8006e32:	4922      	ldr	r1, [pc, #136]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <HAL_RCC_ClockConfig+0x1c0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e032      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4916      	ldr	r1, [pc, #88]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	490e      	ldr	r1, [pc, #56]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e8a:	f000 f821 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	490a      	ldr	r1, [pc, #40]	; (8006ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	5ccb      	ldrb	r3, [r1, r3]
 8006e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8006ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <HAL_RCC_ClockConfig+0x1d0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd fc56 	bl	800475c <HAL_InitTick>

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40022000 	.word	0x40022000
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	0800da9c 	.word	0x0800da9c
 8006ec8:	20000004 	.word	0x20000004
 8006ecc:	20000038 	.word	0x20000038

08006ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed0:	b490      	push	{r4, r7}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ed6:	4b29      	ldr	r3, [pc, #164]	; (8006f7c <HAL_RCC_GetSysClockFreq+0xac>)
 8006ed8:	1d3c      	adds	r4, r7, #4
 8006eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ee0:	f240 2301 	movw	r3, #513	; 0x201
 8006ee4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006efa:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d002      	beq.n	8006f10 <HAL_RCC_GetSysClockFreq+0x40>
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCC_GetSysClockFreq+0x46>
 8006f0e:	e02b      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f10:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f12:	623b      	str	r3, [r7, #32]
      break;
 8006f14:	e02b      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	0c9b      	lsrs	r3, r3, #18
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	3328      	adds	r3, #40	; 0x28
 8006f20:	443b      	add	r3, r7
 8006f22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d012      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	0c5b      	lsrs	r3, r3, #17
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	3328      	adds	r3, #40	; 0x28
 8006f3e:	443b      	add	r3, r7
 8006f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4a0e      	ldr	r2, [pc, #56]	; (8006f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f4a:	fb03 f202 	mul.w	r2, r3, r2
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	e004      	b.n	8006f62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	623b      	str	r3, [r7, #32]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f6a:	623b      	str	r3, [r7, #32]
      break;
 8006f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3728      	adds	r7, #40	; 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc90      	pop	{r4, r7}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	0800d48c 	.word	0x0800d48c
 8006f80:	40021000 	.word	0x40021000
 8006f84:	007a1200 	.word	0x007a1200
 8006f88:	003d0900 	.word	0x003d0900

08006f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8006f92:	681b      	ldr	r3, [r3, #0]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	20000004 	.word	0x20000004

08006fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fa4:	f7ff fff2 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	4903      	ldr	r1, [pc, #12]	; (8006fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb6:	5ccb      	ldrb	r3, [r1, r3]
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	0800daac 	.word	0x0800daac

08006fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fcc:	f7ff ffde 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0adb      	lsrs	r3, r3, #11
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	4903      	ldr	r1, [pc, #12]	; (8006fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	0800daac 	.word	0x0800daac

08006ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <RCC_Delay+0x34>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <RCC_Delay+0x38>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	0a5b      	lsrs	r3, r3, #9
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800700c:	bf00      	nop
  }
  while (Delay --);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1e5a      	subs	r2, r3, #1
 8007012:	60fa      	str	r2, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f9      	bne.n	800700c <RCC_Delay+0x1c>
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	20000004 	.word	0x20000004
 8007028:	10624dd3 	.word	0x10624dd3

0800702c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d07d      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007048:	2300      	movs	r3, #0
 800704a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704c:	4b4f      	ldr	r3, [pc, #316]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007058:	4b4c      	ldr	r3, [pc, #304]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	4a4b      	ldr	r2, [pc, #300]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007062:	61d3      	str	r3, [r2, #28]
 8007064:	4b49      	ldr	r3, [pc, #292]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007074:	4b46      	ldr	r3, [pc, #280]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707c:	2b00      	cmp	r3, #0
 800707e:	d118      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007080:	4b43      	ldr	r3, [pc, #268]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a42      	ldr	r2, [pc, #264]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708c:	f7fd fba8 	bl	80047e0 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007092:	e008      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007094:	f7fd fba4 	bl	80047e0 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	; 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e06d      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a6:	4b3a      	ldr	r3, [pc, #232]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070b2:	4b36      	ldr	r3, [pc, #216]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02e      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d027      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070d0:	4b2e      	ldr	r3, [pc, #184]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070da:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070e6:	4a29      	ldr	r2, [pc, #164]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f6:	f7fd fb73 	bl	80047e0 <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fc:	e00a      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070fe:	f7fd fb6f 	bl	80047e0 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	f241 3288 	movw	r2, #5000	; 0x1388
 800710c:	4293      	cmp	r3, r2
 800710e:	d901      	bls.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e036      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0ee      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4917      	ldr	r1, [pc, #92]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712e:	4313      	orrs	r3, r2
 8007130:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007138:	4b14      	ldr	r3, [pc, #80]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800713e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	490b      	ldr	r1, [pc, #44]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715e:	4313      	orrs	r3, r2
 8007160:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4904      	ldr	r1, [pc, #16]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717c:	4313      	orrs	r3, r2
 800717e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40021000 	.word	0x40021000
 8007190:	40007000 	.word	0x40007000
 8007194:	42420440 	.word	0x42420440

08007198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b08d      	sub	sp, #52	; 0x34
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071a0:	4b6a      	ldr	r3, [pc, #424]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80071a2:	f107 040c 	add.w	r4, r7, #12
 80071a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80071ac:	f240 2301 	movw	r3, #513	; 0x201
 80071b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
 80071b6:	2300      	movs	r3, #0
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ba:	2300      	movs	r3, #0
 80071bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	2300      	movs	r3, #0
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	f200 80b4 	bhi.w	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080072b7 	.word	0x080072b7
 80071dc:	0800731d 	.word	0x0800731d
 80071e0:	08007339 	.word	0x08007339
 80071e4:	080072a7 	.word	0x080072a7
 80071e8:	08007339 	.word	0x08007339
 80071ec:	08007339 	.word	0x08007339
 80071f0:	08007339 	.word	0x08007339
 80071f4:	080072af 	.word	0x080072af
 80071f8:	08007339 	.word	0x08007339
 80071fc:	08007339 	.word	0x08007339
 8007200:	08007339 	.word	0x08007339
 8007204:	08007339 	.word	0x08007339
 8007208:	08007339 	.word	0x08007339
 800720c:	08007339 	.word	0x08007339
 8007210:	08007339 	.word	0x08007339
 8007214:	08007219 	.word	0x08007219
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007218:	4b4d      	ldr	r3, [pc, #308]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800721e:	4b4c      	ldr	r3, [pc, #304]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8088 	beq.w	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	0c9b      	lsrs	r3, r3, #18
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	3330      	adds	r3, #48	; 0x30
 8007236:	443b      	add	r3, r7
 8007238:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800723c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d017      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007248:	4b41      	ldr	r3, [pc, #260]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	0c5b      	lsrs	r3, r3, #17
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	3330      	adds	r3, #48	; 0x30
 8007254:	443b      	add	r3, r7
 8007256:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00d      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007266:	4a3b      	ldr	r2, [pc, #236]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	fbb2 f2f3 	udiv	r2, r2, r3
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007276:	e004      	b.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	4a37      	ldr	r2, [pc, #220]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800727c:	fb02 f303 	mul.w	r3, r2, r3
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007282:	4b33      	ldr	r3, [pc, #204]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800728e:	d102      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007294:	e052      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4a30      	ldr	r2, [pc, #192]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072a4:	e04a      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80072a6:	f7ff fe13 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 80072aa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80072ac:	e049      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80072ae:	f7ff fe0f 	bl	8006ed0 <HAL_RCC_GetSysClockFreq>
 80072b2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80072b4:	e045      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c6:	d108      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80072d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	e01f      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80072f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	e00f      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007304:	d11c      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8007312:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007318:	e012      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800731a:	e011      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800731c:	f7ff fe54 	bl	8006fc8 <HAL_RCC_GetPCLK2Freq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	0b9b      	lsrs	r3, r3, #14
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	3301      	adds	r3, #1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007336:	e004      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8007338:	bf00      	nop
 800733a:	e002      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8007340:	bf00      	nop
    }
  }
  return (frequency);
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007344:	4618      	mov	r0, r3
 8007346:	3734      	adds	r7, #52	; 0x34
 8007348:	46bd      	mov	sp, r7
 800734a:	bd90      	pop	{r4, r7, pc}
 800734c:	0800d49c 	.word	0x0800d49c
 8007350:	40021000 	.word	0x40021000
 8007354:	007a1200 	.word	0x007a1200
 8007358:	003d0900 	.word	0x003d0900
 800735c:	aaaaaaab 	.word	0xaaaaaaab

08007360 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d004      	beq.n	800737c <HAL_SRAM_Init+0x1c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737a:	d101      	bne.n	8007380 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e038      	b.n	80073f2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7fc fa7d 	bl	8003894 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3308      	adds	r3, #8
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f000 f829 	bl	80073fc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	f000 f88b 	bl	80074d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6858      	ldr	r0, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	f000 f8b6 	bl	8007538 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	6892      	ldr	r2, [r2, #8]
 80073d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	6892      	ldr	r2, [r2, #8]
 80073e0:	f041 0101 	orr.w	r1, r1, #1
 80073e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	f023 0101 	bic.w	r1, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b08      	cmp	r3, #8
 8007424:	d102      	bne.n	800742c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	e001      	b.n	8007430 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800743c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007442:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007448:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800744e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007454:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800745a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007460:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007466:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800746c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <FSMC_NORSRAM_Init+0xd0>)
 800748c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007494:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800749c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	43db      	mvns	r3, r3
 80074ac:	ea02 0103 	and.w	r1, r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4319      	orrs	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	0008fb7f 	.word	0x0008fb7f

080074d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	041b      	lsls	r3, r3, #16
 8007504:	431a      	orrs	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	3b01      	subs	r3, #1
 800750c:	051b      	lsls	r3, r3, #20
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	3b02      	subs	r3, #2
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	431a      	orrs	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	4313      	orrs	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	3201      	adds	r2, #1
 8007524:	4319      	orrs	r1, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800754c:	d11d      	bne.n	800758a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007558:	4013      	ands	r3, r2
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	6811      	ldr	r1, [r2, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	6852      	ldr	r2, [r2, #4]
 8007562:	0112      	lsls	r2, r2, #4
 8007564:	4311      	orrs	r1, r2
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	0212      	lsls	r2, r2, #8
 800756c:	4311      	orrs	r1, r2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	6992      	ldr	r2, [r2, #24]
 8007572:	4311      	orrs	r1, r2
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	68d2      	ldr	r2, [r2, #12]
 8007578:	0412      	lsls	r2, r2, #16
 800757a:	430a      	orrs	r2, r1
 800757c:	ea43 0102 	orr.w	r1, r3, r2
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007588:	e005      	b.n	8007596 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	cff00000 	.word	0xcff00000

080075a8 <__errno>:
 80075a8:	4b01      	ldr	r3, [pc, #4]	; (80075b0 <__errno+0x8>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000040 	.word	0x20000040

080075b4 <__libc_init_array>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	2600      	movs	r6, #0
 80075b8:	4d0c      	ldr	r5, [pc, #48]	; (80075ec <__libc_init_array+0x38>)
 80075ba:	4c0d      	ldr	r4, [pc, #52]	; (80075f0 <__libc_init_array+0x3c>)
 80075bc:	1b64      	subs	r4, r4, r5
 80075be:	10a4      	asrs	r4, r4, #2
 80075c0:	42a6      	cmp	r6, r4
 80075c2:	d109      	bne.n	80075d8 <__libc_init_array+0x24>
 80075c4:	f005 fe46 	bl	800d254 <_init>
 80075c8:	2600      	movs	r6, #0
 80075ca:	4d0a      	ldr	r5, [pc, #40]	; (80075f4 <__libc_init_array+0x40>)
 80075cc:	4c0a      	ldr	r4, [pc, #40]	; (80075f8 <__libc_init_array+0x44>)
 80075ce:	1b64      	subs	r4, r4, r5
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	42a6      	cmp	r6, r4
 80075d4:	d105      	bne.n	80075e2 <__libc_init_array+0x2e>
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075dc:	4798      	blx	r3
 80075de:	3601      	adds	r6, #1
 80075e0:	e7ee      	b.n	80075c0 <__libc_init_array+0xc>
 80075e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e6:	4798      	blx	r3
 80075e8:	3601      	adds	r6, #1
 80075ea:	e7f2      	b.n	80075d2 <__libc_init_array+0x1e>
 80075ec:	0800e000 	.word	0x0800e000
 80075f0:	0800e000 	.word	0x0800e000
 80075f4:	0800e000 	.word	0x0800e000
 80075f8:	0800e004 	.word	0x0800e004

080075fc <malloc>:
 80075fc:	4b02      	ldr	r3, [pc, #8]	; (8007608 <malloc+0xc>)
 80075fe:	4601      	mov	r1, r0
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f000 b87b 	b.w	80076fc <_malloc_r>
 8007606:	bf00      	nop
 8007608:	20000040 	.word	0x20000040

0800760c <free>:
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <free+0xc>)
 800760e:	4601      	mov	r1, r0
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	f000 b80b 	b.w	800762c <_free_r>
 8007616:	bf00      	nop
 8007618:	20000040 	.word	0x20000040

0800761c <memset>:
 800761c:	4603      	mov	r3, r0
 800761e:	4402      	add	r2, r0
 8007620:	4293      	cmp	r3, r2
 8007622:	d100      	bne.n	8007626 <memset+0xa>
 8007624:	4770      	bx	lr
 8007626:	f803 1b01 	strb.w	r1, [r3], #1
 800762a:	e7f9      	b.n	8007620 <memset+0x4>

0800762c <_free_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4605      	mov	r5, r0
 8007630:	2900      	cmp	r1, #0
 8007632:	d040      	beq.n	80076b6 <_free_r+0x8a>
 8007634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007638:	1f0c      	subs	r4, r1, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfb8      	it	lt
 800763e:	18e4      	addlt	r4, r4, r3
 8007640:	f003 f814 	bl	800a66c <__malloc_lock>
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <_free_r+0x8c>)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	b933      	cbnz	r3, 8007658 <_free_r+0x2c>
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	6014      	str	r4, [r2, #0]
 800764e:	4628      	mov	r0, r5
 8007650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007654:	f003 b810 	b.w	800a678 <__malloc_unlock>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d908      	bls.n	800766e <_free_r+0x42>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	1821      	adds	r1, r4, r0
 8007660:	428b      	cmp	r3, r1
 8007662:	bf01      	itttt	eq
 8007664:	6819      	ldreq	r1, [r3, #0]
 8007666:	685b      	ldreq	r3, [r3, #4]
 8007668:	1809      	addeq	r1, r1, r0
 800766a:	6021      	streq	r1, [r4, #0]
 800766c:	e7ed      	b.n	800764a <_free_r+0x1e>
 800766e:	461a      	mov	r2, r3
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	b10b      	cbz	r3, 8007678 <_free_r+0x4c>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d9fa      	bls.n	800766e <_free_r+0x42>
 8007678:	6811      	ldr	r1, [r2, #0]
 800767a:	1850      	adds	r0, r2, r1
 800767c:	42a0      	cmp	r0, r4
 800767e:	d10b      	bne.n	8007698 <_free_r+0x6c>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	4401      	add	r1, r0
 8007684:	1850      	adds	r0, r2, r1
 8007686:	4283      	cmp	r3, r0
 8007688:	6011      	str	r1, [r2, #0]
 800768a:	d1e0      	bne.n	800764e <_free_r+0x22>
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4401      	add	r1, r0
 8007692:	6011      	str	r1, [r2, #0]
 8007694:	6053      	str	r3, [r2, #4]
 8007696:	e7da      	b.n	800764e <_free_r+0x22>
 8007698:	d902      	bls.n	80076a0 <_free_r+0x74>
 800769a:	230c      	movs	r3, #12
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	e7d6      	b.n	800764e <_free_r+0x22>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	1821      	adds	r1, r4, r0
 80076a4:	428b      	cmp	r3, r1
 80076a6:	bf01      	itttt	eq
 80076a8:	6819      	ldreq	r1, [r3, #0]
 80076aa:	685b      	ldreq	r3, [r3, #4]
 80076ac:	1809      	addeq	r1, r1, r0
 80076ae:	6021      	streq	r1, [r4, #0]
 80076b0:	6063      	str	r3, [r4, #4]
 80076b2:	6054      	str	r4, [r2, #4]
 80076b4:	e7cb      	b.n	800764e <_free_r+0x22>
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	200006f8 	.word	0x200006f8

080076bc <sbrk_aligned>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4e0e      	ldr	r6, [pc, #56]	; (80076f8 <sbrk_aligned+0x3c>)
 80076c0:	460c      	mov	r4, r1
 80076c2:	6831      	ldr	r1, [r6, #0]
 80076c4:	4605      	mov	r5, r0
 80076c6:	b911      	cbnz	r1, 80076ce <sbrk_aligned+0x12>
 80076c8:	f000 fefa 	bl	80084c0 <_sbrk_r>
 80076cc:	6030      	str	r0, [r6, #0]
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 fef5 	bl	80084c0 <_sbrk_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d00a      	beq.n	80076f0 <sbrk_aligned+0x34>
 80076da:	1cc4      	adds	r4, r0, #3
 80076dc:	f024 0403 	bic.w	r4, r4, #3
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d007      	beq.n	80076f4 <sbrk_aligned+0x38>
 80076e4:	1a21      	subs	r1, r4, r0
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 feea 	bl	80084c0 <_sbrk_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d101      	bne.n	80076f4 <sbrk_aligned+0x38>
 80076f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076f4:	4620      	mov	r0, r4
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	200006fc 	.word	0x200006fc

080076fc <_malloc_r>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	1ccd      	adds	r5, r1, #3
 8007702:	f025 0503 	bic.w	r5, r5, #3
 8007706:	3508      	adds	r5, #8
 8007708:	2d0c      	cmp	r5, #12
 800770a:	bf38      	it	cc
 800770c:	250c      	movcc	r5, #12
 800770e:	2d00      	cmp	r5, #0
 8007710:	4607      	mov	r7, r0
 8007712:	db01      	blt.n	8007718 <_malloc_r+0x1c>
 8007714:	42a9      	cmp	r1, r5
 8007716:	d905      	bls.n	8007724 <_malloc_r+0x28>
 8007718:	230c      	movs	r3, #12
 800771a:	2600      	movs	r6, #0
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	4630      	mov	r0, r6
 8007720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007724:	4e2e      	ldr	r6, [pc, #184]	; (80077e0 <_malloc_r+0xe4>)
 8007726:	f002 ffa1 	bl	800a66c <__malloc_lock>
 800772a:	6833      	ldr	r3, [r6, #0]
 800772c:	461c      	mov	r4, r3
 800772e:	bb34      	cbnz	r4, 800777e <_malloc_r+0x82>
 8007730:	4629      	mov	r1, r5
 8007732:	4638      	mov	r0, r7
 8007734:	f7ff ffc2 	bl	80076bc <sbrk_aligned>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	4604      	mov	r4, r0
 800773c:	d14d      	bne.n	80077da <_malloc_r+0xde>
 800773e:	6834      	ldr	r4, [r6, #0]
 8007740:	4626      	mov	r6, r4
 8007742:	2e00      	cmp	r6, #0
 8007744:	d140      	bne.n	80077c8 <_malloc_r+0xcc>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	4631      	mov	r1, r6
 800774a:	4638      	mov	r0, r7
 800774c:	eb04 0803 	add.w	r8, r4, r3
 8007750:	f000 feb6 	bl	80084c0 <_sbrk_r>
 8007754:	4580      	cmp	r8, r0
 8007756:	d13a      	bne.n	80077ce <_malloc_r+0xd2>
 8007758:	6821      	ldr	r1, [r4, #0]
 800775a:	3503      	adds	r5, #3
 800775c:	1a6d      	subs	r5, r5, r1
 800775e:	f025 0503 	bic.w	r5, r5, #3
 8007762:	3508      	adds	r5, #8
 8007764:	2d0c      	cmp	r5, #12
 8007766:	bf38      	it	cc
 8007768:	250c      	movcc	r5, #12
 800776a:	4638      	mov	r0, r7
 800776c:	4629      	mov	r1, r5
 800776e:	f7ff ffa5 	bl	80076bc <sbrk_aligned>
 8007772:	3001      	adds	r0, #1
 8007774:	d02b      	beq.n	80077ce <_malloc_r+0xd2>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	442b      	add	r3, r5
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	e00e      	b.n	800779c <_malloc_r+0xa0>
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	1b52      	subs	r2, r2, r5
 8007782:	d41e      	bmi.n	80077c2 <_malloc_r+0xc6>
 8007784:	2a0b      	cmp	r2, #11
 8007786:	d916      	bls.n	80077b6 <_malloc_r+0xba>
 8007788:	1961      	adds	r1, r4, r5
 800778a:	42a3      	cmp	r3, r4
 800778c:	6025      	str	r5, [r4, #0]
 800778e:	bf18      	it	ne
 8007790:	6059      	strne	r1, [r3, #4]
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	bf08      	it	eq
 8007796:	6031      	streq	r1, [r6, #0]
 8007798:	5162      	str	r2, [r4, r5]
 800779a:	604b      	str	r3, [r1, #4]
 800779c:	4638      	mov	r0, r7
 800779e:	f104 060b 	add.w	r6, r4, #11
 80077a2:	f002 ff69 	bl	800a678 <__malloc_unlock>
 80077a6:	f026 0607 	bic.w	r6, r6, #7
 80077aa:	1d23      	adds	r3, r4, #4
 80077ac:	1af2      	subs	r2, r6, r3
 80077ae:	d0b6      	beq.n	800771e <_malloc_r+0x22>
 80077b0:	1b9b      	subs	r3, r3, r6
 80077b2:	50a3      	str	r3, [r4, r2]
 80077b4:	e7b3      	b.n	800771e <_malloc_r+0x22>
 80077b6:	6862      	ldr	r2, [r4, #4]
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	bf0c      	ite	eq
 80077bc:	6032      	streq	r2, [r6, #0]
 80077be:	605a      	strne	r2, [r3, #4]
 80077c0:	e7ec      	b.n	800779c <_malloc_r+0xa0>
 80077c2:	4623      	mov	r3, r4
 80077c4:	6864      	ldr	r4, [r4, #4]
 80077c6:	e7b2      	b.n	800772e <_malloc_r+0x32>
 80077c8:	4634      	mov	r4, r6
 80077ca:	6876      	ldr	r6, [r6, #4]
 80077cc:	e7b9      	b.n	8007742 <_malloc_r+0x46>
 80077ce:	230c      	movs	r3, #12
 80077d0:	4638      	mov	r0, r7
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	f002 ff50 	bl	800a678 <__malloc_unlock>
 80077d8:	e7a1      	b.n	800771e <_malloc_r+0x22>
 80077da:	6025      	str	r5, [r4, #0]
 80077dc:	e7de      	b.n	800779c <_malloc_r+0xa0>
 80077de:	bf00      	nop
 80077e0:	200006f8 	.word	0x200006f8

080077e4 <__cvt>:
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ea:	461f      	mov	r7, r3
 80077ec:	bfbb      	ittet	lt
 80077ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80077f2:	461f      	movlt	r7, r3
 80077f4:	2300      	movge	r3, #0
 80077f6:	232d      	movlt	r3, #45	; 0x2d
 80077f8:	b088      	sub	sp, #32
 80077fa:	4614      	mov	r4, r2
 80077fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007800:	7013      	strb	r3, [r2, #0]
 8007802:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007804:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007808:	f023 0820 	bic.w	r8, r3, #32
 800780c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007810:	d005      	beq.n	800781e <__cvt+0x3a>
 8007812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007816:	d100      	bne.n	800781a <__cvt+0x36>
 8007818:	3501      	adds	r5, #1
 800781a:	2302      	movs	r3, #2
 800781c:	e000      	b.n	8007820 <__cvt+0x3c>
 800781e:	2303      	movs	r3, #3
 8007820:	aa07      	add	r2, sp, #28
 8007822:	9204      	str	r2, [sp, #16]
 8007824:	aa06      	add	r2, sp, #24
 8007826:	e9cd a202 	strd	sl, r2, [sp, #8]
 800782a:	e9cd 3500 	strd	r3, r5, [sp]
 800782e:	4622      	mov	r2, r4
 8007830:	463b      	mov	r3, r7
 8007832:	f001 fd95 	bl	8009360 <_dtoa_r>
 8007836:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800783a:	4606      	mov	r6, r0
 800783c:	d102      	bne.n	8007844 <__cvt+0x60>
 800783e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007840:	07db      	lsls	r3, r3, #31
 8007842:	d522      	bpl.n	800788a <__cvt+0xa6>
 8007844:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007848:	eb06 0905 	add.w	r9, r6, r5
 800784c:	d110      	bne.n	8007870 <__cvt+0x8c>
 800784e:	7833      	ldrb	r3, [r6, #0]
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	d10a      	bne.n	800786a <__cvt+0x86>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	4620      	mov	r0, r4
 800785a:	4639      	mov	r1, r7
 800785c:	f7f9 f910 	bl	8000a80 <__aeabi_dcmpeq>
 8007860:	b918      	cbnz	r0, 800786a <__cvt+0x86>
 8007862:	f1c5 0501 	rsb	r5, r5, #1
 8007866:	f8ca 5000 	str.w	r5, [sl]
 800786a:	f8da 3000 	ldr.w	r3, [sl]
 800786e:	4499      	add	r9, r3
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	4639      	mov	r1, r7
 8007878:	f7f9 f902 	bl	8000a80 <__aeabi_dcmpeq>
 800787c:	b108      	cbz	r0, 8007882 <__cvt+0x9e>
 800787e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007882:	2230      	movs	r2, #48	; 0x30
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	454b      	cmp	r3, r9
 8007888:	d307      	bcc.n	800789a <__cvt+0xb6>
 800788a:	4630      	mov	r0, r6
 800788c:	9b07      	ldr	r3, [sp, #28]
 800788e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	b008      	add	sp, #32
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	1c59      	adds	r1, r3, #1
 800789c:	9107      	str	r1, [sp, #28]
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e7f0      	b.n	8007884 <__cvt+0xa0>

080078a2 <__exponent>:
 80078a2:	4603      	mov	r3, r0
 80078a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078a6:	2900      	cmp	r1, #0
 80078a8:	f803 2b02 	strb.w	r2, [r3], #2
 80078ac:	bfb6      	itet	lt
 80078ae:	222d      	movlt	r2, #45	; 0x2d
 80078b0:	222b      	movge	r2, #43	; 0x2b
 80078b2:	4249      	neglt	r1, r1
 80078b4:	2909      	cmp	r1, #9
 80078b6:	7042      	strb	r2, [r0, #1]
 80078b8:	dd2b      	ble.n	8007912 <__exponent+0x70>
 80078ba:	f10d 0407 	add.w	r4, sp, #7
 80078be:	46a4      	mov	ip, r4
 80078c0:	270a      	movs	r7, #10
 80078c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80078c6:	460a      	mov	r2, r1
 80078c8:	46a6      	mov	lr, r4
 80078ca:	fb07 1516 	mls	r5, r7, r6, r1
 80078ce:	2a63      	cmp	r2, #99	; 0x63
 80078d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80078d4:	4631      	mov	r1, r6
 80078d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078de:	dcf0      	bgt.n	80078c2 <__exponent+0x20>
 80078e0:	3130      	adds	r1, #48	; 0x30
 80078e2:	f1ae 0502 	sub.w	r5, lr, #2
 80078e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078ea:	4629      	mov	r1, r5
 80078ec:	1c44      	adds	r4, r0, #1
 80078ee:	4561      	cmp	r1, ip
 80078f0:	d30a      	bcc.n	8007908 <__exponent+0x66>
 80078f2:	f10d 0209 	add.w	r2, sp, #9
 80078f6:	eba2 020e 	sub.w	r2, r2, lr
 80078fa:	4565      	cmp	r5, ip
 80078fc:	bf88      	it	hi
 80078fe:	2200      	movhi	r2, #0
 8007900:	4413      	add	r3, r2
 8007902:	1a18      	subs	r0, r3, r0
 8007904:	b003      	add	sp, #12
 8007906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007908:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007910:	e7ed      	b.n	80078ee <__exponent+0x4c>
 8007912:	2330      	movs	r3, #48	; 0x30
 8007914:	3130      	adds	r1, #48	; 0x30
 8007916:	7083      	strb	r3, [r0, #2]
 8007918:	70c1      	strb	r1, [r0, #3]
 800791a:	1d03      	adds	r3, r0, #4
 800791c:	e7f1      	b.n	8007902 <__exponent+0x60>
	...

08007920 <_printf_float>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	b091      	sub	sp, #68	; 0x44
 8007926:	460c      	mov	r4, r1
 8007928:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800792c:	4616      	mov	r6, r2
 800792e:	461f      	mov	r7, r3
 8007930:	4605      	mov	r5, r0
 8007932:	f002 fe69 	bl	800a608 <_localeconv_r>
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	f7f8 fc74 	bl	8000228 <strlen>
 8007940:	2300      	movs	r3, #0
 8007942:	930e      	str	r3, [sp, #56]	; 0x38
 8007944:	f8d8 3000 	ldr.w	r3, [r8]
 8007948:	900a      	str	r0, [sp, #40]	; 0x28
 800794a:	3307      	adds	r3, #7
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	f103 0208 	add.w	r2, r3, #8
 8007954:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007958:	f8d4 b000 	ldr.w	fp, [r4]
 800795c:	f8c8 2000 	str.w	r2, [r8]
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007968:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800796c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007970:	930b      	str	r3, [sp, #44]	; 0x2c
 8007972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007976:	4640      	mov	r0, r8
 8007978:	4b9c      	ldr	r3, [pc, #624]	; (8007bec <_printf_float+0x2cc>)
 800797a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800797c:	f7f9 f8b2 	bl	8000ae4 <__aeabi_dcmpun>
 8007980:	bb70      	cbnz	r0, 80079e0 <_printf_float+0xc0>
 8007982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007986:	4640      	mov	r0, r8
 8007988:	4b98      	ldr	r3, [pc, #608]	; (8007bec <_printf_float+0x2cc>)
 800798a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800798c:	f7f9 f88c 	bl	8000aa8 <__aeabi_dcmple>
 8007990:	bb30      	cbnz	r0, 80079e0 <_printf_float+0xc0>
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	4640      	mov	r0, r8
 8007998:	4651      	mov	r1, sl
 800799a:	f7f9 f87b 	bl	8000a94 <__aeabi_dcmplt>
 800799e:	b110      	cbz	r0, 80079a6 <_printf_float+0x86>
 80079a0:	232d      	movs	r3, #45	; 0x2d
 80079a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a6:	4b92      	ldr	r3, [pc, #584]	; (8007bf0 <_printf_float+0x2d0>)
 80079a8:	4892      	ldr	r0, [pc, #584]	; (8007bf4 <_printf_float+0x2d4>)
 80079aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80079ae:	bf94      	ite	ls
 80079b0:	4698      	movls	r8, r3
 80079b2:	4680      	movhi	r8, r0
 80079b4:	2303      	movs	r3, #3
 80079b6:	f04f 0a00 	mov.w	sl, #0
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	f02b 0304 	bic.w	r3, fp, #4
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	4633      	mov	r3, r6
 80079c4:	4621      	mov	r1, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	9700      	str	r7, [sp, #0]
 80079ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80079cc:	f000 f9d4 	bl	8007d78 <_printf_common>
 80079d0:	3001      	adds	r0, #1
 80079d2:	f040 8090 	bne.w	8007af6 <_printf_float+0x1d6>
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079da:	b011      	add	sp, #68	; 0x44
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e0:	4642      	mov	r2, r8
 80079e2:	4653      	mov	r3, sl
 80079e4:	4640      	mov	r0, r8
 80079e6:	4651      	mov	r1, sl
 80079e8:	f7f9 f87c 	bl	8000ae4 <__aeabi_dcmpun>
 80079ec:	b148      	cbz	r0, 8007a02 <_printf_float+0xe2>
 80079ee:	f1ba 0f00 	cmp.w	sl, #0
 80079f2:	bfb8      	it	lt
 80079f4:	232d      	movlt	r3, #45	; 0x2d
 80079f6:	4880      	ldr	r0, [pc, #512]	; (8007bf8 <_printf_float+0x2d8>)
 80079f8:	bfb8      	it	lt
 80079fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079fe:	4b7f      	ldr	r3, [pc, #508]	; (8007bfc <_printf_float+0x2dc>)
 8007a00:	e7d3      	b.n	80079aa <_printf_float+0x8a>
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	d142      	bne.n	8007a92 <_printf_float+0x172>
 8007a0c:	2306      	movs	r3, #6
 8007a0e:	6063      	str	r3, [r4, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	9206      	str	r2, [sp, #24]
 8007a14:	aa0e      	add	r2, sp, #56	; 0x38
 8007a16:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007a1a:	aa0d      	add	r2, sp, #52	; 0x34
 8007a1c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007a20:	9203      	str	r2, [sp, #12]
 8007a22:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007a26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	4642      	mov	r2, r8
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4628      	mov	r0, r5
 8007a34:	4653      	mov	r3, sl
 8007a36:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a38:	f7ff fed4 	bl	80077e4 <__cvt>
 8007a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a3e:	4680      	mov	r8, r0
 8007a40:	2947      	cmp	r1, #71	; 0x47
 8007a42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a44:	d108      	bne.n	8007a58 <_printf_float+0x138>
 8007a46:	1cc8      	adds	r0, r1, #3
 8007a48:	db02      	blt.n	8007a50 <_printf_float+0x130>
 8007a4a:	6863      	ldr	r3, [r4, #4]
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	dd40      	ble.n	8007ad2 <_printf_float+0x1b2>
 8007a50:	f1a9 0902 	sub.w	r9, r9, #2
 8007a54:	fa5f f989 	uxtb.w	r9, r9
 8007a58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a5c:	d81f      	bhi.n	8007a9e <_printf_float+0x17e>
 8007a5e:	464a      	mov	r2, r9
 8007a60:	3901      	subs	r1, #1
 8007a62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a66:	910d      	str	r1, [sp, #52]	; 0x34
 8007a68:	f7ff ff1b 	bl	80078a2 <__exponent>
 8007a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a6e:	4682      	mov	sl, r0
 8007a70:	1813      	adds	r3, r2, r0
 8007a72:	2a01      	cmp	r2, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	dc02      	bgt.n	8007a7e <_printf_float+0x15e>
 8007a78:	6822      	ldr	r2, [r4, #0]
 8007a7a:	07d2      	lsls	r2, r2, #31
 8007a7c:	d501      	bpl.n	8007a82 <_printf_float+0x162>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	6123      	str	r3, [r4, #16]
 8007a82:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d09b      	beq.n	80079c2 <_printf_float+0xa2>
 8007a8a:	232d      	movs	r3, #45	; 0x2d
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a90:	e797      	b.n	80079c2 <_printf_float+0xa2>
 8007a92:	2947      	cmp	r1, #71	; 0x47
 8007a94:	d1bc      	bne.n	8007a10 <_printf_float+0xf0>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1ba      	bne.n	8007a10 <_printf_float+0xf0>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7b7      	b.n	8007a0e <_printf_float+0xee>
 8007a9e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007aa2:	d118      	bne.n	8007ad6 <_printf_float+0x1b6>
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	dd0b      	ble.n	8007ac2 <_printf_float+0x1a2>
 8007aaa:	6121      	str	r1, [r4, #16]
 8007aac:	b913      	cbnz	r3, 8007ab4 <_printf_float+0x194>
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	07d0      	lsls	r0, r2, #31
 8007ab2:	d502      	bpl.n	8007aba <_printf_float+0x19a>
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	440b      	add	r3, r1
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	f04f 0a00 	mov.w	sl, #0
 8007abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ac0:	e7df      	b.n	8007a82 <_printf_float+0x162>
 8007ac2:	b913      	cbnz	r3, 8007aca <_printf_float+0x1aa>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	07d2      	lsls	r2, r2, #31
 8007ac8:	d501      	bpl.n	8007ace <_printf_float+0x1ae>
 8007aca:	3302      	adds	r3, #2
 8007acc:	e7f4      	b.n	8007ab8 <_printf_float+0x198>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e7f2      	b.n	8007ab8 <_printf_float+0x198>
 8007ad2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	db05      	blt.n	8007ae8 <_printf_float+0x1c8>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	6121      	str	r1, [r4, #16]
 8007ae0:	07d8      	lsls	r0, r3, #31
 8007ae2:	d5ea      	bpl.n	8007aba <_printf_float+0x19a>
 8007ae4:	1c4b      	adds	r3, r1, #1
 8007ae6:	e7e7      	b.n	8007ab8 <_printf_float+0x198>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bfcc      	ite	gt
 8007aec:	2201      	movgt	r2, #1
 8007aee:	f1c1 0202 	rsble	r2, r1, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	e7e0      	b.n	8007ab8 <_printf_float+0x198>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	055a      	lsls	r2, r3, #21
 8007afa:	d407      	bmi.n	8007b0c <_printf_float+0x1ec>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	4642      	mov	r2, r8
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	d12b      	bne.n	8007b62 <_printf_float+0x242>
 8007b0a:	e764      	b.n	80079d6 <_printf_float+0xb6>
 8007b0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b10:	f240 80dd 	bls.w	8007cce <_printf_float+0x3ae>
 8007b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 ffb0 	bl	8000a80 <__aeabi_dcmpeq>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d033      	beq.n	8007b8c <_printf_float+0x26c>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	4a35      	ldr	r2, [pc, #212]	; (8007c00 <_printf_float+0x2e0>)
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af51 	beq.w	80079d6 <_printf_float+0xb6>
 8007b34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	db02      	blt.n	8007b42 <_printf_float+0x222>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	07d8      	lsls	r0, r3, #31
 8007b40:	d50f      	bpl.n	8007b62 <_printf_float+0x242>
 8007b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f af42 	beq.w	80079d6 <_printf_float+0xb6>
 8007b52:	f04f 0800 	mov.w	r8, #0
 8007b56:	f104 091a 	add.w	r9, r4, #26
 8007b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4543      	cmp	r3, r8
 8007b60:	dc09      	bgt.n	8007b76 <_printf_float+0x256>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	079b      	lsls	r3, r3, #30
 8007b66:	f100 8102 	bmi.w	8007d6e <_printf_float+0x44e>
 8007b6a:	68e0      	ldr	r0, [r4, #12]
 8007b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b6e:	4298      	cmp	r0, r3
 8007b70:	bfb8      	it	lt
 8007b72:	4618      	movlt	r0, r3
 8007b74:	e731      	b.n	80079da <_printf_float+0xba>
 8007b76:	2301      	movs	r3, #1
 8007b78:	464a      	mov	r2, r9
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f af28 	beq.w	80079d6 <_printf_float+0xb6>
 8007b86:	f108 0801 	add.w	r8, r8, #1
 8007b8a:	e7e6      	b.n	8007b5a <_printf_float+0x23a>
 8007b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dc38      	bgt.n	8007c04 <_printf_float+0x2e4>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <_printf_float+0x2e0>)
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f af1a 	beq.w	80079d6 <_printf_float+0xb6>
 8007ba2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	d102      	bne.n	8007bb0 <_printf_float+0x290>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	d5d8      	bpl.n	8007b62 <_printf_float+0x242>
 8007bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af0b 	beq.w	80079d6 <_printf_float+0xb6>
 8007bc0:	f04f 0900 	mov.w	r9, #0
 8007bc4:	f104 0a1a 	add.w	sl, r4, #26
 8007bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bca:	425b      	negs	r3, r3
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	dc01      	bgt.n	8007bd4 <_printf_float+0x2b4>
 8007bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd2:	e794      	b.n	8007afe <_printf_float+0x1de>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4652      	mov	r2, sl
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f aef9 	beq.w	80079d6 <_printf_float+0xb6>
 8007be4:	f109 0901 	add.w	r9, r9, #1
 8007be8:	e7ee      	b.n	8007bc8 <_printf_float+0x2a8>
 8007bea:	bf00      	nop
 8007bec:	7fefffff 	.word	0x7fefffff
 8007bf0:	0800dab8 	.word	0x0800dab8
 8007bf4:	0800dabc 	.word	0x0800dabc
 8007bf8:	0800dac4 	.word	0x0800dac4
 8007bfc:	0800dac0 	.word	0x0800dac0
 8007c00:	0800dac8 	.word	0x0800dac8
 8007c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	bfa8      	it	ge
 8007c0c:	461a      	movge	r2, r3
 8007c0e:	2a00      	cmp	r2, #0
 8007c10:	4691      	mov	r9, r2
 8007c12:	dc37      	bgt.n	8007c84 <_printf_float+0x364>
 8007c14:	f04f 0b00 	mov.w	fp, #0
 8007c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c1c:	f104 021a 	add.w	r2, r4, #26
 8007c20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c24:	ebaa 0309 	sub.w	r3, sl, r9
 8007c28:	455b      	cmp	r3, fp
 8007c2a:	dc33      	bgt.n	8007c94 <_printf_float+0x374>
 8007c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c30:	429a      	cmp	r2, r3
 8007c32:	db3b      	blt.n	8007cac <_printf_float+0x38c>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d438      	bmi.n	8007cac <_printf_float+0x38c>
 8007c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c3e:	eba3 020a 	sub.w	r2, r3, sl
 8007c42:	eba3 0901 	sub.w	r9, r3, r1
 8007c46:	4591      	cmp	r9, r2
 8007c48:	bfa8      	it	ge
 8007c4a:	4691      	movge	r9, r2
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	dc34      	bgt.n	8007cbc <_printf_float+0x39c>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c5a:	f104 0a1a 	add.w	sl, r4, #26
 8007c5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	eba3 0309 	sub.w	r3, r3, r9
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	f77f af7a 	ble.w	8007b62 <_printf_float+0x242>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4652      	mov	r2, sl
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f aeac 	beq.w	80079d6 <_printf_float+0xb6>
 8007c7e:	f108 0801 	add.w	r8, r8, #1
 8007c82:	e7ec      	b.n	8007c5e <_printf_float+0x33e>
 8007c84:	4613      	mov	r3, r2
 8007c86:	4631      	mov	r1, r6
 8007c88:	4642      	mov	r2, r8
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d1c0      	bne.n	8007c14 <_printf_float+0x2f4>
 8007c92:	e6a0      	b.n	80079d6 <_printf_float+0xb6>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4631      	mov	r1, r6
 8007c98:	4628      	mov	r0, r5
 8007c9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f ae99 	beq.w	80079d6 <_printf_float+0xb6>
 8007ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ca6:	f10b 0b01 	add.w	fp, fp, #1
 8007caa:	e7b9      	b.n	8007c20 <_printf_float+0x300>
 8007cac:	4631      	mov	r1, r6
 8007cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d1bf      	bne.n	8007c3a <_printf_float+0x31a>
 8007cba:	e68c      	b.n	80079d6 <_printf_float+0xb6>
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	eb08 020a 	add.w	r2, r8, sl
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d1c2      	bne.n	8007c52 <_printf_float+0x332>
 8007ccc:	e683      	b.n	80079d6 <_printf_float+0xb6>
 8007cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cd0:	2a01      	cmp	r2, #1
 8007cd2:	dc01      	bgt.n	8007cd8 <_printf_float+0x3b8>
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d537      	bpl.n	8007d48 <_printf_float+0x428>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4642      	mov	r2, r8
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f ae77 	beq.w	80079d6 <_printf_float+0xb6>
 8007ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f ae6f 	beq.w	80079d6 <_printf_float+0xb6>
 8007cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f7f8 febe 	bl	8000a80 <__aeabi_dcmpeq>
 8007d04:	b9d8      	cbnz	r0, 8007d3e <_printf_float+0x41e>
 8007d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d08:	f108 0201 	add.w	r2, r8, #1
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	d10e      	bne.n	8007d36 <_printf_float+0x416>
 8007d18:	e65d      	b.n	80079d6 <_printf_float+0xb6>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	464a      	mov	r2, r9
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae56 	beq.w	80079d6 <_printf_float+0xb6>
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d30:	3b01      	subs	r3, #1
 8007d32:	4543      	cmp	r3, r8
 8007d34:	dcf1      	bgt.n	8007d1a <_printf_float+0x3fa>
 8007d36:	4653      	mov	r3, sl
 8007d38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d3c:	e6e0      	b.n	8007b00 <_printf_float+0x1e0>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	f104 091a 	add.w	r9, r4, #26
 8007d46:	e7f2      	b.n	8007d2e <_printf_float+0x40e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	e7df      	b.n	8007d0e <_printf_float+0x3ee>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	464a      	mov	r2, r9
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f43f ae3c 	beq.w	80079d6 <_printf_float+0xb6>
 8007d5e:	f108 0801 	add.w	r8, r8, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	dcf0      	bgt.n	8007d4e <_printf_float+0x42e>
 8007d6c:	e6fd      	b.n	8007b6a <_printf_float+0x24a>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0919 	add.w	r9, r4, #25
 8007d76:	e7f4      	b.n	8007d62 <_printf_float+0x442>

08007d78 <_printf_common>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	4699      	mov	r9, r3
 8007d80:	688a      	ldr	r2, [r1, #8]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	4607      	mov	r7, r0
 8007d86:	4293      	cmp	r3, r2
 8007d88:	bfb8      	it	lt
 8007d8a:	4613      	movlt	r3, r2
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d92:	460c      	mov	r4, r1
 8007d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d98:	b10a      	cbz	r2, 8007d9e <_printf_common+0x26>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	0699      	lsls	r1, r3, #26
 8007da2:	bf42      	ittt	mi
 8007da4:	6833      	ldrmi	r3, [r6, #0]
 8007da6:	3302      	addmi	r3, #2
 8007da8:	6033      	strmi	r3, [r6, #0]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d106      	bne.n	8007dc0 <_printf_common+0x48>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dc28      	bgt.n	8007e12 <_printf_common+0x9a>
 8007dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dc4:	1e13      	subs	r3, r2, #0
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	bf18      	it	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d42d      	bmi.n	8007e2c <_printf_common+0xb4>
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd8:	47c0      	blx	r8
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d020      	beq.n	8007e20 <_printf_common+0xa8>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	68e5      	ldr	r5, [r4, #12]
 8007de2:	f003 0306 	and.w	r3, r3, #6
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	bf18      	it	ne
 8007dea:	2500      	movne	r5, #0
 8007dec:	6832      	ldr	r2, [r6, #0]
 8007dee:	f04f 0600 	mov.w	r6, #0
 8007df2:	68a3      	ldr	r3, [r4, #8]
 8007df4:	bf08      	it	eq
 8007df6:	1aad      	subeq	r5, r5, r2
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	bf08      	it	eq
 8007dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bfc4      	itt	gt
 8007e04:	1a9b      	subgt	r3, r3, r2
 8007e06:	18ed      	addgt	r5, r5, r3
 8007e08:	341a      	adds	r4, #26
 8007e0a:	42b5      	cmp	r5, r6
 8007e0c:	d11a      	bne.n	8007e44 <_printf_common+0xcc>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e008      	b.n	8007e24 <_printf_common+0xac>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4652      	mov	r2, sl
 8007e16:	4649      	mov	r1, r9
 8007e18:	4638      	mov	r0, r7
 8007e1a:	47c0      	blx	r8
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d103      	bne.n	8007e28 <_printf_common+0xb0>
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	3501      	adds	r5, #1
 8007e2a:	e7c4      	b.n	8007db6 <_printf_common+0x3e>
 8007e2c:	2030      	movs	r0, #48	; 0x30
 8007e2e:	18e1      	adds	r1, r4, r3
 8007e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3a:	4422      	add	r2, r4
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e42:	e7c5      	b.n	8007dd0 <_printf_common+0x58>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4622      	mov	r2, r4
 8007e48:	4649      	mov	r1, r9
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c0      	blx	r8
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d0e6      	beq.n	8007e20 <_printf_common+0xa8>
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7d9      	b.n	8007e0a <_printf_common+0x92>
	...

08007e58 <_printf_i>:
 8007e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	7e0f      	ldrb	r7, [r1, #24]
 8007e5e:	4691      	mov	r9, r2
 8007e60:	2f78      	cmp	r7, #120	; 0x78
 8007e62:	4680      	mov	r8, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	469a      	mov	sl, r3
 8007e68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e6e:	d807      	bhi.n	8007e80 <_printf_i+0x28>
 8007e70:	2f62      	cmp	r7, #98	; 0x62
 8007e72:	d80a      	bhi.n	8007e8a <_printf_i+0x32>
 8007e74:	2f00      	cmp	r7, #0
 8007e76:	f000 80d9 	beq.w	800802c <_printf_i+0x1d4>
 8007e7a:	2f58      	cmp	r7, #88	; 0x58
 8007e7c:	f000 80a4 	beq.w	8007fc8 <_printf_i+0x170>
 8007e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e88:	e03a      	b.n	8007f00 <_printf_i+0xa8>
 8007e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e8e:	2b15      	cmp	r3, #21
 8007e90:	d8f6      	bhi.n	8007e80 <_printf_i+0x28>
 8007e92:	a101      	add	r1, pc, #4	; (adr r1, 8007e98 <_printf_i+0x40>)
 8007e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007f05 	.word	0x08007f05
 8007ea0:	08007e81 	.word	0x08007e81
 8007ea4:	08007e81 	.word	0x08007e81
 8007ea8:	08007e81 	.word	0x08007e81
 8007eac:	08007e81 	.word	0x08007e81
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	08007e81 	.word	0x08007e81
 8007eb8:	08007e81 	.word	0x08007e81
 8007ebc:	08007e81 	.word	0x08007e81
 8007ec0:	08007e81 	.word	0x08007e81
 8007ec4:	08008013 	.word	0x08008013
 8007ec8:	08007f35 	.word	0x08007f35
 8007ecc:	08007ff5 	.word	0x08007ff5
 8007ed0:	08007e81 	.word	0x08007e81
 8007ed4:	08007e81 	.word	0x08007e81
 8007ed8:	08008035 	.word	0x08008035
 8007edc:	08007e81 	.word	0x08007e81
 8007ee0:	08007f35 	.word	0x08007f35
 8007ee4:	08007e81 	.word	0x08007e81
 8007ee8:	08007e81 	.word	0x08007e81
 8007eec:	08007ffd 	.word	0x08007ffd
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	1d1a      	adds	r2, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	602a      	str	r2, [r5, #0]
 8007ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f00:	2301      	movs	r3, #1
 8007f02:	e0a4      	b.n	800804e <_printf_i+0x1f6>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	6829      	ldr	r1, [r5, #0]
 8007f08:	0606      	lsls	r6, r0, #24
 8007f0a:	f101 0304 	add.w	r3, r1, #4
 8007f0e:	d50a      	bpl.n	8007f26 <_printf_i+0xce>
 8007f10:	680e      	ldr	r6, [r1, #0]
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	da03      	bge.n	8007f20 <_printf_i+0xc8>
 8007f18:	232d      	movs	r3, #45	; 0x2d
 8007f1a:	4276      	negs	r6, r6
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	230a      	movs	r3, #10
 8007f22:	485e      	ldr	r0, [pc, #376]	; (800809c <_printf_i+0x244>)
 8007f24:	e019      	b.n	8007f5a <_printf_i+0x102>
 8007f26:	680e      	ldr	r6, [r1, #0]
 8007f28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	bf18      	it	ne
 8007f30:	b236      	sxthne	r6, r6
 8007f32:	e7ef      	b.n	8007f14 <_printf_i+0xbc>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	6820      	ldr	r0, [r4, #0]
 8007f38:	1d19      	adds	r1, r3, #4
 8007f3a:	6029      	str	r1, [r5, #0]
 8007f3c:	0601      	lsls	r1, r0, #24
 8007f3e:	d501      	bpl.n	8007f44 <_printf_i+0xec>
 8007f40:	681e      	ldr	r6, [r3, #0]
 8007f42:	e002      	b.n	8007f4a <_printf_i+0xf2>
 8007f44:	0646      	lsls	r6, r0, #25
 8007f46:	d5fb      	bpl.n	8007f40 <_printf_i+0xe8>
 8007f48:	881e      	ldrh	r6, [r3, #0]
 8007f4a:	2f6f      	cmp	r7, #111	; 0x6f
 8007f4c:	bf0c      	ite	eq
 8007f4e:	2308      	moveq	r3, #8
 8007f50:	230a      	movne	r3, #10
 8007f52:	4852      	ldr	r0, [pc, #328]	; (800809c <_printf_i+0x244>)
 8007f54:	2100      	movs	r1, #0
 8007f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f5a:	6865      	ldr	r5, [r4, #4]
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	bfa8      	it	ge
 8007f60:	6821      	ldrge	r1, [r4, #0]
 8007f62:	60a5      	str	r5, [r4, #8]
 8007f64:	bfa4      	itt	ge
 8007f66:	f021 0104 	bicge.w	r1, r1, #4
 8007f6a:	6021      	strge	r1, [r4, #0]
 8007f6c:	b90e      	cbnz	r6, 8007f72 <_printf_i+0x11a>
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	d04d      	beq.n	800800e <_printf_i+0x1b6>
 8007f72:	4615      	mov	r5, r2
 8007f74:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f78:	fb03 6711 	mls	r7, r3, r1, r6
 8007f7c:	5dc7      	ldrb	r7, [r0, r7]
 8007f7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f82:	4637      	mov	r7, r6
 8007f84:	42bb      	cmp	r3, r7
 8007f86:	460e      	mov	r6, r1
 8007f88:	d9f4      	bls.n	8007f74 <_printf_i+0x11c>
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d10b      	bne.n	8007fa6 <_printf_i+0x14e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	07de      	lsls	r6, r3, #31
 8007f92:	d508      	bpl.n	8007fa6 <_printf_i+0x14e>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	bfde      	ittt	le
 8007f9c:	2330      	movle	r3, #48	; 0x30
 8007f9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fa2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fa6:	1b52      	subs	r2, r2, r5
 8007fa8:	6122      	str	r2, [r4, #16]
 8007faa:	464b      	mov	r3, r9
 8007fac:	4621      	mov	r1, r4
 8007fae:	4640      	mov	r0, r8
 8007fb0:	f8cd a000 	str.w	sl, [sp]
 8007fb4:	aa03      	add	r2, sp, #12
 8007fb6:	f7ff fedf 	bl	8007d78 <_printf_common>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d14c      	bne.n	8008058 <_printf_i+0x200>
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc2:	b004      	add	sp, #16
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	4834      	ldr	r0, [pc, #208]	; (800809c <_printf_i+0x244>)
 8007fca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fce:	6829      	ldr	r1, [r5, #0]
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fd6:	6029      	str	r1, [r5, #0]
 8007fd8:	061d      	lsls	r5, r3, #24
 8007fda:	d514      	bpl.n	8008006 <_printf_i+0x1ae>
 8007fdc:	07df      	lsls	r7, r3, #31
 8007fde:	bf44      	itt	mi
 8007fe0:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe4:	6023      	strmi	r3, [r4, #0]
 8007fe6:	b91e      	cbnz	r6, 8007ff0 <_printf_i+0x198>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	f023 0320 	bic.w	r3, r3, #32
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	e7af      	b.n	8007f54 <_printf_i+0xfc>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	f043 0320 	orr.w	r3, r3, #32
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	2378      	movs	r3, #120	; 0x78
 8007ffe:	4828      	ldr	r0, [pc, #160]	; (80080a0 <_printf_i+0x248>)
 8008000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008004:	e7e3      	b.n	8007fce <_printf_i+0x176>
 8008006:	0659      	lsls	r1, r3, #25
 8008008:	bf48      	it	mi
 800800a:	b2b6      	uxthmi	r6, r6
 800800c:	e7e6      	b.n	8007fdc <_printf_i+0x184>
 800800e:	4615      	mov	r5, r2
 8008010:	e7bb      	b.n	8007f8a <_printf_i+0x132>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	6826      	ldr	r6, [r4, #0]
 8008016:	1d18      	adds	r0, r3, #4
 8008018:	6961      	ldr	r1, [r4, #20]
 800801a:	6028      	str	r0, [r5, #0]
 800801c:	0635      	lsls	r5, r6, #24
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	d501      	bpl.n	8008026 <_printf_i+0x1ce>
 8008022:	6019      	str	r1, [r3, #0]
 8008024:	e002      	b.n	800802c <_printf_i+0x1d4>
 8008026:	0670      	lsls	r0, r6, #25
 8008028:	d5fb      	bpl.n	8008022 <_printf_i+0x1ca>
 800802a:	8019      	strh	r1, [r3, #0]
 800802c:	2300      	movs	r3, #0
 800802e:	4615      	mov	r5, r2
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	e7ba      	b.n	8007faa <_printf_i+0x152>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	2100      	movs	r1, #0
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	602a      	str	r2, [r5, #0]
 800803c:	681d      	ldr	r5, [r3, #0]
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	4628      	mov	r0, r5
 8008042:	f002 faf7 	bl	800a634 <memchr>
 8008046:	b108      	cbz	r0, 800804c <_printf_i+0x1f4>
 8008048:	1b40      	subs	r0, r0, r5
 800804a:	6060      	str	r0, [r4, #4]
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	2300      	movs	r3, #0
 8008052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008056:	e7a8      	b.n	8007faa <_printf_i+0x152>
 8008058:	462a      	mov	r2, r5
 800805a:	4649      	mov	r1, r9
 800805c:	4640      	mov	r0, r8
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	47d0      	blx	sl
 8008062:	3001      	adds	r0, #1
 8008064:	d0ab      	beq.n	8007fbe <_printf_i+0x166>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	079b      	lsls	r3, r3, #30
 800806a:	d413      	bmi.n	8008094 <_printf_i+0x23c>
 800806c:	68e0      	ldr	r0, [r4, #12]
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	4298      	cmp	r0, r3
 8008072:	bfb8      	it	lt
 8008074:	4618      	movlt	r0, r3
 8008076:	e7a4      	b.n	8007fc2 <_printf_i+0x16a>
 8008078:	2301      	movs	r3, #1
 800807a:	4632      	mov	r2, r6
 800807c:	4649      	mov	r1, r9
 800807e:	4640      	mov	r0, r8
 8008080:	47d0      	blx	sl
 8008082:	3001      	adds	r0, #1
 8008084:	d09b      	beq.n	8007fbe <_printf_i+0x166>
 8008086:	3501      	adds	r5, #1
 8008088:	68e3      	ldr	r3, [r4, #12]
 800808a:	9903      	ldr	r1, [sp, #12]
 800808c:	1a5b      	subs	r3, r3, r1
 800808e:	42ab      	cmp	r3, r5
 8008090:	dcf2      	bgt.n	8008078 <_printf_i+0x220>
 8008092:	e7eb      	b.n	800806c <_printf_i+0x214>
 8008094:	2500      	movs	r5, #0
 8008096:	f104 0619 	add.w	r6, r4, #25
 800809a:	e7f5      	b.n	8008088 <_printf_i+0x230>
 800809c:	0800daca 	.word	0x0800daca
 80080a0:	0800dadb 	.word	0x0800dadb

080080a4 <_scanf_float>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	b087      	sub	sp, #28
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	688b      	ldr	r3, [r1, #8]
 80080ae:	4617      	mov	r7, r2
 80080b0:	1e5a      	subs	r2, r3, #1
 80080b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80080b6:	bf85      	ittet	hi
 80080b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080bc:	195b      	addhi	r3, r3, r5
 80080be:	2300      	movls	r3, #0
 80080c0:	9302      	strhi	r3, [sp, #8]
 80080c2:	bf88      	it	hi
 80080c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80080c8:	468b      	mov	fp, r1
 80080ca:	f04f 0500 	mov.w	r5, #0
 80080ce:	bf8c      	ite	hi
 80080d0:	608b      	strhi	r3, [r1, #8]
 80080d2:	9302      	strls	r3, [sp, #8]
 80080d4:	680b      	ldr	r3, [r1, #0]
 80080d6:	4680      	mov	r8, r0
 80080d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80080dc:	f84b 3b1c 	str.w	r3, [fp], #28
 80080e0:	460c      	mov	r4, r1
 80080e2:	465e      	mov	r6, fp
 80080e4:	46aa      	mov	sl, r5
 80080e6:	46a9      	mov	r9, r5
 80080e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080ec:	9501      	str	r5, [sp, #4]
 80080ee:	68a2      	ldr	r2, [r4, #8]
 80080f0:	b152      	cbz	r2, 8008108 <_scanf_float+0x64>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b4e      	cmp	r3, #78	; 0x4e
 80080f8:	d864      	bhi.n	80081c4 <_scanf_float+0x120>
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d83c      	bhi.n	8008178 <_scanf_float+0xd4>
 80080fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008102:	b2c8      	uxtb	r0, r1
 8008104:	280e      	cmp	r0, #14
 8008106:	d93a      	bls.n	800817e <_scanf_float+0xda>
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	d003      	beq.n	8008116 <_scanf_float+0x72>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800811a:	f1ba 0f01 	cmp.w	sl, #1
 800811e:	f200 8113 	bhi.w	8008348 <_scanf_float+0x2a4>
 8008122:	455e      	cmp	r6, fp
 8008124:	f200 8105 	bhi.w	8008332 <_scanf_float+0x28e>
 8008128:	2501      	movs	r5, #1
 800812a:	4628      	mov	r0, r5
 800812c:	b007      	add	sp, #28
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008136:	2a0d      	cmp	r2, #13
 8008138:	d8e6      	bhi.n	8008108 <_scanf_float+0x64>
 800813a:	a101      	add	r1, pc, #4	; (adr r1, 8008140 <_scanf_float+0x9c>)
 800813c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008140:	0800827f 	.word	0x0800827f
 8008144:	08008109 	.word	0x08008109
 8008148:	08008109 	.word	0x08008109
 800814c:	08008109 	.word	0x08008109
 8008150:	080082df 	.word	0x080082df
 8008154:	080082b7 	.word	0x080082b7
 8008158:	08008109 	.word	0x08008109
 800815c:	08008109 	.word	0x08008109
 8008160:	0800828d 	.word	0x0800828d
 8008164:	08008109 	.word	0x08008109
 8008168:	08008109 	.word	0x08008109
 800816c:	08008109 	.word	0x08008109
 8008170:	08008109 	.word	0x08008109
 8008174:	08008245 	.word	0x08008245
 8008178:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800817c:	e7db      	b.n	8008136 <_scanf_float+0x92>
 800817e:	290e      	cmp	r1, #14
 8008180:	d8c2      	bhi.n	8008108 <_scanf_float+0x64>
 8008182:	a001      	add	r0, pc, #4	; (adr r0, 8008188 <_scanf_float+0xe4>)
 8008184:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008188:	08008237 	.word	0x08008237
 800818c:	08008109 	.word	0x08008109
 8008190:	08008237 	.word	0x08008237
 8008194:	080082cb 	.word	0x080082cb
 8008198:	08008109 	.word	0x08008109
 800819c:	080081e5 	.word	0x080081e5
 80081a0:	08008221 	.word	0x08008221
 80081a4:	08008221 	.word	0x08008221
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008221 	.word	0x08008221
 80081b0:	08008221 	.word	0x08008221
 80081b4:	08008221 	.word	0x08008221
 80081b8:	08008221 	.word	0x08008221
 80081bc:	08008221 	.word	0x08008221
 80081c0:	08008221 	.word	0x08008221
 80081c4:	2b6e      	cmp	r3, #110	; 0x6e
 80081c6:	d809      	bhi.n	80081dc <_scanf_float+0x138>
 80081c8:	2b60      	cmp	r3, #96	; 0x60
 80081ca:	d8b2      	bhi.n	8008132 <_scanf_float+0x8e>
 80081cc:	2b54      	cmp	r3, #84	; 0x54
 80081ce:	d077      	beq.n	80082c0 <_scanf_float+0x21c>
 80081d0:	2b59      	cmp	r3, #89	; 0x59
 80081d2:	d199      	bne.n	8008108 <_scanf_float+0x64>
 80081d4:	2d07      	cmp	r5, #7
 80081d6:	d197      	bne.n	8008108 <_scanf_float+0x64>
 80081d8:	2508      	movs	r5, #8
 80081da:	e029      	b.n	8008230 <_scanf_float+0x18c>
 80081dc:	2b74      	cmp	r3, #116	; 0x74
 80081de:	d06f      	beq.n	80082c0 <_scanf_float+0x21c>
 80081e0:	2b79      	cmp	r3, #121	; 0x79
 80081e2:	e7f6      	b.n	80081d2 <_scanf_float+0x12e>
 80081e4:	6821      	ldr	r1, [r4, #0]
 80081e6:	05c8      	lsls	r0, r1, #23
 80081e8:	d51a      	bpl.n	8008220 <_scanf_float+0x17c>
 80081ea:	9b02      	ldr	r3, [sp, #8]
 80081ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80081f0:	6021      	str	r1, [r4, #0]
 80081f2:	f109 0901 	add.w	r9, r9, #1
 80081f6:	b11b      	cbz	r3, 8008200 <_scanf_float+0x15c>
 80081f8:	3b01      	subs	r3, #1
 80081fa:	3201      	adds	r2, #1
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	60a2      	str	r2, [r4, #8]
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	3b01      	subs	r3, #1
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	3301      	adds	r3, #1
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3b01      	subs	r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	f340 8084 	ble.w	8008320 <_scanf_float+0x27c>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	603b      	str	r3, [r7, #0]
 800821e:	e766      	b.n	80080ee <_scanf_float+0x4a>
 8008220:	eb1a 0f05 	cmn.w	sl, r5
 8008224:	f47f af70 	bne.w	8008108 <_scanf_float+0x64>
 8008228:	6822      	ldr	r2, [r4, #0]
 800822a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f806 3b01 	strb.w	r3, [r6], #1
 8008234:	e7e4      	b.n	8008200 <_scanf_float+0x15c>
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	0610      	lsls	r0, r2, #24
 800823a:	f57f af65 	bpl.w	8008108 <_scanf_float+0x64>
 800823e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008242:	e7f4      	b.n	800822e <_scanf_float+0x18a>
 8008244:	f1ba 0f00 	cmp.w	sl, #0
 8008248:	d10e      	bne.n	8008268 <_scanf_float+0x1c4>
 800824a:	f1b9 0f00 	cmp.w	r9, #0
 800824e:	d10e      	bne.n	800826e <_scanf_float+0x1ca>
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008256:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800825a:	d108      	bne.n	800826e <_scanf_float+0x1ca>
 800825c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008260:	f04f 0a01 	mov.w	sl, #1
 8008264:	6022      	str	r2, [r4, #0]
 8008266:	e7e3      	b.n	8008230 <_scanf_float+0x18c>
 8008268:	f1ba 0f02 	cmp.w	sl, #2
 800826c:	d055      	beq.n	800831a <_scanf_float+0x276>
 800826e:	2d01      	cmp	r5, #1
 8008270:	d002      	beq.n	8008278 <_scanf_float+0x1d4>
 8008272:	2d04      	cmp	r5, #4
 8008274:	f47f af48 	bne.w	8008108 <_scanf_float+0x64>
 8008278:	3501      	adds	r5, #1
 800827a:	b2ed      	uxtb	r5, r5
 800827c:	e7d8      	b.n	8008230 <_scanf_float+0x18c>
 800827e:	f1ba 0f01 	cmp.w	sl, #1
 8008282:	f47f af41 	bne.w	8008108 <_scanf_float+0x64>
 8008286:	f04f 0a02 	mov.w	sl, #2
 800828a:	e7d1      	b.n	8008230 <_scanf_float+0x18c>
 800828c:	b97d      	cbnz	r5, 80082ae <_scanf_float+0x20a>
 800828e:	f1b9 0f00 	cmp.w	r9, #0
 8008292:	f47f af3c 	bne.w	800810e <_scanf_float+0x6a>
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800829c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082a0:	f47f af39 	bne.w	8008116 <_scanf_float+0x72>
 80082a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082a8:	2501      	movs	r5, #1
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	e7c0      	b.n	8008230 <_scanf_float+0x18c>
 80082ae:	2d03      	cmp	r5, #3
 80082b0:	d0e2      	beq.n	8008278 <_scanf_float+0x1d4>
 80082b2:	2d05      	cmp	r5, #5
 80082b4:	e7de      	b.n	8008274 <_scanf_float+0x1d0>
 80082b6:	2d02      	cmp	r5, #2
 80082b8:	f47f af26 	bne.w	8008108 <_scanf_float+0x64>
 80082bc:	2503      	movs	r5, #3
 80082be:	e7b7      	b.n	8008230 <_scanf_float+0x18c>
 80082c0:	2d06      	cmp	r5, #6
 80082c2:	f47f af21 	bne.w	8008108 <_scanf_float+0x64>
 80082c6:	2507      	movs	r5, #7
 80082c8:	e7b2      	b.n	8008230 <_scanf_float+0x18c>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	0591      	lsls	r1, r2, #22
 80082ce:	f57f af1b 	bpl.w	8008108 <_scanf_float+0x64>
 80082d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80082d6:	6022      	str	r2, [r4, #0]
 80082d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80082dc:	e7a8      	b.n	8008230 <_scanf_float+0x18c>
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80082e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80082e8:	d006      	beq.n	80082f8 <_scanf_float+0x254>
 80082ea:	0550      	lsls	r0, r2, #21
 80082ec:	f57f af0c 	bpl.w	8008108 <_scanf_float+0x64>
 80082f0:	f1b9 0f00 	cmp.w	r9, #0
 80082f4:	f43f af0f 	beq.w	8008116 <_scanf_float+0x72>
 80082f8:	0591      	lsls	r1, r2, #22
 80082fa:	bf58      	it	pl
 80082fc:	9901      	ldrpl	r1, [sp, #4]
 80082fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008302:	bf58      	it	pl
 8008304:	eba9 0101 	subpl.w	r1, r9, r1
 8008308:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800830c:	f04f 0900 	mov.w	r9, #0
 8008310:	bf58      	it	pl
 8008312:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	e78a      	b.n	8008230 <_scanf_float+0x18c>
 800831a:	f04f 0a03 	mov.w	sl, #3
 800831e:	e787      	b.n	8008230 <_scanf_float+0x18c>
 8008320:	4639      	mov	r1, r7
 8008322:	4640      	mov	r0, r8
 8008324:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008328:	4798      	blx	r3
 800832a:	2800      	cmp	r0, #0
 800832c:	f43f aedf 	beq.w	80080ee <_scanf_float+0x4a>
 8008330:	e6ea      	b.n	8008108 <_scanf_float+0x64>
 8008332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008336:	463a      	mov	r2, r7
 8008338:	4640      	mov	r0, r8
 800833a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800833e:	4798      	blx	r3
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	3b01      	subs	r3, #1
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	e6ec      	b.n	8008122 <_scanf_float+0x7e>
 8008348:	1e6b      	subs	r3, r5, #1
 800834a:	2b06      	cmp	r3, #6
 800834c:	d825      	bhi.n	800839a <_scanf_float+0x2f6>
 800834e:	2d02      	cmp	r5, #2
 8008350:	d836      	bhi.n	80083c0 <_scanf_float+0x31c>
 8008352:	455e      	cmp	r6, fp
 8008354:	f67f aee8 	bls.w	8008128 <_scanf_float+0x84>
 8008358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800835c:	463a      	mov	r2, r7
 800835e:	4640      	mov	r0, r8
 8008360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008364:	4798      	blx	r3
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	e7f1      	b.n	8008352 <_scanf_float+0x2ae>
 800836e:	9802      	ldr	r0, [sp, #8]
 8008370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008374:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008378:	463a      	mov	r2, r7
 800837a:	9002      	str	r0, [sp, #8]
 800837c:	4640      	mov	r0, r8
 800837e:	4798      	blx	r3
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	3b01      	subs	r3, #1
 8008384:	6123      	str	r3, [r4, #16]
 8008386:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800838a:	fa5f fa8a 	uxtb.w	sl, sl
 800838e:	f1ba 0f02 	cmp.w	sl, #2
 8008392:	d1ec      	bne.n	800836e <_scanf_float+0x2ca>
 8008394:	3d03      	subs	r5, #3
 8008396:	b2ed      	uxtb	r5, r5
 8008398:	1b76      	subs	r6, r6, r5
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	05da      	lsls	r2, r3, #23
 800839e:	d52f      	bpl.n	8008400 <_scanf_float+0x35c>
 80083a0:	055b      	lsls	r3, r3, #21
 80083a2:	d510      	bpl.n	80083c6 <_scanf_float+0x322>
 80083a4:	455e      	cmp	r6, fp
 80083a6:	f67f aebf 	bls.w	8008128 <_scanf_float+0x84>
 80083aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ae:	463a      	mov	r2, r7
 80083b0:	4640      	mov	r0, r8
 80083b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083b6:	4798      	blx	r3
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6123      	str	r3, [r4, #16]
 80083be:	e7f1      	b.n	80083a4 <_scanf_float+0x300>
 80083c0:	46aa      	mov	sl, r5
 80083c2:	9602      	str	r6, [sp, #8]
 80083c4:	e7df      	b.n	8008386 <_scanf_float+0x2e2>
 80083c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	2965      	cmp	r1, #101	; 0x65
 80083ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80083d2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	d00c      	beq.n	80083f4 <_scanf_float+0x350>
 80083da:	2945      	cmp	r1, #69	; 0x45
 80083dc:	d00a      	beq.n	80083f4 <_scanf_float+0x350>
 80083de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083e2:	463a      	mov	r2, r7
 80083e4:	4640      	mov	r0, r8
 80083e6:	4798      	blx	r3
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	1eb5      	subs	r5, r6, #2
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	463a      	mov	r2, r7
 80083f6:	4640      	mov	r0, r8
 80083f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083fc:	4798      	blx	r3
 80083fe:	462e      	mov	r6, r5
 8008400:	6825      	ldr	r5, [r4, #0]
 8008402:	f015 0510 	ands.w	r5, r5, #16
 8008406:	d155      	bne.n	80084b4 <_scanf_float+0x410>
 8008408:	7035      	strb	r5, [r6, #0]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008414:	d11b      	bne.n	800844e <_scanf_float+0x3aa>
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	454b      	cmp	r3, r9
 800841a:	eba3 0209 	sub.w	r2, r3, r9
 800841e:	d123      	bne.n	8008468 <_scanf_float+0x3c4>
 8008420:	2200      	movs	r2, #0
 8008422:	4659      	mov	r1, fp
 8008424:	4640      	mov	r0, r8
 8008426:	f000 fe8b 	bl	8009140 <_strtod_r>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	f012 0f02 	tst.w	r2, #2
 8008432:	4606      	mov	r6, r0
 8008434:	460f      	mov	r7, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	d021      	beq.n	800847e <_scanf_float+0x3da>
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	9903      	ldr	r1, [sp, #12]
 800843e:	600a      	str	r2, [r1, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	e9c3 6700 	strd	r6, r7, [r3]
 8008446:	68e3      	ldr	r3, [r4, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60e3      	str	r3, [r4, #12]
 800844c:	e66d      	b.n	800812a <_scanf_float+0x86>
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0e5      	beq.n	8008420 <_scanf_float+0x37c>
 8008454:	9905      	ldr	r1, [sp, #20]
 8008456:	230a      	movs	r3, #10
 8008458:	462a      	mov	r2, r5
 800845a:	4640      	mov	r0, r8
 800845c:	3101      	adds	r1, #1
 800845e:	f000 fef1 	bl	8009244 <_strtol_r>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	9e05      	ldr	r6, [sp, #20]
 8008466:	1ac2      	subs	r2, r0, r3
 8008468:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800846c:	429e      	cmp	r6, r3
 800846e:	bf28      	it	cs
 8008470:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008474:	4630      	mov	r0, r6
 8008476:	4910      	ldr	r1, [pc, #64]	; (80084b8 <_scanf_float+0x414>)
 8008478:	f000 f836 	bl	80084e8 <siprintf>
 800847c:	e7d0      	b.n	8008420 <_scanf_float+0x37c>
 800847e:	f012 0f04 	tst.w	r2, #4
 8008482:	f103 0204 	add.w	r2, r3, #4
 8008486:	d1d9      	bne.n	800843c <_scanf_float+0x398>
 8008488:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800848c:	f8cc 2000 	str.w	r2, [ip]
 8008490:	f8d3 8000 	ldr.w	r8, [r3]
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	f7f8 fb24 	bl	8000ae4 <__aeabi_dcmpun>
 800849c:	b128      	cbz	r0, 80084aa <_scanf_float+0x406>
 800849e:	4807      	ldr	r0, [pc, #28]	; (80084bc <_scanf_float+0x418>)
 80084a0:	f000 f81e 	bl	80084e0 <nanf>
 80084a4:	f8c8 0000 	str.w	r0, [r8]
 80084a8:	e7cd      	b.n	8008446 <_scanf_float+0x3a2>
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f8 fb77 	bl	8000ba0 <__aeabi_d2f>
 80084b2:	e7f7      	b.n	80084a4 <_scanf_float+0x400>
 80084b4:	2500      	movs	r5, #0
 80084b6:	e638      	b.n	800812a <_scanf_float+0x86>
 80084b8:	0800daec 	.word	0x0800daec
 80084bc:	0800def8 	.word	0x0800def8

080084c0 <_sbrk_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	2300      	movs	r3, #0
 80084c4:	4d05      	ldr	r5, [pc, #20]	; (80084dc <_sbrk_r+0x1c>)
 80084c6:	4604      	mov	r4, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	f7fb faa4 	bl	8003a18 <_sbrk>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_sbrk_r+0x1a>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_sbrk_r+0x1a>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20000700 	.word	0x20000700

080084e0 <nanf>:
 80084e0:	4800      	ldr	r0, [pc, #0]	; (80084e4 <nanf+0x4>)
 80084e2:	4770      	bx	lr
 80084e4:	7fc00000 	.word	0x7fc00000

080084e8 <siprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084ee:	b500      	push	{lr}
 80084f0:	b09c      	sub	sp, #112	; 0x70
 80084f2:	ab1d      	add	r3, sp, #116	; 0x74
 80084f4:	9002      	str	r0, [sp, #8]
 80084f6:	9006      	str	r0, [sp, #24]
 80084f8:	9107      	str	r1, [sp, #28]
 80084fa:	9104      	str	r1, [sp, #16]
 80084fc:	4808      	ldr	r0, [pc, #32]	; (8008520 <siprintf+0x38>)
 80084fe:	4909      	ldr	r1, [pc, #36]	; (8008524 <siprintf+0x3c>)
 8008500:	f853 2b04 	ldr.w	r2, [r3], #4
 8008504:	9105      	str	r1, [sp, #20]
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	a902      	add	r1, sp, #8
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	f002 fde2 	bl	800b0d4 <_svfiprintf_r>
 8008510:	2200      	movs	r2, #0
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	b01c      	add	sp, #112	; 0x70
 8008518:	f85d eb04 	ldr.w	lr, [sp], #4
 800851c:	b003      	add	sp, #12
 800851e:	4770      	bx	lr
 8008520:	20000040 	.word	0x20000040
 8008524:	ffff0208 	.word	0xffff0208

08008528 <sulp>:
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	460f      	mov	r7, r1
 800852e:	4690      	mov	r8, r2
 8008530:	f002 fc18 	bl	800ad64 <__ulp>
 8008534:	4604      	mov	r4, r0
 8008536:	460d      	mov	r5, r1
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	d011      	beq.n	8008562 <sulp+0x3a>
 800853e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008546:	2b00      	cmp	r3, #0
 8008548:	dd0b      	ble.n	8008562 <sulp+0x3a>
 800854a:	2400      	movs	r4, #0
 800854c:	051b      	lsls	r3, r3, #20
 800854e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008552:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	f7f8 f829 	bl	80005b0 <__aeabi_dmul>
 800855e:	4604      	mov	r4, r0
 8008560:	460d      	mov	r5, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856a:	0000      	movs	r0, r0
 800856c:	0000      	movs	r0, r0
	...

08008570 <_strtod_l>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	469b      	mov	fp, r3
 8008576:	2300      	movs	r3, #0
 8008578:	b09f      	sub	sp, #124	; 0x7c
 800857a:	931a      	str	r3, [sp, #104]	; 0x68
 800857c:	4b9e      	ldr	r3, [pc, #632]	; (80087f8 <_strtod_l+0x288>)
 800857e:	4682      	mov	sl, r0
 8008580:	681f      	ldr	r7, [r3, #0]
 8008582:	460e      	mov	r6, r1
 8008584:	4638      	mov	r0, r7
 8008586:	9215      	str	r2, [sp, #84]	; 0x54
 8008588:	f7f7 fe4e 	bl	8000228 <strlen>
 800858c:	f04f 0800 	mov.w	r8, #0
 8008590:	4604      	mov	r4, r0
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	9619      	str	r6, [sp, #100]	; 0x64
 8008598:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800859a:	781a      	ldrb	r2, [r3, #0]
 800859c:	2a2b      	cmp	r2, #43	; 0x2b
 800859e:	d04c      	beq.n	800863a <_strtod_l+0xca>
 80085a0:	d83a      	bhi.n	8008618 <_strtod_l+0xa8>
 80085a2:	2a0d      	cmp	r2, #13
 80085a4:	d833      	bhi.n	800860e <_strtod_l+0x9e>
 80085a6:	2a08      	cmp	r2, #8
 80085a8:	d833      	bhi.n	8008612 <_strtod_l+0xa2>
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	d03d      	beq.n	800862a <_strtod_l+0xba>
 80085ae:	2300      	movs	r3, #0
 80085b0:	930a      	str	r3, [sp, #40]	; 0x28
 80085b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80085b4:	782b      	ldrb	r3, [r5, #0]
 80085b6:	2b30      	cmp	r3, #48	; 0x30
 80085b8:	f040 80aa 	bne.w	8008710 <_strtod_l+0x1a0>
 80085bc:	786b      	ldrb	r3, [r5, #1]
 80085be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085c2:	2b58      	cmp	r3, #88	; 0x58
 80085c4:	d166      	bne.n	8008694 <_strtod_l+0x124>
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	4650      	mov	r0, sl
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	ab1a      	add	r3, sp, #104	; 0x68
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	4a8a      	ldr	r2, [pc, #552]	; (80087fc <_strtod_l+0x28c>)
 80085d2:	f8cd b008 	str.w	fp, [sp, #8]
 80085d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80085d8:	a919      	add	r1, sp, #100	; 0x64
 80085da:	f001 fd17 	bl	800a00c <__gethex>
 80085de:	f010 0607 	ands.w	r6, r0, #7
 80085e2:	4604      	mov	r4, r0
 80085e4:	d005      	beq.n	80085f2 <_strtod_l+0x82>
 80085e6:	2e06      	cmp	r6, #6
 80085e8:	d129      	bne.n	800863e <_strtod_l+0xce>
 80085ea:	2300      	movs	r3, #0
 80085ec:	3501      	adds	r5, #1
 80085ee:	9519      	str	r5, [sp, #100]	; 0x64
 80085f0:	930a      	str	r3, [sp, #40]	; 0x28
 80085f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 858a 	bne.w	800910e <_strtod_l+0xb9e>
 80085fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fc:	b1d3      	cbz	r3, 8008634 <_strtod_l+0xc4>
 80085fe:	4642      	mov	r2, r8
 8008600:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	b01f      	add	sp, #124	; 0x7c
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	2a20      	cmp	r2, #32
 8008610:	d1cd      	bne.n	80085ae <_strtod_l+0x3e>
 8008612:	3301      	adds	r3, #1
 8008614:	9319      	str	r3, [sp, #100]	; 0x64
 8008616:	e7bf      	b.n	8008598 <_strtod_l+0x28>
 8008618:	2a2d      	cmp	r2, #45	; 0x2d
 800861a:	d1c8      	bne.n	80085ae <_strtod_l+0x3e>
 800861c:	2201      	movs	r2, #1
 800861e:	920a      	str	r2, [sp, #40]	; 0x28
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	9219      	str	r2, [sp, #100]	; 0x64
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1c3      	bne.n	80085b2 <_strtod_l+0x42>
 800862a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862c:	9619      	str	r6, [sp, #100]	; 0x64
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 856b 	bne.w	800910a <_strtod_l+0xb9a>
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	e7e4      	b.n	8008604 <_strtod_l+0x94>
 800863a:	2200      	movs	r2, #0
 800863c:	e7ef      	b.n	800861e <_strtod_l+0xae>
 800863e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008640:	b13a      	cbz	r2, 8008652 <_strtod_l+0xe2>
 8008642:	2135      	movs	r1, #53	; 0x35
 8008644:	a81c      	add	r0, sp, #112	; 0x70
 8008646:	f002 fc91 	bl	800af6c <__copybits>
 800864a:	4650      	mov	r0, sl
 800864c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800864e:	f002 f859 	bl	800a704 <_Bfree>
 8008652:	3e01      	subs	r6, #1
 8008654:	2e04      	cmp	r6, #4
 8008656:	d806      	bhi.n	8008666 <_strtod_l+0xf6>
 8008658:	e8df f006 	tbb	[pc, r6]
 800865c:	1714030a 	.word	0x1714030a
 8008660:	0a          	.byte	0x0a
 8008661:	00          	.byte	0x00
 8008662:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008666:	0721      	lsls	r1, r4, #28
 8008668:	d5c3      	bpl.n	80085f2 <_strtod_l+0x82>
 800866a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800866e:	e7c0      	b.n	80085f2 <_strtod_l+0x82>
 8008670:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008672:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008676:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800867a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800867e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008682:	e7f0      	b.n	8008666 <_strtod_l+0xf6>
 8008684:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008800 <_strtod_l+0x290>
 8008688:	e7ed      	b.n	8008666 <_strtod_l+0xf6>
 800868a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800868e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008692:	e7e8      	b.n	8008666 <_strtod_l+0xf6>
 8008694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	9219      	str	r2, [sp, #100]	; 0x64
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b30      	cmp	r3, #48	; 0x30
 800869e:	d0f9      	beq.n	8008694 <_strtod_l+0x124>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0a6      	beq.n	80085f2 <_strtod_l+0x82>
 80086a4:	2301      	movs	r3, #1
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086aa:	220a      	movs	r2, #10
 80086ac:	9308      	str	r3, [sp, #32]
 80086ae:	2300      	movs	r3, #0
 80086b0:	469b      	mov	fp, r3
 80086b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80086b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80086b8:	7805      	ldrb	r5, [r0, #0]
 80086ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80086be:	b2d9      	uxtb	r1, r3
 80086c0:	2909      	cmp	r1, #9
 80086c2:	d927      	bls.n	8008714 <_strtod_l+0x1a4>
 80086c4:	4622      	mov	r2, r4
 80086c6:	4639      	mov	r1, r7
 80086c8:	f002 fe0a 	bl	800b2e0 <strncmp>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d033      	beq.n	8008738 <_strtod_l+0x1c8>
 80086d0:	2000      	movs	r0, #0
 80086d2:	462a      	mov	r2, r5
 80086d4:	465c      	mov	r4, fp
 80086d6:	4603      	mov	r3, r0
 80086d8:	9004      	str	r0, [sp, #16]
 80086da:	2a65      	cmp	r2, #101	; 0x65
 80086dc:	d001      	beq.n	80086e2 <_strtod_l+0x172>
 80086de:	2a45      	cmp	r2, #69	; 0x45
 80086e0:	d114      	bne.n	800870c <_strtod_l+0x19c>
 80086e2:	b91c      	cbnz	r4, 80086ec <_strtod_l+0x17c>
 80086e4:	9a07      	ldr	r2, [sp, #28]
 80086e6:	4302      	orrs	r2, r0
 80086e8:	d09f      	beq.n	800862a <_strtod_l+0xba>
 80086ea:	2400      	movs	r4, #0
 80086ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80086ee:	1c72      	adds	r2, r6, #1
 80086f0:	9219      	str	r2, [sp, #100]	; 0x64
 80086f2:	7872      	ldrb	r2, [r6, #1]
 80086f4:	2a2b      	cmp	r2, #43	; 0x2b
 80086f6:	d079      	beq.n	80087ec <_strtod_l+0x27c>
 80086f8:	2a2d      	cmp	r2, #45	; 0x2d
 80086fa:	f000 8083 	beq.w	8008804 <_strtod_l+0x294>
 80086fe:	2700      	movs	r7, #0
 8008700:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008704:	2909      	cmp	r1, #9
 8008706:	f240 8083 	bls.w	8008810 <_strtod_l+0x2a0>
 800870a:	9619      	str	r6, [sp, #100]	; 0x64
 800870c:	2500      	movs	r5, #0
 800870e:	e09f      	b.n	8008850 <_strtod_l+0x2e0>
 8008710:	2300      	movs	r3, #0
 8008712:	e7c8      	b.n	80086a6 <_strtod_l+0x136>
 8008714:	f1bb 0f08 	cmp.w	fp, #8
 8008718:	bfd5      	itete	le
 800871a:	9906      	ldrle	r1, [sp, #24]
 800871c:	9905      	ldrgt	r1, [sp, #20]
 800871e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008722:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008726:	f100 0001 	add.w	r0, r0, #1
 800872a:	bfd4      	ite	le
 800872c:	9306      	strle	r3, [sp, #24]
 800872e:	9305      	strgt	r3, [sp, #20]
 8008730:	f10b 0b01 	add.w	fp, fp, #1
 8008734:	9019      	str	r0, [sp, #100]	; 0x64
 8008736:	e7be      	b.n	80086b6 <_strtod_l+0x146>
 8008738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800873a:	191a      	adds	r2, r3, r4
 800873c:	9219      	str	r2, [sp, #100]	; 0x64
 800873e:	5d1a      	ldrb	r2, [r3, r4]
 8008740:	f1bb 0f00 	cmp.w	fp, #0
 8008744:	d036      	beq.n	80087b4 <_strtod_l+0x244>
 8008746:	465c      	mov	r4, fp
 8008748:	9004      	str	r0, [sp, #16]
 800874a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800874e:	2b09      	cmp	r3, #9
 8008750:	d912      	bls.n	8008778 <_strtod_l+0x208>
 8008752:	2301      	movs	r3, #1
 8008754:	e7c1      	b.n	80086da <_strtod_l+0x16a>
 8008756:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008758:	3001      	adds	r0, #1
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	9219      	str	r2, [sp, #100]	; 0x64
 800875e:	785a      	ldrb	r2, [r3, #1]
 8008760:	2a30      	cmp	r2, #48	; 0x30
 8008762:	d0f8      	beq.n	8008756 <_strtod_l+0x1e6>
 8008764:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008768:	2b08      	cmp	r3, #8
 800876a:	f200 84d5 	bhi.w	8009118 <_strtod_l+0xba8>
 800876e:	9004      	str	r0, [sp, #16]
 8008770:	2000      	movs	r0, #0
 8008772:	4604      	mov	r4, r0
 8008774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008776:	9308      	str	r3, [sp, #32]
 8008778:	3a30      	subs	r2, #48	; 0x30
 800877a:	f100 0301 	add.w	r3, r0, #1
 800877e:	d013      	beq.n	80087a8 <_strtod_l+0x238>
 8008780:	9904      	ldr	r1, [sp, #16]
 8008782:	1905      	adds	r5, r0, r4
 8008784:	4419      	add	r1, r3
 8008786:	9104      	str	r1, [sp, #16]
 8008788:	4623      	mov	r3, r4
 800878a:	210a      	movs	r1, #10
 800878c:	42ab      	cmp	r3, r5
 800878e:	d113      	bne.n	80087b8 <_strtod_l+0x248>
 8008790:	1823      	adds	r3, r4, r0
 8008792:	2b08      	cmp	r3, #8
 8008794:	f104 0401 	add.w	r4, r4, #1
 8008798:	4404      	add	r4, r0
 800879a:	dc1b      	bgt.n	80087d4 <_strtod_l+0x264>
 800879c:	230a      	movs	r3, #10
 800879e:	9906      	ldr	r1, [sp, #24]
 80087a0:	fb03 2301 	mla	r3, r3, r1, r2
 80087a4:	9306      	str	r3, [sp, #24]
 80087a6:	2300      	movs	r3, #0
 80087a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087aa:	4618      	mov	r0, r3
 80087ac:	1c51      	adds	r1, r2, #1
 80087ae:	9119      	str	r1, [sp, #100]	; 0x64
 80087b0:	7852      	ldrb	r2, [r2, #1]
 80087b2:	e7ca      	b.n	800874a <_strtod_l+0x1da>
 80087b4:	4658      	mov	r0, fp
 80087b6:	e7d3      	b.n	8008760 <_strtod_l+0x1f0>
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	dc04      	bgt.n	80087c6 <_strtod_l+0x256>
 80087bc:	9f06      	ldr	r7, [sp, #24]
 80087be:	434f      	muls	r7, r1
 80087c0:	9706      	str	r7, [sp, #24]
 80087c2:	3301      	adds	r3, #1
 80087c4:	e7e2      	b.n	800878c <_strtod_l+0x21c>
 80087c6:	1c5f      	adds	r7, r3, #1
 80087c8:	2f10      	cmp	r7, #16
 80087ca:	bfde      	ittt	le
 80087cc:	9f05      	ldrle	r7, [sp, #20]
 80087ce:	434f      	mulle	r7, r1
 80087d0:	9705      	strle	r7, [sp, #20]
 80087d2:	e7f6      	b.n	80087c2 <_strtod_l+0x252>
 80087d4:	2c10      	cmp	r4, #16
 80087d6:	bfdf      	itttt	le
 80087d8:	230a      	movle	r3, #10
 80087da:	9905      	ldrle	r1, [sp, #20]
 80087dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80087e0:	9305      	strle	r3, [sp, #20]
 80087e2:	e7e0      	b.n	80087a6 <_strtod_l+0x236>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	2301      	movs	r3, #1
 80087ea:	e77b      	b.n	80086e4 <_strtod_l+0x174>
 80087ec:	2700      	movs	r7, #0
 80087ee:	1cb2      	adds	r2, r6, #2
 80087f0:	9219      	str	r2, [sp, #100]	; 0x64
 80087f2:	78b2      	ldrb	r2, [r6, #2]
 80087f4:	e784      	b.n	8008700 <_strtod_l+0x190>
 80087f6:	bf00      	nop
 80087f8:	0800dd40 	.word	0x0800dd40
 80087fc:	0800daf4 	.word	0x0800daf4
 8008800:	7ff00000 	.word	0x7ff00000
 8008804:	2701      	movs	r7, #1
 8008806:	e7f2      	b.n	80087ee <_strtod_l+0x27e>
 8008808:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800880a:	1c51      	adds	r1, r2, #1
 800880c:	9119      	str	r1, [sp, #100]	; 0x64
 800880e:	7852      	ldrb	r2, [r2, #1]
 8008810:	2a30      	cmp	r2, #48	; 0x30
 8008812:	d0f9      	beq.n	8008808 <_strtod_l+0x298>
 8008814:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008818:	2908      	cmp	r1, #8
 800881a:	f63f af77 	bhi.w	800870c <_strtod_l+0x19c>
 800881e:	f04f 0e0a 	mov.w	lr, #10
 8008822:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008826:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008828:	9209      	str	r2, [sp, #36]	; 0x24
 800882a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800882c:	1c51      	adds	r1, r2, #1
 800882e:	9119      	str	r1, [sp, #100]	; 0x64
 8008830:	7852      	ldrb	r2, [r2, #1]
 8008832:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008836:	2d09      	cmp	r5, #9
 8008838:	d935      	bls.n	80088a6 <_strtod_l+0x336>
 800883a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800883c:	1b49      	subs	r1, r1, r5
 800883e:	2908      	cmp	r1, #8
 8008840:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008844:	dc02      	bgt.n	800884c <_strtod_l+0x2dc>
 8008846:	4565      	cmp	r5, ip
 8008848:	bfa8      	it	ge
 800884a:	4665      	movge	r5, ip
 800884c:	b107      	cbz	r7, 8008850 <_strtod_l+0x2e0>
 800884e:	426d      	negs	r5, r5
 8008850:	2c00      	cmp	r4, #0
 8008852:	d14c      	bne.n	80088ee <_strtod_l+0x37e>
 8008854:	9907      	ldr	r1, [sp, #28]
 8008856:	4301      	orrs	r1, r0
 8008858:	f47f aecb 	bne.w	80085f2 <_strtod_l+0x82>
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f aee4 	bne.w	800862a <_strtod_l+0xba>
 8008862:	2a69      	cmp	r2, #105	; 0x69
 8008864:	d026      	beq.n	80088b4 <_strtod_l+0x344>
 8008866:	dc23      	bgt.n	80088b0 <_strtod_l+0x340>
 8008868:	2a49      	cmp	r2, #73	; 0x49
 800886a:	d023      	beq.n	80088b4 <_strtod_l+0x344>
 800886c:	2a4e      	cmp	r2, #78	; 0x4e
 800886e:	f47f aedc 	bne.w	800862a <_strtod_l+0xba>
 8008872:	499d      	ldr	r1, [pc, #628]	; (8008ae8 <_strtod_l+0x578>)
 8008874:	a819      	add	r0, sp, #100	; 0x64
 8008876:	f001 fe17 	bl	800a4a8 <__match>
 800887a:	2800      	cmp	r0, #0
 800887c:	f43f aed5 	beq.w	800862a <_strtod_l+0xba>
 8008880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b28      	cmp	r3, #40	; 0x28
 8008886:	d12c      	bne.n	80088e2 <_strtod_l+0x372>
 8008888:	4998      	ldr	r1, [pc, #608]	; (8008aec <_strtod_l+0x57c>)
 800888a:	aa1c      	add	r2, sp, #112	; 0x70
 800888c:	a819      	add	r0, sp, #100	; 0x64
 800888e:	f001 fe1f 	bl	800a4d0 <__hexnan>
 8008892:	2805      	cmp	r0, #5
 8008894:	d125      	bne.n	80088e2 <_strtod_l+0x372>
 8008896:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008898:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800889c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80088a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80088a4:	e6a5      	b.n	80085f2 <_strtod_l+0x82>
 80088a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80088aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80088ae:	e7bc      	b.n	800882a <_strtod_l+0x2ba>
 80088b0:	2a6e      	cmp	r2, #110	; 0x6e
 80088b2:	e7dc      	b.n	800886e <_strtod_l+0x2fe>
 80088b4:	498e      	ldr	r1, [pc, #568]	; (8008af0 <_strtod_l+0x580>)
 80088b6:	a819      	add	r0, sp, #100	; 0x64
 80088b8:	f001 fdf6 	bl	800a4a8 <__match>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f43f aeb4 	beq.w	800862a <_strtod_l+0xba>
 80088c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088c4:	498b      	ldr	r1, [pc, #556]	; (8008af4 <_strtod_l+0x584>)
 80088c6:	3b01      	subs	r3, #1
 80088c8:	a819      	add	r0, sp, #100	; 0x64
 80088ca:	9319      	str	r3, [sp, #100]	; 0x64
 80088cc:	f001 fdec 	bl	800a4a8 <__match>
 80088d0:	b910      	cbnz	r0, 80088d8 <_strtod_l+0x368>
 80088d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088d4:	3301      	adds	r3, #1
 80088d6:	9319      	str	r3, [sp, #100]	; 0x64
 80088d8:	f04f 0800 	mov.w	r8, #0
 80088dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008af8 <_strtod_l+0x588>
 80088e0:	e687      	b.n	80085f2 <_strtod_l+0x82>
 80088e2:	4886      	ldr	r0, [pc, #536]	; (8008afc <_strtod_l+0x58c>)
 80088e4:	f002 fcf6 	bl	800b2d4 <nan>
 80088e8:	4680      	mov	r8, r0
 80088ea:	4689      	mov	r9, r1
 80088ec:	e681      	b.n	80085f2 <_strtod_l+0x82>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	f1bb 0f00 	cmp.w	fp, #0
 80088f4:	bf08      	it	eq
 80088f6:	46a3      	moveq	fp, r4
 80088f8:	1aeb      	subs	r3, r5, r3
 80088fa:	2c10      	cmp	r4, #16
 80088fc:	9806      	ldr	r0, [sp, #24]
 80088fe:	4626      	mov	r6, r4
 8008900:	9307      	str	r3, [sp, #28]
 8008902:	bfa8      	it	ge
 8008904:	2610      	movge	r6, #16
 8008906:	f7f7 fdd9 	bl	80004bc <__aeabi_ui2d>
 800890a:	2c09      	cmp	r4, #9
 800890c:	4680      	mov	r8, r0
 800890e:	4689      	mov	r9, r1
 8008910:	dd13      	ble.n	800893a <_strtod_l+0x3ca>
 8008912:	4b7b      	ldr	r3, [pc, #492]	; (8008b00 <_strtod_l+0x590>)
 8008914:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008918:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800891c:	f7f7 fe48 	bl	80005b0 <__aeabi_dmul>
 8008920:	4680      	mov	r8, r0
 8008922:	9805      	ldr	r0, [sp, #20]
 8008924:	4689      	mov	r9, r1
 8008926:	f7f7 fdc9 	bl	80004bc <__aeabi_ui2d>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f7 fc87 	bl	8000244 <__adddf3>
 8008936:	4680      	mov	r8, r0
 8008938:	4689      	mov	r9, r1
 800893a:	2c0f      	cmp	r4, #15
 800893c:	dc36      	bgt.n	80089ac <_strtod_l+0x43c>
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f43f ae56 	beq.w	80085f2 <_strtod_l+0x82>
 8008946:	dd22      	ble.n	800898e <_strtod_l+0x41e>
 8008948:	2b16      	cmp	r3, #22
 800894a:	dc09      	bgt.n	8008960 <_strtod_l+0x3f0>
 800894c:	496c      	ldr	r1, [pc, #432]	; (8008b00 <_strtod_l+0x590>)
 800894e:	4642      	mov	r2, r8
 8008950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008954:	464b      	mov	r3, r9
 8008956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895a:	f7f7 fe29 	bl	80005b0 <__aeabi_dmul>
 800895e:	e7c3      	b.n	80088e8 <_strtod_l+0x378>
 8008960:	9a07      	ldr	r2, [sp, #28]
 8008962:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008966:	4293      	cmp	r3, r2
 8008968:	db20      	blt.n	80089ac <_strtod_l+0x43c>
 800896a:	4d65      	ldr	r5, [pc, #404]	; (8008b00 <_strtod_l+0x590>)
 800896c:	f1c4 040f 	rsb	r4, r4, #15
 8008970:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008974:	4642      	mov	r2, r8
 8008976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800897a:	464b      	mov	r3, r9
 800897c:	f7f7 fe18 	bl	80005b0 <__aeabi_dmul>
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	1b1c      	subs	r4, r3, r4
 8008984:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800898c:	e7e5      	b.n	800895a <_strtod_l+0x3ea>
 800898e:	9b07      	ldr	r3, [sp, #28]
 8008990:	3316      	adds	r3, #22
 8008992:	db0b      	blt.n	80089ac <_strtod_l+0x43c>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	4640      	mov	r0, r8
 8008998:	1b5d      	subs	r5, r3, r5
 800899a:	4b59      	ldr	r3, [pc, #356]	; (8008b00 <_strtod_l+0x590>)
 800899c:	4649      	mov	r1, r9
 800899e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80089a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089a6:	f7f7 ff2d 	bl	8000804 <__aeabi_ddiv>
 80089aa:	e79d      	b.n	80088e8 <_strtod_l+0x378>
 80089ac:	9b07      	ldr	r3, [sp, #28]
 80089ae:	1ba6      	subs	r6, r4, r6
 80089b0:	441e      	add	r6, r3
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	dd74      	ble.n	8008aa0 <_strtod_l+0x530>
 80089b6:	f016 030f 	ands.w	r3, r6, #15
 80089ba:	d00a      	beq.n	80089d2 <_strtod_l+0x462>
 80089bc:	4950      	ldr	r1, [pc, #320]	; (8008b00 <_strtod_l+0x590>)
 80089be:	4642      	mov	r2, r8
 80089c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c8:	464b      	mov	r3, r9
 80089ca:	f7f7 fdf1 	bl	80005b0 <__aeabi_dmul>
 80089ce:	4680      	mov	r8, r0
 80089d0:	4689      	mov	r9, r1
 80089d2:	f036 060f 	bics.w	r6, r6, #15
 80089d6:	d052      	beq.n	8008a7e <_strtod_l+0x50e>
 80089d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80089dc:	dd27      	ble.n	8008a2e <_strtod_l+0x4be>
 80089de:	f04f 0b00 	mov.w	fp, #0
 80089e2:	f8cd b010 	str.w	fp, [sp, #16]
 80089e6:	f8cd b020 	str.w	fp, [sp, #32]
 80089ea:	f8cd b018 	str.w	fp, [sp, #24]
 80089ee:	2322      	movs	r3, #34	; 0x22
 80089f0:	f04f 0800 	mov.w	r8, #0
 80089f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008af8 <_strtod_l+0x588>
 80089f8:	f8ca 3000 	str.w	r3, [sl]
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f43f adf7 	beq.w	80085f2 <_strtod_l+0x82>
 8008a04:	4650      	mov	r0, sl
 8008a06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a08:	f001 fe7c 	bl	800a704 <_Bfree>
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	9906      	ldr	r1, [sp, #24]
 8008a10:	f001 fe78 	bl	800a704 <_Bfree>
 8008a14:	4650      	mov	r0, sl
 8008a16:	9904      	ldr	r1, [sp, #16]
 8008a18:	f001 fe74 	bl	800a704 <_Bfree>
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	9908      	ldr	r1, [sp, #32]
 8008a20:	f001 fe70 	bl	800a704 <_Bfree>
 8008a24:	4659      	mov	r1, fp
 8008a26:	4650      	mov	r0, sl
 8008a28:	f001 fe6c 	bl	800a704 <_Bfree>
 8008a2c:	e5e1      	b.n	80085f2 <_strtod_l+0x82>
 8008a2e:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <_strtod_l+0x594>)
 8008a30:	4640      	mov	r0, r8
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	2300      	movs	r3, #0
 8008a36:	4649      	mov	r1, r9
 8008a38:	461f      	mov	r7, r3
 8008a3a:	1136      	asrs	r6, r6, #4
 8008a3c:	2e01      	cmp	r6, #1
 8008a3e:	dc21      	bgt.n	8008a84 <_strtod_l+0x514>
 8008a40:	b10b      	cbz	r3, 8008a46 <_strtod_l+0x4d6>
 8008a42:	4680      	mov	r8, r0
 8008a44:	4689      	mov	r9, r1
 8008a46:	4b2f      	ldr	r3, [pc, #188]	; (8008b04 <_strtod_l+0x594>)
 8008a48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008a4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008a50:	4642      	mov	r2, r8
 8008a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a56:	464b      	mov	r3, r9
 8008a58:	f7f7 fdaa 	bl	80005b0 <__aeabi_dmul>
 8008a5c:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <_strtod_l+0x588>)
 8008a5e:	460a      	mov	r2, r1
 8008a60:	400b      	ands	r3, r1
 8008a62:	4929      	ldr	r1, [pc, #164]	; (8008b08 <_strtod_l+0x598>)
 8008a64:	4680      	mov	r8, r0
 8008a66:	428b      	cmp	r3, r1
 8008a68:	d8b9      	bhi.n	80089de <_strtod_l+0x46e>
 8008a6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a6e:	428b      	cmp	r3, r1
 8008a70:	bf86      	itte	hi
 8008a72:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008a76:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008b0c <_strtod_l+0x59c>
 8008a7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	e07f      	b.n	8008b84 <_strtod_l+0x614>
 8008a84:	07f2      	lsls	r2, r6, #31
 8008a86:	d505      	bpl.n	8008a94 <_strtod_l+0x524>
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fd8f 	bl	80005b0 <__aeabi_dmul>
 8008a92:	2301      	movs	r3, #1
 8008a94:	9a05      	ldr	r2, [sp, #20]
 8008a96:	3701      	adds	r7, #1
 8008a98:	3208      	adds	r2, #8
 8008a9a:	1076      	asrs	r6, r6, #1
 8008a9c:	9205      	str	r2, [sp, #20]
 8008a9e:	e7cd      	b.n	8008a3c <_strtod_l+0x4cc>
 8008aa0:	d0ed      	beq.n	8008a7e <_strtod_l+0x50e>
 8008aa2:	4276      	negs	r6, r6
 8008aa4:	f016 020f 	ands.w	r2, r6, #15
 8008aa8:	d00a      	beq.n	8008ac0 <_strtod_l+0x550>
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <_strtod_l+0x590>)
 8008aac:	4640      	mov	r0, r8
 8008aae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fea4 	bl	8000804 <__aeabi_ddiv>
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	1136      	asrs	r6, r6, #4
 8008ac2:	d0dc      	beq.n	8008a7e <_strtod_l+0x50e>
 8008ac4:	2e1f      	cmp	r6, #31
 8008ac6:	dd23      	ble.n	8008b10 <_strtod_l+0x5a0>
 8008ac8:	f04f 0b00 	mov.w	fp, #0
 8008acc:	f8cd b010 	str.w	fp, [sp, #16]
 8008ad0:	f8cd b020 	str.w	fp, [sp, #32]
 8008ad4:	f8cd b018 	str.w	fp, [sp, #24]
 8008ad8:	2322      	movs	r3, #34	; 0x22
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	f8ca 3000 	str.w	r3, [sl]
 8008ae6:	e789      	b.n	80089fc <_strtod_l+0x48c>
 8008ae8:	0800dac5 	.word	0x0800dac5
 8008aec:	0800db08 	.word	0x0800db08
 8008af0:	0800dabd 	.word	0x0800dabd
 8008af4:	0800dc4c 	.word	0x0800dc4c
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	0800def8 	.word	0x0800def8
 8008b00:	0800ddd8 	.word	0x0800ddd8
 8008b04:	0800ddb0 	.word	0x0800ddb0
 8008b08:	7ca00000 	.word	0x7ca00000
 8008b0c:	7fefffff 	.word	0x7fefffff
 8008b10:	f016 0310 	ands.w	r3, r6, #16
 8008b14:	bf18      	it	ne
 8008b16:	236a      	movne	r3, #106	; 0x6a
 8008b18:	4640      	mov	r0, r8
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4fb0      	ldr	r7, [pc, #704]	; (8008de4 <_strtod_l+0x874>)
 8008b22:	07f2      	lsls	r2, r6, #31
 8008b24:	d504      	bpl.n	8008b30 <_strtod_l+0x5c0>
 8008b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2a:	f7f7 fd41 	bl	80005b0 <__aeabi_dmul>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	1076      	asrs	r6, r6, #1
 8008b32:	f107 0708 	add.w	r7, r7, #8
 8008b36:	d1f4      	bne.n	8008b22 <_strtod_l+0x5b2>
 8008b38:	b10b      	cbz	r3, 8008b3e <_strtod_l+0x5ce>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	b1c3      	cbz	r3, 8008b74 <_strtod_l+0x604>
 8008b42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008b46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	dd11      	ble.n	8008b74 <_strtod_l+0x604>
 8008b50:	2b1f      	cmp	r3, #31
 8008b52:	f340 8127 	ble.w	8008da4 <_strtod_l+0x834>
 8008b56:	2b34      	cmp	r3, #52	; 0x34
 8008b58:	bfd8      	it	le
 8008b5a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	bfcf      	iteee	gt
 8008b64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008b68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008b6c:	fa03 f202 	lslle.w	r2, r3, r2
 8008b70:	ea02 0901 	andle.w	r9, r2, r1
 8008b74:	2200      	movs	r2, #0
 8008b76:	2300      	movs	r3, #0
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 ff80 	bl	8000a80 <__aeabi_dcmpeq>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d1a1      	bne.n	8008ac8 <_strtod_l+0x558>
 8008b84:	9b06      	ldr	r3, [sp, #24]
 8008b86:	465a      	mov	r2, fp
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	9908      	ldr	r1, [sp, #32]
 8008b90:	f001 fe20 	bl	800a7d4 <__s2b>
 8008b94:	9008      	str	r0, [sp, #32]
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f43f af21 	beq.w	80089de <_strtod_l+0x46e>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	f04f 0b00 	mov.w	fp, #0
 8008ba2:	1b5d      	subs	r5, r3, r5
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	f8cd b010 	str.w	fp, [sp, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfb4      	ite	lt
 8008bae:	462b      	movlt	r3, r5
 8008bb0:	2300      	movge	r3, #0
 8008bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008bba:	9314      	str	r3, [sp, #80]	; 0x50
 8008bbc:	9b08      	ldr	r3, [sp, #32]
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	6859      	ldr	r1, [r3, #4]
 8008bc2:	f001 fd5f 	bl	800a684 <_Balloc>
 8008bc6:	9006      	str	r0, [sp, #24]
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f43f af10 	beq.w	80089ee <_strtod_l+0x47e>
 8008bce:	9b08      	ldr	r3, [sp, #32]
 8008bd0:	300c      	adds	r0, #12
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	f103 010c 	add.w	r1, r3, #12
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f001 fd38 	bl	800a650 <memcpy>
 8008be0:	ab1c      	add	r3, sp, #112	; 0x70
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	ab1b      	add	r3, sp, #108	; 0x6c
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	4650      	mov	r0, sl
 8008bee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008bf2:	f002 f931 	bl	800ae58 <__d2b>
 8008bf6:	901a      	str	r0, [sp, #104]	; 0x68
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f43f aef8 	beq.w	80089ee <_strtod_l+0x47e>
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4650      	mov	r0, sl
 8008c02:	f001 fe7f 	bl	800a904 <__i2b>
 8008c06:	4603      	mov	r3, r0
 8008c08:	9004      	str	r0, [sp, #16]
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f aeef 	beq.w	80089ee <_strtod_l+0x47e>
 8008c10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008c12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	bfab      	itete	ge
 8008c18:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008c1a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008c1c:	18ee      	addge	r6, r5, r3
 8008c1e:	1b5c      	sublt	r4, r3, r5
 8008c20:	9b05      	ldr	r3, [sp, #20]
 8008c22:	bfa8      	it	ge
 8008c24:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008c26:	eba5 0503 	sub.w	r5, r5, r3
 8008c2a:	4415      	add	r5, r2
 8008c2c:	4b6e      	ldr	r3, [pc, #440]	; (8008de8 <_strtod_l+0x878>)
 8008c2e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008c32:	bfb8      	it	lt
 8008c34:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008c36:	429d      	cmp	r5, r3
 8008c38:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c3c:	f280 80c4 	bge.w	8008dc8 <_strtod_l+0x858>
 8008c40:	1b5b      	subs	r3, r3, r5
 8008c42:	2b1f      	cmp	r3, #31
 8008c44:	f04f 0701 	mov.w	r7, #1
 8008c48:	eba2 0203 	sub.w	r2, r2, r3
 8008c4c:	f300 80b1 	bgt.w	8008db2 <_strtod_l+0x842>
 8008c50:	2500      	movs	r5, #0
 8008c52:	fa07 f303 	lsl.w	r3, r7, r3
 8008c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c58:	18b7      	adds	r7, r6, r2
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	42be      	cmp	r6, r7
 8008c5e:	4414      	add	r4, r2
 8008c60:	441c      	add	r4, r3
 8008c62:	4633      	mov	r3, r6
 8008c64:	bfa8      	it	ge
 8008c66:	463b      	movge	r3, r7
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	bfa8      	it	ge
 8008c6c:	4623      	movge	r3, r4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	bfc2      	ittt	gt
 8008c72:	1aff      	subgt	r7, r7, r3
 8008c74:	1ae4      	subgt	r4, r4, r3
 8008c76:	1af6      	subgt	r6, r6, r3
 8008c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd17      	ble.n	8008cae <_strtod_l+0x73e>
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4650      	mov	r0, sl
 8008c82:	9904      	ldr	r1, [sp, #16]
 8008c84:	f001 fefc 	bl	800aa80 <__pow5mult>
 8008c88:	9004      	str	r0, [sp, #16]
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aeaf 	beq.w	80089ee <_strtod_l+0x47e>
 8008c90:	4601      	mov	r1, r0
 8008c92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c94:	4650      	mov	r0, sl
 8008c96:	f001 fe4b 	bl	800a930 <__multiply>
 8008c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f43f aea6 	beq.w	80089ee <_strtod_l+0x47e>
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ca6:	f001 fd2d 	bl	800a704 <_Bfree>
 8008caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cac:	931a      	str	r3, [sp, #104]	; 0x68
 8008cae:	2f00      	cmp	r7, #0
 8008cb0:	f300 808e 	bgt.w	8008dd0 <_strtod_l+0x860>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd08      	ble.n	8008ccc <_strtod_l+0x75c>
 8008cba:	4650      	mov	r0, sl
 8008cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cbe:	9906      	ldr	r1, [sp, #24]
 8008cc0:	f001 fede 	bl	800aa80 <__pow5mult>
 8008cc4:	9006      	str	r0, [sp, #24]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f ae91 	beq.w	80089ee <_strtod_l+0x47e>
 8008ccc:	2c00      	cmp	r4, #0
 8008cce:	dd08      	ble.n	8008ce2 <_strtod_l+0x772>
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	9906      	ldr	r1, [sp, #24]
 8008cd6:	f001 ff2d 	bl	800ab34 <__lshift>
 8008cda:	9006      	str	r0, [sp, #24]
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f43f ae86 	beq.w	80089ee <_strtod_l+0x47e>
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	dd08      	ble.n	8008cf8 <_strtod_l+0x788>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	4650      	mov	r0, sl
 8008cea:	9904      	ldr	r1, [sp, #16]
 8008cec:	f001 ff22 	bl	800ab34 <__lshift>
 8008cf0:	9004      	str	r0, [sp, #16]
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f43f ae7b 	beq.w	80089ee <_strtod_l+0x47e>
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	9a06      	ldr	r2, [sp, #24]
 8008cfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008cfe:	f001 ffa5 	bl	800ac4c <__mdiff>
 8008d02:	4683      	mov	fp, r0
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f43f ae72 	beq.w	80089ee <_strtod_l+0x47e>
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	68c3      	ldr	r3, [r0, #12]
 8008d0e:	9904      	ldr	r1, [sp, #16]
 8008d10:	60c4      	str	r4, [r0, #12]
 8008d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d14:	f001 ff7e 	bl	800ac14 <__mcmp>
 8008d18:	42a0      	cmp	r0, r4
 8008d1a:	da6b      	bge.n	8008df4 <_strtod_l+0x884>
 8008d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1e:	ea53 0308 	orrs.w	r3, r3, r8
 8008d22:	f040 8091 	bne.w	8008e48 <_strtod_l+0x8d8>
 8008d26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f040 808c 	bne.w	8008e48 <_strtod_l+0x8d8>
 8008d30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d34:	0d1b      	lsrs	r3, r3, #20
 8008d36:	051b      	lsls	r3, r3, #20
 8008d38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d3c:	f240 8084 	bls.w	8008e48 <_strtod_l+0x8d8>
 8008d40:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008d44:	b91b      	cbnz	r3, 8008d4e <_strtod_l+0x7de>
 8008d46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	dd7c      	ble.n	8008e48 <_strtod_l+0x8d8>
 8008d4e:	4659      	mov	r1, fp
 8008d50:	2201      	movs	r2, #1
 8008d52:	4650      	mov	r0, sl
 8008d54:	f001 feee 	bl	800ab34 <__lshift>
 8008d58:	9904      	ldr	r1, [sp, #16]
 8008d5a:	4683      	mov	fp, r0
 8008d5c:	f001 ff5a 	bl	800ac14 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dd71      	ble.n	8008e48 <_strtod_l+0x8d8>
 8008d64:	9905      	ldr	r1, [sp, #20]
 8008d66:	464b      	mov	r3, r9
 8008d68:	4a20      	ldr	r2, [pc, #128]	; (8008dec <_strtod_l+0x87c>)
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	f000 808c 	beq.w	8008e88 <_strtod_l+0x918>
 8008d70:	ea02 0109 	and.w	r1, r2, r9
 8008d74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d78:	f300 8086 	bgt.w	8008e88 <_strtod_l+0x918>
 8008d7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d80:	f77f aeaa 	ble.w	8008ad8 <_strtod_l+0x568>
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	4b19      	ldr	r3, [pc, #100]	; (8008df0 <_strtod_l+0x880>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f7f7 fc10 	bl	80005b0 <__aeabi_dmul>
 8008d90:	460b      	mov	r3, r1
 8008d92:	4303      	orrs	r3, r0
 8008d94:	bf08      	it	eq
 8008d96:	2322      	moveq	r3, #34	; 0x22
 8008d98:	4680      	mov	r8, r0
 8008d9a:	4689      	mov	r9, r1
 8008d9c:	bf08      	it	eq
 8008d9e:	f8ca 3000 	streq.w	r3, [sl]
 8008da2:	e62f      	b.n	8008a04 <_strtod_l+0x494>
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008da8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dac:	ea03 0808 	and.w	r8, r3, r8
 8008db0:	e6e0      	b.n	8008b74 <_strtod_l+0x604>
 8008db2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008db6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008dba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008dbe:	35e2      	adds	r5, #226	; 0xe2
 8008dc0:	fa07 f505 	lsl.w	r5, r7, r5
 8008dc4:	970f      	str	r7, [sp, #60]	; 0x3c
 8008dc6:	e747      	b.n	8008c58 <_strtod_l+0x6e8>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	2500      	movs	r5, #0
 8008dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dce:	e743      	b.n	8008c58 <_strtod_l+0x6e8>
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dd6:	f001 fead 	bl	800ab34 <__lshift>
 8008dda:	901a      	str	r0, [sp, #104]	; 0x68
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f47f af69 	bne.w	8008cb4 <_strtod_l+0x744>
 8008de2:	e604      	b.n	80089ee <_strtod_l+0x47e>
 8008de4:	0800db20 	.word	0x0800db20
 8008de8:	fffffc02 	.word	0xfffffc02
 8008dec:	7ff00000 	.word	0x7ff00000
 8008df0:	39500000 	.word	0x39500000
 8008df4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008df8:	d165      	bne.n	8008ec6 <_strtod_l+0x956>
 8008dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e00:	b35a      	cbz	r2, 8008e5a <_strtod_l+0x8ea>
 8008e02:	4a99      	ldr	r2, [pc, #612]	; (8009068 <_strtod_l+0xaf8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d12b      	bne.n	8008e60 <_strtod_l+0x8f0>
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	b303      	cbz	r3, 8008e50 <_strtod_l+0x8e0>
 8008e0e:	464a      	mov	r2, r9
 8008e10:	4b96      	ldr	r3, [pc, #600]	; (800906c <_strtod_l+0xafc>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e1c:	d81b      	bhi.n	8008e56 <_strtod_l+0x8e6>
 8008e1e:	0d1b      	lsrs	r3, r3, #20
 8008e20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e24:	fa02 f303 	lsl.w	r3, r2, r3
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	d119      	bne.n	8008e60 <_strtod_l+0x8f0>
 8008e2c:	4b90      	ldr	r3, [pc, #576]	; (8009070 <_strtod_l+0xb00>)
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d102      	bne.n	8008e3a <_strtod_l+0x8ca>
 8008e34:	3101      	adds	r1, #1
 8008e36:	f43f adda 	beq.w	80089ee <_strtod_l+0x47e>
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	4b8b      	ldr	r3, [pc, #556]	; (800906c <_strtod_l+0xafc>)
 8008e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e42:	401a      	ands	r2, r3
 8008e44:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008e48:	9b05      	ldr	r3, [sp, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d19a      	bne.n	8008d84 <_strtod_l+0x814>
 8008e4e:	e5d9      	b.n	8008a04 <_strtod_l+0x494>
 8008e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e54:	e7e8      	b.n	8008e28 <_strtod_l+0x8b8>
 8008e56:	4613      	mov	r3, r2
 8008e58:	e7e6      	b.n	8008e28 <_strtod_l+0x8b8>
 8008e5a:	ea53 0308 	orrs.w	r3, r3, r8
 8008e5e:	d081      	beq.n	8008d64 <_strtod_l+0x7f4>
 8008e60:	b1e5      	cbz	r5, 8008e9c <_strtod_l+0x92c>
 8008e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e64:	421d      	tst	r5, r3
 8008e66:	d0ef      	beq.n	8008e48 <_strtod_l+0x8d8>
 8008e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	9a05      	ldr	r2, [sp, #20]
 8008e70:	b1c3      	cbz	r3, 8008ea4 <_strtod_l+0x934>
 8008e72:	f7ff fb59 	bl	8008528 <sulp>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e7e:	f7f7 f9e1 	bl	8000244 <__adddf3>
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	e7df      	b.n	8008e48 <_strtod_l+0x8d8>
 8008e88:	4013      	ands	r3, r2
 8008e8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e8e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008e92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008e96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008e9a:	e7d5      	b.n	8008e48 <_strtod_l+0x8d8>
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e9e:	ea13 0f08 	tst.w	r3, r8
 8008ea2:	e7e0      	b.n	8008e66 <_strtod_l+0x8f6>
 8008ea4:	f7ff fb40 	bl	8008528 <sulp>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eb0:	f7f7 f9c6 	bl	8000240 <__aeabi_dsub>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4680      	mov	r8, r0
 8008eba:	4689      	mov	r9, r1
 8008ebc:	f7f7 fde0 	bl	8000a80 <__aeabi_dcmpeq>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d0c1      	beq.n	8008e48 <_strtod_l+0x8d8>
 8008ec4:	e608      	b.n	8008ad8 <_strtod_l+0x568>
 8008ec6:	4658      	mov	r0, fp
 8008ec8:	9904      	ldr	r1, [sp, #16]
 8008eca:	f002 f821 	bl	800af10 <__ratio>
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460f      	mov	r7, r1
 8008ed8:	f7f7 fde6 	bl	8000aa8 <__aeabi_dcmple>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d070      	beq.n	8008fc2 <_strtod_l+0xa52>
 8008ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d042      	beq.n	8008f6c <_strtod_l+0x9fc>
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	4f62      	ldr	r7, [pc, #392]	; (8009074 <_strtod_l+0xb04>)
 8008eea:	4d62      	ldr	r5, [pc, #392]	; (8009074 <_strtod_l+0xb04>)
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ef2:	0d1b      	lsrs	r3, r3, #20
 8008ef4:	051b      	lsls	r3, r3, #20
 8008ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008efa:	4b5f      	ldr	r3, [pc, #380]	; (8009078 <_strtod_l+0xb08>)
 8008efc:	429a      	cmp	r2, r3
 8008efe:	f040 80c3 	bne.w	8009088 <_strtod_l+0xb18>
 8008f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f04:	4640      	mov	r0, r8
 8008f06:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f001 ff2a 	bl	800ad64 <__ulp>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fb4a 	bl	80005b0 <__aeabi_dmul>
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	f7f7 f990 	bl	8000244 <__adddf3>
 8008f24:	460b      	mov	r3, r1
 8008f26:	4951      	ldr	r1, [pc, #324]	; (800906c <_strtod_l+0xafc>)
 8008f28:	4a54      	ldr	r2, [pc, #336]	; (800907c <_strtod_l+0xb0c>)
 8008f2a:	4019      	ands	r1, r3
 8008f2c:	4291      	cmp	r1, r2
 8008f2e:	4680      	mov	r8, r0
 8008f30:	d95d      	bls.n	8008fee <_strtod_l+0xa7e>
 8008f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f34:	4b4e      	ldr	r3, [pc, #312]	; (8009070 <_strtod_l+0xb00>)
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d103      	bne.n	8008f42 <_strtod_l+0x9d2>
 8008f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	f43f ad56 	beq.w	80089ee <_strtod_l+0x47e>
 8008f42:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008f46:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009070 <_strtod_l+0xb00>
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008f4e:	f001 fbd9 	bl	800a704 <_Bfree>
 8008f52:	4650      	mov	r0, sl
 8008f54:	9906      	ldr	r1, [sp, #24]
 8008f56:	f001 fbd5 	bl	800a704 <_Bfree>
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	9904      	ldr	r1, [sp, #16]
 8008f5e:	f001 fbd1 	bl	800a704 <_Bfree>
 8008f62:	4659      	mov	r1, fp
 8008f64:	4650      	mov	r0, sl
 8008f66:	f001 fbcd 	bl	800a704 <_Bfree>
 8008f6a:	e627      	b.n	8008bbc <_strtod_l+0x64c>
 8008f6c:	f1b8 0f00 	cmp.w	r8, #0
 8008f70:	d119      	bne.n	8008fa6 <_strtod_l+0xa36>
 8008f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f78:	b9e3      	cbnz	r3, 8008fb4 <_strtod_l+0xa44>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4b3c      	ldr	r3, [pc, #240]	; (8009074 <_strtod_l+0xb04>)
 8008f82:	f7f7 fd87 	bl	8000a94 <__aeabi_dcmplt>
 8008f86:	b9c8      	cbnz	r0, 8008fbc <_strtod_l+0xa4c>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	; (8009080 <_strtod_l+0xb10>)
 8008f90:	f7f7 fb0e 	bl	80005b0 <__aeabi_dmul>
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008f9c:	9416      	str	r4, [sp, #88]	; 0x58
 8008f9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fa0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008fa4:	e7a2      	b.n	8008eec <_strtod_l+0x97c>
 8008fa6:	f1b8 0f01 	cmp.w	r8, #1
 8008faa:	d103      	bne.n	8008fb4 <_strtod_l+0xa44>
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f43f ad92 	beq.w	8008ad8 <_strtod_l+0x568>
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	4f32      	ldr	r7, [pc, #200]	; (8009084 <_strtod_l+0xb14>)
 8008fba:	e796      	b.n	8008eea <_strtod_l+0x97a>
 8008fbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008fbe:	4d30      	ldr	r5, [pc, #192]	; (8009080 <_strtod_l+0xb10>)
 8008fc0:	e7ea      	b.n	8008f98 <_strtod_l+0xa28>
 8008fc2:	4b2f      	ldr	r3, [pc, #188]	; (8009080 <_strtod_l+0xb10>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	4639      	mov	r1, r7
 8008fca:	f7f7 faf1 	bl	80005b0 <__aeabi_dmul>
 8008fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_strtod_l+0xa74>
 8008fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fda:	9010      	str	r0, [sp, #64]	; 0x40
 8008fdc:	9311      	str	r3, [sp, #68]	; 0x44
 8008fde:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008fe2:	e783      	b.n	8008eec <_strtod_l+0x97c>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008fec:	e7f7      	b.n	8008fde <_strtod_l+0xa6e>
 8008fee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1a8      	bne.n	8008f4a <_strtod_l+0x9da>
 8008ff8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	051b      	lsls	r3, r3, #20
 8009002:	429a      	cmp	r2, r3
 8009004:	d1a1      	bne.n	8008f4a <_strtod_l+0x9da>
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fe19 	bl	8000c40 <__aeabi_d2lz>
 800900e:	f7f7 faa1 	bl	8000554 <__aeabi_l2d>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 f911 	bl	8000240 <__aeabi_dsub>
 800901e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009024:	ea43 0308 	orr.w	r3, r3, r8
 8009028:	4313      	orrs	r3, r2
 800902a:	4604      	mov	r4, r0
 800902c:	460d      	mov	r5, r1
 800902e:	d066      	beq.n	80090fe <_strtod_l+0xb8e>
 8009030:	a309      	add	r3, pc, #36	; (adr r3, 8009058 <_strtod_l+0xae8>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	f7f7 fd2d 	bl	8000a94 <__aeabi_dcmplt>
 800903a:	2800      	cmp	r0, #0
 800903c:	f47f ace2 	bne.w	8008a04 <_strtod_l+0x494>
 8009040:	a307      	add	r3, pc, #28	; (adr r3, 8009060 <_strtod_l+0xaf0>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	4620      	mov	r0, r4
 8009048:	4629      	mov	r1, r5
 800904a:	f7f7 fd41 	bl	8000ad0 <__aeabi_dcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f af7b 	beq.w	8008f4a <_strtod_l+0x9da>
 8009054:	e4d6      	b.n	8008a04 <_strtod_l+0x494>
 8009056:	bf00      	nop
 8009058:	94a03595 	.word	0x94a03595
 800905c:	3fdfffff 	.word	0x3fdfffff
 8009060:	35afe535 	.word	0x35afe535
 8009064:	3fe00000 	.word	0x3fe00000
 8009068:	000fffff 	.word	0x000fffff
 800906c:	7ff00000 	.word	0x7ff00000
 8009070:	7fefffff 	.word	0x7fefffff
 8009074:	3ff00000 	.word	0x3ff00000
 8009078:	7fe00000 	.word	0x7fe00000
 800907c:	7c9fffff 	.word	0x7c9fffff
 8009080:	3fe00000 	.word	0x3fe00000
 8009084:	bff00000 	.word	0xbff00000
 8009088:	9b05      	ldr	r3, [sp, #20]
 800908a:	b313      	cbz	r3, 80090d2 <_strtod_l+0xb62>
 800908c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800908e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009092:	d81e      	bhi.n	80090d2 <_strtod_l+0xb62>
 8009094:	a326      	add	r3, pc, #152	; (adr r3, 8009130 <_strtod_l+0xbc0>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f7f7 fd03 	bl	8000aa8 <__aeabi_dcmple>
 80090a2:	b190      	cbz	r0, 80090ca <_strtod_l+0xb5a>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7f7 fd5a 	bl	8000b60 <__aeabi_d2uiz>
 80090ac:	2801      	cmp	r0, #1
 80090ae:	bf38      	it	cc
 80090b0:	2001      	movcc	r0, #1
 80090b2:	f7f7 fa03 	bl	80004bc <__aeabi_ui2d>
 80090b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	b9d3      	cbnz	r3, 80090f4 <_strtod_l+0xb84>
 80090be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c2:	9012      	str	r0, [sp, #72]	; 0x48
 80090c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80090c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80090ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80090d0:	1a9f      	subs	r7, r3, r2
 80090d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090d6:	f001 fe45 	bl	800ad64 <__ulp>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 fa65 	bl	80005b0 <__aeabi_dmul>
 80090e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090ea:	f7f7 f8ab 	bl	8000244 <__adddf3>
 80090ee:	4680      	mov	r8, r0
 80090f0:	4689      	mov	r9, r1
 80090f2:	e77e      	b.n	8008ff2 <_strtod_l+0xa82>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80090fc:	e7e3      	b.n	80090c6 <_strtod_l+0xb56>
 80090fe:	a30e      	add	r3, pc, #56	; (adr r3, 8009138 <_strtod_l+0xbc8>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 fcc6 	bl	8000a94 <__aeabi_dcmplt>
 8009108:	e7a1      	b.n	800904e <_strtod_l+0xade>
 800910a:	2300      	movs	r3, #0
 800910c:	930a      	str	r3, [sp, #40]	; 0x28
 800910e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	f7ff ba71 	b.w	80085fa <_strtod_l+0x8a>
 8009118:	2a65      	cmp	r2, #101	; 0x65
 800911a:	f43f ab63 	beq.w	80087e4 <_strtod_l+0x274>
 800911e:	2a45      	cmp	r2, #69	; 0x45
 8009120:	f43f ab60 	beq.w	80087e4 <_strtod_l+0x274>
 8009124:	2301      	movs	r3, #1
 8009126:	f7ff bb95 	b.w	8008854 <_strtod_l+0x2e4>
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
 8009130:	ffc00000 	.word	0xffc00000
 8009134:	41dfffff 	.word	0x41dfffff
 8009138:	94a03595 	.word	0x94a03595
 800913c:	3fcfffff 	.word	0x3fcfffff

08009140 <_strtod_r>:
 8009140:	4b01      	ldr	r3, [pc, #4]	; (8009148 <_strtod_r+0x8>)
 8009142:	f7ff ba15 	b.w	8008570 <_strtod_l>
 8009146:	bf00      	nop
 8009148:	200000a8 	.word	0x200000a8

0800914c <_strtol_l.constprop.0>:
 800914c:	2b01      	cmp	r3, #1
 800914e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009152:	4680      	mov	r8, r0
 8009154:	d001      	beq.n	800915a <_strtol_l.constprop.0+0xe>
 8009156:	2b24      	cmp	r3, #36	; 0x24
 8009158:	d906      	bls.n	8009168 <_strtol_l.constprop.0+0x1c>
 800915a:	f7fe fa25 	bl	80075a8 <__errno>
 800915e:	2316      	movs	r3, #22
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	460d      	mov	r5, r1
 800916a:	4f35      	ldr	r7, [pc, #212]	; (8009240 <_strtol_l.constprop.0+0xf4>)
 800916c:	4628      	mov	r0, r5
 800916e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009172:	5de6      	ldrb	r6, [r4, r7]
 8009174:	f016 0608 	ands.w	r6, r6, #8
 8009178:	d1f8      	bne.n	800916c <_strtol_l.constprop.0+0x20>
 800917a:	2c2d      	cmp	r4, #45	; 0x2d
 800917c:	d12f      	bne.n	80091de <_strtol_l.constprop.0+0x92>
 800917e:	2601      	movs	r6, #1
 8009180:	782c      	ldrb	r4, [r5, #0]
 8009182:	1c85      	adds	r5, r0, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d057      	beq.n	8009238 <_strtol_l.constprop.0+0xec>
 8009188:	2b10      	cmp	r3, #16
 800918a:	d109      	bne.n	80091a0 <_strtol_l.constprop.0+0x54>
 800918c:	2c30      	cmp	r4, #48	; 0x30
 800918e:	d107      	bne.n	80091a0 <_strtol_l.constprop.0+0x54>
 8009190:	7828      	ldrb	r0, [r5, #0]
 8009192:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009196:	2858      	cmp	r0, #88	; 0x58
 8009198:	d149      	bne.n	800922e <_strtol_l.constprop.0+0xe2>
 800919a:	2310      	movs	r3, #16
 800919c:	786c      	ldrb	r4, [r5, #1]
 800919e:	3502      	adds	r5, #2
 80091a0:	2700      	movs	r7, #0
 80091a2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80091a6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80091aa:	fbbe f9f3 	udiv	r9, lr, r3
 80091ae:	4638      	mov	r0, r7
 80091b0:	fb03 ea19 	mls	sl, r3, r9, lr
 80091b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80091b8:	f1bc 0f09 	cmp.w	ip, #9
 80091bc:	d814      	bhi.n	80091e8 <_strtol_l.constprop.0+0x9c>
 80091be:	4664      	mov	r4, ip
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	dd22      	ble.n	800920a <_strtol_l.constprop.0+0xbe>
 80091c4:	2f00      	cmp	r7, #0
 80091c6:	db1d      	blt.n	8009204 <_strtol_l.constprop.0+0xb8>
 80091c8:	4581      	cmp	r9, r0
 80091ca:	d31b      	bcc.n	8009204 <_strtol_l.constprop.0+0xb8>
 80091cc:	d101      	bne.n	80091d2 <_strtol_l.constprop.0+0x86>
 80091ce:	45a2      	cmp	sl, r4
 80091d0:	db18      	blt.n	8009204 <_strtol_l.constprop.0+0xb8>
 80091d2:	2701      	movs	r7, #1
 80091d4:	fb00 4003 	mla	r0, r0, r3, r4
 80091d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091dc:	e7ea      	b.n	80091b4 <_strtol_l.constprop.0+0x68>
 80091de:	2c2b      	cmp	r4, #43	; 0x2b
 80091e0:	bf04      	itt	eq
 80091e2:	782c      	ldrbeq	r4, [r5, #0]
 80091e4:	1c85      	addeq	r5, r0, #2
 80091e6:	e7cd      	b.n	8009184 <_strtol_l.constprop.0+0x38>
 80091e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80091ec:	f1bc 0f19 	cmp.w	ip, #25
 80091f0:	d801      	bhi.n	80091f6 <_strtol_l.constprop.0+0xaa>
 80091f2:	3c37      	subs	r4, #55	; 0x37
 80091f4:	e7e4      	b.n	80091c0 <_strtol_l.constprop.0+0x74>
 80091f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80091fa:	f1bc 0f19 	cmp.w	ip, #25
 80091fe:	d804      	bhi.n	800920a <_strtol_l.constprop.0+0xbe>
 8009200:	3c57      	subs	r4, #87	; 0x57
 8009202:	e7dd      	b.n	80091c0 <_strtol_l.constprop.0+0x74>
 8009204:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009208:	e7e6      	b.n	80091d8 <_strtol_l.constprop.0+0x8c>
 800920a:	2f00      	cmp	r7, #0
 800920c:	da07      	bge.n	800921e <_strtol_l.constprop.0+0xd2>
 800920e:	2322      	movs	r3, #34	; 0x22
 8009210:	4670      	mov	r0, lr
 8009212:	f8c8 3000 	str.w	r3, [r8]
 8009216:	2a00      	cmp	r2, #0
 8009218:	d0a4      	beq.n	8009164 <_strtol_l.constprop.0+0x18>
 800921a:	1e69      	subs	r1, r5, #1
 800921c:	e005      	b.n	800922a <_strtol_l.constprop.0+0xde>
 800921e:	b106      	cbz	r6, 8009222 <_strtol_l.constprop.0+0xd6>
 8009220:	4240      	negs	r0, r0
 8009222:	2a00      	cmp	r2, #0
 8009224:	d09e      	beq.n	8009164 <_strtol_l.constprop.0+0x18>
 8009226:	2f00      	cmp	r7, #0
 8009228:	d1f7      	bne.n	800921a <_strtol_l.constprop.0+0xce>
 800922a:	6011      	str	r1, [r2, #0]
 800922c:	e79a      	b.n	8009164 <_strtol_l.constprop.0+0x18>
 800922e:	2430      	movs	r4, #48	; 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1b5      	bne.n	80091a0 <_strtol_l.constprop.0+0x54>
 8009234:	2308      	movs	r3, #8
 8009236:	e7b3      	b.n	80091a0 <_strtol_l.constprop.0+0x54>
 8009238:	2c30      	cmp	r4, #48	; 0x30
 800923a:	d0a9      	beq.n	8009190 <_strtol_l.constprop.0+0x44>
 800923c:	230a      	movs	r3, #10
 800923e:	e7af      	b.n	80091a0 <_strtol_l.constprop.0+0x54>
 8009240:	0800db49 	.word	0x0800db49

08009244 <_strtol_r>:
 8009244:	f7ff bf82 	b.w	800914c <_strtol_l.constprop.0>

08009248 <quorem>:
 8009248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	6903      	ldr	r3, [r0, #16]
 800924e:	690c      	ldr	r4, [r1, #16]
 8009250:	4607      	mov	r7, r0
 8009252:	42a3      	cmp	r3, r4
 8009254:	f2c0 8082 	blt.w	800935c <quorem+0x114>
 8009258:	3c01      	subs	r4, #1
 800925a:	f100 0514 	add.w	r5, r0, #20
 800925e:	f101 0814 	add.w	r8, r1, #20
 8009262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800926c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009270:	3301      	adds	r3, #1
 8009272:	429a      	cmp	r2, r3
 8009274:	fbb2 f6f3 	udiv	r6, r2, r3
 8009278:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800927c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009280:	d331      	bcc.n	80092e6 <quorem+0x9e>
 8009282:	f04f 0e00 	mov.w	lr, #0
 8009286:	4640      	mov	r0, r8
 8009288:	46ac      	mov	ip, r5
 800928a:	46f2      	mov	sl, lr
 800928c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009290:	b293      	uxth	r3, r2
 8009292:	fb06 e303 	mla	r3, r6, r3, lr
 8009296:	0c12      	lsrs	r2, r2, #16
 8009298:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800929c:	b29b      	uxth	r3, r3
 800929e:	fb06 e202 	mla	r2, r6, r2, lr
 80092a2:	ebaa 0303 	sub.w	r3, sl, r3
 80092a6:	f8dc a000 	ldr.w	sl, [ip]
 80092aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092ae:	fa1f fa8a 	uxth.w	sl, sl
 80092b2:	4453      	add	r3, sl
 80092b4:	f8dc a000 	ldr.w	sl, [ip]
 80092b8:	b292      	uxth	r2, r2
 80092ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092c8:	4581      	cmp	r9, r0
 80092ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092ce:	f84c 3b04 	str.w	r3, [ip], #4
 80092d2:	d2db      	bcs.n	800928c <quorem+0x44>
 80092d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80092d8:	b92b      	cbnz	r3, 80092e6 <quorem+0x9e>
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	3b04      	subs	r3, #4
 80092de:	429d      	cmp	r5, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	d32f      	bcc.n	8009344 <quorem+0xfc>
 80092e4:	613c      	str	r4, [r7, #16]
 80092e6:	4638      	mov	r0, r7
 80092e8:	f001 fc94 	bl	800ac14 <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	db25      	blt.n	800933c <quorem+0xf4>
 80092f0:	4628      	mov	r0, r5
 80092f2:	f04f 0c00 	mov.w	ip, #0
 80092f6:	3601      	adds	r6, #1
 80092f8:	f858 1b04 	ldr.w	r1, [r8], #4
 80092fc:	f8d0 e000 	ldr.w	lr, [r0]
 8009300:	b28b      	uxth	r3, r1
 8009302:	ebac 0303 	sub.w	r3, ip, r3
 8009306:	fa1f f28e 	uxth.w	r2, lr
 800930a:	4413      	add	r3, r2
 800930c:	0c0a      	lsrs	r2, r1, #16
 800930e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009312:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009316:	b29b      	uxth	r3, r3
 8009318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800931c:	45c1      	cmp	r9, r8
 800931e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009322:	f840 3b04 	str.w	r3, [r0], #4
 8009326:	d2e7      	bcs.n	80092f8 <quorem+0xb0>
 8009328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800932c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009330:	b922      	cbnz	r2, 800933c <quorem+0xf4>
 8009332:	3b04      	subs	r3, #4
 8009334:	429d      	cmp	r5, r3
 8009336:	461a      	mov	r2, r3
 8009338:	d30a      	bcc.n	8009350 <quorem+0x108>
 800933a:	613c      	str	r4, [r7, #16]
 800933c:	4630      	mov	r0, r6
 800933e:	b003      	add	sp, #12
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	3b04      	subs	r3, #4
 8009348:	2a00      	cmp	r2, #0
 800934a:	d1cb      	bne.n	80092e4 <quorem+0x9c>
 800934c:	3c01      	subs	r4, #1
 800934e:	e7c6      	b.n	80092de <quorem+0x96>
 8009350:	6812      	ldr	r2, [r2, #0]
 8009352:	3b04      	subs	r3, #4
 8009354:	2a00      	cmp	r2, #0
 8009356:	d1f0      	bne.n	800933a <quorem+0xf2>
 8009358:	3c01      	subs	r4, #1
 800935a:	e7eb      	b.n	8009334 <quorem+0xec>
 800935c:	2000      	movs	r0, #0
 800935e:	e7ee      	b.n	800933e <quorem+0xf6>

08009360 <_dtoa_r>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	4616      	mov	r6, r2
 8009366:	461f      	mov	r7, r3
 8009368:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800936a:	b099      	sub	sp, #100	; 0x64
 800936c:	4605      	mov	r5, r0
 800936e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009372:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009376:	b974      	cbnz	r4, 8009396 <_dtoa_r+0x36>
 8009378:	2010      	movs	r0, #16
 800937a:	f7fe f93f 	bl	80075fc <malloc>
 800937e:	4602      	mov	r2, r0
 8009380:	6268      	str	r0, [r5, #36]	; 0x24
 8009382:	b920      	cbnz	r0, 800938e <_dtoa_r+0x2e>
 8009384:	21ea      	movs	r1, #234	; 0xea
 8009386:	4ba8      	ldr	r3, [pc, #672]	; (8009628 <_dtoa_r+0x2c8>)
 8009388:	48a8      	ldr	r0, [pc, #672]	; (800962c <_dtoa_r+0x2cc>)
 800938a:	f001 ffcb 	bl	800b324 <__assert_func>
 800938e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009392:	6004      	str	r4, [r0, #0]
 8009394:	60c4      	str	r4, [r0, #12]
 8009396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009398:	6819      	ldr	r1, [r3, #0]
 800939a:	b151      	cbz	r1, 80093b2 <_dtoa_r+0x52>
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	2301      	movs	r3, #1
 80093a0:	4093      	lsls	r3, r2
 80093a2:	604a      	str	r2, [r1, #4]
 80093a4:	608b      	str	r3, [r1, #8]
 80093a6:	4628      	mov	r0, r5
 80093a8:	f001 f9ac 	bl	800a704 <_Bfree>
 80093ac:	2200      	movs	r2, #0
 80093ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	1e3b      	subs	r3, r7, #0
 80093b4:	bfaf      	iteee	ge
 80093b6:	2300      	movge	r3, #0
 80093b8:	2201      	movlt	r2, #1
 80093ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093be:	9305      	strlt	r3, [sp, #20]
 80093c0:	bfa8      	it	ge
 80093c2:	f8c8 3000 	strge.w	r3, [r8]
 80093c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80093ca:	4b99      	ldr	r3, [pc, #612]	; (8009630 <_dtoa_r+0x2d0>)
 80093cc:	bfb8      	it	lt
 80093ce:	f8c8 2000 	strlt.w	r2, [r8]
 80093d2:	ea33 0309 	bics.w	r3, r3, r9
 80093d6:	d119      	bne.n	800940c <_dtoa_r+0xac>
 80093d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80093dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093e4:	4333      	orrs	r3, r6
 80093e6:	f000 857f 	beq.w	8009ee8 <_dtoa_r+0xb88>
 80093ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093ec:	b953      	cbnz	r3, 8009404 <_dtoa_r+0xa4>
 80093ee:	4b91      	ldr	r3, [pc, #580]	; (8009634 <_dtoa_r+0x2d4>)
 80093f0:	e022      	b.n	8009438 <_dtoa_r+0xd8>
 80093f2:	4b91      	ldr	r3, [pc, #580]	; (8009638 <_dtoa_r+0x2d8>)
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	3308      	adds	r3, #8
 80093f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	9803      	ldr	r0, [sp, #12]
 80093fe:	b019      	add	sp, #100	; 0x64
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	4b8b      	ldr	r3, [pc, #556]	; (8009634 <_dtoa_r+0x2d4>)
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	3303      	adds	r3, #3
 800940a:	e7f5      	b.n	80093f8 <_dtoa_r+0x98>
 800940c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009410:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	f7f7 fb30 	bl	8000a80 <__aeabi_dcmpeq>
 8009420:	4680      	mov	r8, r0
 8009422:	b158      	cbz	r0, 800943c <_dtoa_r+0xdc>
 8009424:	2301      	movs	r3, #1
 8009426:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 8558 	beq.w	8009ee2 <_dtoa_r+0xb82>
 8009432:	4882      	ldr	r0, [pc, #520]	; (800963c <_dtoa_r+0x2dc>)
 8009434:	6018      	str	r0, [r3, #0]
 8009436:	1e43      	subs	r3, r0, #1
 8009438:	9303      	str	r3, [sp, #12]
 800943a:	e7df      	b.n	80093fc <_dtoa_r+0x9c>
 800943c:	ab16      	add	r3, sp, #88	; 0x58
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	ab17      	add	r3, sp, #92	; 0x5c
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	4628      	mov	r0, r5
 8009446:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800944a:	f001 fd05 	bl	800ae58 <__d2b>
 800944e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009452:	4683      	mov	fp, r0
 8009454:	2c00      	cmp	r4, #0
 8009456:	d07f      	beq.n	8009558 <_dtoa_r+0x1f8>
 8009458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800945c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800945e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009466:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800946a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800946e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009472:	2200      	movs	r2, #0
 8009474:	4b72      	ldr	r3, [pc, #456]	; (8009640 <_dtoa_r+0x2e0>)
 8009476:	f7f6 fee3 	bl	8000240 <__aeabi_dsub>
 800947a:	a365      	add	r3, pc, #404	; (adr r3, 8009610 <_dtoa_r+0x2b0>)
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f7 f896 	bl	80005b0 <__aeabi_dmul>
 8009484:	a364      	add	r3, pc, #400	; (adr r3, 8009618 <_dtoa_r+0x2b8>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f6 fedb 	bl	8000244 <__adddf3>
 800948e:	4606      	mov	r6, r0
 8009490:	4620      	mov	r0, r4
 8009492:	460f      	mov	r7, r1
 8009494:	f7f7 f822 	bl	80004dc <__aeabi_i2d>
 8009498:	a361      	add	r3, pc, #388	; (adr r3, 8009620 <_dtoa_r+0x2c0>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f7 f887 	bl	80005b0 <__aeabi_dmul>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f6 fecb 	bl	8000244 <__adddf3>
 80094ae:	4606      	mov	r6, r0
 80094b0:	460f      	mov	r7, r1
 80094b2:	f7f7 fb2d 	bl	8000b10 <__aeabi_d2iz>
 80094b6:	2200      	movs	r2, #0
 80094b8:	4682      	mov	sl, r0
 80094ba:	2300      	movs	r3, #0
 80094bc:	4630      	mov	r0, r6
 80094be:	4639      	mov	r1, r7
 80094c0:	f7f7 fae8 	bl	8000a94 <__aeabi_dcmplt>
 80094c4:	b148      	cbz	r0, 80094da <_dtoa_r+0x17a>
 80094c6:	4650      	mov	r0, sl
 80094c8:	f7f7 f808 	bl	80004dc <__aeabi_i2d>
 80094cc:	4632      	mov	r2, r6
 80094ce:	463b      	mov	r3, r7
 80094d0:	f7f7 fad6 	bl	8000a80 <__aeabi_dcmpeq>
 80094d4:	b908      	cbnz	r0, 80094da <_dtoa_r+0x17a>
 80094d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094da:	f1ba 0f16 	cmp.w	sl, #22
 80094de:	d858      	bhi.n	8009592 <_dtoa_r+0x232>
 80094e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094e4:	4b57      	ldr	r3, [pc, #348]	; (8009644 <_dtoa_r+0x2e4>)
 80094e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 fad1 	bl	8000a94 <__aeabi_dcmplt>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d04f      	beq.n	8009596 <_dtoa_r+0x236>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009500:	1b1c      	subs	r4, r3, r4
 8009502:	1e63      	subs	r3, r4, #1
 8009504:	9309      	str	r3, [sp, #36]	; 0x24
 8009506:	bf49      	itett	mi
 8009508:	f1c4 0301 	rsbmi	r3, r4, #1
 800950c:	2300      	movpl	r3, #0
 800950e:	9306      	strmi	r3, [sp, #24]
 8009510:	2300      	movmi	r3, #0
 8009512:	bf54      	ite	pl
 8009514:	9306      	strpl	r3, [sp, #24]
 8009516:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009518:	f1ba 0f00 	cmp.w	sl, #0
 800951c:	db3d      	blt.n	800959a <_dtoa_r+0x23a>
 800951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009520:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009524:	4453      	add	r3, sl
 8009526:	9309      	str	r3, [sp, #36]	; 0x24
 8009528:	2300      	movs	r3, #0
 800952a:	930a      	str	r3, [sp, #40]	; 0x28
 800952c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800952e:	2b09      	cmp	r3, #9
 8009530:	f200 808c 	bhi.w	800964c <_dtoa_r+0x2ec>
 8009534:	2b05      	cmp	r3, #5
 8009536:	bfc4      	itt	gt
 8009538:	3b04      	subgt	r3, #4
 800953a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800953c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800953e:	bfc8      	it	gt
 8009540:	2400      	movgt	r4, #0
 8009542:	f1a3 0302 	sub.w	r3, r3, #2
 8009546:	bfd8      	it	le
 8009548:	2401      	movle	r4, #1
 800954a:	2b03      	cmp	r3, #3
 800954c:	f200 808a 	bhi.w	8009664 <_dtoa_r+0x304>
 8009550:	e8df f003 	tbb	[pc, r3]
 8009554:	5b4d4f2d 	.word	0x5b4d4f2d
 8009558:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800955c:	441c      	add	r4, r3
 800955e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009562:	2b20      	cmp	r3, #32
 8009564:	bfc3      	ittte	gt
 8009566:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800956a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800956e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009572:	f1c3 0320 	rsble	r3, r3, #32
 8009576:	bfc6      	itte	gt
 8009578:	fa26 f000 	lsrgt.w	r0, r6, r0
 800957c:	4318      	orrgt	r0, r3
 800957e:	fa06 f003 	lslle.w	r0, r6, r3
 8009582:	f7f6 ff9b 	bl	80004bc <__aeabi_ui2d>
 8009586:	2301      	movs	r3, #1
 8009588:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800958c:	3c01      	subs	r4, #1
 800958e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009590:	e76f      	b.n	8009472 <_dtoa_r+0x112>
 8009592:	2301      	movs	r3, #1
 8009594:	e7b2      	b.n	80094fc <_dtoa_r+0x19c>
 8009596:	900f      	str	r0, [sp, #60]	; 0x3c
 8009598:	e7b1      	b.n	80094fe <_dtoa_r+0x19e>
 800959a:	9b06      	ldr	r3, [sp, #24]
 800959c:	eba3 030a 	sub.w	r3, r3, sl
 80095a0:	9306      	str	r3, [sp, #24]
 80095a2:	f1ca 0300 	rsb	r3, sl, #0
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	2300      	movs	r3, #0
 80095aa:	930e      	str	r3, [sp, #56]	; 0x38
 80095ac:	e7be      	b.n	800952c <_dtoa_r+0x1cc>
 80095ae:	2300      	movs	r3, #0
 80095b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dc58      	bgt.n	800966a <_dtoa_r+0x30a>
 80095b8:	f04f 0901 	mov.w	r9, #1
 80095bc:	464b      	mov	r3, r9
 80095be:	f8cd 9020 	str.w	r9, [sp, #32]
 80095c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80095c6:	2200      	movs	r2, #0
 80095c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80095ca:	6042      	str	r2, [r0, #4]
 80095cc:	2204      	movs	r2, #4
 80095ce:	f102 0614 	add.w	r6, r2, #20
 80095d2:	429e      	cmp	r6, r3
 80095d4:	6841      	ldr	r1, [r0, #4]
 80095d6:	d94e      	bls.n	8009676 <_dtoa_r+0x316>
 80095d8:	4628      	mov	r0, r5
 80095da:	f001 f853 	bl	800a684 <_Balloc>
 80095de:	9003      	str	r0, [sp, #12]
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d14c      	bne.n	800967e <_dtoa_r+0x31e>
 80095e4:	4602      	mov	r2, r0
 80095e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095ea:	4b17      	ldr	r3, [pc, #92]	; (8009648 <_dtoa_r+0x2e8>)
 80095ec:	e6cc      	b.n	8009388 <_dtoa_r+0x28>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e7de      	b.n	80095b0 <_dtoa_r+0x250>
 80095f2:	2300      	movs	r3, #0
 80095f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095f8:	eb0a 0903 	add.w	r9, sl, r3
 80095fc:	f109 0301 	add.w	r3, r9, #1
 8009600:	2b01      	cmp	r3, #1
 8009602:	9308      	str	r3, [sp, #32]
 8009604:	bfb8      	it	lt
 8009606:	2301      	movlt	r3, #1
 8009608:	e7dd      	b.n	80095c6 <_dtoa_r+0x266>
 800960a:	2301      	movs	r3, #1
 800960c:	e7f2      	b.n	80095f4 <_dtoa_r+0x294>
 800960e:	bf00      	nop
 8009610:	636f4361 	.word	0x636f4361
 8009614:	3fd287a7 	.word	0x3fd287a7
 8009618:	8b60c8b3 	.word	0x8b60c8b3
 800961c:	3fc68a28 	.word	0x3fc68a28
 8009620:	509f79fb 	.word	0x509f79fb
 8009624:	3fd34413 	.word	0x3fd34413
 8009628:	0800dc56 	.word	0x0800dc56
 800962c:	0800dc6d 	.word	0x0800dc6d
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	0800dc52 	.word	0x0800dc52
 8009638:	0800dc49 	.word	0x0800dc49
 800963c:	0800dac9 	.word	0x0800dac9
 8009640:	3ff80000 	.word	0x3ff80000
 8009644:	0800ddd8 	.word	0x0800ddd8
 8009648:	0800dcc8 	.word	0x0800dcc8
 800964c:	2401      	movs	r4, #1
 800964e:	2300      	movs	r3, #0
 8009650:	940b      	str	r4, [sp, #44]	; 0x2c
 8009652:	9322      	str	r3, [sp, #136]	; 0x88
 8009654:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009658:	2200      	movs	r2, #0
 800965a:	2312      	movs	r3, #18
 800965c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009660:	9223      	str	r2, [sp, #140]	; 0x8c
 8009662:	e7b0      	b.n	80095c6 <_dtoa_r+0x266>
 8009664:	2301      	movs	r3, #1
 8009666:	930b      	str	r3, [sp, #44]	; 0x2c
 8009668:	e7f4      	b.n	8009654 <_dtoa_r+0x2f4>
 800966a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800966e:	464b      	mov	r3, r9
 8009670:	f8cd 9020 	str.w	r9, [sp, #32]
 8009674:	e7a7      	b.n	80095c6 <_dtoa_r+0x266>
 8009676:	3101      	adds	r1, #1
 8009678:	6041      	str	r1, [r0, #4]
 800967a:	0052      	lsls	r2, r2, #1
 800967c:	e7a7      	b.n	80095ce <_dtoa_r+0x26e>
 800967e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009680:	9a03      	ldr	r2, [sp, #12]
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	9b08      	ldr	r3, [sp, #32]
 8009686:	2b0e      	cmp	r3, #14
 8009688:	f200 80a8 	bhi.w	80097dc <_dtoa_r+0x47c>
 800968c:	2c00      	cmp	r4, #0
 800968e:	f000 80a5 	beq.w	80097dc <_dtoa_r+0x47c>
 8009692:	f1ba 0f00 	cmp.w	sl, #0
 8009696:	dd34      	ble.n	8009702 <_dtoa_r+0x3a2>
 8009698:	4a9a      	ldr	r2, [pc, #616]	; (8009904 <_dtoa_r+0x5a4>)
 800969a:	f00a 030f 	and.w	r3, sl, #15
 800969e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80096a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80096aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80096ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80096b2:	d016      	beq.n	80096e2 <_dtoa_r+0x382>
 80096b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096b8:	4b93      	ldr	r3, [pc, #588]	; (8009908 <_dtoa_r+0x5a8>)
 80096ba:	2703      	movs	r7, #3
 80096bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096c0:	f7f7 f8a0 	bl	8000804 <__aeabi_ddiv>
 80096c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096c8:	f004 040f 	and.w	r4, r4, #15
 80096cc:	4e8e      	ldr	r6, [pc, #568]	; (8009908 <_dtoa_r+0x5a8>)
 80096ce:	b954      	cbnz	r4, 80096e6 <_dtoa_r+0x386>
 80096d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096d8:	f7f7 f894 	bl	8000804 <__aeabi_ddiv>
 80096dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096e0:	e029      	b.n	8009736 <_dtoa_r+0x3d6>
 80096e2:	2702      	movs	r7, #2
 80096e4:	e7f2      	b.n	80096cc <_dtoa_r+0x36c>
 80096e6:	07e1      	lsls	r1, r4, #31
 80096e8:	d508      	bpl.n	80096fc <_dtoa_r+0x39c>
 80096ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096f2:	f7f6 ff5d 	bl	80005b0 <__aeabi_dmul>
 80096f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096fa:	3701      	adds	r7, #1
 80096fc:	1064      	asrs	r4, r4, #1
 80096fe:	3608      	adds	r6, #8
 8009700:	e7e5      	b.n	80096ce <_dtoa_r+0x36e>
 8009702:	f000 80a5 	beq.w	8009850 <_dtoa_r+0x4f0>
 8009706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800970a:	f1ca 0400 	rsb	r4, sl, #0
 800970e:	4b7d      	ldr	r3, [pc, #500]	; (8009904 <_dtoa_r+0x5a4>)
 8009710:	f004 020f 	and.w	r2, r4, #15
 8009714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 ff48 	bl	80005b0 <__aeabi_dmul>
 8009720:	2702      	movs	r7, #2
 8009722:	2300      	movs	r3, #0
 8009724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009728:	4e77      	ldr	r6, [pc, #476]	; (8009908 <_dtoa_r+0x5a8>)
 800972a:	1124      	asrs	r4, r4, #4
 800972c:	2c00      	cmp	r4, #0
 800972e:	f040 8084 	bne.w	800983a <_dtoa_r+0x4da>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1d2      	bne.n	80096dc <_dtoa_r+0x37c>
 8009736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 808b 	beq.w	8009854 <_dtoa_r+0x4f4>
 800973e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009742:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800974a:	2200      	movs	r2, #0
 800974c:	4b6f      	ldr	r3, [pc, #444]	; (800990c <_dtoa_r+0x5ac>)
 800974e:	f7f7 f9a1 	bl	8000a94 <__aeabi_dcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	d07e      	beq.n	8009854 <_dtoa_r+0x4f4>
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d07b      	beq.n	8009854 <_dtoa_r+0x4f4>
 800975c:	f1b9 0f00 	cmp.w	r9, #0
 8009760:	dd38      	ble.n	80097d4 <_dtoa_r+0x474>
 8009762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009766:	2200      	movs	r2, #0
 8009768:	4b69      	ldr	r3, [pc, #420]	; (8009910 <_dtoa_r+0x5b0>)
 800976a:	f7f6 ff21 	bl	80005b0 <__aeabi_dmul>
 800976e:	464c      	mov	r4, r9
 8009770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009774:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8009778:	3701      	adds	r7, #1
 800977a:	4638      	mov	r0, r7
 800977c:	f7f6 feae 	bl	80004dc <__aeabi_i2d>
 8009780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009784:	f7f6 ff14 	bl	80005b0 <__aeabi_dmul>
 8009788:	2200      	movs	r2, #0
 800978a:	4b62      	ldr	r3, [pc, #392]	; (8009914 <_dtoa_r+0x5b4>)
 800978c:	f7f6 fd5a 	bl	8000244 <__adddf3>
 8009790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009794:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009798:	9611      	str	r6, [sp, #68]	; 0x44
 800979a:	2c00      	cmp	r4, #0
 800979c:	d15d      	bne.n	800985a <_dtoa_r+0x4fa>
 800979e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	4b5c      	ldr	r3, [pc, #368]	; (8009918 <_dtoa_r+0x5b8>)
 80097a6:	f7f6 fd4b 	bl	8000240 <__aeabi_dsub>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097b2:	4633      	mov	r3, r6
 80097b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097b6:	f7f7 f98b 	bl	8000ad0 <__aeabi_dcmpgt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f040 829c 	bne.w	8009cf8 <_dtoa_r+0x998>
 80097c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80097ca:	f7f7 f963 	bl	8000a94 <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f040 8290 	bne.w	8009cf4 <_dtoa_r+0x994>
 80097d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80097d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f2c0 8152 	blt.w	8009a88 <_dtoa_r+0x728>
 80097e4:	f1ba 0f0e 	cmp.w	sl, #14
 80097e8:	f300 814e 	bgt.w	8009a88 <_dtoa_r+0x728>
 80097ec:	4b45      	ldr	r3, [pc, #276]	; (8009904 <_dtoa_r+0x5a4>)
 80097ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80097fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f280 80db 	bge.w	80099b8 <_dtoa_r+0x658>
 8009802:	9b08      	ldr	r3, [sp, #32]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f300 80d7 	bgt.w	80099b8 <_dtoa_r+0x658>
 800980a:	f040 8272 	bne.w	8009cf2 <_dtoa_r+0x992>
 800980e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009812:	2200      	movs	r2, #0
 8009814:	4b40      	ldr	r3, [pc, #256]	; (8009918 <_dtoa_r+0x5b8>)
 8009816:	f7f6 fecb 	bl	80005b0 <__aeabi_dmul>
 800981a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981e:	f7f7 f94d 	bl	8000abc <__aeabi_dcmpge>
 8009822:	9c08      	ldr	r4, [sp, #32]
 8009824:	4626      	mov	r6, r4
 8009826:	2800      	cmp	r0, #0
 8009828:	f040 8248 	bne.w	8009cbc <_dtoa_r+0x95c>
 800982c:	2331      	movs	r3, #49	; 0x31
 800982e:	9f03      	ldr	r7, [sp, #12]
 8009830:	f10a 0a01 	add.w	sl, sl, #1
 8009834:	f807 3b01 	strb.w	r3, [r7], #1
 8009838:	e244      	b.n	8009cc4 <_dtoa_r+0x964>
 800983a:	07e2      	lsls	r2, r4, #31
 800983c:	d505      	bpl.n	800984a <_dtoa_r+0x4ea>
 800983e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009842:	f7f6 feb5 	bl	80005b0 <__aeabi_dmul>
 8009846:	2301      	movs	r3, #1
 8009848:	3701      	adds	r7, #1
 800984a:	1064      	asrs	r4, r4, #1
 800984c:	3608      	adds	r6, #8
 800984e:	e76d      	b.n	800972c <_dtoa_r+0x3cc>
 8009850:	2702      	movs	r7, #2
 8009852:	e770      	b.n	8009736 <_dtoa_r+0x3d6>
 8009854:	46d0      	mov	r8, sl
 8009856:	9c08      	ldr	r4, [sp, #32]
 8009858:	e78f      	b.n	800977a <_dtoa_r+0x41a>
 800985a:	9903      	ldr	r1, [sp, #12]
 800985c:	4b29      	ldr	r3, [pc, #164]	; (8009904 <_dtoa_r+0x5a4>)
 800985e:	4421      	add	r1, r4
 8009860:	9112      	str	r1, [sp, #72]	; 0x48
 8009862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009868:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800986c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009870:	2900      	cmp	r1, #0
 8009872:	d055      	beq.n	8009920 <_dtoa_r+0x5c0>
 8009874:	2000      	movs	r0, #0
 8009876:	4929      	ldr	r1, [pc, #164]	; (800991c <_dtoa_r+0x5bc>)
 8009878:	f7f6 ffc4 	bl	8000804 <__aeabi_ddiv>
 800987c:	463b      	mov	r3, r7
 800987e:	4632      	mov	r2, r6
 8009880:	f7f6 fcde 	bl	8000240 <__aeabi_dsub>
 8009884:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009888:	9f03      	ldr	r7, [sp, #12]
 800988a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800988e:	f7f7 f93f 	bl	8000b10 <__aeabi_d2iz>
 8009892:	4604      	mov	r4, r0
 8009894:	f7f6 fe22 	bl	80004dc <__aeabi_i2d>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a0:	f7f6 fcce 	bl	8000240 <__aeabi_dsub>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	3430      	adds	r4, #48	; 0x30
 80098aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098b2:	f807 4b01 	strb.w	r4, [r7], #1
 80098b6:	f7f7 f8ed 	bl	8000a94 <__aeabi_dcmplt>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d174      	bne.n	80099a8 <_dtoa_r+0x648>
 80098be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c2:	2000      	movs	r0, #0
 80098c4:	4911      	ldr	r1, [pc, #68]	; (800990c <_dtoa_r+0x5ac>)
 80098c6:	f7f6 fcbb 	bl	8000240 <__aeabi_dsub>
 80098ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ce:	f7f7 f8e1 	bl	8000a94 <__aeabi_dcmplt>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f040 80b7 	bne.w	8009a46 <_dtoa_r+0x6e6>
 80098d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098da:	429f      	cmp	r7, r3
 80098dc:	f43f af7a 	beq.w	80097d4 <_dtoa_r+0x474>
 80098e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098e4:	2200      	movs	r2, #0
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <_dtoa_r+0x5b0>)
 80098e8:	f7f6 fe62 	bl	80005b0 <__aeabi_dmul>
 80098ec:	2200      	movs	r2, #0
 80098ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f6:	4b06      	ldr	r3, [pc, #24]	; (8009910 <_dtoa_r+0x5b0>)
 80098f8:	f7f6 fe5a 	bl	80005b0 <__aeabi_dmul>
 80098fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009900:	e7c3      	b.n	800988a <_dtoa_r+0x52a>
 8009902:	bf00      	nop
 8009904:	0800ddd8 	.word	0x0800ddd8
 8009908:	0800ddb0 	.word	0x0800ddb0
 800990c:	3ff00000 	.word	0x3ff00000
 8009910:	40240000 	.word	0x40240000
 8009914:	401c0000 	.word	0x401c0000
 8009918:	40140000 	.word	0x40140000
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	f7f6 fe44 	bl	80005b0 <__aeabi_dmul>
 8009928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800992a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800992e:	9c03      	ldr	r4, [sp, #12]
 8009930:	9314      	str	r3, [sp, #80]	; 0x50
 8009932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009936:	f7f7 f8eb 	bl	8000b10 <__aeabi_d2iz>
 800993a:	9015      	str	r0, [sp, #84]	; 0x54
 800993c:	f7f6 fdce 	bl	80004dc <__aeabi_i2d>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009948:	f7f6 fc7a 	bl	8000240 <__aeabi_dsub>
 800994c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800994e:	4606      	mov	r6, r0
 8009950:	3330      	adds	r3, #48	; 0x30
 8009952:	f804 3b01 	strb.w	r3, [r4], #1
 8009956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009958:	460f      	mov	r7, r1
 800995a:	429c      	cmp	r4, r3
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	d124      	bne.n	80099ac <_dtoa_r+0x64c>
 8009962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009966:	4bb0      	ldr	r3, [pc, #704]	; (8009c28 <_dtoa_r+0x8c8>)
 8009968:	f7f6 fc6c 	bl	8000244 <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f7 f8ac 	bl	8000ad0 <__aeabi_dcmpgt>
 8009978:	2800      	cmp	r0, #0
 800997a:	d163      	bne.n	8009a44 <_dtoa_r+0x6e4>
 800997c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009980:	2000      	movs	r0, #0
 8009982:	49a9      	ldr	r1, [pc, #676]	; (8009c28 <_dtoa_r+0x8c8>)
 8009984:	f7f6 fc5c 	bl	8000240 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f7f7 f880 	bl	8000a94 <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f af1d 	beq.w	80097d4 <_dtoa_r+0x474>
 800999a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800999c:	1e7b      	subs	r3, r7, #1
 800999e:	9314      	str	r3, [sp, #80]	; 0x50
 80099a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80099a4:	2b30      	cmp	r3, #48	; 0x30
 80099a6:	d0f8      	beq.n	800999a <_dtoa_r+0x63a>
 80099a8:	46c2      	mov	sl, r8
 80099aa:	e03b      	b.n	8009a24 <_dtoa_r+0x6c4>
 80099ac:	4b9f      	ldr	r3, [pc, #636]	; (8009c2c <_dtoa_r+0x8cc>)
 80099ae:	f7f6 fdff 	bl	80005b0 <__aeabi_dmul>
 80099b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099b6:	e7bc      	b.n	8009932 <_dtoa_r+0x5d2>
 80099b8:	9f03      	ldr	r7, [sp, #12]
 80099ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80099be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	f7f6 ff1d 	bl	8000804 <__aeabi_ddiv>
 80099ca:	f7f7 f8a1 	bl	8000b10 <__aeabi_d2iz>
 80099ce:	4604      	mov	r4, r0
 80099d0:	f7f6 fd84 	bl	80004dc <__aeabi_i2d>
 80099d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099d8:	f7f6 fdea 	bl	80005b0 <__aeabi_dmul>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f6 fc2c 	bl	8000240 <__aeabi_dsub>
 80099e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80099ec:	f807 6b01 	strb.w	r6, [r7], #1
 80099f0:	9e03      	ldr	r6, [sp, #12]
 80099f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80099f6:	1bbe      	subs	r6, r7, r6
 80099f8:	45b4      	cmp	ip, r6
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	d136      	bne.n	8009a6e <_dtoa_r+0x70e>
 8009a00:	f7f6 fc20 	bl	8000244 <__adddf3>
 8009a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a08:	4680      	mov	r8, r0
 8009a0a:	4689      	mov	r9, r1
 8009a0c:	f7f7 f860 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a10:	bb58      	cbnz	r0, 8009a6a <_dtoa_r+0x70a>
 8009a12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a16:	4640      	mov	r0, r8
 8009a18:	4649      	mov	r1, r9
 8009a1a:	f7f7 f831 	bl	8000a80 <__aeabi_dcmpeq>
 8009a1e:	b108      	cbz	r0, 8009a24 <_dtoa_r+0x6c4>
 8009a20:	07e1      	lsls	r1, r4, #31
 8009a22:	d422      	bmi.n	8009a6a <_dtoa_r+0x70a>
 8009a24:	4628      	mov	r0, r5
 8009a26:	4659      	mov	r1, fp
 8009a28:	f000 fe6c 	bl	800a704 <_Bfree>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	703b      	strb	r3, [r7, #0]
 8009a30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a32:	f10a 0001 	add.w	r0, sl, #1
 8009a36:	6018      	str	r0, [r3, #0]
 8009a38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f43f acde 	beq.w	80093fc <_dtoa_r+0x9c>
 8009a40:	601f      	str	r7, [r3, #0]
 8009a42:	e4db      	b.n	80093fc <_dtoa_r+0x9c>
 8009a44:	4627      	mov	r7, r4
 8009a46:	463b      	mov	r3, r7
 8009a48:	461f      	mov	r7, r3
 8009a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a4e:	2a39      	cmp	r2, #57	; 0x39
 8009a50:	d107      	bne.n	8009a62 <_dtoa_r+0x702>
 8009a52:	9a03      	ldr	r2, [sp, #12]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d1f7      	bne.n	8009a48 <_dtoa_r+0x6e8>
 8009a58:	2230      	movs	r2, #48	; 0x30
 8009a5a:	9903      	ldr	r1, [sp, #12]
 8009a5c:	f108 0801 	add.w	r8, r8, #1
 8009a60:	700a      	strb	r2, [r1, #0]
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	3201      	adds	r2, #1
 8009a66:	701a      	strb	r2, [r3, #0]
 8009a68:	e79e      	b.n	80099a8 <_dtoa_r+0x648>
 8009a6a:	46d0      	mov	r8, sl
 8009a6c:	e7eb      	b.n	8009a46 <_dtoa_r+0x6e6>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4b6e      	ldr	r3, [pc, #440]	; (8009c2c <_dtoa_r+0x8cc>)
 8009a72:	f7f6 fd9d 	bl	80005b0 <__aeabi_dmul>
 8009a76:	2200      	movs	r2, #0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4680      	mov	r8, r0
 8009a7c:	4689      	mov	r9, r1
 8009a7e:	f7f6 ffff 	bl	8000a80 <__aeabi_dcmpeq>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d09b      	beq.n	80099be <_dtoa_r+0x65e>
 8009a86:	e7cd      	b.n	8009a24 <_dtoa_r+0x6c4>
 8009a88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	f000 80d0 	beq.w	8009c30 <_dtoa_r+0x8d0>
 8009a90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a92:	2a01      	cmp	r2, #1
 8009a94:	f300 80ae 	bgt.w	8009bf4 <_dtoa_r+0x894>
 8009a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	f000 80a6 	beq.w	8009bec <_dtoa_r+0x88c>
 8009aa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009aa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009aa6:	9f06      	ldr	r7, [sp, #24]
 8009aa8:	9a06      	ldr	r2, [sp, #24]
 8009aaa:	2101      	movs	r1, #1
 8009aac:	441a      	add	r2, r3
 8009aae:	9206      	str	r2, [sp, #24]
 8009ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	441a      	add	r2, r3
 8009ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ab8:	f000 ff24 	bl	800a904 <__i2b>
 8009abc:	4606      	mov	r6, r0
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	dd0c      	ble.n	8009adc <_dtoa_r+0x77c>
 8009ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dd09      	ble.n	8009adc <_dtoa_r+0x77c>
 8009ac8:	42bb      	cmp	r3, r7
 8009aca:	bfa8      	it	ge
 8009acc:	463b      	movge	r3, r7
 8009ace:	9a06      	ldr	r2, [sp, #24]
 8009ad0:	1aff      	subs	r7, r7, r3
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	9206      	str	r2, [sp, #24]
 8009ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	9309      	str	r3, [sp, #36]	; 0x24
 8009adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ade:	b1f3      	cbz	r3, 8009b1e <_dtoa_r+0x7be>
 8009ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80a8 	beq.w	8009c38 <_dtoa_r+0x8d8>
 8009ae8:	2c00      	cmp	r4, #0
 8009aea:	dd10      	ble.n	8009b0e <_dtoa_r+0x7ae>
 8009aec:	4631      	mov	r1, r6
 8009aee:	4622      	mov	r2, r4
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 ffc5 	bl	800aa80 <__pow5mult>
 8009af6:	465a      	mov	r2, fp
 8009af8:	4601      	mov	r1, r0
 8009afa:	4606      	mov	r6, r0
 8009afc:	4628      	mov	r0, r5
 8009afe:	f000 ff17 	bl	800a930 <__multiply>
 8009b02:	4680      	mov	r8, r0
 8009b04:	4659      	mov	r1, fp
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 fdfc 	bl	800a704 <_Bfree>
 8009b0c:	46c3      	mov	fp, r8
 8009b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b10:	1b1a      	subs	r2, r3, r4
 8009b12:	d004      	beq.n	8009b1e <_dtoa_r+0x7be>
 8009b14:	4659      	mov	r1, fp
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 ffb2 	bl	800aa80 <__pow5mult>
 8009b1c:	4683      	mov	fp, r0
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 feef 	bl	800a904 <__i2b>
 8009b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b28:	4604      	mov	r4, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f340 8086 	ble.w	8009c3c <_dtoa_r+0x8dc>
 8009b30:	461a      	mov	r2, r3
 8009b32:	4601      	mov	r1, r0
 8009b34:	4628      	mov	r0, r5
 8009b36:	f000 ffa3 	bl	800aa80 <__pow5mult>
 8009b3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	dd7f      	ble.n	8009c42 <_dtoa_r+0x8e2>
 8009b42:	f04f 0800 	mov.w	r8, #0
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b4c:	6918      	ldr	r0, [r3, #16]
 8009b4e:	f000 fe8b 	bl	800a868 <__hi0bits>
 8009b52:	f1c0 0020 	rsb	r0, r0, #32
 8009b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b58:	4418      	add	r0, r3
 8009b5a:	f010 001f 	ands.w	r0, r0, #31
 8009b5e:	f000 8092 	beq.w	8009c86 <_dtoa_r+0x926>
 8009b62:	f1c0 0320 	rsb	r3, r0, #32
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	f340 808a 	ble.w	8009c80 <_dtoa_r+0x920>
 8009b6c:	f1c0 001c 	rsb	r0, r0, #28
 8009b70:	9b06      	ldr	r3, [sp, #24]
 8009b72:	4407      	add	r7, r0
 8009b74:	4403      	add	r3, r0
 8009b76:	9306      	str	r3, [sp, #24]
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	4403      	add	r3, r0
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	9b06      	ldr	r3, [sp, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dd05      	ble.n	8009b90 <_dtoa_r+0x830>
 8009b84:	4659      	mov	r1, fp
 8009b86:	461a      	mov	r2, r3
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 ffd3 	bl	800ab34 <__lshift>
 8009b8e:	4683      	mov	fp, r0
 8009b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dd05      	ble.n	8009ba2 <_dtoa_r+0x842>
 8009b96:	4621      	mov	r1, r4
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 ffca 	bl	800ab34 <__lshift>
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d070      	beq.n	8009c8a <_dtoa_r+0x92a>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4658      	mov	r0, fp
 8009bac:	f001 f832 	bl	800ac14 <__mcmp>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	da6a      	bge.n	8009c8a <_dtoa_r+0x92a>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4659      	mov	r1, fp
 8009bb8:	220a      	movs	r2, #10
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 fdc4 	bl	800a748 <__multadd>
 8009bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc2:	4683      	mov	fp, r0
 8009bc4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 8194 	beq.w	8009ef6 <_dtoa_r+0xb96>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	220a      	movs	r2, #10
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 fdb7 	bl	800a748 <__multadd>
 8009bda:	f1b9 0f00 	cmp.w	r9, #0
 8009bde:	4606      	mov	r6, r0
 8009be0:	f300 8093 	bgt.w	8009d0a <_dtoa_r+0x9aa>
 8009be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	dc57      	bgt.n	8009c9a <_dtoa_r+0x93a>
 8009bea:	e08e      	b.n	8009d0a <_dtoa_r+0x9aa>
 8009bec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bf2:	e757      	b.n	8009aa4 <_dtoa_r+0x744>
 8009bf4:	9b08      	ldr	r3, [sp, #32]
 8009bf6:	1e5c      	subs	r4, r3, #1
 8009bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	bfb7      	itett	lt
 8009bfe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c00:	1b1c      	subge	r4, r3, r4
 8009c02:	1ae2      	sublt	r2, r4, r3
 8009c04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c06:	bfbe      	ittt	lt
 8009c08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009c0a:	189b      	addlt	r3, r3, r2
 8009c0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	bfb8      	it	lt
 8009c12:	2400      	movlt	r4, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfbb      	ittet	lt
 8009c18:	9b06      	ldrlt	r3, [sp, #24]
 8009c1a:	9a08      	ldrlt	r2, [sp, #32]
 8009c1c:	9f06      	ldrge	r7, [sp, #24]
 8009c1e:	1a9f      	sublt	r7, r3, r2
 8009c20:	bfac      	ite	ge
 8009c22:	9b08      	ldrge	r3, [sp, #32]
 8009c24:	2300      	movlt	r3, #0
 8009c26:	e73f      	b.n	8009aa8 <_dtoa_r+0x748>
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	40240000 	.word	0x40240000
 8009c30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c32:	9f06      	ldr	r7, [sp, #24]
 8009c34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c36:	e742      	b.n	8009abe <_dtoa_r+0x75e>
 8009c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3a:	e76b      	b.n	8009b14 <_dtoa_r+0x7b4>
 8009c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	dc19      	bgt.n	8009c76 <_dtoa_r+0x916>
 8009c42:	9b04      	ldr	r3, [sp, #16]
 8009c44:	b9bb      	cbnz	r3, 8009c76 <_dtoa_r+0x916>
 8009c46:	9b05      	ldr	r3, [sp, #20]
 8009c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c4c:	b99b      	cbnz	r3, 8009c76 <_dtoa_r+0x916>
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c54:	0d1b      	lsrs	r3, r3, #20
 8009c56:	051b      	lsls	r3, r3, #20
 8009c58:	b183      	cbz	r3, 8009c7c <_dtoa_r+0x91c>
 8009c5a:	f04f 0801 	mov.w	r8, #1
 8009c5e:	9b06      	ldr	r3, [sp, #24]
 8009c60:	3301      	adds	r3, #1
 8009c62:	9306      	str	r3, [sp, #24]
 8009c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c66:	3301      	adds	r3, #1
 8009c68:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f47f af6a 	bne.w	8009b46 <_dtoa_r+0x7e6>
 8009c72:	2001      	movs	r0, #1
 8009c74:	e76f      	b.n	8009b56 <_dtoa_r+0x7f6>
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	e7f6      	b.n	8009c6a <_dtoa_r+0x90a>
 8009c7c:	4698      	mov	r8, r3
 8009c7e:	e7f4      	b.n	8009c6a <_dtoa_r+0x90a>
 8009c80:	f43f af7d 	beq.w	8009b7e <_dtoa_r+0x81e>
 8009c84:	4618      	mov	r0, r3
 8009c86:	301c      	adds	r0, #28
 8009c88:	e772      	b.n	8009b70 <_dtoa_r+0x810>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dc36      	bgt.n	8009cfe <_dtoa_r+0x99e>
 8009c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	dd33      	ble.n	8009cfe <_dtoa_r+0x99e>
 8009c96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c9a:	f1b9 0f00 	cmp.w	r9, #0
 8009c9e:	d10d      	bne.n	8009cbc <_dtoa_r+0x95c>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	2205      	movs	r2, #5
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 fd4e 	bl	800a748 <__multadd>
 8009cac:	4601      	mov	r1, r0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4658      	mov	r0, fp
 8009cb2:	f000 ffaf 	bl	800ac14 <__mcmp>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f73f adb8 	bgt.w	800982c <_dtoa_r+0x4cc>
 8009cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cbe:	9f03      	ldr	r7, [sp, #12]
 8009cc0:	ea6f 0a03 	mvn.w	sl, r3
 8009cc4:	f04f 0800 	mov.w	r8, #0
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 fd1a 	bl	800a704 <_Bfree>
 8009cd0:	2e00      	cmp	r6, #0
 8009cd2:	f43f aea7 	beq.w	8009a24 <_dtoa_r+0x6c4>
 8009cd6:	f1b8 0f00 	cmp.w	r8, #0
 8009cda:	d005      	beq.n	8009ce8 <_dtoa_r+0x988>
 8009cdc:	45b0      	cmp	r8, r6
 8009cde:	d003      	beq.n	8009ce8 <_dtoa_r+0x988>
 8009ce0:	4641      	mov	r1, r8
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 fd0e 	bl	800a704 <_Bfree>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 fd0a 	bl	800a704 <_Bfree>
 8009cf0:	e698      	b.n	8009a24 <_dtoa_r+0x6c4>
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	4626      	mov	r6, r4
 8009cf6:	e7e1      	b.n	8009cbc <_dtoa_r+0x95c>
 8009cf8:	46c2      	mov	sl, r8
 8009cfa:	4626      	mov	r6, r4
 8009cfc:	e596      	b.n	800982c <_dtoa_r+0x4cc>
 8009cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 80fd 	beq.w	8009f04 <_dtoa_r+0xba4>
 8009d0a:	2f00      	cmp	r7, #0
 8009d0c:	dd05      	ble.n	8009d1a <_dtoa_r+0x9ba>
 8009d0e:	4631      	mov	r1, r6
 8009d10:	463a      	mov	r2, r7
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 ff0e 	bl	800ab34 <__lshift>
 8009d18:	4606      	mov	r6, r0
 8009d1a:	f1b8 0f00 	cmp.w	r8, #0
 8009d1e:	d05c      	beq.n	8009dda <_dtoa_r+0xa7a>
 8009d20:	4628      	mov	r0, r5
 8009d22:	6871      	ldr	r1, [r6, #4]
 8009d24:	f000 fcae 	bl	800a684 <_Balloc>
 8009d28:	4607      	mov	r7, r0
 8009d2a:	b928      	cbnz	r0, 8009d38 <_dtoa_r+0x9d8>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d32:	4b7f      	ldr	r3, [pc, #508]	; (8009f30 <_dtoa_r+0xbd0>)
 8009d34:	f7ff bb28 	b.w	8009388 <_dtoa_r+0x28>
 8009d38:	6932      	ldr	r2, [r6, #16]
 8009d3a:	f106 010c 	add.w	r1, r6, #12
 8009d3e:	3202      	adds	r2, #2
 8009d40:	0092      	lsls	r2, r2, #2
 8009d42:	300c      	adds	r0, #12
 8009d44:	f000 fc84 	bl	800a650 <memcpy>
 8009d48:	2201      	movs	r2, #1
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f000 fef1 	bl	800ab34 <__lshift>
 8009d52:	46b0      	mov	r8, r6
 8009d54:	4606      	mov	r6, r0
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	9308      	str	r3, [sp, #32]
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	444b      	add	r3, r9
 8009d60:	930a      	str	r3, [sp, #40]	; 0x28
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4658      	mov	r0, fp
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	f7ff fa68 	bl	8009248 <quorem>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	3330      	adds	r3, #48	; 0x30
 8009d7e:	9006      	str	r0, [sp, #24]
 8009d80:	4658      	mov	r0, fp
 8009d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d84:	f000 ff46 	bl	800ac14 <__mcmp>
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4681      	mov	r9, r0
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 ff5c 	bl	800ac4c <__mdiff>
 8009d94:	68c2      	ldr	r2, [r0, #12]
 8009d96:	4607      	mov	r7, r0
 8009d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d9a:	bb02      	cbnz	r2, 8009dde <_dtoa_r+0xa7e>
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	4658      	mov	r0, fp
 8009da0:	f000 ff38 	bl	800ac14 <__mcmp>
 8009da4:	4602      	mov	r2, r0
 8009da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da8:	4639      	mov	r1, r7
 8009daa:	4628      	mov	r0, r5
 8009dac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009db0:	f000 fca8 	bl	800a704 <_Bfree>
 8009db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009db8:	9f08      	ldr	r7, [sp, #32]
 8009dba:	ea43 0102 	orr.w	r1, r3, r2
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc4:	d10d      	bne.n	8009de2 <_dtoa_r+0xa82>
 8009dc6:	2b39      	cmp	r3, #57	; 0x39
 8009dc8:	d029      	beq.n	8009e1e <_dtoa_r+0xabe>
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	dd01      	ble.n	8009dd4 <_dtoa_r+0xa74>
 8009dd0:	9b06      	ldr	r3, [sp, #24]
 8009dd2:	3331      	adds	r3, #49	; 0x31
 8009dd4:	9a04      	ldr	r2, [sp, #16]
 8009dd6:	7013      	strb	r3, [r2, #0]
 8009dd8:	e776      	b.n	8009cc8 <_dtoa_r+0x968>
 8009dda:	4630      	mov	r0, r6
 8009ddc:	e7b9      	b.n	8009d52 <_dtoa_r+0x9f2>
 8009dde:	2201      	movs	r2, #1
 8009de0:	e7e2      	b.n	8009da8 <_dtoa_r+0xa48>
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	db06      	blt.n	8009df6 <_dtoa_r+0xa96>
 8009de8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009dea:	ea41 0909 	orr.w	r9, r1, r9
 8009dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009df0:	ea59 0101 	orrs.w	r1, r9, r1
 8009df4:	d120      	bne.n	8009e38 <_dtoa_r+0xad8>
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	ddec      	ble.n	8009dd4 <_dtoa_r+0xa74>
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4628      	mov	r0, r5
 8009e00:	9308      	str	r3, [sp, #32]
 8009e02:	f000 fe97 	bl	800ab34 <__lshift>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4683      	mov	fp, r0
 8009e0a:	f000 ff03 	bl	800ac14 <__mcmp>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	dc02      	bgt.n	8009e1a <_dtoa_r+0xaba>
 8009e14:	d1de      	bne.n	8009dd4 <_dtoa_r+0xa74>
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d5dc      	bpl.n	8009dd4 <_dtoa_r+0xa74>
 8009e1a:	2b39      	cmp	r3, #57	; 0x39
 8009e1c:	d1d8      	bne.n	8009dd0 <_dtoa_r+0xa70>
 8009e1e:	2339      	movs	r3, #57	; 0x39
 8009e20:	9a04      	ldr	r2, [sp, #16]
 8009e22:	7013      	strb	r3, [r2, #0]
 8009e24:	463b      	mov	r3, r7
 8009e26:	461f      	mov	r7, r3
 8009e28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	2a39      	cmp	r2, #57	; 0x39
 8009e30:	d050      	beq.n	8009ed4 <_dtoa_r+0xb74>
 8009e32:	3201      	adds	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e747      	b.n	8009cc8 <_dtoa_r+0x968>
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	dd03      	ble.n	8009e44 <_dtoa_r+0xae4>
 8009e3c:	2b39      	cmp	r3, #57	; 0x39
 8009e3e:	d0ee      	beq.n	8009e1e <_dtoa_r+0xabe>
 8009e40:	3301      	adds	r3, #1
 8009e42:	e7c7      	b.n	8009dd4 <_dtoa_r+0xa74>
 8009e44:	9a08      	ldr	r2, [sp, #32]
 8009e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d02a      	beq.n	8009ea6 <_dtoa_r+0xb46>
 8009e50:	4659      	mov	r1, fp
 8009e52:	2300      	movs	r3, #0
 8009e54:	220a      	movs	r2, #10
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 fc76 	bl	800a748 <__multadd>
 8009e5c:	45b0      	cmp	r8, r6
 8009e5e:	4683      	mov	fp, r0
 8009e60:	f04f 0300 	mov.w	r3, #0
 8009e64:	f04f 020a 	mov.w	r2, #10
 8009e68:	4641      	mov	r1, r8
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	d107      	bne.n	8009e7e <_dtoa_r+0xb1e>
 8009e6e:	f000 fc6b 	bl	800a748 <__multadd>
 8009e72:	4680      	mov	r8, r0
 8009e74:	4606      	mov	r6, r0
 8009e76:	9b08      	ldr	r3, [sp, #32]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	9308      	str	r3, [sp, #32]
 8009e7c:	e775      	b.n	8009d6a <_dtoa_r+0xa0a>
 8009e7e:	f000 fc63 	bl	800a748 <__multadd>
 8009e82:	4631      	mov	r1, r6
 8009e84:	4680      	mov	r8, r0
 8009e86:	2300      	movs	r3, #0
 8009e88:	220a      	movs	r2, #10
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 fc5c 	bl	800a748 <__multadd>
 8009e90:	4606      	mov	r6, r0
 8009e92:	e7f0      	b.n	8009e76 <_dtoa_r+0xb16>
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	bfcc      	ite	gt
 8009e9a:	464f      	movgt	r7, r9
 8009e9c:	2701      	movle	r7, #1
 8009e9e:	f04f 0800 	mov.w	r8, #0
 8009ea2:	9a03      	ldr	r2, [sp, #12]
 8009ea4:	4417      	add	r7, r2
 8009ea6:	4659      	mov	r1, fp
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	4628      	mov	r0, r5
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	f000 fe41 	bl	800ab34 <__lshift>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4683      	mov	fp, r0
 8009eb6:	f000 fead 	bl	800ac14 <__mcmp>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	dcb2      	bgt.n	8009e24 <_dtoa_r+0xac4>
 8009ebe:	d102      	bne.n	8009ec6 <_dtoa_r+0xb66>
 8009ec0:	9b08      	ldr	r3, [sp, #32]
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d4ae      	bmi.n	8009e24 <_dtoa_r+0xac4>
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	461f      	mov	r7, r3
 8009eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ece:	2a30      	cmp	r2, #48	; 0x30
 8009ed0:	d0fa      	beq.n	8009ec8 <_dtoa_r+0xb68>
 8009ed2:	e6f9      	b.n	8009cc8 <_dtoa_r+0x968>
 8009ed4:	9a03      	ldr	r2, [sp, #12]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d1a5      	bne.n	8009e26 <_dtoa_r+0xac6>
 8009eda:	2331      	movs	r3, #49	; 0x31
 8009edc:	f10a 0a01 	add.w	sl, sl, #1
 8009ee0:	e779      	b.n	8009dd6 <_dtoa_r+0xa76>
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <_dtoa_r+0xbd4>)
 8009ee4:	f7ff baa8 	b.w	8009438 <_dtoa_r+0xd8>
 8009ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f47f aa81 	bne.w	80093f2 <_dtoa_r+0x92>
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <_dtoa_r+0xbd8>)
 8009ef2:	f7ff baa1 	b.w	8009438 <_dtoa_r+0xd8>
 8009ef6:	f1b9 0f00 	cmp.w	r9, #0
 8009efa:	dc03      	bgt.n	8009f04 <_dtoa_r+0xba4>
 8009efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	f73f aecb 	bgt.w	8009c9a <_dtoa_r+0x93a>
 8009f04:	9f03      	ldr	r7, [sp, #12]
 8009f06:	4621      	mov	r1, r4
 8009f08:	4658      	mov	r0, fp
 8009f0a:	f7ff f99d 	bl	8009248 <quorem>
 8009f0e:	9a03      	ldr	r2, [sp, #12]
 8009f10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f14:	f807 3b01 	strb.w	r3, [r7], #1
 8009f18:	1aba      	subs	r2, r7, r2
 8009f1a:	4591      	cmp	r9, r2
 8009f1c:	ddba      	ble.n	8009e94 <_dtoa_r+0xb34>
 8009f1e:	4659      	mov	r1, fp
 8009f20:	2300      	movs	r3, #0
 8009f22:	220a      	movs	r2, #10
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 fc0f 	bl	800a748 <__multadd>
 8009f2a:	4683      	mov	fp, r0
 8009f2c:	e7eb      	b.n	8009f06 <_dtoa_r+0xba6>
 8009f2e:	bf00      	nop
 8009f30:	0800dcc8 	.word	0x0800dcc8
 8009f34:	0800dac8 	.word	0x0800dac8
 8009f38:	0800dc49 	.word	0x0800dc49

08009f3c <rshift>:
 8009f3c:	6903      	ldr	r3, [r0, #16]
 8009f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f46:	f100 0414 	add.w	r4, r0, #20
 8009f4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f4e:	dd46      	ble.n	8009fde <rshift+0xa2>
 8009f50:	f011 011f 	ands.w	r1, r1, #31
 8009f54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f5c:	d10c      	bne.n	8009f78 <rshift+0x3c>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f100 0710 	add.w	r7, r0, #16
 8009f64:	42b1      	cmp	r1, r6
 8009f66:	d335      	bcc.n	8009fd4 <rshift+0x98>
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	1eea      	subs	r2, r5, #3
 8009f6e:	4296      	cmp	r6, r2
 8009f70:	bf38      	it	cc
 8009f72:	2300      	movcc	r3, #0
 8009f74:	4423      	add	r3, r4
 8009f76:	e015      	b.n	8009fa4 <rshift+0x68>
 8009f78:	46a1      	mov	r9, r4
 8009f7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f7e:	f1c1 0820 	rsb	r8, r1, #32
 8009f82:	40cf      	lsrs	r7, r1
 8009f84:	f105 0e04 	add.w	lr, r5, #4
 8009f88:	4576      	cmp	r6, lr
 8009f8a:	46f4      	mov	ip, lr
 8009f8c:	d816      	bhi.n	8009fbc <rshift+0x80>
 8009f8e:	1a9a      	subs	r2, r3, r2
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	3a04      	subs	r2, #4
 8009f94:	3501      	adds	r5, #1
 8009f96:	42ae      	cmp	r6, r5
 8009f98:	bf38      	it	cc
 8009f9a:	2200      	movcc	r2, #0
 8009f9c:	18a3      	adds	r3, r4, r2
 8009f9e:	50a7      	str	r7, [r4, r2]
 8009fa0:	b107      	cbz	r7, 8009fa4 <rshift+0x68>
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	eba3 0204 	sub.w	r2, r3, r4
 8009faa:	bf08      	it	eq
 8009fac:	2300      	moveq	r3, #0
 8009fae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009fb2:	6102      	str	r2, [r0, #16]
 8009fb4:	bf08      	it	eq
 8009fb6:	6143      	streq	r3, [r0, #20]
 8009fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fbc:	f8dc c000 	ldr.w	ip, [ip]
 8009fc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8009fc4:	ea4c 0707 	orr.w	r7, ip, r7
 8009fc8:	f849 7b04 	str.w	r7, [r9], #4
 8009fcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fd0:	40cf      	lsrs	r7, r1
 8009fd2:	e7d9      	b.n	8009f88 <rshift+0x4c>
 8009fd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fdc:	e7c2      	b.n	8009f64 <rshift+0x28>
 8009fde:	4623      	mov	r3, r4
 8009fe0:	e7e0      	b.n	8009fa4 <rshift+0x68>

08009fe2 <__hexdig_fun>:
 8009fe2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d802      	bhi.n	8009ff0 <__hexdig_fun+0xe>
 8009fea:	3820      	subs	r0, #32
 8009fec:	b2c0      	uxtb	r0, r0
 8009fee:	4770      	bx	lr
 8009ff0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ff4:	2b05      	cmp	r3, #5
 8009ff6:	d801      	bhi.n	8009ffc <__hexdig_fun+0x1a>
 8009ff8:	3847      	subs	r0, #71	; 0x47
 8009ffa:	e7f7      	b.n	8009fec <__hexdig_fun+0xa>
 8009ffc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a000:	2b05      	cmp	r3, #5
 800a002:	d801      	bhi.n	800a008 <__hexdig_fun+0x26>
 800a004:	3827      	subs	r0, #39	; 0x27
 800a006:	e7f1      	b.n	8009fec <__hexdig_fun+0xa>
 800a008:	2000      	movs	r0, #0
 800a00a:	4770      	bx	lr

0800a00c <__gethex>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	b08b      	sub	sp, #44	; 0x2c
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	4bb2      	ldr	r3, [pc, #712]	; (800a2e0 <__gethex+0x2d4>)
 800a016:	9002      	str	r0, [sp, #8]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	468b      	mov	fp, r1
 800a01c:	4618      	mov	r0, r3
 800a01e:	4690      	mov	r8, r2
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	f7f6 f901 	bl	8000228 <strlen>
 800a026:	4682      	mov	sl, r0
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	f8db 2000 	ldr.w	r2, [fp]
 800a02e:	4403      	add	r3, r0
 800a030:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a034:	9306      	str	r3, [sp, #24]
 800a036:	1c93      	adds	r3, r2, #2
 800a038:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a03c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a040:	32fe      	adds	r2, #254	; 0xfe
 800a042:	18d1      	adds	r1, r2, r3
 800a044:	461f      	mov	r7, r3
 800a046:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a04a:	9101      	str	r1, [sp, #4]
 800a04c:	2830      	cmp	r0, #48	; 0x30
 800a04e:	d0f8      	beq.n	800a042 <__gethex+0x36>
 800a050:	f7ff ffc7 	bl	8009fe2 <__hexdig_fun>
 800a054:	4604      	mov	r4, r0
 800a056:	2800      	cmp	r0, #0
 800a058:	d13a      	bne.n	800a0d0 <__gethex+0xc4>
 800a05a:	4652      	mov	r2, sl
 800a05c:	4638      	mov	r0, r7
 800a05e:	9903      	ldr	r1, [sp, #12]
 800a060:	f001 f93e 	bl	800b2e0 <strncmp>
 800a064:	4605      	mov	r5, r0
 800a066:	2800      	cmp	r0, #0
 800a068:	d166      	bne.n	800a138 <__gethex+0x12c>
 800a06a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a06e:	eb07 060a 	add.w	r6, r7, sl
 800a072:	f7ff ffb6 	bl	8009fe2 <__hexdig_fun>
 800a076:	2800      	cmp	r0, #0
 800a078:	d060      	beq.n	800a13c <__gethex+0x130>
 800a07a:	4633      	mov	r3, r6
 800a07c:	7818      	ldrb	r0, [r3, #0]
 800a07e:	461f      	mov	r7, r3
 800a080:	2830      	cmp	r0, #48	; 0x30
 800a082:	f103 0301 	add.w	r3, r3, #1
 800a086:	d0f9      	beq.n	800a07c <__gethex+0x70>
 800a088:	f7ff ffab 	bl	8009fe2 <__hexdig_fun>
 800a08c:	2301      	movs	r3, #1
 800a08e:	fab0 f480 	clz	r4, r0
 800a092:	4635      	mov	r5, r6
 800a094:	0964      	lsrs	r4, r4, #5
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	463a      	mov	r2, r7
 800a09a:	4616      	mov	r6, r2
 800a09c:	7830      	ldrb	r0, [r6, #0]
 800a09e:	3201      	adds	r2, #1
 800a0a0:	f7ff ff9f 	bl	8009fe2 <__hexdig_fun>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d1f8      	bne.n	800a09a <__gethex+0x8e>
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	9903      	ldr	r1, [sp, #12]
 800a0ae:	f001 f917 	bl	800b2e0 <strncmp>
 800a0b2:	b980      	cbnz	r0, 800a0d6 <__gethex+0xca>
 800a0b4:	b94d      	cbnz	r5, 800a0ca <__gethex+0xbe>
 800a0b6:	eb06 050a 	add.w	r5, r6, sl
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4616      	mov	r6, r2
 800a0be:	7830      	ldrb	r0, [r6, #0]
 800a0c0:	3201      	adds	r2, #1
 800a0c2:	f7ff ff8e 	bl	8009fe2 <__hexdig_fun>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d1f8      	bne.n	800a0bc <__gethex+0xb0>
 800a0ca:	1bad      	subs	r5, r5, r6
 800a0cc:	00ad      	lsls	r5, r5, #2
 800a0ce:	e004      	b.n	800a0da <__gethex+0xce>
 800a0d0:	2400      	movs	r4, #0
 800a0d2:	4625      	mov	r5, r4
 800a0d4:	e7e0      	b.n	800a098 <__gethex+0x8c>
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	d1f7      	bne.n	800a0ca <__gethex+0xbe>
 800a0da:	7833      	ldrb	r3, [r6, #0]
 800a0dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0e0:	2b50      	cmp	r3, #80	; 0x50
 800a0e2:	d139      	bne.n	800a158 <__gethex+0x14c>
 800a0e4:	7873      	ldrb	r3, [r6, #1]
 800a0e6:	2b2b      	cmp	r3, #43	; 0x2b
 800a0e8:	d02a      	beq.n	800a140 <__gethex+0x134>
 800a0ea:	2b2d      	cmp	r3, #45	; 0x2d
 800a0ec:	d02c      	beq.n	800a148 <__gethex+0x13c>
 800a0ee:	f04f 0900 	mov.w	r9, #0
 800a0f2:	1c71      	adds	r1, r6, #1
 800a0f4:	7808      	ldrb	r0, [r1, #0]
 800a0f6:	f7ff ff74 	bl	8009fe2 <__hexdig_fun>
 800a0fa:	1e43      	subs	r3, r0, #1
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b18      	cmp	r3, #24
 800a100:	d82a      	bhi.n	800a158 <__gethex+0x14c>
 800a102:	f1a0 0210 	sub.w	r2, r0, #16
 800a106:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a10a:	f7ff ff6a 	bl	8009fe2 <__hexdig_fun>
 800a10e:	1e43      	subs	r3, r0, #1
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b18      	cmp	r3, #24
 800a114:	d91b      	bls.n	800a14e <__gethex+0x142>
 800a116:	f1b9 0f00 	cmp.w	r9, #0
 800a11a:	d000      	beq.n	800a11e <__gethex+0x112>
 800a11c:	4252      	negs	r2, r2
 800a11e:	4415      	add	r5, r2
 800a120:	f8cb 1000 	str.w	r1, [fp]
 800a124:	b1d4      	cbz	r4, 800a15c <__gethex+0x150>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bf14      	ite	ne
 800a12c:	2700      	movne	r7, #0
 800a12e:	2706      	moveq	r7, #6
 800a130:	4638      	mov	r0, r7
 800a132:	b00b      	add	sp, #44	; 0x2c
 800a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a138:	463e      	mov	r6, r7
 800a13a:	4625      	mov	r5, r4
 800a13c:	2401      	movs	r4, #1
 800a13e:	e7cc      	b.n	800a0da <__gethex+0xce>
 800a140:	f04f 0900 	mov.w	r9, #0
 800a144:	1cb1      	adds	r1, r6, #2
 800a146:	e7d5      	b.n	800a0f4 <__gethex+0xe8>
 800a148:	f04f 0901 	mov.w	r9, #1
 800a14c:	e7fa      	b.n	800a144 <__gethex+0x138>
 800a14e:	230a      	movs	r3, #10
 800a150:	fb03 0202 	mla	r2, r3, r2, r0
 800a154:	3a10      	subs	r2, #16
 800a156:	e7d6      	b.n	800a106 <__gethex+0xfa>
 800a158:	4631      	mov	r1, r6
 800a15a:	e7e1      	b.n	800a120 <__gethex+0x114>
 800a15c:	4621      	mov	r1, r4
 800a15e:	1bf3      	subs	r3, r6, r7
 800a160:	3b01      	subs	r3, #1
 800a162:	2b07      	cmp	r3, #7
 800a164:	dc0a      	bgt.n	800a17c <__gethex+0x170>
 800a166:	9802      	ldr	r0, [sp, #8]
 800a168:	f000 fa8c 	bl	800a684 <_Balloc>
 800a16c:	4604      	mov	r4, r0
 800a16e:	b940      	cbnz	r0, 800a182 <__gethex+0x176>
 800a170:	4602      	mov	r2, r0
 800a172:	21de      	movs	r1, #222	; 0xde
 800a174:	4b5b      	ldr	r3, [pc, #364]	; (800a2e4 <__gethex+0x2d8>)
 800a176:	485c      	ldr	r0, [pc, #368]	; (800a2e8 <__gethex+0x2dc>)
 800a178:	f001 f8d4 	bl	800b324 <__assert_func>
 800a17c:	3101      	adds	r1, #1
 800a17e:	105b      	asrs	r3, r3, #1
 800a180:	e7ef      	b.n	800a162 <__gethex+0x156>
 800a182:	f04f 0b00 	mov.w	fp, #0
 800a186:	f100 0914 	add.w	r9, r0, #20
 800a18a:	f1ca 0301 	rsb	r3, sl, #1
 800a18e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a192:	f8cd b004 	str.w	fp, [sp, #4]
 800a196:	9308      	str	r3, [sp, #32]
 800a198:	42b7      	cmp	r7, r6
 800a19a:	d33f      	bcc.n	800a21c <__gethex+0x210>
 800a19c:	9f04      	ldr	r7, [sp, #16]
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	f847 3b04 	str.w	r3, [r7], #4
 800a1a4:	eba7 0709 	sub.w	r7, r7, r9
 800a1a8:	10bf      	asrs	r7, r7, #2
 800a1aa:	6127      	str	r7, [r4, #16]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 fb5b 	bl	800a868 <__hi0bits>
 800a1b2:	017f      	lsls	r7, r7, #5
 800a1b4:	f8d8 6000 	ldr.w	r6, [r8]
 800a1b8:	1a3f      	subs	r7, r7, r0
 800a1ba:	42b7      	cmp	r7, r6
 800a1bc:	dd62      	ble.n	800a284 <__gethex+0x278>
 800a1be:	1bbf      	subs	r7, r7, r6
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fef5 	bl	800afb2 <__any_on>
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	b1a8      	cbz	r0, 800a1f8 <__gethex+0x1ec>
 800a1cc:	f04f 0a01 	mov.w	sl, #1
 800a1d0:	1e7b      	subs	r3, r7, #1
 800a1d2:	1159      	asrs	r1, r3, #5
 800a1d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a1d8:	f003 021f 	and.w	r2, r3, #31
 800a1dc:	fa0a f202 	lsl.w	r2, sl, r2
 800a1e0:	420a      	tst	r2, r1
 800a1e2:	d009      	beq.n	800a1f8 <__gethex+0x1ec>
 800a1e4:	4553      	cmp	r3, sl
 800a1e6:	dd05      	ble.n	800a1f4 <__gethex+0x1e8>
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	1eb9      	subs	r1, r7, #2
 800a1ec:	f000 fee1 	bl	800afb2 <__any_on>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d144      	bne.n	800a27e <__gethex+0x272>
 800a1f4:	f04f 0a02 	mov.w	sl, #2
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fe9e 	bl	8009f3c <rshift>
 800a200:	443d      	add	r5, r7
 800a202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a206:	42ab      	cmp	r3, r5
 800a208:	da4a      	bge.n	800a2a0 <__gethex+0x294>
 800a20a:	4621      	mov	r1, r4
 800a20c:	9802      	ldr	r0, [sp, #8]
 800a20e:	f000 fa79 	bl	800a704 <_Bfree>
 800a212:	2300      	movs	r3, #0
 800a214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a216:	27a3      	movs	r7, #163	; 0xa3
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	e789      	b.n	800a130 <__gethex+0x124>
 800a21c:	1e73      	subs	r3, r6, #1
 800a21e:	9a06      	ldr	r2, [sp, #24]
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a226:	4293      	cmp	r3, r2
 800a228:	d019      	beq.n	800a25e <__gethex+0x252>
 800a22a:	f1bb 0f20 	cmp.w	fp, #32
 800a22e:	d107      	bne.n	800a240 <__gethex+0x234>
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	9a01      	ldr	r2, [sp, #4]
 800a234:	f843 2b04 	str.w	r2, [r3], #4
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	2300      	movs	r3, #0
 800a23c:	469b      	mov	fp, r3
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a244:	f7ff fecd 	bl	8009fe2 <__hexdig_fun>
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	f000 000f 	and.w	r0, r0, #15
 800a24e:	fa00 f00b 	lsl.w	r0, r0, fp
 800a252:	4303      	orrs	r3, r0
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	f10b 0b04 	add.w	fp, fp, #4
 800a25a:	9b07      	ldr	r3, [sp, #28]
 800a25c:	e00d      	b.n	800a27a <__gethex+0x26e>
 800a25e:	9a08      	ldr	r2, [sp, #32]
 800a260:	1e73      	subs	r3, r6, #1
 800a262:	4413      	add	r3, r2
 800a264:	42bb      	cmp	r3, r7
 800a266:	d3e0      	bcc.n	800a22a <__gethex+0x21e>
 800a268:	4618      	mov	r0, r3
 800a26a:	4652      	mov	r2, sl
 800a26c:	9903      	ldr	r1, [sp, #12]
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	f001 f836 	bl	800b2e0 <strncmp>
 800a274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a276:	2800      	cmp	r0, #0
 800a278:	d1d7      	bne.n	800a22a <__gethex+0x21e>
 800a27a:	461e      	mov	r6, r3
 800a27c:	e78c      	b.n	800a198 <__gethex+0x18c>
 800a27e:	f04f 0a03 	mov.w	sl, #3
 800a282:	e7b9      	b.n	800a1f8 <__gethex+0x1ec>
 800a284:	da09      	bge.n	800a29a <__gethex+0x28e>
 800a286:	1bf7      	subs	r7, r6, r7
 800a288:	4621      	mov	r1, r4
 800a28a:	463a      	mov	r2, r7
 800a28c:	9802      	ldr	r0, [sp, #8]
 800a28e:	f000 fc51 	bl	800ab34 <__lshift>
 800a292:	4604      	mov	r4, r0
 800a294:	1bed      	subs	r5, r5, r7
 800a296:	f100 0914 	add.w	r9, r0, #20
 800a29a:	f04f 0a00 	mov.w	sl, #0
 800a29e:	e7b0      	b.n	800a202 <__gethex+0x1f6>
 800a2a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2a4:	42a8      	cmp	r0, r5
 800a2a6:	dd72      	ble.n	800a38e <__gethex+0x382>
 800a2a8:	1b45      	subs	r5, r0, r5
 800a2aa:	42ae      	cmp	r6, r5
 800a2ac:	dc35      	bgt.n	800a31a <__gethex+0x30e>
 800a2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d029      	beq.n	800a30a <__gethex+0x2fe>
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d02b      	beq.n	800a312 <__gethex+0x306>
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d11c      	bne.n	800a2f8 <__gethex+0x2ec>
 800a2be:	42ae      	cmp	r6, r5
 800a2c0:	d11a      	bne.n	800a2f8 <__gethex+0x2ec>
 800a2c2:	2e01      	cmp	r6, #1
 800a2c4:	d112      	bne.n	800a2ec <__gethex+0x2e0>
 800a2c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2ca:	9a05      	ldr	r2, [sp, #20]
 800a2cc:	2762      	movs	r7, #98	; 0x62
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	6123      	str	r3, [r4, #16]
 800a2d4:	f8c9 3000 	str.w	r3, [r9]
 800a2d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2da:	601c      	str	r4, [r3, #0]
 800a2dc:	e728      	b.n	800a130 <__gethex+0x124>
 800a2de:	bf00      	nop
 800a2e0:	0800dd40 	.word	0x0800dd40
 800a2e4:	0800dcc8 	.word	0x0800dcc8
 800a2e8:	0800dcd9 	.word	0x0800dcd9
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	1e71      	subs	r1, r6, #1
 800a2f0:	f000 fe5f 	bl	800afb2 <__any_on>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d1e6      	bne.n	800a2c6 <__gethex+0x2ba>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	9802      	ldr	r0, [sp, #8]
 800a2fc:	f000 fa02 	bl	800a704 <_Bfree>
 800a300:	2300      	movs	r3, #0
 800a302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a304:	2750      	movs	r7, #80	; 0x50
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	e712      	b.n	800a130 <__gethex+0x124>
 800a30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1f3      	bne.n	800a2f8 <__gethex+0x2ec>
 800a310:	e7d9      	b.n	800a2c6 <__gethex+0x2ba>
 800a312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1d6      	bne.n	800a2c6 <__gethex+0x2ba>
 800a318:	e7ee      	b.n	800a2f8 <__gethex+0x2ec>
 800a31a:	1e6f      	subs	r7, r5, #1
 800a31c:	f1ba 0f00 	cmp.w	sl, #0
 800a320:	d132      	bne.n	800a388 <__gethex+0x37c>
 800a322:	b127      	cbz	r7, 800a32e <__gethex+0x322>
 800a324:	4639      	mov	r1, r7
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fe43 	bl	800afb2 <__any_on>
 800a32c:	4682      	mov	sl, r0
 800a32e:	2101      	movs	r1, #1
 800a330:	117b      	asrs	r3, r7, #5
 800a332:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a336:	f007 071f 	and.w	r7, r7, #31
 800a33a:	fa01 f707 	lsl.w	r7, r1, r7
 800a33e:	421f      	tst	r7, r3
 800a340:	f04f 0702 	mov.w	r7, #2
 800a344:	4629      	mov	r1, r5
 800a346:	4620      	mov	r0, r4
 800a348:	bf18      	it	ne
 800a34a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a34e:	1b76      	subs	r6, r6, r5
 800a350:	f7ff fdf4 	bl	8009f3c <rshift>
 800a354:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	d048      	beq.n	800a3f0 <__gethex+0x3e4>
 800a35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d015      	beq.n	800a392 <__gethex+0x386>
 800a366:	2b03      	cmp	r3, #3
 800a368:	d017      	beq.n	800a39a <__gethex+0x38e>
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d109      	bne.n	800a382 <__gethex+0x376>
 800a36e:	f01a 0f02 	tst.w	sl, #2
 800a372:	d006      	beq.n	800a382 <__gethex+0x376>
 800a374:	f8d9 0000 	ldr.w	r0, [r9]
 800a378:	ea4a 0a00 	orr.w	sl, sl, r0
 800a37c:	f01a 0f01 	tst.w	sl, #1
 800a380:	d10e      	bne.n	800a3a0 <__gethex+0x394>
 800a382:	f047 0710 	orr.w	r7, r7, #16
 800a386:	e033      	b.n	800a3f0 <__gethex+0x3e4>
 800a388:	f04f 0a01 	mov.w	sl, #1
 800a38c:	e7cf      	b.n	800a32e <__gethex+0x322>
 800a38e:	2701      	movs	r7, #1
 800a390:	e7e2      	b.n	800a358 <__gethex+0x34c>
 800a392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a394:	f1c3 0301 	rsb	r3, r3, #1
 800a398:	9315      	str	r3, [sp, #84]	; 0x54
 800a39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d0f0      	beq.n	800a382 <__gethex+0x376>
 800a3a0:	f04f 0c00 	mov.w	ip, #0
 800a3a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3a8:	f104 0314 	add.w	r3, r4, #20
 800a3ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a3be:	d01c      	beq.n	800a3fa <__gethex+0x3ee>
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	6002      	str	r2, [r0, #0]
 800a3c4:	2f02      	cmp	r7, #2
 800a3c6:	f104 0314 	add.w	r3, r4, #20
 800a3ca:	d13d      	bne.n	800a448 <__gethex+0x43c>
 800a3cc:	f8d8 2000 	ldr.w	r2, [r8]
 800a3d0:	3a01      	subs	r2, #1
 800a3d2:	42b2      	cmp	r2, r6
 800a3d4:	d10a      	bne.n	800a3ec <__gethex+0x3e0>
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	1171      	asrs	r1, r6, #5
 800a3da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3de:	f006 061f 	and.w	r6, r6, #31
 800a3e2:	fa02 f606 	lsl.w	r6, r2, r6
 800a3e6:	421e      	tst	r6, r3
 800a3e8:	bf18      	it	ne
 800a3ea:	4617      	movne	r7, r2
 800a3ec:	f047 0720 	orr.w	r7, r7, #32
 800a3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3f2:	601c      	str	r4, [r3, #0]
 800a3f4:	9b05      	ldr	r3, [sp, #20]
 800a3f6:	601d      	str	r5, [r3, #0]
 800a3f8:	e69a      	b.n	800a130 <__gethex+0x124>
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a400:	d8d8      	bhi.n	800a3b4 <__gethex+0x3a8>
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	459b      	cmp	fp, r3
 800a406:	db17      	blt.n	800a438 <__gethex+0x42c>
 800a408:	6861      	ldr	r1, [r4, #4]
 800a40a:	9802      	ldr	r0, [sp, #8]
 800a40c:	3101      	adds	r1, #1
 800a40e:	f000 f939 	bl	800a684 <_Balloc>
 800a412:	4681      	mov	r9, r0
 800a414:	b918      	cbnz	r0, 800a41e <__gethex+0x412>
 800a416:	4602      	mov	r2, r0
 800a418:	2184      	movs	r1, #132	; 0x84
 800a41a:	4b19      	ldr	r3, [pc, #100]	; (800a480 <__gethex+0x474>)
 800a41c:	e6ab      	b.n	800a176 <__gethex+0x16a>
 800a41e:	6922      	ldr	r2, [r4, #16]
 800a420:	f104 010c 	add.w	r1, r4, #12
 800a424:	3202      	adds	r2, #2
 800a426:	0092      	lsls	r2, r2, #2
 800a428:	300c      	adds	r0, #12
 800a42a:	f000 f911 	bl	800a650 <memcpy>
 800a42e:	4621      	mov	r1, r4
 800a430:	9802      	ldr	r0, [sp, #8]
 800a432:	f000 f967 	bl	800a704 <_Bfree>
 800a436:	464c      	mov	r4, r9
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6122      	str	r2, [r4, #16]
 800a43e:	2201      	movs	r2, #1
 800a440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a444:	615a      	str	r2, [r3, #20]
 800a446:	e7bd      	b.n	800a3c4 <__gethex+0x3b8>
 800a448:	6922      	ldr	r2, [r4, #16]
 800a44a:	455a      	cmp	r2, fp
 800a44c:	dd0b      	ble.n	800a466 <__gethex+0x45a>
 800a44e:	2101      	movs	r1, #1
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff fd73 	bl	8009f3c <rshift>
 800a456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a45a:	3501      	adds	r5, #1
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	f6ff aed4 	blt.w	800a20a <__gethex+0x1fe>
 800a462:	2701      	movs	r7, #1
 800a464:	e7c2      	b.n	800a3ec <__gethex+0x3e0>
 800a466:	f016 061f 	ands.w	r6, r6, #31
 800a46a:	d0fa      	beq.n	800a462 <__gethex+0x456>
 800a46c:	4453      	add	r3, sl
 800a46e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a472:	f000 f9f9 	bl	800a868 <__hi0bits>
 800a476:	f1c6 0620 	rsb	r6, r6, #32
 800a47a:	42b0      	cmp	r0, r6
 800a47c:	dbe7      	blt.n	800a44e <__gethex+0x442>
 800a47e:	e7f0      	b.n	800a462 <__gethex+0x456>
 800a480:	0800dcc8 	.word	0x0800dcc8

0800a484 <L_shift>:
 800a484:	f1c2 0208 	rsb	r2, r2, #8
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	f1c2 0620 	rsb	r6, r2, #32
 800a490:	6843      	ldr	r3, [r0, #4]
 800a492:	6804      	ldr	r4, [r0, #0]
 800a494:	fa03 f506 	lsl.w	r5, r3, r6
 800a498:	432c      	orrs	r4, r5
 800a49a:	40d3      	lsrs	r3, r2
 800a49c:	6004      	str	r4, [r0, #0]
 800a49e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4a2:	4288      	cmp	r0, r1
 800a4a4:	d3f4      	bcc.n	800a490 <L_shift+0xc>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}

0800a4a8 <__match>:
 800a4a8:	b530      	push	{r4, r5, lr}
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b2:	b914      	cbnz	r4, 800a4ba <__match+0x12>
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	bd30      	pop	{r4, r5, pc}
 800a4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4c2:	2d19      	cmp	r5, #25
 800a4c4:	bf98      	it	ls
 800a4c6:	3220      	addls	r2, #32
 800a4c8:	42a2      	cmp	r2, r4
 800a4ca:	d0f0      	beq.n	800a4ae <__match+0x6>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e7f3      	b.n	800a4b8 <__match+0x10>

0800a4d0 <__hexnan>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	680b      	ldr	r3, [r1, #0]
 800a4d8:	4682      	mov	sl, r0
 800a4da:	115e      	asrs	r6, r3, #5
 800a4dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4e0:	f013 031f 	ands.w	r3, r3, #31
 800a4e4:	bf18      	it	ne
 800a4e6:	3604      	addne	r6, #4
 800a4e8:	1f37      	subs	r7, r6, #4
 800a4ea:	46b9      	mov	r9, r7
 800a4ec:	463c      	mov	r4, r7
 800a4ee:	46ab      	mov	fp, r5
 800a4f0:	b087      	sub	sp, #28
 800a4f2:	4690      	mov	r8, r2
 800a4f4:	6802      	ldr	r2, [r0, #0]
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4fc:	9502      	str	r5, [sp, #8]
 800a4fe:	7851      	ldrb	r1, [r2, #1]
 800a500:	1c53      	adds	r3, r2, #1
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	b341      	cbz	r1, 800a558 <__hexnan+0x88>
 800a506:	4608      	mov	r0, r1
 800a508:	9205      	str	r2, [sp, #20]
 800a50a:	9104      	str	r1, [sp, #16]
 800a50c:	f7ff fd69 	bl	8009fe2 <__hexdig_fun>
 800a510:	2800      	cmp	r0, #0
 800a512:	d14f      	bne.n	800a5b4 <__hexnan+0xe4>
 800a514:	9904      	ldr	r1, [sp, #16]
 800a516:	9a05      	ldr	r2, [sp, #20]
 800a518:	2920      	cmp	r1, #32
 800a51a:	d818      	bhi.n	800a54e <__hexnan+0x7e>
 800a51c:	9b02      	ldr	r3, [sp, #8]
 800a51e:	459b      	cmp	fp, r3
 800a520:	dd13      	ble.n	800a54a <__hexnan+0x7a>
 800a522:	454c      	cmp	r4, r9
 800a524:	d206      	bcs.n	800a534 <__hexnan+0x64>
 800a526:	2d07      	cmp	r5, #7
 800a528:	dc04      	bgt.n	800a534 <__hexnan+0x64>
 800a52a:	462a      	mov	r2, r5
 800a52c:	4649      	mov	r1, r9
 800a52e:	4620      	mov	r0, r4
 800a530:	f7ff ffa8 	bl	800a484 <L_shift>
 800a534:	4544      	cmp	r4, r8
 800a536:	d950      	bls.n	800a5da <__hexnan+0x10a>
 800a538:	2300      	movs	r3, #0
 800a53a:	f1a4 0904 	sub.w	r9, r4, #4
 800a53e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a542:	461d      	mov	r5, r3
 800a544:	464c      	mov	r4, r9
 800a546:	f8cd b008 	str.w	fp, [sp, #8]
 800a54a:	9a03      	ldr	r2, [sp, #12]
 800a54c:	e7d7      	b.n	800a4fe <__hexnan+0x2e>
 800a54e:	2929      	cmp	r1, #41	; 0x29
 800a550:	d156      	bne.n	800a600 <__hexnan+0x130>
 800a552:	3202      	adds	r2, #2
 800a554:	f8ca 2000 	str.w	r2, [sl]
 800a558:	f1bb 0f00 	cmp.w	fp, #0
 800a55c:	d050      	beq.n	800a600 <__hexnan+0x130>
 800a55e:	454c      	cmp	r4, r9
 800a560:	d206      	bcs.n	800a570 <__hexnan+0xa0>
 800a562:	2d07      	cmp	r5, #7
 800a564:	dc04      	bgt.n	800a570 <__hexnan+0xa0>
 800a566:	462a      	mov	r2, r5
 800a568:	4649      	mov	r1, r9
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff ff8a 	bl	800a484 <L_shift>
 800a570:	4544      	cmp	r4, r8
 800a572:	d934      	bls.n	800a5de <__hexnan+0x10e>
 800a574:	4623      	mov	r3, r4
 800a576:	f1a8 0204 	sub.w	r2, r8, #4
 800a57a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a57e:	429f      	cmp	r7, r3
 800a580:	f842 1f04 	str.w	r1, [r2, #4]!
 800a584:	d2f9      	bcs.n	800a57a <__hexnan+0xaa>
 800a586:	1b3b      	subs	r3, r7, r4
 800a588:	f023 0303 	bic.w	r3, r3, #3
 800a58c:	3304      	adds	r3, #4
 800a58e:	3401      	adds	r4, #1
 800a590:	3e03      	subs	r6, #3
 800a592:	42b4      	cmp	r4, r6
 800a594:	bf88      	it	hi
 800a596:	2304      	movhi	r3, #4
 800a598:	2200      	movs	r2, #0
 800a59a:	4443      	add	r3, r8
 800a59c:	f843 2b04 	str.w	r2, [r3], #4
 800a5a0:	429f      	cmp	r7, r3
 800a5a2:	d2fb      	bcs.n	800a59c <__hexnan+0xcc>
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	b91b      	cbnz	r3, 800a5b0 <__hexnan+0xe0>
 800a5a8:	4547      	cmp	r7, r8
 800a5aa:	d127      	bne.n	800a5fc <__hexnan+0x12c>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	2005      	movs	r0, #5
 800a5b2:	e026      	b.n	800a602 <__hexnan+0x132>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	2d08      	cmp	r5, #8
 800a5b8:	f10b 0b01 	add.w	fp, fp, #1
 800a5bc:	dd06      	ble.n	800a5cc <__hexnan+0xfc>
 800a5be:	4544      	cmp	r4, r8
 800a5c0:	d9c3      	bls.n	800a54a <__hexnan+0x7a>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2501      	movs	r5, #1
 800a5c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5ca:	3c04      	subs	r4, #4
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	f000 000f 	and.w	r0, r0, #15
 800a5d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a5d6:	6022      	str	r2, [r4, #0]
 800a5d8:	e7b7      	b.n	800a54a <__hexnan+0x7a>
 800a5da:	2508      	movs	r5, #8
 800a5dc:	e7b5      	b.n	800a54a <__hexnan+0x7a>
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0df      	beq.n	800a5a4 <__hexnan+0xd4>
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5e8:	f1c3 0320 	rsb	r3, r3, #32
 800a5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5f4:	401a      	ands	r2, r3
 800a5f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a5fa:	e7d3      	b.n	800a5a4 <__hexnan+0xd4>
 800a5fc:	3f04      	subs	r7, #4
 800a5fe:	e7d1      	b.n	800a5a4 <__hexnan+0xd4>
 800a600:	2004      	movs	r0, #4
 800a602:	b007      	add	sp, #28
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a608 <_localeconv_r>:
 800a608:	4800      	ldr	r0, [pc, #0]	; (800a60c <_localeconv_r+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	20000198 	.word	0x20000198

0800a610 <__ascii_mbtowc>:
 800a610:	b082      	sub	sp, #8
 800a612:	b901      	cbnz	r1, 800a616 <__ascii_mbtowc+0x6>
 800a614:	a901      	add	r1, sp, #4
 800a616:	b142      	cbz	r2, 800a62a <__ascii_mbtowc+0x1a>
 800a618:	b14b      	cbz	r3, 800a62e <__ascii_mbtowc+0x1e>
 800a61a:	7813      	ldrb	r3, [r2, #0]
 800a61c:	600b      	str	r3, [r1, #0]
 800a61e:	7812      	ldrb	r2, [r2, #0]
 800a620:	1e10      	subs	r0, r2, #0
 800a622:	bf18      	it	ne
 800a624:	2001      	movne	r0, #1
 800a626:	b002      	add	sp, #8
 800a628:	4770      	bx	lr
 800a62a:	4610      	mov	r0, r2
 800a62c:	e7fb      	b.n	800a626 <__ascii_mbtowc+0x16>
 800a62e:	f06f 0001 	mvn.w	r0, #1
 800a632:	e7f8      	b.n	800a626 <__ascii_mbtowc+0x16>

0800a634 <memchr>:
 800a634:	4603      	mov	r3, r0
 800a636:	b510      	push	{r4, lr}
 800a638:	b2c9      	uxtb	r1, r1
 800a63a:	4402      	add	r2, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	d101      	bne.n	800a646 <memchr+0x12>
 800a642:	2000      	movs	r0, #0
 800a644:	e003      	b.n	800a64e <memchr+0x1a>
 800a646:	7804      	ldrb	r4, [r0, #0]
 800a648:	3301      	adds	r3, #1
 800a64a:	428c      	cmp	r4, r1
 800a64c:	d1f6      	bne.n	800a63c <memchr+0x8>
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <memcpy>:
 800a650:	440a      	add	r2, r1
 800a652:	4291      	cmp	r1, r2
 800a654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a658:	d100      	bne.n	800a65c <memcpy+0xc>
 800a65a:	4770      	bx	lr
 800a65c:	b510      	push	{r4, lr}
 800a65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a662:	4291      	cmp	r1, r2
 800a664:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a668:	d1f9      	bne.n	800a65e <memcpy+0xe>
 800a66a:	bd10      	pop	{r4, pc}

0800a66c <__malloc_lock>:
 800a66c:	4801      	ldr	r0, [pc, #4]	; (800a674 <__malloc_lock+0x8>)
 800a66e:	f000 be8a 	b.w	800b386 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	20000704 	.word	0x20000704

0800a678 <__malloc_unlock>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__malloc_unlock+0x8>)
 800a67a:	f000 be85 	b.w	800b388 <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	20000704 	.word	0x20000704

0800a684 <_Balloc>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	b976      	cbnz	r6, 800a6ac <_Balloc+0x28>
 800a68e:	2010      	movs	r0, #16
 800a690:	f7fc ffb4 	bl	80075fc <malloc>
 800a694:	4602      	mov	r2, r0
 800a696:	6260      	str	r0, [r4, #36]	; 0x24
 800a698:	b920      	cbnz	r0, 800a6a4 <_Balloc+0x20>
 800a69a:	2166      	movs	r1, #102	; 0x66
 800a69c:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <_Balloc+0x78>)
 800a69e:	4818      	ldr	r0, [pc, #96]	; (800a700 <_Balloc+0x7c>)
 800a6a0:	f000 fe40 	bl	800b324 <__assert_func>
 800a6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6a8:	6006      	str	r6, [r0, #0]
 800a6aa:	60c6      	str	r6, [r0, #12]
 800a6ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6ae:	68f3      	ldr	r3, [r6, #12]
 800a6b0:	b183      	cbz	r3, 800a6d4 <_Balloc+0x50>
 800a6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6ba:	b9b8      	cbnz	r0, 800a6ec <_Balloc+0x68>
 800a6bc:	2101      	movs	r1, #1
 800a6be:	fa01 f605 	lsl.w	r6, r1, r5
 800a6c2:	1d72      	adds	r2, r6, #5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	0092      	lsls	r2, r2, #2
 800a6c8:	f000 fc94 	bl	800aff4 <_calloc_r>
 800a6cc:	b160      	cbz	r0, 800a6e8 <_Balloc+0x64>
 800a6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6d2:	e00e      	b.n	800a6f2 <_Balloc+0x6e>
 800a6d4:	2221      	movs	r2, #33	; 0x21
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fc8b 	bl	800aff4 <_calloc_r>
 800a6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6e0:	60f0      	str	r0, [r6, #12]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1e4      	bne.n	800a6b2 <_Balloc+0x2e>
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	6802      	ldr	r2, [r0, #0]
 800a6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6f8:	e7f7      	b.n	800a6ea <_Balloc+0x66>
 800a6fa:	bf00      	nop
 800a6fc:	0800dc56 	.word	0x0800dc56
 800a700:	0800dd54 	.word	0x0800dd54

0800a704 <_Bfree>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a708:	4605      	mov	r5, r0
 800a70a:	460c      	mov	r4, r1
 800a70c:	b976      	cbnz	r6, 800a72c <_Bfree+0x28>
 800a70e:	2010      	movs	r0, #16
 800a710:	f7fc ff74 	bl	80075fc <malloc>
 800a714:	4602      	mov	r2, r0
 800a716:	6268      	str	r0, [r5, #36]	; 0x24
 800a718:	b920      	cbnz	r0, 800a724 <_Bfree+0x20>
 800a71a:	218a      	movs	r1, #138	; 0x8a
 800a71c:	4b08      	ldr	r3, [pc, #32]	; (800a740 <_Bfree+0x3c>)
 800a71e:	4809      	ldr	r0, [pc, #36]	; (800a744 <_Bfree+0x40>)
 800a720:	f000 fe00 	bl	800b324 <__assert_func>
 800a724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a728:	6006      	str	r6, [r0, #0]
 800a72a:	60c6      	str	r6, [r0, #12]
 800a72c:	b13c      	cbz	r4, 800a73e <_Bfree+0x3a>
 800a72e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a730:	6862      	ldr	r2, [r4, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a738:	6021      	str	r1, [r4, #0]
 800a73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	0800dc56 	.word	0x0800dc56
 800a744:	0800dd54 	.word	0x0800dd54

0800a748 <__multadd>:
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	4607      	mov	r7, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	461e      	mov	r6, r3
 800a752:	2000      	movs	r0, #0
 800a754:	690d      	ldr	r5, [r1, #16]
 800a756:	f101 0c14 	add.w	ip, r1, #20
 800a75a:	f8dc 3000 	ldr.w	r3, [ip]
 800a75e:	3001      	adds	r0, #1
 800a760:	b299      	uxth	r1, r3
 800a762:	fb02 6101 	mla	r1, r2, r1, r6
 800a766:	0c1e      	lsrs	r6, r3, #16
 800a768:	0c0b      	lsrs	r3, r1, #16
 800a76a:	fb02 3306 	mla	r3, r2, r6, r3
 800a76e:	b289      	uxth	r1, r1
 800a770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a774:	4285      	cmp	r5, r0
 800a776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a77a:	f84c 1b04 	str.w	r1, [ip], #4
 800a77e:	dcec      	bgt.n	800a75a <__multadd+0x12>
 800a780:	b30e      	cbz	r6, 800a7c6 <__multadd+0x7e>
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	42ab      	cmp	r3, r5
 800a786:	dc19      	bgt.n	800a7bc <__multadd+0x74>
 800a788:	6861      	ldr	r1, [r4, #4]
 800a78a:	4638      	mov	r0, r7
 800a78c:	3101      	adds	r1, #1
 800a78e:	f7ff ff79 	bl	800a684 <_Balloc>
 800a792:	4680      	mov	r8, r0
 800a794:	b928      	cbnz	r0, 800a7a2 <__multadd+0x5a>
 800a796:	4602      	mov	r2, r0
 800a798:	21b5      	movs	r1, #181	; 0xb5
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <__multadd+0x84>)
 800a79c:	480c      	ldr	r0, [pc, #48]	; (800a7d0 <__multadd+0x88>)
 800a79e:	f000 fdc1 	bl	800b324 <__assert_func>
 800a7a2:	6922      	ldr	r2, [r4, #16]
 800a7a4:	f104 010c 	add.w	r1, r4, #12
 800a7a8:	3202      	adds	r2, #2
 800a7aa:	0092      	lsls	r2, r2, #2
 800a7ac:	300c      	adds	r0, #12
 800a7ae:	f7ff ff4f 	bl	800a650 <memcpy>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f7ff ffa5 	bl	800a704 <_Bfree>
 800a7ba:	4644      	mov	r4, r8
 800a7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	615e      	str	r6, [r3, #20]
 800a7c4:	6125      	str	r5, [r4, #16]
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7cc:	0800dcc8 	.word	0x0800dcc8
 800a7d0:	0800dd54 	.word	0x0800dd54

0800a7d4 <__s2b>:
 800a7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	4615      	mov	r5, r2
 800a7da:	2209      	movs	r2, #9
 800a7dc:	461f      	mov	r7, r3
 800a7de:	3308      	adds	r3, #8
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	db09      	blt.n	800a804 <__s2b+0x30>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff ff47 	bl	800a684 <_Balloc>
 800a7f6:	b940      	cbnz	r0, 800a80a <__s2b+0x36>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	21ce      	movs	r1, #206	; 0xce
 800a7fc:	4b18      	ldr	r3, [pc, #96]	; (800a860 <__s2b+0x8c>)
 800a7fe:	4819      	ldr	r0, [pc, #100]	; (800a864 <__s2b+0x90>)
 800a800:	f000 fd90 	bl	800b324 <__assert_func>
 800a804:	0052      	lsls	r2, r2, #1
 800a806:	3101      	adds	r1, #1
 800a808:	e7f0      	b.n	800a7ec <__s2b+0x18>
 800a80a:	9b08      	ldr	r3, [sp, #32]
 800a80c:	2d09      	cmp	r5, #9
 800a80e:	6143      	str	r3, [r0, #20]
 800a810:	f04f 0301 	mov.w	r3, #1
 800a814:	6103      	str	r3, [r0, #16]
 800a816:	dd16      	ble.n	800a846 <__s2b+0x72>
 800a818:	f104 0909 	add.w	r9, r4, #9
 800a81c:	46c8      	mov	r8, r9
 800a81e:	442c      	add	r4, r5
 800a820:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a824:	4601      	mov	r1, r0
 800a826:	220a      	movs	r2, #10
 800a828:	4630      	mov	r0, r6
 800a82a:	3b30      	subs	r3, #48	; 0x30
 800a82c:	f7ff ff8c 	bl	800a748 <__multadd>
 800a830:	45a0      	cmp	r8, r4
 800a832:	d1f5      	bne.n	800a820 <__s2b+0x4c>
 800a834:	f1a5 0408 	sub.w	r4, r5, #8
 800a838:	444c      	add	r4, r9
 800a83a:	1b2d      	subs	r5, r5, r4
 800a83c:	1963      	adds	r3, r4, r5
 800a83e:	42bb      	cmp	r3, r7
 800a840:	db04      	blt.n	800a84c <__s2b+0x78>
 800a842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a846:	2509      	movs	r5, #9
 800a848:	340a      	adds	r4, #10
 800a84a:	e7f6      	b.n	800a83a <__s2b+0x66>
 800a84c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a850:	4601      	mov	r1, r0
 800a852:	220a      	movs	r2, #10
 800a854:	4630      	mov	r0, r6
 800a856:	3b30      	subs	r3, #48	; 0x30
 800a858:	f7ff ff76 	bl	800a748 <__multadd>
 800a85c:	e7ee      	b.n	800a83c <__s2b+0x68>
 800a85e:	bf00      	nop
 800a860:	0800dcc8 	.word	0x0800dcc8
 800a864:	0800dd54 	.word	0x0800dd54

0800a868 <__hi0bits>:
 800a868:	0c02      	lsrs	r2, r0, #16
 800a86a:	0412      	lsls	r2, r2, #16
 800a86c:	4603      	mov	r3, r0
 800a86e:	b9ca      	cbnz	r2, 800a8a4 <__hi0bits+0x3c>
 800a870:	0403      	lsls	r3, r0, #16
 800a872:	2010      	movs	r0, #16
 800a874:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a878:	bf04      	itt	eq
 800a87a:	021b      	lsleq	r3, r3, #8
 800a87c:	3008      	addeq	r0, #8
 800a87e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a882:	bf04      	itt	eq
 800a884:	011b      	lsleq	r3, r3, #4
 800a886:	3004      	addeq	r0, #4
 800a888:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a88c:	bf04      	itt	eq
 800a88e:	009b      	lsleq	r3, r3, #2
 800a890:	3002      	addeq	r0, #2
 800a892:	2b00      	cmp	r3, #0
 800a894:	db05      	blt.n	800a8a2 <__hi0bits+0x3a>
 800a896:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a89a:	f100 0001 	add.w	r0, r0, #1
 800a89e:	bf08      	it	eq
 800a8a0:	2020      	moveq	r0, #32
 800a8a2:	4770      	bx	lr
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	e7e5      	b.n	800a874 <__hi0bits+0xc>

0800a8a8 <__lo0bits>:
 800a8a8:	6803      	ldr	r3, [r0, #0]
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	f013 0007 	ands.w	r0, r3, #7
 800a8b0:	d00b      	beq.n	800a8ca <__lo0bits+0x22>
 800a8b2:	07d9      	lsls	r1, r3, #31
 800a8b4:	d421      	bmi.n	800a8fa <__lo0bits+0x52>
 800a8b6:	0798      	lsls	r0, r3, #30
 800a8b8:	bf49      	itett	mi
 800a8ba:	085b      	lsrmi	r3, r3, #1
 800a8bc:	089b      	lsrpl	r3, r3, #2
 800a8be:	2001      	movmi	r0, #1
 800a8c0:	6013      	strmi	r3, [r2, #0]
 800a8c2:	bf5c      	itt	pl
 800a8c4:	2002      	movpl	r0, #2
 800a8c6:	6013      	strpl	r3, [r2, #0]
 800a8c8:	4770      	bx	lr
 800a8ca:	b299      	uxth	r1, r3
 800a8cc:	b909      	cbnz	r1, 800a8d2 <__lo0bits+0x2a>
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	0c1b      	lsrs	r3, r3, #16
 800a8d2:	b2d9      	uxtb	r1, r3
 800a8d4:	b909      	cbnz	r1, 800a8da <__lo0bits+0x32>
 800a8d6:	3008      	adds	r0, #8
 800a8d8:	0a1b      	lsrs	r3, r3, #8
 800a8da:	0719      	lsls	r1, r3, #28
 800a8dc:	bf04      	itt	eq
 800a8de:	091b      	lsreq	r3, r3, #4
 800a8e0:	3004      	addeq	r0, #4
 800a8e2:	0799      	lsls	r1, r3, #30
 800a8e4:	bf04      	itt	eq
 800a8e6:	089b      	lsreq	r3, r3, #2
 800a8e8:	3002      	addeq	r0, #2
 800a8ea:	07d9      	lsls	r1, r3, #31
 800a8ec:	d403      	bmi.n	800a8f6 <__lo0bits+0x4e>
 800a8ee:	085b      	lsrs	r3, r3, #1
 800a8f0:	f100 0001 	add.w	r0, r0, #1
 800a8f4:	d003      	beq.n	800a8fe <__lo0bits+0x56>
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	4770      	bx	lr
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	4770      	bx	lr
 800a8fe:	2020      	movs	r0, #32
 800a900:	4770      	bx	lr
	...

0800a904 <__i2b>:
 800a904:	b510      	push	{r4, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	2101      	movs	r1, #1
 800a90a:	f7ff febb 	bl	800a684 <_Balloc>
 800a90e:	4602      	mov	r2, r0
 800a910:	b928      	cbnz	r0, 800a91e <__i2b+0x1a>
 800a912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a916:	4b04      	ldr	r3, [pc, #16]	; (800a928 <__i2b+0x24>)
 800a918:	4804      	ldr	r0, [pc, #16]	; (800a92c <__i2b+0x28>)
 800a91a:	f000 fd03 	bl	800b324 <__assert_func>
 800a91e:	2301      	movs	r3, #1
 800a920:	6144      	str	r4, [r0, #20]
 800a922:	6103      	str	r3, [r0, #16]
 800a924:	bd10      	pop	{r4, pc}
 800a926:	bf00      	nop
 800a928:	0800dcc8 	.word	0x0800dcc8
 800a92c:	0800dd54 	.word	0x0800dd54

0800a930 <__multiply>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	4691      	mov	r9, r2
 800a936:	690a      	ldr	r2, [r1, #16]
 800a938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a93c:	460c      	mov	r4, r1
 800a93e:	429a      	cmp	r2, r3
 800a940:	bfbe      	ittt	lt
 800a942:	460b      	movlt	r3, r1
 800a944:	464c      	movlt	r4, r9
 800a946:	4699      	movlt	r9, r3
 800a948:	6927      	ldr	r7, [r4, #16]
 800a94a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	6861      	ldr	r1, [r4, #4]
 800a952:	eb07 060a 	add.w	r6, r7, sl
 800a956:	42b3      	cmp	r3, r6
 800a958:	b085      	sub	sp, #20
 800a95a:	bfb8      	it	lt
 800a95c:	3101      	addlt	r1, #1
 800a95e:	f7ff fe91 	bl	800a684 <_Balloc>
 800a962:	b930      	cbnz	r0, 800a972 <__multiply+0x42>
 800a964:	4602      	mov	r2, r0
 800a966:	f240 115d 	movw	r1, #349	; 0x15d
 800a96a:	4b43      	ldr	r3, [pc, #268]	; (800aa78 <__multiply+0x148>)
 800a96c:	4843      	ldr	r0, [pc, #268]	; (800aa7c <__multiply+0x14c>)
 800a96e:	f000 fcd9 	bl	800b324 <__assert_func>
 800a972:	f100 0514 	add.w	r5, r0, #20
 800a976:	462b      	mov	r3, r5
 800a978:	2200      	movs	r2, #0
 800a97a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a97e:	4543      	cmp	r3, r8
 800a980:	d321      	bcc.n	800a9c6 <__multiply+0x96>
 800a982:	f104 0314 	add.w	r3, r4, #20
 800a986:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a98a:	f109 0314 	add.w	r3, r9, #20
 800a98e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a992:	9202      	str	r2, [sp, #8]
 800a994:	1b3a      	subs	r2, r7, r4
 800a996:	3a15      	subs	r2, #21
 800a998:	f022 0203 	bic.w	r2, r2, #3
 800a99c:	3204      	adds	r2, #4
 800a99e:	f104 0115 	add.w	r1, r4, #21
 800a9a2:	428f      	cmp	r7, r1
 800a9a4:	bf38      	it	cc
 800a9a6:	2204      	movcc	r2, #4
 800a9a8:	9201      	str	r2, [sp, #4]
 800a9aa:	9a02      	ldr	r2, [sp, #8]
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d80c      	bhi.n	800a9cc <__multiply+0x9c>
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	dd03      	ble.n	800a9be <__multiply+0x8e>
 800a9b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d059      	beq.n	800aa72 <__multiply+0x142>
 800a9be:	6106      	str	r6, [r0, #16]
 800a9c0:	b005      	add	sp, #20
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	f843 2b04 	str.w	r2, [r3], #4
 800a9ca:	e7d8      	b.n	800a97e <__multiply+0x4e>
 800a9cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9d0:	f1ba 0f00 	cmp.w	sl, #0
 800a9d4:	d023      	beq.n	800aa1e <__multiply+0xee>
 800a9d6:	46a9      	mov	r9, r5
 800a9d8:	f04f 0c00 	mov.w	ip, #0
 800a9dc:	f104 0e14 	add.w	lr, r4, #20
 800a9e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9e4:	f8d9 1000 	ldr.w	r1, [r9]
 800a9e8:	fa1f fb82 	uxth.w	fp, r2
 800a9ec:	b289      	uxth	r1, r1
 800a9ee:	fb0a 110b 	mla	r1, sl, fp, r1
 800a9f2:	4461      	add	r1, ip
 800a9f4:	f8d9 c000 	ldr.w	ip, [r9]
 800a9f8:	0c12      	lsrs	r2, r2, #16
 800a9fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a9fe:	fb0a c202 	mla	r2, sl, r2, ip
 800aa02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa06:	b289      	uxth	r1, r1
 800aa08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa0c:	4577      	cmp	r7, lr
 800aa0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa12:	f849 1b04 	str.w	r1, [r9], #4
 800aa16:	d8e3      	bhi.n	800a9e0 <__multiply+0xb0>
 800aa18:	9a01      	ldr	r2, [sp, #4]
 800aa1a:	f845 c002 	str.w	ip, [r5, r2]
 800aa1e:	9a03      	ldr	r2, [sp, #12]
 800aa20:	3304      	adds	r3, #4
 800aa22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa26:	f1b9 0f00 	cmp.w	r9, #0
 800aa2a:	d020      	beq.n	800aa6e <__multiply+0x13e>
 800aa2c:	46ae      	mov	lr, r5
 800aa2e:	f04f 0a00 	mov.w	sl, #0
 800aa32:	6829      	ldr	r1, [r5, #0]
 800aa34:	f104 0c14 	add.w	ip, r4, #20
 800aa38:	f8bc b000 	ldrh.w	fp, [ip]
 800aa3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa40:	b289      	uxth	r1, r1
 800aa42:	fb09 220b 	mla	r2, r9, fp, r2
 800aa46:	4492      	add	sl, r2
 800aa48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa4c:	f84e 1b04 	str.w	r1, [lr], #4
 800aa50:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa54:	f8be 1000 	ldrh.w	r1, [lr]
 800aa58:	0c12      	lsrs	r2, r2, #16
 800aa5a:	fb09 1102 	mla	r1, r9, r2, r1
 800aa5e:	4567      	cmp	r7, ip
 800aa60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa68:	d8e6      	bhi.n	800aa38 <__multiply+0x108>
 800aa6a:	9a01      	ldr	r2, [sp, #4]
 800aa6c:	50a9      	str	r1, [r5, r2]
 800aa6e:	3504      	adds	r5, #4
 800aa70:	e79b      	b.n	800a9aa <__multiply+0x7a>
 800aa72:	3e01      	subs	r6, #1
 800aa74:	e79d      	b.n	800a9b2 <__multiply+0x82>
 800aa76:	bf00      	nop
 800aa78:	0800dcc8 	.word	0x0800dcc8
 800aa7c:	0800dd54 	.word	0x0800dd54

0800aa80 <__pow5mult>:
 800aa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa84:	4615      	mov	r5, r2
 800aa86:	f012 0203 	ands.w	r2, r2, #3
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	d007      	beq.n	800aaa0 <__pow5mult+0x20>
 800aa90:	4c25      	ldr	r4, [pc, #148]	; (800ab28 <__pow5mult+0xa8>)
 800aa92:	3a01      	subs	r2, #1
 800aa94:	2300      	movs	r3, #0
 800aa96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa9a:	f7ff fe55 	bl	800a748 <__multadd>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	10ad      	asrs	r5, r5, #2
 800aaa2:	d03d      	beq.n	800ab20 <__pow5mult+0xa0>
 800aaa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaa6:	b97c      	cbnz	r4, 800aac8 <__pow5mult+0x48>
 800aaa8:	2010      	movs	r0, #16
 800aaaa:	f7fc fda7 	bl	80075fc <malloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	6270      	str	r0, [r6, #36]	; 0x24
 800aab2:	b928      	cbnz	r0, 800aac0 <__pow5mult+0x40>
 800aab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aab8:	4b1c      	ldr	r3, [pc, #112]	; (800ab2c <__pow5mult+0xac>)
 800aaba:	481d      	ldr	r0, [pc, #116]	; (800ab30 <__pow5mult+0xb0>)
 800aabc:	f000 fc32 	bl	800b324 <__assert_func>
 800aac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	60c4      	str	r4, [r0, #12]
 800aac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aad0:	b94c      	cbnz	r4, 800aae6 <__pow5mult+0x66>
 800aad2:	f240 2171 	movw	r1, #625	; 0x271
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ff14 	bl	800a904 <__i2b>
 800aadc:	2300      	movs	r3, #0
 800aade:	4604      	mov	r4, r0
 800aae0:	f8c8 0008 	str.w	r0, [r8, #8]
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	f04f 0900 	mov.w	r9, #0
 800aaea:	07eb      	lsls	r3, r5, #31
 800aaec:	d50a      	bpl.n	800ab04 <__pow5mult+0x84>
 800aaee:	4639      	mov	r1, r7
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7ff ff1c 	bl	800a930 <__multiply>
 800aaf8:	4680      	mov	r8, r0
 800aafa:	4639      	mov	r1, r7
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fe01 	bl	800a704 <_Bfree>
 800ab02:	4647      	mov	r7, r8
 800ab04:	106d      	asrs	r5, r5, #1
 800ab06:	d00b      	beq.n	800ab20 <__pow5mult+0xa0>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	b938      	cbnz	r0, 800ab1c <__pow5mult+0x9c>
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff ff0d 	bl	800a930 <__multiply>
 800ab16:	6020      	str	r0, [r4, #0]
 800ab18:	f8c0 9000 	str.w	r9, [r0]
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	e7e4      	b.n	800aaea <__pow5mult+0x6a>
 800ab20:	4638      	mov	r0, r7
 800ab22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab26:	bf00      	nop
 800ab28:	0800dea0 	.word	0x0800dea0
 800ab2c:	0800dc56 	.word	0x0800dc56
 800ab30:	0800dd54 	.word	0x0800dd54

0800ab34 <__lshift>:
 800ab34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	460c      	mov	r4, r1
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	4691      	mov	r9, r2
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	6849      	ldr	r1, [r1, #4]
 800ab42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab4c:	f108 0601 	add.w	r6, r8, #1
 800ab50:	42b3      	cmp	r3, r6
 800ab52:	db0b      	blt.n	800ab6c <__lshift+0x38>
 800ab54:	4638      	mov	r0, r7
 800ab56:	f7ff fd95 	bl	800a684 <_Balloc>
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	b948      	cbnz	r0, 800ab72 <__lshift+0x3e>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab64:	4b29      	ldr	r3, [pc, #164]	; (800ac0c <__lshift+0xd8>)
 800ab66:	482a      	ldr	r0, [pc, #168]	; (800ac10 <__lshift+0xdc>)
 800ab68:	f000 fbdc 	bl	800b324 <__assert_func>
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	e7ee      	b.n	800ab50 <__lshift+0x1c>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f100 0114 	add.w	r1, r0, #20
 800ab78:	f100 0210 	add.w	r2, r0, #16
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	4553      	cmp	r3, sl
 800ab80:	db37      	blt.n	800abf2 <__lshift+0xbe>
 800ab82:	6920      	ldr	r0, [r4, #16]
 800ab84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab88:	f104 0314 	add.w	r3, r4, #20
 800ab8c:	f019 091f 	ands.w	r9, r9, #31
 800ab90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab98:	d02f      	beq.n	800abfa <__lshift+0xc6>
 800ab9a:	468a      	mov	sl, r1
 800ab9c:	f04f 0c00 	mov.w	ip, #0
 800aba0:	f1c9 0e20 	rsb	lr, r9, #32
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	fa02 f209 	lsl.w	r2, r2, r9
 800abaa:	ea42 020c 	orr.w	r2, r2, ip
 800abae:	f84a 2b04 	str.w	r2, [sl], #4
 800abb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb6:	4298      	cmp	r0, r3
 800abb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800abbc:	d8f2      	bhi.n	800aba4 <__lshift+0x70>
 800abbe:	1b03      	subs	r3, r0, r4
 800abc0:	3b15      	subs	r3, #21
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	3304      	adds	r3, #4
 800abc8:	f104 0215 	add.w	r2, r4, #21
 800abcc:	4290      	cmp	r0, r2
 800abce:	bf38      	it	cc
 800abd0:	2304      	movcc	r3, #4
 800abd2:	f841 c003 	str.w	ip, [r1, r3]
 800abd6:	f1bc 0f00 	cmp.w	ip, #0
 800abda:	d001      	beq.n	800abe0 <__lshift+0xac>
 800abdc:	f108 0602 	add.w	r6, r8, #2
 800abe0:	3e01      	subs	r6, #1
 800abe2:	4638      	mov	r0, r7
 800abe4:	4621      	mov	r1, r4
 800abe6:	612e      	str	r6, [r5, #16]
 800abe8:	f7ff fd8c 	bl	800a704 <_Bfree>
 800abec:	4628      	mov	r0, r5
 800abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800abf6:	3301      	adds	r3, #1
 800abf8:	e7c1      	b.n	800ab7e <__lshift+0x4a>
 800abfa:	3904      	subs	r1, #4
 800abfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac00:	4298      	cmp	r0, r3
 800ac02:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac06:	d8f9      	bhi.n	800abfc <__lshift+0xc8>
 800ac08:	e7ea      	b.n	800abe0 <__lshift+0xac>
 800ac0a:	bf00      	nop
 800ac0c:	0800dcc8 	.word	0x0800dcc8
 800ac10:	0800dd54 	.word	0x0800dd54

0800ac14 <__mcmp>:
 800ac14:	4603      	mov	r3, r0
 800ac16:	690a      	ldr	r2, [r1, #16]
 800ac18:	6900      	ldr	r0, [r0, #16]
 800ac1a:	b530      	push	{r4, r5, lr}
 800ac1c:	1a80      	subs	r0, r0, r2
 800ac1e:	d10d      	bne.n	800ac3c <__mcmp+0x28>
 800ac20:	3314      	adds	r3, #20
 800ac22:	3114      	adds	r1, #20
 800ac24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac34:	4295      	cmp	r5, r2
 800ac36:	d002      	beq.n	800ac3e <__mcmp+0x2a>
 800ac38:	d304      	bcc.n	800ac44 <__mcmp+0x30>
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	bd30      	pop	{r4, r5, pc}
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	d3f4      	bcc.n	800ac2c <__mcmp+0x18>
 800ac42:	e7fb      	b.n	800ac3c <__mcmp+0x28>
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac48:	e7f8      	b.n	800ac3c <__mcmp+0x28>
	...

0800ac4c <__mdiff>:
 800ac4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	460d      	mov	r5, r1
 800ac52:	4607      	mov	r7, r0
 800ac54:	4611      	mov	r1, r2
 800ac56:	4628      	mov	r0, r5
 800ac58:	4614      	mov	r4, r2
 800ac5a:	f7ff ffdb 	bl	800ac14 <__mcmp>
 800ac5e:	1e06      	subs	r6, r0, #0
 800ac60:	d111      	bne.n	800ac86 <__mdiff+0x3a>
 800ac62:	4631      	mov	r1, r6
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff fd0d 	bl	800a684 <_Balloc>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	b928      	cbnz	r0, 800ac7a <__mdiff+0x2e>
 800ac6e:	f240 2132 	movw	r1, #562	; 0x232
 800ac72:	4b3a      	ldr	r3, [pc, #232]	; (800ad5c <__mdiff+0x110>)
 800ac74:	483a      	ldr	r0, [pc, #232]	; (800ad60 <__mdiff+0x114>)
 800ac76:	f000 fb55 	bl	800b324 <__assert_func>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac80:	4610      	mov	r0, r2
 800ac82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac86:	bfa4      	itt	ge
 800ac88:	4623      	movge	r3, r4
 800ac8a:	462c      	movge	r4, r5
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	6861      	ldr	r1, [r4, #4]
 800ac90:	bfa6      	itte	ge
 800ac92:	461d      	movge	r5, r3
 800ac94:	2600      	movge	r6, #0
 800ac96:	2601      	movlt	r6, #1
 800ac98:	f7ff fcf4 	bl	800a684 <_Balloc>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	b918      	cbnz	r0, 800aca8 <__mdiff+0x5c>
 800aca0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aca4:	4b2d      	ldr	r3, [pc, #180]	; (800ad5c <__mdiff+0x110>)
 800aca6:	e7e5      	b.n	800ac74 <__mdiff+0x28>
 800aca8:	f102 0814 	add.w	r8, r2, #20
 800acac:	46c2      	mov	sl, r8
 800acae:	f04f 0c00 	mov.w	ip, #0
 800acb2:	6927      	ldr	r7, [r4, #16]
 800acb4:	60c6      	str	r6, [r0, #12]
 800acb6:	692e      	ldr	r6, [r5, #16]
 800acb8:	f104 0014 	add.w	r0, r4, #20
 800acbc:	f105 0914 	add.w	r9, r5, #20
 800acc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800acc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800acc8:	3410      	adds	r4, #16
 800acca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800acce:	f859 3b04 	ldr.w	r3, [r9], #4
 800acd2:	fa1f f18b 	uxth.w	r1, fp
 800acd6:	448c      	add	ip, r1
 800acd8:	b299      	uxth	r1, r3
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	ebac 0101 	sub.w	r1, ip, r1
 800ace0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ace4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ace8:	b289      	uxth	r1, r1
 800acea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800acee:	454e      	cmp	r6, r9
 800acf0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800acf4:	f84a 3b04 	str.w	r3, [sl], #4
 800acf8:	d8e7      	bhi.n	800acca <__mdiff+0x7e>
 800acfa:	1b73      	subs	r3, r6, r5
 800acfc:	3b15      	subs	r3, #21
 800acfe:	f023 0303 	bic.w	r3, r3, #3
 800ad02:	3515      	adds	r5, #21
 800ad04:	3304      	adds	r3, #4
 800ad06:	42ae      	cmp	r6, r5
 800ad08:	bf38      	it	cc
 800ad0a:	2304      	movcc	r3, #4
 800ad0c:	4418      	add	r0, r3
 800ad0e:	4443      	add	r3, r8
 800ad10:	461e      	mov	r6, r3
 800ad12:	4605      	mov	r5, r0
 800ad14:	4575      	cmp	r5, lr
 800ad16:	d30e      	bcc.n	800ad36 <__mdiff+0xea>
 800ad18:	f10e 0103 	add.w	r1, lr, #3
 800ad1c:	1a09      	subs	r1, r1, r0
 800ad1e:	f021 0103 	bic.w	r1, r1, #3
 800ad22:	3803      	subs	r0, #3
 800ad24:	4586      	cmp	lr, r0
 800ad26:	bf38      	it	cc
 800ad28:	2100      	movcc	r1, #0
 800ad2a:	4419      	add	r1, r3
 800ad2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ad30:	b18b      	cbz	r3, 800ad56 <__mdiff+0x10a>
 800ad32:	6117      	str	r7, [r2, #16]
 800ad34:	e7a4      	b.n	800ac80 <__mdiff+0x34>
 800ad36:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad3a:	fa1f f188 	uxth.w	r1, r8
 800ad3e:	4461      	add	r1, ip
 800ad40:	140c      	asrs	r4, r1, #16
 800ad42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad46:	b289      	uxth	r1, r1
 800ad48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ad4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ad50:	f846 1b04 	str.w	r1, [r6], #4
 800ad54:	e7de      	b.n	800ad14 <__mdiff+0xc8>
 800ad56:	3f01      	subs	r7, #1
 800ad58:	e7e8      	b.n	800ad2c <__mdiff+0xe0>
 800ad5a:	bf00      	nop
 800ad5c:	0800dcc8 	.word	0x0800dcc8
 800ad60:	0800dd54 	.word	0x0800dd54

0800ad64 <__ulp>:
 800ad64:	4b11      	ldr	r3, [pc, #68]	; (800adac <__ulp+0x48>)
 800ad66:	400b      	ands	r3, r1
 800ad68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dd02      	ble.n	800ad76 <__ulp+0x12>
 800ad70:	2000      	movs	r0, #0
 800ad72:	4619      	mov	r1, r3
 800ad74:	4770      	bx	lr
 800ad76:	425b      	negs	r3, r3
 800ad78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ad7c:	f04f 0000 	mov.w	r0, #0
 800ad80:	f04f 0100 	mov.w	r1, #0
 800ad84:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad88:	da04      	bge.n	800ad94 <__ulp+0x30>
 800ad8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad8e:	fa43 f102 	asr.w	r1, r3, r2
 800ad92:	4770      	bx	lr
 800ad94:	f1a2 0314 	sub.w	r3, r2, #20
 800ad98:	2b1e      	cmp	r3, #30
 800ad9a:	bfd6      	itet	le
 800ad9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ada0:	2301      	movgt	r3, #1
 800ada2:	fa22 f303 	lsrle.w	r3, r2, r3
 800ada6:	4618      	mov	r0, r3
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	7ff00000 	.word	0x7ff00000

0800adb0 <__b2d>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	6907      	ldr	r7, [r0, #16]
 800adb6:	f100 0914 	add.w	r9, r0, #20
 800adba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800adbe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800adc2:	f1a7 0804 	sub.w	r8, r7, #4
 800adc6:	4630      	mov	r0, r6
 800adc8:	f7ff fd4e 	bl	800a868 <__hi0bits>
 800adcc:	f1c0 0320 	rsb	r3, r0, #32
 800add0:	280a      	cmp	r0, #10
 800add2:	600b      	str	r3, [r1, #0]
 800add4:	491f      	ldr	r1, [pc, #124]	; (800ae54 <__b2d+0xa4>)
 800add6:	dc17      	bgt.n	800ae08 <__b2d+0x58>
 800add8:	45c1      	cmp	r9, r8
 800adda:	bf28      	it	cs
 800addc:	2200      	movcs	r2, #0
 800adde:	f1c0 0c0b 	rsb	ip, r0, #11
 800ade2:	fa26 f30c 	lsr.w	r3, r6, ip
 800ade6:	bf38      	it	cc
 800ade8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800adec:	ea43 0501 	orr.w	r5, r3, r1
 800adf0:	f100 0315 	add.w	r3, r0, #21
 800adf4:	fa06 f303 	lsl.w	r3, r6, r3
 800adf8:	fa22 f20c 	lsr.w	r2, r2, ip
 800adfc:	ea43 0402 	orr.w	r4, r3, r2
 800ae00:	4620      	mov	r0, r4
 800ae02:	4629      	mov	r1, r5
 800ae04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae08:	45c1      	cmp	r9, r8
 800ae0a:	bf2e      	itee	cs
 800ae0c:	2200      	movcs	r2, #0
 800ae0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ae12:	f1a7 0808 	subcc.w	r8, r7, #8
 800ae16:	f1b0 030b 	subs.w	r3, r0, #11
 800ae1a:	d016      	beq.n	800ae4a <__b2d+0x9a>
 800ae1c:	f1c3 0720 	rsb	r7, r3, #32
 800ae20:	fa22 f107 	lsr.w	r1, r2, r7
 800ae24:	45c8      	cmp	r8, r9
 800ae26:	fa06 f603 	lsl.w	r6, r6, r3
 800ae2a:	ea46 0601 	orr.w	r6, r6, r1
 800ae2e:	bf94      	ite	ls
 800ae30:	2100      	movls	r1, #0
 800ae32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ae36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ae3a:	fa02 f003 	lsl.w	r0, r2, r3
 800ae3e:	40f9      	lsrs	r1, r7
 800ae40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ae44:	ea40 0401 	orr.w	r4, r0, r1
 800ae48:	e7da      	b.n	800ae00 <__b2d+0x50>
 800ae4a:	4614      	mov	r4, r2
 800ae4c:	ea46 0501 	orr.w	r5, r6, r1
 800ae50:	e7d6      	b.n	800ae00 <__b2d+0x50>
 800ae52:	bf00      	nop
 800ae54:	3ff00000 	.word	0x3ff00000

0800ae58 <__d2b>:
 800ae58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ae62:	4690      	mov	r8, r2
 800ae64:	461d      	mov	r5, r3
 800ae66:	f7ff fc0d 	bl	800a684 <_Balloc>
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	b930      	cbnz	r0, 800ae7c <__d2b+0x24>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	f240 310a 	movw	r1, #778	; 0x30a
 800ae74:	4b24      	ldr	r3, [pc, #144]	; (800af08 <__d2b+0xb0>)
 800ae76:	4825      	ldr	r0, [pc, #148]	; (800af0c <__d2b+0xb4>)
 800ae78:	f000 fa54 	bl	800b324 <__assert_func>
 800ae7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ae80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ae84:	bb2d      	cbnz	r5, 800aed2 <__d2b+0x7a>
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	f1b8 0300 	subs.w	r3, r8, #0
 800ae8c:	d026      	beq.n	800aedc <__d2b+0x84>
 800ae8e:	4668      	mov	r0, sp
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	f7ff fd09 	bl	800a8a8 <__lo0bits>
 800ae96:	9900      	ldr	r1, [sp, #0]
 800ae98:	b1f0      	cbz	r0, 800aed8 <__d2b+0x80>
 800ae9a:	9a01      	ldr	r2, [sp, #4]
 800ae9c:	f1c0 0320 	rsb	r3, r0, #32
 800aea0:	fa02 f303 	lsl.w	r3, r2, r3
 800aea4:	430b      	orrs	r3, r1
 800aea6:	40c2      	lsrs	r2, r0
 800aea8:	6163      	str	r3, [r4, #20]
 800aeaa:	9201      	str	r2, [sp, #4]
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	bf14      	ite	ne
 800aeb2:	2102      	movne	r1, #2
 800aeb4:	2101      	moveq	r1, #1
 800aeb6:	61a3      	str	r3, [r4, #24]
 800aeb8:	6121      	str	r1, [r4, #16]
 800aeba:	b1c5      	cbz	r5, 800aeee <__d2b+0x96>
 800aebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aec0:	4405      	add	r5, r0
 800aec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aec6:	603d      	str	r5, [r7, #0]
 800aec8:	6030      	str	r0, [r6, #0]
 800aeca:	4620      	mov	r0, r4
 800aecc:	b002      	add	sp, #8
 800aece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aed6:	e7d6      	b.n	800ae86 <__d2b+0x2e>
 800aed8:	6161      	str	r1, [r4, #20]
 800aeda:	e7e7      	b.n	800aeac <__d2b+0x54>
 800aedc:	a801      	add	r0, sp, #4
 800aede:	f7ff fce3 	bl	800a8a8 <__lo0bits>
 800aee2:	2101      	movs	r1, #1
 800aee4:	9b01      	ldr	r3, [sp, #4]
 800aee6:	6121      	str	r1, [r4, #16]
 800aee8:	6163      	str	r3, [r4, #20]
 800aeea:	3020      	adds	r0, #32
 800aeec:	e7e5      	b.n	800aeba <__d2b+0x62>
 800aeee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aef6:	6038      	str	r0, [r7, #0]
 800aef8:	6918      	ldr	r0, [r3, #16]
 800aefa:	f7ff fcb5 	bl	800a868 <__hi0bits>
 800aefe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800af02:	6031      	str	r1, [r6, #0]
 800af04:	e7e1      	b.n	800aeca <__d2b+0x72>
 800af06:	bf00      	nop
 800af08:	0800dcc8 	.word	0x0800dcc8
 800af0c:	0800dd54 	.word	0x0800dd54

0800af10 <__ratio>:
 800af10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4688      	mov	r8, r1
 800af16:	4669      	mov	r1, sp
 800af18:	4681      	mov	r9, r0
 800af1a:	f7ff ff49 	bl	800adb0 <__b2d>
 800af1e:	460f      	mov	r7, r1
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	4640      	mov	r0, r8
 800af26:	a901      	add	r1, sp, #4
 800af28:	f7ff ff42 	bl	800adb0 <__b2d>
 800af2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af34:	468b      	mov	fp, r1
 800af36:	eba3 0c02 	sub.w	ip, r3, r2
 800af3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af44:	2b00      	cmp	r3, #0
 800af46:	bfd5      	itete	le
 800af48:	460a      	movle	r2, r1
 800af4a:	462a      	movgt	r2, r5
 800af4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af50:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af54:	bfd8      	it	le
 800af56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800af5a:	465b      	mov	r3, fp
 800af5c:	4602      	mov	r2, r0
 800af5e:	4639      	mov	r1, r7
 800af60:	4620      	mov	r0, r4
 800af62:	f7f5 fc4f 	bl	8000804 <__aeabi_ddiv>
 800af66:	b003      	add	sp, #12
 800af68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af6c <__copybits>:
 800af6c:	3901      	subs	r1, #1
 800af6e:	b570      	push	{r4, r5, r6, lr}
 800af70:	1149      	asrs	r1, r1, #5
 800af72:	6914      	ldr	r4, [r2, #16]
 800af74:	3101      	adds	r1, #1
 800af76:	f102 0314 	add.w	r3, r2, #20
 800af7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af82:	1f05      	subs	r5, r0, #4
 800af84:	42a3      	cmp	r3, r4
 800af86:	d30c      	bcc.n	800afa2 <__copybits+0x36>
 800af88:	1aa3      	subs	r3, r4, r2
 800af8a:	3b11      	subs	r3, #17
 800af8c:	f023 0303 	bic.w	r3, r3, #3
 800af90:	3211      	adds	r2, #17
 800af92:	42a2      	cmp	r2, r4
 800af94:	bf88      	it	hi
 800af96:	2300      	movhi	r3, #0
 800af98:	4418      	add	r0, r3
 800af9a:	2300      	movs	r3, #0
 800af9c:	4288      	cmp	r0, r1
 800af9e:	d305      	bcc.n	800afac <__copybits+0x40>
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
 800afa2:	f853 6b04 	ldr.w	r6, [r3], #4
 800afa6:	f845 6f04 	str.w	r6, [r5, #4]!
 800afaa:	e7eb      	b.n	800af84 <__copybits+0x18>
 800afac:	f840 3b04 	str.w	r3, [r0], #4
 800afb0:	e7f4      	b.n	800af9c <__copybits+0x30>

0800afb2 <__any_on>:
 800afb2:	f100 0214 	add.w	r2, r0, #20
 800afb6:	6900      	ldr	r0, [r0, #16]
 800afb8:	114b      	asrs	r3, r1, #5
 800afba:	4298      	cmp	r0, r3
 800afbc:	b510      	push	{r4, lr}
 800afbe:	db11      	blt.n	800afe4 <__any_on+0x32>
 800afc0:	dd0a      	ble.n	800afd8 <__any_on+0x26>
 800afc2:	f011 011f 	ands.w	r1, r1, #31
 800afc6:	d007      	beq.n	800afd8 <__any_on+0x26>
 800afc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afcc:	fa24 f001 	lsr.w	r0, r4, r1
 800afd0:	fa00 f101 	lsl.w	r1, r0, r1
 800afd4:	428c      	cmp	r4, r1
 800afd6:	d10b      	bne.n	800aff0 <__any_on+0x3e>
 800afd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afdc:	4293      	cmp	r3, r2
 800afde:	d803      	bhi.n	800afe8 <__any_on+0x36>
 800afe0:	2000      	movs	r0, #0
 800afe2:	bd10      	pop	{r4, pc}
 800afe4:	4603      	mov	r3, r0
 800afe6:	e7f7      	b.n	800afd8 <__any_on+0x26>
 800afe8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afec:	2900      	cmp	r1, #0
 800afee:	d0f5      	beq.n	800afdc <__any_on+0x2a>
 800aff0:	2001      	movs	r0, #1
 800aff2:	e7f6      	b.n	800afe2 <__any_on+0x30>

0800aff4 <_calloc_r>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	fba1 5402 	umull	r5, r4, r1, r2
 800affa:	b934      	cbnz	r4, 800b00a <_calloc_r+0x16>
 800affc:	4629      	mov	r1, r5
 800affe:	f7fc fb7d 	bl	80076fc <_malloc_r>
 800b002:	4606      	mov	r6, r0
 800b004:	b928      	cbnz	r0, 800b012 <_calloc_r+0x1e>
 800b006:	4630      	mov	r0, r6
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	220c      	movs	r2, #12
 800b00c:	2600      	movs	r6, #0
 800b00e:	6002      	str	r2, [r0, #0]
 800b010:	e7f9      	b.n	800b006 <_calloc_r+0x12>
 800b012:	462a      	mov	r2, r5
 800b014:	4621      	mov	r1, r4
 800b016:	f7fc fb01 	bl	800761c <memset>
 800b01a:	e7f4      	b.n	800b006 <_calloc_r+0x12>

0800b01c <__ssputs_r>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	688e      	ldr	r6, [r1, #8]
 800b022:	4682      	mov	sl, r0
 800b024:	429e      	cmp	r6, r3
 800b026:	460c      	mov	r4, r1
 800b028:	4690      	mov	r8, r2
 800b02a:	461f      	mov	r7, r3
 800b02c:	d838      	bhi.n	800b0a0 <__ssputs_r+0x84>
 800b02e:	898a      	ldrh	r2, [r1, #12]
 800b030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b034:	d032      	beq.n	800b09c <__ssputs_r+0x80>
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	6909      	ldr	r1, [r1, #16]
 800b03a:	3301      	adds	r3, #1
 800b03c:	eba5 0901 	sub.w	r9, r5, r1
 800b040:	6965      	ldr	r5, [r4, #20]
 800b042:	444b      	add	r3, r9
 800b044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b04c:	106d      	asrs	r5, r5, #1
 800b04e:	429d      	cmp	r5, r3
 800b050:	bf38      	it	cc
 800b052:	461d      	movcc	r5, r3
 800b054:	0553      	lsls	r3, r2, #21
 800b056:	d531      	bpl.n	800b0bc <__ssputs_r+0xa0>
 800b058:	4629      	mov	r1, r5
 800b05a:	f7fc fb4f 	bl	80076fc <_malloc_r>
 800b05e:	4606      	mov	r6, r0
 800b060:	b950      	cbnz	r0, 800b078 <__ssputs_r+0x5c>
 800b062:	230c      	movs	r3, #12
 800b064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b068:	f8ca 3000 	str.w	r3, [sl]
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	464a      	mov	r2, r9
 800b07a:	6921      	ldr	r1, [r4, #16]
 800b07c:	f7ff fae8 	bl	800a650 <memcpy>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	6126      	str	r6, [r4, #16]
 800b08e:	444e      	add	r6, r9
 800b090:	6026      	str	r6, [r4, #0]
 800b092:	463e      	mov	r6, r7
 800b094:	6165      	str	r5, [r4, #20]
 800b096:	eba5 0509 	sub.w	r5, r5, r9
 800b09a:	60a5      	str	r5, [r4, #8]
 800b09c:	42be      	cmp	r6, r7
 800b09e:	d900      	bls.n	800b0a2 <__ssputs_r+0x86>
 800b0a0:	463e      	mov	r6, r7
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	4641      	mov	r1, r8
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	f000 f96f 	bl	800b38a <memmove>
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	1b9b      	subs	r3, r3, r6
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	4433      	add	r3, r6
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	e7db      	b.n	800b074 <__ssputs_r+0x58>
 800b0bc:	462a      	mov	r2, r5
 800b0be:	f000 f97e 	bl	800b3be <_realloc_r>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1e1      	bne.n	800b08c <__ssputs_r+0x70>
 800b0c8:	4650      	mov	r0, sl
 800b0ca:	6921      	ldr	r1, [r4, #16]
 800b0cc:	f7fc faae 	bl	800762c <_free_r>
 800b0d0:	e7c7      	b.n	800b062 <__ssputs_r+0x46>
	...

0800b0d4 <_svfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	4698      	mov	r8, r3
 800b0da:	898b      	ldrh	r3, [r1, #12]
 800b0dc:	4607      	mov	r7, r0
 800b0de:	061b      	lsls	r3, r3, #24
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	b09d      	sub	sp, #116	; 0x74
 800b0e6:	d50e      	bpl.n	800b106 <_svfiprintf_r+0x32>
 800b0e8:	690b      	ldr	r3, [r1, #16]
 800b0ea:	b963      	cbnz	r3, 800b106 <_svfiprintf_r+0x32>
 800b0ec:	2140      	movs	r1, #64	; 0x40
 800b0ee:	f7fc fb05 	bl	80076fc <_malloc_r>
 800b0f2:	6028      	str	r0, [r5, #0]
 800b0f4:	6128      	str	r0, [r5, #16]
 800b0f6:	b920      	cbnz	r0, 800b102 <_svfiprintf_r+0x2e>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b100:	e0d1      	b.n	800b2a6 <_svfiprintf_r+0x1d2>
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	616b      	str	r3, [r5, #20]
 800b106:	2300      	movs	r3, #0
 800b108:	9309      	str	r3, [sp, #36]	; 0x24
 800b10a:	2320      	movs	r3, #32
 800b10c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b110:	2330      	movs	r3, #48	; 0x30
 800b112:	f04f 0901 	mov.w	r9, #1
 800b116:	f8cd 800c 	str.w	r8, [sp, #12]
 800b11a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2c0 <_svfiprintf_r+0x1ec>
 800b11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b122:	4623      	mov	r3, r4
 800b124:	469a      	mov	sl, r3
 800b126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b12a:	b10a      	cbz	r2, 800b130 <_svfiprintf_r+0x5c>
 800b12c:	2a25      	cmp	r2, #37	; 0x25
 800b12e:	d1f9      	bne.n	800b124 <_svfiprintf_r+0x50>
 800b130:	ebba 0b04 	subs.w	fp, sl, r4
 800b134:	d00b      	beq.n	800b14e <_svfiprintf_r+0x7a>
 800b136:	465b      	mov	r3, fp
 800b138:	4622      	mov	r2, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	4638      	mov	r0, r7
 800b13e:	f7ff ff6d 	bl	800b01c <__ssputs_r>
 800b142:	3001      	adds	r0, #1
 800b144:	f000 80aa 	beq.w	800b29c <_svfiprintf_r+0x1c8>
 800b148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b14a:	445a      	add	r2, fp
 800b14c:	9209      	str	r2, [sp, #36]	; 0x24
 800b14e:	f89a 3000 	ldrb.w	r3, [sl]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80a2 	beq.w	800b29c <_svfiprintf_r+0x1c8>
 800b158:	2300      	movs	r3, #0
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b162:	f10a 0a01 	add.w	sl, sl, #1
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	9307      	str	r3, [sp, #28]
 800b16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b16e:	931a      	str	r3, [sp, #104]	; 0x68
 800b170:	4654      	mov	r4, sl
 800b172:	2205      	movs	r2, #5
 800b174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b178:	4851      	ldr	r0, [pc, #324]	; (800b2c0 <_svfiprintf_r+0x1ec>)
 800b17a:	f7ff fa5b 	bl	800a634 <memchr>
 800b17e:	9a04      	ldr	r2, [sp, #16]
 800b180:	b9d8      	cbnz	r0, 800b1ba <_svfiprintf_r+0xe6>
 800b182:	06d0      	lsls	r0, r2, #27
 800b184:	bf44      	itt	mi
 800b186:	2320      	movmi	r3, #32
 800b188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18c:	0711      	lsls	r1, r2, #28
 800b18e:	bf44      	itt	mi
 800b190:	232b      	movmi	r3, #43	; 0x2b
 800b192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b196:	f89a 3000 	ldrb.w	r3, [sl]
 800b19a:	2b2a      	cmp	r3, #42	; 0x2a
 800b19c:	d015      	beq.n	800b1ca <_svfiprintf_r+0xf6>
 800b19e:	4654      	mov	r4, sl
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f04f 0c0a 	mov.w	ip, #10
 800b1a6:	9a07      	ldr	r2, [sp, #28]
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ae:	3b30      	subs	r3, #48	; 0x30
 800b1b0:	2b09      	cmp	r3, #9
 800b1b2:	d94e      	bls.n	800b252 <_svfiprintf_r+0x17e>
 800b1b4:	b1b0      	cbz	r0, 800b1e4 <_svfiprintf_r+0x110>
 800b1b6:	9207      	str	r2, [sp, #28]
 800b1b8:	e014      	b.n	800b1e4 <_svfiprintf_r+0x110>
 800b1ba:	eba0 0308 	sub.w	r3, r0, r8
 800b1be:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	46a2      	mov	sl, r4
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	e7d2      	b.n	800b170 <_svfiprintf_r+0x9c>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	1d19      	adds	r1, r3, #4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bfbb      	ittet	lt
 800b1d6:	425b      	neglt	r3, r3
 800b1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b1dc:	9307      	strge	r3, [sp, #28]
 800b1de:	9307      	strlt	r3, [sp, #28]
 800b1e0:	bfb8      	it	lt
 800b1e2:	9204      	strlt	r2, [sp, #16]
 800b1e4:	7823      	ldrb	r3, [r4, #0]
 800b1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e8:	d10c      	bne.n	800b204 <_svfiprintf_r+0x130>
 800b1ea:	7863      	ldrb	r3, [r4, #1]
 800b1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ee:	d135      	bne.n	800b25c <_svfiprintf_r+0x188>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	3402      	adds	r4, #2
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	9203      	str	r2, [sp, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b2c4 <_svfiprintf_r+0x1f0>
 800b208:	2203      	movs	r2, #3
 800b20a:	4650      	mov	r0, sl
 800b20c:	7821      	ldrb	r1, [r4, #0]
 800b20e:	f7ff fa11 	bl	800a634 <memchr>
 800b212:	b140      	cbz	r0, 800b226 <_svfiprintf_r+0x152>
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	eba0 000a 	sub.w	r0, r0, sl
 800b21a:	fa03 f000 	lsl.w	r0, r3, r0
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	3401      	adds	r4, #1
 800b222:	4303      	orrs	r3, r0
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22a:	2206      	movs	r2, #6
 800b22c:	4826      	ldr	r0, [pc, #152]	; (800b2c8 <_svfiprintf_r+0x1f4>)
 800b22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b232:	f7ff f9ff 	bl	800a634 <memchr>
 800b236:	2800      	cmp	r0, #0
 800b238:	d038      	beq.n	800b2ac <_svfiprintf_r+0x1d8>
 800b23a:	4b24      	ldr	r3, [pc, #144]	; (800b2cc <_svfiprintf_r+0x1f8>)
 800b23c:	bb1b      	cbnz	r3, 800b286 <_svfiprintf_r+0x1b2>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3307      	adds	r3, #7
 800b242:	f023 0307 	bic.w	r3, r3, #7
 800b246:	3308      	adds	r3, #8
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24c:	4433      	add	r3, r6
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	e767      	b.n	800b122 <_svfiprintf_r+0x4e>
 800b252:	460c      	mov	r4, r1
 800b254:	2001      	movs	r0, #1
 800b256:	fb0c 3202 	mla	r2, ip, r2, r3
 800b25a:	e7a5      	b.n	800b1a8 <_svfiprintf_r+0xd4>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f04f 0c0a 	mov.w	ip, #10
 800b262:	4619      	mov	r1, r3
 800b264:	3401      	adds	r4, #1
 800b266:	9305      	str	r3, [sp, #20]
 800b268:	4620      	mov	r0, r4
 800b26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26e:	3a30      	subs	r2, #48	; 0x30
 800b270:	2a09      	cmp	r2, #9
 800b272:	d903      	bls.n	800b27c <_svfiprintf_r+0x1a8>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0c5      	beq.n	800b204 <_svfiprintf_r+0x130>
 800b278:	9105      	str	r1, [sp, #20]
 800b27a:	e7c3      	b.n	800b204 <_svfiprintf_r+0x130>
 800b27c:	4604      	mov	r4, r0
 800b27e:	2301      	movs	r3, #1
 800b280:	fb0c 2101 	mla	r1, ip, r1, r2
 800b284:	e7f0      	b.n	800b268 <_svfiprintf_r+0x194>
 800b286:	ab03      	add	r3, sp, #12
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	462a      	mov	r2, r5
 800b28c:	4638      	mov	r0, r7
 800b28e:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <_svfiprintf_r+0x1fc>)
 800b290:	a904      	add	r1, sp, #16
 800b292:	f7fc fb45 	bl	8007920 <_printf_float>
 800b296:	1c42      	adds	r2, r0, #1
 800b298:	4606      	mov	r6, r0
 800b29a:	d1d6      	bne.n	800b24a <_svfiprintf_r+0x176>
 800b29c:	89ab      	ldrh	r3, [r5, #12]
 800b29e:	065b      	lsls	r3, r3, #25
 800b2a0:	f53f af2c 	bmi.w	800b0fc <_svfiprintf_r+0x28>
 800b2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2a6:	b01d      	add	sp, #116	; 0x74
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ac:	ab03      	add	r3, sp, #12
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <_svfiprintf_r+0x1fc>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	f7fc fdce 	bl	8007e58 <_printf_i>
 800b2bc:	e7eb      	b.n	800b296 <_svfiprintf_r+0x1c2>
 800b2be:	bf00      	nop
 800b2c0:	0800deac 	.word	0x0800deac
 800b2c4:	0800deb2 	.word	0x0800deb2
 800b2c8:	0800deb6 	.word	0x0800deb6
 800b2cc:	08007921 	.word	0x08007921
 800b2d0:	0800b01d 	.word	0x0800b01d

0800b2d4 <nan>:
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	4901      	ldr	r1, [pc, #4]	; (800b2dc <nan+0x8>)
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	7ff80000 	.word	0x7ff80000

0800b2e0 <strncmp>:
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	b172      	cbz	r2, 800b304 <strncmp+0x24>
 800b2e6:	3901      	subs	r1, #1
 800b2e8:	1884      	adds	r4, r0, r2
 800b2ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b2f2:	4290      	cmp	r0, r2
 800b2f4:	d101      	bne.n	800b2fa <strncmp+0x1a>
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	d101      	bne.n	800b2fe <strncmp+0x1e>
 800b2fa:	1a80      	subs	r0, r0, r2
 800b2fc:	bd10      	pop	{r4, pc}
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1f3      	bne.n	800b2ea <strncmp+0xa>
 800b302:	e7fa      	b.n	800b2fa <strncmp+0x1a>
 800b304:	4610      	mov	r0, r2
 800b306:	e7f9      	b.n	800b2fc <strncmp+0x1c>

0800b308 <__ascii_wctomb>:
 800b308:	4603      	mov	r3, r0
 800b30a:	4608      	mov	r0, r1
 800b30c:	b141      	cbz	r1, 800b320 <__ascii_wctomb+0x18>
 800b30e:	2aff      	cmp	r2, #255	; 0xff
 800b310:	d904      	bls.n	800b31c <__ascii_wctomb+0x14>
 800b312:	228a      	movs	r2, #138	; 0x8a
 800b314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	4770      	bx	lr
 800b31c:	2001      	movs	r0, #1
 800b31e:	700a      	strb	r2, [r1, #0]
 800b320:	4770      	bx	lr
	...

0800b324 <__assert_func>:
 800b324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b326:	4614      	mov	r4, r2
 800b328:	461a      	mov	r2, r3
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <__assert_func+0x2c>)
 800b32c:	4605      	mov	r5, r0
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68d8      	ldr	r0, [r3, #12]
 800b332:	b14c      	cbz	r4, 800b348 <__assert_func+0x24>
 800b334:	4b07      	ldr	r3, [pc, #28]	; (800b354 <__assert_func+0x30>)
 800b336:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b33a:	9100      	str	r1, [sp, #0]
 800b33c:	462b      	mov	r3, r5
 800b33e:	4906      	ldr	r1, [pc, #24]	; (800b358 <__assert_func+0x34>)
 800b340:	f000 f80e 	bl	800b360 <fiprintf>
 800b344:	f000 fa82 	bl	800b84c <abort>
 800b348:	4b04      	ldr	r3, [pc, #16]	; (800b35c <__assert_func+0x38>)
 800b34a:	461c      	mov	r4, r3
 800b34c:	e7f3      	b.n	800b336 <__assert_func+0x12>
 800b34e:	bf00      	nop
 800b350:	20000040 	.word	0x20000040
 800b354:	0800debd 	.word	0x0800debd
 800b358:	0800deca 	.word	0x0800deca
 800b35c:	0800def8 	.word	0x0800def8

0800b360 <fiprintf>:
 800b360:	b40e      	push	{r1, r2, r3}
 800b362:	b503      	push	{r0, r1, lr}
 800b364:	4601      	mov	r1, r0
 800b366:	ab03      	add	r3, sp, #12
 800b368:	4805      	ldr	r0, [pc, #20]	; (800b380 <fiprintf+0x20>)
 800b36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36e:	6800      	ldr	r0, [r0, #0]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	f000 f87b 	bl	800b46c <_vfiprintf_r>
 800b376:	b002      	add	sp, #8
 800b378:	f85d eb04 	ldr.w	lr, [sp], #4
 800b37c:	b003      	add	sp, #12
 800b37e:	4770      	bx	lr
 800b380:	20000040 	.word	0x20000040

0800b384 <__retarget_lock_init_recursive>:
 800b384:	4770      	bx	lr

0800b386 <__retarget_lock_acquire_recursive>:
 800b386:	4770      	bx	lr

0800b388 <__retarget_lock_release_recursive>:
 800b388:	4770      	bx	lr

0800b38a <memmove>:
 800b38a:	4288      	cmp	r0, r1
 800b38c:	b510      	push	{r4, lr}
 800b38e:	eb01 0402 	add.w	r4, r1, r2
 800b392:	d902      	bls.n	800b39a <memmove+0x10>
 800b394:	4284      	cmp	r4, r0
 800b396:	4623      	mov	r3, r4
 800b398:	d807      	bhi.n	800b3aa <memmove+0x20>
 800b39a:	1e43      	subs	r3, r0, #1
 800b39c:	42a1      	cmp	r1, r4
 800b39e:	d008      	beq.n	800b3b2 <memmove+0x28>
 800b3a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3a8:	e7f8      	b.n	800b39c <memmove+0x12>
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	4402      	add	r2, r0
 800b3ae:	428a      	cmp	r2, r1
 800b3b0:	d100      	bne.n	800b3b4 <memmove+0x2a>
 800b3b2:	bd10      	pop	{r4, pc}
 800b3b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3bc:	e7f7      	b.n	800b3ae <memmove+0x24>

0800b3be <_realloc_r>:
 800b3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	b921      	cbnz	r1, 800b3d4 <_realloc_r+0x16>
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d0:	f7fc b994 	b.w	80076fc <_malloc_r>
 800b3d4:	b92a      	cbnz	r2, 800b3e2 <_realloc_r+0x24>
 800b3d6:	f7fc f929 	bl	800762c <_free_r>
 800b3da:	4625      	mov	r5, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e2:	f000 fc53 	bl	800bc8c <_malloc_usable_size_r>
 800b3e6:	4284      	cmp	r4, r0
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	d802      	bhi.n	800b3f2 <_realloc_r+0x34>
 800b3ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3f0:	d812      	bhi.n	800b418 <_realloc_r+0x5a>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	f7fc f981 	bl	80076fc <_malloc_r>
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d0ed      	beq.n	800b3dc <_realloc_r+0x1e>
 800b400:	42bc      	cmp	r4, r7
 800b402:	4622      	mov	r2, r4
 800b404:	4631      	mov	r1, r6
 800b406:	bf28      	it	cs
 800b408:	463a      	movcs	r2, r7
 800b40a:	f7ff f921 	bl	800a650 <memcpy>
 800b40e:	4631      	mov	r1, r6
 800b410:	4640      	mov	r0, r8
 800b412:	f7fc f90b 	bl	800762c <_free_r>
 800b416:	e7e1      	b.n	800b3dc <_realloc_r+0x1e>
 800b418:	4635      	mov	r5, r6
 800b41a:	e7df      	b.n	800b3dc <_realloc_r+0x1e>

0800b41c <__sfputc_r>:
 800b41c:	6893      	ldr	r3, [r2, #8]
 800b41e:	b410      	push	{r4}
 800b420:	3b01      	subs	r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	6093      	str	r3, [r2, #8]
 800b426:	da07      	bge.n	800b438 <__sfputc_r+0x1c>
 800b428:	6994      	ldr	r4, [r2, #24]
 800b42a:	42a3      	cmp	r3, r4
 800b42c:	db01      	blt.n	800b432 <__sfputc_r+0x16>
 800b42e:	290a      	cmp	r1, #10
 800b430:	d102      	bne.n	800b438 <__sfputc_r+0x1c>
 800b432:	bc10      	pop	{r4}
 800b434:	f000 b94a 	b.w	800b6cc <__swbuf_r>
 800b438:	6813      	ldr	r3, [r2, #0]
 800b43a:	1c58      	adds	r0, r3, #1
 800b43c:	6010      	str	r0, [r2, #0]
 800b43e:	7019      	strb	r1, [r3, #0]
 800b440:	4608      	mov	r0, r1
 800b442:	bc10      	pop	{r4}
 800b444:	4770      	bx	lr

0800b446 <__sfputs_r>:
 800b446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	4614      	mov	r4, r2
 800b44e:	18d5      	adds	r5, r2, r3
 800b450:	42ac      	cmp	r4, r5
 800b452:	d101      	bne.n	800b458 <__sfputs_r+0x12>
 800b454:	2000      	movs	r0, #0
 800b456:	e007      	b.n	800b468 <__sfputs_r+0x22>
 800b458:	463a      	mov	r2, r7
 800b45a:	4630      	mov	r0, r6
 800b45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b460:	f7ff ffdc 	bl	800b41c <__sfputc_r>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d1f3      	bne.n	800b450 <__sfputs_r+0xa>
 800b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b46c <_vfiprintf_r>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	460d      	mov	r5, r1
 800b472:	4614      	mov	r4, r2
 800b474:	4698      	mov	r8, r3
 800b476:	4606      	mov	r6, r0
 800b478:	b09d      	sub	sp, #116	; 0x74
 800b47a:	b118      	cbz	r0, 800b484 <_vfiprintf_r+0x18>
 800b47c:	6983      	ldr	r3, [r0, #24]
 800b47e:	b90b      	cbnz	r3, 800b484 <_vfiprintf_r+0x18>
 800b480:	f000 fb02 	bl	800ba88 <__sinit>
 800b484:	4b89      	ldr	r3, [pc, #548]	; (800b6ac <_vfiprintf_r+0x240>)
 800b486:	429d      	cmp	r5, r3
 800b488:	d11b      	bne.n	800b4c2 <_vfiprintf_r+0x56>
 800b48a:	6875      	ldr	r5, [r6, #4]
 800b48c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b48e:	07d9      	lsls	r1, r3, #31
 800b490:	d405      	bmi.n	800b49e <_vfiprintf_r+0x32>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	059a      	lsls	r2, r3, #22
 800b496:	d402      	bmi.n	800b49e <_vfiprintf_r+0x32>
 800b498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b49a:	f7ff ff74 	bl	800b386 <__retarget_lock_acquire_recursive>
 800b49e:	89ab      	ldrh	r3, [r5, #12]
 800b4a0:	071b      	lsls	r3, r3, #28
 800b4a2:	d501      	bpl.n	800b4a8 <_vfiprintf_r+0x3c>
 800b4a4:	692b      	ldr	r3, [r5, #16]
 800b4a6:	b9eb      	cbnz	r3, 800b4e4 <_vfiprintf_r+0x78>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f000 f960 	bl	800b770 <__swsetup_r>
 800b4b0:	b1c0      	cbz	r0, 800b4e4 <_vfiprintf_r+0x78>
 800b4b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4b4:	07dc      	lsls	r4, r3, #31
 800b4b6:	d50e      	bpl.n	800b4d6 <_vfiprintf_r+0x6a>
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4bc:	b01d      	add	sp, #116	; 0x74
 800b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c2:	4b7b      	ldr	r3, [pc, #492]	; (800b6b0 <_vfiprintf_r+0x244>)
 800b4c4:	429d      	cmp	r5, r3
 800b4c6:	d101      	bne.n	800b4cc <_vfiprintf_r+0x60>
 800b4c8:	68b5      	ldr	r5, [r6, #8]
 800b4ca:	e7df      	b.n	800b48c <_vfiprintf_r+0x20>
 800b4cc:	4b79      	ldr	r3, [pc, #484]	; (800b6b4 <_vfiprintf_r+0x248>)
 800b4ce:	429d      	cmp	r5, r3
 800b4d0:	bf08      	it	eq
 800b4d2:	68f5      	ldreq	r5, [r6, #12]
 800b4d4:	e7da      	b.n	800b48c <_vfiprintf_r+0x20>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	0598      	lsls	r0, r3, #22
 800b4da:	d4ed      	bmi.n	800b4b8 <_vfiprintf_r+0x4c>
 800b4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4de:	f7ff ff53 	bl	800b388 <__retarget_lock_release_recursive>
 800b4e2:	e7e9      	b.n	800b4b8 <_vfiprintf_r+0x4c>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	2320      	movs	r3, #32
 800b4ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ee:	2330      	movs	r3, #48	; 0x30
 800b4f0:	f04f 0901 	mov.w	r9, #1
 800b4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b6b8 <_vfiprintf_r+0x24c>
 800b4fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b500:	4623      	mov	r3, r4
 800b502:	469a      	mov	sl, r3
 800b504:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b508:	b10a      	cbz	r2, 800b50e <_vfiprintf_r+0xa2>
 800b50a:	2a25      	cmp	r2, #37	; 0x25
 800b50c:	d1f9      	bne.n	800b502 <_vfiprintf_r+0x96>
 800b50e:	ebba 0b04 	subs.w	fp, sl, r4
 800b512:	d00b      	beq.n	800b52c <_vfiprintf_r+0xc0>
 800b514:	465b      	mov	r3, fp
 800b516:	4622      	mov	r2, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff ff93 	bl	800b446 <__sfputs_r>
 800b520:	3001      	adds	r0, #1
 800b522:	f000 80aa 	beq.w	800b67a <_vfiprintf_r+0x20e>
 800b526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b528:	445a      	add	r2, fp
 800b52a:	9209      	str	r2, [sp, #36]	; 0x24
 800b52c:	f89a 3000 	ldrb.w	r3, [sl]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 80a2 	beq.w	800b67a <_vfiprintf_r+0x20e>
 800b536:	2300      	movs	r3, #0
 800b538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b53c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b540:	f10a 0a01 	add.w	sl, sl, #1
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	9307      	str	r3, [sp, #28]
 800b548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b54c:	931a      	str	r3, [sp, #104]	; 0x68
 800b54e:	4654      	mov	r4, sl
 800b550:	2205      	movs	r2, #5
 800b552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b556:	4858      	ldr	r0, [pc, #352]	; (800b6b8 <_vfiprintf_r+0x24c>)
 800b558:	f7ff f86c 	bl	800a634 <memchr>
 800b55c:	9a04      	ldr	r2, [sp, #16]
 800b55e:	b9d8      	cbnz	r0, 800b598 <_vfiprintf_r+0x12c>
 800b560:	06d1      	lsls	r1, r2, #27
 800b562:	bf44      	itt	mi
 800b564:	2320      	movmi	r3, #32
 800b566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b56a:	0713      	lsls	r3, r2, #28
 800b56c:	bf44      	itt	mi
 800b56e:	232b      	movmi	r3, #43	; 0x2b
 800b570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b574:	f89a 3000 	ldrb.w	r3, [sl]
 800b578:	2b2a      	cmp	r3, #42	; 0x2a
 800b57a:	d015      	beq.n	800b5a8 <_vfiprintf_r+0x13c>
 800b57c:	4654      	mov	r4, sl
 800b57e:	2000      	movs	r0, #0
 800b580:	f04f 0c0a 	mov.w	ip, #10
 800b584:	9a07      	ldr	r2, [sp, #28]
 800b586:	4621      	mov	r1, r4
 800b588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b58c:	3b30      	subs	r3, #48	; 0x30
 800b58e:	2b09      	cmp	r3, #9
 800b590:	d94e      	bls.n	800b630 <_vfiprintf_r+0x1c4>
 800b592:	b1b0      	cbz	r0, 800b5c2 <_vfiprintf_r+0x156>
 800b594:	9207      	str	r2, [sp, #28]
 800b596:	e014      	b.n	800b5c2 <_vfiprintf_r+0x156>
 800b598:	eba0 0308 	sub.w	r3, r0, r8
 800b59c:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	46a2      	mov	sl, r4
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	e7d2      	b.n	800b54e <_vfiprintf_r+0xe2>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	1d19      	adds	r1, r3, #4
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	9103      	str	r1, [sp, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bfbb      	ittet	lt
 800b5b4:	425b      	neglt	r3, r3
 800b5b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ba:	9307      	strge	r3, [sp, #28]
 800b5bc:	9307      	strlt	r3, [sp, #28]
 800b5be:	bfb8      	it	lt
 800b5c0:	9204      	strlt	r2, [sp, #16]
 800b5c2:	7823      	ldrb	r3, [r4, #0]
 800b5c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c6:	d10c      	bne.n	800b5e2 <_vfiprintf_r+0x176>
 800b5c8:	7863      	ldrb	r3, [r4, #1]
 800b5ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b5cc:	d135      	bne.n	800b63a <_vfiprintf_r+0x1ce>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	3402      	adds	r4, #2
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	9203      	str	r2, [sp, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bfb8      	it	lt
 800b5dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5e0:	9305      	str	r3, [sp, #20]
 800b5e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b6bc <_vfiprintf_r+0x250>
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	7821      	ldrb	r1, [r4, #0]
 800b5ec:	f7ff f822 	bl	800a634 <memchr>
 800b5f0:	b140      	cbz	r0, 800b604 <_vfiprintf_r+0x198>
 800b5f2:	2340      	movs	r3, #64	; 0x40
 800b5f4:	eba0 000a 	sub.w	r0, r0, sl
 800b5f8:	fa03 f000 	lsl.w	r0, r3, r0
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	3401      	adds	r4, #1
 800b600:	4303      	orrs	r3, r0
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b608:	2206      	movs	r2, #6
 800b60a:	482d      	ldr	r0, [pc, #180]	; (800b6c0 <_vfiprintf_r+0x254>)
 800b60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b610:	f7ff f810 	bl	800a634 <memchr>
 800b614:	2800      	cmp	r0, #0
 800b616:	d03f      	beq.n	800b698 <_vfiprintf_r+0x22c>
 800b618:	4b2a      	ldr	r3, [pc, #168]	; (800b6c4 <_vfiprintf_r+0x258>)
 800b61a:	bb1b      	cbnz	r3, 800b664 <_vfiprintf_r+0x1f8>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	3307      	adds	r3, #7
 800b620:	f023 0307 	bic.w	r3, r3, #7
 800b624:	3308      	adds	r3, #8
 800b626:	9303      	str	r3, [sp, #12]
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	443b      	add	r3, r7
 800b62c:	9309      	str	r3, [sp, #36]	; 0x24
 800b62e:	e767      	b.n	800b500 <_vfiprintf_r+0x94>
 800b630:	460c      	mov	r4, r1
 800b632:	2001      	movs	r0, #1
 800b634:	fb0c 3202 	mla	r2, ip, r2, r3
 800b638:	e7a5      	b.n	800b586 <_vfiprintf_r+0x11a>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f04f 0c0a 	mov.w	ip, #10
 800b640:	4619      	mov	r1, r3
 800b642:	3401      	adds	r4, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4620      	mov	r0, r4
 800b648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64c:	3a30      	subs	r2, #48	; 0x30
 800b64e:	2a09      	cmp	r2, #9
 800b650:	d903      	bls.n	800b65a <_vfiprintf_r+0x1ee>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0c5      	beq.n	800b5e2 <_vfiprintf_r+0x176>
 800b656:	9105      	str	r1, [sp, #20]
 800b658:	e7c3      	b.n	800b5e2 <_vfiprintf_r+0x176>
 800b65a:	4604      	mov	r4, r0
 800b65c:	2301      	movs	r3, #1
 800b65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b662:	e7f0      	b.n	800b646 <_vfiprintf_r+0x1da>
 800b664:	ab03      	add	r3, sp, #12
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	462a      	mov	r2, r5
 800b66a:	4630      	mov	r0, r6
 800b66c:	4b16      	ldr	r3, [pc, #88]	; (800b6c8 <_vfiprintf_r+0x25c>)
 800b66e:	a904      	add	r1, sp, #16
 800b670:	f7fc f956 	bl	8007920 <_printf_float>
 800b674:	4607      	mov	r7, r0
 800b676:	1c78      	adds	r0, r7, #1
 800b678:	d1d6      	bne.n	800b628 <_vfiprintf_r+0x1bc>
 800b67a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b67c:	07d9      	lsls	r1, r3, #31
 800b67e:	d405      	bmi.n	800b68c <_vfiprintf_r+0x220>
 800b680:	89ab      	ldrh	r3, [r5, #12]
 800b682:	059a      	lsls	r2, r3, #22
 800b684:	d402      	bmi.n	800b68c <_vfiprintf_r+0x220>
 800b686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b688:	f7ff fe7e 	bl	800b388 <__retarget_lock_release_recursive>
 800b68c:	89ab      	ldrh	r3, [r5, #12]
 800b68e:	065b      	lsls	r3, r3, #25
 800b690:	f53f af12 	bmi.w	800b4b8 <_vfiprintf_r+0x4c>
 800b694:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b696:	e711      	b.n	800b4bc <_vfiprintf_r+0x50>
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4b09      	ldr	r3, [pc, #36]	; (800b6c8 <_vfiprintf_r+0x25c>)
 800b6a2:	a904      	add	r1, sp, #16
 800b6a4:	f7fc fbd8 	bl	8007e58 <_printf_i>
 800b6a8:	e7e4      	b.n	800b674 <_vfiprintf_r+0x208>
 800b6aa:	bf00      	nop
 800b6ac:	0800df1c 	.word	0x0800df1c
 800b6b0:	0800df3c 	.word	0x0800df3c
 800b6b4:	0800defc 	.word	0x0800defc
 800b6b8:	0800deac 	.word	0x0800deac
 800b6bc:	0800deb2 	.word	0x0800deb2
 800b6c0:	0800deb6 	.word	0x0800deb6
 800b6c4:	08007921 	.word	0x08007921
 800b6c8:	0800b447 	.word	0x0800b447

0800b6cc <__swbuf_r>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	460e      	mov	r6, r1
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	b118      	cbz	r0, 800b6de <__swbuf_r+0x12>
 800b6d6:	6983      	ldr	r3, [r0, #24]
 800b6d8:	b90b      	cbnz	r3, 800b6de <__swbuf_r+0x12>
 800b6da:	f000 f9d5 	bl	800ba88 <__sinit>
 800b6de:	4b21      	ldr	r3, [pc, #132]	; (800b764 <__swbuf_r+0x98>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	d12b      	bne.n	800b73c <__swbuf_r+0x70>
 800b6e4:	686c      	ldr	r4, [r5, #4]
 800b6e6:	69a3      	ldr	r3, [r4, #24]
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	071a      	lsls	r2, r3, #28
 800b6ee:	d52f      	bpl.n	800b750 <__swbuf_r+0x84>
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b36b      	cbz	r3, 800b750 <__swbuf_r+0x84>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	b2f6      	uxtb	r6, r6
 800b6fa:	1ac0      	subs	r0, r0, r3
 800b6fc:	6963      	ldr	r3, [r4, #20]
 800b6fe:	4637      	mov	r7, r6
 800b700:	4283      	cmp	r3, r0
 800b702:	dc04      	bgt.n	800b70e <__swbuf_r+0x42>
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 f92a 	bl	800b960 <_fflush_r>
 800b70c:	bb30      	cbnz	r0, 800b75c <__swbuf_r+0x90>
 800b70e:	68a3      	ldr	r3, [r4, #8]
 800b710:	3001      	adds	r0, #1
 800b712:	3b01      	subs	r3, #1
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	6022      	str	r2, [r4, #0]
 800b71c:	701e      	strb	r6, [r3, #0]
 800b71e:	6963      	ldr	r3, [r4, #20]
 800b720:	4283      	cmp	r3, r0
 800b722:	d004      	beq.n	800b72e <__swbuf_r+0x62>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	07db      	lsls	r3, r3, #31
 800b728:	d506      	bpl.n	800b738 <__swbuf_r+0x6c>
 800b72a:	2e0a      	cmp	r6, #10
 800b72c:	d104      	bne.n	800b738 <__swbuf_r+0x6c>
 800b72e:	4621      	mov	r1, r4
 800b730:	4628      	mov	r0, r5
 800b732:	f000 f915 	bl	800b960 <_fflush_r>
 800b736:	b988      	cbnz	r0, 800b75c <__swbuf_r+0x90>
 800b738:	4638      	mov	r0, r7
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <__swbuf_r+0x9c>)
 800b73e:	429c      	cmp	r4, r3
 800b740:	d101      	bne.n	800b746 <__swbuf_r+0x7a>
 800b742:	68ac      	ldr	r4, [r5, #8]
 800b744:	e7cf      	b.n	800b6e6 <__swbuf_r+0x1a>
 800b746:	4b09      	ldr	r3, [pc, #36]	; (800b76c <__swbuf_r+0xa0>)
 800b748:	429c      	cmp	r4, r3
 800b74a:	bf08      	it	eq
 800b74c:	68ec      	ldreq	r4, [r5, #12]
 800b74e:	e7ca      	b.n	800b6e6 <__swbuf_r+0x1a>
 800b750:	4621      	mov	r1, r4
 800b752:	4628      	mov	r0, r5
 800b754:	f000 f80c 	bl	800b770 <__swsetup_r>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d0cb      	beq.n	800b6f4 <__swbuf_r+0x28>
 800b75c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b760:	e7ea      	b.n	800b738 <__swbuf_r+0x6c>
 800b762:	bf00      	nop
 800b764:	0800df1c 	.word	0x0800df1c
 800b768:	0800df3c 	.word	0x0800df3c
 800b76c:	0800defc 	.word	0x0800defc

0800b770 <__swsetup_r>:
 800b770:	4b32      	ldr	r3, [pc, #200]	; (800b83c <__swsetup_r+0xcc>)
 800b772:	b570      	push	{r4, r5, r6, lr}
 800b774:	681d      	ldr	r5, [r3, #0]
 800b776:	4606      	mov	r6, r0
 800b778:	460c      	mov	r4, r1
 800b77a:	b125      	cbz	r5, 800b786 <__swsetup_r+0x16>
 800b77c:	69ab      	ldr	r3, [r5, #24]
 800b77e:	b913      	cbnz	r3, 800b786 <__swsetup_r+0x16>
 800b780:	4628      	mov	r0, r5
 800b782:	f000 f981 	bl	800ba88 <__sinit>
 800b786:	4b2e      	ldr	r3, [pc, #184]	; (800b840 <__swsetup_r+0xd0>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	d10f      	bne.n	800b7ac <__swsetup_r+0x3c>
 800b78c:	686c      	ldr	r4, [r5, #4]
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b794:	0719      	lsls	r1, r3, #28
 800b796:	d42c      	bmi.n	800b7f2 <__swsetup_r+0x82>
 800b798:	06dd      	lsls	r5, r3, #27
 800b79a:	d411      	bmi.n	800b7c0 <__swsetup_r+0x50>
 800b79c:	2309      	movs	r3, #9
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	e03e      	b.n	800b82a <__swsetup_r+0xba>
 800b7ac:	4b25      	ldr	r3, [pc, #148]	; (800b844 <__swsetup_r+0xd4>)
 800b7ae:	429c      	cmp	r4, r3
 800b7b0:	d101      	bne.n	800b7b6 <__swsetup_r+0x46>
 800b7b2:	68ac      	ldr	r4, [r5, #8]
 800b7b4:	e7eb      	b.n	800b78e <__swsetup_r+0x1e>
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <__swsetup_r+0xd8>)
 800b7b8:	429c      	cmp	r4, r3
 800b7ba:	bf08      	it	eq
 800b7bc:	68ec      	ldreq	r4, [r5, #12]
 800b7be:	e7e6      	b.n	800b78e <__swsetup_r+0x1e>
 800b7c0:	0758      	lsls	r0, r3, #29
 800b7c2:	d512      	bpl.n	800b7ea <__swsetup_r+0x7a>
 800b7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7c6:	b141      	cbz	r1, 800b7da <__swsetup_r+0x6a>
 800b7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7cc:	4299      	cmp	r1, r3
 800b7ce:	d002      	beq.n	800b7d6 <__swsetup_r+0x66>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7fb ff2b 	bl	800762c <_free_r>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	6063      	str	r3, [r4, #4]
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	f043 0308 	orr.w	r3, r3, #8
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	6923      	ldr	r3, [r4, #16]
 800b7f4:	b94b      	cbnz	r3, 800b80a <__swsetup_r+0x9a>
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b800:	d003      	beq.n	800b80a <__swsetup_r+0x9a>
 800b802:	4621      	mov	r1, r4
 800b804:	4630      	mov	r0, r6
 800b806:	f000 fa01 	bl	800bc0c <__smakebuf_r>
 800b80a:	89a0      	ldrh	r0, [r4, #12]
 800b80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b810:	f010 0301 	ands.w	r3, r0, #1
 800b814:	d00a      	beq.n	800b82c <__swsetup_r+0xbc>
 800b816:	2300      	movs	r3, #0
 800b818:	60a3      	str	r3, [r4, #8]
 800b81a:	6963      	ldr	r3, [r4, #20]
 800b81c:	425b      	negs	r3, r3
 800b81e:	61a3      	str	r3, [r4, #24]
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	b943      	cbnz	r3, 800b836 <__swsetup_r+0xc6>
 800b824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b828:	d1ba      	bne.n	800b7a0 <__swsetup_r+0x30>
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	0781      	lsls	r1, r0, #30
 800b82e:	bf58      	it	pl
 800b830:	6963      	ldrpl	r3, [r4, #20]
 800b832:	60a3      	str	r3, [r4, #8]
 800b834:	e7f4      	b.n	800b820 <__swsetup_r+0xb0>
 800b836:	2000      	movs	r0, #0
 800b838:	e7f7      	b.n	800b82a <__swsetup_r+0xba>
 800b83a:	bf00      	nop
 800b83c:	20000040 	.word	0x20000040
 800b840:	0800df1c 	.word	0x0800df1c
 800b844:	0800df3c 	.word	0x0800df3c
 800b848:	0800defc 	.word	0x0800defc

0800b84c <abort>:
 800b84c:	2006      	movs	r0, #6
 800b84e:	b508      	push	{r3, lr}
 800b850:	f000 fa4c 	bl	800bcec <raise>
 800b854:	2001      	movs	r0, #1
 800b856:	f7f8 f86c 	bl	8003932 <_exit>
	...

0800b85c <__sflush_r>:
 800b85c:	898a      	ldrh	r2, [r1, #12]
 800b85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b860:	4605      	mov	r5, r0
 800b862:	0710      	lsls	r0, r2, #28
 800b864:	460c      	mov	r4, r1
 800b866:	d457      	bmi.n	800b918 <__sflush_r+0xbc>
 800b868:	684b      	ldr	r3, [r1, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	dc04      	bgt.n	800b878 <__sflush_r+0x1c>
 800b86e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	dc01      	bgt.n	800b878 <__sflush_r+0x1c>
 800b874:	2000      	movs	r0, #0
 800b876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	d0fa      	beq.n	800b874 <__sflush_r+0x18>
 800b87e:	2300      	movs	r3, #0
 800b880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b884:	682f      	ldr	r7, [r5, #0]
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	d032      	beq.n	800b8f0 <__sflush_r+0x94>
 800b88a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	075a      	lsls	r2, r3, #29
 800b890:	d505      	bpl.n	800b89e <__sflush_r+0x42>
 800b892:	6863      	ldr	r3, [r4, #4]
 800b894:	1ac0      	subs	r0, r0, r3
 800b896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b898:	b10b      	cbz	r3, 800b89e <__sflush_r+0x42>
 800b89a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b89c:	1ac0      	subs	r0, r0, r3
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	6a21      	ldr	r1, [r4, #32]
 800b8a8:	47b0      	blx	r6
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	d106      	bne.n	800b8be <__sflush_r+0x62>
 800b8b0:	6829      	ldr	r1, [r5, #0]
 800b8b2:	291d      	cmp	r1, #29
 800b8b4:	d82c      	bhi.n	800b910 <__sflush_r+0xb4>
 800b8b6:	4a29      	ldr	r2, [pc, #164]	; (800b95c <__sflush_r+0x100>)
 800b8b8:	40ca      	lsrs	r2, r1
 800b8ba:	07d6      	lsls	r6, r2, #31
 800b8bc:	d528      	bpl.n	800b910 <__sflush_r+0xb4>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	6062      	str	r2, [r4, #4]
 800b8c2:	6922      	ldr	r2, [r4, #16]
 800b8c4:	04d9      	lsls	r1, r3, #19
 800b8c6:	6022      	str	r2, [r4, #0]
 800b8c8:	d504      	bpl.n	800b8d4 <__sflush_r+0x78>
 800b8ca:	1c42      	adds	r2, r0, #1
 800b8cc:	d101      	bne.n	800b8d2 <__sflush_r+0x76>
 800b8ce:	682b      	ldr	r3, [r5, #0]
 800b8d0:	b903      	cbnz	r3, 800b8d4 <__sflush_r+0x78>
 800b8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d6:	602f      	str	r7, [r5, #0]
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	d0cb      	beq.n	800b874 <__sflush_r+0x18>
 800b8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	d002      	beq.n	800b8ea <__sflush_r+0x8e>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f7fb fea1 	bl	800762c <_free_r>
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ee:	e7c2      	b.n	800b876 <__sflush_r+0x1a>
 800b8f0:	6a21      	ldr	r1, [r4, #32]
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b0      	blx	r6
 800b8f8:	1c41      	adds	r1, r0, #1
 800b8fa:	d1c7      	bne.n	800b88c <__sflush_r+0x30>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0c4      	beq.n	800b88c <__sflush_r+0x30>
 800b902:	2b1d      	cmp	r3, #29
 800b904:	d001      	beq.n	800b90a <__sflush_r+0xae>
 800b906:	2b16      	cmp	r3, #22
 800b908:	d101      	bne.n	800b90e <__sflush_r+0xb2>
 800b90a:	602f      	str	r7, [r5, #0]
 800b90c:	e7b2      	b.n	800b874 <__sflush_r+0x18>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7ae      	b.n	800b876 <__sflush_r+0x1a>
 800b918:	690f      	ldr	r7, [r1, #16]
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	d0aa      	beq.n	800b874 <__sflush_r+0x18>
 800b91e:	0793      	lsls	r3, r2, #30
 800b920:	bf18      	it	ne
 800b922:	2300      	movne	r3, #0
 800b924:	680e      	ldr	r6, [r1, #0]
 800b926:	bf08      	it	eq
 800b928:	694b      	ldreq	r3, [r1, #20]
 800b92a:	1bf6      	subs	r6, r6, r7
 800b92c:	600f      	str	r7, [r1, #0]
 800b92e:	608b      	str	r3, [r1, #8]
 800b930:	2e00      	cmp	r6, #0
 800b932:	dd9f      	ble.n	800b874 <__sflush_r+0x18>
 800b934:	4633      	mov	r3, r6
 800b936:	463a      	mov	r2, r7
 800b938:	4628      	mov	r0, r5
 800b93a:	6a21      	ldr	r1, [r4, #32]
 800b93c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b940:	47e0      	blx	ip
 800b942:	2800      	cmp	r0, #0
 800b944:	dc06      	bgt.n	800b954 <__sflush_r+0xf8>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	e790      	b.n	800b876 <__sflush_r+0x1a>
 800b954:	4407      	add	r7, r0
 800b956:	1a36      	subs	r6, r6, r0
 800b958:	e7ea      	b.n	800b930 <__sflush_r+0xd4>
 800b95a:	bf00      	nop
 800b95c:	20400001 	.word	0x20400001

0800b960 <_fflush_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	690b      	ldr	r3, [r1, #16]
 800b964:	4605      	mov	r5, r0
 800b966:	460c      	mov	r4, r1
 800b968:	b913      	cbnz	r3, 800b970 <_fflush_r+0x10>
 800b96a:	2500      	movs	r5, #0
 800b96c:	4628      	mov	r0, r5
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	b118      	cbz	r0, 800b97a <_fflush_r+0x1a>
 800b972:	6983      	ldr	r3, [r0, #24]
 800b974:	b90b      	cbnz	r3, 800b97a <_fflush_r+0x1a>
 800b976:	f000 f887 	bl	800ba88 <__sinit>
 800b97a:	4b14      	ldr	r3, [pc, #80]	; (800b9cc <_fflush_r+0x6c>)
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d11b      	bne.n	800b9b8 <_fflush_r+0x58>
 800b980:	686c      	ldr	r4, [r5, #4]
 800b982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0ef      	beq.n	800b96a <_fflush_r+0xa>
 800b98a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b98c:	07d0      	lsls	r0, r2, #31
 800b98e:	d404      	bmi.n	800b99a <_fflush_r+0x3a>
 800b990:	0599      	lsls	r1, r3, #22
 800b992:	d402      	bmi.n	800b99a <_fflush_r+0x3a>
 800b994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b996:	f7ff fcf6 	bl	800b386 <__retarget_lock_acquire_recursive>
 800b99a:	4628      	mov	r0, r5
 800b99c:	4621      	mov	r1, r4
 800b99e:	f7ff ff5d 	bl	800b85c <__sflush_r>
 800b9a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	07da      	lsls	r2, r3, #31
 800b9a8:	d4e0      	bmi.n	800b96c <_fflush_r+0xc>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	059b      	lsls	r3, r3, #22
 800b9ae:	d4dd      	bmi.n	800b96c <_fflush_r+0xc>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9b2:	f7ff fce9 	bl	800b388 <__retarget_lock_release_recursive>
 800b9b6:	e7d9      	b.n	800b96c <_fflush_r+0xc>
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <_fflush_r+0x70>)
 800b9ba:	429c      	cmp	r4, r3
 800b9bc:	d101      	bne.n	800b9c2 <_fflush_r+0x62>
 800b9be:	68ac      	ldr	r4, [r5, #8]
 800b9c0:	e7df      	b.n	800b982 <_fflush_r+0x22>
 800b9c2:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <_fflush_r+0x74>)
 800b9c4:	429c      	cmp	r4, r3
 800b9c6:	bf08      	it	eq
 800b9c8:	68ec      	ldreq	r4, [r5, #12]
 800b9ca:	e7da      	b.n	800b982 <_fflush_r+0x22>
 800b9cc:	0800df1c 	.word	0x0800df1c
 800b9d0:	0800df3c 	.word	0x0800df3c
 800b9d4:	0800defc 	.word	0x0800defc

0800b9d8 <std>:
 800b9d8:	2300      	movs	r3, #0
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	4604      	mov	r4, r0
 800b9de:	e9c0 3300 	strd	r3, r3, [r0]
 800b9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9e6:	6083      	str	r3, [r0, #8]
 800b9e8:	8181      	strh	r1, [r0, #12]
 800b9ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b9ec:	81c2      	strh	r2, [r0, #14]
 800b9ee:	6183      	str	r3, [r0, #24]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	2208      	movs	r2, #8
 800b9f4:	305c      	adds	r0, #92	; 0x5c
 800b9f6:	f7fb fe11 	bl	800761c <memset>
 800b9fa:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <std+0x38>)
 800b9fc:	6224      	str	r4, [r4, #32]
 800b9fe:	6263      	str	r3, [r4, #36]	; 0x24
 800ba00:	4b04      	ldr	r3, [pc, #16]	; (800ba14 <std+0x3c>)
 800ba02:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba04:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <std+0x40>)
 800ba06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <std+0x44>)
 800ba0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ba0c:	bd10      	pop	{r4, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800bd25 	.word	0x0800bd25
 800ba14:	0800bd47 	.word	0x0800bd47
 800ba18:	0800bd7f 	.word	0x0800bd7f
 800ba1c:	0800bda3 	.word	0x0800bda3

0800ba20 <_cleanup_r>:
 800ba20:	4901      	ldr	r1, [pc, #4]	; (800ba28 <_cleanup_r+0x8>)
 800ba22:	f000 b8af 	b.w	800bb84 <_fwalk_reent>
 800ba26:	bf00      	nop
 800ba28:	0800b961 	.word	0x0800b961

0800ba2c <__sfmoreglue>:
 800ba2c:	2268      	movs	r2, #104	; 0x68
 800ba2e:	b570      	push	{r4, r5, r6, lr}
 800ba30:	1e4d      	subs	r5, r1, #1
 800ba32:	4355      	muls	r5, r2
 800ba34:	460e      	mov	r6, r1
 800ba36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba3a:	f7fb fe5f 	bl	80076fc <_malloc_r>
 800ba3e:	4604      	mov	r4, r0
 800ba40:	b140      	cbz	r0, 800ba54 <__sfmoreglue+0x28>
 800ba42:	2100      	movs	r1, #0
 800ba44:	e9c0 1600 	strd	r1, r6, [r0]
 800ba48:	300c      	adds	r0, #12
 800ba4a:	60a0      	str	r0, [r4, #8]
 800ba4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba50:	f7fb fde4 	bl	800761c <memset>
 800ba54:	4620      	mov	r0, r4
 800ba56:	bd70      	pop	{r4, r5, r6, pc}

0800ba58 <__sfp_lock_acquire>:
 800ba58:	4801      	ldr	r0, [pc, #4]	; (800ba60 <__sfp_lock_acquire+0x8>)
 800ba5a:	f7ff bc94 	b.w	800b386 <__retarget_lock_acquire_recursive>
 800ba5e:	bf00      	nop
 800ba60:	20000705 	.word	0x20000705

0800ba64 <__sfp_lock_release>:
 800ba64:	4801      	ldr	r0, [pc, #4]	; (800ba6c <__sfp_lock_release+0x8>)
 800ba66:	f7ff bc8f 	b.w	800b388 <__retarget_lock_release_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	20000705 	.word	0x20000705

0800ba70 <__sinit_lock_acquire>:
 800ba70:	4801      	ldr	r0, [pc, #4]	; (800ba78 <__sinit_lock_acquire+0x8>)
 800ba72:	f7ff bc88 	b.w	800b386 <__retarget_lock_acquire_recursive>
 800ba76:	bf00      	nop
 800ba78:	20000706 	.word	0x20000706

0800ba7c <__sinit_lock_release>:
 800ba7c:	4801      	ldr	r0, [pc, #4]	; (800ba84 <__sinit_lock_release+0x8>)
 800ba7e:	f7ff bc83 	b.w	800b388 <__retarget_lock_release_recursive>
 800ba82:	bf00      	nop
 800ba84:	20000706 	.word	0x20000706

0800ba88 <__sinit>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f7ff fff0 	bl	800ba70 <__sinit_lock_acquire>
 800ba90:	69a3      	ldr	r3, [r4, #24]
 800ba92:	b11b      	cbz	r3, 800ba9c <__sinit+0x14>
 800ba94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba98:	f7ff bff0 	b.w	800ba7c <__sinit_lock_release>
 800ba9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800baa0:	6523      	str	r3, [r4, #80]	; 0x50
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <__sinit+0x68>)
 800baa4:	4a13      	ldr	r2, [pc, #76]	; (800baf4 <__sinit+0x6c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	62a2      	str	r2, [r4, #40]	; 0x28
 800baaa:	42a3      	cmp	r3, r4
 800baac:	bf08      	it	eq
 800baae:	2301      	moveq	r3, #1
 800bab0:	4620      	mov	r0, r4
 800bab2:	bf08      	it	eq
 800bab4:	61a3      	streq	r3, [r4, #24]
 800bab6:	f000 f81f 	bl	800baf8 <__sfp>
 800baba:	6060      	str	r0, [r4, #4]
 800babc:	4620      	mov	r0, r4
 800babe:	f000 f81b 	bl	800baf8 <__sfp>
 800bac2:	60a0      	str	r0, [r4, #8]
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 f817 	bl	800baf8 <__sfp>
 800baca:	2200      	movs	r2, #0
 800bacc:	2104      	movs	r1, #4
 800bace:	60e0      	str	r0, [r4, #12]
 800bad0:	6860      	ldr	r0, [r4, #4]
 800bad2:	f7ff ff81 	bl	800b9d8 <std>
 800bad6:	2201      	movs	r2, #1
 800bad8:	2109      	movs	r1, #9
 800bada:	68a0      	ldr	r0, [r4, #8]
 800badc:	f7ff ff7c 	bl	800b9d8 <std>
 800bae0:	2202      	movs	r2, #2
 800bae2:	2112      	movs	r1, #18
 800bae4:	68e0      	ldr	r0, [r4, #12]
 800bae6:	f7ff ff77 	bl	800b9d8 <std>
 800baea:	2301      	movs	r3, #1
 800baec:	61a3      	str	r3, [r4, #24]
 800baee:	e7d1      	b.n	800ba94 <__sinit+0xc>
 800baf0:	0800dab4 	.word	0x0800dab4
 800baf4:	0800ba21 	.word	0x0800ba21

0800baf8 <__sfp>:
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	4607      	mov	r7, r0
 800bafc:	f7ff ffac 	bl	800ba58 <__sfp_lock_acquire>
 800bb00:	4b1e      	ldr	r3, [pc, #120]	; (800bb7c <__sfp+0x84>)
 800bb02:	681e      	ldr	r6, [r3, #0]
 800bb04:	69b3      	ldr	r3, [r6, #24]
 800bb06:	b913      	cbnz	r3, 800bb0e <__sfp+0x16>
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff ffbd 	bl	800ba88 <__sinit>
 800bb0e:	3648      	adds	r6, #72	; 0x48
 800bb10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	d503      	bpl.n	800bb20 <__sfp+0x28>
 800bb18:	6833      	ldr	r3, [r6, #0]
 800bb1a:	b30b      	cbz	r3, 800bb60 <__sfp+0x68>
 800bb1c:	6836      	ldr	r6, [r6, #0]
 800bb1e:	e7f7      	b.n	800bb10 <__sfp+0x18>
 800bb20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb24:	b9d5      	cbnz	r5, 800bb5c <__sfp+0x64>
 800bb26:	4b16      	ldr	r3, [pc, #88]	; (800bb80 <__sfp+0x88>)
 800bb28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb2c:	60e3      	str	r3, [r4, #12]
 800bb2e:	6665      	str	r5, [r4, #100]	; 0x64
 800bb30:	f7ff fc28 	bl	800b384 <__retarget_lock_init_recursive>
 800bb34:	f7ff ff96 	bl	800ba64 <__sfp_lock_release>
 800bb38:	2208      	movs	r2, #8
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb44:	6025      	str	r5, [r4, #0]
 800bb46:	61a5      	str	r5, [r4, #24]
 800bb48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb4c:	f7fb fd66 	bl	800761c <memset>
 800bb50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb58:	4620      	mov	r0, r4
 800bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb5c:	3468      	adds	r4, #104	; 0x68
 800bb5e:	e7d9      	b.n	800bb14 <__sfp+0x1c>
 800bb60:	2104      	movs	r1, #4
 800bb62:	4638      	mov	r0, r7
 800bb64:	f7ff ff62 	bl	800ba2c <__sfmoreglue>
 800bb68:	4604      	mov	r4, r0
 800bb6a:	6030      	str	r0, [r6, #0]
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1d5      	bne.n	800bb1c <__sfp+0x24>
 800bb70:	f7ff ff78 	bl	800ba64 <__sfp_lock_release>
 800bb74:	230c      	movs	r3, #12
 800bb76:	603b      	str	r3, [r7, #0]
 800bb78:	e7ee      	b.n	800bb58 <__sfp+0x60>
 800bb7a:	bf00      	nop
 800bb7c:	0800dab4 	.word	0x0800dab4
 800bb80:	ffff0001 	.word	0xffff0001

0800bb84 <_fwalk_reent>:
 800bb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb88:	4606      	mov	r6, r0
 800bb8a:	4688      	mov	r8, r1
 800bb8c:	2700      	movs	r7, #0
 800bb8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb96:	f1b9 0901 	subs.w	r9, r9, #1
 800bb9a:	d505      	bpl.n	800bba8 <_fwalk_reent+0x24>
 800bb9c:	6824      	ldr	r4, [r4, #0]
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	d1f7      	bne.n	800bb92 <_fwalk_reent+0xe>
 800bba2:	4638      	mov	r0, r7
 800bba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bba8:	89ab      	ldrh	r3, [r5, #12]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d907      	bls.n	800bbbe <_fwalk_reent+0x3a>
 800bbae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	d003      	beq.n	800bbbe <_fwalk_reent+0x3a>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4630      	mov	r0, r6
 800bbba:	47c0      	blx	r8
 800bbbc:	4307      	orrs	r7, r0
 800bbbe:	3568      	adds	r5, #104	; 0x68
 800bbc0:	e7e9      	b.n	800bb96 <_fwalk_reent+0x12>

0800bbc2 <__swhatbuf_r>:
 800bbc2:	b570      	push	{r4, r5, r6, lr}
 800bbc4:	460e      	mov	r6, r1
 800bbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbca:	4614      	mov	r4, r2
 800bbcc:	2900      	cmp	r1, #0
 800bbce:	461d      	mov	r5, r3
 800bbd0:	b096      	sub	sp, #88	; 0x58
 800bbd2:	da08      	bge.n	800bbe6 <__swhatbuf_r+0x24>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bbda:	602a      	str	r2, [r5, #0]
 800bbdc:	061a      	lsls	r2, r3, #24
 800bbde:	d410      	bmi.n	800bc02 <__swhatbuf_r+0x40>
 800bbe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbe4:	e00e      	b.n	800bc04 <__swhatbuf_r+0x42>
 800bbe6:	466a      	mov	r2, sp
 800bbe8:	f000 f902 	bl	800bdf0 <_fstat_r>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	dbf1      	blt.n	800bbd4 <__swhatbuf_r+0x12>
 800bbf0:	9a01      	ldr	r2, [sp, #4]
 800bbf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbfa:	425a      	negs	r2, r3
 800bbfc:	415a      	adcs	r2, r3
 800bbfe:	602a      	str	r2, [r5, #0]
 800bc00:	e7ee      	b.n	800bbe0 <__swhatbuf_r+0x1e>
 800bc02:	2340      	movs	r3, #64	; 0x40
 800bc04:	2000      	movs	r0, #0
 800bc06:	6023      	str	r3, [r4, #0]
 800bc08:	b016      	add	sp, #88	; 0x58
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}

0800bc0c <__smakebuf_r>:
 800bc0c:	898b      	ldrh	r3, [r1, #12]
 800bc0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc10:	079d      	lsls	r5, r3, #30
 800bc12:	4606      	mov	r6, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	d507      	bpl.n	800bc28 <__smakebuf_r+0x1c>
 800bc18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	2301      	movs	r3, #1
 800bc22:	6163      	str	r3, [r4, #20]
 800bc24:	b002      	add	sp, #8
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	466a      	mov	r2, sp
 800bc2a:	ab01      	add	r3, sp, #4
 800bc2c:	f7ff ffc9 	bl	800bbc2 <__swhatbuf_r>
 800bc30:	9900      	ldr	r1, [sp, #0]
 800bc32:	4605      	mov	r5, r0
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7fb fd61 	bl	80076fc <_malloc_r>
 800bc3a:	b948      	cbnz	r0, 800bc50 <__smakebuf_r+0x44>
 800bc3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc40:	059a      	lsls	r2, r3, #22
 800bc42:	d4ef      	bmi.n	800bc24 <__smakebuf_r+0x18>
 800bc44:	f023 0303 	bic.w	r3, r3, #3
 800bc48:	f043 0302 	orr.w	r3, r3, #2
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	e7e3      	b.n	800bc18 <__smakebuf_r+0xc>
 800bc50:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <__smakebuf_r+0x7c>)
 800bc52:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	6020      	str	r0, [r4, #0]
 800bc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	9b00      	ldr	r3, [sp, #0]
 800bc60:	6120      	str	r0, [r4, #16]
 800bc62:	6163      	str	r3, [r4, #20]
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	b15b      	cbz	r3, 800bc80 <__smakebuf_r+0x74>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc6e:	f000 f8d1 	bl	800be14 <_isatty_r>
 800bc72:	b128      	cbz	r0, 800bc80 <__smakebuf_r+0x74>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f023 0303 	bic.w	r3, r3, #3
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	81a3      	strh	r3, [r4, #12]
 800bc80:	89a0      	ldrh	r0, [r4, #12]
 800bc82:	4305      	orrs	r5, r0
 800bc84:	81a5      	strh	r5, [r4, #12]
 800bc86:	e7cd      	b.n	800bc24 <__smakebuf_r+0x18>
 800bc88:	0800ba21 	.word	0x0800ba21

0800bc8c <_malloc_usable_size_r>:
 800bc8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc90:	1f18      	subs	r0, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfbc      	itt	lt
 800bc96:	580b      	ldrlt	r3, [r1, r0]
 800bc98:	18c0      	addlt	r0, r0, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_raise_r>:
 800bc9c:	291f      	cmp	r1, #31
 800bc9e:	b538      	push	{r3, r4, r5, lr}
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	d904      	bls.n	800bcb0 <_raise_r+0x14>
 800bca6:	2316      	movs	r3, #22
 800bca8:	6003      	str	r3, [r0, #0]
 800bcaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcb2:	b112      	cbz	r2, 800bcba <_raise_r+0x1e>
 800bcb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcb8:	b94b      	cbnz	r3, 800bcce <_raise_r+0x32>
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f000 f830 	bl	800bd20 <_getpid_r>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcca:	f000 b817 	b.w	800bcfc <_kill_r>
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d00a      	beq.n	800bce8 <_raise_r+0x4c>
 800bcd2:	1c59      	adds	r1, r3, #1
 800bcd4:	d103      	bne.n	800bcde <_raise_r+0x42>
 800bcd6:	2316      	movs	r3, #22
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	2001      	movs	r0, #1
 800bcdc:	e7e7      	b.n	800bcae <_raise_r+0x12>
 800bcde:	2400      	movs	r4, #0
 800bce0:	4628      	mov	r0, r5
 800bce2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bce6:	4798      	blx	r3
 800bce8:	2000      	movs	r0, #0
 800bcea:	e7e0      	b.n	800bcae <_raise_r+0x12>

0800bcec <raise>:
 800bcec:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <raise+0xc>)
 800bcee:	4601      	mov	r1, r0
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	f7ff bfd3 	b.w	800bc9c <_raise_r>
 800bcf6:	bf00      	nop
 800bcf8:	20000040 	.word	0x20000040

0800bcfc <_kill_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4d06      	ldr	r5, [pc, #24]	; (800bd1c <_kill_r+0x20>)
 800bd02:	4604      	mov	r4, r0
 800bd04:	4608      	mov	r0, r1
 800bd06:	4611      	mov	r1, r2
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	f7f7 fe02 	bl	8003912 <_kill>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	d102      	bne.n	800bd18 <_kill_r+0x1c>
 800bd12:	682b      	ldr	r3, [r5, #0]
 800bd14:	b103      	cbz	r3, 800bd18 <_kill_r+0x1c>
 800bd16:	6023      	str	r3, [r4, #0]
 800bd18:	bd38      	pop	{r3, r4, r5, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20000700 	.word	0x20000700

0800bd20 <_getpid_r>:
 800bd20:	f7f7 bdf0 	b.w	8003904 <_getpid>

0800bd24 <__sread>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	460c      	mov	r4, r1
 800bd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2c:	f000 f894 	bl	800be58 <_read_r>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	bfab      	itete	ge
 800bd34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd36:	89a3      	ldrhlt	r3, [r4, #12]
 800bd38:	181b      	addge	r3, r3, r0
 800bd3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd3e:	bfac      	ite	ge
 800bd40:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd42:	81a3      	strhlt	r3, [r4, #12]
 800bd44:	bd10      	pop	{r4, pc}

0800bd46 <__swrite>:
 800bd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	461f      	mov	r7, r3
 800bd4c:	898b      	ldrh	r3, [r1, #12]
 800bd4e:	4605      	mov	r5, r0
 800bd50:	05db      	lsls	r3, r3, #23
 800bd52:	460c      	mov	r4, r1
 800bd54:	4616      	mov	r6, r2
 800bd56:	d505      	bpl.n	800bd64 <__swrite+0x1e>
 800bd58:	2302      	movs	r3, #2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd60:	f000 f868 	bl	800be34 <_lseek_r>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	4632      	mov	r2, r6
 800bd68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	4628      	mov	r0, r5
 800bd70:	463b      	mov	r3, r7
 800bd72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7a:	f000 b817 	b.w	800bdac <_write_r>

0800bd7e <__sseek>:
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	460c      	mov	r4, r1
 800bd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd86:	f000 f855 	bl	800be34 <_lseek_r>
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	bf15      	itete	ne
 800bd90:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd9a:	81a3      	strheq	r3, [r4, #12]
 800bd9c:	bf18      	it	ne
 800bd9e:	81a3      	strhne	r3, [r4, #12]
 800bda0:	bd10      	pop	{r4, pc}

0800bda2 <__sclose>:
 800bda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda6:	f000 b813 	b.w	800bdd0 <_close_r>
	...

0800bdac <_write_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4d05      	ldr	r5, [pc, #20]	; (800bdcc <_write_r+0x20>)
 800bdb8:	602a      	str	r2, [r5, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7f7 fde0 	bl	8003980 <_write>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_write_r+0x1e>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_write_r+0x1e>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20000700 	.word	0x20000700

0800bdd0 <_close_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	4d05      	ldr	r5, [pc, #20]	; (800bdec <_close_r+0x1c>)
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f7 fdec 	bl	80039b8 <_close>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_close_r+0x1a>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_close_r+0x1a>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	20000700 	.word	0x20000700

0800bdf0 <_fstat_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	4d06      	ldr	r5, [pc, #24]	; (800be10 <_fstat_r+0x20>)
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	f7f7 fde6 	bl	80039ce <_fstat>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d102      	bne.n	800be0c <_fstat_r+0x1c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b103      	cbz	r3, 800be0c <_fstat_r+0x1c>
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	bf00      	nop
 800be10:	20000700 	.word	0x20000700

0800be14 <_isatty_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	2300      	movs	r3, #0
 800be18:	4d05      	ldr	r5, [pc, #20]	; (800be30 <_isatty_r+0x1c>)
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	f7f7 fde4 	bl	80039ec <_isatty>
 800be24:	1c43      	adds	r3, r0, #1
 800be26:	d102      	bne.n	800be2e <_isatty_r+0x1a>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	b103      	cbz	r3, 800be2e <_isatty_r+0x1a>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	20000700 	.word	0x20000700

0800be34 <_lseek_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	2200      	movs	r2, #0
 800be3e:	4d05      	ldr	r5, [pc, #20]	; (800be54 <_lseek_r+0x20>)
 800be40:	602a      	str	r2, [r5, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	f7f7 fddc 	bl	8003a00 <_lseek>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_lseek_r+0x1e>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_lseek_r+0x1e>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000700 	.word	0x20000700

0800be58 <_read_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4604      	mov	r4, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	4611      	mov	r1, r2
 800be60:	2200      	movs	r2, #0
 800be62:	4d05      	ldr	r5, [pc, #20]	; (800be78 <_read_r+0x20>)
 800be64:	602a      	str	r2, [r5, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	f7f7 fd6d 	bl	8003946 <_read>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d102      	bne.n	800be76 <_read_r+0x1e>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b103      	cbz	r3, 800be76 <_read_r+0x1e>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	20000700 	.word	0x20000700
 800be7c:	00000000 	.word	0x00000000

0800be80 <floor>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800be88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800be8c:	2e13      	cmp	r6, #19
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4607      	mov	r7, r0
 800be94:	460c      	mov	r4, r1
 800be96:	4605      	mov	r5, r0
 800be98:	dc33      	bgt.n	800bf02 <floor+0x82>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	da14      	bge.n	800bec8 <floor+0x48>
 800be9e:	a334      	add	r3, pc, #208	; (adr r3, 800bf70 <floor+0xf0>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f9ce 	bl	8000244 <__adddf3>
 800bea8:	2200      	movs	r2, #0
 800beaa:	2300      	movs	r3, #0
 800beac:	f7f4 fe10 	bl	8000ad0 <__aeabi_dcmpgt>
 800beb0:	b138      	cbz	r0, 800bec2 <floor+0x42>
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	da58      	bge.n	800bf68 <floor+0xe8>
 800beb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800beba:	431d      	orrs	r5, r3
 800bebc:	d001      	beq.n	800bec2 <floor+0x42>
 800bebe:	2500      	movs	r5, #0
 800bec0:	4c2d      	ldr	r4, [pc, #180]	; (800bf78 <floor+0xf8>)
 800bec2:	4623      	mov	r3, r4
 800bec4:	462f      	mov	r7, r5
 800bec6:	e025      	b.n	800bf14 <floor+0x94>
 800bec8:	4a2c      	ldr	r2, [pc, #176]	; (800bf7c <floor+0xfc>)
 800beca:	fa42 f806 	asr.w	r8, r2, r6
 800bece:	ea01 0208 	and.w	r2, r1, r8
 800bed2:	4302      	orrs	r2, r0
 800bed4:	d01e      	beq.n	800bf14 <floor+0x94>
 800bed6:	a326      	add	r3, pc, #152	; (adr r3, 800bf70 <floor+0xf0>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	f7f4 f9b2 	bl	8000244 <__adddf3>
 800bee0:	2200      	movs	r2, #0
 800bee2:	2300      	movs	r3, #0
 800bee4:	f7f4 fdf4 	bl	8000ad0 <__aeabi_dcmpgt>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d0ea      	beq.n	800bec2 <floor+0x42>
 800beec:	2c00      	cmp	r4, #0
 800beee:	bfbe      	ittt	lt
 800bef0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bef4:	fa43 f606 	asrlt.w	r6, r3, r6
 800bef8:	19a4      	addlt	r4, r4, r6
 800befa:	2500      	movs	r5, #0
 800befc:	ea24 0408 	bic.w	r4, r4, r8
 800bf00:	e7df      	b.n	800bec2 <floor+0x42>
 800bf02:	2e33      	cmp	r6, #51	; 0x33
 800bf04:	dd0a      	ble.n	800bf1c <floor+0x9c>
 800bf06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf0a:	d103      	bne.n	800bf14 <floor+0x94>
 800bf0c:	f7f4 f99a 	bl	8000244 <__adddf3>
 800bf10:	4607      	mov	r7, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4638      	mov	r0, r7
 800bf16:	4619      	mov	r1, r3
 800bf18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf20:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bf24:	fa22 f808 	lsr.w	r8, r2, r8
 800bf28:	ea18 0f00 	tst.w	r8, r0
 800bf2c:	d0f2      	beq.n	800bf14 <floor+0x94>
 800bf2e:	a310      	add	r3, pc, #64	; (adr r3, 800bf70 <floor+0xf0>)
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	f7f4 f986 	bl	8000244 <__adddf3>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f7f4 fdc8 	bl	8000ad0 <__aeabi_dcmpgt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d0be      	beq.n	800bec2 <floor+0x42>
 800bf44:	2c00      	cmp	r4, #0
 800bf46:	da02      	bge.n	800bf4e <floor+0xce>
 800bf48:	2e14      	cmp	r6, #20
 800bf4a:	d103      	bne.n	800bf54 <floor+0xd4>
 800bf4c:	3401      	adds	r4, #1
 800bf4e:	ea25 0508 	bic.w	r5, r5, r8
 800bf52:	e7b6      	b.n	800bec2 <floor+0x42>
 800bf54:	2301      	movs	r3, #1
 800bf56:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bf5a:	fa03 f606 	lsl.w	r6, r3, r6
 800bf5e:	4435      	add	r5, r6
 800bf60:	42bd      	cmp	r5, r7
 800bf62:	bf38      	it	cc
 800bf64:	18e4      	addcc	r4, r4, r3
 800bf66:	e7f2      	b.n	800bf4e <floor+0xce>
 800bf68:	2500      	movs	r5, #0
 800bf6a:	462c      	mov	r4, r5
 800bf6c:	e7a9      	b.n	800bec2 <floor+0x42>
 800bf6e:	bf00      	nop
 800bf70:	8800759c 	.word	0x8800759c
 800bf74:	7e37e43c 	.word	0x7e37e43c
 800bf78:	bff00000 	.word	0xbff00000
 800bf7c:	000fffff 	.word	0x000fffff

0800bf80 <atan2>:
 800bf80:	f000 b88e 	b.w	800c0a0 <__ieee754_atan2>

0800bf84 <pow>:
 800bf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf88:	4614      	mov	r4, r2
 800bf8a:	461d      	mov	r5, r3
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4689      	mov	r9, r1
 800bf90:	f000 f95a 	bl	800c248 <__ieee754_pow>
 800bf94:	4622      	mov	r2, r4
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	f7f4 fda0 	bl	8000ae4 <__aeabi_dcmpun>
 800bfa4:	bbc8      	cbnz	r0, 800c01a <pow+0x96>
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	f7f4 fd67 	bl	8000a80 <__aeabi_dcmpeq>
 800bfb2:	b1b8      	cbz	r0, 800bfe4 <pow+0x60>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4620      	mov	r0, r4
 800bfba:	4629      	mov	r1, r5
 800bfbc:	f7f4 fd60 	bl	8000a80 <__aeabi_dcmpeq>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d141      	bne.n	800c048 <pow+0xc4>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f001 f8bf 	bl	800d14a <finite>
 800bfcc:	b328      	cbz	r0, 800c01a <pow+0x96>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	f7f4 fd5d 	bl	8000a94 <__aeabi_dcmplt>
 800bfda:	b1f0      	cbz	r0, 800c01a <pow+0x96>
 800bfdc:	f7fb fae4 	bl	80075a8 <__errno>
 800bfe0:	2322      	movs	r3, #34	; 0x22
 800bfe2:	e019      	b.n	800c018 <pow+0x94>
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f001 f8af 	bl	800d14a <finite>
 800bfec:	b9c8      	cbnz	r0, 800c022 <pow+0x9e>
 800bfee:	4640      	mov	r0, r8
 800bff0:	4649      	mov	r1, r9
 800bff2:	f001 f8aa 	bl	800d14a <finite>
 800bff6:	b1a0      	cbz	r0, 800c022 <pow+0x9e>
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f001 f8a5 	bl	800d14a <finite>
 800c000:	b178      	cbz	r0, 800c022 <pow+0x9e>
 800c002:	4632      	mov	r2, r6
 800c004:	463b      	mov	r3, r7
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 fd6b 	bl	8000ae4 <__aeabi_dcmpun>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d0e4      	beq.n	800bfdc <pow+0x58>
 800c012:	f7fb fac9 	bl	80075a8 <__errno>
 800c016:	2321      	movs	r3, #33	; 0x21
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c022:	2200      	movs	r2, #0
 800c024:	2300      	movs	r3, #0
 800c026:	4630      	mov	r0, r6
 800c028:	4639      	mov	r1, r7
 800c02a:	f7f4 fd29 	bl	8000a80 <__aeabi_dcmpeq>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d0f3      	beq.n	800c01a <pow+0x96>
 800c032:	4640      	mov	r0, r8
 800c034:	4649      	mov	r1, r9
 800c036:	f001 f888 	bl	800d14a <finite>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0ed      	beq.n	800c01a <pow+0x96>
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f001 f882 	bl	800d14a <finite>
 800c046:	e7c8      	b.n	800bfda <pow+0x56>
 800c048:	2600      	movs	r6, #0
 800c04a:	4f01      	ldr	r7, [pc, #4]	; (800c050 <pow+0xcc>)
 800c04c:	e7e5      	b.n	800c01a <pow+0x96>
 800c04e:	bf00      	nop
 800c050:	3ff00000 	.word	0x3ff00000

0800c054 <sqrt>:
 800c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c056:	4606      	mov	r6, r0
 800c058:	460f      	mov	r7, r1
 800c05a:	f000 fe0b 	bl	800cc74 <__ieee754_sqrt>
 800c05e:	4632      	mov	r2, r6
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	463b      	mov	r3, r7
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fd3b 	bl	8000ae4 <__aeabi_dcmpun>
 800c06e:	b990      	cbnz	r0, 800c096 <sqrt+0x42>
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	4630      	mov	r0, r6
 800c076:	4639      	mov	r1, r7
 800c078:	f7f4 fd0c 	bl	8000a94 <__aeabi_dcmplt>
 800c07c:	b158      	cbz	r0, 800c096 <sqrt+0x42>
 800c07e:	f7fb fa93 	bl	80075a8 <__errno>
 800c082:	2321      	movs	r3, #33	; 0x21
 800c084:	2200      	movs	r2, #0
 800c086:	6003      	str	r3, [r0, #0]
 800c088:	2300      	movs	r3, #0
 800c08a:	4610      	mov	r0, r2
 800c08c:	4619      	mov	r1, r3
 800c08e:	f7f4 fbb9 	bl	8000804 <__aeabi_ddiv>
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c09c:	0000      	movs	r0, r0
	...

0800c0a0 <__ieee754_atan2>:
 800c0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	4692      	mov	sl, r2
 800c0a6:	4699      	mov	r9, r3
 800c0a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c0ac:	461f      	mov	r7, r3
 800c0ae:	f1ca 0300 	rsb	r3, sl, #0
 800c0b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c238 <__ieee754_atan2+0x198>
 800c0b6:	ea43 030a 	orr.w	r3, r3, sl
 800c0ba:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c0be:	4573      	cmp	r3, lr
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	d808      	bhi.n	800c0d8 <__ieee754_atan2+0x38>
 800c0c6:	4246      	negs	r6, r0
 800c0c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0cc:	4306      	orrs	r6, r0
 800c0ce:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c0d2:	4576      	cmp	r6, lr
 800c0d4:	468c      	mov	ip, r1
 800c0d6:	d908      	bls.n	800c0ea <__ieee754_atan2+0x4a>
 800c0d8:	4652      	mov	r2, sl
 800c0da:	464b      	mov	r3, r9
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7f4 f8b0 	bl	8000244 <__adddf3>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	e019      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c0ea:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800c0ee:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c0f2:	ea56 060a 	orrs.w	r6, r6, sl
 800c0f6:	d103      	bne.n	800c100 <__ieee754_atan2+0x60>
 800c0f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	f000 be98 	b.w	800ce30 <atan>
 800c100:	17be      	asrs	r6, r7, #30
 800c102:	f006 0602 	and.w	r6, r6, #2
 800c106:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c10a:	ea53 0100 	orrs.w	r1, r3, r0
 800c10e:	d10a      	bne.n	800c126 <__ieee754_atan2+0x86>
 800c110:	2e02      	cmp	r6, #2
 800c112:	d067      	beq.n	800c1e4 <__ieee754_atan2+0x144>
 800c114:	2e03      	cmp	r6, #3
 800c116:	d102      	bne.n	800c11e <__ieee754_atan2+0x7e>
 800c118:	a53b      	add	r5, pc, #236	; (adr r5, 800c208 <__ieee754_atan2+0x168>)
 800c11a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c126:	ea52 010a 	orrs.w	r1, r2, sl
 800c12a:	d106      	bne.n	800c13a <__ieee754_atan2+0x9a>
 800c12c:	f1bc 0f00 	cmp.w	ip, #0
 800c130:	da63      	bge.n	800c1fa <__ieee754_atan2+0x15a>
 800c132:	a537      	add	r5, pc, #220	; (adr r5, 800c210 <__ieee754_atan2+0x170>)
 800c134:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c138:	e7f1      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c13a:	4572      	cmp	r2, lr
 800c13c:	d10f      	bne.n	800c15e <__ieee754_atan2+0xbe>
 800c13e:	4293      	cmp	r3, r2
 800c140:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800c144:	d107      	bne.n	800c156 <__ieee754_atan2+0xb6>
 800c146:	2e02      	cmp	r6, #2
 800c148:	d850      	bhi.n	800c1ec <__ieee754_atan2+0x14c>
 800c14a:	4b3c      	ldr	r3, [pc, #240]	; (800c23c <__ieee754_atan2+0x19c>)
 800c14c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c150:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c154:	e7e3      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c156:	2e02      	cmp	r6, #2
 800c158:	d84c      	bhi.n	800c1f4 <__ieee754_atan2+0x154>
 800c15a:	4b39      	ldr	r3, [pc, #228]	; (800c240 <__ieee754_atan2+0x1a0>)
 800c15c:	e7f6      	b.n	800c14c <__ieee754_atan2+0xac>
 800c15e:	4573      	cmp	r3, lr
 800c160:	d0e4      	beq.n	800c12c <__ieee754_atan2+0x8c>
 800c162:	1a9b      	subs	r3, r3, r2
 800c164:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c168:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c16c:	da20      	bge.n	800c1b0 <__ieee754_atan2+0x110>
 800c16e:	2f00      	cmp	r7, #0
 800c170:	da01      	bge.n	800c176 <__ieee754_atan2+0xd6>
 800c172:	323c      	adds	r2, #60	; 0x3c
 800c174:	db20      	blt.n	800c1b8 <__ieee754_atan2+0x118>
 800c176:	4652      	mov	r2, sl
 800c178:	464b      	mov	r3, r9
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	f7f4 fb41 	bl	8000804 <__aeabi_ddiv>
 800c182:	f000 ffdf 	bl	800d144 <fabs>
 800c186:	f000 fe53 	bl	800ce30 <atan>
 800c18a:	4604      	mov	r4, r0
 800c18c:	460d      	mov	r5, r1
 800c18e:	2e01      	cmp	r6, #1
 800c190:	d015      	beq.n	800c1be <__ieee754_atan2+0x11e>
 800c192:	2e02      	cmp	r6, #2
 800c194:	d017      	beq.n	800c1c6 <__ieee754_atan2+0x126>
 800c196:	2e00      	cmp	r6, #0
 800c198:	d0c1      	beq.n	800c11e <__ieee754_atan2+0x7e>
 800c19a:	a31f      	add	r3, pc, #124	; (adr r3, 800c218 <__ieee754_atan2+0x178>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7f4 f84c 	bl	8000240 <__aeabi_dsub>
 800c1a8:	a31d      	add	r3, pc, #116	; (adr r3, 800c220 <__ieee754_atan2+0x180>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	e016      	b.n	800c1de <__ieee754_atan2+0x13e>
 800c1b0:	a51d      	add	r5, pc, #116	; (adr r5, 800c228 <__ieee754_atan2+0x188>)
 800c1b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1b6:	e7ea      	b.n	800c18e <__ieee754_atan2+0xee>
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	2500      	movs	r5, #0
 800c1bc:	e7e7      	b.n	800c18e <__ieee754_atan2+0xee>
 800c1be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c1c2:	461d      	mov	r5, r3
 800c1c4:	e7ab      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c1c6:	a314      	add	r3, pc, #80	; (adr r3, 800c218 <__ieee754_atan2+0x178>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f836 	bl	8000240 <__aeabi_dsub>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	a111      	add	r1, pc, #68	; (adr r1, 800c220 <__ieee754_atan2+0x180>)
 800c1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1de:	f7f4 f82f 	bl	8000240 <__aeabi_dsub>
 800c1e2:	e77f      	b.n	800c0e4 <__ieee754_atan2+0x44>
 800c1e4:	a50e      	add	r5, pc, #56	; (adr r5, 800c220 <__ieee754_atan2+0x180>)
 800c1e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1ea:	e798      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c1ec:	a510      	add	r5, pc, #64	; (adr r5, 800c230 <__ieee754_atan2+0x190>)
 800c1ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1f2:	e794      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c1f4:	2400      	movs	r4, #0
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	e791      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c1fa:	a50b      	add	r5, pc, #44	; (adr r5, 800c228 <__ieee754_atan2+0x188>)
 800c1fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c200:	e78d      	b.n	800c11e <__ieee754_atan2+0x7e>
 800c202:	bf00      	nop
 800c204:	f3af 8000 	nop.w
 800c208:	54442d18 	.word	0x54442d18
 800c20c:	c00921fb 	.word	0xc00921fb
 800c210:	54442d18 	.word	0x54442d18
 800c214:	bff921fb 	.word	0xbff921fb
 800c218:	33145c07 	.word	0x33145c07
 800c21c:	3ca1a626 	.word	0x3ca1a626
 800c220:	54442d18 	.word	0x54442d18
 800c224:	400921fb 	.word	0x400921fb
 800c228:	54442d18 	.word	0x54442d18
 800c22c:	3ff921fb 	.word	0x3ff921fb
 800c230:	54442d18 	.word	0x54442d18
 800c234:	3fe921fb 	.word	0x3fe921fb
 800c238:	7ff00000 	.word	0x7ff00000
 800c23c:	0800df60 	.word	0x0800df60
 800c240:	0800df78 	.word	0x0800df78
 800c244:	00000000 	.word	0x00000000

0800c248 <__ieee754_pow>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	b093      	sub	sp, #76	; 0x4c
 800c24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c252:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800c256:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c25a:	4689      	mov	r9, r1
 800c25c:	ea56 0102 	orrs.w	r1, r6, r2
 800c260:	4680      	mov	r8, r0
 800c262:	d111      	bne.n	800c288 <__ieee754_pow+0x40>
 800c264:	1803      	adds	r3, r0, r0
 800c266:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800c26a:	4152      	adcs	r2, r2
 800c26c:	4299      	cmp	r1, r3
 800c26e:	4b82      	ldr	r3, [pc, #520]	; (800c478 <__ieee754_pow+0x230>)
 800c270:	4193      	sbcs	r3, r2
 800c272:	f080 84b9 	bcs.w	800cbe8 <__ieee754_pow+0x9a0>
 800c276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f3 ffe1 	bl	8000244 <__adddf3>
 800c282:	4683      	mov	fp, r0
 800c284:	468c      	mov	ip, r1
 800c286:	e06f      	b.n	800c368 <__ieee754_pow+0x120>
 800c288:	4b7c      	ldr	r3, [pc, #496]	; (800c47c <__ieee754_pow+0x234>)
 800c28a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800c28e:	429c      	cmp	r4, r3
 800c290:	464d      	mov	r5, r9
 800c292:	4682      	mov	sl, r0
 800c294:	dc06      	bgt.n	800c2a4 <__ieee754_pow+0x5c>
 800c296:	d101      	bne.n	800c29c <__ieee754_pow+0x54>
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1ec      	bne.n	800c276 <__ieee754_pow+0x2e>
 800c29c:	429e      	cmp	r6, r3
 800c29e:	dc01      	bgt.n	800c2a4 <__ieee754_pow+0x5c>
 800c2a0:	d10f      	bne.n	800c2c2 <__ieee754_pow+0x7a>
 800c2a2:	b172      	cbz	r2, 800c2c2 <__ieee754_pow+0x7a>
 800c2a4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c2a8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c2ac:	ea55 050a 	orrs.w	r5, r5, sl
 800c2b0:	d1e1      	bne.n	800c276 <__ieee754_pow+0x2e>
 800c2b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c2b6:	18db      	adds	r3, r3, r3
 800c2b8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c2bc:	4152      	adcs	r2, r2
 800c2be:	429d      	cmp	r5, r3
 800c2c0:	e7d5      	b.n	800c26e <__ieee754_pow+0x26>
 800c2c2:	2d00      	cmp	r5, #0
 800c2c4:	da39      	bge.n	800c33a <__ieee754_pow+0xf2>
 800c2c6:	4b6e      	ldr	r3, [pc, #440]	; (800c480 <__ieee754_pow+0x238>)
 800c2c8:	429e      	cmp	r6, r3
 800c2ca:	dc52      	bgt.n	800c372 <__ieee754_pow+0x12a>
 800c2cc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c2d0:	429e      	cmp	r6, r3
 800c2d2:	f340 849c 	ble.w	800cc0e <__ieee754_pow+0x9c6>
 800c2d6:	1533      	asrs	r3, r6, #20
 800c2d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2dc:	2b14      	cmp	r3, #20
 800c2de:	dd0f      	ble.n	800c300 <__ieee754_pow+0xb8>
 800c2e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c2e4:	fa22 f103 	lsr.w	r1, r2, r3
 800c2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	f040 848e 	bne.w	800cc0e <__ieee754_pow+0x9c6>
 800c2f2:	f001 0101 	and.w	r1, r1, #1
 800c2f6:	f1c1 0302 	rsb	r3, r1, #2
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	b182      	cbz	r2, 800c320 <__ieee754_pow+0xd8>
 800c2fe:	e05d      	b.n	800c3bc <__ieee754_pow+0x174>
 800c300:	2a00      	cmp	r2, #0
 800c302:	d159      	bne.n	800c3b8 <__ieee754_pow+0x170>
 800c304:	f1c3 0314 	rsb	r3, r3, #20
 800c308:	fa46 f103 	asr.w	r1, r6, r3
 800c30c:	fa01 f303 	lsl.w	r3, r1, r3
 800c310:	42b3      	cmp	r3, r6
 800c312:	f040 8479 	bne.w	800cc08 <__ieee754_pow+0x9c0>
 800c316:	f001 0101 	and.w	r1, r1, #1
 800c31a:	f1c1 0302 	rsb	r3, r1, #2
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	4b58      	ldr	r3, [pc, #352]	; (800c484 <__ieee754_pow+0x23c>)
 800c322:	429e      	cmp	r6, r3
 800c324:	d132      	bne.n	800c38c <__ieee754_pow+0x144>
 800c326:	2f00      	cmp	r7, #0
 800c328:	f280 846a 	bge.w	800cc00 <__ieee754_pow+0x9b8>
 800c32c:	4642      	mov	r2, r8
 800c32e:	464b      	mov	r3, r9
 800c330:	2000      	movs	r0, #0
 800c332:	4954      	ldr	r1, [pc, #336]	; (800c484 <__ieee754_pow+0x23c>)
 800c334:	f7f4 fa66 	bl	8000804 <__aeabi_ddiv>
 800c338:	e7a3      	b.n	800c282 <__ieee754_pow+0x3a>
 800c33a:	2300      	movs	r3, #0
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	2a00      	cmp	r2, #0
 800c340:	d13c      	bne.n	800c3bc <__ieee754_pow+0x174>
 800c342:	4b4e      	ldr	r3, [pc, #312]	; (800c47c <__ieee754_pow+0x234>)
 800c344:	429e      	cmp	r6, r3
 800c346:	d1eb      	bne.n	800c320 <__ieee754_pow+0xd8>
 800c348:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c34c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c350:	ea53 030a 	orrs.w	r3, r3, sl
 800c354:	f000 8448 	beq.w	800cbe8 <__ieee754_pow+0x9a0>
 800c358:	4b4b      	ldr	r3, [pc, #300]	; (800c488 <__ieee754_pow+0x240>)
 800c35a:	429c      	cmp	r4, r3
 800c35c:	dd0b      	ble.n	800c376 <__ieee754_pow+0x12e>
 800c35e:	2f00      	cmp	r7, #0
 800c360:	f2c0 8448 	blt.w	800cbf4 <__ieee754_pow+0x9ac>
 800c364:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c368:	4658      	mov	r0, fp
 800c36a:	4661      	mov	r1, ip
 800c36c:	b013      	add	sp, #76	; 0x4c
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	2302      	movs	r3, #2
 800c374:	e7e2      	b.n	800c33c <__ieee754_pow+0xf4>
 800c376:	2f00      	cmp	r7, #0
 800c378:	f04f 0b00 	mov.w	fp, #0
 800c37c:	f04f 0c00 	mov.w	ip, #0
 800c380:	daf2      	bge.n	800c368 <__ieee754_pow+0x120>
 800c382:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c386:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c38a:	e7ed      	b.n	800c368 <__ieee754_pow+0x120>
 800c38c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c390:	d106      	bne.n	800c3a0 <__ieee754_pow+0x158>
 800c392:	4642      	mov	r2, r8
 800c394:	464b      	mov	r3, r9
 800c396:	4640      	mov	r0, r8
 800c398:	4649      	mov	r1, r9
 800c39a:	f7f4 f909 	bl	80005b0 <__aeabi_dmul>
 800c39e:	e770      	b.n	800c282 <__ieee754_pow+0x3a>
 800c3a0:	4b3a      	ldr	r3, [pc, #232]	; (800c48c <__ieee754_pow+0x244>)
 800c3a2:	429f      	cmp	r7, r3
 800c3a4:	d10a      	bne.n	800c3bc <__ieee754_pow+0x174>
 800c3a6:	2d00      	cmp	r5, #0
 800c3a8:	db08      	blt.n	800c3bc <__ieee754_pow+0x174>
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	b013      	add	sp, #76	; 0x4c
 800c3b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	f000 bc5e 	b.w	800cc74 <__ieee754_sqrt>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f000 fec0 	bl	800d144 <fabs>
 800c3c4:	4683      	mov	fp, r0
 800c3c6:	468c      	mov	ip, r1
 800c3c8:	f1ba 0f00 	cmp.w	sl, #0
 800c3cc:	d128      	bne.n	800c420 <__ieee754_pow+0x1d8>
 800c3ce:	b124      	cbz	r4, 800c3da <__ieee754_pow+0x192>
 800c3d0:	4b2c      	ldr	r3, [pc, #176]	; (800c484 <__ieee754_pow+0x23c>)
 800c3d2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d122      	bne.n	800c420 <__ieee754_pow+0x1d8>
 800c3da:	2f00      	cmp	r7, #0
 800c3dc:	da07      	bge.n	800c3ee <__ieee754_pow+0x1a6>
 800c3de:	465a      	mov	r2, fp
 800c3e0:	4663      	mov	r3, ip
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	4927      	ldr	r1, [pc, #156]	; (800c484 <__ieee754_pow+0x23c>)
 800c3e6:	f7f4 fa0d 	bl	8000804 <__aeabi_ddiv>
 800c3ea:	4683      	mov	fp, r0
 800c3ec:	468c      	mov	ip, r1
 800c3ee:	2d00      	cmp	r5, #0
 800c3f0:	daba      	bge.n	800c368 <__ieee754_pow+0x120>
 800c3f2:	9b00      	ldr	r3, [sp, #0]
 800c3f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3fc:	4323      	orrs	r3, r4
 800c3fe:	d108      	bne.n	800c412 <__ieee754_pow+0x1ca>
 800c400:	465a      	mov	r2, fp
 800c402:	4663      	mov	r3, ip
 800c404:	4658      	mov	r0, fp
 800c406:	4661      	mov	r1, ip
 800c408:	f7f3 ff1a 	bl	8000240 <__aeabi_dsub>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	e790      	b.n	800c334 <__ieee754_pow+0xec>
 800c412:	9b00      	ldr	r3, [sp, #0]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d1a7      	bne.n	800c368 <__ieee754_pow+0x120>
 800c418:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c41c:	469c      	mov	ip, r3
 800c41e:	e7a3      	b.n	800c368 <__ieee754_pow+0x120>
 800c420:	0feb      	lsrs	r3, r5, #31
 800c422:	3b01      	subs	r3, #1
 800c424:	930c      	str	r3, [sp, #48]	; 0x30
 800c426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c428:	9b00      	ldr	r3, [sp, #0]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	d104      	bne.n	800c438 <__ieee754_pow+0x1f0>
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	4640      	mov	r0, r8
 800c434:	4649      	mov	r1, r9
 800c436:	e7e7      	b.n	800c408 <__ieee754_pow+0x1c0>
 800c438:	4b15      	ldr	r3, [pc, #84]	; (800c490 <__ieee754_pow+0x248>)
 800c43a:	429e      	cmp	r6, r3
 800c43c:	f340 80f6 	ble.w	800c62c <__ieee754_pow+0x3e4>
 800c440:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c444:	429e      	cmp	r6, r3
 800c446:	4b10      	ldr	r3, [pc, #64]	; (800c488 <__ieee754_pow+0x240>)
 800c448:	dd09      	ble.n	800c45e <__ieee754_pow+0x216>
 800c44a:	429c      	cmp	r4, r3
 800c44c:	dc0c      	bgt.n	800c468 <__ieee754_pow+0x220>
 800c44e:	2f00      	cmp	r7, #0
 800c450:	da0c      	bge.n	800c46c <__ieee754_pow+0x224>
 800c452:	2000      	movs	r0, #0
 800c454:	b013      	add	sp, #76	; 0x4c
 800c456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45a:	f000 bce2 	b.w	800ce22 <__math_oflow>
 800c45e:	429c      	cmp	r4, r3
 800c460:	dbf5      	blt.n	800c44e <__ieee754_pow+0x206>
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <__ieee754_pow+0x23c>)
 800c464:	429c      	cmp	r4, r3
 800c466:	dd15      	ble.n	800c494 <__ieee754_pow+0x24c>
 800c468:	2f00      	cmp	r7, #0
 800c46a:	dcf2      	bgt.n	800c452 <__ieee754_pow+0x20a>
 800c46c:	2000      	movs	r0, #0
 800c46e:	b013      	add	sp, #76	; 0x4c
 800c470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	f000 bcd0 	b.w	800ce18 <__math_uflow>
 800c478:	fff00000 	.word	0xfff00000
 800c47c:	7ff00000 	.word	0x7ff00000
 800c480:	433fffff 	.word	0x433fffff
 800c484:	3ff00000 	.word	0x3ff00000
 800c488:	3fefffff 	.word	0x3fefffff
 800c48c:	3fe00000 	.word	0x3fe00000
 800c490:	41e00000 	.word	0x41e00000
 800c494:	4661      	mov	r1, ip
 800c496:	2200      	movs	r2, #0
 800c498:	4658      	mov	r0, fp
 800c49a:	4b5f      	ldr	r3, [pc, #380]	; (800c618 <__ieee754_pow+0x3d0>)
 800c49c:	f7f3 fed0 	bl	8000240 <__aeabi_dsub>
 800c4a0:	a355      	add	r3, pc, #340	; (adr r3, 800c5f8 <__ieee754_pow+0x3b0>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	f7f4 f881 	bl	80005b0 <__aeabi_dmul>
 800c4ae:	a354      	add	r3, pc, #336	; (adr r3, 800c600 <__ieee754_pow+0x3b8>)
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	460f      	mov	r7, r1
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7f4 f878 	bl	80005b0 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4682      	mov	sl, r0
 800c4c4:	468b      	mov	fp, r1
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4b54      	ldr	r3, [pc, #336]	; (800c61c <__ieee754_pow+0x3d4>)
 800c4cc:	f7f4 f870 	bl	80005b0 <__aeabi_dmul>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	a14c      	add	r1, pc, #304	; (adr r1, 800c608 <__ieee754_pow+0x3c0>)
 800c4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4da:	f7f3 feb1 	bl	8000240 <__aeabi_dsub>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	f7f4 f865 	bl	80005b0 <__aeabi_dmul>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	494c      	ldr	r1, [pc, #304]	; (800c620 <__ieee754_pow+0x3d8>)
 800c4ee:	f7f3 fea7 	bl	8000240 <__aeabi_dsub>
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	4689      	mov	r9, r1
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f7f4 f857 	bl	80005b0 <__aeabi_dmul>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	f7f4 f851 	bl	80005b0 <__aeabi_dmul>
 800c50e:	a340      	add	r3, pc, #256	; (adr r3, 800c610 <__ieee754_pow+0x3c8>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f7f4 f84c 	bl	80005b0 <__aeabi_dmul>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4650      	mov	r0, sl
 800c51e:	4659      	mov	r1, fp
 800c520:	f7f3 fe8e 	bl	8000240 <__aeabi_dsub>
 800c524:	f04f 0a00 	mov.w	sl, #0
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4604      	mov	r4, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 fe86 	bl	8000244 <__adddf3>
 800c538:	4632      	mov	r2, r6
 800c53a:	463b      	mov	r3, r7
 800c53c:	4650      	mov	r0, sl
 800c53e:	468b      	mov	fp, r1
 800c540:	f7f3 fe7e 	bl	8000240 <__aeabi_dsub>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe78 	bl	8000240 <__aeabi_dsub>
 800c550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c554:	9b00      	ldr	r3, [sp, #0]
 800c556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c558:	3b01      	subs	r3, #1
 800c55a:	4313      	orrs	r3, r2
 800c55c:	f04f 0600 	mov.w	r6, #0
 800c560:	f04f 0200 	mov.w	r2, #0
 800c564:	bf0c      	ite	eq
 800c566:	4b2f      	ldreq	r3, [pc, #188]	; (800c624 <__ieee754_pow+0x3dc>)
 800c568:	4b2b      	ldrne	r3, [pc, #172]	; (800c618 <__ieee754_pow+0x3d0>)
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c572:	e9cd 2300 	strd	r2, r3, [sp]
 800c576:	4632      	mov	r2, r6
 800c578:	463b      	mov	r3, r7
 800c57a:	f7f3 fe61 	bl	8000240 <__aeabi_dsub>
 800c57e:	4652      	mov	r2, sl
 800c580:	465b      	mov	r3, fp
 800c582:	f7f4 f815 	bl	80005b0 <__aeabi_dmul>
 800c586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58a:	4680      	mov	r8, r0
 800c58c:	4689      	mov	r9, r1
 800c58e:	4620      	mov	r0, r4
 800c590:	4629      	mov	r1, r5
 800c592:	f7f4 f80d 	bl	80005b0 <__aeabi_dmul>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f3 fe51 	bl	8000244 <__adddf3>
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	4680      	mov	r8, r0
 800c5a8:	4689      	mov	r9, r1
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	f7f3 ffff 	bl	80005b0 <__aeabi_dmul>
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	4640      	mov	r0, r8
 800c5be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c5c2:	f7f3 fe3f 	bl	8000244 <__adddf3>
 800c5c6:	4b18      	ldr	r3, [pc, #96]	; (800c628 <__ieee754_pow+0x3e0>)
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	4299      	cmp	r1, r3
 800c5cc:	460f      	mov	r7, r1
 800c5ce:	460e      	mov	r6, r1
 800c5d0:	f340 82e5 	ble.w	800cb9e <__ieee754_pow+0x956>
 800c5d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c5d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c5dc:	4303      	orrs	r3, r0
 800c5de:	f000 81df 	beq.w	800c9a0 <__ieee754_pow+0x758>
 800c5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f7f4 fa53 	bl	8000a94 <__aeabi_dcmplt>
 800c5ee:	3800      	subs	r0, #0
 800c5f0:	bf18      	it	ne
 800c5f2:	2001      	movne	r0, #1
 800c5f4:	e72e      	b.n	800c454 <__ieee754_pow+0x20c>
 800c5f6:	bf00      	nop
 800c5f8:	60000000 	.word	0x60000000
 800c5fc:	3ff71547 	.word	0x3ff71547
 800c600:	f85ddf44 	.word	0xf85ddf44
 800c604:	3e54ae0b 	.word	0x3e54ae0b
 800c608:	55555555 	.word	0x55555555
 800c60c:	3fd55555 	.word	0x3fd55555
 800c610:	652b82fe 	.word	0x652b82fe
 800c614:	3ff71547 	.word	0x3ff71547
 800c618:	3ff00000 	.word	0x3ff00000
 800c61c:	3fd00000 	.word	0x3fd00000
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	bff00000 	.word	0xbff00000
 800c628:	408fffff 	.word	0x408fffff
 800c62c:	4bd2      	ldr	r3, [pc, #840]	; (800c978 <__ieee754_pow+0x730>)
 800c62e:	2200      	movs	r2, #0
 800c630:	402b      	ands	r3, r5
 800c632:	b943      	cbnz	r3, 800c646 <__ieee754_pow+0x3fe>
 800c634:	4658      	mov	r0, fp
 800c636:	4661      	mov	r1, ip
 800c638:	4bd0      	ldr	r3, [pc, #832]	; (800c97c <__ieee754_pow+0x734>)
 800c63a:	f7f3 ffb9 	bl	80005b0 <__aeabi_dmul>
 800c63e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c642:	4683      	mov	fp, r0
 800c644:	460c      	mov	r4, r1
 800c646:	1523      	asrs	r3, r4, #20
 800c648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c64c:	4413      	add	r3, r2
 800c64e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c650:	4bcb      	ldr	r3, [pc, #812]	; (800c980 <__ieee754_pow+0x738>)
 800c652:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c656:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c65a:	429c      	cmp	r4, r3
 800c65c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c660:	dd08      	ble.n	800c674 <__ieee754_pow+0x42c>
 800c662:	4bc8      	ldr	r3, [pc, #800]	; (800c984 <__ieee754_pow+0x73c>)
 800c664:	429c      	cmp	r4, r3
 800c666:	f340 8199 	ble.w	800c99c <__ieee754_pow+0x754>
 800c66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c66c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c670:	3301      	adds	r3, #1
 800c672:	930b      	str	r3, [sp, #44]	; 0x2c
 800c674:	2600      	movs	r6, #0
 800c676:	00f3      	lsls	r3, r6, #3
 800c678:	930d      	str	r3, [sp, #52]	; 0x34
 800c67a:	4bc3      	ldr	r3, [pc, #780]	; (800c988 <__ieee754_pow+0x740>)
 800c67c:	4658      	mov	r0, fp
 800c67e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c682:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c686:	4629      	mov	r1, r5
 800c688:	461a      	mov	r2, r3
 800c68a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c68e:	4623      	mov	r3, r4
 800c690:	f7f3 fdd6 	bl	8000240 <__aeabi_dsub>
 800c694:	46da      	mov	sl, fp
 800c696:	462b      	mov	r3, r5
 800c698:	4652      	mov	r2, sl
 800c69a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c69e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6a2:	f7f3 fdcf 	bl	8000244 <__adddf3>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	49b7      	ldr	r1, [pc, #732]	; (800c98c <__ieee754_pow+0x744>)
 800c6ae:	f7f4 f8a9 	bl	8000804 <__aeabi_ddiv>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c6ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6be:	f7f3 ff77 	bl	80005b0 <__aeabi_dmul>
 800c6c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c6ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	46ab      	mov	fp, r5
 800c6d4:	106d      	asrs	r5, r5, #1
 800c6d6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c6e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c6e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	461d      	mov	r5, r3
 800c6f0:	f7f3 ff5e 	bl	80005b0 <__aeabi_dmul>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6fc:	f7f3 fda0 	bl	8000240 <__aeabi_dsub>
 800c700:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c704:	4606      	mov	r6, r0
 800c706:	460f      	mov	r7, r1
 800c708:	4620      	mov	r0, r4
 800c70a:	4629      	mov	r1, r5
 800c70c:	f7f3 fd98 	bl	8000240 <__aeabi_dsub>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4650      	mov	r0, sl
 800c716:	4659      	mov	r1, fp
 800c718:	f7f3 fd92 	bl	8000240 <__aeabi_dsub>
 800c71c:	4642      	mov	r2, r8
 800c71e:	464b      	mov	r3, r9
 800c720:	f7f3 ff46 	bl	80005b0 <__aeabi_dmul>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	f7f3 fd88 	bl	8000240 <__aeabi_dsub>
 800c730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c734:	f7f3 ff3c 	bl	80005b0 <__aeabi_dmul>
 800c738:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c73c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c740:	4610      	mov	r0, r2
 800c742:	4619      	mov	r1, r3
 800c744:	f7f3 ff34 	bl	80005b0 <__aeabi_dmul>
 800c748:	a379      	add	r3, pc, #484	; (adr r3, 800c930 <__ieee754_pow+0x6e8>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	4604      	mov	r4, r0
 800c750:	460d      	mov	r5, r1
 800c752:	f7f3 ff2d 	bl	80005b0 <__aeabi_dmul>
 800c756:	a378      	add	r3, pc, #480	; (adr r3, 800c938 <__ieee754_pow+0x6f0>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 fd72 	bl	8000244 <__adddf3>
 800c760:	4622      	mov	r2, r4
 800c762:	462b      	mov	r3, r5
 800c764:	f7f3 ff24 	bl	80005b0 <__aeabi_dmul>
 800c768:	a375      	add	r3, pc, #468	; (adr r3, 800c940 <__ieee754_pow+0x6f8>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 fd69 	bl	8000244 <__adddf3>
 800c772:	4622      	mov	r2, r4
 800c774:	462b      	mov	r3, r5
 800c776:	f7f3 ff1b 	bl	80005b0 <__aeabi_dmul>
 800c77a:	a373      	add	r3, pc, #460	; (adr r3, 800c948 <__ieee754_pow+0x700>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 fd60 	bl	8000244 <__adddf3>
 800c784:	4622      	mov	r2, r4
 800c786:	462b      	mov	r3, r5
 800c788:	f7f3 ff12 	bl	80005b0 <__aeabi_dmul>
 800c78c:	a370      	add	r3, pc, #448	; (adr r3, 800c950 <__ieee754_pow+0x708>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f3 fd57 	bl	8000244 <__adddf3>
 800c796:	4622      	mov	r2, r4
 800c798:	462b      	mov	r3, r5
 800c79a:	f7f3 ff09 	bl	80005b0 <__aeabi_dmul>
 800c79e:	a36e      	add	r3, pc, #440	; (adr r3, 800c958 <__ieee754_pow+0x710>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	f7f3 fd4e 	bl	8000244 <__adddf3>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	462b      	mov	r3, r5
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	f7f3 fefc 	bl	80005b0 <__aeabi_dmul>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4630      	mov	r0, r6
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f3 fef6 	bl	80005b0 <__aeabi_dmul>
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	460d      	mov	r5, r1
 800c7c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	464b      	mov	r3, r9
 800c7d0:	f7f3 fd38 	bl	8000244 <__adddf3>
 800c7d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c7d8:	f7f3 feea 	bl	80005b0 <__aeabi_dmul>
 800c7dc:	4622      	mov	r2, r4
 800c7de:	462b      	mov	r3, r5
 800c7e0:	f7f3 fd30 	bl	8000244 <__adddf3>
 800c7e4:	4642      	mov	r2, r8
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	464b      	mov	r3, r9
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f7f3 fede 	bl	80005b0 <__aeabi_dmul>
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4b66      	ldr	r3, [pc, #408]	; (800c990 <__ieee754_pow+0x748>)
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	468b      	mov	fp, r1
 800c7fc:	f7f3 fd22 	bl	8000244 <__adddf3>
 800c800:	4632      	mov	r2, r6
 800c802:	463b      	mov	r3, r7
 800c804:	f7f3 fd1e 	bl	8000244 <__adddf3>
 800c808:	2400      	movs	r4, #0
 800c80a:	460d      	mov	r5, r1
 800c80c:	4622      	mov	r2, r4
 800c80e:	460b      	mov	r3, r1
 800c810:	4640      	mov	r0, r8
 800c812:	4649      	mov	r1, r9
 800c814:	f7f3 fecc 	bl	80005b0 <__aeabi_dmul>
 800c818:	2200      	movs	r2, #0
 800c81a:	4680      	mov	r8, r0
 800c81c:	4689      	mov	r9, r1
 800c81e:	4620      	mov	r0, r4
 800c820:	4629      	mov	r1, r5
 800c822:	4b5b      	ldr	r3, [pc, #364]	; (800c990 <__ieee754_pow+0x748>)
 800c824:	f7f3 fd0c 	bl	8000240 <__aeabi_dsub>
 800c828:	4652      	mov	r2, sl
 800c82a:	465b      	mov	r3, fp
 800c82c:	f7f3 fd08 	bl	8000240 <__aeabi_dsub>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4630      	mov	r0, r6
 800c836:	4639      	mov	r1, r7
 800c838:	f7f3 fd02 	bl	8000240 <__aeabi_dsub>
 800c83c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c840:	f7f3 feb6 	bl	80005b0 <__aeabi_dmul>
 800c844:	4622      	mov	r2, r4
 800c846:	4606      	mov	r6, r0
 800c848:	460f      	mov	r7, r1
 800c84a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c84e:	462b      	mov	r3, r5
 800c850:	f7f3 feae 	bl	80005b0 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f3 fcf2 	bl	8000244 <__adddf3>
 800c860:	2400      	movs	r4, #0
 800c862:	4606      	mov	r6, r0
 800c864:	460f      	mov	r7, r1
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4640      	mov	r0, r8
 800c86c:	4649      	mov	r1, r9
 800c86e:	f7f3 fce9 	bl	8000244 <__adddf3>
 800c872:	a33b      	add	r3, pc, #236	; (adr r3, 800c960 <__ieee754_pow+0x718>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	4620      	mov	r0, r4
 800c87a:	460d      	mov	r5, r1
 800c87c:	f7f3 fe98 	bl	80005b0 <__aeabi_dmul>
 800c880:	4642      	mov	r2, r8
 800c882:	464b      	mov	r3, r9
 800c884:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fcd8 	bl	8000240 <__aeabi_dsub>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f3 fcd2 	bl	8000240 <__aeabi_dsub>
 800c89c:	a332      	add	r3, pc, #200	; (adr r3, 800c968 <__ieee754_pow+0x720>)
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	f7f3 fe85 	bl	80005b0 <__aeabi_dmul>
 800c8a6:	a332      	add	r3, pc, #200	; (adr r3, 800c970 <__ieee754_pow+0x728>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fe7c 	bl	80005b0 <__aeabi_dmul>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f3 fcc0 	bl	8000244 <__adddf3>
 800c8c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8c6:	4b33      	ldr	r3, [pc, #204]	; (800c994 <__ieee754_pow+0x74c>)
 800c8c8:	f04f 0a00 	mov.w	sl, #0
 800c8cc:	4413      	add	r3, r2
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	f7f3 fcb7 	bl	8000244 <__adddf3>
 800c8d6:	4680      	mov	r8, r0
 800c8d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c8da:	4689      	mov	r9, r1
 800c8dc:	f7f3 fdfe 	bl	80004dc <__aeabi_i2d>
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8e6:	4b2c      	ldr	r3, [pc, #176]	; (800c998 <__ieee754_pow+0x750>)
 800c8e8:	4413      	add	r3, r2
 800c8ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c8ee:	4642      	mov	r2, r8
 800c8f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f4:	464b      	mov	r3, r9
 800c8f6:	f7f3 fca5 	bl	8000244 <__adddf3>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	f7f3 fca1 	bl	8000244 <__adddf3>
 800c902:	4622      	mov	r2, r4
 800c904:	462b      	mov	r3, r5
 800c906:	f7f3 fc9d 	bl	8000244 <__adddf3>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	4650      	mov	r0, sl
 800c910:	468b      	mov	fp, r1
 800c912:	f7f3 fc95 	bl	8000240 <__aeabi_dsub>
 800c916:	4632      	mov	r2, r6
 800c918:	463b      	mov	r3, r7
 800c91a:	f7f3 fc91 	bl	8000240 <__aeabi_dsub>
 800c91e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c922:	f7f3 fc8d 	bl	8000240 <__aeabi_dsub>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4640      	mov	r0, r8
 800c92c:	4649      	mov	r1, r9
 800c92e:	e60d      	b.n	800c54c <__ieee754_pow+0x304>
 800c930:	4a454eef 	.word	0x4a454eef
 800c934:	3fca7e28 	.word	0x3fca7e28
 800c938:	93c9db65 	.word	0x93c9db65
 800c93c:	3fcd864a 	.word	0x3fcd864a
 800c940:	a91d4101 	.word	0xa91d4101
 800c944:	3fd17460 	.word	0x3fd17460
 800c948:	518f264d 	.word	0x518f264d
 800c94c:	3fd55555 	.word	0x3fd55555
 800c950:	db6fabff 	.word	0xdb6fabff
 800c954:	3fdb6db6 	.word	0x3fdb6db6
 800c958:	33333303 	.word	0x33333303
 800c95c:	3fe33333 	.word	0x3fe33333
 800c960:	e0000000 	.word	0xe0000000
 800c964:	3feec709 	.word	0x3feec709
 800c968:	dc3a03fd 	.word	0xdc3a03fd
 800c96c:	3feec709 	.word	0x3feec709
 800c970:	145b01f5 	.word	0x145b01f5
 800c974:	be3e2fe0 	.word	0xbe3e2fe0
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	43400000 	.word	0x43400000
 800c980:	0003988e 	.word	0x0003988e
 800c984:	000bb679 	.word	0x000bb679
 800c988:	0800df90 	.word	0x0800df90
 800c98c:	3ff00000 	.word	0x3ff00000
 800c990:	40080000 	.word	0x40080000
 800c994:	0800dfb0 	.word	0x0800dfb0
 800c998:	0800dfa0 	.word	0x0800dfa0
 800c99c:	2601      	movs	r6, #1
 800c99e:	e66a      	b.n	800c676 <__ieee754_pow+0x42e>
 800c9a0:	a39d      	add	r3, pc, #628	; (adr r3, 800cc18 <__ieee754_pow+0x9d0>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	f7f3 fc4b 	bl	8000244 <__adddf3>
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9b4:	462b      	mov	r3, r5
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f3 fc41 	bl	8000240 <__aeabi_dsub>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9c6:	f7f4 f883 	bl	8000ad0 <__aeabi_dcmpgt>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	f47f ae09 	bne.w	800c5e2 <__ieee754_pow+0x39a>
 800c9d0:	4aa3      	ldr	r2, [pc, #652]	; (800cc60 <__ieee754_pow+0xa18>)
 800c9d2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	f340 8101 	ble.w	800cbde <__ieee754_pow+0x996>
 800c9dc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	151b      	asrs	r3, r3, #20
 800c9e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c9e8:	fa4a f303 	asr.w	r3, sl, r3
 800c9ec:	4433      	add	r3, r6
 800c9ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c9f2:	4f9c      	ldr	r7, [pc, #624]	; (800cc64 <__ieee754_pow+0xa1c>)
 800c9f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c9f8:	4117      	asrs	r7, r2
 800c9fa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c9fe:	ea23 0107 	bic.w	r1, r3, r7
 800ca02:	f1c2 0214 	rsb	r2, r2, #20
 800ca06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	fa4a fa02 	asr.w	sl, sl, r2
 800ca10:	2e00      	cmp	r6, #0
 800ca12:	4602      	mov	r2, r0
 800ca14:	4629      	mov	r1, r5
 800ca16:	4620      	mov	r0, r4
 800ca18:	bfb8      	it	lt
 800ca1a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca1e:	f7f3 fc0f 	bl	8000240 <__aeabi_dsub>
 800ca22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca2a:	2400      	movs	r4, #0
 800ca2c:	4642      	mov	r2, r8
 800ca2e:	464b      	mov	r3, r9
 800ca30:	f7f3 fc08 	bl	8000244 <__adddf3>
 800ca34:	a37a      	add	r3, pc, #488	; (adr r3, 800cc20 <__ieee754_pow+0x9d8>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	f7f3 fdb7 	bl	80005b0 <__aeabi_dmul>
 800ca42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca46:	4606      	mov	r6, r0
 800ca48:	460f      	mov	r7, r1
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7f3 fbf7 	bl	8000240 <__aeabi_dsub>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fbf1 	bl	8000240 <__aeabi_dsub>
 800ca5e:	a372      	add	r3, pc, #456	; (adr r3, 800cc28 <__ieee754_pow+0x9e0>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f7f3 fda4 	bl	80005b0 <__aeabi_dmul>
 800ca68:	a371      	add	r3, pc, #452	; (adr r3, 800cc30 <__ieee754_pow+0x9e8>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	4680      	mov	r8, r0
 800ca70:	4689      	mov	r9, r1
 800ca72:	4620      	mov	r0, r4
 800ca74:	4629      	mov	r1, r5
 800ca76:	f7f3 fd9b 	bl	80005b0 <__aeabi_dmul>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	4640      	mov	r0, r8
 800ca80:	4649      	mov	r1, r9
 800ca82:	f7f3 fbdf 	bl	8000244 <__adddf3>
 800ca86:	4604      	mov	r4, r0
 800ca88:	460d      	mov	r5, r1
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4630      	mov	r0, r6
 800ca90:	4639      	mov	r1, r7
 800ca92:	f7f3 fbd7 	bl	8000244 <__adddf3>
 800ca96:	4632      	mov	r2, r6
 800ca98:	463b      	mov	r3, r7
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	4689      	mov	r9, r1
 800ca9e:	f7f3 fbcf 	bl	8000240 <__aeabi_dsub>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	4620      	mov	r0, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7f3 fbc9 	bl	8000240 <__aeabi_dsub>
 800caae:	4642      	mov	r2, r8
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	464b      	mov	r3, r9
 800cab6:	4640      	mov	r0, r8
 800cab8:	4649      	mov	r1, r9
 800caba:	f7f3 fd79 	bl	80005b0 <__aeabi_dmul>
 800cabe:	a35e      	add	r3, pc, #376	; (adr r3, 800cc38 <__ieee754_pow+0x9f0>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	4604      	mov	r4, r0
 800cac6:	460d      	mov	r5, r1
 800cac8:	f7f3 fd72 	bl	80005b0 <__aeabi_dmul>
 800cacc:	a35c      	add	r3, pc, #368	; (adr r3, 800cc40 <__ieee754_pow+0x9f8>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fbb5 	bl	8000240 <__aeabi_dsub>
 800cad6:	4622      	mov	r2, r4
 800cad8:	462b      	mov	r3, r5
 800cada:	f7f3 fd69 	bl	80005b0 <__aeabi_dmul>
 800cade:	a35a      	add	r3, pc, #360	; (adr r3, 800cc48 <__ieee754_pow+0xa00>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fbae 	bl	8000244 <__adddf3>
 800cae8:	4622      	mov	r2, r4
 800caea:	462b      	mov	r3, r5
 800caec:	f7f3 fd60 	bl	80005b0 <__aeabi_dmul>
 800caf0:	a357      	add	r3, pc, #348	; (adr r3, 800cc50 <__ieee754_pow+0xa08>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fba3 	bl	8000240 <__aeabi_dsub>
 800cafa:	4622      	mov	r2, r4
 800cafc:	462b      	mov	r3, r5
 800cafe:	f7f3 fd57 	bl	80005b0 <__aeabi_dmul>
 800cb02:	a355      	add	r3, pc, #340	; (adr r3, 800cc58 <__ieee754_pow+0xa10>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fb9c 	bl	8000244 <__adddf3>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	462b      	mov	r3, r5
 800cb10:	f7f3 fd4e 	bl	80005b0 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4640      	mov	r0, r8
 800cb1a:	4649      	mov	r1, r9
 800cb1c:	f7f3 fb90 	bl	8000240 <__aeabi_dsub>
 800cb20:	4604      	mov	r4, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	f7f3 fd40 	bl	80005b0 <__aeabi_dmul>
 800cb30:	2200      	movs	r2, #0
 800cb32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7f3 fb7f 	bl	8000240 <__aeabi_dsub>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb4a:	f7f3 fe5b 	bl	8000804 <__aeabi_ddiv>
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	463b      	mov	r3, r7
 800cb56:	4640      	mov	r0, r8
 800cb58:	4649      	mov	r1, r9
 800cb5a:	f7f3 fd29 	bl	80005b0 <__aeabi_dmul>
 800cb5e:	4632      	mov	r2, r6
 800cb60:	463b      	mov	r3, r7
 800cb62:	f7f3 fb6f 	bl	8000244 <__adddf3>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 fb67 	bl	8000240 <__aeabi_dsub>
 800cb72:	4642      	mov	r2, r8
 800cb74:	464b      	mov	r3, r9
 800cb76:	f7f3 fb63 	bl	8000240 <__aeabi_dsub>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	2000      	movs	r0, #0
 800cb80:	4939      	ldr	r1, [pc, #228]	; (800cc68 <__ieee754_pow+0xa20>)
 800cb82:	f7f3 fb5d 	bl	8000240 <__aeabi_dsub>
 800cb86:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cb8a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cb8e:	da29      	bge.n	800cbe4 <__ieee754_pow+0x99c>
 800cb90:	4652      	mov	r2, sl
 800cb92:	f000 fae1 	bl	800d158 <scalbn>
 800cb96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb9a:	f7ff bbfe 	b.w	800c39a <__ieee754_pow+0x152>
 800cb9e:	4b33      	ldr	r3, [pc, #204]	; (800cc6c <__ieee754_pow+0xa24>)
 800cba0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cba4:	429f      	cmp	r7, r3
 800cba6:	f77f af13 	ble.w	800c9d0 <__ieee754_pow+0x788>
 800cbaa:	4b31      	ldr	r3, [pc, #196]	; (800cc70 <__ieee754_pow+0xa28>)
 800cbac:	440b      	add	r3, r1
 800cbae:	4303      	orrs	r3, r0
 800cbb0:	d009      	beq.n	800cbc6 <__ieee754_pow+0x97e>
 800cbb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f7f3 ff6b 	bl	8000a94 <__aeabi_dcmplt>
 800cbbe:	3800      	subs	r0, #0
 800cbc0:	bf18      	it	ne
 800cbc2:	2001      	movne	r0, #1
 800cbc4:	e453      	b.n	800c46e <__ieee754_pow+0x226>
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	462b      	mov	r3, r5
 800cbca:	f7f3 fb39 	bl	8000240 <__aeabi_dsub>
 800cbce:	4642      	mov	r2, r8
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	f7f3 ff73 	bl	8000abc <__aeabi_dcmpge>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f43f aefa 	beq.w	800c9d0 <__ieee754_pow+0x788>
 800cbdc:	e7e9      	b.n	800cbb2 <__ieee754_pow+0x96a>
 800cbde:	f04f 0a00 	mov.w	sl, #0
 800cbe2:	e720      	b.n	800ca26 <__ieee754_pow+0x7de>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	e7d6      	b.n	800cb96 <__ieee754_pow+0x94e>
 800cbe8:	f04f 0b00 	mov.w	fp, #0
 800cbec:	f8df c078 	ldr.w	ip, [pc, #120]	; 800cc68 <__ieee754_pow+0xa20>
 800cbf0:	f7ff bbba 	b.w	800c368 <__ieee754_pow+0x120>
 800cbf4:	f04f 0b00 	mov.w	fp, #0
 800cbf8:	f04f 0c00 	mov.w	ip, #0
 800cbfc:	f7ff bbb4 	b.w	800c368 <__ieee754_pow+0x120>
 800cc00:	4640      	mov	r0, r8
 800cc02:	4649      	mov	r1, r9
 800cc04:	f7ff bb3d 	b.w	800c282 <__ieee754_pow+0x3a>
 800cc08:	9200      	str	r2, [sp, #0]
 800cc0a:	f7ff bb89 	b.w	800c320 <__ieee754_pow+0xd8>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f7ff bb73 	b.w	800c2fa <__ieee754_pow+0xb2>
 800cc14:	f3af 8000 	nop.w
 800cc18:	652b82fe 	.word	0x652b82fe
 800cc1c:	3c971547 	.word	0x3c971547
 800cc20:	00000000 	.word	0x00000000
 800cc24:	3fe62e43 	.word	0x3fe62e43
 800cc28:	fefa39ef 	.word	0xfefa39ef
 800cc2c:	3fe62e42 	.word	0x3fe62e42
 800cc30:	0ca86c39 	.word	0x0ca86c39
 800cc34:	be205c61 	.word	0xbe205c61
 800cc38:	72bea4d0 	.word	0x72bea4d0
 800cc3c:	3e663769 	.word	0x3e663769
 800cc40:	c5d26bf1 	.word	0xc5d26bf1
 800cc44:	3ebbbd41 	.word	0x3ebbbd41
 800cc48:	af25de2c 	.word	0xaf25de2c
 800cc4c:	3f11566a 	.word	0x3f11566a
 800cc50:	16bebd93 	.word	0x16bebd93
 800cc54:	3f66c16c 	.word	0x3f66c16c
 800cc58:	5555553e 	.word	0x5555553e
 800cc5c:	3fc55555 	.word	0x3fc55555
 800cc60:	3fe00000 	.word	0x3fe00000
 800cc64:	000fffff 	.word	0x000fffff
 800cc68:	3ff00000 	.word	0x3ff00000
 800cc6c:	4090cbff 	.word	0x4090cbff
 800cc70:	3f6f3400 	.word	0x3f6f3400

0800cc74 <__ieee754_sqrt>:
 800cc74:	f8df c158 	ldr.w	ip, [pc, #344]	; 800cdd0 <__ieee754_sqrt+0x15c>
 800cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7c:	ea3c 0c01 	bics.w	ip, ip, r1
 800cc80:	4606      	mov	r6, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	460c      	mov	r4, r1
 800cc86:	460a      	mov	r2, r1
 800cc88:	4607      	mov	r7, r0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	d10f      	bne.n	800ccae <__ieee754_sqrt+0x3a>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	f7f3 fc8d 	bl	80005b0 <__aeabi_dmul>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	f7f3 fad1 	bl	8000244 <__adddf3>
 800cca2:	4606      	mov	r6, r0
 800cca4:	460d      	mov	r5, r1
 800cca6:	4630      	mov	r0, r6
 800cca8:	4629      	mov	r1, r5
 800ccaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccae:	2900      	cmp	r1, #0
 800ccb0:	dc0e      	bgt.n	800ccd0 <__ieee754_sqrt+0x5c>
 800ccb2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ccb6:	ea5c 0707 	orrs.w	r7, ip, r7
 800ccba:	d0f4      	beq.n	800cca6 <__ieee754_sqrt+0x32>
 800ccbc:	b141      	cbz	r1, 800ccd0 <__ieee754_sqrt+0x5c>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	f7f3 fabd 	bl	8000240 <__aeabi_dsub>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	f7f3 fd9b 	bl	8000804 <__aeabi_ddiv>
 800ccce:	e7e8      	b.n	800cca2 <__ieee754_sqrt+0x2e>
 800ccd0:	1521      	asrs	r1, r4, #20
 800ccd2:	d075      	beq.n	800cdc0 <__ieee754_sqrt+0x14c>
 800ccd4:	07cc      	lsls	r4, r1, #31
 800ccd6:	f04f 0400 	mov.w	r4, #0
 800ccda:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ccde:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800cce2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cce6:	bf5e      	ittt	pl
 800cce8:	0fd9      	lsrpl	r1, r3, #31
 800ccea:	005b      	lslpl	r3, r3, #1
 800ccec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ccf0:	0fd9      	lsrs	r1, r3, #31
 800ccf2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ccf6:	2516      	movs	r5, #22
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccfe:	107f      	asrs	r7, r7, #1
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	1846      	adds	r6, r0, r1
 800cd04:	4296      	cmp	r6, r2
 800cd06:	bfde      	ittt	le
 800cd08:	1b92      	suble	r2, r2, r6
 800cd0a:	1870      	addle	r0, r6, r1
 800cd0c:	1864      	addle	r4, r4, r1
 800cd0e:	0052      	lsls	r2, r2, #1
 800cd10:	3d01      	subs	r5, #1
 800cd12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd1e:	d1f0      	bne.n	800cd02 <__ieee754_sqrt+0x8e>
 800cd20:	4629      	mov	r1, r5
 800cd22:	f04f 0e20 	mov.w	lr, #32
 800cd26:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cd2a:	4282      	cmp	r2, r0
 800cd2c:	eb06 0c05 	add.w	ip, r6, r5
 800cd30:	dc02      	bgt.n	800cd38 <__ieee754_sqrt+0xc4>
 800cd32:	d113      	bne.n	800cd5c <__ieee754_sqrt+0xe8>
 800cd34:	459c      	cmp	ip, r3
 800cd36:	d811      	bhi.n	800cd5c <__ieee754_sqrt+0xe8>
 800cd38:	f1bc 0f00 	cmp.w	ip, #0
 800cd3c:	eb0c 0506 	add.w	r5, ip, r6
 800cd40:	da43      	bge.n	800cdca <__ieee754_sqrt+0x156>
 800cd42:	2d00      	cmp	r5, #0
 800cd44:	db41      	blt.n	800cdca <__ieee754_sqrt+0x156>
 800cd46:	f100 0801 	add.w	r8, r0, #1
 800cd4a:	1a12      	subs	r2, r2, r0
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	459c      	cmp	ip, r3
 800cd50:	bf88      	it	hi
 800cd52:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cd56:	eba3 030c 	sub.w	r3, r3, ip
 800cd5a:	4431      	add	r1, r6
 800cd5c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cd60:	f1be 0e01 	subs.w	lr, lr, #1
 800cd64:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800cd68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cd70:	d1db      	bne.n	800cd2a <__ieee754_sqrt+0xb6>
 800cd72:	4313      	orrs	r3, r2
 800cd74:	d006      	beq.n	800cd84 <__ieee754_sqrt+0x110>
 800cd76:	1c48      	adds	r0, r1, #1
 800cd78:	bf0b      	itete	eq
 800cd7a:	4671      	moveq	r1, lr
 800cd7c:	3101      	addne	r1, #1
 800cd7e:	3401      	addeq	r4, #1
 800cd80:	f021 0101 	bicne.w	r1, r1, #1
 800cd84:	1063      	asrs	r3, r4, #1
 800cd86:	0849      	lsrs	r1, r1, #1
 800cd88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cd8c:	07e2      	lsls	r2, r4, #31
 800cd8e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cd92:	bf48      	it	mi
 800cd94:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cd98:	460e      	mov	r6, r1
 800cd9a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cd9e:	e782      	b.n	800cca6 <__ieee754_sqrt+0x32>
 800cda0:	0ada      	lsrs	r2, r3, #11
 800cda2:	3815      	subs	r0, #21
 800cda4:	055b      	lsls	r3, r3, #21
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	d0fa      	beq.n	800cda0 <__ieee754_sqrt+0x12c>
 800cdaa:	02d5      	lsls	r5, r2, #11
 800cdac:	d50a      	bpl.n	800cdc4 <__ieee754_sqrt+0x150>
 800cdae:	f1c1 0420 	rsb	r4, r1, #32
 800cdb2:	fa23 f404 	lsr.w	r4, r3, r4
 800cdb6:	1e4d      	subs	r5, r1, #1
 800cdb8:	408b      	lsls	r3, r1
 800cdba:	4322      	orrs	r2, r4
 800cdbc:	1b41      	subs	r1, r0, r5
 800cdbe:	e789      	b.n	800ccd4 <__ieee754_sqrt+0x60>
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	e7f0      	b.n	800cda6 <__ieee754_sqrt+0x132>
 800cdc4:	0052      	lsls	r2, r2, #1
 800cdc6:	3101      	adds	r1, #1
 800cdc8:	e7ef      	b.n	800cdaa <__ieee754_sqrt+0x136>
 800cdca:	4680      	mov	r8, r0
 800cdcc:	e7bd      	b.n	800cd4a <__ieee754_sqrt+0xd6>
 800cdce:	bf00      	nop
 800cdd0:	7ff00000 	.word	0x7ff00000

0800cdd4 <with_errno>:
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	4616      	mov	r6, r2
 800cddc:	f7fa fbe4 	bl	80075a8 <__errno>
 800cde0:	4629      	mov	r1, r5
 800cde2:	6006      	str	r6, [r0, #0]
 800cde4:	4620      	mov	r0, r4
 800cde6:	bd70      	pop	{r4, r5, r6, pc}

0800cde8 <xflow>:
 800cde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdea:	4615      	mov	r5, r2
 800cdec:	461c      	mov	r4, r3
 800cdee:	b180      	cbz	r0, 800ce12 <xflow+0x2a>
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdf6:	e9cd 0100 	strd	r0, r1, [sp]
 800cdfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdfe:	4628      	mov	r0, r5
 800ce00:	4621      	mov	r1, r4
 800ce02:	f7f3 fbd5 	bl	80005b0 <__aeabi_dmul>
 800ce06:	2222      	movs	r2, #34	; 0x22
 800ce08:	b003      	add	sp, #12
 800ce0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce0e:	f7ff bfe1 	b.w	800cdd4 <with_errno>
 800ce12:	4610      	mov	r0, r2
 800ce14:	4619      	mov	r1, r3
 800ce16:	e7ee      	b.n	800cdf6 <xflow+0xe>

0800ce18 <__math_uflow>:
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce1e:	f7ff bfe3 	b.w	800cde8 <xflow>

0800ce22 <__math_oflow>:
 800ce22:	2200      	movs	r2, #0
 800ce24:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ce28:	f7ff bfde 	b.w	800cde8 <xflow>
 800ce2c:	0000      	movs	r0, r0
	...

0800ce30 <atan>:
 800ce30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	4bb6      	ldr	r3, [pc, #728]	; (800d110 <atan+0x2e0>)
 800ce36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ce3a:	429e      	cmp	r6, r3
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	468b      	mov	fp, r1
 800ce42:	dd17      	ble.n	800ce74 <atan+0x44>
 800ce44:	4bb3      	ldr	r3, [pc, #716]	; (800d114 <atan+0x2e4>)
 800ce46:	429e      	cmp	r6, r3
 800ce48:	dc01      	bgt.n	800ce4e <atan+0x1e>
 800ce4a:	d109      	bne.n	800ce60 <atan+0x30>
 800ce4c:	b140      	cbz	r0, 800ce60 <atan+0x30>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	462b      	mov	r3, r5
 800ce52:	4620      	mov	r0, r4
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7f3 f9f5 	bl	8000244 <__adddf3>
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	e005      	b.n	800ce6c <atan+0x3c>
 800ce60:	f1bb 0f00 	cmp.w	fp, #0
 800ce64:	4cac      	ldr	r4, [pc, #688]	; (800d118 <atan+0x2e8>)
 800ce66:	f300 8121 	bgt.w	800d0ac <atan+0x27c>
 800ce6a:	4dac      	ldr	r5, [pc, #688]	; (800d11c <atan+0x2ec>)
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce74:	4baa      	ldr	r3, [pc, #680]	; (800d120 <atan+0x2f0>)
 800ce76:	429e      	cmp	r6, r3
 800ce78:	dc11      	bgt.n	800ce9e <atan+0x6e>
 800ce7a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ce7e:	429e      	cmp	r6, r3
 800ce80:	dc0a      	bgt.n	800ce98 <atan+0x68>
 800ce82:	a38b      	add	r3, pc, #556	; (adr r3, 800d0b0 <atan+0x280>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f7f3 f9dc 	bl	8000244 <__adddf3>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4ba5      	ldr	r3, [pc, #660]	; (800d124 <atan+0x2f4>)
 800ce90:	f7f3 fe1e 	bl	8000ad0 <__aeabi_dcmpgt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d1e9      	bne.n	800ce6c <atan+0x3c>
 800ce98:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ce9c:	e027      	b.n	800ceee <atan+0xbe>
 800ce9e:	f000 f951 	bl	800d144 <fabs>
 800cea2:	4ba1      	ldr	r3, [pc, #644]	; (800d128 <atan+0x2f8>)
 800cea4:	4604      	mov	r4, r0
 800cea6:	429e      	cmp	r6, r3
 800cea8:	460d      	mov	r5, r1
 800ceaa:	f300 80b8 	bgt.w	800d01e <atan+0x1ee>
 800ceae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ceb2:	429e      	cmp	r6, r3
 800ceb4:	f300 809c 	bgt.w	800cff0 <atan+0x1c0>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	f7f3 f9c2 	bl	8000244 <__adddf3>
 800cec0:	2200      	movs	r2, #0
 800cec2:	4b98      	ldr	r3, [pc, #608]	; (800d124 <atan+0x2f4>)
 800cec4:	f7f3 f9bc 	bl	8000240 <__aeabi_dsub>
 800cec8:	2200      	movs	r2, #0
 800ceca:	4606      	mov	r6, r0
 800cecc:	460f      	mov	r7, r1
 800cece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ced2:	4620      	mov	r0, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	f7f3 f9b5 	bl	8000244 <__adddf3>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 fc8f 	bl	8000804 <__aeabi_ddiv>
 800cee6:	f04f 0a00 	mov.w	sl, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	460d      	mov	r5, r1
 800ceee:	4622      	mov	r2, r4
 800cef0:	462b      	mov	r3, r5
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	f7f3 fb5b 	bl	80005b0 <__aeabi_dmul>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4680      	mov	r8, r0
 800cf00:	4689      	mov	r9, r1
 800cf02:	f7f3 fb55 	bl	80005b0 <__aeabi_dmul>
 800cf06:	a36c      	add	r3, pc, #432	; (adr r3, 800d0b8 <atan+0x288>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	460f      	mov	r7, r1
 800cf10:	f7f3 fb4e 	bl	80005b0 <__aeabi_dmul>
 800cf14:	a36a      	add	r3, pc, #424	; (adr r3, 800d0c0 <atan+0x290>)
 800cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1a:	f7f3 f993 	bl	8000244 <__adddf3>
 800cf1e:	4632      	mov	r2, r6
 800cf20:	463b      	mov	r3, r7
 800cf22:	f7f3 fb45 	bl	80005b0 <__aeabi_dmul>
 800cf26:	a368      	add	r3, pc, #416	; (adr r3, 800d0c8 <atan+0x298>)
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	f7f3 f98a 	bl	8000244 <__adddf3>
 800cf30:	4632      	mov	r2, r6
 800cf32:	463b      	mov	r3, r7
 800cf34:	f7f3 fb3c 	bl	80005b0 <__aeabi_dmul>
 800cf38:	a365      	add	r3, pc, #404	; (adr r3, 800d0d0 <atan+0x2a0>)
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	f7f3 f981 	bl	8000244 <__adddf3>
 800cf42:	4632      	mov	r2, r6
 800cf44:	463b      	mov	r3, r7
 800cf46:	f7f3 fb33 	bl	80005b0 <__aeabi_dmul>
 800cf4a:	a363      	add	r3, pc, #396	; (adr r3, 800d0d8 <atan+0x2a8>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	f7f3 f978 	bl	8000244 <__adddf3>
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	f7f3 fb2a 	bl	80005b0 <__aeabi_dmul>
 800cf5c:	a360      	add	r3, pc, #384	; (adr r3, 800d0e0 <atan+0x2b0>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	f7f3 f96f 	bl	8000244 <__adddf3>
 800cf66:	4642      	mov	r2, r8
 800cf68:	464b      	mov	r3, r9
 800cf6a:	f7f3 fb21 	bl	80005b0 <__aeabi_dmul>
 800cf6e:	a35e      	add	r3, pc, #376	; (adr r3, 800d0e8 <atan+0x2b8>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	4680      	mov	r8, r0
 800cf76:	4689      	mov	r9, r1
 800cf78:	4630      	mov	r0, r6
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	f7f3 fb18 	bl	80005b0 <__aeabi_dmul>
 800cf80:	a35b      	add	r3, pc, #364	; (adr r3, 800d0f0 <atan+0x2c0>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	f7f3 f95b 	bl	8000240 <__aeabi_dsub>
 800cf8a:	4632      	mov	r2, r6
 800cf8c:	463b      	mov	r3, r7
 800cf8e:	f7f3 fb0f 	bl	80005b0 <__aeabi_dmul>
 800cf92:	a359      	add	r3, pc, #356	; (adr r3, 800d0f8 <atan+0x2c8>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	f7f3 f952 	bl	8000240 <__aeabi_dsub>
 800cf9c:	4632      	mov	r2, r6
 800cf9e:	463b      	mov	r3, r7
 800cfa0:	f7f3 fb06 	bl	80005b0 <__aeabi_dmul>
 800cfa4:	a356      	add	r3, pc, #344	; (adr r3, 800d100 <atan+0x2d0>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f7f3 f949 	bl	8000240 <__aeabi_dsub>
 800cfae:	4632      	mov	r2, r6
 800cfb0:	463b      	mov	r3, r7
 800cfb2:	f7f3 fafd 	bl	80005b0 <__aeabi_dmul>
 800cfb6:	a354      	add	r3, pc, #336	; (adr r3, 800d108 <atan+0x2d8>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 f940 	bl	8000240 <__aeabi_dsub>
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	f7f3 faf4 	bl	80005b0 <__aeabi_dmul>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4640      	mov	r0, r8
 800cfce:	4649      	mov	r1, r9
 800cfd0:	f7f3 f938 	bl	8000244 <__adddf3>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f7f3 faea 	bl	80005b0 <__aeabi_dmul>
 800cfdc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	d144      	bne.n	800d070 <atan+0x240>
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f7f3 f929 	bl	8000240 <__aeabi_dsub>
 800cfee:	e734      	b.n	800ce5a <atan+0x2a>
 800cff0:	2200      	movs	r2, #0
 800cff2:	4b4c      	ldr	r3, [pc, #304]	; (800d124 <atan+0x2f4>)
 800cff4:	f7f3 f924 	bl	8000240 <__aeabi_dsub>
 800cff8:	2200      	movs	r2, #0
 800cffa:	4606      	mov	r6, r0
 800cffc:	460f      	mov	r7, r1
 800cffe:	4620      	mov	r0, r4
 800d000:	4629      	mov	r1, r5
 800d002:	4b48      	ldr	r3, [pc, #288]	; (800d124 <atan+0x2f4>)
 800d004:	f7f3 f91e 	bl	8000244 <__adddf3>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4630      	mov	r0, r6
 800d00e:	4639      	mov	r1, r7
 800d010:	f7f3 fbf8 	bl	8000804 <__aeabi_ddiv>
 800d014:	f04f 0a01 	mov.w	sl, #1
 800d018:	4604      	mov	r4, r0
 800d01a:	460d      	mov	r5, r1
 800d01c:	e767      	b.n	800ceee <atan+0xbe>
 800d01e:	4b43      	ldr	r3, [pc, #268]	; (800d12c <atan+0x2fc>)
 800d020:	429e      	cmp	r6, r3
 800d022:	da1a      	bge.n	800d05a <atan+0x22a>
 800d024:	2200      	movs	r2, #0
 800d026:	4b42      	ldr	r3, [pc, #264]	; (800d130 <atan+0x300>)
 800d028:	f7f3 f90a 	bl	8000240 <__aeabi_dsub>
 800d02c:	2200      	movs	r2, #0
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	4620      	mov	r0, r4
 800d034:	4629      	mov	r1, r5
 800d036:	4b3e      	ldr	r3, [pc, #248]	; (800d130 <atan+0x300>)
 800d038:	f7f3 faba 	bl	80005b0 <__aeabi_dmul>
 800d03c:	2200      	movs	r2, #0
 800d03e:	4b39      	ldr	r3, [pc, #228]	; (800d124 <atan+0x2f4>)
 800d040:	f7f3 f900 	bl	8000244 <__adddf3>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 fbda 	bl	8000804 <__aeabi_ddiv>
 800d050:	f04f 0a02 	mov.w	sl, #2
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	e749      	b.n	800ceee <atan+0xbe>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	2000      	movs	r0, #0
 800d060:	4934      	ldr	r1, [pc, #208]	; (800d134 <atan+0x304>)
 800d062:	f7f3 fbcf 	bl	8000804 <__aeabi_ddiv>
 800d066:	f04f 0a03 	mov.w	sl, #3
 800d06a:	4604      	mov	r4, r0
 800d06c:	460d      	mov	r5, r1
 800d06e:	e73e      	b.n	800ceee <atan+0xbe>
 800d070:	4b31      	ldr	r3, [pc, #196]	; (800d138 <atan+0x308>)
 800d072:	4e32      	ldr	r6, [pc, #200]	; (800d13c <atan+0x30c>)
 800d074:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d078:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d07c:	e9da 2300 	ldrd	r2, r3, [sl]
 800d080:	f7f3 f8de 	bl	8000240 <__aeabi_dsub>
 800d084:	4622      	mov	r2, r4
 800d086:	462b      	mov	r3, r5
 800d088:	f7f3 f8da 	bl	8000240 <__aeabi_dsub>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d094:	f7f3 f8d4 	bl	8000240 <__aeabi_dsub>
 800d098:	f1bb 0f00 	cmp.w	fp, #0
 800d09c:	4604      	mov	r4, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	f6bf aee4 	bge.w	800ce6c <atan+0x3c>
 800d0a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0a8:	461d      	mov	r5, r3
 800d0aa:	e6df      	b.n	800ce6c <atan+0x3c>
 800d0ac:	4d24      	ldr	r5, [pc, #144]	; (800d140 <atan+0x310>)
 800d0ae:	e6dd      	b.n	800ce6c <atan+0x3c>
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	7e37e43c 	.word	0x7e37e43c
 800d0b8:	e322da11 	.word	0xe322da11
 800d0bc:	3f90ad3a 	.word	0x3f90ad3a
 800d0c0:	24760deb 	.word	0x24760deb
 800d0c4:	3fa97b4b 	.word	0x3fa97b4b
 800d0c8:	a0d03d51 	.word	0xa0d03d51
 800d0cc:	3fb10d66 	.word	0x3fb10d66
 800d0d0:	c54c206e 	.word	0xc54c206e
 800d0d4:	3fb745cd 	.word	0x3fb745cd
 800d0d8:	920083ff 	.word	0x920083ff
 800d0dc:	3fc24924 	.word	0x3fc24924
 800d0e0:	5555550d 	.word	0x5555550d
 800d0e4:	3fd55555 	.word	0x3fd55555
 800d0e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d0ec:	bfa2b444 	.word	0xbfa2b444
 800d0f0:	52defd9a 	.word	0x52defd9a
 800d0f4:	3fadde2d 	.word	0x3fadde2d
 800d0f8:	af749a6d 	.word	0xaf749a6d
 800d0fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d100:	fe231671 	.word	0xfe231671
 800d104:	3fbc71c6 	.word	0x3fbc71c6
 800d108:	9998ebc4 	.word	0x9998ebc4
 800d10c:	3fc99999 	.word	0x3fc99999
 800d110:	440fffff 	.word	0x440fffff
 800d114:	7ff00000 	.word	0x7ff00000
 800d118:	54442d18 	.word	0x54442d18
 800d11c:	bff921fb 	.word	0xbff921fb
 800d120:	3fdbffff 	.word	0x3fdbffff
 800d124:	3ff00000 	.word	0x3ff00000
 800d128:	3ff2ffff 	.word	0x3ff2ffff
 800d12c:	40038000 	.word	0x40038000
 800d130:	3ff80000 	.word	0x3ff80000
 800d134:	bff00000 	.word	0xbff00000
 800d138:	0800dfe0 	.word	0x0800dfe0
 800d13c:	0800dfc0 	.word	0x0800dfc0
 800d140:	3ff921fb 	.word	0x3ff921fb

0800d144 <fabs>:
 800d144:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d148:	4770      	bx	lr

0800d14a <finite>:
 800d14a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d14e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d152:	0fc0      	lsrs	r0, r0, #31
 800d154:	4770      	bx	lr
	...

0800d158 <scalbn>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d15e:	4604      	mov	r4, r0
 800d160:	460d      	mov	r5, r1
 800d162:	4617      	mov	r7, r2
 800d164:	460b      	mov	r3, r1
 800d166:	b996      	cbnz	r6, 800d18e <scalbn+0x36>
 800d168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d16c:	4303      	orrs	r3, r0
 800d16e:	d039      	beq.n	800d1e4 <scalbn+0x8c>
 800d170:	4b33      	ldr	r3, [pc, #204]	; (800d240 <scalbn+0xe8>)
 800d172:	2200      	movs	r2, #0
 800d174:	f7f3 fa1c 	bl	80005b0 <__aeabi_dmul>
 800d178:	4b32      	ldr	r3, [pc, #200]	; (800d244 <scalbn+0xec>)
 800d17a:	4604      	mov	r4, r0
 800d17c:	429f      	cmp	r7, r3
 800d17e:	460d      	mov	r5, r1
 800d180:	da0f      	bge.n	800d1a2 <scalbn+0x4a>
 800d182:	a32b      	add	r3, pc, #172	; (adr r3, 800d230 <scalbn+0xd8>)
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 fa12 	bl	80005b0 <__aeabi_dmul>
 800d18c:	e006      	b.n	800d19c <scalbn+0x44>
 800d18e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d192:	4296      	cmp	r6, r2
 800d194:	d10a      	bne.n	800d1ac <scalbn+0x54>
 800d196:	4602      	mov	r2, r0
 800d198:	f7f3 f854 	bl	8000244 <__adddf3>
 800d19c:	4604      	mov	r4, r0
 800d19e:	460d      	mov	r5, r1
 800d1a0:	e020      	b.n	800d1e4 <scalbn+0x8c>
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d1a8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d1ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d1b0:	19b9      	adds	r1, r7, r6
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	dd0e      	ble.n	800d1d4 <scalbn+0x7c>
 800d1b6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d1ba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d1be:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d1c2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d1c6:	4820      	ldr	r0, [pc, #128]	; (800d248 <scalbn+0xf0>)
 800d1c8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d1cc:	a31a      	add	r3, pc, #104	; (adr r3, 800d238 <scalbn+0xe0>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	e7d9      	b.n	800d188 <scalbn+0x30>
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	dd08      	ble.n	800d1ea <scalbn+0x92>
 800d1d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d1ee:	da12      	bge.n	800d216 <scalbn+0xbe>
 800d1f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d1f4:	429f      	cmp	r7, r3
 800d1f6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d1fa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d1fe:	dcdc      	bgt.n	800d1ba <scalbn+0x62>
 800d200:	a30b      	add	r3, pc, #44	; (adr r3, 800d230 <scalbn+0xd8>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d20a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d20e:	480f      	ldr	r0, [pc, #60]	; (800d24c <scalbn+0xf4>)
 800d210:	f041 011f 	orr.w	r1, r1, #31
 800d214:	e7b8      	b.n	800d188 <scalbn+0x30>
 800d216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d21a:	3136      	adds	r1, #54	; 0x36
 800d21c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d220:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d224:	4620      	mov	r0, r4
 800d226:	4629      	mov	r1, r5
 800d228:	2200      	movs	r2, #0
 800d22a:	4b09      	ldr	r3, [pc, #36]	; (800d250 <scalbn+0xf8>)
 800d22c:	e7ac      	b.n	800d188 <scalbn+0x30>
 800d22e:	bf00      	nop
 800d230:	c2f8f359 	.word	0xc2f8f359
 800d234:	01a56e1f 	.word	0x01a56e1f
 800d238:	8800759c 	.word	0x8800759c
 800d23c:	7e37e43c 	.word	0x7e37e43c
 800d240:	43500000 	.word	0x43500000
 800d244:	ffff3cb0 	.word	0xffff3cb0
 800d248:	8800759c 	.word	0x8800759c
 800d24c:	c2f8f359 	.word	0xc2f8f359
 800d250:	3c900000 	.word	0x3c900000

0800d254 <_init>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	bf00      	nop
 800d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25a:	bc08      	pop	{r3}
 800d25c:	469e      	mov	lr, r3
 800d25e:	4770      	bx	lr

0800d260 <_fini>:
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	bf00      	nop
 800d264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d266:	bc08      	pop	{r3}
 800d268:	469e      	mov	lr, r3
 800d26a:	4770      	bx	lr
