
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007218  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  08007400  08007400  00017400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fbc  08007fbc  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08007fbc  08007fbc  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fbc  08007fbc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08007fc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000210  080081d4  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080081d4  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130d9  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003038  00000000  00000000  00033312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c203  00000000  00000000  0003634a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  00042550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027c8  00000000  00000000  00042f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3ae  00000000  00000000  00045748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155b0  00000000  00000000  00060af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b59f  00000000  00000000  000760a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00111645  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003368  00000000  00000000  00111698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	080073e8 	.word	0x080073e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	080073e8 	.word	0x080073e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <HueToRGB565>:
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);

uint16_t HueToRGB565(uint8_t hue) {
    uint16_t portion = hue * 6;
 8000ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000ba4:	0040      	lsls	r0, r0, #1

    if (portion < 256) { // 0 <= degree < 60
 8000ba6:	28ff      	cmp	r0, #255	; 0xff
uint16_t HueToRGB565(uint8_t hue) {
 8000ba8:	b508      	push	{r3, lr}
    if (portion < 256) { // 0 <= degree < 60
 8000baa:	d932      	bls.n	8000c12 <HueToRGB565+0x72>
        return RED + ((int) (portion / 256.0 * 64) << 5);
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8000bac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000bb0:	d31a      	bcc.n	8000be8 <HueToRGB565+0x48>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8000bb2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8000bb6:	d351      	bcc.n	8000c5c <HueToRGB565+0xbc>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8000bb8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000bbc:	d33a      	bcc.n	8000c34 <HueToRGB565+0x94>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8000bbe:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8000bc2:	d25d      	bcs.n	8000c80 <HueToRGB565+0xe0>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8000bc4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000bc8:	f7ff fc88 	bl	80004dc <__aeabi_i2d>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HueToRGB565+0x110>)
 8000bd0:	f7ff fcee 	bl	80005b0 <__aeabi_dmul>
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <HueToRGB565+0x114>)
 8000bd8:	f7ff fcea 	bl	80005b0 <__aeabi_dmul>
 8000bdc:	f7ff ff98 	bl	8000b10 <__aeabi_d2iz>
 8000be0:	02c0      	lsls	r0, r0, #11
 8000be2:	301f      	adds	r0, #31
 8000be4:	b280      	uxth	r0, r0
    } else if (portion < 256 * 6) { // 300 <= degree < 360
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
    }
}
 8000be6:	bd08      	pop	{r3, pc}
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8000be8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bec:	f7ff fc76 	bl	80004dc <__aeabi_i2d>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HueToRGB565+0x110>)
 8000bf4:	f7ff fcdc 	bl	80005b0 <__aeabi_dmul>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HueToRGB565+0x114>)
 8000bfc:	f7ff fcd8 	bl	80005b0 <__aeabi_dmul>
 8000c00:	f7ff ff86 	bl	8000b10 <__aeabi_d2iz>
 8000c04:	f1c0 001f 	rsb	r0, r0, #31
 8000c08:	02c0      	lsls	r0, r0, #11
 8000c0a:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c0e:	b280      	uxth	r0, r0
}
 8000c10:	bd08      	pop	{r3, pc}
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8000c12:	f7ff fc63 	bl	80004dc <__aeabi_i2d>
 8000c16:	2200      	movs	r2, #0
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HueToRGB565+0x110>)
 8000c1a:	f7ff fcc9 	bl	80005b0 <__aeabi_dmul>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HueToRGB565+0x118>)
 8000c22:	f7ff fcc5 	bl	80005b0 <__aeabi_dmul>
 8000c26:	f7ff ff73 	bl	8000b10 <__aeabi_d2iz>
 8000c2a:	0140      	lsls	r0, r0, #5
 8000c2c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000c30:	b280      	uxth	r0, r0
}
 8000c32:	bd08      	pop	{r3, pc}
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8000c34:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8000c38:	f7ff fc50 	bl	80004dc <__aeabi_i2d>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HueToRGB565+0x110>)
 8000c40:	f7ff fcb6 	bl	80005b0 <__aeabi_dmul>
 8000c44:	2200      	movs	r2, #0
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HueToRGB565+0x118>)
 8000c48:	f7ff fcb2 	bl	80005b0 <__aeabi_dmul>
 8000c4c:	f7ff ff60 	bl	8000b10 <__aeabi_d2iz>
 8000c50:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8000c54:	0140      	lsls	r0, r0, #5
 8000c56:	301f      	adds	r0, #31
 8000c58:	b280      	uxth	r0, r0
}
 8000c5a:	bd08      	pop	{r3, pc}
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8000c5c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8000c60:	f7ff fc3c 	bl	80004dc <__aeabi_i2d>
 8000c64:	2200      	movs	r2, #0
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HueToRGB565+0x110>)
 8000c68:	f7ff fca2 	bl	80005b0 <__aeabi_dmul>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HueToRGB565+0x114>)
 8000c70:	f7ff fc9e 	bl	80005b0 <__aeabi_dmul>
 8000c74:	f7ff ff4c 	bl	8000b10 <__aeabi_d2iz>
 8000c78:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c7c:	b280      	uxth	r0, r0
}
 8000c7e:	bd08      	pop	{r3, pc}
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8000c80:	f5a0 60a0 	sub.w	r0, r0, #1280	; 0x500
 8000c84:	f7ff fc2a 	bl	80004dc <__aeabi_i2d>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HueToRGB565+0x110>)
 8000c8c:	f7ff fc90 	bl	80005b0 <__aeabi_dmul>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HueToRGB565+0x114>)
 8000c94:	f7ff fc8c 	bl	80005b0 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4907      	ldr	r1, [pc, #28]	; (8000cbc <HueToRGB565+0x11c>)
 8000ca0:	f7ff face 	bl	8000240 <__aeabi_dsub>
 8000ca4:	f7ff ff34 	bl	8000b10 <__aeabi_d2iz>
 8000ca8:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000cac:	b280      	uxth	r0, r0
}
 8000cae:	bd08      	pop	{r3, pc}
 8000cb0:	3f700000 	.word	0x3f700000
 8000cb4:	40400000 	.word	0x40400000
 8000cb8:	40500000 	.word	0x40500000
 8000cbc:	403f0000 	.word	0x403f0000

08000cc0 <LCD_Rst>:
    LCD_REG_Config();
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
}


void LCD_Rst(void) {
 8000cc0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <LCD_Rst+0x24>)
 8000cc8:	f002 fab6 	bl	8003238 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	d1fd      	bne.n	8000cce <LCD_Rst+0xe>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <LCD_Rst+0x24>)
 8000cd8:	f002 faae 	bl	8003238 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	d1fd      	bne.n	8000cde <LCD_Rst+0x1e>
}
 8000ce2:	bd08      	pop	{r3, pc}
 8000ce4:	40011800 	.word	0x40011800
 8000ce8:	0002bffc 	.word	0x0002bffc

08000cec <LCD_REG_Config>:
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}


void LCD_Write_Cmd(uint16_t usCmd) {
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cf0:	23cf      	movs	r3, #207	; 0xcf
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 8000cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2081      	movs	r0, #129	; 0x81
 8000cfa:	f04f 0c30 	mov.w	ip, #48	; 0x30
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cfe:	f04f 04ed 	mov.w	r4, #237	; 0xed
 8000d02:	8013      	strh	r3, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <LCD_REG_Config+0x1dc>)
 8000d06:	f04f 0803 	mov.w	r8, #3
 8000d0a:	8019      	strh	r1, [r3, #0]
 8000d0c:	8018      	strh	r0, [r3, #0]
 8000d0e:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d12:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d14:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000d18:	801c      	strh	r4, [r3, #0]
 8000d1a:	f04f 0412 	mov.w	r4, #18
 8000d1e:	f8a3 8000 	strh.w	r8, [r3]
 8000d22:	801c      	strh	r4, [r3, #0]
 8000d24:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d26:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000d2a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d2c:	f04f 0085 	mov.w	r0, #133	; 0x85
 8000d30:	f04f 0b10 	mov.w	fp, #16
 8000d34:	8018      	strh	r0, [r3, #0]
 8000d36:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000d3a:	f8a3 b000 	strh.w	fp, [r3]
 8000d3e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d40:	f04f 00cb 	mov.w	r0, #203	; 0xcb
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d44:	f04f 0939 	mov.w	r9, #57	; 0x39
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d48:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d4a:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000d4e:	f8a3 9000 	strh.w	r9, [r3]
 8000d52:	8018      	strh	r0, [r3, #0]
 8000d54:	f04f 0034 	mov.w	r0, #52	; 0x34
 8000d58:	8019      	strh	r1, [r3, #0]
 8000d5a:	8018      	strh	r0, [r3, #0]
 8000d5c:	f04f 0002 	mov.w	r0, #2
 8000d60:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d62:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 8000d66:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d68:	f04f 0020 	mov.w	r0, #32
 8000d6c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d6e:	f04f 00ea 	mov.w	r0, #234	; 0xea
 8000d72:	8010      	strh	r0, [r2, #0]
 8000d74:	f04f 00b1 	mov.w	r0, #177	; 0xb1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d78:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d7a:	f04f 04b6 	mov.w	r4, #182	; 0xb6
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d7e:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d80:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d82:	f04f 001b 	mov.w	r0, #27
 8000d86:	8019      	strh	r1, [r3, #0]
 8000d88:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d8a:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d8c:	f04f 040a 	mov.w	r4, #10
 8000d90:	801c      	strh	r4, [r3, #0]
 8000d92:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 8000d96:	801c      	strh	r4, [r3, #0]
 8000d98:	4620      	mov	r0, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d9a:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 8000d9e:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000da0:	f04f 0435 	mov.w	r4, #53	; 0x35
 8000da4:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000da6:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 8000daa:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dac:	f04f 0411 	mov.w	r4, #17
 8000db0:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000db2:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 8000db6:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000db8:	f04f 0445 	mov.w	r4, #69	; 0x45
 8000dbc:	801c      	strh	r4, [r3, #0]
 8000dbe:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dc0:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 8000dc4:	8014      	strh	r4, [r2, #0]
 8000dc6:	f04f 04f2 	mov.w	r4, #242	; 0xf2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dca:	8018      	strh	r0, [r3, #0]
 8000dcc:	2501      	movs	r5, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dce:	8014      	strh	r4, [r2, #0]
 8000dd0:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 8000dd4:	f04f 0426 	mov.w	r4, #38	; 0x26
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dd8:	8019      	strh	r1, [r3, #0]
 8000dda:	270f      	movs	r7, #15
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ddc:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dde:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000de0:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000de2:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000de6:	801f      	strh	r7, [r3, #0]
 8000de8:	801c      	strh	r4, [r3, #0]
 8000dea:	8018      	strh	r0, [r3, #0]
 8000dec:	f04f 000b 	mov.w	r0, #11
 8000df0:	8018      	strh	r0, [r3, #0]
 8000df2:	f04f 000e 	mov.w	r0, #14
 8000df6:	f04f 0409 	mov.w	r4, #9
 8000dfa:	8018      	strh	r0, [r3, #0]
 8000dfc:	f04f 0054 	mov.w	r0, #84	; 0x54
 8000e00:	801c      	strh	r4, [r3, #0]
 8000e02:	8018      	strh	r0, [r3, #0]
 8000e04:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000e08:	8018      	strh	r0, [r3, #0]
 8000e0a:	f04f 0046 	mov.w	r0, #70	; 0x46
 8000e0e:	8018      	strh	r0, [r3, #0]
 8000e10:	f04f 000c 	mov.w	r0, #12
 8000e14:	8018      	strh	r0, [r3, #0]
 8000e16:	f04f 0017 	mov.w	r0, #23
 8000e1a:	f04f 0a07 	mov.w	sl, #7
 8000e1e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e20:	f04f 00e1 	mov.w	r0, #225	; 0xe1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e24:	801c      	strh	r4, [r3, #0]
 8000e26:	801f      	strh	r7, [r3, #0]
 8000e28:	f8a3 a000 	strh.w	sl, [r3]
 8000e2c:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e2e:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e30:	f04f 0019 	mov.w	r0, #25
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	8018      	strh	r0, [r3, #0]
 8000e38:	f04f 001b 	mov.w	r0, #27
 8000e3c:	8018      	strh	r0, [r3, #0]
 8000e3e:	f04f 0004 	mov.w	r0, #4
 8000e42:	262a      	movs	r6, #42	; 0x2a
 8000e44:	8018      	strh	r0, [r3, #0]
 8000e46:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000e4a:	f8a3 b000 	strh.w	fp, [r3]
 8000e4e:	f04f 0e06 	mov.w	lr, #6
 8000e52:	f8a3 a000 	strh.w	sl, [r3]
 8000e56:	801e      	strh	r6, [r3, #0]
 8000e58:	8018      	strh	r0, [r3, #0]
 8000e5a:	f04f 0038 	mov.w	r0, #56	; 0x38
 8000e5e:	f8a3 9000 	strh.w	r9, [r3]
 8000e62:	f8a3 8000 	strh.w	r8, [r3]
 8000e66:	f8a3 e000 	strh.w	lr, [r3]
 8000e6a:	f8a3 e000 	strh.w	lr, [r3]
 8000e6e:	f8a3 c000 	strh.w	ip, [r3]
 8000e72:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e74:	f04f 0036 	mov.w	r0, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e78:	801f      	strh	r7, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e7a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e7c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000e80:	8018      	strh	r0, [r3, #0]
 8000e82:	f04f 00ef 	mov.w	r0, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e86:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e88:	8019      	strh	r1, [r3, #0]
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	8019      	strh	r1, [r3, #0]
 8000e8e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e90:	f04f 002b 	mov.w	r0, #43	; 0x2b
 8000e94:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	8019      	strh	r1, [r3, #0]
 8000e9a:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8000e9e:	801d      	strh	r5, [r3, #0]
 8000ea0:	f04f 0055 	mov.w	r0, #85	; 0x55
 8000ea4:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ea6:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8000eaa:	8011      	strh	r1, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eac:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eae:	f04f 0311 	mov.w	r3, #17
 8000eb2:	4906      	ldr	r1, [pc, #24]	; (8000ecc <LCD_REG_Config+0x1e0>)
 8000eb4:	8013      	strh	r3, [r2, #0]
    for (; nCount != 0; nCount--);
 8000eb6:	3901      	subs	r1, #1
 8000eb8:	d1fd      	bne.n	8000eb6 <LCD_REG_Config+0x1ca>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eba:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ebe:	2229      	movs	r2, #41	; 0x29
 8000ec0:	801a      	strh	r2, [r3, #0]
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);

}
 8000ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec6:	bf00      	nop
 8000ec8:	60020000 	.word	0x60020000
 8000ecc:	0002bffc 	.word	0x0002bffc

08000ed0 <LCD_INIT>:
void LCD_INIT(void) {
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <LCD_INIT+0x54>)
 8000eda:	f002 f9ad 	bl	8003238 <HAL_GPIO_WritePin>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ede:	272a      	movs	r7, #42	; 0x2a
    LCD_Rst();
 8000ee0:	f7ff feee 	bl	8000cc0 <LCD_Rst>
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ee4:	26ef      	movs	r6, #239	; 0xef
    LCD_REG_Config();
 8000ee6:	f7ff ff01 	bl	8000cec <LCD_REG_Config>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eea:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eec:	2100      	movs	r1, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eee:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ef2:	2401      	movs	r4, #1
 8000ef4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ef8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000efc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <LCD_INIT+0x58>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f02:	8007      	strh	r7, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f04:	8011      	strh	r1, [r2, #0]
 8000f06:	8011      	strh	r1, [r2, #0]
 8000f08:	8011      	strh	r1, [r2, #0]
 8000f0a:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f0c:	8005      	strh	r5, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f0e:	8011      	strh	r1, [r2, #0]
 8000f10:	8011      	strh	r1, [r2, #0]
 8000f12:	8014      	strh	r4, [r2, #0]
 8000f14:	f8a2 e000 	strh.w	lr, [r2]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f18:	f8a0 c000 	strh.w	ip, [r0]
    uint32_t i = 0;

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);

    for (i = 0; i < usPoint; i++)
 8000f1c:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f1e:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8000f20:	d1fc      	bne.n	8000f1c <LCD_INIT+0x4c>
}
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	40011400 	.word	0x40011400
 8000f28:	60020000 	.word	0x60020000

08000f2c <LCD_OpenWindow>:
void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 8000f2c:	b530      	push	{r4, r5, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f2e:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 8000f32:	242a      	movs	r4, #42	; 0x2a
 8000f34:	252b      	movs	r5, #43	; 0x2b
 8000f36:	f8ae 4000 	strh.w	r4, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f3a:	4c11      	ldr	r4, [pc, #68]	; (8000f80 <LCD_OpenWindow+0x54>)
    LCD_Write_Data(usCOLUMN >> 8);
 8000f3c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f40:	f8a4 c000 	strh.w	ip, [r4]
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f44:	eb00 0c02 	add.w	ip, r0, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	4402      	add	r2, r0
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f4c:	f10c 3cff 	add.w	ip, ip, #4294967295
    LCD_Write_Data(usCOLUMN & 0xff);
 8000f50:	b2c0      	uxtb	r0, r0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f52:	8020      	strh	r0, [r4, #0]
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f54:	b2d2      	uxtb	r2, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f56:	f3cc 200f 	ubfx	r0, ip, #8, #16
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f5a:	8020      	strh	r0, [r4, #0]
 8000f5c:	8022      	strh	r2, [r4, #0]
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f5e:	18ca      	adds	r2, r1, r3
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f60:	3b01      	subs	r3, #1
 8000f62:	440b      	add	r3, r1
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f64:	3a01      	subs	r2, #1
    LCD_Write_Data(usPAGE >> 8);
 8000f66:	0a08      	lsrs	r0, r1, #8
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f68:	f3c2 220f 	ubfx	r2, r2, #8, #16
    LCD_Write_Data(usPAGE & 0xff);
 8000f6c:	b2c9      	uxtb	r1, r1
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f6e:	b2db      	uxtb	r3, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f70:	f8ae 5000 	strh.w	r5, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f74:	8020      	strh	r0, [r4, #0]
 8000f76:	8021      	strh	r1, [r4, #0]
 8000f78:	8022      	strh	r2, [r4, #0]
 8000f7a:	8023      	strh	r3, [r4, #0]
}
 8000f7c:	bd30      	pop	{r4, r5, pc}
 8000f7e:	bf00      	nop
 8000f80:	60020000 	.word	0x60020000

08000f84 <LCD_Clear>:
        LCD_Write_Data(usColor);

}


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	461e      	mov	r6, r3
 8000f88:	4614      	mov	r4, r2
 8000f8a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8000f8e:	f7ff ffcd 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f92:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f96:	212c      	movs	r1, #44	; 0x2c

    LCD_FillColor(usWidth * usHeight, usColor);
 8000f98:	fb06 f404 	mul.w	r4, r6, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f9c:	8019      	strh	r1, [r3, #0]
    for (i = 0; i < usPoint; i++)
 8000f9e:	b12c      	cbz	r4, 8000fac <LCD_Clear+0x28>
 8000fa0:	2300      	movs	r3, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa2:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <LCD_Clear+0x2c>)
    for (i = 0; i < usPoint; i++)
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	429c      	cmp	r4, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa8:	800d      	strh	r5, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8000faa:	d1fb      	bne.n	8000fa4 <LCD_Clear+0x20>

}
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	bf00      	nop
 8000fb0:	60020000 	.word	0x60020000

08000fb4 <LCD_InitHeatCoords>:
			if (result <= 1) LCD_DrawDot(col, pag, HueToRGB565(sqrt(pow(col-usC, 2) + pow(pag-usP, 2)) * colorCoef + usHueCenter));
		}
	}
}

void LCD_InitHeatCoords(struct YPinData *data) {
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	22f0      	movs	r2, #240	; 0xf0
 8000fb8:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < 8; i++)
		if (i < 4) {
			data[i].x = 30;
			data[i].y = 240 - i * 40;
		} else {
			data[i].x = 70;
 8000fba:	2546      	movs	r5, #70	; 0x46
			data[i].x = 30;
 8000fbc:	241e      	movs	r4, #30
 8000fbe:	f100 0c02 	add.w	ip, r0, #2
 8000fc2:	e009      	b.n	8000fd8 <LCD_InitHeatCoords+0x24>
 8000fc4:	f82c 4c02 	strh.w	r4, [ip, #-2]
			data[i].y = 240 - i * 40;
 8000fc8:	8042      	strh	r2, [r0, #2]
	for (uint8_t i = 0; i < 8; i++)
 8000fca:	3301      	adds	r3, #1
 8000fcc:	3a28      	subs	r2, #40	; 0x28
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3006      	adds	r0, #6
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	f10c 0c06 	add.w	ip, ip, #6
		if (i < 4) {
 8000fd8:	1e59      	subs	r1, r3, #1
 8000fda:	2903      	cmp	r1, #3
			data[i].y = 120 + (i - 4) * 40;
 8000fdc:	f1c2 0ec8 	rsb	lr, r2, #200	; 0xc8
		if (i < 4) {
 8000fe0:	d9f0      	bls.n	8000fc4 <LCD_InitHeatCoords+0x10>
	for (uint8_t i = 0; i < 8; i++)
 8000fe2:	2b08      	cmp	r3, #8
			data[i].x = 70;
 8000fe4:	f82c 5c02 	strh.w	r5, [ip, #-2]
			data[i].y = 120 + (i - 4) * 40;
 8000fe8:	f8a0 e002 	strh.w	lr, [r0, #2]
	for (uint8_t i = 0; i < 8; i++)
 8000fec:	d1ed      	bne.n	8000fca <LCD_InitHeatCoords+0x16>
		}
}
 8000fee:	bd30      	pop	{r4, r5, pc}

08000ff0 <LCD_SetPinColor>:
void LCD_SetPinColor(struct YPinData *data, uint16_t color) {
	data->color = color;
 8000ff0:	7101      	strb	r1, [r0, #4]
}
 8000ff2:	4770      	bx	lr

08000ff4 <LCD_PrintHeatMap>:
	return pow(data->x - x, 2) + pow(data->y - y, 2);
}

void LCD_PrintHeatMap(struct YPinData *data) {
	// Loop all pixels inside the rectangular heat map
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000ff4:	8a43      	ldrh	r3, [r0, #18]
void LCD_PrintHeatMap(struct YPinData *data) {
 8000ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000ffa:	3b14      	subs	r3, #20
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4619      	mov	r1, r3
void LCD_PrintHeatMap(struct YPinData *data) {
 8001000:	b089      	sub	sp, #36	; 0x24
 8001002:	4602      	mov	r2, r0
 8001004:	9001      	str	r0, [sp, #4]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001006:	8b00      	ldrh	r0, [r0, #24]
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	f100 0314 	add.w	r3, r0, #20
 800100e:	4299      	cmp	r1, r3
 8001010:	f300 808c 	bgt.w	800112c <LCD_PrintHeatMap+0x138>
 8001014:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	8a91      	ldrh	r1, [r2, #20]
 800101a:	f103 0214 	add.w	r2, r3, #20
 800101e:	3914      	subs	r1, #20
 8001020:	b289      	uxth	r1, r1
 8001022:	4291      	cmp	r1, r2
 8001024:	9100      	str	r1, [sp, #0]
 8001026:	dc77      	bgt.n	8001118 <LCD_PrintHeatMap+0x124>
			// Check if in safe circle and altered circle, -1 means not exist
			int8_t inSafeCircle = -1;
			int16_t distSqrInAlteredCircle[8] = {-1};
 8001028:	2500      	movs	r5, #0
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9c01      	ldr	r4, [sp, #4]
 8001030:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8001034:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001038:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800103c:	f10d 0a10 	add.w	sl, sp, #16
 8001040:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001044:	9403      	str	r4, [sp, #12]
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 8001046:	8820      	ldrh	r0, [r4, #0]

			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001048:	3406      	adds	r4, #6
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 800104a:	eba0 000b 	sub.w	r0, r0, fp
 800104e:	f7ff fa45 	bl	80004dc <__aeabi_i2d>
 8001052:	9b00      	ldr	r3, [sp, #0]
 8001054:	4680      	mov	r8, r0
 8001056:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 800105a:	4689      	mov	r9, r1
 800105c:	1ac0      	subs	r0, r0, r3
 800105e:	f7ff fa3d 	bl	80004dc <__aeabi_i2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	f7ff faa3 	bl	80005b0 <__aeabi_dmul>
 800106a:	4642      	mov	r2, r8
 800106c:	4606      	mov	r6, r0
 800106e:	460f      	mov	r7, r1
 8001070:	464b      	mov	r3, r9
 8001072:	4640      	mov	r0, r8
 8001074:	4649      	mov	r1, r9
 8001076:	f7ff fa9b 	bl	80005b0 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4630      	mov	r0, r6
 8001080:	4639      	mov	r1, r7
 8001082:	f7ff f8df 	bl	8000244 <__adddf3>
 8001086:	f7ff fd6b 	bl	8000b60 <__aeabi_d2uiz>
 800108a:	b280      	uxth	r0, r0
				uint16_t dist_sqr = LCD_DistSqr(&data[sensor], col, pag);
				if (dist_sqr <= 100) {
 800108c:	2864      	cmp	r0, #100	; 0x64
 800108e:	d950      	bls.n	8001132 <LCD_PrintHeatMap+0x13e>
					inSafeCircle = sensor;
					break;
				} else if (dist_sqr <= 900) {
 8001090:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001094:	f105 0501 	add.w	r5, r5, #1
					distSqrInAlteredCircle[sensor] = dist_sqr;
 8001098:	bf98      	it	ls
 800109a:	f8aa 0000 	strhls.w	r0, [sl]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800109e:	2d08      	cmp	r5, #8
 80010a0:	f10a 0a02 	add.w	sl, sl, #2
 80010a4:	d1cf      	bne.n	8001046 <LCD_PrintHeatMap+0x52>
 80010a6:	2200      	movs	r2, #0
 80010a8:	4610      	mov	r0, r2
 80010aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80010ae:	f10d 040e 	add.w	r4, sp, #14
 80010b2:	f10d 051e 	add.w	r5, sp, #30
			}

			uint16_t distSqrSum = 0;
			uint16_t weightedHue = 0;
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
				if (distSqrInAlteredCircle[sensor] != -1) {
 80010b6:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80010ba:	1c59      	adds	r1, r3, #1
 80010bc:	d007      	beq.n	80010ce <LCD_PrintHeatMap+0xda>
					uint8_t hue = (255 - data[sensor].color) * (distSqrInAlteredCircle[sensor] - 100) / 800 + data[sensor].color;
					distSqrSum += distSqrInAlteredCircle[sensor];
					weightedHue += distSqrInAlteredCircle[sensor] * data[sensor].color;
 80010be:	f89b 1004 	ldrb.w	r1, [fp, #4]
					distSqrSum += distSqrInAlteredCircle[sensor];
 80010c2:	b29b      	uxth	r3, r3
					weightedHue += distSqrInAlteredCircle[sensor] * data[sensor].color;
 80010c4:	fb01 2203 	mla	r2, r1, r3, r2
					distSqrSum += distSqrInAlteredCircle[sensor];
 80010c8:	4403      	add	r3, r0
 80010ca:	b298      	uxth	r0, r3
					weightedHue += distSqrInAlteredCircle[sensor] * data[sensor].color;
 80010cc:	b292      	uxth	r2, r2
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 80010ce:	42a5      	cmp	r5, r4
 80010d0:	f10b 0b06 	add.w	fp, fp, #6
 80010d4:	d1ef      	bne.n	80010b6 <LCD_PrintHeatMap+0xc2>
				}
			}

			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 80010d6:	fbb2 f0f0 	udiv	r0, r2, r0
 80010da:	b2c0      	uxtb	r0, r0
 80010dc:	f7ff fd60 	bl	8000ba0 <HueToRGB565>
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 80010e0:	9b02      	ldr	r3, [sp, #8]
			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 80010e2:	4604      	mov	r4, r0
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 80010e4:	2bef      	cmp	r3, #239	; 0xef
 80010e6:	d803      	bhi.n	80010f0 <LCD_PrintHeatMap+0xfc>
 80010e8:	9b00      	ldr	r3, [sp, #0]
 80010ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010ee:	d327      	bcc.n	8001140 <LCD_PrintHeatMap+0x14c>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80010f0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80010f4:	222c      	movs	r2, #44	; 0x2c
 80010f6:	801a      	strh	r2, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 80010f8:	9a00      	ldr	r2, [sp, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80010fa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 80010fe:	3201      	adds	r2, #1
 8001100:	b292      	uxth	r2, r2
 8001102:	4611      	mov	r1, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001104:	801c      	strh	r4, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800110c:	f103 0214 	add.w	r2, r3, #20
 8001110:	4291      	cmp	r1, r2
 8001112:	dd89      	ble.n	8001028 <LCD_PrintHeatMap+0x34>
 8001114:	9a01      	ldr	r2, [sp, #4]
 8001116:	8b10      	ldrh	r0, [r2, #24]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001118:	9a02      	ldr	r2, [sp, #8]
 800111a:	3201      	adds	r2, #1
 800111c:	b292      	uxth	r2, r2
 800111e:	4611      	mov	r1, r2
 8001120:	9202      	str	r2, [sp, #8]
 8001122:	f100 0214 	add.w	r2, r0, #20
 8001126:	4291      	cmp	r1, r2
 8001128:	f77f af75 	ble.w	8001016 <LCD_PrintHeatMap+0x22>
		}
	}
}
 800112c:	b009      	add	sp, #36	; 0x24
 800112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LCD_DrawDot(col, pag, HueToRGB565(data[inSafeCircle].color));
 8001132:	9b01      	ldr	r3, [sp, #4]
 8001134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001138:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800113c:	7928      	ldrb	r0, [r5, #4]
 800113e:	e7cd      	b.n	80010dc <LCD_PrintHeatMap+0xe8>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 8001140:	2301      	movs	r3, #1
 8001142:	9900      	ldr	r1, [sp, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	9802      	ldr	r0, [sp, #8]
 8001148:	f7ff fef0 	bl	8000f2c <LCD_OpenWindow>
 800114c:	e7d0      	b.n	80010f0 <LCD_PrintHeatMap+0xfc>
 800114e:	bf00      	nop

08001150 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	4616      	mov	r6, r2
 8001154:	461c      	mov	r4, r3
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 8001156:	2208      	movs	r2, #8
 8001158:	2310      	movs	r3, #16
                        uint16_t usColor_Foreground) {
 800115a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 800115e:	f7ff fee5 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001162:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001166:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <LCD_DrawChar_Color+0x58>)
    ucRelativePositon = cChar - ' ';
 800116c:	f1a6 0220 	sub.w	r2, r6, #32
 8001170:	f103 0c10 	add.w	ip, r3, #16
 8001174:	b2d2      	uxtb	r2, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <LCD_DrawChar_Color+0x5c>)
 8001178:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800117c:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001180:	f8a1 e000 	strh.w	lr, [r1]

    LCD_Write_Cmd(CMD_SetPixel);

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8001184:	2208      	movs	r2, #8
 8001186:	f813 1b01 	ldrb.w	r1, [r3], #1

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
            if (ucTemp & 0x01)
 800118a:	07ce      	lsls	r6, r1, #31
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800118c:	f102 32ff 	add.w	r2, r2, #4294967295
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001190:	bf4c      	ite	mi
 8001192:	8005      	strhmi	r5, [r0, #0]
 8001194:	8004      	strhpl	r4, [r0, #0]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001196:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                LCD_Write_Data(usColor_Foreground);

            else
                LCD_Write_Data(usColor_Background);

            ucTemp >>= 1;
 800119a:	ea4f 0151 	mov.w	r1, r1, lsr #1
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800119e:	d1f4      	bne.n	800118a <LCD_DrawChar_Color+0x3a>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 80011a0:	4563      	cmp	r3, ip
 80011a2:	d1ef      	bne.n	8001184 <LCD_DrawChar_Color+0x34>

        }

    }

}
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	bf00      	nop
 80011a8:	08007400 	.word	0x08007400
 80011ac:	60020000 	.word	0x60020000

080011b0 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4605      	mov	r5, r0
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 80011b4:	380a      	subs	r0, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80011b6:	2301      	movs	r3, #1
 80011b8:	2214      	movs	r2, #20
 80011ba:	b280      	uxth	r0, r0
void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 80011bc:	460c      	mov	r4, r1
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80011be:	f7ff feb5 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011c2:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80011c6:	202c      	movs	r0, #44	; 0x2c
 80011c8:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011ca:	f04f 3cff 	mov.w	ip, #4294967295
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011d0:	8008      	strh	r0, [r1, #0]
    for (i = 0; i < usPoint; i++)
 80011d2:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011d4:	f8a2 c000 	strh.w	ip, [r2]
    for (i = 0; i < usPoint; i++)
 80011d8:	d1fb      	bne.n	80011d2 <LCD_DrawCross+0x22>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 80011da:	f1a4 010a 	sub.w	r1, r4, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80011de:	2314      	movs	r3, #20
 80011e0:	2201      	movs	r2, #1
 80011e2:	4628      	mov	r0, r5
 80011e4:	b289      	uxth	r1, r1
 80011e6:	f7ff fea1 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011ea:	242c      	movs	r4, #44	; 0x2c
 80011ec:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80011f0:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011f2:	f04f 31ff 	mov.w	r1, #4294967295
 80011f6:	4a03      	ldr	r2, [pc, #12]	; (8001204 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011f8:	8004      	strh	r4, [r0, #0]
    for (i = 0; i < usPoint; i++)
 80011fa:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011fc:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 80011fe:	d1fc      	bne.n	80011fa <LCD_DrawCross+0x4a>

}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
 8001202:	bf00      	nop
 8001204:	60020000 	.word	0x60020000

08001208 <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 8001208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800120c:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 800120e:	7812      	ldrb	r2, [r2, #0]
                          uint16_t usColor_Foreground) {
 8001210:	b082      	sub	sp, #8
 8001212:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    while (*pStr != '\0') {
 8001216:	b1da      	cbz	r2, 8001250 <LCD_DrawString_Color+0x48>
 8001218:	4605      	mov	r5, r0
 800121a:	460c      	mov	r4, r1
 800121c:	4698      	mov	r8, r3
 800121e:	e00b      	b.n	8001238 <LCD_DrawString_Color+0x30>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001220:	f105 0308 	add.w	r3, r5, #8
 8001224:	4628      	mov	r0, r5
 8001226:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 8001228:	4643      	mov	r3, r8
 800122a:	4621      	mov	r1, r4
 800122c:	9700      	str	r7, [sp, #0]
 800122e:	f7ff ff8f 	bl	8001150 <LCD_DrawChar_Color>
    while (*pStr != '\0') {
 8001232:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001236:	b15a      	cbz	r2, 8001250 <LCD_DrawString_Color+0x48>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001238:	2de8      	cmp	r5, #232	; 0xe8
 800123a:	d902      	bls.n	8001242 <LCD_DrawString_Color+0x3a>
            usC = LCD_DispWindow_Start_COLUMN;
 800123c:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 800123e:	3410      	adds	r4, #16
 8001240:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001242:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 8001246:	d9eb      	bls.n	8001220 <LCD_DrawString_Color+0x18>
            usP = LCD_DispWindow_Start_PAGE;
 8001248:	2400      	movs	r4, #0
 800124a:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 800124c:	4620      	mov	r0, r4
 800124e:	e7eb      	b.n	8001228 <LCD_DrawString_Color+0x20>

    }

}
 8001250:	b002      	add	sp, #8
 8001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001256:	bf00      	nop

08001258 <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 8001258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800125c:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 800125e:	7812      	ldrb	r2, [r2, #0]
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 8001260:	b083      	sub	sp, #12
 8001262:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8001266:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    while (*pStr != '\0') {
 800126a:	b1fa      	cbz	r2, 80012ac <LCD_DrawString_Color_With_Delay+0x54>
 800126c:	4605      	mov	r5, r0
 800126e:	460c      	mov	r4, r1
 8001270:	461f      	mov	r7, r3
 8001272:	e00f      	b.n	8001294 <LCD_DrawString_Color_With_Delay+0x3c>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001274:	f105 0308 	add.w	r3, r5, #8
 8001278:	4628      	mov	r0, r5
 800127a:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 800127c:	463b      	mov	r3, r7
 800127e:	4621      	mov	r1, r4
 8001280:	f8cd 9000 	str.w	r9, [sp]
 8001284:	f7ff ff64 	bl	8001150 <LCD_DrawChar_Color>
        HAL_Delay(delayEachChar);
 8001288:	4640      	mov	r0, r8
 800128a:	f001 fad3 	bl	8002834 <HAL_Delay>
    while (*pStr != '\0') {
 800128e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001292:	b15a      	cbz	r2, 80012ac <LCD_DrawString_Color_With_Delay+0x54>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001294:	2de8      	cmp	r5, #232	; 0xe8
 8001296:	d902      	bls.n	800129e <LCD_DrawString_Color_With_Delay+0x46>
            usC = LCD_DispWindow_Start_COLUMN;
 8001298:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 800129a:	3410      	adds	r4, #16
 800129c:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 800129e:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 80012a2:	d9e7      	bls.n	8001274 <LCD_DrawString_Color_With_Delay+0x1c>
            usP = LCD_DispWindow_Start_PAGE;
 80012a4:	2400      	movs	r4, #0
 80012a6:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 80012a8:	4620      	mov	r0, r4
 80012aa:	e7e7      	b.n	800127c <LCD_DrawString_Color_With_Delay+0x24>
    }

}
 80012ac:	b003      	add	sp, #12
 80012ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b2:	bf00      	nop

080012b4 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
    switch (ucOption) {
 80012b4:	3801      	subs	r0, #1
void LCD_GramScan(uint8_t ucOption) {
 80012b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (ucOption) {
 80012b8:	2803      	cmp	r0, #3
 80012ba:	d81e      	bhi.n	80012fa <LCD_GramScan+0x46>
 80012bc:	e8df f000 	tbb	[pc, r0]
 80012c0:	2202424a 	.word	0x2202424a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012c4:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012c6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80012ca:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012ce:	f04f 0c28 	mov.w	ip, #40	; 0x28
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012d2:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012d4:	2601      	movs	r6, #1
 80012d6:	253f      	movs	r5, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012d8:	242b      	movs	r4, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012da:	20ef      	movs	r0, #239	; 0xef
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012de:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012e2:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012e6:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012e8:	801a      	strh	r2, [r3, #0]
 80012ea:	801a      	strh	r2, [r3, #0]
 80012ec:	801e      	strh	r6, [r3, #0]
 80012ee:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012f0:	800c      	strh	r4, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	801a      	strh	r2, [r3, #0]
 80012f6:	801a      	strh	r2, [r3, #0]
 80012f8:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012fe:	222c      	movs	r2, #44	; 0x2c
 8001300:	801a      	strh	r2, [r3, #0]

    /* write gram start */
    LCD_Write_Cmd(0x2C);


}
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001304:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001306:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800130a:	2736      	movs	r7, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800130c:	2648      	movs	r6, #72	; 0x48
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800130e:	252a      	movs	r5, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001310:	24ef      	movs	r4, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001312:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001316:	f04f 0c01 	mov.w	ip, #1
 800131a:	203f      	movs	r0, #63	; 0x3f
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800131e:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001320:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001322:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001324:	801a      	strh	r2, [r3, #0]
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	801a      	strh	r2, [r3, #0]
 800132a:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800132c:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001338:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800133a:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800133c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001340:	801a      	strh	r2, [r3, #0]
}
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001344:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001346:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800134a:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800134e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001352:	e7be      	b.n	80012d2 <LCD_GramScan+0x1e>
 8001354:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001356:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800135a:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800135e:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001362:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001364:	26ef      	movs	r6, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001366:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001368:	2401      	movs	r4, #1
 800136a:	203f      	movs	r0, #63	; 0x3f
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800136e:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001372:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001376:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001378:	801a      	strh	r2, [r3, #0]
 800137a:	801a      	strh	r2, [r3, #0]
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001380:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	801a      	strh	r2, [r3, #0]
 8001386:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001388:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800138a:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800138c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001390:	801a      	strh	r2, [r3, #0]
}
 8001392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001394:	60020000 	.word	0x60020000

08001398 <mainPage.part.0>:

	for (uint8_t i = 0; i < 8; i++)
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
}

void mainPage(void) {
 8001398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (changingPage) {
        changingPage = 0;
 800139c:	2400      	movs	r4, #0
 800139e:	4828      	ldr	r0, [pc, #160]	; (8001440 <mainPage.part.0+0xa8>)
        currentPage = home;
 80013a0:	4928      	ldr	r1, [pc, #160]	; (8001444 <mainPage.part.0+0xac>)
void mainPage(void) {
 80013a2:	b082      	sub	sp, #8
        LCD_Clear(0, 0, 240, 320, BLACK);
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
        changingPage = 0;
 80013aa:	6004      	str	r4, [r0, #0]
        currentPage = home;
 80013ac:	700c      	strb	r4, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80013ae:	4620      	mov	r0, r4
 80013b0:	4621      	mov	r1, r4
 80013b2:	22f0      	movs	r2, #240	; 0xf0
 80013b4:	f7ff fde6 	bl	8000f84 <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80013b8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80013bc:	230a      	movs	r3, #10
        HAL_Delay(100);
        output_text = "Please choose an option below.";
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
        HAL_Delay(200);
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 80013be:	f647 77ff 	movw	r7, #32767	; 0x7fff
        output_text = "WEIGHT";
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 80013c2:	250f      	movs	r5, #15
        HAL_Delay(200);
        output_text = "ACCEL.";
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 80013c4:	f64f 76e0 	movw	r6, #65504	; 0xffe0
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80013c8:	2128      	movs	r1, #40	; 0x28
 80013ca:	4620      	mov	r0, r4
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <mainPage.part.0+0xb0>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	f8cd 8000 	str.w	r8, [sp]
 80013d4:	231f      	movs	r3, #31
 80013d6:	f7ff ff3f 	bl	8001258 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	f001 fa2a 	bl	8002834 <HAL_Delay>
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 80013e0:	4623      	mov	r3, r4
 80013e2:	2164      	movs	r1, #100	; 0x64
 80013e4:	4620      	mov	r0, r4
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <mainPage.part.0+0xb4>)
 80013e8:	f8cd 8000 	str.w	r8, [sp]
 80013ec:	f7ff ff0c 	bl	8001208 <LCD_DrawString_Color>
        HAL_Delay(200);
 80013f0:	20c8      	movs	r0, #200	; 0xc8
 80013f2:	f001 fa1f 	bl	8002834 <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 80013f6:	2328      	movs	r3, #40	; 0x28
 80013f8:	2250      	movs	r2, #80	; 0x50
 80013fa:	21e6      	movs	r1, #230	; 0xe6
 80013fc:	2014      	movs	r0, #20
 80013fe:	9700      	str	r7, [sp, #0]
 8001400:	f7ff fdc0 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001404:	463b      	mov	r3, r7
 8001406:	21f2      	movs	r1, #242	; 0xf2
 8001408:	4a11      	ldr	r2, [pc, #68]	; (8001450 <mainPage.part.0+0xb8>)
 800140a:	2023      	movs	r0, #35	; 0x23
 800140c:	e9cd 4500 	strd	r4, r5, [sp]
 8001410:	f7ff ff22 	bl	8001258 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 8001414:	20c8      	movs	r0, #200	; 0xc8
 8001416:	f001 fa0d 	bl	8002834 <HAL_Delay>
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 800141a:	2328      	movs	r3, #40	; 0x28
 800141c:	2250      	movs	r2, #80	; 0x50
 800141e:	21e6      	movs	r1, #230	; 0xe6
 8001420:	2082      	movs	r0, #130	; 0x82
 8001422:	9600      	str	r6, [sp, #0]
 8001424:	f7ff fdae 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 8001428:	4633      	mov	r3, r6
 800142a:	21f2      	movs	r1, #242	; 0xf2
 800142c:	2096      	movs	r0, #150	; 0x96
 800142e:	e9cd 4500 	strd	r4, r5, [sp]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <mainPage.part.0+0xbc>)
 8001434:	f7ff ff10 	bl	8001258 <LCD_DrawString_Color_With_Delay>
    }
}
 8001438:	b002      	add	sp, #8
 800143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000
 8001444:	2000022c 	.word	0x2000022c
 8001448:	080079f0 	.word	0x080079f0
 800144c:	08007a18 	.word	0x08007a18
 8001450:	08007a38 	.word	0x08007a38
 8001454:	08007a40 	.word	0x08007a40

08001458 <Check_touchkey>:
void Check_touchkey() {
 8001458:	b500      	push	{lr}
 800145a:	b083      	sub	sp, #12
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 800145c:	491b      	ldr	r1, [pc, #108]	; (80014cc <Check_touchkey+0x74>)
 800145e:	a801      	add	r0, sp, #4
 8001460:	f001 f924 	bl	80026ac <XPT2046_Get_TouchedPoint>
 8001464:	b190      	cbz	r0, 800148c <Check_touchkey+0x34>
        if (currentPage == home) {
 8001466:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <Check_touchkey+0x78>)
 8001468:	7813      	ldrb	r3, [r2, #0]
 800146a:	b993      	cbnz	r3, 8001492 <Check_touchkey+0x3a>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 800146c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001470:	3bd3      	subs	r3, #211	; 0xd3
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b26      	cmp	r3, #38	; 0x26
 8001476:	d809      	bhi.n	800148c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 8001478:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800147c:	f1a3 0115 	sub.w	r1, r3, #21
 8001480:	294e      	cmp	r1, #78	; 0x4e
 8001482:	d819      	bhi.n	80014b8 <Check_touchkey+0x60>
                    currentPage = weight;
 8001484:	2301      	movs	r3, #1
                    changingPage = 1;
 8001486:	4913      	ldr	r1, [pc, #76]	; (80014d4 <Check_touchkey+0x7c>)
                    currentPage = weight;
 8001488:	7013      	strb	r3, [r2, #0]
                    changingPage = 1;
 800148a:	600b      	str	r3, [r1, #0]
}
 800148c:	b003      	add	sp, #12
 800148e:	f85d fb04 	ldr.w	pc, [sp], #4
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001492:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800149a:	b29b      	uxth	r3, r3
 800149c:	2b18      	cmp	r3, #24
 800149e:	d8f5      	bhi.n	800148c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 80014a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80014a4:	3b15      	subs	r3, #21
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	d8ef      	bhi.n	800148c <Check_touchkey+0x34>
                    currentPage = home;
 80014ac:	2000      	movs	r0, #0
                    changingPage = 1;
 80014ae:	2101      	movs	r1, #1
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <Check_touchkey+0x7c>)
                    currentPage = home;
 80014b2:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 80014b4:	6019      	str	r1, [r3, #0]
}
 80014b6:	e7e9      	b.n	800148c <Check_touchkey+0x34>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 80014b8:	3b83      	subs	r3, #131	; 0x83
 80014ba:	2b4e      	cmp	r3, #78	; 0x4e
 80014bc:	d8e6      	bhi.n	800148c <Check_touchkey+0x34>
                    currentPage = accelerometer;
 80014be:	2002      	movs	r0, #2
                    changingPage = 1;
 80014c0:	2101      	movs	r1, #1
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <Check_touchkey+0x7c>)
                    currentPage = accelerometer;
 80014c4:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 80014c6:	6019      	str	r1, [r3, #0]
 80014c8:	e7e0      	b.n	800148c <Check_touchkey+0x34>
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000022c 	.word	0x2000022c
 80014d4:	20000000 	.word	0x20000000

080014d8 <getY>:
void getY(uint8_t index, uint8_t delay) {
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4604      	mov	r4, r0
 80014dc:	460d      	mov	r5, r1
    if ((index & 0x01) == 0) {
 80014de:	f010 0201 	ands.w	r2, r0, #1
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80014e2:	bf18      	it	ne
 80014e4:	2201      	movne	r2, #1
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <getY+0x48>)
 80014ec:	f001 fea4 	bl	8003238 <HAL_GPIO_WritePin>
    if ((index & 0x02) == 0) {
 80014f0:	f014 0202 	ands.w	r2, r4, #2
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80014f4:	bf18      	it	ne
 80014f6:	2201      	movne	r2, #1
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <getY+0x48>)
 80014fe:	f001 fe9b 	bl	8003238 <HAL_GPIO_WritePin>
    if ((index & 0x04) == 0) {
 8001502:	f014 0204 	ands.w	r2, r4, #4
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <getY+0x48>)
 8001508:	bf18      	it	ne
 800150a:	2201      	movne	r2, #1
 800150c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001510:	f001 fe92 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001514:	4628      	mov	r0, r5
}
 8001516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(delay);
 800151a:	f001 b98b 	b.w	8002834 <HAL_Delay>
 800151e:	bf00      	nop
 8001520:	40011000 	.word	0x40011000

08001524 <initWeightSensors>:
void initWeightSensors(struct YPin *pins) {
 8001524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pins[2].weightAtSampledWeight = 300;
 8001528:	f44f 7396 	mov.w	r3, #300	; 0x12c
void initWeightSensors(struct YPin *pins) {
 800152c:	4604      	mov	r4, r0
	pins[0].weightAtSampledWeight = 270;
 800152e:	f44f 7087 	mov.w	r0, #270	; 0x10e
	pins[4].voltageAtZeroWeight = 1000;
 8001532:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80015bc <initWeightSensors+0x98>
	pins[0].voltageAtZeroWeight = 1200;
 8001536:	4922      	ldr	r1, [pc, #136]	; (80015c0 <initWeightSensors+0x9c>)
	pins[1].voltageAtZeroWeight = 1300;
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <initWeightSensors+0xa0>)
	pins[2].voltageAtZeroWeight = 1800;
 800153a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80015c8 <initWeightSensors+0xa4>
	pins[3].voltageAtZeroWeight = 2800;
 800153e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80015cc <initWeightSensors+0xa8>
	pins[5].voltageAtZeroWeight = 1800;
 8001542:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80015d0 <initWeightSensors+0xac>
	pins[6].voltageAtZeroWeight = 1800;
 8001546:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80015d4 <initWeightSensors+0xb0>
	pins[7].voltageAtZeroWeight = 1000;
 800154a:	4e23      	ldr	r6, [pc, #140]	; (80015d8 <initWeightSensors+0xb4>)
	pins[4].voltageAtZeroWeight = 1000;
 800154c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	pins[7].weightAtSampledWeight = 300;
 8001550:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 8001554:	f240 57dc 	movw	r7, #1500	; 0x5dc
	pins[2].voltageAtZeroWeight = 1800;
 8001558:	f8c4 a020 	str.w	sl, [r4, #32]
	pins[3].voltageAtZeroWeight = 2800;
 800155c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	pins[5].voltageAtZeroWeight = 1800;
 8001560:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
	pins[6].voltageAtZeroWeight = 1800;
 8001564:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
	pins[7].voltageAtZeroWeight = 1000;
 8001568:	6726      	str	r6, [r4, #112]	; 0x70
	pins[0].voltageAtZeroWeight = 1200;
 800156a:	6021      	str	r1, [r4, #0]
	pins[1].voltageAtZeroWeight = 1300;
 800156c:	6122      	str	r2, [r4, #16]
	pins[0].weightAtSampledWeight = 270;
 800156e:	80a0      	strh	r0, [r4, #4]
	pins[1].weightAtSampledWeight = 270;
 8001570:	82a0      	strh	r0, [r4, #20]
	pins[2].weightAtSampledWeight = 300;
 8001572:	84a3      	strh	r3, [r4, #36]	; 0x24
	pins[3].weightAtSampledWeight = 300;
 8001574:	86a3      	strh	r3, [r4, #52]	; 0x34
	pins[4].weightAtSampledWeight = 300;
 8001576:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	pins[5].weightAtSampledWeight = 300;
 800157a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	pins[6].weightAtSampledWeight = 300;
 800157e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	pins[7].weightAtSampledWeight = 300;
 8001582:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	for (uint8_t i = 0; i < 8; i++)
 8001586:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800158a:	e003      	b.n	8001594 <initWeightSensors+0x70>
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 800158c:	8aa0      	ldrh	r0, [r4, #20]
 800158e:	8a67      	ldrh	r7, [r4, #18]
 8001590:	f834 5f10 	ldrh.w	r5, [r4, #16]!
 8001594:	f7fe ffa2 	bl	80004dc <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	1b78      	subs	r0, r7, r5
 800159c:	4616      	mov	r6, r2
 800159e:	460f      	mov	r7, r1
 80015a0:	f7fe ff9c 	bl	80004dc <__aeabi_i2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4630      	mov	r0, r6
 80015aa:	4639      	mov	r1, r7
 80015ac:	f7ff f92a 	bl	8000804 <__aeabi_ddiv>
	for (uint8_t i = 0; i < 8; i++)
 80015b0:	45a0      	cmp	r8, r4
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 80015b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (uint8_t i = 0; i < 8; i++)
 80015b6:	d1e9      	bne.n	800158c <initWeightSensors+0x68>
}
 80015b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015bc:	070803e8 	.word	0x070803e8
 80015c0:	05dc04b0 	.word	0x05dc04b0
 80015c4:	05dc0514 	.word	0x05dc0514
 80015c8:	0a280708 	.word	0x0a280708
 80015cc:	0c800af0 	.word	0x0c800af0
 80015d0:	07d00708 	.word	0x07d00708
 80015d4:	08340708 	.word	0x08340708
 80015d8:	53fc03e8 	.word	0x53fc03e8

080015dc <weightPage>:
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
    HAL_Delay(30);
}

void weightPage(void) {
 80015dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 80015e0:	495f      	ldr	r1, [pc, #380]	; (8001760 <weightPage+0x184>)
void weightPage(void) {
 80015e2:	b08b      	sub	sp, #44	; 0x2c
    if (changingPage) {
 80015e4:	680b      	ldr	r3, [r1, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d168      	bne.n	80016bc <weightPage+0xe0>
 80015ea:	f10d 0918 	add.w	r9, sp, #24
 80015ee:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(30);
 80015f2:	2500      	movs	r5, #0
 80015f4:	462f      	mov	r7, r5
 80015f6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001764 <weightPage+0x188>
 80015fa:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8001768 <weightPage+0x18c>
        }
    }

    uint16_t sum = 0;
    for (uint8_t counter = 0; counter < 8; counter++) {
        getY(counter, 20);
 80015fe:	2114      	movs	r1, #20
 8001600:	b2e8      	uxtb	r0, r5
 8001602:	f7ff ff69 	bl	80014d8 <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001606:	4859      	ldr	r0, [pc, #356]	; (800176c <weightPage+0x190>)
 8001608:	f001 f9d8 	bl	80029bc <HAL_ADC_GetValue>
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 800160c:	f8b8 3000 	ldrh.w	r3, [r8]
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001610:	4604      	mov	r4, r0
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001612:	f108 0810 	add.w	r8, r8, #16
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001616:	1ac0      	subs	r0, r0, r3
 8001618:	f7fe ff50 	bl	80004bc <__aeabi_ui2d>
 800161c:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 8001620:	f7fe ffc6 	bl	80005b0 <__aeabi_dmul>
 8001624:	f7ff fa74 	bl	8000b10 <__aeabi_d2iz>
 8001628:	4603      	mov	r3, r0
//        if (counter < 4)
//        	LCD_DrawHeatCircle(30, 240 - counter * 40, 30, 85 - val * 85 / 4096, 85);
//		else
//			LCD_DrawHeatCircle(70, 120 + (counter - 4) * 40, 30, 85 - val * 85 / 4096, 85);

        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 800162a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800162e:	eb01 1101 	add.w	r1, r1, r1, lsl #4

        char dec[10] = "";
 8001632:	2600      	movs	r6, #0
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001634:	0b09      	lsrs	r1, r1, #12
 8001636:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 800163a:	b21b      	sxth	r3, r3
        if (weightPin < 0) weightPin = 0;
 800163c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001640:	4650      	mov	r0, sl
 8001642:	b289      	uxth	r1, r1
        sum += weightPin;
 8001644:	441f      	add	r7, r3
 8001646:	9303      	str	r3, [sp, #12]
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001648:	f7ff fcd2 	bl	8000ff0 <LCD_SetPinColor>
        sprintf(dec, "%4d %5d", val, weightPin);
 800164c:	4622      	mov	r2, r4
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 800164e:	f64f 74ff 	movw	r4, #65535	; 0xffff
        sprintf(dec, "%4d %5d", val, weightPin);
 8001652:	9b03      	ldr	r3, [sp, #12]
 8001654:	4946      	ldr	r1, [pc, #280]	; (8001770 <weightPage+0x194>)
 8001656:	4658      	mov	r0, fp
        char dec[10] = "";
 8001658:	9605      	str	r6, [sp, #20]
 800165a:	f8c9 6000 	str.w	r6, [r9]
 800165e:	f8a9 6004 	strh.w	r6, [r9, #4]
        sprintf(dec, "%4d %5d", val, weightPin);
 8001662:	f003 fd3b 	bl	80050dc <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001666:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	3164      	adds	r1, #100	; 0x64
 800166e:	4633      	mov	r3, r6
 8001670:	465a      	mov	r2, fp
 8001672:	208c      	movs	r0, #140	; 0x8c
 8001674:	b289      	uxth	r1, r1
 8001676:	9400      	str	r4, [sp, #0]
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001678:	3501      	adds	r5, #1
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 800167a:	f7ff fdc5 	bl	8001208 <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 800167e:	2d08      	cmp	r5, #8
 8001680:	f10a 0a06 	add.w	sl, sl, #6
        sum += weightPin;
 8001684:	b2bf      	uxth	r7, r7
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001686:	d1ba      	bne.n	80015fe <weightPage+0x22>
    }
	LCD_PrintHeatMap(weightSensorsData);
 8001688:	4837      	ldr	r0, [pc, #220]	; (8001768 <weightPage+0x18c>)
 800168a:	f7ff fcb3 	bl	8000ff4 <LCD_PrintHeatMap>

    char output_gram[20] = "";
    sprintf(output_gram, "%6d Gram", sum);
 800168e:	463a      	mov	r2, r7
 8001690:	4658      	mov	r0, fp
 8001692:	4938      	ldr	r1, [pc, #224]	; (8001774 <weightPage+0x198>)
    char output_gram[20] = "";
 8001694:	9605      	str	r6, [sp, #20]
 8001696:	e9c9 6600 	strd	r6, r6, [r9]
 800169a:	e9c9 6602 	strd	r6, r6, [r9, #8]
    sprintf(output_gram, "%6d Gram", sum);
 800169e:	f003 fd1d 	bl	80050dc <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, WHITE);
 80016a2:	231f      	movs	r3, #31
 80016a4:	465a      	mov	r2, fp
 80016a6:	2150      	movs	r1, #80	; 0x50
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	9400      	str	r4, [sp, #0]
 80016ac:	f7ff fdac 	bl	8001208 <LCD_DrawString_Color>

    HAL_Delay(20);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f001 f8bf 	bl	8002834 <HAL_Delay>
}
 80016b6:	b00b      	add	sp, #44	; 0x2c
 80016b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        changingPage = 0;
 80016bc:	f04f 0800 	mov.w	r8, #0
        currentPage = weight;
 80016c0:	2501      	movs	r5, #1
 80016c2:	482d      	ldr	r0, [pc, #180]	; (8001778 <weightPage+0x19c>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 80016c4:	f8cd 8000 	str.w	r8, [sp]
 80016c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
        currentPage = weight;
 80016cc:	7005      	strb	r5, [r0, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80016ce:	22f0      	movs	r2, #240	; 0xf0
 80016d0:	4640      	mov	r0, r8
        changingPage = 0;
 80016d2:	f8c1 8000 	str.w	r8, [r1]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80016d6:	4641      	mov	r1, r8
 80016d8:	f7ff fc54 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80016dc:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80016e0:	230a      	movs	r3, #10
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 80016e2:	f647 7aff 	movw	sl, #32767	; 0x7fff
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80016e6:	2128      	movs	r1, #40	; 0x28
 80016e8:	4640      	mov	r0, r8
 80016ea:	e9cd 6300 	strd	r6, r3, [sp]
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <weightPage+0x1a0>)
 80016f0:	231f      	movs	r3, #31
 80016f2:	f7ff fdb1 	bl	8001258 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 80016f6:	2319      	movs	r3, #25
 80016f8:	2282      	movs	r2, #130	; 0x82
 80016fa:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016fe:	2014      	movs	r0, #20
 8001700:	f8cd a000 	str.w	sl, [sp]
 8001704:	f7ff fc3e 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001708:	230a      	movs	r3, #10
 800170a:	201e      	movs	r0, #30
 800170c:	e9cd 8300 	strd	r8, r3, [sp]
 8001710:	f240 111d 	movw	r1, #285	; 0x11d
 8001714:	4653      	mov	r3, sl
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <weightPage+0x1a4>)
 8001718:	f7ff fd9e 	bl	8001258 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(30);
 800171c:	201e      	movs	r0, #30
 800171e:	2464      	movs	r4, #100	; 0x64
 8001720:	4645      	mov	r5, r8
            sprintf(temp, "Y%d: ", i);
 8001722:	4f18      	ldr	r7, [pc, #96]	; (8001784 <weightPage+0x1a8>)
 8001724:	f10d 0918 	add.w	r9, sp, #24
 8001728:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(30);
 800172c:	f001 f882 	bl	8002834 <HAL_Delay>
            sprintf(temp, "Y%d: ", i);
 8001730:	462a      	mov	r2, r5
 8001732:	4639      	mov	r1, r7
 8001734:	4658      	mov	r0, fp
            char temp[10] = "";
 8001736:	f8cd 8014 	str.w	r8, [sp, #20]
        for (uint8_t i = 0; i < 8; i++) {
 800173a:	3501      	adds	r5, #1
            char temp[10] = "";
 800173c:	f8c9 8000 	str.w	r8, [r9]
 8001740:	f8a9 8004 	strh.w	r8, [r9, #4]
            sprintf(temp, "Y%d: ", i);
 8001744:	f003 fcca 	bl	80050dc <siprintf>
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 8001748:	4621      	mov	r1, r4
 800174a:	2300      	movs	r3, #0
 800174c:	465a      	mov	r2, fp
 800174e:	206e      	movs	r0, #110	; 0x6e
 8001750:	9600      	str	r6, [sp, #0]
 8001752:	f7ff fd59 	bl	8001208 <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 8001756:	3412      	adds	r4, #18
 8001758:	2d08      	cmp	r5, #8
 800175a:	b2a4      	uxth	r4, r4
 800175c:	d1e8      	bne.n	8001730 <weightPage+0x154>
 800175e:	e748      	b.n	80015f2 <weightPage+0x16>
 8001760:	20000000 	.word	0x20000000
 8001764:	20000308 	.word	0x20000308
 8001768:	20000388 	.word	0x20000388
 800176c:	20000230 	.word	0x20000230
 8001770:	08007a80 	.word	0x08007a80
 8001774:	08007a88 	.word	0x08007a88
 8001778:	2000022c 	.word	0x2000022c
 800177c:	08007a58 	.word	0x08007a58
 8001780:	08007a48 	.word	0x08007a48
 8001784:	08007a78 	.word	0x08007a78

08001788 <accelerometerPage>:

void accelerometerPage() {
 8001788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 800178c:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8001ac8 <accelerometerPage+0x340>
void accelerometerPage() {
 8001790:	b093      	sub	sp, #76	; 0x4c
    if (changingPage) {
 8001792:	f8d8 3000 	ldr.w	r3, [r8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8085 	bne.w	80018a6 <accelerometerPage+0x11e>
 800179c:	4bcb      	ldr	r3, [pc, #812]	; (8001acc <accelerometerPage+0x344>)
 800179e:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8001ad0 <accelerometerPage+0x348>
 80017a2:	9305      	str	r3, [sp, #20]
 80017a4:	4bcb      	ldr	r3, [pc, #812]	; (8001ad4 <accelerometerPage+0x34c>)
 80017a6:	ad09      	add	r5, sp, #36	; 0x24
 80017a8:	9306      	str	r3, [sp, #24]
 80017aa:	ab0f      	add	r3, sp, #60	; 0x3c
 80017ac:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80017b0:	9307      	str	r3, [sp, #28]
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
        }
        /* DEBUG MESSAGE ABOVE */
    }
    // 0x3A for writing address, 0x3B for reading address
    uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80017b2:	2006      	movs	r0, #6
 80017b4:	f002 ff36 	bl	8004624 <malloc>
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80017b8:	f04f 0b64 	mov.w	fp, #100	; 0x64
    uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80017bc:	4607      	mov	r7, r0
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80017be:	2306      	movs	r3, #6
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 80017c0:	2400      	movs	r4, #0
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80017c2:	2232      	movs	r2, #50	; 0x32
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	9700      	str	r7, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	213a      	movs	r1, #58	; 0x3a
 80017cc:	f8cd b008 	str.w	fp, [sp, #8]
 80017d0:	48c1      	ldr	r0, [pc, #772]	; (8001ad8 <accelerometerPage+0x350>)
 80017d2:	f002 f8cf 	bl	8003974 <HAL_I2C_Mem_Read>
    double finalizedX = 0.0, finalizedY = 0.0, finalizedZ = 0.0;
    // All axes have a scale factor of 7.8
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 80017d6:	f9b9 3000 	ldrsh.w	r3, [r9]
 80017da:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 80017de:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 80017e2:	1ac0      	subs	r0, r0, r3
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 80017e4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80017e8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80017ec:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 80017f0:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
 80017f4:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 80017f8:	f7fe fe70 	bl	80004dc <__aeabi_i2d>
 80017fc:	a3b0      	add	r3, pc, #704	; (adr r3, 8001ac0 <accelerometerPage+0x338>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fed5 	bl	80005b0 <__aeabi_dmul>
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001806:	9b06      	ldr	r3, [sp, #24]
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001808:	4680      	mov	r8, r0
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001812:	4689      	mov	r9, r1
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	f7fe fe61 	bl	80004dc <__aeabi_i2d>
 800181a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001ac0 <accelerometerPage+0x338>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fec6 	bl	80005b0 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 8001828:	9905      	ldr	r1, [sp, #20]
 800182a:	f9b7 0000 	ldrsh.w	r0, [r7]
 800182e:	f9b1 1000 	ldrsh.w	r1, [r1]
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001832:	4616      	mov	r6, r2
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 8001834:	1a40      	subs	r0, r0, r1
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001836:	461f      	mov	r7, r3
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 8001838:	f7fe fe50 	bl	80004dc <__aeabi_i2d>
 800183c:	a3a0      	add	r3, pc, #640	; (adr r3, 8001ac0 <accelerometerPage+0x338>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe feb5 	bl	80005b0 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
    sprintf(x_print, "%+5.3f", finalizedX);
 800184a:	4628      	mov	r0, r5
 800184c:	49a3      	ldr	r1, [pc, #652]	; (8001adc <accelerometerPage+0x354>)
 800184e:	f003 fc45 	bl	80050dc <siprintf>
    sprintf(y_print, "%+5.3f", finalizedY);
 8001852:	4642      	mov	r2, r8
 8001854:	464b      	mov	r3, r9
 8001856:	4650      	mov	r0, sl
 8001858:	49a0      	ldr	r1, [pc, #640]	; (8001adc <accelerometerPage+0x354>)
 800185a:	f003 fc3f 	bl	80050dc <siprintf>
    sprintf(z_print, "%+5.3f", finalizedZ);
 800185e:	4632      	mov	r2, r6
 8001860:	9e07      	ldr	r6, [sp, #28]
 8001862:	463b      	mov	r3, r7
 8001864:	4630      	mov	r0, r6
 8001866:	499d      	ldr	r1, [pc, #628]	; (8001adc <accelerometerPage+0x354>)
 8001868:	f003 fc38 	bl	80050dc <siprintf>
    LCD_DrawString_Color(150, 100, x_print, CYAN, BLACK);
 800186c:	462a      	mov	r2, r5
 800186e:	4659      	mov	r1, fp
 8001870:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001874:	2096      	movs	r0, #150	; 0x96
 8001876:	9400      	str	r4, [sp, #0]
 8001878:	f7ff fcc6 	bl	8001208 <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 130, y_print, YELLOW, BLACK);
 800187c:	4652      	mov	r2, sl
 800187e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001882:	2182      	movs	r1, #130	; 0x82
 8001884:	2096      	movs	r0, #150	; 0x96
 8001886:	9400      	str	r4, [sp, #0]
 8001888:	f7ff fcbe 	bl	8001208 <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 160, z_print, BLUE, BLACK);
 800188c:	4632      	mov	r2, r6
 800188e:	231f      	movs	r3, #31
 8001890:	21a0      	movs	r1, #160	; 0xa0
 8001892:	2096      	movs	r0, #150	; 0x96
 8001894:	9400      	str	r4, [sp, #0]
 8001896:	f7ff fcb7 	bl	8001208 <LCD_DrawString_Color>
    HAL_Delay(30);
 800189a:	201e      	movs	r0, #30
 800189c:	f000 ffca 	bl	8002834 <HAL_Delay>
}
 80018a0:	b013      	add	sp, #76	; 0x4c
 80018a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018a6:	2601      	movs	r6, #1
 80018a8:	2764      	movs	r7, #100	; 0x64
        uint8_t setPWLMode = 0x00; //reset accelerometer
 80018aa:	2400      	movs	r4, #0
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 80018ac:	ab0f      	add	r3, sp, #60	; 0x3c
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018ae:	ad09      	add	r5, sp, #36	; 0x24
 80018b0:	222d      	movs	r2, #45	; 0x2d
 80018b2:	213a      	movs	r1, #58	; 0x3a
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 80018b4:	469b      	mov	fp, r3
 80018b6:	9307      	str	r3, [sp, #28]
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018b8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80018bc:	4633      	mov	r3, r6
 80018be:	4886      	ldr	r0, [pc, #536]	; (8001ad8 <accelerometerPage+0x350>)
 80018c0:	9500      	str	r5, [sp, #0]
        uint8_t setPWLMode = 0x00; //reset accelerometer
 80018c2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018c6:	f001 ffa1 	bl	800380c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80018ca:	4638      	mov	r0, r7
 80018cc:	f000 ffb2 	bl	8002834 <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 80018d0:	2308      	movs	r3, #8
        uint8_t formatting = 0x05; // full res +-4g
 80018d2:	f04f 0905 	mov.w	r9, #5
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018d6:	222d      	movs	r2, #45	; 0x2d
 80018d8:	213a      	movs	r1, #58	; 0x3a
        setPWLMode = 0x08; //disable auto sleep, always measure
 80018da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018de:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80018e2:	4633      	mov	r3, r6
 80018e4:	487c      	ldr	r0, [pc, #496]	; (8001ad8 <accelerometerPage+0x350>)
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 80018e6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80018ea:	9500      	str	r5, [sp, #0]
 80018ec:	f001 ff8e 	bl	800380c <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 80018f0:	4633      	mov	r3, r6
 80018f2:	2231      	movs	r2, #49	; 0x31
 80018f4:	213a      	movs	r1, #58	; 0x3a
 80018f6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80018fa:	4877      	ldr	r0, [pc, #476]	; (8001ad8 <accelerometerPage+0x350>)
 80018fc:	f8cd a000 	str.w	sl, [sp]
        uint8_t formatting = 0x05; // full res +-4g
 8001900:	f88d 9030 	strb.w	r9, [sp, #48]	; 0x30
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 8001904:	f001 ff82 	bl	800380c <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 8001908:	4633      	mov	r3, r6
 800190a:	4622      	mov	r2, r4
 800190c:	213a      	movs	r1, #58	; 0x3a
 800190e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8001912:	4871      	ldr	r0, [pc, #452]	; (8001ad8 <accelerometerPage+0x350>)
 8001914:	f8cd b000 	str.w	fp, [sp]
        uint8_t debug = 0x00;
 8001918:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 800191c:	f002 f82a 	bl	8003974 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001920:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001924:	22f0      	movs	r2, #240	; 0xf0
 8001926:	4621      	mov	r1, r4
 8001928:	4620      	mov	r0, r4
 800192a:	9400      	str	r4, [sp, #0]
 800192c:	f7ff fb2a 	bl	8000f84 <LCD_Clear>
        HAL_Delay(100);
 8001930:	4638      	mov	r0, r7
 8001932:	f000 ff7f 	bl	8002834 <HAL_Delay>
        if (debug != 0xE5) {
 8001936:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800193a:	2be5      	cmp	r3, #229	; 0xe5
 800193c:	d01f      	beq.n	800197e <accelerometerPage+0x1f6>
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 800193e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001942:	4639      	mov	r1, r7
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 8001944:	2703      	movs	r7, #3
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 8001946:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800194a:	2032      	movs	r0, #50	; 0x32
 800194c:	4a64      	ldr	r2, [pc, #400]	; (8001ae0 <accelerometerPage+0x358>)
 800194e:	f8cd 9004 	str.w	r9, [sp, #4]
 8001952:	9500      	str	r5, [sp, #0]
 8001954:	f7ff fc80 	bl	8001258 <LCD_DrawString_Color_With_Delay>
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 8001958:	4623      	mov	r3, r4
 800195a:	2196      	movs	r1, #150	; 0x96
 800195c:	4620      	mov	r0, r4
 800195e:	4a61      	ldr	r2, [pc, #388]	; (8001ae4 <accelerometerPage+0x35c>)
 8001960:	9500      	str	r5, [sp, #0]
 8001962:	9701      	str	r7, [sp, #4]
 8001964:	f7ff fc78 	bl	8001258 <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 8001968:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800196c:	f000 ff62 	bl	8002834 <HAL_Delay>
            currentPage = home;
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <accelerometerPage+0x360>)
            changingPage = 1;
 8001972:	f8c8 6000 	str.w	r6, [r8]
            currentPage = home;
 8001976:	701c      	strb	r4, [r3, #0]
}
 8001978:	b013      	add	sp, #76	; 0x4c
 800197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 800197e:	f04f 0b0a 	mov.w	fp, #10
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8001982:	f8df c148 	ldr.w	ip, [pc, #328]	; 8001acc <accelerometerPage+0x344>
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001986:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8001ad4 <accelerometerPage+0x34c>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 800198a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800198e:	4639      	mov	r1, r7
 8001990:	4a56      	ldr	r2, [pc, #344]	; (8001aec <accelerometerPage+0x364>)
 8001992:	4620      	mov	r0, r4
 8001994:	9400      	str	r4, [sp, #0]
 8001996:	f8cd b004 	str.w	fp, [sp, #4]
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 800199a:	f8cd c014 	str.w	ip, [sp, #20]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 800199e:	f8cd e018 	str.w	lr, [sp, #24]
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 80019a2:	f7ff fc59 	bl	8001258 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(3000);
 80019a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019aa:	f000 ff43 	bl	8002834 <HAL_Delay>
        uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80019ae:	2006      	movs	r0, #6
 80019b0:	f002 fe38 	bl	8004624 <malloc>
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80019b4:	4633      	mov	r3, r6
 80019b6:	2206      	movs	r2, #6
        uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80019b8:	4606      	mov	r6, r0
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80019ba:	213a      	movs	r1, #58	; 0x3a
 80019bc:	9201      	str	r2, [sp, #4]
 80019be:	9600      	str	r6, [sp, #0]
 80019c0:	2232      	movs	r2, #50	; 0x32
 80019c2:	4845      	ldr	r0, [pc, #276]	; (8001ad8 <accelerometerPage+0x350>)
 80019c4:	9702      	str	r7, [sp, #8]
 80019c6:	f001 ffd5 	bl	8003974 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 80019ca:	9400      	str	r4, [sp, #0]
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 80019cc:	f8dd c014 	ldr.w	ip, [sp, #20]
 80019d0:	8833      	ldrh	r3, [r6, #0]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 80019d2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8001ad0 <accelerometerPage+0x348>
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 80019d6:	f8ac 3000 	strh.w	r3, [ip]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 80019da:	8873      	ldrh	r3, [r6, #2]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 80019dc:	f8dd e018 	ldr.w	lr, [sp, #24]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 80019e0:	f8a9 3000 	strh.w	r3, [r9]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 80019e4:	88b3      	ldrh	r3, [r6, #4]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80019e6:	22f0      	movs	r2, #240	; 0xf0
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 80019e8:	f8ae 3000 	strh.w	r3, [lr]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80019ec:	4621      	mov	r1, r4
 80019ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff fac6 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 80019f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019fc:	4639      	mov	r1, r7
 80019fe:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <accelerometerPage+0x368>)
 8001a00:	4620      	mov	r0, r4
 8001a02:	e9cd 4b00 	strd	r4, fp, [sp]
 8001a06:	f7ff fc27 	bl	8001258 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8001a0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a0e:	f000 ff11 	bl	8002834 <HAL_Delay>
        currentPage = accelerometer;
 8001a12:	2202      	movs	r2, #2
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001a14:	f64f 76ff 	movw	r6, #65535	; 0xffff
        currentPage = accelerometer;
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <accelerometerPage+0x360>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4620      	mov	r0, r4
        changingPage = 0;
 8001a1e:	f8c8 4000 	str.w	r4, [r8]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a22:	9400      	str	r4, [sp, #0]
        currentPage = accelerometer;
 8001a24:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a2a:	22f0      	movs	r2, #240	; 0xf0
 8001a2c:	f7ff faaa 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001a30:	231f      	movs	r3, #31
 8001a32:	2128      	movs	r1, #40	; 0x28
 8001a34:	4658      	mov	r0, fp
 8001a36:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <accelerometerPage+0x36c>)
 8001a38:	f8cd b004 	str.w	fp, [sp, #4]
 8001a3c:	9600      	str	r6, [sp, #0]
 8001a3e:	f7ff fc0b 	bl	8001258 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001a42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a46:	2282      	movs	r2, #130	; 0x82
 8001a48:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a4c:	2014      	movs	r0, #20
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2319      	movs	r3, #25
 8001a52:	f7ff fa97 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001a56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a5a:	f240 111d 	movw	r1, #285	; 0x11d
 8001a5e:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <accelerometerPage+0x370>)
 8001a60:	201e      	movs	r0, #30
 8001a62:	e9cd 4b00 	strd	r4, fp, [sp]
 8001a66:	f7ff fbf7 	bl	8001258 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(30);
 8001a6a:	201e      	movs	r0, #30
 8001a6c:	f000 fee2 	bl	8002834 <HAL_Delay>
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 8001a70:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a74:	4639      	mov	r1, r7
 8001a76:	2028      	movs	r0, #40	; 0x28
 8001a78:	4a20      	ldr	r2, [pc, #128]	; (8001afc <accelerometerPage+0x374>)
 8001a7a:	9400      	str	r4, [sp, #0]
 8001a7c:	f7ff fbc4 	bl	8001208 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 8001a80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a84:	2182      	movs	r1, #130	; 0x82
 8001a86:	2028      	movs	r0, #40	; 0x28
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <accelerometerPage+0x378>)
 8001a8a:	9400      	str	r4, [sp, #0]
 8001a8c:	f7ff fbbc 	bl	8001208 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 8001a90:	231f      	movs	r3, #31
 8001a92:	21a0      	movs	r1, #160	; 0xa0
 8001a94:	2028      	movs	r0, #40	; 0x28
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <accelerometerPage+0x37c>)
 8001a98:	9400      	str	r4, [sp, #0]
 8001a9a:	f7ff fbb5 	bl	8001208 <LCD_DrawString_Color>
        if (debug != 0xE5) {
 8001a9e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001aa2:	2be5      	cmp	r3, #229	; 0xe5
 8001aa4:	f43f ae85 	beq.w	80017b2 <accelerometerPage+0x2a>
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 8001aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aac:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ab0:	208c      	movs	r0, #140	; 0x8c
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <accelerometerPage+0x380>)
 8001ab4:	9600      	str	r6, [sp, #0]
 8001ab6:	f7ff fba7 	bl	8001208 <LCD_DrawString_Color>
 8001aba:	e67a      	b.n	80017b2 <accelerometerPage+0x2a>
 8001abc:	f3af 8000 	nop.w
 8001ac0:	d916872b 	.word	0xd916872b
 8001ac4:	3fb3f7ce 	.word	0x3fb3f7ce
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	200002fc 	.word	0x200002fc
 8001ad0:	200002fe 	.word	0x200002fe
 8001ad4:	20000300 	.word	0x20000300
 8001ad8:	20000260 	.word	0x20000260
 8001adc:	08007b60 	.word	0x08007b60
 8001ae0:	08007a94 	.word	0x08007a94
 8001ae4:	08007aa8 	.word	0x08007aa8
 8001ae8:	2000022c 	.word	0x2000022c
 8001aec:	08007ad8 	.word	0x08007ad8
 8001af0:	08007b08 	.word	0x08007b08
 8001af4:	08007b2c 	.word	0x08007b2c
 8001af8:	08007a48 	.word	0x08007a48
 8001afc:	08007b48 	.word	0x08007b48
 8001b00:	08007b4c 	.word	0x08007b4c
 8001b04:	08007b50 	.word	0x08007b50
 8001b08:	08007b54 	.word	0x08007b54

08001b0c <SystemClock_Config>:
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 8001b0e:	b510      	push	{r4, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b10:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2402      	movs	r4, #2
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b18:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 8001b1c:	b096      	sub	sp, #88	; 0x58
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1e:	900c      	str	r0, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b20:	9010      	str	r0, [sp, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b22:	a80c      	add	r0, sp, #48	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b28:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001b30:	e9cd 3304 	strd	r3, r3, [sp, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001b38:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b3c:	9115      	str	r1, [sp, #84]	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	9301      	str	r3, [sp, #4]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b42:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b44:	920d      	str	r2, [sp, #52]	; 0x34
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b4a:	f002 f89f 	bl	8003c8c <HAL_RCC_OscConfig>
 8001b4e:	b108      	cbz	r0, 8001b54 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
  */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001b52:	e7fe      	b.n	8001b52 <SystemClock_Config+0x46>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b54:	4603      	mov	r3, r0
 8001b56:	220f      	movs	r2, #15
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	e9cd 4302 	strd	r4, r3, [sp, #8]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b62:	4621      	mov	r1, r4
 8001b64:	a801      	add	r0, sp, #4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b66:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b68:	9201      	str	r2, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b6a:	f002 fabb 	bl	80040e4 <HAL_RCC_ClockConfig>
 8001b6e:	b108      	cbz	r0, 8001b74 <SystemClock_Config+0x68>
 8001b70:	b672      	cpsid	i
    while (1) {
 8001b72:	e7fe      	b.n	8001b72 <SystemClock_Config+0x66>
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001b78:	a806      	add	r0, sp, #24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b7a:	9406      	str	r4, [sp, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b7c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001b7e:	f002 fb71 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	b108      	cbz	r0, 8001b88 <SystemClock_Config+0x7c>
 8001b84:	b672      	cpsid	i
    while (1) {
 8001b86:	e7fe      	b.n	8001b86 <SystemClock_Config+0x7a>
}
 8001b88:	b016      	add	sp, #88	; 0x58
 8001b8a:	bd10      	pop	{r4, pc}

08001b8c <main>:
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	2400      	movs	r4, #0
int main(void) {
 8001b8e:	b580      	push	{r7, lr}
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b90:	2710      	movs	r7, #16
int main(void) {
 8001b92:	b08e      	sub	sp, #56	; 0x38
    HAL_Init();
 8001b94:	f000 fe2a 	bl	80027ec <HAL_Init>
    SystemClock_Config();
 8001b98:	f7ff ffb8 	bl	8001b0c <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001ba0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba4:	4ba7      	ldr	r3, [pc, #668]	; (8001e44 <main+0x2b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2501      	movs	r5, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001baa:	2107      	movs	r1, #7
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001bb4:	48a4      	ldr	r0, [pc, #656]	; (8001e48 <main+0x2bc>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001bba:	9202      	str	r2, [sp, #8]
 8001bbc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc0:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	433a      	orrs	r2, r7
 8001bc4:	619a      	str	r2, [r3, #24]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	403a      	ands	r2, r7
 8001bca:	9203      	str	r2, [sp, #12]
 8001bcc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	f042 0204 	orr.w	r2, r2, #4
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	f002 0204 	and.w	r2, r2, #4
 8001bdc:	9204      	str	r2, [sp, #16]
 8001bde:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	f042 0208 	orr.w	r2, r2, #8
 8001be6:	619a      	str	r2, [r3, #24]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	f002 0208 	and.w	r2, r2, #8
 8001bee:	9205      	str	r2, [sp, #20]
 8001bf0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	f042 0220 	orr.w	r2, r2, #32
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001bfc:	4622      	mov	r2, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	9306      	str	r3, [sp, #24]
 8001c04:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c06:	f001 fb17 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	488f      	ldr	r0, [pc, #572]	; (8001e4c <main+0x2c0>)
 8001c10:	f001 fb12 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 8001c14:	2123      	movs	r1, #35	; 0x23
 8001c16:	462a      	mov	r2, r5
 8001c18:	488d      	ldr	r0, [pc, #564]	; (8001e50 <main+0x2c4>)
 8001c1a:	f001 fb0d 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8001c1e:	4622      	mov	r2, r4
 8001c20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001c24:	488b      	ldr	r0, [pc, #556]	; (8001e54 <main+0x2c8>)
 8001c26:	f001 fb07 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001c30:	4889      	ldr	r0, [pc, #548]	; (8001e58 <main+0x2cc>)
 8001c32:	f001 fb01 	bl	8003238 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8001c36:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c38:	4883      	ldr	r0, [pc, #524]	; (8001e48 <main+0x2bc>)
 8001c3a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8001c3c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c44:	f001 f9ca 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c48:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4a:	487f      	ldr	r0, [pc, #508]	; (8001e48 <main+0x2bc>)
 8001c4c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c4e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c50:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	f001 f9c2 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c58:	4b80      	ldr	r3, [pc, #512]	; (8001e5c <main+0x2d0>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5a:	487b      	ldr	r0, [pc, #492]	; (8001e48 <main+0x2bc>)
 8001c5c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c5e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c60:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c64:	f001 f9ba 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	487a      	ldr	r0, [pc, #488]	; (8001e58 <main+0x2cc>)
 8001c6e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f001 f9b1 	bl	8002fdc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	4874      	ldr	r0, [pc, #464]	; (8001e4c <main+0x2c0>)
 8001c7c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f001 f9aa 	bl	8002fdc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	4870      	ldr	r0, [pc, #448]	; (8001e4c <main+0x2c0>)
 8001c8a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	e9cd 7507 	strd	r7, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c90:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f001 f9a2 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8001c98:	2323      	movs	r3, #35	; 0x23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	486d      	ldr	r0, [pc, #436]	; (8001e50 <main+0x2c4>)
 8001c9c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8001c9e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca4:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f001 f999 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001caa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <main+0x2c8>)
 8001cb0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001cb2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f001 f98f 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001cbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cc2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <main+0x2cc>)
 8001cc8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f001 f984 	bl	8002fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f001 f91b 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f001 f956 	bl	8002f90 <HAL_NVIC_EnableIRQ>
    Timing.AddressSetupTime = 15;
 8001ce4:	230f      	movs	r3, #15
    Timing.DataSetupTime = 255;
 8001ce6:	20ff      	movs	r0, #255	; 0xff
    Timing.AddressHoldTime = 15;
 8001ce8:	e9cd 3307 	strd	r3, r3, [sp, #28]
    Timing.BusTurnAroundDuration = 15;
 8001cec:	930a      	str	r3, [sp, #40]	; 0x28
    Timing.DataLatency = 17;
 8001cee:	2311      	movs	r3, #17
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001cf0:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    Timing.DataSetupTime = 255;
 8001cf8:	9009      	str	r0, [sp, #36]	; 0x24
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001cfa:	4859      	ldr	r0, [pc, #356]	; (8001e60 <main+0x2d4>)
    Timing.DataLatency = 17;
 8001cfc:	930c      	str	r3, [sp, #48]	; 0x30
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <main+0x2d8>)
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d00:	6001      	str	r1, [r0, #0]
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001d02:	6282      	str	r2, [r0, #40]	; 0x28
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001d04:	a907      	add	r1, sp, #28
 8001d06:	4622      	mov	r2, r4
    hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d08:	e9c0 4402 	strd	r4, r4, [r0, #8]
    hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d0c:	e9c0 4406 	strd	r4, r4, [r0, #24]
    hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d10:	e9c0 4408 	strd	r4, r4, [r0, #32]
    hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001d14:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
    hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001d18:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
    FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d1c:	940d      	str	r4, [sp, #52]	; 0x34
    Timing.CLKDivision = 16;
 8001d1e:	970b      	str	r7, [sp, #44]	; 0x2c
    hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d20:	6147      	str	r7, [r0, #20]
    hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d22:	6104      	str	r4, [r0, #16]
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d24:	6043      	str	r3, [r0, #4]
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001d26:	f002 fba5 	bl	8004474 <HAL_SRAM_Init>
 8001d2a:	b108      	cbz	r0, 8001d30 <main+0x1a4>
 8001d2c:	b672      	cpsid	i
    while (1) {
 8001d2e:	e7fe      	b.n	8001d2e <main+0x1a2>
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d30:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <main+0x2dc>)
    hadc2.Instance = ADC2;
 8001d36:	4c4d      	ldr	r4, [pc, #308]	; (8001e6c <main+0x2e0>)
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d38:	69d3      	ldr	r3, [r2, #28]
 8001d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3e:	61d3      	str	r3, [r2, #28]
    hadc2.Instance = ADC2;
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <main+0x2e4>)
    ADC_ChannelConfTypeDef sConfig = {0};
 8001d42:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001d46:	9009      	str	r0, [sp, #36]	; 0x24
    hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d48:	60a0      	str	r0, [r4, #8]
    hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d4a:	7520      	strb	r0, [r4, #20]
    hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d4c:	6060      	str	r0, [r4, #4]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001d4e:	4620      	mov	r0, r4
    hadc2.Init.ContinuousConvMode = ENABLE;
 8001d50:	7325      	strb	r5, [r4, #12]
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d52:	61e1      	str	r1, [r4, #28]
    hadc2.Init.NbrOfConversion = 1;
 8001d54:	6125      	str	r5, [r4, #16]
    hadc2.Instance = ADC2;
 8001d56:	6023      	str	r3, [r4, #0]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001d58:	f000 ffa2 	bl	8002ca0 <HAL_ADC_Init>
 8001d5c:	b108      	cbz	r0, 8001d62 <main+0x1d6>
 8001d5e:	b672      	cpsid	i
    while (1) {
 8001d60:	e7fe      	b.n	8001d60 <main+0x1d4>
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d62:	2305      	movs	r3, #5
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001d64:	4620      	mov	r0, r4
 8001d66:	a907      	add	r1, sp, #28
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d68:	9309      	str	r3, [sp, #36]	; 0x24
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d6a:	e9cd 6507 	strd	r6, r5, [sp, #28]
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001d6e:	f000 fe29 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b108      	cbz	r0, 8001d7a <main+0x1ee>
 8001d76:	b672      	cpsid	i
    while (1) {
 8001d78:	e7fe      	b.n	8001d78 <main+0x1ec>
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c2.Instance = I2C2;
 8001d7e:	483d      	ldr	r0, [pc, #244]	; (8001e74 <main+0x2e8>)
 8001d80:	493d      	ldr	r1, [pc, #244]	; (8001e78 <main+0x2ec>)
    hi2c2.Init.OwnAddress2 = 0;
 8001d82:	e9c0 3305 	strd	r3, r3, [r0, #20]
    hi2c2.Instance = I2C2;
 8001d86:	6001      	str	r1, [r0, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001d88:	493c      	ldr	r1, [pc, #240]	; (8001e7c <main+0x2f0>)
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d8a:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8e:	6083      	str	r3, [r0, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001d90:	60c3      	str	r3, [r0, #12]
    hi2c2.Init.ClockSpeed = 100000;
 8001d92:	6041      	str	r1, [r0, #4]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d94:	6102      	str	r2, [r0, #16]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001d96:	f001 fc71 	bl	800367c <HAL_I2C_Init>
 8001d9a:	4606      	mov	r6, r0
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d145      	bne.n	8001e2c <main+0x2a0>
    HAL_ADCEx_Calibration_Start(&hadc2);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f001 f829 	bl	8002df8 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 8001da6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001daa:	4620      	mov	r0, r4
 8001dac:	f000 fd54 	bl	8002858 <HAL_ADC_PollForConversion>
    currentPage = home;
 8001db0:	4d33      	ldr	r5, [pc, #204]	; (8001e80 <main+0x2f4>)
    HAL_ADC_Start(&hadc2);
 8001db2:	4620      	mov	r0, r4
 8001db4:	f000 fee4 	bl	8002b80 <HAL_ADC_Start>
    LCD_INIT();
 8001db8:	f7ff f88a 	bl	8000ed0 <LCD_INIT>
    HAL_Delay(50);
 8001dbc:	2032      	movs	r0, #50	; 0x32
    currentPage = home;
 8001dbe:	702e      	strb	r6, [r5, #0]
    HAL_Delay(50);
 8001dc0:	f000 fd38 	bl	8002834 <HAL_Delay>
    while (!XPT2046_Touch_Calibrate());
 8001dc4:	f000 fab6 	bl	8002334 <XPT2046_Touch_Calibrate>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d0fb      	beq.n	8001dc4 <main+0x238>
    LCD_GramScan(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fa71 	bl	80012b4 <LCD_GramScan>
    LCD_Clear(0, 0, 240, 320, BLACK);
 8001dd2:	2100      	movs	r1, #0
    if (changingPage) {
 8001dd4:	4e2b      	ldr	r6, [pc, #172]	; (8001e84 <main+0x2f8>)
    LCD_Clear(0, 0, 240, 320, BLACK);
 8001dd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001dda:	22f0      	movs	r2, #240	; 0xf0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	9100      	str	r1, [sp, #0]
 8001de0:	f7ff f8d0 	bl	8000f84 <LCD_Clear>
    if (changingPage) {
 8001de4:	6833      	ldr	r3, [r6, #0]
 8001de6:	bb4b      	cbnz	r3, 8001e3c <main+0x2b0>
    initWeightSensors(weightSensors);
 8001de8:	4827      	ldr	r0, [pc, #156]	; (8001e88 <main+0x2fc>)
 8001dea:	f7ff fb9b 	bl	8001524 <initWeightSensors>
    LCD_InitHeatCoords(weightSensorsData);
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <main+0x300>)
 8001df0:	f7ff f8e0 	bl	8000fb4 <LCD_InitHeatCoords>
    HAL_Delay(500);
 8001df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df8:	f000 fd1c 	bl	8002834 <HAL_Delay>
            ucXPT2046_TouchFlag = 0;
 8001dfc:	2700      	movs	r7, #0
 8001dfe:	4c24      	ldr	r4, [pc, #144]	; (8001e90 <main+0x304>)
 8001e00:	e008      	b.n	8001e14 <main+0x288>
        if (ucXPT2046_TouchFlag == 1) {
 8001e02:	7823      	ldrb	r3, [r4, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <main+0x282>
            Check_touchkey();
 8001e08:	f7ff fb26 	bl	8001458 <Check_touchkey>
            ucXPT2046_TouchFlag = 0;
 8001e0c:	7027      	strb	r7, [r4, #0]
        HAL_Delay(50);
 8001e0e:	2032      	movs	r0, #50	; 0x32
 8001e10:	f000 fd10 	bl	8002834 <HAL_Delay>
        if (currentPage == home) mainPage();
 8001e14:	782b      	ldrb	r3, [r5, #0]
 8001e16:	b11b      	cbz	r3, 8001e20 <main+0x294>
        else if (currentPage == weight) weightPage();
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d009      	beq.n	8001e30 <main+0x2a4>
        else if (currentPage == accelerometer) accelerometerPage();
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d00a      	beq.n	8001e36 <main+0x2aa>
    if (changingPage) {
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ed      	beq.n	8001e02 <main+0x276>
 8001e26:	f7ff fab7 	bl	8001398 <mainPage.part.0>
 8001e2a:	e7ea      	b.n	8001e02 <main+0x276>
 8001e2c:	b672      	cpsid	i
    while (1) {
 8001e2e:	e7fe      	b.n	8001e2e <main+0x2a2>
        else if (currentPage == weight) weightPage();
 8001e30:	f7ff fbd4 	bl	80015dc <weightPage>
 8001e34:	e7e5      	b.n	8001e02 <main+0x276>
        else if (currentPage == accelerometer) accelerometerPage();
 8001e36:	f7ff fca7 	bl	8001788 <accelerometerPage>
 8001e3a:	e7e2      	b.n	8001e02 <main+0x276>
 8001e3c:	f7ff faac 	bl	8001398 <mainPage.part.0>
 8001e40:	e7d2      	b.n	8001de8 <main+0x25c>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40011800 	.word	0x40011800
 8001e4c:	40010800 	.word	0x40010800
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	40011400 	.word	0x40011400
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	10210000 	.word	0x10210000
 8001e60:	200002b4 	.word	0x200002b4
 8001e64:	a0000104 	.word	0xa0000104
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	20000230 	.word	0x20000230
 8001e70:	40012800 	.word	0x40012800
 8001e74:	20000260 	.word	0x20000260
 8001e78:	40005800 	.word	0x40005800
 8001e7c:	000186a0 	.word	0x000186a0
 8001e80:	2000022c 	.word	0x2000022c
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000308 	.word	0x20000308
 8001e8c:	20000388 	.word	0x20000388
 8001e90:	200003c0 	.word	0x200003c0

08001e94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_MspInit+0x3c>)
{
 8001e96:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e9a:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	f002 0201 	and.w	r2, r2, #1
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eb2:	61da      	str	r2, [r3, #28]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ebe:	684b      	ldr	r3, [r1, #4]
 8001ec0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	b002      	add	sp, #8
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	2300      	movs	r3, #0
{
 8001eda:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC2)
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <HAL_ADC_MspInit+0x5c>)
 8001ede:	6801      	ldr	r1, [r0, #0]
{
 8001ee0:	b087      	sub	sp, #28
  if(hadc->Instance==ADC2)
 8001ee2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001ee8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC2)
 8001eec:	d001      	beq.n	8001ef2 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001eee:	b007      	add	sp, #28
 8001ef0:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef2:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef4:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ef6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001efa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001efe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f0e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001f12:	9200      	str	r2, [sp, #0]
 8001f14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	f042 0204 	orr.w	r2, r2, #4
 8001f1c:	619a      	str	r2, [r3, #24]
 8001f1e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f20:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f001 f856 	bl	8002fdc <HAL_GPIO_Init>
}
 8001f30:	b007      	add	sp, #28
 8001f32:	bd30      	pop	{r4, r5, pc}
 8001f34:	40012800 	.word	0x40012800
 8001f38:	40010800 	.word	0x40010800

08001f3c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	2300      	movs	r3, #0
{
 8001f3e:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8001f40:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <HAL_I2C_MspInit+0x5c>)
 8001f42:	6801      	ldr	r1, [r0, #0]
{
 8001f44:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8001f46:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f52:	b007      	add	sp, #28
 8001f54:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f56:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5a:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5c:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4c0f      	ldr	r4, [pc, #60]	; (8001f9c <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	69a3      	ldr	r3, [r4, #24]
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	61a3      	str	r3, [r4, #24]
 8001f6a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f6c:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f001 f82e 	bl	8002fdc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f80:	69e3      	ldr	r3, [r4, #28]
 8001f82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f86:	61e3      	str	r3, [r4, #28]
 8001f88:	69e3      	ldr	r3, [r4, #28]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
}
 8001f92:	b007      	add	sp, #28
 8001f94:	bd30      	pop	{r4, r5, pc}
 8001f96:	bf00      	nop
 8001f98:	40005800 	.word	0x40005800
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fa4:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001faa:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8001fac:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fae:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8001fb0:	bb12      	cbnz	r2, 8001ff8 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8001fb2:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb6:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fb8:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fbc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001fc0:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8001fc4:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fc6:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6153      	str	r3, [r2, #20]
 8001fd0:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd2:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001fdc:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe2:	f000 fffb 	bl	8002fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fe6:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <HAL_SRAM_MspInit+0x60>)
 8001fec:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ff2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff4:	f000 fff2 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ff8:	b007      	add	sp, #28
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	200003b8 	.word	0x200003b8
 8002000:	40011800 	.word	0x40011800
 8002004:	40011400 	.word	0x40011400

08002008 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <HardFault_Handler>
 800200e:	bf00      	nop

08002010 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler>
 8002012:	bf00      	nop

08002014 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <BusFault_Handler>
 8002016:	bf00      	nop

08002018 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler>
 800201a:	bf00      	nop

0800201c <SVC_Handler>:
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <DebugMon_Handler>:
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <PendSV_Handler>:
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002028:	f000 bbf2 	b.w	8002810 <HAL_IncTick>

0800202c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800202c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <EXTI4_IRQHandler+0x2c>)
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	06d2      	lsls	r2, r2, #27
 8002034:	d404      	bmi.n	8002040 <EXTI4_IRQHandler+0x14>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800203a:	2010      	movs	r0, #16
 800203c:	f001 b902 	b.w	8003244 <HAL_GPIO_EXTI_IRQHandler>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002040:	2010      	movs	r0, #16
        ucXPT2046_TouchFlag = 1;
 8002042:	2101      	movs	r1, #1
 8002044:	4a05      	ldr	r2, [pc, #20]	; (800205c <EXTI4_IRQHandler+0x30>)
 8002046:	7011      	strb	r1, [r2, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002048:	6158      	str	r0, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 800204a:	f001 f8f9 	bl	8003240 <HAL_GPIO_EXTI_Callback>
}
 800204e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002052:	2010      	movs	r0, #16
 8002054:	f001 b8f6 	b.w	8003244 <HAL_GPIO_EXTI_IRQHandler>
 8002058:	40010400 	.word	0x40010400
 800205c:	200003c0 	.word	0x200003c0

08002060 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
    return 1;
}
 8002060:	2001      	movs	r0, #1
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig) {
 8002064:	b508      	push	{r3, lr}
    errno = EINVAL;
 8002066:	f002 fab3 	bl	80045d0 <__errno>
 800206a:	2216      	movs	r2, #22
 800206c:	4603      	mov	r3, r0
    return -1;
}
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = EINVAL;
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	bd08      	pop	{r3, pc}
 8002076:	bf00      	nop

08002078 <_exit>:

void _exit(int status) {
 8002078:	b508      	push	{r3, lr}
    errno = EINVAL;
 800207a:	f002 faa9 	bl	80045d0 <__errno>
 800207e:	2316      	movs	r3, #22
 8002080:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
 8002082:	e7fe      	b.n	8002082 <_exit+0xa>

08002084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002084:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002086:	1e16      	subs	r6, r2, #0
 8002088:	dd07      	ble.n	800209a <_read+0x16>
 800208a:	460c      	mov	r4, r1
 800208c:	198d      	adds	r5, r1, r6
        *ptr++ = __io_getchar();
 800208e:	f3af 8000 	nop.w
 8002092:	f804 0b01 	strb.w	r0, [r4], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002096:	42a5      	cmp	r5, r4
 8002098:	d1f9      	bne.n	800208e <_read+0xa>
    }

    return len;
}
 800209a:	4630      	mov	r0, r6
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	bf00      	nop

080020a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80020a0:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020a2:	1e16      	subs	r6, r2, #0
 80020a4:	dd07      	ble.n	80020b6 <_write+0x16>
 80020a6:	460c      	mov	r4, r1
 80020a8:	198d      	adds	r5, r1, r6
        __io_putchar(*ptr++);
 80020aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020ae:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020b2:	42a5      	cmp	r5, r4
 80020b4:	d1f9      	bne.n	80020aa <_write+0xa>
    }
    return len;
}
 80020b6:	4630      	mov	r0, r6
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
 80020ba:	bf00      	nop

080020bc <_close>:

int _close(int file) {
    return -1;
}
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop

080020c4 <_fstat>:


int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 80020c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    return 0;
}
 80020c8:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 80020ca:	604b      	str	r3, [r1, #4]
}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <_isatty>:

int _isatty(int file) {
    return 1;
}
 80020d0:	2001      	movs	r0, #1
 80020d2:	4770      	bx	lr

080020d4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
    return 0;
}
 80020d4:	2000      	movs	r0, #0
 80020d6:	4770      	bx	lr

080020d8 <_sbrk>:
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *) stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80020d8:	490d      	ldr	r1, [pc, #52]	; (8002110 <_sbrk+0x38>)
void *_sbrk(ptrdiff_t incr) {
 80020da:	4603      	mov	r3, r0
 80020dc:	b510      	push	{r4, lr}
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <_sbrk+0x3c>)
 80020e0:	4c0d      	ldr	r4, [pc, #52]	; (8002118 <_sbrk+0x40>)
    if (NULL == __sbrk_heap_end) {
 80020e2:	6808      	ldr	r0, [r1, #0]
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80020e4:	1b12      	subs	r2, r2, r4
    if (NULL == __sbrk_heap_end) {
 80020e6:	b120      	cbz	r0, 80020f2 <_sbrk+0x1a>
        __sbrk_heap_end = &_end;
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80020e8:	4403      	add	r3, r0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d807      	bhi.n	80020fe <_sbrk+0x26>
        errno = ENOMEM;
        return (void *) -1;
    }

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;
 80020ee:	600b      	str	r3, [r1, #0]

    return (void *) prev_heap_end;
}
 80020f0:	bd10      	pop	{r4, pc}
        __sbrk_heap_end = &_end;
 80020f2:	4c0a      	ldr	r4, [pc, #40]	; (800211c <_sbrk+0x44>)
 80020f4:	4620      	mov	r0, r4
    if (__sbrk_heap_end + incr > max_heap) {
 80020f6:	4403      	add	r3, r0
 80020f8:	4293      	cmp	r3, r2
        __sbrk_heap_end = &_end;
 80020fa:	600c      	str	r4, [r1, #0]
    if (__sbrk_heap_end + incr > max_heap) {
 80020fc:	d9f7      	bls.n	80020ee <_sbrk+0x16>
        errno = ENOMEM;
 80020fe:	f002 fa67 	bl	80045d0 <__errno>
 8002102:	220c      	movs	r2, #12
 8002104:	4603      	mov	r3, r0
        return (void *) -1;
 8002106:	f04f 30ff 	mov.w	r0, #4294967295
        errno = ENOMEM;
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	bd10      	pop	{r4, pc}
 800210e:	bf00      	nop
 8002110:	200003bc 	.word	0x200003bc
 8002114:	20010000 	.word	0x20010000
 8002118:	00000400 	.word	0x00000400
 800211c:	200003d8 	.word	0x200003d8

08002120 <SystemInit>:

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop

08002124 <XPT2046_WriteCMD>:
    }

}


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4606      	mov	r6, r0
    uint8_t i;


    macXPT2046_MOSI_0();
 8002128:	4815      	ldr	r0, [pc, #84]	; (8002180 <XPT2046_WriteCMD+0x5c>)
 800212a:	2200      	movs	r2, #0

    macXPT2046_CLK_LOW();

    for (i = 0; i < 8; i++) {
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800212c:	4605      	mov	r5, r0
    macXPT2046_MOSI_0();
 800212e:	2104      	movs	r1, #4
 8002130:	f001 f882 	bl	8003238 <HAL_GPIO_WritePin>
    macXPT2046_CLK_LOW();
 8002134:	2200      	movs	r2, #0
 8002136:	2101      	movs	r1, #1
 8002138:	4628      	mov	r0, r5
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800213a:	2407      	movs	r4, #7
    macXPT2046_CLK_LOW();
 800213c:	f001 f87c 	bl	8003238 <HAL_GPIO_WritePin>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002140:	fa46 f204 	asr.w	r2, r6, r4
 8002144:	f012 0201 	ands.w	r2, r2, #1
 8002148:	bf18      	it	ne
 800214a:	2201      	movne	r2, #1
 800214c:	2104      	movs	r1, #4
 800214e:	4628      	mov	r0, r5
 8002150:	f001 f872 	bl	8003238 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002154:	2300      	movs	r3, #0
 8002156:	3301      	adds	r3, #1
 8002158:	2b05      	cmp	r3, #5
 800215a:	d3fc      	bcc.n	8002156 <XPT2046_WriteCMD+0x32>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_HIGH();
 800215c:	2201      	movs	r2, #1
 800215e:	4628      	mov	r0, r5
 8002160:	4611      	mov	r1, r2
 8002162:	f001 f869 	bl	8003238 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002166:	2300      	movs	r3, #0
 8002168:	3301      	adds	r3, #1
 800216a:	2b05      	cmp	r3, #5
 800216c:	d3fc      	bcc.n	8002168 <XPT2046_WriteCMD+0x44>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_LOW();
 800216e:	2200      	movs	r2, #0
 8002170:	2101      	movs	r1, #1
 8002172:	4628      	mov	r0, r5
    for (i = 0; i < 8; i++) {
 8002174:	3c01      	subs	r4, #1
        macXPT2046_CLK_LOW();
 8002176:	f001 f85f 	bl	8003238 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 800217a:	1c63      	adds	r3, r4, #1
 800217c:	d1e0      	bne.n	8002140 <XPT2046_WriteCMD+0x1c>
    }

}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	40011800 	.word	0x40011800

08002184 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002184:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    uint16_t usBuf = 0, usTemp;


    macXPT2046_MOSI_0();
 8002186:	2200      	movs	r2, #0
 8002188:	2104      	movs	r1, #4
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <XPT2046_ReadCMD+0x4c>)
 800218c:	f001 f854 	bl	8003238 <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002190:	2201      	movs	r2, #1
 8002192:	480f      	ldr	r0, [pc, #60]	; (80021d0 <XPT2046_ReadCMD+0x4c>)
 8002194:	4611      	mov	r1, r2
 8002196:	250b      	movs	r5, #11
    uint16_t usBuf = 0, usTemp;
 8002198:	2400      	movs	r4, #0

    for (i = 0; i < 12; i++) {
        macXPT2046_CLK_LOW();
 800219a:	4606      	mov	r6, r0
    macXPT2046_CLK_HIGH();
 800219c:	f001 f84c 	bl	8003238 <HAL_GPIO_WritePin>
        macXPT2046_CLK_LOW();
 80021a0:	2200      	movs	r2, #0
 80021a2:	2101      	movs	r1, #1
 80021a4:	4630      	mov	r0, r6
 80021a6:	f001 f847 	bl	8003238 <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 80021aa:	2108      	movs	r1, #8
 80021ac:	4630      	mov	r0, r6
 80021ae:	f001 f83d 	bl	800322c <HAL_GPIO_ReadPin>

        usBuf |= usTemp << (11 - i);

        macXPT2046_CLK_HIGH();
 80021b2:	2201      	movs	r2, #1
        usTemp = macXPT2046_MISO();
 80021b4:	4603      	mov	r3, r0
        macXPT2046_CLK_HIGH();
 80021b6:	4611      	mov	r1, r2
        usBuf |= usTemp << (11 - i);
 80021b8:	40ab      	lsls	r3, r5
        macXPT2046_CLK_HIGH();
 80021ba:	4630      	mov	r0, r6
    for (i = 0; i < 12; i++) {
 80021bc:	3d01      	subs	r5, #1
        usBuf |= usTemp << (11 - i);
 80021be:	431c      	orrs	r4, r3
        macXPT2046_CLK_HIGH();
 80021c0:	f001 f83a 	bl	8003238 <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 80021c4:	1c6b      	adds	r3, r5, #1
        usBuf |= usTemp << (11 - i);
 80021c6:	b2a4      	uxth	r4, r4
    for (i = 0; i < 12; i++) {
 80021c8:	d1ea      	bne.n	80021a0 <XPT2046_ReadCMD+0x1c>

    }

    return usBuf;

}
 80021ca:	4620      	mov	r0, r4
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	bf00      	nop
 80021d0:	40011800 	.word	0x40011800

080021d4 <XPT2046_ReadAdc_Smooth_XY>:

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
    uint8_t ucCount = 0, i;

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 80021d4:	2100      	movs	r1, #0
static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 80021d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	4680      	mov	r8, r0
    int16_t sBufferArray[2][10] = {{0},
 80021de:	2228      	movs	r2, #40	; 0x28
 80021e0:	4668      	mov	r0, sp
 80021e2:	466e      	mov	r6, sp
    uint8_t ucCount = 0, i;
 80021e4:	460c      	mov	r4, r1
        sBufferArray[0][ucCount] = sAD_X;
        sBufferArray[1][ucCount] = sAD_Y;

        ucCount++;

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 80021e6:	4f51      	ldr	r7, [pc, #324]	; (800232c <XPT2046_ReadAdc_Smooth_XY+0x158>)
    int16_t sBufferArray[2][10] = {{0},
 80021e8:	f002 fa24 	bl	8004634 <memset>
    XPT2046_WriteCMD(ucChannel);
 80021ec:	2090      	movs	r0, #144	; 0x90
 80021ee:	f7ff ff99 	bl	8002124 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 80021f2:	f7ff ffc7 	bl	8002184 <XPT2046_ReadCMD>
    for (i = 0; i < ulCount; i++) {
 80021f6:	2300      	movs	r3, #0
    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 80021f8:	b205      	sxth	r5, r0
    for (i = 0; i < ulCount; i++) {
 80021fa:	3301      	adds	r3, #1
 80021fc:	d0fd      	beq.n	80021fa <XPT2046_ReadAdc_Smooth_XY+0x26>
    XPT2046_WriteCMD(ucChannel);
 80021fe:	20d0      	movs	r0, #208	; 0xd0
 8002200:	f7ff ff90 	bl	8002124 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002204:	f7ff ffbe 	bl	8002184 <XPT2046_ReadCMD>
 8002208:	4603      	mov	r3, r0
        sBufferArray[0][ucCount] = sAD_X;
 800220a:	f826 5b02 	strh.w	r5, [r6], #2
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800220e:	2110      	movs	r1, #16
 8002210:	4638      	mov	r0, r7
        sBufferArray[1][ucCount] = sAD_Y;
 8002212:	8273      	strh	r3, [r6, #18]
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002214:	f001 f80a 	bl	800322c <HAL_GPIO_ReadPin>
        ucCount++;
 8002218:	3401      	adds	r4, #1
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800221a:	4605      	mov	r5, r0
        ucCount++;
 800221c:	b2e4      	uxtb	r4, r4
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800221e:	2800      	cmp	r0, #0
 8002220:	d174      	bne.n	800230c <XPT2046_ReadAdc_Smooth_XY+0x138>
 8002222:	2c0a      	cmp	r4, #10
 8002224:	d1e2      	bne.n	80021ec <XPT2046_ReadAdc_Smooth_XY+0x18>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002226:	2110      	movs	r1, #16
 8002228:	4840      	ldr	r0, [pc, #256]	; (800232c <XPT2046_ReadAdc_Smooth_XY+0x158>)
 800222a:	f000 ffff 	bl	800322c <HAL_GPIO_ReadPin>
 800222e:	b108      	cbz	r0, 8002234 <XPT2046_ReadAdc_Smooth_XY+0x60>
        ucXPT2046_TouchFlag = 0;
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002232:	701d      	strb	r5, [r3, #0]


    if (ucCount == 10) {
        lX_Max = lX_Min = sBufferArray[0][0];
 8002234:	f9bd c000 	ldrsh.w	ip, [sp]
        lY_Max = lY_Min = sBufferArray[1][0];
 8002238:	466b      	mov	r3, sp
        lX_Max = lX_Min = sBufferArray[0][0];
 800223a:	4664      	mov	r4, ip
 800223c:	4661      	mov	r1, ip
        lY_Max = lY_Min = sBufferArray[1][0];
 800223e:	f9bd 7014 	ldrsh.w	r7, [sp, #20]

        for (i = 1; i < 10; i++) {
 8002242:	f10d 0012 	add.w	r0, sp, #18
 8002246:	e004      	b.n	8002252 <XPT2046_ReadAdc_Smooth_XY+0x7e>
 8002248:	4294      	cmp	r4, r2
 800224a:	bfb8      	it	lt
 800224c:	4614      	movlt	r4, r2
 800224e:	4298      	cmp	r0, r3
 8002250:	d006      	beq.n	8002260 <XPT2046_ReadAdc_Smooth_XY+0x8c>
            if (sBufferArray[0][i] < lX_Min)
 8002252:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002256:	428a      	cmp	r2, r1
 8002258:	daf6      	bge.n	8002248 <XPT2046_ReadAdc_Smooth_XY+0x74>
        for (i = 1; i < 10; i++) {
 800225a:	4298      	cmp	r0, r3
 800225c:	4611      	mov	r1, r2
 800225e:	d1f8      	bne.n	8002252 <XPT2046_ReadAdc_Smooth_XY+0x7e>
        lY_Max = lY_Min = sBufferArray[1][0];
 8002260:	4638      	mov	r0, r7
 8002262:	463d      	mov	r5, r7
 8002264:	f10d 0626 	add.w	r6, sp, #38	; 0x26
 8002268:	ab05      	add	r3, sp, #20
 800226a:	e004      	b.n	8002276 <XPT2046_ReadAdc_Smooth_XY+0xa2>
 800226c:	4290      	cmp	r0, r2
 800226e:	bfb8      	it	lt
 8002270:	4610      	movlt	r0, r2
            else if (sBufferArray[0][i] > lX_Max)
                lX_Max = sBufferArray[0][i];

        }

        for (i = 1; i < 10; i++) {
 8002272:	42b3      	cmp	r3, r6
 8002274:	d006      	beq.n	8002284 <XPT2046_ReadAdc_Smooth_XY+0xb0>
            if (sBufferArray[1][i] < lY_Min)
 8002276:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800227a:	42aa      	cmp	r2, r5
 800227c:	daf6      	bge.n	800226c <XPT2046_ReadAdc_Smooth_XY+0x98>
        for (i = 1; i < 10; i++) {
 800227e:	42b3      	cmp	r3, r6
 8002280:	4615      	mov	r5, r2
 8002282:	d1f8      	bne.n	8002276 <XPT2046_ReadAdc_Smooth_XY+0xa2>
                lY_Max = sBufferArray[1][i];

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002284:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002288:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
                                sBufferArray[0][4] +
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 800228c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002290:	4462      	add	r2, ip
 8002292:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002294:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8002298:	443b      	add	r3, r7
 800229a:	4433      	add	r3, r6
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 800229c:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 80022a0:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80022a2:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 80022a6:	4433      	add	r3, r6
                                sBufferArray[0][4] +
 80022a8:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80022ac:	4432      	add	r2, r6
                                sBufferArray[1][4] +
 80022ae:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80022b2:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80022b4:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
                                sBufferArray[0][4] +
 80022b8:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80022ba:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
                                sBufferArray[1][4] +
 80022be:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80022c0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80022c4:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80022c6:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80022ca:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80022cc:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80022d0:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80022d2:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 80022d6:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80022d8:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 80022dc:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80022de:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80022e2:	4433      	add	r3, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 80022e4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80022e8:	4432      	add	r2, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 80022ea:	1a52      	subs	r2, r2, r1
 80022ec:	1b12      	subs	r2, r2, r4
 80022ee:	10d2      	asrs	r2, r2, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80022f0:	f8a8 2000 	strh.w	r2, [r8]
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 80022f4:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80022f8:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 80022fa:	1b5b      	subs	r3, r3, r5
 80022fc:	1a1b      	subs	r3, r3, r0


        return 1;
 80022fe:	2001      	movs	r0, #1
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002300:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002302:	f8a8 3002 	strh.w	r3, [r8, #2]


    return 0;


}
 8002306:	b00a      	add	sp, #40	; 0x28
 8002308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 800230c:	2110      	movs	r1, #16
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002310:	f000 ff8c 	bl	800322c <HAL_GPIO_ReadPin>
 8002314:	b930      	cbnz	r0, 8002324 <XPT2046_ReadAdc_Smooth_XY+0x150>
    if (ucCount == 10) {
 8002316:	2c0a      	cmp	r4, #10
    return 0;
 8002318:	bf18      	it	ne
 800231a:	2000      	movne	r0, #0
    if (ucCount == 10) {
 800231c:	d08a      	beq.n	8002234 <XPT2046_ReadAdc_Smooth_XY+0x60>
}
 800231e:	b00a      	add	sp, #40	; 0x28
 8002320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ucXPT2046_TouchFlag = 0;
 8002324:	2200      	movs	r2, #0
 8002326:	4b02      	ldr	r3, [pc, #8]	; (8002330 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e7f4      	b.n	8002316 <XPT2046_ReadAdc_Smooth_XY+0x142>
 800232c:	40011800 	.word	0x40011800
 8002330:	200003c0 	.word	0x200003c0

08002334 <XPT2046_Touch_Calibrate>:


}


uint8_t XPT2046_Touch_Calibrate(void) {
 8002334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002338:	213c      	movs	r1, #60	; 0x3c
    strCrossCoordinate[0].y = usScreenHeigth >> 2;

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 800233a:	22f0      	movs	r2, #240	; 0xf0

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 800233c:	23b4      	movs	r3, #180	; 0xb4
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 800233e:	f04f 0a50 	mov.w	sl, #80	; 0x50


    LCD_GramScan(1);
 8002342:	2001      	movs	r0, #1
uint8_t XPT2046_Touch_Calibrate(void) {
 8002344:	b09b      	sub	sp, #108	; 0x6c
    LCD_GramScan(1);
 8002346:	4607      	mov	r7, r0

    for (i = 0; i < 4; i++) {
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);

        pStr = "Touch Calibrate ......";
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002348:	f8df b340 	ldr.w	fp, [pc, #832]	; 800268c <XPT2046_Touch_Calibrate+0x358>
 800234c:	4ed0      	ldr	r6, [pc, #832]	; (8002690 <XPT2046_Touch_Calibrate+0x35c>)
 800234e:	ad16      	add	r5, sp, #88	; 0x58
 8002350:	f10d 084e 	add.w	r8, sp, #78	; 0x4e
    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002354:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002358:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 800235c:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002360:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002364:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8002368:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 800236c:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    LCD_GramScan(1);
 8002370:	f7fe ffa0 	bl	80012b4 <LCD_GramScan>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002374:	2400      	movs	r4, #0
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002376:	f44f 4978 	mov.w	r9, #63488	; 0xf800
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800237a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800237e:	22f0      	movs	r2, #240	; 0xf0
 8002380:	4621      	mov	r1, r4
 8002382:	4620      	mov	r0, r4
 8002384:	9400      	str	r4, [sp, #0]
 8002386:	f7fe fdfd 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 800238a:	4623      	mov	r3, r4
 800238c:	465a      	mov	r2, fp
 800238e:	21a0      	movs	r1, #160	; 0xa0
 8002390:	203c      	movs	r0, #60	; 0x3c
 8002392:	f8cd 9000 	str.w	r9, [sp]
 8002396:	f7fe ff37 	bl	8001208 <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 800239a:	463a      	mov	r2, r7
 800239c:	49bd      	ldr	r1, [pc, #756]	; (8002694 <XPT2046_Touch_Calibrate+0x360>)
 800239e:	a80f      	add	r0, sp, #60	; 0x3c
 80023a0:	f002 fe9c 	bl	80050dc <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 80023a4:	4623      	mov	r3, r4
 80023a6:	2190      	movs	r1, #144	; 0x90
 80023a8:	2078      	movs	r0, #120	; 0x78
 80023aa:	f8cd 9000 	str.w	r9, [sp]
 80023ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80023b0:	f7fe ff2a 	bl	8001208 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 80023b4:	4623      	mov	r3, r4
 80023b6:	3301      	adds	r3, #1
 80023b8:	42b3      	cmp	r3, r6
 80023ba:	d3fc      	bcc.n	80023b6 <XPT2046_Touch_Calibrate+0x82>

        XPT2046_DelayUS(100000);

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80023bc:	4651      	mov	r1, sl
 80023be:	f838 0c06 	ldrh.w	r0, [r8, #-6]
 80023c2:	f7fe fef5 	bl	80011b0 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 80023c6:	4628      	mov	r0, r5
 80023c8:	f7ff ff04 	bl	80021d4 <XPT2046_ReadAdc_Smooth_XY>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d0fa      	beq.n	80023c6 <XPT2046_Touch_Calibrate+0x92>
    for (i = 0; i < 4; i++) {
 80023d0:	3701      	adds	r7, #1
 80023d2:	2f05      	cmp	r7, #5
 80023d4:	f105 0504 	add.w	r5, r5, #4
 80023d8:	f108 0804 	add.w	r8, r8, #4
 80023dc:	d002      	beq.n	80023e4 <XPT2046_Touch_Calibrate+0xb0>
        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80023de:	f838 ac04 	ldrh.w	sl, [r8, #-4]
 80023e2:	e7c7      	b.n	8002374 <XPT2046_Touch_Calibrate+0x40>
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 80023e4:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 80023e8:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
 80023ec:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 80023f0:	f8bd 805e 	ldrh.w	r8, [sp, #94]	; 0x5e
 80023f4:	1b32      	subs	r2, r6, r4
 80023f6:	eba8 0307 	sub.w	r3, r8, r7
 80023fa:	fb03 f202 	mul.w	r2, r3, r2
 80023fe:	9304      	str	r3, [sp, #16]
 8002400:	4613      	mov	r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8002402:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002406:	f8bd 905a 	ldrh.w	r9, [sp, #90]	; 0x5a
 800240a:	eba5 0a04 	sub.w	sl, r5, r4
 800240e:	eba9 0207 	sub.w	r2, r9, r7
 8002412:	fb0a fb02 	mul.w	fp, sl, r2
    if (pCalibrationFactor->Divider == 0)
 8002416:	455b      	cmp	r3, fp
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	f000 8115 	beq.w	8002648 <XPT2046_Touch_Calibrate+0x314>
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800241e:	eba8 0009 	sub.w	r0, r8, r9
 8002422:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->An =
 8002426:	00c0      	lsls	r0, r0, #3
 8002428:	f7fe f858 	bl	80004dc <__aeabi_i2d>
 800242c:	460a      	mov	r2, r1
 800242e:	4601      	mov	r1, r0
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8002430:	1b70      	subs	r0, r6, r5
 8002432:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->Bn =
 8002436:	00c0      	lsls	r0, r0, #3
        pCalibrationFactor->An =
 8002438:	e9cd 1206 	strd	r1, r2, [sp, #24]
        pCalibrationFactor->Bn =
 800243c:	f7fe f84e 	bl	80004dc <__aeabi_i2d>
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002440:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
        pCalibrationFactor->Bn =
 8002444:	e9cd 0108 	strd	r0, r1, [sp, #32]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002448:	fb0c f006 	mul.w	r0, ip, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 800244c:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002450:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002454:	fb0c fc05 	mul.w	ip, ip, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002458:	fb08 f000 	mul.w	r0, r8, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 800245c:	1baa      	subs	r2, r5, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 800245e:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002462:	fb07 f202 	mul.w	r2, r7, r2
                pScreenSample[0].y +
 8002466:	fb09 000c 	mla	r0, r9, ip, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 800246a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
        pCalibrationFactor->Cn =
 800246e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002472:	f7fe f833 	bl	80004dc <__aeabi_i2d>
        pCalibrationFactor->Dn =
 8002476:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Cn =
 800247a:	460a      	mov	r2, r1
 800247c:	4601      	mov	r1, r0
        pCalibrationFactor->Dn =
 800247e:	9b04      	ldr	r3, [sp, #16]
        pCalibrationFactor->Cn =
 8002480:	e9cd 1204 	strd	r1, r2, [sp, #16]
        pCalibrationFactor->Dn =
 8002484:	fb0c f003 	mul.w	r0, ip, r3
 8002488:	f7fe f828 	bl	80004dc <__aeabi_i2d>
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 800248c:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Dn =
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002494:	fb0c f00a 	mul.w	r0, ip, sl
        pCalibrationFactor->En =
 8002498:	4240      	negs	r0, r0
        pCalibrationFactor->Dn =
 800249a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        pCalibrationFactor->En =
 800249e:	f7fe f81d 	bl	80004dc <__aeabi_i2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80024a6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80024aa:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80024ae:	1b64      	subs	r4, r4, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80024b0:	0109      	lsls	r1, r1, #4
 80024b2:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80024b6:	fb09 f404 	mul.w	r4, r9, r4
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80024ba:	fb08 f801 	mul.w	r8, r8, r1
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80024be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80024c2:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80024c6:	012d      	lsls	r5, r5, #4
                pScreenSample[0].y +
 80024c8:	eb08 1404 	add.w	r4, r8, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80024cc:	eba5 1506 	sub.w	r5, r5, r6, lsl #4
        pCalibrationFactor->Fn =
 80024d0:	fb07 4005 	mla	r0, r7, r5, r4
        pCalibrationFactor->En =
 80024d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        pCalibrationFactor->Fn =
 80024d8:	f7fe f800 	bl	80004dc <__aeabi_i2d>
    pCalibrationFactor->Divider =
 80024dc:	9b02      	ldr	r3, [sp, #8]
        pCalibrationFactor->Fn =
 80024de:	4680      	mov	r8, r0
    pCalibrationFactor->Divider =
 80024e0:	eba3 000b 	sub.w	r0, r3, fp
        pCalibrationFactor->Fn =
 80024e4:	4689      	mov	r9, r1
    pCalibrationFactor->Divider =
 80024e6:	f7fd fff9 	bl	80004dc <__aeabi_i2d>
 80024ea:	4682      	mov	sl, r0
    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);

    if (CalibrationFactor.Divider == 0) goto Failure;


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 80024ec:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    pCalibrationFactor->Divider =
 80024f0:	468b      	mov	fp, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 80024f2:	f7fd fff3 	bl	80004dc <__aeabi_i2d>
 80024f6:	4606      	mov	r6, r0
 80024f8:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
 80024fc:	460f      	mov	r7, r1
 80024fe:	f7fd ffed 	bl	80004dc <__aeabi_i2d>
 8002502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4630      	mov	r0, r6
 800250c:	4639      	mov	r1, r7
 800250e:	f7fe f84f 	bl	80005b0 <__aeabi_dmul>
 8002512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	f7fe f847 	bl	80005b0 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800252a:	f7fd fe8b 	bl	8000244 <__adddf3>
 800252e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002532:	f7fd fe87 	bl	8000244 <__adddf3>
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8002536:	4652      	mov	r2, sl
 8002538:	465b      	mov	r3, fp
 800253a:	f7fe f963 	bl	8000804 <__aeabi_ddiv>
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 800253e:	f7fe fb0f 	bl	8000b60 <__aeabi_d2uiz>
 8002542:	4603      	mov	r3, r0
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002544:	4639      	mov	r1, r7
 8002546:	4630      	mov	r0, r6
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002548:	b29e      	uxth	r6, r3
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 800254a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800254e:	f7fe f82f 	bl	80005b0 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	4614      	mov	r4, r2
 800255c:	461d      	mov	r5, r3
 800255e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002562:	f7fe f825 	bl	80005b0 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4620      	mov	r0, r4
 800256c:	4629      	mov	r1, r5
 800256e:	f7fd fe69 	bl	8000244 <__adddf3>
 8002572:	4642      	mov	r2, r8
 8002574:	464b      	mov	r3, r9
 8002576:	f7fd fe65 	bl	8000244 <__adddf3>
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 800257a:	4652      	mov	r2, sl
 800257c:	465b      	mov	r3, fp
 800257e:	f7fe f941 	bl	8000804 <__aeabi_ddiv>
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002582:	f7fe faed 	bl	8000b60 <__aeabi_d2uiz>

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002586:	2eb4      	cmp	r6, #180	; 0xb4
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002588:	b280      	uxth	r0, r0
    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 800258a:	bf8c      	ite	hi
 800258c:	f1a6 02b4 	subhi.w	r2, r6, #180	; 0xb4
 8002590:	f1c6 02b4 	rsbls	r2, r6, #180	; 0xb4
 8002594:	b292      	uxth	r2, r2
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002596:	2850      	cmp	r0, #80	; 0x50
 8002598:	bf8c      	ite	hi
 800259a:	f1a0 0350 	subhi.w	r3, r0, #80	; 0x50
 800259e:	f1c0 0350 	rsbls	r3, r0, #80	; 0x50
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 80025a2:	2a0a      	cmp	r2, #10
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 80025a4:	b29b      	uxth	r3, r3
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 80025a6:	d84f      	bhi.n	8002648 <XPT2046_Touch_Calibrate+0x314>
 80025a8:	2b0a      	cmp	r3, #10
 80025aa:	d84d      	bhi.n	8002648 <XPT2046_Touch_Calibrate+0x314>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 80025ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025b0:	4652      	mov	r2, sl
 80025b2:	465b      	mov	r3, fp
 80025b4:	f7fe f926 	bl	8000804 <__aeabi_ddiv>
 80025b8:	4d37      	ldr	r5, [pc, #220]	; (8002698 <XPT2046_Touch_Calibrate+0x364>)
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80025ba:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 80025bc:	e9c5 0100 	strd	r0, r1, [r5]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80025c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80025c4:	465b      	mov	r3, fp
 80025c6:	f7fe f91d 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80025ca:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80025cc:	e9c5 0102 	strd	r0, r1, [r5, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80025d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80025d4:	465b      	mov	r3, fp
 80025d6:	f7fe f915 	bl	8000804 <__aeabi_ddiv>

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80025da:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80025dc:	e9c5 0104 	strd	r0, r1, [r5, #16]
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80025e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80025e4:	465b      	mov	r3, fp
 80025e6:	f7fe f90d 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80025ea:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80025ec:	e9c5 0106 	strd	r0, r1, [r5, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80025f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80025f4:	465b      	mov	r3, fp
 80025f6:	f7fe f905 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 80025fa:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80025fc:	e9c5 0108 	strd	r0, r1, [r5, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002600:	465b      	mov	r3, fp
 8002602:	4640      	mov	r0, r8
 8002604:	4649      	mov	r1, r9
 8002606:	f7fe f8fd 	bl	8000804 <__aeabi_ddiv>


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800260a:	2400      	movs	r4, #0
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 800260c:	4606      	mov	r6, r0
 800260e:	460f      	mov	r7, r1
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002610:	9400      	str	r4, [sp, #0]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002612:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

    pStr = "Calibrate Succeed";
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002616:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800261a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800261e:	22f0      	movs	r2, #240	; 0xf0
 8002620:	4621      	mov	r1, r4
 8002622:	4620      	mov	r0, r4
 8002624:	f7fe fcae 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002628:	4623      	mov	r3, r4
 800262a:	21a0      	movs	r1, #160	; 0xa0
 800262c:	2034      	movs	r0, #52	; 0x34
 800262e:	4a1b      	ldr	r2, [pc, #108]	; (800269c <XPT2046_Touch_Calibrate+0x368>)
 8002630:	9500      	str	r5, [sp, #0]
 8002632:	f7fe fde9 	bl	8001208 <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 8002636:	f24c 3350 	movw	r3, #50000	; 0xc350
    for (i = 0; i < ulCount; i++) {
 800263a:	3401      	adds	r4, #1
 800263c:	429c      	cmp	r4, r3
 800263e:	d3fc      	bcc.n	800263a <XPT2046_Touch_Calibrate+0x306>

    return 1;
 8002640:	2001      	movs	r0, #1
    XPT2046_DelayUS(300000);

    return 0;


}
 8002642:	b01b      	add	sp, #108	; 0x6c
 8002644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002648:	2400      	movs	r4, #0
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 800264a:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800264e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002652:	22f0      	movs	r2, #240	; 0xf0
 8002654:	4621      	mov	r1, r4
 8002656:	4620      	mov	r0, r4
 8002658:	9400      	str	r4, [sp, #0]
 800265a:	f7fe fc93 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 800265e:	4623      	mov	r3, r4
 8002660:	21a0      	movs	r1, #160	; 0xa0
 8002662:	2040      	movs	r0, #64	; 0x40
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <XPT2046_Touch_Calibrate+0x36c>)
 8002666:	9500      	str	r5, [sp, #0]
 8002668:	f7fe fdce 	bl	8001208 <LCD_DrawString_Color>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 800266c:	4623      	mov	r3, r4
 800266e:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <XPT2046_Touch_Calibrate+0x370>)
 8002670:	21b0      	movs	r1, #176	; 0xb0
 8002672:	2054      	movs	r0, #84	; 0x54
 8002674:	9500      	str	r5, [sp, #0]
 8002676:	f7fe fdc7 	bl	8001208 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 800267a:	4623      	mov	r3, r4
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <XPT2046_Touch_Calibrate+0x374>)
 800267e:	3301      	adds	r3, #1
 8002680:	4293      	cmp	r3, r2
 8002682:	d3fc      	bcc.n	800267e <XPT2046_Touch_Calibrate+0x34a>
    return 0;
 8002684:	2000      	movs	r0, #0
}
 8002686:	b01b      	add	sp, #108	; 0x6c
 8002688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268c:	08007b80 	.word	0x08007b80
 8002690:	000186a0 	.word	0x000186a0
 8002694:	08007b98 	.word	0x08007b98
 8002698:	20000008 	.word	0x20000008
 800269c:	08007b9c 	.word	0x08007b9c
 80026a0:	08007bb0 	.word	0x08007bb0
 80026a4:	08007bc0 	.word	0x08007bc0
 80026a8:	000493e0 	.word	0x000493e0

080026ac <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80026ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	b083      	sub	sp, #12
 80026b2:	4683      	mov	fp, r0
    uint8_t ucRet = 1;

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80026b4:	a801      	add	r0, sp, #4
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80026b6:	468a      	mov	sl, r1
    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80026b8:	f7ff fd8c 	bl	80021d4 <XPT2046_ReadAdc_Smooth_XY>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d048      	beq.n	8002752 <XPT2046_Get_TouchedPoint+0xa6>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026c0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80026c4:	f7fd ff0a 	bl	80004dc <__aeabi_i2d>
 80026c8:	4606      	mov	r6, r0
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80026ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026ce:	460f      	mov	r7, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80026d0:	f7fd ff04 	bl	80004dc <__aeabi_i2d>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026d4:	e9da 2300 	ldrd	r2, r3, [sl]
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026dc:	4630      	mov	r0, r6
 80026de:	4639      	mov	r1, r7
 80026e0:	f7fd ff66 	bl	80005b0 <__aeabi_dmul>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80026e4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026e8:	4680      	mov	r8, r0
 80026ea:	4689      	mov	r9, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd ff5e 	bl	80005b0 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd fda2 	bl	8000244 <__adddf3>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002700:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8002704:	f7fd fd9e 	bl	8000244 <__adddf3>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002708:	f7fe fa2a 	bl	8000b60 <__aeabi_d2uiz>
 800270c:	4603      	mov	r3, r0
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800270e:	4639      	mov	r1, r7
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002710:	f8ab 3000 	strh.w	r3, [fp]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002714:	4630      	mov	r0, r6
 8002716:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800271a:	f7fd ff49 	bl	80005b0 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002726:	4614      	mov	r4, r2
 8002728:	461d      	mov	r5, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800272a:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800272e:	f7fd ff3f 	bl	80005b0 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd fd83 	bl	8000244 <__adddf3>
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800273e:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8002742:	f7fd fd7f 	bl	8000244 <__adddf3>
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002746:	f7fe fa0b 	bl	8000b60 <__aeabi_d2uiz>
 800274a:	4603      	mov	r3, r0
    uint8_t ucRet = 1;
 800274c:	2001      	movs	r0, #1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800274e:	f8ab 3002 	strh.w	r3, [fp, #2]
    } else ucRet = 0;

    return ucRet;


}
 8002752:	b003      	add	sp, #12
 8002754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800275a:	490d      	ldr	r1, [pc, #52]	; (8002790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800277e:	f7ff fccf 	bl	8002120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f001 ff2b 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002786:	f7ff fa01 	bl	8001b8c <main>
  bx lr
 800278a:	4770      	bx	lr
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002790:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002794:	08007fc4 	.word	0x08007fc4
  ldr r2, =_sbss
 8002798:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800279c:	200003d8 	.word	0x200003d8

080027a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC1_2_IRQHandler>
	...

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <HAL_InitTick+0x3c>)
{
 80027ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ae:	7811      	ldrb	r1, [r2, #0]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_InitTick+0x40>)
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	fbb2 f0f3 	udiv	r0, r2, r3
 80027bc:	f000 fbf6 	bl	8002fac <HAL_SYSTICK_Config>
 80027c0:	b908      	cbnz	r0, 80027c6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	2d0f      	cmp	r5, #15
 80027c4:	d901      	bls.n	80027ca <HAL_InitTick+0x26>
    return HAL_ERROR;
 80027c6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80027c8:	bd38      	pop	{r3, r4, r5, pc}
 80027ca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	4602      	mov	r2, r0
 80027ce:	4629      	mov	r1, r5
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 fb9e 	bl	8002f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_InitTick+0x44>)
 80027da:	4620      	mov	r0, r4
 80027dc:	601d      	str	r5, [r3, #0]
}
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	20000038 	.word	0x20000038
 80027e4:	20000004 	.word	0x20000004
 80027e8:	2000003c 	.word	0x2000003c

080027ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_Init+0x20>)
{
 80027ee:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f4:	f043 0310 	orr.w	r3, r3, #16
 80027f8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fa:	f000 fb79 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	200f      	movs	r0, #15
 8002800:	f7ff ffd0 	bl	80027a4 <HAL_InitTick>
  HAL_MspInit();
 8002804:	f7ff fb46 	bl	8001e94 <HAL_MspInit>
}
 8002808:	2000      	movs	r0, #0
 800280a:	bd08      	pop	{r3, pc}
 800280c:	40022000 	.word	0x40022000

08002810 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_IncTick+0x10>)
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_IncTick+0x14>)
 8002814:	6811      	ldr	r1, [r2, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	440b      	add	r3, r1
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200003c4 	.word	0x200003c4
 8002824:	20000038 	.word	0x20000038

08002828 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002828:	4b01      	ldr	r3, [pc, #4]	; (8002830 <HAL_GetTick+0x8>)
 800282a:	6818      	ldr	r0, [r3, #0]
}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200003c4 	.word	0x200003c4

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fff6 	bl	8002828 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800283e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002840:	d002      	beq.n	8002848 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_Delay+0x20>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	1b40      	subs	r0, r0, r5
 800284e:	42a0      	cmp	r0, r4
 8002850:	d3fa      	bcc.n	8002848 <HAL_Delay+0x14>
  {
  }
}
 8002852:	bd38      	pop	{r3, r4, r5, pc}
 8002854:	20000038 	.word	0x20000038

08002858 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800285c:	2500      	movs	r5, #0
{
 800285e:	b083      	sub	sp, #12
 8002860:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002862:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002864:	f7ff ffe0 	bl	8002828 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	05d7      	lsls	r7, r2, #23
 800286e:	d472      	bmi.n	8002956 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4607      	mov	r7, r0
 8002874:	05d5      	lsls	r5, r2, #23
 8002876:	d403      	bmi.n	8002880 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800287a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800287e:	d01e      	beq.n	80028be <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002880:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_ADC_PollForConversion+0x154>)
 8002882:	2002      	movs	r0, #2
 8002884:	681d      	ldr	r5, [r3, #0]
 8002886:	f001 fd6f 	bl	8004368 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800288a:	6833      	ldr	r3, [r6, #0]
 800288c:	4a48      	ldr	r2, [pc, #288]	; (80029b0 <HAL_ADC_PollForConversion+0x158>)
 800288e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002890:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002894:	4211      	tst	r1, r2
 8002896:	d125      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x8c>
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800289e:	4211      	tst	r1, r2
 80028a0:	d120      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x8c>
 80028a2:	6919      	ldr	r1, [r3, #16]
 80028a4:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_ADC_PollForConversion+0x15c>)
 80028a6:	4211      	tst	r1, r2
 80028a8:	d17e      	bne.n	80029a8 <HAL_ADC_PollForConversion+0x150>
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80028b0:	4211      	tst	r1, r2
 80028b2:	bf14      	ite	ne
 80028b4:	2029      	movne	r0, #41	; 0x29
 80028b6:	2014      	moveq	r0, #20
 80028b8:	e01e      	b.n	80028f8 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 80028ba:	1c60      	adds	r0, r4, #1
 80028bc:	d154      	bne.n	8002968 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	0791      	lsls	r1, r2, #30
 80028c2:	d5fa      	bpl.n	80028ba <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028c4:	f06f 0212 	mvn.w	r2, #18
 80028c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ca:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028dc:	d055      	beq.n	800298a <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028de:	2000      	movs	r0, #0
}
 80028e0:	b003      	add	sp, #12
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	4a33      	ldr	r2, [pc, #204]	; (80029b4 <HAL_ADC_PollForConversion+0x15c>)
 80028e8:	4211      	tst	r1, r2
 80028ea:	d12a      	bne.n	8002942 <HAL_ADC_PollForConversion+0xea>
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80028f2:	4211      	tst	r1, r2
 80028f4:	d125      	bne.n	8002942 <HAL_ADC_PollForConversion+0xea>
 80028f6:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028f8:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028fc:	9a01      	ldr	r2, [sp, #4]
 80028fe:	4295      	cmp	r5, r2
 8002900:	d809      	bhi.n	8002916 <HAL_ADC_PollForConversion+0xbe>
 8002902:	e7df      	b.n	80028c4 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002904:	9b01      	ldr	r3, [sp, #4]
 8002906:	42ab      	cmp	r3, r5
 8002908:	d311      	bcc.n	800292e <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002910:	9b01      	ldr	r3, [sp, #4]
 8002912:	42ab      	cmp	r3, r5
 8002914:	d237      	bcs.n	8002986 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 8002916:	1c62      	adds	r2, r4, #1
 8002918:	d0f7      	beq.n	800290a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800291a:	2c00      	cmp	r4, #0
 800291c:	d0f2      	beq.n	8002904 <HAL_ADC_PollForConversion+0xac>
 800291e:	f7ff ff83 	bl	8002828 <HAL_GetTick>
 8002922:	1bc0      	subs	r0, r0, r7
 8002924:	42a0      	cmp	r0, r4
 8002926:	d9f0      	bls.n	800290a <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002928:	9b01      	ldr	r3, [sp, #4]
 800292a:	42ab      	cmp	r3, r5
 800292c:	d2ed      	bcs.n	800290a <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 800292e:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8002930:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002932:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002934:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800293e:	b003      	add	sp, #12
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002942:	6919      	ldr	r1, [r3, #16]
 8002944:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_ADC_PollForConversion+0x160>)
 8002946:	4211      	tst	r1, r2
 8002948:	d114      	bne.n	8002974 <HAL_ADC_PollForConversion+0x11c>
 800294a:	68d9      	ldr	r1, [r3, #12]
 800294c:	4211      	tst	r1, r2
 800294e:	bf14      	ite	ne
 8002950:	20fc      	movne	r0, #252	; 0xfc
 8002952:	2054      	moveq	r0, #84	; 0x54
 8002954:	e7d0      	b.n	80028f8 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800295a:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295e:	f043 0320 	orr.w	r3, r3, #32
 8002962:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8002964:	b003      	add	sp, #12
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002968:	b934      	cbnz	r4, 8002978 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f012 0202 	ands.w	r2, r2, #2
 8002970:	d1a5      	bne.n	80028be <HAL_ADC_PollForConversion+0x66>
 8002972:	e7dd      	b.n	8002930 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002974:	20fc      	movs	r0, #252	; 0xfc
 8002976:	e7bf      	b.n	80028f8 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002978:	f7ff ff56 	bl	8002828 <HAL_GetTick>
 800297c:	1bc3      	subs	r3, r0, r7
 800297e:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002980:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002982:	d99c      	bls.n	80028be <HAL_ADC_PollForConversion+0x66>
 8002984:	e7f1      	b.n	800296a <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002986:	6833      	ldr	r3, [r6, #0]
 8002988:	e79c      	b.n	80028c4 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800298a:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800298c:	2800      	cmp	r0, #0
 800298e:	d1a6      	bne.n	80028de <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002990:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002996:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002998:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800299a:	04db      	lsls	r3, r3, #19
 800299c:	d49f      	bmi.n	80028de <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	62b3      	str	r3, [r6, #40]	; 0x28
 80029a6:	e79b      	b.n	80028e0 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029a8:	2029      	movs	r0, #41	; 0x29
 80029aa:	e7a5      	b.n	80028f8 <HAL_ADC_PollForConversion+0xa0>
 80029ac:	20000004 	.word	0x20000004
 80029b0:	24924924 	.word	0x24924924
 80029b4:	12492492 	.word	0x12492492
 80029b8:	00249249 	.word	0x00249249

080029bc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029bc:	6803      	ldr	r3, [r0, #0]
 80029be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80029c4:	2300      	movs	r3, #0
{ 
 80029c6:	b530      	push	{r4, r5, lr}
 80029c8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80029ca:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d074      	beq.n	8002abe <HAL_ADC_ConfigChannel+0xfa>
 80029d4:	2301      	movs	r3, #1
 80029d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029da:	684b      	ldr	r3, [r1, #4]
 80029dc:	4602      	mov	r2, r0
 80029de:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029e0:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80029e2:	d932      	bls.n	8002a4a <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e4:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80029ea:	d84e      	bhi.n	8002a8a <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029ec:	f04f 0c1f 	mov.w	ip, #31
 80029f0:	6808      	ldr	r0, [r1, #0]
 80029f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80029f4:	3b23      	subs	r3, #35	; 0x23
 80029f6:	fa00 fe03 	lsl.w	lr, r0, r3
 80029fa:	fa0c f303 	lsl.w	r3, ip, r3
 80029fe:	ea25 0303 	bic.w	r3, r5, r3
 8002a02:	ea43 030e 	orr.w	r3, r3, lr
 8002a06:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a08:	2809      	cmp	r0, #9
 8002a0a:	d930      	bls.n	8002a6e <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a0c:	f04f 0c07 	mov.w	ip, #7
 8002a10:	688d      	ldr	r5, [r1, #8]
 8002a12:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002a16:	68e3      	ldr	r3, [r4, #12]
 8002a18:	391e      	subs	r1, #30
 8002a1a:	408d      	lsls	r5, r1
 8002a1c:	fa0c f101 	lsl.w	r1, ip, r1
 8002a20:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a24:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a28:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a2a:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a2c:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a2e:	d844      	bhi.n	8002aba <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_ADC_ConfigChannel+0x128>)
 8002a32:	429c      	cmp	r4, r3
 8002a34:	d038      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a40:	2300      	movs	r3, #0
 8002a42:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002a46:	b003      	add	sp, #12
 8002a48:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a4a:	f04f 0c1f 	mov.w	ip, #31
 8002a4e:	6808      	ldr	r0, [r1, #0]
 8002a50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a54:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002a56:	3b05      	subs	r3, #5
 8002a58:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a5c:	fa0c f303 	lsl.w	r3, ip, r3
 8002a60:	ea25 0303 	bic.w	r3, r5, r3
 8002a64:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a68:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a6a:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a6c:	d8ce      	bhi.n	8002a0c <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a6e:	2507      	movs	r5, #7
 8002a70:	6889      	ldr	r1, [r1, #8]
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a78:	4081      	lsls	r1, r0
 8002a7a:	fa05 f000 	lsl.w	r0, r5, r0
 8002a7e:	ea23 0300 	bic.w	r3, r3, r0
 8002a82:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a86:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a88:	e7da      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a8a:	f04f 0c1f 	mov.w	ip, #31
 8002a8e:	6808      	ldr	r0, [r1, #0]
 8002a90:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002a92:	3b41      	subs	r3, #65	; 0x41
 8002a94:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a98:	fa0c f303 	lsl.w	r3, ip, r3
 8002a9c:	ea25 0303 	bic.w	r3, r5, r3
 8002aa0:	ea43 030e 	orr.w	r3, r3, lr
 8002aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002aa6:	e7af      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002aa8:	68a3      	ldr	r3, [r4, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	d405      	bmi.n	8002aba <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002aae:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab6:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab8:	d004      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aba:	2000      	movs	r0, #0
 8002abc:	e7c0      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002abe:	2002      	movs	r0, #2
}
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_ADC_ConfigChannel+0x12c>)
 8002ac6:	490b      	ldr	r1, [pc, #44]	; (8002af4 <HAL_ADC_ConfigChannel+0x130>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fba1 1303 	umull	r1, r3, r1, r3
 8002ace:	0c9b      	lsrs	r3, r3, #18
 8002ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ad8:	9b01      	ldr	r3, [sp, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ed      	beq.n	8002aba <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002ade:	9b01      	ldr	r3, [sp, #4]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ae4:	9b01      	ldr	r3, [sp, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x11a>
 8002aea:	e7e6      	b.n	8002aba <HAL_ADC_ConfigChannel+0xf6>
 8002aec:	40012400 	.word	0x40012400
 8002af0:	20000004 	.word	0x20000004
 8002af4:	431bde83 	.word	0x431bde83

08002af8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002af8:	2300      	movs	r3, #0
{
 8002afa:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002afc:	6802      	ldr	r2, [r0, #0]
{
 8002afe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002b00:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b02:	6893      	ldr	r3, [r2, #8]
 8002b04:	07d9      	lsls	r1, r3, #31
 8002b06:	d427      	bmi.n	8002b58 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <ADC_Enable+0x80>)
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	481b      	ldr	r0, [pc, #108]	; (8002b7c <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002b10:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b12:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8002b16:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1a:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002b1c:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002b20:	9b01      	ldr	r3, [sp, #4]
 8002b22:	b12b      	cbz	r3, 8002b30 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8002b24:	9b01      	ldr	r3, [sp, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f9      	bne.n	8002b24 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b30:	f7ff fe7a 	bl	8002828 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b34:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b36:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	07da      	lsls	r2, r3, #31
 8002b3c:	d40c      	bmi.n	8002b58 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b3e:	f7ff fe73 	bl	8002828 <HAL_GetTick>
 8002b42:	1b43      	subs	r3, r0, r5
 8002b44:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b46:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b48:	d903      	bls.n	8002b52 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	f012 0201 	ands.w	r2, r2, #1
 8002b50:	d005      	beq.n	8002b5e <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	07db      	lsls	r3, r3, #31
 8002b56:	d5f2      	bpl.n	8002b3e <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b58:	2000      	movs	r0, #0
}
 8002b5a:	b003      	add	sp, #12
 8002b5c:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002b62:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b6e:	4303      	orrs	r3, r0
 8002b70:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002b72:	b003      	add	sp, #12
 8002b74:	bd30      	pop	{r4, r5, pc}
 8002b76:	bf00      	nop
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002b80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d038      	beq.n	8002bfa <HAL_ADC_Start+0x7a>
 8002b88:	2301      	movs	r3, #1
{
 8002b8a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002b8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002b90:	4604      	mov	r4, r0
 8002b92:	f7ff ffb1 	bl	8002af8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002b96:	bb60      	cbnz	r0, 8002bf2 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002b98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	4929      	ldr	r1, [pc, #164]	; (8002c44 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002baa:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002bac:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bae:	d026      	beq.n	8002bfe <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bb6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bb8:	6853      	ldr	r3, [r2, #4]
 8002bba:	0559      	lsls	r1, r3, #21
 8002bbc:	d42b      	bmi.n	8002c16 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002bc0:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bc6:	bf18      	it	ne
 8002bc8:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002bca:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bce:	bf18      	it	ne
 8002bd0:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bd6:	f06f 0302 	mvn.w	r3, #2
 8002bda:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bdc:	6893      	ldr	r3, [r2, #8]
 8002bde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002be2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002be6:	d01d      	beq.n	8002c24 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002be8:	6893      	ldr	r3, [r2, #8]
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	6093      	str	r3, [r2, #8]
}
 8002bf0:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002bf8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002bfa:	2002      	movs	r0, #2
}
 8002bfc:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_ADC_Start+0xc8>)
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8002c06:	d0d3      	beq.n	8002bb0 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c0e:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	055b      	lsls	r3, r3, #21
 8002c14:	d5d3      	bpl.n	8002bbe <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c22:	e7cc      	b.n	8002bbe <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_ADC_Start+0xc4>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d004      	beq.n	8002c34 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c2a:	6893      	ldr	r3, [r2, #8]
 8002c2c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002c30:	6093      	str	r3, [r2, #8]
}
 8002c32:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c38:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c3a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002c3e:	d1d3      	bne.n	8002be8 <HAL_ADC_Start+0x68>
 8002c40:	e7f3      	b.n	8002c2a <HAL_ADC_Start+0xaa>
 8002c42:	bf00      	nop
 8002c44:	40012800 	.word	0x40012800
 8002c48:	40012400 	.word	0x40012400

08002c4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c4e:	6803      	ldr	r3, [r0, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	07d4      	lsls	r4, r2, #31
 8002c54:	d401      	bmi.n	8002c5a <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c56:	2000      	movs	r0, #0
}
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002c64:	f7ff fde0 	bl	8002828 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c68:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c6a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	07d9      	lsls	r1, r3, #31
 8002c70:	d5f1      	bpl.n	8002c56 <ADC_ConversionStop_Disable+0xa>
 8002c72:	e002      	b.n	8002c7a <ADC_ConversionStop_Disable+0x2e>
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d5ed      	bpl.n	8002c56 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c7a:	f7ff fdd5 	bl	8002828 <HAL_GetTick>
 8002c7e:	1b43      	subs	r3, r0, r5
 8002c80:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c82:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c84:	d9f6      	bls.n	8002c74 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	07d2      	lsls	r2, r2, #31
 8002c8a:	d5f3      	bpl.n	8002c74 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c98:	4303      	orrs	r3, r0
 8002c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
 8002c9e:	bf00      	nop

08002ca0 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d075      	beq.n	8002d90 <HAL_ADC_Init+0xf0>
{
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ca8:	4604      	mov	r4, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d052      	beq.n	8002d54 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff ffcc 	bl	8002c4c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cb6:	f013 0310 	ands.w	r3, r3, #16
 8002cba:	d145      	bne.n	8002d48 <HAL_ADC_Init+0xa8>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d143      	bne.n	8002d48 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8002cc0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cc2:	4d4a      	ldr	r5, [pc, #296]	; (8002dec <HAL_ADC_Init+0x14c>)
 8002cc4:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002cc6:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002cca:	f021 0102 	bic.w	r1, r1, #2
 8002cce:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cd2:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cd6:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd8:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cda:	d053      	beq.n	8002d84 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cdc:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cde:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8002ce2:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ce4:	68a5      	ldr	r5, [r4, #8]
 8002ce6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002cea:	d039      	beq.n	8002d60 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cec:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cf0:	2d01      	cmp	r5, #1
 8002cf2:	bf0c      	ite	eq
 8002cf4:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002cf8:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cfc:	f1be 0f01 	cmp.w	lr, #1
 8002d00:	d052      	beq.n	8002da8 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 8002d02:	6856      	ldr	r6, [r2, #4]
 8002d04:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002d08:	ea46 060c 	orr.w	r6, r6, ip
 8002d0c:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d0e:	6897      	ldr	r7, [r2, #8]
 8002d10:	4e37      	ldr	r6, [pc, #220]	; (8002df0 <HAL_ADC_Init+0x150>)
 8002d12:	403e      	ands	r6, r7
 8002d14:	430e      	orrs	r6, r1
 8002d16:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d18:	2d01      	cmp	r5, #1
 8002d1a:	d02f      	beq.n	8002d7c <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8002d1c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002d1e:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8002d22:	ea4c 0303 	orr.w	r3, ip, r3
 8002d26:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_ADC_Init+0x154>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	4299      	cmp	r1, r3
 8002d30:	d030      	beq.n	8002d94 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d36:	f023 0312 	bic.w	r3, r3, #18
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d42:	4303      	orrs	r3, r0
 8002d44:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002d4a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002d56:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002d5a:	f7ff f8bd 	bl	8001ed8 <HAL_ADC_MspInit>
 8002d5e:	e7a6      	b.n	8002cae <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d60:	7d27      	ldrb	r7, [r4, #20]
 8002d62:	2f01      	cmp	r7, #1
 8002d64:	d01f      	beq.n	8002da6 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d72:	6895      	ldr	r5, [r2, #8]
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_ADC_Init+0x150>)
 8002d76:	402b      	ands	r3, r5
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d7c:	6923      	ldr	r3, [r4, #16]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	051b      	lsls	r3, r3, #20
 8002d82:	e7cb      	b.n	8002d1c <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d84:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8002d88:	bf08      	it	eq
 8002d8a:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8002d8e:	e7a5      	b.n	8002cdc <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8002d90:	2001      	movs	r0, #1
}
 8002d92:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002d94:	2300      	movs	r3, #0
 8002d96:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002da6:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002da8:	b1c6      	cbz	r6, 8002ddc <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dac:	f046 0620 	orr.w	r6, r6, #32
 8002db0:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002db4:	f046 0601 	orr.w	r6, r6, #1
 8002db8:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002dba:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dbc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002dc0:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002dc4:	ea46 060c 	orr.w	r6, r6, ip
 8002dc8:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002dca:	6897      	ldr	r7, [r2, #8]
 8002dcc:	4e08      	ldr	r6, [pc, #32]	; (8002df0 <HAL_ADC_Init+0x150>)
 8002dce:	ea06 0607 	and.w	r6, r6, r7
 8002dd2:	ea46 0601 	orr.w	r6, r6, r1
 8002dd6:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dd8:	d19e      	bne.n	8002d18 <HAL_ADC_Init+0x78>
 8002dda:	e7cf      	b.n	8002d7c <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ddc:	69a6      	ldr	r6, [r4, #24]
 8002dde:	3e01      	subs	r6, #1
 8002de0:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8002de4:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8002de8:	e7e7      	b.n	8002dba <HAL_ADC_Init+0x11a>
 8002dea:	bf00      	nop
 8002dec:	40013c00 	.word	0x40013c00
 8002df0:	ffe1f7fd 	.word	0xffe1f7fd
 8002df4:	ff1f0efe 	.word	0xff1f0efe

08002df8 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002df8:	2300      	movs	r3, #0
{
 8002dfa:	b570      	push	{r4, r5, r6, lr}
 8002dfc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002dfe:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e00:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d05f      	beq.n	8002ec8 <HAL_ADCEx_Calibration_Start+0xd0>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e0e:	4604      	mov	r4, r0
 8002e10:	f7ff ff1c 	bl	8002c4c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e14:	4605      	mov	r5, r0
 8002e16:	b128      	cbz	r0, 8002e24 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e18:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8002e1a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8002e1c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002e20:	b002      	add	sp, #8
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e26:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2c:	f023 0302 	bic.w	r3, r3, #2
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e36:	2002      	movs	r0, #2
 8002e38:	6816      	ldr	r6, [r2, #0]
 8002e3a:	f001 fa95 	bl	8004368 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e3e:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002e42:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002e44:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002e46:	9b01      	ldr	r3, [sp, #4]
 8002e48:	b12b      	cbz	r3, 8002e56 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002e4a:	9b01      	ldr	r3, [sp, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002e50:	9b01      	ldr	r3, [sp, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff fe4e 	bl	8002af8 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	6893      	ldr	r3, [r2, #8]
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002e66:	f7ff fcdf 	bl	8002828 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e6a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002e6c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	0711      	lsls	r1, r2, #28
 8002e72:	d50b      	bpl.n	8002e8c <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e74:	f7ff fcd8 	bl	8002828 <HAL_GetTick>
 8002e78:	1b83      	subs	r3, r0, r6
 8002e7a:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e7c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e7e:	d902      	bls.n	8002e86 <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	0712      	lsls	r2, r2, #28
 8002e84:	d424      	bmi.n	8002ed0 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	0710      	lsls	r0, r2, #28
 8002e8a:	d4f3      	bmi.n	8002e74 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	f042 0204 	orr.w	r2, r2, #4
 8002e92:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002e94:	f7ff fcc8 	bl	8002828 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e98:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002e9a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0759      	lsls	r1, r3, #29
 8002ea0:	d50b      	bpl.n	8002eba <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ea2:	f7ff fcc1 	bl	8002828 <HAL_GetTick>
 8002ea6:	1b83      	subs	r3, r0, r6
 8002ea8:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eaa:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002eac:	d902      	bls.n	8002eb4 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	0752      	lsls	r2, r2, #29
 8002eb2:	d40d      	bmi.n	8002ed0 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	075b      	lsls	r3, r3, #29
 8002eb8:	d4f3      	bmi.n	8002ea2 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ebc:	f023 0303 	bic.w	r3, r3, #3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec6:	e7a7      	b.n	8002e18 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002ec8:	2502      	movs	r5, #2
}
 8002eca:	4628      	mov	r0, r5
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002ed0:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002ed2:	2200      	movs	r2, #0
}
 8002ed4:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002ed8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002edc:	f023 0312 	bic.w	r3, r3, #18
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002ee6:	b002      	add	sp, #8
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
 8002eea:	bf00      	nop
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef0:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4906      	ldr	r1, [pc, #24]	; (8002f10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ef6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b500      	push	{lr}
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1e:	f1c3 0e07 	rsb	lr, r3, #7
 8002f22:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2a:	bf28      	it	cs
 8002f2c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f30:	f1bc 0f06 	cmp.w	ip, #6
 8002f34:	d91b      	bls.n	8002f6e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f36:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002f40:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 3cff 	mov.w	ip, #4294967295
 8002f48:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002f4c:	ea21 010c 	bic.w	r1, r1, ip
 8002f50:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002f52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002f58:	db0c      	blt.n	8002f74 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	0109      	lsls	r1, r1, #4
 8002f5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f60:	b2c9      	uxtb	r1, r1
 8002f62:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f66:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f6e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f70:	4613      	mov	r3, r2
 8002f72:	e7e7      	b.n	8002f44 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_NVIC_SetPriority+0x78>)
 8002f76:	f000 000f 	and.w	r0, r0, #15
 8002f7a:	0109      	lsls	r1, r1, #4
 8002f7c:	b2c9      	uxtb	r1, r1
 8002f7e:	4403      	add	r3, r0
 8002f80:	7619      	strb	r1, [r3, #24]
 8002f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00
 8002f8c:	e000ecfc 	.word	0xe000ecfc

08002f90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f90:	2800      	cmp	r0, #0
 8002f92:	db07      	blt.n	8002fa4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f94:	2301      	movs	r3, #1
 8002f96:	f000 011f 	and.w	r1, r0, #31
 8002f9a:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_NVIC_EnableIRQ+0x18>)
 8002f9c:	0940      	lsrs	r0, r0, #5
 8002f9e:	408b      	lsls	r3, r1
 8002fa0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fac:	3801      	subs	r0, #1
 8002fae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002fb2:	d20f      	bcs.n	8002fd4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	4c05      	ldr	r4, [pc, #20]	; (8002fd8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fca:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002fce:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd0:	6119      	str	r1, [r3, #16]
 8002fd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe0:	680e      	ldr	r6, [r1, #0]
{
 8002fe2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe4:	2e00      	cmp	r6, #0
 8002fe6:	f000 80be 	beq.w	8003166 <HAL_GPIO_Init+0x18a>
 8002fea:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fec:	4f85      	ldr	r7, [pc, #532]	; (8003204 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8002fee:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002ff0:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff2:	4d85      	ldr	r5, [pc, #532]	; (8003208 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8002ff4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800320c <HAL_GPIO_Init+0x230>
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002ffa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffc:	fa36 f403 	lsrs.w	r4, r6, r3
 8003000:	f102 0204 	add.w	r2, r2, #4
 8003004:	f000 80af 	beq.w	8003166 <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8003008:	2401      	movs	r4, #1
 800300a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800300c:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003010:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003014:	d1f1      	bne.n	8002ffa <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003016:	684e      	ldr	r6, [r1, #4]
 8003018:	2e12      	cmp	r6, #18
 800301a:	f200 80a7 	bhi.w	800316c <HAL_GPIO_Init+0x190>
 800301e:	2e12      	cmp	r6, #18
 8003020:	d81a      	bhi.n	8003058 <HAL_GPIO_Init+0x7c>
 8003022:	e8df f006 	tbb	[pc, r6]
 8003026:	c2b0      	.short	0xc2b0
 8003028:	1919d7be 	.word	0x1919d7be
 800302c:	19191919 	.word	0x19191919
 8003030:	19191919 	.word	0x19191919
 8003034:	ba191919 	.word	0xba191919
 8003038:	c5          	.byte	0xc5
 8003039:	00          	.byte	0x00
 800303a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003210 <HAL_GPIO_Init+0x234>
 800303e:	4576      	cmp	r6, lr
 8003040:	f000 80a1 	beq.w	8003186 <HAL_GPIO_Init+0x1aa>
 8003044:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003048:	4576      	cmp	r6, lr
 800304a:	f000 809c 	beq.w	8003186 <HAL_GPIO_Init+0x1aa>
 800304e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8003052:	4576      	cmp	r6, lr
 8003054:	f000 8097 	beq.w	8003186 <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003058:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800305c:	bf9c      	itt	ls
 800305e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003060:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003062:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003066:	bf84      	itt	hi
 8003068:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800306c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003070:	f8de 4000 	ldr.w	r4, [lr]
 8003074:	fa0a f90b 	lsl.w	r9, sl, fp
 8003078:	fa06 fb0b 	lsl.w	fp, r6, fp
 800307c:	ea24 040b 	bic.w	r4, r4, fp
 8003080:	ea44 0409 	orr.w	r4, r4, r9
 8003084:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003088:	684c      	ldr	r4, [r1, #4]
 800308a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800308e:	f000 8082 	beq.w	8003196 <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003092:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003096:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800309a:	f04e 0e01 	orr.w	lr, lr, #1
 800309e:	f8c7 e018 	str.w	lr, [r7, #24]
 80030a2:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030a6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030aa:	f00e 0e01 	and.w	lr, lr, #1
 80030ae:	f8cd e004 	str.w	lr, [sp, #4]
 80030b2:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80030b6:	f023 0e03 	bic.w	lr, r3, #3
 80030ba:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80030be:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80030c2:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030c6:	fa06 f609 	lsl.w	r6, r6, r9
 80030ca:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030ce:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003214 <HAL_GPIO_Init+0x238>
 80030d2:	4558      	cmp	r0, fp
 80030d4:	d01b      	beq.n	800310e <HAL_GPIO_Init+0x132>
 80030d6:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80030da:	4558      	cmp	r0, fp
 80030dc:	d073      	beq.n	80031c6 <HAL_GPIO_Init+0x1ea>
 80030de:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003218 <HAL_GPIO_Init+0x23c>
 80030e2:	4558      	cmp	r0, fp
 80030e4:	d068      	beq.n	80031b8 <HAL_GPIO_Init+0x1dc>
 80030e6:	f8df b134 	ldr.w	fp, [pc, #308]	; 800321c <HAL_GPIO_Init+0x240>
 80030ea:	4558      	cmp	r0, fp
 80030ec:	d07c      	beq.n	80031e8 <HAL_GPIO_Init+0x20c>
 80030ee:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003220 <HAL_GPIO_Init+0x244>
 80030f2:	4558      	cmp	r0, fp
 80030f4:	d07f      	beq.n	80031f6 <HAL_GPIO_Init+0x21a>
 80030f6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003224 <HAL_GPIO_Init+0x248>
 80030fa:	4558      	cmp	r0, fp
 80030fc:	bf0c      	ite	eq
 80030fe:	f04f 0b05 	moveq.w	fp, #5
 8003102:	f04f 0b06 	movne.w	fp, #6
 8003106:	fa0b f909 	lsl.w	r9, fp, r9
 800310a:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800310e:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003112:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003114:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003118:	bf14      	ite	ne
 800311a:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800311e:	ea26 060c 	biceq.w	r6, r6, ip
 8003122:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003124:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003126:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800312a:	bf14      	ite	ne
 800312c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003130:	ea26 060c 	biceq.w	r6, r6, ip
 8003134:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003136:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003138:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800313c:	bf14      	ite	ne
 800313e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003142:	ea26 060c 	biceq.w	r6, r6, ip
 8003146:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003148:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800314c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800314e:	d01f      	beq.n	8003190 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003150:	ea44 040c 	orr.w	r4, r4, ip
 8003154:	60ec      	str	r4, [r5, #12]
 8003156:	680e      	ldr	r6, [r1, #0]
	position++;
 8003158:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	fa36 f403 	lsrs.w	r4, r6, r3
 800315e:	f102 0204 	add.w	r2, r2, #4
 8003162:	f47f af51 	bne.w	8003008 <HAL_GPIO_Init+0x2c>
  }
}
 8003166:	b003      	add	sp, #12
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800316c:	4546      	cmp	r6, r8
 800316e:	d00a      	beq.n	8003186 <HAL_GPIO_Init+0x1aa>
 8003170:	f67f af63 	bls.w	800303a <HAL_GPIO_Init+0x5e>
 8003174:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003228 <HAL_GPIO_Init+0x24c>
 8003178:	4576      	cmp	r6, lr
 800317a:	d004      	beq.n	8003186 <HAL_GPIO_Init+0x1aa>
 800317c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003180:	4576      	cmp	r6, lr
 8003182:	f47f af69 	bne.w	8003058 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003186:	688e      	ldr	r6, [r1, #8]
 8003188:	bb3e      	cbnz	r6, 80031da <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800318a:	f04f 0a04 	mov.w	sl, #4
 800318e:	e763      	b.n	8003058 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003190:	ea24 040c 	bic.w	r4, r4, ip
 8003194:	60ec      	str	r4, [r5, #12]
 8003196:	680e      	ldr	r6, [r1, #0]
 8003198:	e72f      	b.n	8002ffa <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800319a:	68cc      	ldr	r4, [r1, #12]
 800319c:	f104 0a04 	add.w	sl, r4, #4
          break;
 80031a0:	e75a      	b.n	8003058 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031a2:	68cc      	ldr	r4, [r1, #12]
 80031a4:	f104 0a08 	add.w	sl, r4, #8
          break;
 80031a8:	e756      	b.n	8003058 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031aa:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80031ae:	e753      	b.n	8003058 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b0:	68cc      	ldr	r4, [r1, #12]
 80031b2:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80031b6:	e74f      	b.n	8003058 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031b8:	f04f 0b02 	mov.w	fp, #2
 80031bc:	fa0b f909 	lsl.w	r9, fp, r9
 80031c0:	ea46 0609 	orr.w	r6, r6, r9
 80031c4:	e7a3      	b.n	800310e <HAL_GPIO_Init+0x132>
 80031c6:	f04f 0b01 	mov.w	fp, #1
 80031ca:	fa0b f909 	lsl.w	r9, fp, r9
 80031ce:	ea46 0609 	orr.w	r6, r6, r9
 80031d2:	e79c      	b.n	800310e <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80031d4:	f04f 0a00 	mov.w	sl, #0
 80031d8:	e73e      	b.n	8003058 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031da:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031dc:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80031e0:	bf0c      	ite	eq
 80031e2:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80031e4:	6144      	strne	r4, [r0, #20]
 80031e6:	e737      	b.n	8003058 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031e8:	f04f 0b03 	mov.w	fp, #3
 80031ec:	fa0b f909 	lsl.w	r9, fp, r9
 80031f0:	ea46 0609 	orr.w	r6, r6, r9
 80031f4:	e78b      	b.n	800310e <HAL_GPIO_Init+0x132>
 80031f6:	f04f 0b04 	mov.w	fp, #4
 80031fa:	fa0b f909 	lsl.w	r9, fp, r9
 80031fe:	ea46 0609 	orr.w	r6, r6, r9
 8003202:	e784      	b.n	800310e <HAL_GPIO_Init+0x132>
 8003204:	40021000 	.word	0x40021000
 8003208:	40010400 	.word	0x40010400
 800320c:	10220000 	.word	0x10220000
 8003210:	10120000 	.word	0x10120000
 8003214:	40010800 	.word	0x40010800
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	40011800 	.word	0x40011800
 8003224:	40011c00 	.word	0x40011c00
 8003228:	10310000 	.word	0x10310000

0800322c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800322c:	6883      	ldr	r3, [r0, #8]
 800322e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003230:	bf14      	ite	ne
 8003232:	2001      	movne	r0, #1
 8003234:	2000      	moveq	r0, #0
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003238:	b902      	cbnz	r2, 800323c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800323a:	0409      	lsls	r1, r1, #16
 800323c:	6101      	str	r1, [r0, #16]
  }
}
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003246:	6951      	ldr	r1, [r2, #20]
 8003248:	4201      	tst	r1, r0
 800324a:	d100      	bne.n	800324e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800324c:	4770      	bx	lr
{
 800324e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003250:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003252:	f7ff fff5 	bl	8003240 <HAL_GPIO_EXTI_Callback>
}
 8003256:	bd08      	pop	{r3, pc}
 8003258:	40010400 	.word	0x40010400

0800325c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003260:	4680      	mov	r8, r0
 8003262:	460e      	mov	r6, r1
 8003264:	4617      	mov	r7, r2
 8003266:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003268:	f8d8 4000 	ldr.w	r4, [r8]
 800326c:	e004      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	6965      	ldr	r5, [r4, #20]
 8003270:	056a      	lsls	r2, r5, #21
 8003272:	d409      	bmi.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003274:	1c7b      	adds	r3, r7, #1
 8003276:	d121      	bne.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003278:	6960      	ldr	r0, [r4, #20]
 800327a:	ea26 0000 	bic.w	r0, r6, r0
 800327e:	b280      	uxth	r0, r0
 8003280:	2800      	cmp	r0, #0
 8003282:	d1f4      	bne.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003298:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800329c:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a8:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80032ac:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 80032b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7ff fab4 	bl	8002828 <HAL_GetTick>
 80032c0:	eba0 0009 	sub.w	r0, r0, r9
 80032c4:	42b8      	cmp	r0, r7
 80032c6:	d801      	bhi.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 80032c8:	2f00      	cmp	r7, #0
 80032ca:	d1cd      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032cc:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d0:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80032e6:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 80032ee:	e7c9      	b.n	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

080032f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	4606      	mov	r6, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f8:	e008      	b.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032fa:	6962      	ldr	r2, [r4, #20]
 80032fc:	06d2      	lsls	r2, r2, #27
 80032fe:	d41b      	bmi.n	8003338 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003300:	f7ff fa92 	bl	8002828 <HAL_GetTick>
 8003304:	1bc0      	subs	r0, r0, r7
 8003306:	42a8      	cmp	r0, r5
 8003308:	d807      	bhi.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800330a:	b135      	cbz	r5, 800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800330c:	6834      	ldr	r4, [r6, #0]
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003314:	d0f1      	beq.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003316:	2000      	movs	r0, #0
}
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800332a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003342:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003346:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800334a:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800334c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003352:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003356:	bf00      	nop

08003358 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	4605      	mov	r5, r0
 800335c:	460e      	mov	r6, r1
 800335e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003360:	682c      	ldr	r4, [r5, #0]
 8003362:	e001      	b.n	8003368 <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003364:	1c73      	adds	r3, r6, #1
 8003366:	d119      	bne.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003368:	6963      	ldr	r3, [r4, #20]
 800336a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800336e:	d113      	bne.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003370:	6960      	ldr	r0, [r4, #20]
 8003372:	0542      	lsls	r2, r0, #21
 8003374:	d5f6      	bpl.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003388:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338e:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003392:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003398:	2000      	movs	r0, #0
}
 800339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7ff fa44 	bl	8002828 <HAL_GetTick>
 80033a0:	1bc0      	subs	r0, r0, r7
 80033a2:	42b0      	cmp	r0, r6
 80033a4:	d801      	bhi.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 80033a6:	2e00      	cmp	r6, #0
 80033a8:	d1da      	bne.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033ba:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80033c2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80033c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033c8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	4605      	mov	r5, r0
 80033cc:	460e      	mov	r6, r1
 80033ce:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d0:	682c      	ldr	r4, [r5, #0]
 80033d2:	e001      	b.n	80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	1c73      	adds	r3, r6, #1
 80033d6:	d119      	bne.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d8:	6963      	ldr	r3, [r4, #20]
 80033da:	f013 0304 	ands.w	r3, r3, #4
 80033de:	d113      	bne.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	6960      	ldr	r0, [r4, #20]
 80033e2:	0542      	lsls	r2, r0, #21
 80033e4:	d5f6      	bpl.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ea:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80033fa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033fe:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003402:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003404:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003408:	2000      	movs	r0, #0
}
 800340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340c:	f7ff fa0c 	bl	8002828 <HAL_GetTick>
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	42b0      	cmp	r0, r6
 8003414:	d801      	bhi.n	800341a <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8003416:	2e00      	cmp	r6, #0
 8003418:	d1da      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800342a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003432:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003438 <I2C_RequestMemoryWrite>:
{
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343c:	6805      	ldr	r5, [r0, #0]
{
 800343e:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003440:	682b      	ldr	r3, [r5, #0]
{
 8003442:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003448:	4607      	mov	r7, r0
 800344a:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 800344e:	4688      	mov	r8, r1
 8003450:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003452:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003454:	e001      	b.n	800345a <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8003456:	1c71      	adds	r1, r6, #1
 8003458:	d110      	bne.n	800347c <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345a:	696c      	ldr	r4, [r5, #20]
 800345c:	07e3      	lsls	r3, r4, #31
 800345e:	d5fa      	bpl.n	8003456 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003460:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003464:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003466:	4653      	mov	r3, sl
 8003468:	4632      	mov	r2, r6
 800346a:	4638      	mov	r0, r7
 800346c:	492e      	ldr	r1, [pc, #184]	; (8003528 <I2C_RequestMemoryWrite+0xf0>)
 800346e:	f7ff fef5 	bl	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003472:	b160      	cbz	r0, 800348e <I2C_RequestMemoryWrite+0x56>
    return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
}
 8003476:	b003      	add	sp, #12
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7ff f9d4 	bl	8002828 <HAL_GetTick>
 8003480:	eba0 000a 	sub.w	r0, r0, sl
 8003484:	4286      	cmp	r6, r0
 8003486:	d31a      	bcc.n	80034be <I2C_RequestMemoryWrite+0x86>
 8003488:	b1ce      	cbz	r6, 80034be <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348a:	683d      	ldr	r5, [r7, #0]
 800348c:	e7e5      	b.n	800345a <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9001      	str	r0, [sp, #4]
 8003492:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003494:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003496:	9101      	str	r1, [sp, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a0:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	f7ff ff59 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d133      	bne.n	8003512 <I2C_RequestMemoryWrite+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034aa:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ae:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b0:	d121      	bne.n	80034f6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b2:	fa5f f289 	uxtb.w	r2, r9
 80034b6:	611a      	str	r2, [r3, #16]
}
 80034b8:	b003      	add	sp, #12
 80034ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034be:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80034c0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034c2:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c8:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ce:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80034d4:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034da:	680b      	ldr	r3, [r1, #0]
 80034dc:	05da      	lsls	r2, r3, #23
 80034de:	d506      	bpl.n	80034ee <I2C_RequestMemoryWrite+0xb6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80034e4:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e6:	643b      	str	r3, [r7, #64]	; 0x40
}
 80034e8:	b003      	add	sp, #12
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 80034ee:	2003      	movs	r0, #3
}
 80034f0:	b003      	add	sp, #12
 80034f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f6:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80034fa:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fc:	4652      	mov	r2, sl
 80034fe:	4631      	mov	r1, r6
 8003500:	4638      	mov	r0, r7
 8003502:	f7ff ff29 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003506:	b920      	cbnz	r0, 8003512 <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	fa5f f389 	uxtb.w	r3, r9
 800350e:	6113      	str	r3, [r2, #16]
 8003510:	e7b1      	b.n	8003476 <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003514:	2b04      	cmp	r3, #4
 8003516:	d1ad      	bne.n	8003474 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	6813      	ldr	r3, [r2, #0]
 800351e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e7a7      	b.n	8003476 <I2C_RequestMemoryWrite+0x3e>
 8003526:	bf00      	nop
 8003528:	00010002 	.word	0x00010002

0800352c <I2C_RequestMemoryRead>:
{
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003530:	6805      	ldr	r5, [r0, #0]
{
 8003532:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003534:	682b      	ldr	r3, [r5, #0]
{
 8003536:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353c:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353e:	682b      	ldr	r3, [r5, #0]
{
 8003540:	4607      	mov	r7, r0
 8003542:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800354a:	4688      	mov	r8, r1
 800354c:	4692      	mov	sl, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354e:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003550:	e001      	b.n	8003556 <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8003552:	1c74      	adds	r4, r6, #1
 8003554:	d112      	bne.n	800357c <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003556:	696c      	ldr	r4, [r5, #20]
 8003558:	07e1      	lsls	r1, r4, #31
 800355a:	d5fa      	bpl.n	8003552 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355c:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8003560:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003562:	4632      	mov	r2, r6
 8003564:	464b      	mov	r3, r9
 8003566:	4638      	mov	r0, r7
 8003568:	4943      	ldr	r1, [pc, #268]	; (8003678 <I2C_RequestMemoryRead+0x14c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800356e:	f7ff fe75 	bl	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003572:	b168      	cbz	r0, 8003590 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 8003574:	2001      	movs	r0, #1
}
 8003576:	b003      	add	sp, #12
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7ff f954 	bl	8002828 <HAL_GetTick>
 8003580:	eba0 0009 	sub.w	r0, r0, r9
 8003584:	4286      	cmp	r6, r0
 8003586:	d337      	bcc.n	80035f8 <I2C_RequestMemoryRead+0xcc>
 8003588:	2e00      	cmp	r6, #0
 800358a:	d035      	beq.n	80035f8 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	683d      	ldr	r5, [r7, #0]
 800358e:	e7e2      	b.n	8003556 <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9001      	str	r0, [sp, #4]
 8003594:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	464a      	mov	r2, r9
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003598:	9101      	str	r1, [sp, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359c:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a0:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a4:	f7ff fed8 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d13d      	bne.n	8003628 <I2C_RequestMemoryRead+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ac:	f1bb 0f01 	cmp.w	fp, #1
 80035b0:	d148      	bne.n	8003644 <I2C_RequestMemoryRead+0x118>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fa5f f28a 	uxtb.w	r2, sl
 80035b8:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	464a      	mov	r2, r9
 80035bc:	4631      	mov	r1, r6
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff feca 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d12f      	bne.n	8003628 <I2C_RequestMemoryRead+0xfc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	680b      	ldr	r3, [r1, #0]
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d2:	e001      	b.n	80035d8 <I2C_RequestMemoryRead+0xac>
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	1c72      	adds	r2, r6, #1
 80035d6:	d145      	bne.n	8003664 <I2C_RequestMemoryRead+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	694b      	ldr	r3, [r1, #20]
 80035da:	07db      	lsls	r3, r3, #31
 80035dc:	d5fa      	bpl.n	80035d4 <I2C_RequestMemoryRead+0xa8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035de:	f048 0401 	orr.w	r4, r8, #1
 80035e2:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e4:	464b      	mov	r3, r9
 80035e6:	4632      	mov	r2, r6
 80035e8:	4638      	mov	r0, r7
 80035ea:	4923      	ldr	r1, [pc, #140]	; (8003678 <I2C_RequestMemoryRead+0x14c>)
 80035ec:	f7ff fe36 	bl	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80035f0:	3800      	subs	r0, #0
 80035f2:	bf18      	it	ne
 80035f4:	2001      	movne	r0, #1
 80035f6:	e7be      	b.n	8003576 <I2C_RequestMemoryRead+0x4a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035f8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80035fa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035fc:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003602:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800360e:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003612:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	05d8      	lsls	r0, r3, #23
 8003618:	d510      	bpl.n	800363c <I2C_RequestMemoryRead+0x110>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361a:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 800361e:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003622:	b003      	add	sp, #12
 8003624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362a:	2b04      	cmp	r3, #4
 800362c:	d1a2      	bne.n	8003574 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8003630:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e79c      	b.n	8003576 <I2C_RequestMemoryRead+0x4a>
    return HAL_TIMEOUT;
 800363c:	2003      	movs	r0, #3
}
 800363e:	b003      	add	sp, #12
 8003640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	ea4f 221a 	mov.w	r2, sl, lsr #8
 800364a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	4631      	mov	r1, r6
 800364e:	464a      	mov	r2, r9
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff fe81 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003656:	2800      	cmp	r0, #0
 8003658:	d1e6      	bne.n	8003628 <I2C_RequestMemoryRead+0xfc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	fa5f f38a 	uxtb.w	r3, sl
 8003660:	6113      	str	r3, [r2, #16]
 8003662:	e7aa      	b.n	80035ba <I2C_RequestMemoryRead+0x8e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7ff f8e0 	bl	8002828 <HAL_GetTick>
 8003668:	eba0 0309 	sub.w	r3, r0, r9
 800366c:	429e      	cmp	r6, r3
 800366e:	d3c3      	bcc.n	80035f8 <I2C_RequestMemoryRead+0xcc>
 8003670:	2e00      	cmp	r6, #0
 8003672:	d0c1      	beq.n	80035f8 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	e7af      	b.n	80035d8 <I2C_RequestMemoryRead+0xac>
 8003678:	00010002 	.word	0x00010002

0800367c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800367c:	2800      	cmp	r0, #0
 800367e:	f000 80b9 	beq.w	80037f4 <HAL_I2C_Init+0x178>
{
 8003682:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003684:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003688:	4604      	mov	r4, r0
 800368a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8098 	beq.w	80037c4 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003694:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003696:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b4:	f000 fdb6 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b8:	6863      	ldr	r3, [r4, #4]
 80036ba:	494f      	ldr	r1, [pc, #316]	; (80037f8 <HAL_I2C_Init+0x17c>)
 80036bc:	428b      	cmp	r3, r1
 80036be:	d84f      	bhi.n	8003760 <HAL_I2C_Init+0xe4>
 80036c0:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_I2C_Init+0x180>)
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d97c      	bls.n	80037c0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	4d4e      	ldr	r5, [pc, #312]	; (8003800 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036c8:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ce:	1e43      	subs	r3, r0, #1
 80036d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d4:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80036da:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036dc:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036de:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80036e6:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80036ea:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ec:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ee:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036f0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80036f4:	ea41 010c 	orr.w	r1, r1, ip
 80036f8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036fa:	69d1      	ldr	r1, [r2, #28]
 80036fc:	ea13 0f0e 	tst.w	r3, lr
 8003700:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003704:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003708:	d161      	bne.n	80037ce <HAL_I2C_Init+0x152>
 800370a:	2304      	movs	r3, #4
 800370c:	430b      	orrs	r3, r1
 800370e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003716:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800371a:	4303      	orrs	r3, r0
 800371c:	430b      	orrs	r3, r1
 800371e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003720:	6891      	ldr	r1, [r2, #8]
 8003722:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003726:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800372a:	4303      	orrs	r3, r0
 800372c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003730:	430b      	orrs	r3, r1
 8003732:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003734:	68d0      	ldr	r0, [r2, #12]
 8003736:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800373a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800373e:	430b      	orrs	r3, r1
 8003740:	4303      	orrs	r3, r0
 8003742:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003744:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003746:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800374e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800375c:	4608      	mov	r0, r1
}
 800375e:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <HAL_I2C_Init+0x188>)
 8003762:	4290      	cmp	r0, r2
 8003764:	d92c      	bls.n	80037c0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003766:	4d26      	ldr	r5, [pc, #152]	; (8003800 <HAL_I2C_Init+0x184>)
 8003768:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003770:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003774:	fb02 f101 	mul.w	r1, r2, r1
 8003778:	4d23      	ldr	r5, [pc, #140]	; (8003808 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800377a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377c:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003780:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003782:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003784:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003788:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 800378c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800378e:	6a15      	ldr	r5, [r2, #32]
 8003790:	3101      	adds	r1, #1
 8003792:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003796:	4329      	orrs	r1, r5
 8003798:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800379a:	69d1      	ldr	r1, [r2, #28]
 800379c:	68a5      	ldr	r5, [r4, #8]
 800379e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80037a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80037a6:	b9ad      	cbnz	r5, 80037d4 <HAL_I2C_Init+0x158>
 80037a8:	3801      	subs	r0, #1
 80037aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	b1d3      	cbz	r3, 80037f0 <HAL_I2C_Init+0x174>
 80037ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037be:	e7a5      	b.n	800370c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
}
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80037c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80037c8:	f7fe fbb8 	bl	8001f3c <HAL_I2C_MspInit>
 80037cc:	e762      	b.n	8003694 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	e79b      	b.n	800370c <HAL_I2C_Init+0x90>
 80037d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037d8:	3801      	subs	r0, #1
 80037da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	b113      	cbz	r3, 80037f0 <HAL_I2C_Init+0x174>
 80037ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ee:	e78d      	b.n	800370c <HAL_I2C_Init+0x90>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e78b      	b.n	800370c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
}
 80037f6:	4770      	bx	lr
 80037f8:	000186a0 	.word	0x000186a0
 80037fc:	001e847f 	.word	0x001e847f
 8003800:	431bde83 	.word	0x431bde83
 8003804:	003d08ff 	.word	0x003d08ff
 8003808:	10624dd3 	.word	0x10624dd3

0800380c <HAL_I2C_Mem_Write>:
{
 800380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	4604      	mov	r4, r0
 8003812:	b083      	sub	sp, #12
 8003814:	4699      	mov	r9, r3
 8003816:	460f      	mov	r7, r1
 8003818:	4690      	mov	r8, r2
 800381a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800381e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff f802 	bl	8002828 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003824:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003828:	2b20      	cmp	r3, #32
 800382a:	d003      	beq.n	8003834 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800382c:	2002      	movs	r0, #2
}
 800382e:	b003      	add	sp, #12
 8003830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003834:	4605      	mov	r5, r0
 8003836:	e004      	b.n	8003842 <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe fff6 	bl	8002828 <HAL_GetTick>
 800383c:	1b40      	subs	r0, r0, r5
 800383e:	2819      	cmp	r0, #25
 8003840:	d87b      	bhi.n	800393a <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	6983      	ldr	r3, [r0, #24]
 8003846:	ea6f 0c03 	mvn.w	ip, r3
 800384a:	f01c 0b02 	ands.w	fp, ip, #2
 800384e:	d0f3      	beq.n	8003838 <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8003850:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d0e9      	beq.n	800382c <HAL_I2C_Mem_Write+0x20>
 8003858:	2301      	movs	r3, #1
 800385a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800385e:	6803      	ldr	r3, [r0, #0]
 8003860:	07da      	lsls	r2, r3, #31
 8003862:	d565      	bpl.n	8003930 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003864:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003866:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800386a:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386e:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003872:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003874:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003876:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003878:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 800387c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800387e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003880:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003882:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003886:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800388a:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388e:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003892:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003896:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003898:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <HAL_I2C_Mem_Write+0x164>)
 800389c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fdca 	bl	8003438 <I2C_RequestMemoryWrite>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d13f      	bne.n	8003928 <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 80038a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d029      	beq.n	8003902 <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	462a      	mov	r2, r5
 80038b0:	4631      	mov	r1, r6
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff fd50 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d14f      	bne.n	800395c <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	4639      	mov	r1, r7
 80038c2:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80038c6:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ca:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80038cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80038ce:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038d8:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 80038da:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038dc:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80038de:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80038e0:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038e2:	d50c      	bpl.n	80038fe <HAL_I2C_Mem_Write+0xf2>
 80038e4:	b16a      	cbz	r2, 8003902 <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e6:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 80038e8:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ec:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80038ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80038f0:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80038f2:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80038f4:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80038f6:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80038f8:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80038fa:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80038fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038fe:	2a00      	cmp	r2, #0
 8003900:	d1d5      	bne.n	80038ae <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	462a      	mov	r2, r5
 8003904:	4631      	mov	r1, r6
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff fd5e 	bl	80033c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800390c:	bb30      	cbnz	r0, 800395c <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003918:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800391e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003922:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003926:	e782      	b.n	800382e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003928:	2001      	movs	r0, #1
}
 800392a:	b003      	add	sp, #12
 800392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 8003930:	6803      	ldr	r3, [r0, #0]
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6003      	str	r3, [r0, #0]
 8003938:	e794      	b.n	8003864 <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 800393a:	2320      	movs	r3, #32
      return HAL_BUSY;
 800393c:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 800393e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003942:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003946:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800394c:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003956:	b003      	add	sp, #12
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800395e:	2b04      	cmp	r3, #4
 8003960:	d1e2      	bne.n	8003928 <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8003964:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e75e      	b.n	800382e <HAL_I2C_Mem_Write+0x22>
 8003970:	ffff0000 	.word	0xffff0000

08003974 <HAL_I2C_Mem_Read>:
{
 8003974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8003978:	2400      	movs	r4, #0
{
 800397a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 800397c:	9403      	str	r4, [sp, #12]
{
 800397e:	4604      	mov	r4, r0
 8003980:	4699      	mov	r9, r3
 8003982:	460f      	mov	r7, r1
 8003984:	4690      	mov	r8, r2
 8003986:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 800398a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7fe ff4c 	bl	8002828 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003994:	2b20      	cmp	r3, #32
 8003996:	d004      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8003998:	2702      	movs	r7, #2
}
 800399a:	4638      	mov	r0, r7
 800399c:	b009      	add	sp, #36	; 0x24
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	4606      	mov	r6, r0
 80039a4:	e005      	b.n	80039b2 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe ff3f 	bl	8002828 <HAL_GetTick>
 80039aa:	1b80      	subs	r0, r0, r6
 80039ac:	2819      	cmp	r0, #25
 80039ae:	f200 80b9 	bhi.w	8003b24 <HAL_I2C_Mem_Read+0x1b0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	6983      	ldr	r3, [r0, #24]
 80039b6:	ea6f 0c03 	mvn.w	ip, r3
 80039ba:	f01c 0b02 	ands.w	fp, ip, #2
 80039be:	d0f2      	beq.n	80039a6 <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 80039c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d0e7      	beq.n	8003998 <HAL_I2C_Mem_Read+0x24>
 80039c8:	2301      	movs	r3, #1
 80039ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	07db      	lsls	r3, r3, #31
 80039d2:	d539      	bpl.n	8003a48 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d4:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d6:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039da:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039de:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039e2:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e4:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039e6:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e8:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80039ec:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80039ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80039f0:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f2:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039f6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039fa:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fe:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003a02:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a06:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003a08:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a0a:	489d      	ldr	r0, [pc, #628]	; (8003c80 <HAL_I2C_Mem_Read+0x30c>)
 8003a0c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff fd8c 	bl	800352c <I2C_RequestMemoryRead>
 8003a14:	4607      	mov	r7, r0
 8003a16:	2800      	cmp	r0, #0
 8003a18:	f040 809d 	bne.w	8003b56 <HAL_I2C_Mem_Read+0x1e2>
    if (hi2c->XferSize == 0U)
 8003a1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a1e:	b9c3      	cbnz	r3, 8003a52 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	9004      	str	r0, [sp, #16]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	9204      	str	r2, [sp, #16]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	9204      	str	r2, [sp, #16]
 8003a2c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003a3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003a46:	e7a8      	b.n	800399a <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8003a48:	6803      	ldr	r3, [r0, #0]
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6003      	str	r3, [r0, #0]
 8003a50:	e7c0      	b.n	80039d4 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8003a52:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a54:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8003a56:	f000 8100 	beq.w	8003c5a <HAL_I2C_Mem_Read+0x2e6>
    else if (hi2c->XferSize == 2U)
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	f000 80c9 	beq.w	8003bf2 <HAL_I2C_Mem_Read+0x27e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003a66:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	9007      	str	r0, [sp, #28]
 8003a6a:	6951      	ldr	r1, [r2, #20]
 8003a6c:	9107      	str	r1, [sp, #28]
 8003a6e:	6992      	ldr	r2, [r2, #24]
 8003a70:	9207      	str	r2, [sp, #28]
 8003a72:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8003a74:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a76:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8003c84 <HAL_I2C_Mem_Read+0x310>
 8003a7a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8003c88 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8003a7e:	d832      	bhi.n	8003ae6 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d061      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x1d4>
        else if (hi2c->XferSize == 2U)
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d172      	bne.n	8003b6e <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	e002      	b.n	8003a92 <HAL_I2C_Mem_Read+0x11e>
    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	1c69      	adds	r1, r5, #1
 8003a8e:	f040 80c6 	bne.w	8003c1e <HAL_I2C_Mem_Read+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a92:	6953      	ldr	r3, [r2, #20]
 8003a94:	075b      	lsls	r3, r3, #29
 8003a96:	d5f9      	bpl.n	8003a8c <HAL_I2C_Mem_Read+0x118>
 8003a98:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003ab8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aba:	3b01      	subs	r3, #1
 8003abc:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003abe:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac6:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003ac8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003aca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003acc:	3a01      	subs	r2, #1
 8003ace:	b292      	uxth	r2, r2
 8003ad0:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003ad2:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003ad8:	3201      	adds	r2, #1
          hi2c->XferSize--;
 8003ada:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003adc:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0a9      	beq.n	8003a36 <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d9cc      	bls.n	8003a80 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff fc00 	bl	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d130      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x1e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afa:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003afc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afe:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003b06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003b08:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b0a:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003b10:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b14:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8003b16:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003b18:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b1c:	d5df      	bpl.n	8003ade <HAL_I2C_Mem_Read+0x16a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	690b      	ldr	r3, [r1, #16]
 8003b20:	7053      	strb	r3, [r2, #1]
 8003b22:	e7d1      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x154>
      return HAL_BUSY;
 8003b24:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b26:	2320      	movs	r3, #32
}
 8003b28:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b2a:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b32:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b38:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003b42:	b009      	add	sp, #36	; 0x24
 8003b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7ff fbcf 	bl	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d0b4      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x14c>
      return HAL_ERROR;
 8003b56:	2701      	movs	r7, #1
}
 8003b58:	4638      	mov	r0, r7
 8003b5a:	b009      	add	sp, #36	; 0x24
 8003b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b60:	f7fe fe62 	bl	8002828 <HAL_GetTick>
 8003b64:	1b80      	subs	r0, r0, r6
 8003b66:	4285      	cmp	r5, r0
 8003b68:	d361      	bcc.n	8003c2e <HAL_I2C_Mem_Read+0x2ba>
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	d05f      	beq.n	8003c2e <HAL_I2C_Mem_Read+0x2ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	e001      	b.n	8003b76 <HAL_I2C_Mem_Read+0x202>
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	1c68      	adds	r0, r5, #1
 8003b74:	d1f4      	bne.n	8003b60 <HAL_I2C_Mem_Read+0x1ec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b76:	6953      	ldr	r3, [r2, #20]
 8003b78:	0759      	lsls	r1, r3, #29
 8003b7a:	d5fa      	bpl.n	8003b72 <HAL_I2C_Mem_Read+0x1fe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b84:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b8c:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b8e:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8003b92:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8003b9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8003ba2:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ba4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bac:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8003bae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003bb4:	1c4b      	adds	r3, r1, #1
 8003bb6:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb8:	e003      	b.n	8003bc2 <HAL_I2C_Mem_Read+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	0752      	lsls	r2, r2, #29
 8003bc0:	d444      	bmi.n	8003c4c <HAL_I2C_Mem_Read+0x2d8>
            count--;
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f5      	bne.n	8003bba <HAL_I2C_Mem_Read+0x246>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bce:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003be2:	b662      	cpsie	i
              return HAL_ERROR;
 8003be4:	2701      	movs	r7, #1
}
 8003be6:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8003be8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003bec:	b009      	add	sp, #36	; 0x24
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bfa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	9006      	str	r0, [sp, #24]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	9206      	str	r2, [sp, #24]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	9206      	str	r2, [sp, #24]
 8003c08:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c12:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003c14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f47f af2c 	bne.w	8003a74 <HAL_I2C_Mem_Read+0x100>
 8003c1c:	e70b      	b.n	8003a36 <HAL_I2C_Mem_Read+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fe03 	bl	8002828 <HAL_GetTick>
 8003c22:	1b80      	subs	r0, r0, r6
 8003c24:	4285      	cmp	r5, r0
 8003c26:	d302      	bcc.n	8003c2e <HAL_I2C_Mem_Read+0x2ba>
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	f47f af2d 	bne.w	8003a88 <HAL_I2C_Mem_Read+0x114>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c30:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c32:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c38:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8003c3e:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003c44:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003c4a:	e6a6      	b.n	800399a <HAL_I2C_Mem_Read+0x26>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	704b      	strb	r3, [r1, #1]
 8003c58:	e727      	b.n	8003aaa <HAL_I2C_Mem_Read+0x136>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c60:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c62:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	9005      	str	r0, [sp, #20]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	9205      	str	r2, [sp, #20]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	9205      	str	r2, [sp, #20]
 8003c70:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c7a:	b662      	cpsie	i
}
 8003c7c:	e7ca      	b.n	8003c14 <HAL_I2C_Mem_Read+0x2a0>
 8003c7e:	bf00      	nop
 8003c80:	ffff0000 	.word	0xffff0000
 8003c84:	20000004 	.word	0x20000004
 8003c88:	14f8b589 	.word	0x14f8b589

08003c8c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	f000 81b6 	beq.w	8003ffe <HAL_RCC_OscConfig+0x372>
{
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	4604      	mov	r4, r0
 8003c9a:	07dd      	lsls	r5, r3, #31
{
 8003c9c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	d535      	bpl.n	8003d0c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca0:	499a      	ldr	r1, [pc, #616]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003ca2:	684a      	ldr	r2, [r1, #4]
 8003ca4:	f002 020c 	and.w	r2, r2, #12
 8003ca8:	2a04      	cmp	r2, #4
 8003caa:	f000 80ef 	beq.w	8003e8c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cae:	684a      	ldr	r2, [r1, #4]
 8003cb0:	f002 020c 	and.w	r2, r2, #12
 8003cb4:	2a08      	cmp	r2, #8
 8003cb6:	f000 80e5 	beq.w	8003e84 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	6863      	ldr	r3, [r4, #4]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d010      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x58>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 810c 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x254>
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	f000 8182 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x348>
 8003cd0:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e004      	b.n	8003cee <HAL_RCC_OscConfig+0x62>
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe fd9b 	bl	8002828 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4e86      	ldr	r6, [pc, #536]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003cf4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fd96 	bl	8002828 <HAL_GetTick>
 8003cfc:	1b40      	subs	r0, r0, r5
 8003cfe:	2864      	cmp	r0, #100	; 0x64
 8003d00:	f200 80ea 	bhi.w	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d04:	6833      	ldr	r3, [r6, #0]
 8003d06:	039a      	lsls	r2, r3, #14
 8003d08:	d5f6      	bpl.n	8003cf8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	079f      	lsls	r7, r3, #30
 8003d0e:	d528      	bpl.n	8003d62 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d10:	4a7e      	ldr	r2, [pc, #504]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d12:	6851      	ldr	r1, [r2, #4]
 8003d14:	f011 0f0c 	tst.w	r1, #12
 8003d18:	f000 808d 	beq.w	8003e36 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d1c:	6851      	ldr	r1, [r2, #4]
 8003d1e:	f001 010c 	and.w	r1, r1, #12
 8003d22:	2908      	cmp	r1, #8
 8003d24:	f000 8083 	beq.w	8003e2e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8118 	beq.w	8003f60 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	2201      	movs	r2, #1
 8003d32:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4e75      	ldr	r6, [pc, #468]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8003d36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d38:	f7fe fd76 	bl	8002828 <HAL_GetTick>
 8003d3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fe fd72 	bl	8002828 <HAL_GetTick>
 8003d44:	1b40      	subs	r0, r0, r5
 8003d46:	2802      	cmp	r0, #2
 8003d48:	f200 80c6 	bhi.w	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	6833      	ldr	r3, [r6, #0]
 8003d4e:	0798      	lsls	r0, r3, #30
 8003d50:	d5f6      	bpl.n	8003d40 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	6833      	ldr	r3, [r6, #0]
 8003d54:	6962      	ldr	r2, [r4, #20]
 8003d56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003d5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d5e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	071a      	lsls	r2, r3, #28
 8003d64:	d41f      	bmi.n	8003da6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d66:	075d      	lsls	r5, r3, #29
 8003d68:	d542      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	00d0      	lsls	r0, r2, #3
 8003d70:	d57d      	bpl.n	8003e6e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	4e67      	ldr	r6, [pc, #412]	; (8003f14 <HAL_RCC_OscConfig+0x288>)
 8003d76:	6833      	ldr	r3, [r6, #0]
 8003d78:	05d9      	lsls	r1, r3, #23
 8003d7a:	f140 809d 	bpl.w	8003eb8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f000 80fe 	beq.w	8003f82 <HAL_RCC_OscConfig+0x2f6>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80ca 	beq.w	8003f20 <HAL_RCC_OscConfig+0x294>
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	f000 812c 	beq.w	8003fee <HAL_RCC_OscConfig+0x362>
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	621a      	str	r2, [r3, #32]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	621a      	str	r2, [r3, #32]
 8003da4:	e0f2      	b.n	8003f8c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da6:	69a3      	ldr	r3, [r4, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d04f      	beq.n	8003e4c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003dac:	2201      	movs	r2, #1
 8003dae:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	4e56      	ldr	r6, [pc, #344]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8003db2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003db6:	f7fe fd37 	bl	8002828 <HAL_GetTick>
 8003dba:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbc:	e005      	b.n	8003dca <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fd33 	bl	8002828 <HAL_GetTick>
 8003dc2:	1b40      	subs	r0, r0, r5
 8003dc4:	2802      	cmp	r0, #2
 8003dc6:	f200 8087 	bhi.w	8003ed8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003dcc:	079b      	lsls	r3, r3, #30
 8003dce:	d5f6      	bpl.n	8003dbe <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd0:	4b51      	ldr	r3, [pc, #324]	; (8003f18 <HAL_RCC_OscConfig+0x28c>)
 8003dd2:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_RCC_OscConfig+0x290>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0a5b      	lsrs	r3, r3, #9
 8003ddc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003dde:	bf00      	nop
  }
  while (Delay --);
 8003de0:	9b01      	ldr	r3, [sp, #4]
 8003de2:	1e5a      	subs	r2, r3, #1
 8003de4:	9201      	str	r2, [sp, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	075d      	lsls	r5, r3, #29
 8003dee:	d4bc      	bmi.n	8003d6a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df0:	69e0      	ldr	r0, [r4, #28]
 8003df2:	b1c0      	cbz	r0, 8003e26 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df4:	4d45      	ldr	r5, [pc, #276]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003df6:	686b      	ldr	r3, [r5, #4]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	f000 80d8 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e06:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0a:	f000 80fa 	beq.w	8004002 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fd0b 	bl	8002828 <HAL_GetTick>
 8003e12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e14:	e004      	b.n	8003e20 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fe fd07 	bl	8002828 <HAL_GetTick>
 8003e1a:	1b00      	subs	r0, r0, r4
 8003e1c:	2802      	cmp	r0, #2
 8003e1e:	d85b      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	019b      	lsls	r3, r3, #6
 8003e24:	d4f7      	bmi.n	8003e16 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003e26:	2000      	movs	r0, #0
}
 8003e28:	b002      	add	sp, #8
 8003e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	03d6      	lsls	r6, r2, #15
 8003e32:	f53f af79 	bmi.w	8003d28 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	0795      	lsls	r5, r2, #30
 8003e3c:	d530      	bpl.n	8003ea0 <HAL_RCC_OscConfig+0x214>
 8003e3e:	6922      	ldr	r2, [r4, #16]
 8003e40:	2a01      	cmp	r2, #1
 8003e42:	d02d      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
}
 8003e46:	b002      	add	sp, #8
 8003e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4e:	4e2f      	ldr	r6, [pc, #188]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003e50:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003e54:	f7fe fce8 	bl	8002828 <HAL_GetTick>
 8003e58:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5a:	e004      	b.n	8003e66 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fce4 	bl	8002828 <HAL_GetTick>
 8003e60:	1b40      	subs	r0, r0, r5
 8003e62:	2802      	cmp	r0, #2
 8003e64:	d838      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e66:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003e68:	079f      	lsls	r7, r3, #30
 8003e6a:	d4f7      	bmi.n	8003e5c <HAL_RCC_OscConfig+0x1d0>
 8003e6c:	e7bd      	b.n	8003dea <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003e70:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e76:	61da      	str	r2, [r3, #28]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003e82:	e777      	b.n	8003d74 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e84:	684a      	ldr	r2, [r1, #4]
 8003e86:	03d0      	lsls	r0, r2, #15
 8003e88:	f57f af17 	bpl.w	8003cba <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	0391      	lsls	r1, r2, #14
 8003e92:	f57f af3b 	bpl.w	8003d0c <HAL_RCC_OscConfig+0x80>
 8003e96:	6862      	ldr	r2, [r4, #4]
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	f47f af37 	bne.w	8003d0c <HAL_RCC_OscConfig+0x80>
 8003e9e:	e7d1      	b.n	8003e44 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	491a      	ldr	r1, [pc, #104]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003ea2:	6960      	ldr	r0, [r4, #20]
 8003ea4:	680a      	ldr	r2, [r1, #0]
 8003ea6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003eaa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003eae:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	071a      	lsls	r2, r3, #28
 8003eb2:	f57f af58 	bpl.w	8003d66 <HAL_RCC_OscConfig+0xda>
 8003eb6:	e776      	b.n	8003da6 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003ec0:	f7fe fcb2 	bl	8002828 <HAL_GetTick>
 8003ec4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	6833      	ldr	r3, [r6, #0]
 8003ec8:	05da      	lsls	r2, r3, #23
 8003eca:	f53f af58 	bmi.w	8003d7e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe fcab 	bl	8002828 <HAL_GetTick>
 8003ed2:	1bc0      	subs	r0, r0, r7
 8003ed4:	2864      	cmp	r0, #100	; 0x64
 8003ed6:	d9f6      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003ed8:	2003      	movs	r0, #3
}
 8003eda:	b002      	add	sp, #8
 8003edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	4d0a      	ldr	r5, [pc, #40]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	602b      	str	r3, [r5, #0]
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fc99 	bl	8002828 <HAL_GetTick>
 8003ef6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef8:	e004      	b.n	8003f04 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efa:	f7fe fc95 	bl	8002828 <HAL_GetTick>
 8003efe:	1b80      	subs	r0, r0, r6
 8003f00:	2864      	cmp	r0, #100	; 0x64
 8003f02:	d8e9      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	039b      	lsls	r3, r3, #14
 8003f08:	d4f7      	bmi.n	8003efa <HAL_RCC_OscConfig+0x26e>
 8003f0a:	e6fe      	b.n	8003d0a <HAL_RCC_OscConfig+0x7e>
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	42420000 	.word	0x42420000
 8003f14:	40007000 	.word	0x40007000
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	4e50      	ldr	r6, [pc, #320]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f26:	6a33      	ldr	r3, [r6, #32]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6233      	str	r3, [r6, #32]
 8003f2e:	6a33      	ldr	r3, [r6, #32]
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003f36:	f7fe fc77 	bl	8002828 <HAL_GetTick>
 8003f3a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	e004      	b.n	8003f48 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe fc73 	bl	8002828 <HAL_GetTick>
 8003f42:	1bc0      	subs	r0, r0, r7
 8003f44:	4540      	cmp	r0, r8
 8003f46:	d8c7      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	6a33      	ldr	r3, [r6, #32]
 8003f4a:	0798      	lsls	r0, r3, #30
 8003f4c:	d4f7      	bmi.n	8003f3e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	f43f af4e 	beq.w	8003df0 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4a43      	ldr	r2, [pc, #268]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
 8003f56:	69d3      	ldr	r3, [r2, #28]
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	61d3      	str	r3, [r2, #28]
 8003f5e:	e747      	b.n	8003df0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003f60:	4a41      	ldr	r2, [pc, #260]	; (8004068 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	4e40      	ldr	r6, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8003f64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f66:	f7fe fc5f 	bl	8002828 <HAL_GetTick>
 8003f6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6c:	e004      	b.n	8003f78 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fe fc5b 	bl	8002828 <HAL_GetTick>
 8003f72:	1b40      	subs	r0, r0, r5
 8003f74:	2802      	cmp	r0, #2
 8003f76:	d8af      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	0799      	lsls	r1, r3, #30
 8003f7c:	d4f7      	bmi.n	8003f6e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	e6ef      	b.n	8003d62 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
 8003f84:	6a13      	ldr	r3, [r2, #32]
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003f8c:	f7fe fc4c 	bl	8002828 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4f33      	ldr	r7, [pc, #204]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
 8003f98:	e004      	b.n	8003fa4 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fc45 	bl	8002828 <HAL_GetTick>
 8003f9e:	1b80      	subs	r0, r0, r6
 8003fa0:	4540      	cmp	r0, r8
 8003fa2:	d899      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	079b      	lsls	r3, r3, #30
 8003fa8:	d5f7      	bpl.n	8003f9a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	f43f af20 	beq.w	8003df0 <HAL_RCC_OscConfig+0x164>
 8003fb0:	e7d0      	b.n	8003f54 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb2:	2801      	cmp	r0, #1
 8003fb4:	f43f af38 	beq.w	8003e28 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003fb8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	6a22      	ldr	r2, [r4, #32]
 8003fbc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003fc0:	4291      	cmp	r1, r2
 8003fc2:	f47f af3f 	bne.w	8003e44 <HAL_RCC_OscConfig+0x1b8>
 8003fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003fcc:	1a18      	subs	r0, r3, r0
 8003fce:	bf18      	it	ne
 8003fd0:	2001      	movne	r0, #1
 8003fd2:	e729      	b.n	8003e28 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fd8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e67f      	b.n	8003cee <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fee:	f042 0204 	orr.w	r2, r2, #4
 8003ff2:	621a      	str	r2, [r3, #32]
 8003ff4:	6a1a      	ldr	r2, [r3, #32]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	621a      	str	r2, [r3, #32]
 8003ffc:	e7c6      	b.n	8003f8c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
}
 8004000:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004002:	f7fe fc11 	bl	8002828 <HAL_GetTick>
 8004006:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	e005      	b.n	8004016 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fc0d 	bl	8002828 <HAL_GetTick>
 800400e:	1b80      	subs	r0, r0, r6
 8004010:	2802      	cmp	r0, #2
 8004012:	f63f af61 	bhi.w	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	0199      	lsls	r1, r3, #6
 800401a:	d4f6      	bmi.n	800400a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800401c:	6a23      	ldr	r3, [r4, #32]
 800401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004024:	686a      	ldr	r2, [r5, #4]
 8004026:	68a1      	ldr	r1, [r4, #8]
 8004028:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800402c:	430a      	orrs	r2, r1
 800402e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004030:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004032:	4d0c      	ldr	r5, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x3d8>)
 8004034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004036:	686a      	ldr	r2, [r5, #4]
 8004038:	430b      	orrs	r3, r1
 800403a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004040:	4313      	orrs	r3, r2
 8004042:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004044:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004046:	f7fe fbef 	bl	8002828 <HAL_GetTick>
 800404a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404c:	e005      	b.n	800405a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe fbeb 	bl	8002828 <HAL_GetTick>
 8004052:	1b00      	subs	r0, r0, r4
 8004054:	2802      	cmp	r0, #2
 8004056:	f63f af3f 	bhi.w	8003ed8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	019a      	lsls	r2, r3, #6
 800405e:	d5f6      	bpl.n	800404e <HAL_RCC_OscConfig+0x3c2>
 8004060:	e6e1      	b.n	8003e26 <HAL_RCC_OscConfig+0x19a>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	42420000 	.word	0x42420000

0800406c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800406c:	f240 2c01 	movw	ip, #513	; 0x201
{
 8004070:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004074:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004076:	f10d 0e18 	add.w	lr, sp, #24
 800407a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407c:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004082:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8004086:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004088:	f003 010c 	and.w	r1, r3, #12
 800408c:	2908      	cmp	r1, #8
 800408e:	d003      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8004090:	4812      	ldr	r0, [pc, #72]	; (80040dc <HAL_RCC_GetSysClockFreq+0x70>)
}
 8004092:	b007      	add	sp, #28
 8004094:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004098:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800409c:	3118      	adds	r1, #24
 800409e:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040a0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a2:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040a6:	d50e      	bpl.n	80040c6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040a8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040b0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040b4:	3318      	adds	r3, #24
 80040b6:	446b      	add	r3, sp
 80040b8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040bc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80040c0:	b007      	add	sp, #28
 80040c2:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80040c8:	fb03 f000 	mul.w	r0, r3, r0
}
 80040cc:	b007      	add	sp, #28
 80040ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d2:	bf00      	nop
 80040d4:	08007bcc 	.word	0x08007bcc
 80040d8:	40021000 	.word	0x40021000
 80040dc:	007a1200 	.word	0x007a1200
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f000 808c 	beq.w	8004202 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ea:	4a49      	ldr	r2, [pc, #292]	; (8004210 <HAL_RCC_ClockConfig+0x12c>)
{
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	4604      	mov	r4, r0
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	428b      	cmp	r3, r1
 80040fa:	460d      	mov	r5, r1
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	f023 0307 	bic.w	r3, r3, #7
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	428b      	cmp	r3, r1
 8004110:	d002      	beq.n	8004118 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004112:	2001      	movs	r0, #1
}
 8004114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	0798      	lsls	r0, r3, #30
 800411c:	d514      	bpl.n	8004148 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	0759      	lsls	r1, r3, #29
 8004120:	d504      	bpl.n	800412c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004122:	493c      	ldr	r1, [pc, #240]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 8004124:	684a      	ldr	r2, [r1, #4]
 8004126:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800412a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	071a      	lsls	r2, r3, #28
 800412e:	d504      	bpl.n	800413a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4938      	ldr	r1, [pc, #224]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 8004132:	684a      	ldr	r2, [r1, #4]
 8004134:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004138:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413a:	4936      	ldr	r1, [pc, #216]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 800413c:	68a0      	ldr	r0, [r4, #8]
 800413e:	684a      	ldr	r2, [r1, #4]
 8004140:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004144:	4302      	orrs	r2, r0
 8004146:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004148:	07df      	lsls	r7, r3, #31
 800414a:	d520      	bpl.n	800418e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004150:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004154:	d057      	beq.n	8004206 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	2a02      	cmp	r2, #2
 8004158:	d050      	beq.n	80041fc <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	0799      	lsls	r1, r3, #30
 800415c:	d5d9      	bpl.n	8004112 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4e2d      	ldr	r6, [pc, #180]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004164:	6873      	ldr	r3, [r6, #4]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	4313      	orrs	r3, r2
 800416c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800416e:	f7fe fb5b 	bl	8002828 <HAL_GetTick>
 8004172:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004174:	e004      	b.n	8004180 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004176:	f7fe fb57 	bl	8002828 <HAL_GetTick>
 800417a:	1bc0      	subs	r0, r0, r7
 800417c:	4540      	cmp	r0, r8
 800417e:	d845      	bhi.n	800420c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004180:	6873      	ldr	r3, [r6, #4]
 8004182:	6862      	ldr	r2, [r4, #4]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800418c:	d1f3      	bne.n	8004176 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800418e:	4a20      	ldr	r2, [pc, #128]	; (8004210 <HAL_RCC_ClockConfig+0x12c>)
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	42ab      	cmp	r3, r5
 8004198:	d909      	bls.n	80041ae <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f023 0307 	bic.w	r3, r3, #7
 80041a0:	432b      	orrs	r3, r5
 80041a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	42ab      	cmp	r3, r5
 80041ac:	d1b1      	bne.n	8004112 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	075a      	lsls	r2, r3, #29
 80041b2:	d506      	bpl.n	80041c2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b4:	4917      	ldr	r1, [pc, #92]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	684a      	ldr	r2, [r1, #4]
 80041ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041be:	4302      	orrs	r2, r0
 80041c0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	d507      	bpl.n	80041d6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 80041c8:	6921      	ldr	r1, [r4, #16]
 80041ca:	6853      	ldr	r3, [r2, #4]
 80041cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80041d4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041d6:	f7ff ff49 	bl	800406c <HAL_RCC_GetSysClockFreq>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <HAL_RCC_ClockConfig+0x130>)
 80041de:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x134>)
 80041e0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80041e2:	480e      	ldr	r0, [pc, #56]	; (800421c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041e4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80041e8:	5c89      	ldrb	r1, [r1, r2]
 80041ea:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <HAL_RCC_ClockConfig+0x13c>)
 80041ec:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 80041ee:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80041f2:	f7fe fad7 	bl	80027a4 <HAL_InitTick>
  return HAL_OK;
 80041f6:	2000      	movs	r0, #0
}
 80041f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fc:	0198      	lsls	r0, r3, #6
 80041fe:	d4ae      	bmi.n	800415e <HAL_RCC_ClockConfig+0x7a>
 8004200:	e787      	b.n	8004112 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004202:	2001      	movs	r0, #1
}
 8004204:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	039e      	lsls	r6, r3, #14
 8004208:	d4a9      	bmi.n	800415e <HAL_RCC_ClockConfig+0x7a>
 800420a:	e782      	b.n	8004112 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800420c:	2003      	movs	r0, #3
 800420e:	e781      	b.n	8004114 <HAL_RCC_ClockConfig+0x30>
 8004210:	40022000 	.word	0x40022000
 8004214:	40021000 	.word	0x40021000
 8004218:	08007b68 	.word	0x08007b68
 800421c:	2000003c 	.word	0x2000003c
 8004220:	20000004 	.word	0x20000004

08004224 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004226:	4a05      	ldr	r2, [pc, #20]	; (800423c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4905      	ldr	r1, [pc, #20]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800422c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004230:	5ccb      	ldrb	r3, [r1, r3]
 8004232:	6810      	ldr	r0, [r2, #0]
}
 8004234:	40d8      	lsrs	r0, r3
 8004236:	4770      	bx	lr
 8004238:	40021000 	.word	0x40021000
 800423c:	20000004 	.word	0x20000004
 8004240:	08007b78 	.word	0x08007b78

08004244 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4905      	ldr	r1, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800424c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	6810      	ldr	r0, [r2, #0]
}
 8004254:	40d8      	lsrs	r0, r3
 8004256:	4770      	bx	lr
 8004258:	40021000 	.word	0x40021000
 800425c:	20000004 	.word	0x20000004
 8004260:	08007b78 	.word	0x08007b78

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004268:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800426a:	6800      	ldr	r0, [r0, #0]
{
 800426c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800426e:	07c1      	lsls	r1, r0, #31
 8004270:	d52c      	bpl.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b3a      	ldr	r3, [pc, #232]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	d53f      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4d39      	ldr	r5, [pc, #228]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 800427c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	05df      	lsls	r7, r3, #23
 8004282:	d548      	bpl.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004284:	4d35      	ldr	r5, [pc, #212]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004286:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004288:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800428c:	d011      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800428e:	6861      	ldr	r1, [r4, #4]
 8004290:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004294:	429a      	cmp	r2, r3
 8004296:	d00d      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004298:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800429a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800429c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800429e:	4a31      	ldr	r2, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ac:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ae:	07d9      	lsls	r1, r3, #31
 80042b0:	d444      	bmi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b2:	6861      	ldr	r1, [r4, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80042b6:	6a13      	ldr	r3, [r2, #32]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	430b      	orrs	r3, r1
 80042be:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042c0:	b11e      	cbz	r6, 80042ca <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	69d3      	ldr	r3, [r2, #28]
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	0783      	lsls	r3, r0, #30
 80042ce:	d506      	bpl.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d0:	4922      	ldr	r1, [pc, #136]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	684a      	ldr	r2, [r1, #4]
 80042d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80042da:	431a      	orrs	r2, r3
 80042dc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042de:	f010 0010 	ands.w	r0, r0, #16
 80042e2:	d007      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e6:	4a1d      	ldr	r2, [pc, #116]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80042e8:	6961      	ldr	r1, [r4, #20]
 80042ea:	6853      	ldr	r3, [r2, #4]
 80042ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6053      	str	r3, [r2, #4]
}
 80042f4:	b002      	add	sp, #8
 80042f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4d18      	ldr	r5, [pc, #96]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004302:	61da      	str	r2, [r3, #28]
 8004304:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004306:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	05df      	lsls	r7, r3, #23
 8004314:	d4b6      	bmi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800431e:	f7fe fa83 	bl	8002828 <HAL_GetTick>
 8004322:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	05d8      	lsls	r0, r3, #23
 8004328:	d4ac      	bmi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fe fa7d 	bl	8002828 <HAL_GetTick>
 800432e:	1bc3      	subs	r3, r0, r7
 8004330:	2b64      	cmp	r3, #100	; 0x64
 8004332:	d9f7      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004334:	2003      	movs	r0, #3
}
 8004336:	b002      	add	sp, #8
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800433c:	f7fe fa74 	bl	8002828 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004344:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fe fa6e 	bl	8002828 <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	4540      	cmp	r0, r8
 8004350:	d8f0      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	6a2b      	ldr	r3, [r5, #32]
 8004354:	079a      	lsls	r2, r3, #30
 8004356:	d5f7      	bpl.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004358:	e7ab      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
 8004364:	42420000 	.word	0x42420000

08004368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004368:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 800436c:	b087      	sub	sp, #28
 800436e:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004372:	f10d 0e18 	add.w	lr, sp, #24
 8004376:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800437a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800437e:	f10c 30ff 	add.w	r0, ip, #4294967295
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004382:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8004386:	280f      	cmp	r0, #15
 8004388:	d819      	bhi.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800438a:	e8df f000 	tbb	[pc, r0]
 800438e:	2108      	.short	0x2108
 8004390:	18181c18 	.word	0x18181c18
 8004394:	18181c18 	.word	0x18181c18
 8004398:	18181818 	.word	0x18181818
 800439c:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800439e:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 80043a2:	4930      	ldr	r1, [pc, #192]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80043a4:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043a6:	401a      	ands	r2, r3
 80043a8:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80043ac:	d055      	beq.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b6:	d048      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d03d      	beq.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80043be:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80043c0:	b007      	add	sp, #28
 80043c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80043c6:	b007      	add	sp, #28
 80043c8:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 80043cc:	f7ff be4e 	b.w	800406c <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043d0:	f7ff ff38 	bl	8004244 <HAL_RCC_GetPCLK2Freq>
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80043dc:	3301      	adds	r3, #1
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80043e4:	b007      	add	sp, #28
 80043e6:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80043ec:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80043f4:	d0e4      	beq.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f6:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80043fa:	3118      	adds	r1, #24
 80043fc:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fe:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004400:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004404:	d40c      	bmi.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004406:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8004408:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800440c:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	d4d5      	bmi.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8004416:	0040      	lsls	r0, r0, #1
 8004418:	fba3 3000 	umull	r3, r0, r3, r0
 800441c:	0840      	lsrs	r0, r0, #1
 800441e:	e7cf      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004420:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004424:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004428:	3318      	adds	r3, #24
 800442a:	446b      	add	r3, sp
 800442c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	fb03 f000 	mul.w	r0, r3, r0
 8004438:	e7e8      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 800443a:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800443e:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004440:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004444:	bf18      	it	ne
 8004446:	4618      	movne	r0, r3
 8004448:	e7ba      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 800444a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800444e:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004450:	f010 0002 	ands.w	r0, r0, #2
 8004454:	bf18      	it	ne
 8004456:	4618      	movne	r0, r3
 8004458:	e7b2      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 800445a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800445e:	e7af      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004460:	08007bcc 	.word	0x08007bcc
 8004464:	40021000 	.word	0x40021000
 8004468:	003d0900 	.word	0x003d0900
 800446c:	aaaaaaab 	.word	0xaaaaaaab
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004474:	b368      	cbz	r0, 80044d2 <HAL_SRAM_Init+0x5e>
 8004476:	6983      	ldr	r3, [r0, #24]
{
 8004478:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800447a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447e:	4604      	mov	r4, r0
 8004480:	d029      	beq.n	80044d6 <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004482:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004486:	4615      	mov	r5, r2
 8004488:	460e      	mov	r6, r1
 800448a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800448e:	b1db      	cbz	r3, 80044c8 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004490:	4621      	mov	r1, r4
 8004492:	f851 0b08 	ldr.w	r0, [r1], #8
 8004496:	f000 f821 	bl	80044dc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800449a:	4631      	mov	r1, r6
 800449c:	68a2      	ldr	r2, [r4, #8]
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	f000 f852 	bl	8004548 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80044a4:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80044a8:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80044aa:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80044ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044ae:	f000 f86d 	bl	800458c <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 80044b6:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80044b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044bc:	432b      	orrs	r3, r5
 80044be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80044c2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80044c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80044cc:	f7fd fd6a 	bl	8001fa4 <HAL_SRAM_MspInit>
 80044d0:	e7de      	b.n	8004490 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
}
 80044d4:	4770      	bx	lr
    return HAL_ERROR;
 80044d6:	2001      	movs	r0, #1
}
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	bf00      	nop

080044dc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80044dc:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 80044de:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80044e0:	688b      	ldr	r3, [r1, #8]
{
 80044e2:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	bf0c      	ite	eq
 80044e8:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 80044ec:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80044ee:	684e      	ldr	r6, [r1, #4]
 80044f0:	680c      	ldr	r4, [r1, #0]
 80044f2:	4333      	orrs	r3, r6
 80044f4:	68ce      	ldr	r6, [r1, #12]
 80044f6:	4d13      	ldr	r5, [pc, #76]	; (8004544 <FSMC_NORSRAM_Init+0x68>)
 80044f8:	4333      	orrs	r3, r6
 80044fa:	690e      	ldr	r6, [r1, #16]
 80044fc:	4333      	orrs	r3, r6
 80044fe:	694e      	ldr	r6, [r1, #20]
 8004500:	4333      	orrs	r3, r6
 8004502:	69ce      	ldr	r6, [r1, #28]
 8004504:	4333      	orrs	r3, r6
 8004506:	6a0e      	ldr	r6, [r1, #32]
 8004508:	4333      	orrs	r3, r6
 800450a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800450c:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800450e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8004512:	f026 0601 	bic.w	r6, r6, #1
 8004516:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800451a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800451c:	4333      	orrs	r3, r6
 800451e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004520:	4333      	orrs	r3, r6
 8004522:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8004524:	4333      	orrs	r3, r6
 8004526:	698e      	ldr	r6, [r1, #24]
 8004528:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800452a:	4333      	orrs	r3, r6
 800452c:	430b      	orrs	r3, r1
 800452e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8004532:	400d      	ands	r5, r1
 8004534:	432b      	orrs	r3, r5
 8004536:	ea43 030c 	orr.w	r3, r3, ip
 800453a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 800453e:	bc70      	pop	{r4, r5, r6}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	fff00080 	.word	0xfff00080

08004548 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004548:	4603      	mov	r3, r0
 800454a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800454e:	6853      	ldr	r3, [r2, #4]
{
 8004550:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004552:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8004556:	698c      	ldr	r4, [r1, #24]
 8004558:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 800455a:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800455c:	4323      	orrs	r3, r4
 800455e:	684c      	ldr	r4, [r1, #4]
 8004560:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004564:	688c      	ldr	r4, [r1, #8]
 8004566:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800456a:	68cc      	ldr	r4, [r1, #12]
 800456c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004570:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8004574:	f104 3eff 	add.w	lr, r4, #4294967295
 8004578:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 800457c:	3902      	subs	r1, #2
 800457e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004582:	ea43 030c 	orr.w	r3, r3, ip
 8004586:	6053      	str	r3, [r2, #4]
}
 8004588:	bd10      	pop	{r4, pc}
 800458a:	bf00      	nop

0800458c <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800458c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004590:	d005      	beq.n	800459e <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004592:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004596:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800459a:	2000      	movs	r0, #0
 800459c:	4770      	bx	lr
{
 800459e:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	698d      	ldr	r5, [r1, #24]
 80045a4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80045a8:	432b      	orrs	r3, r5
 80045aa:	684d      	ldr	r5, [r1, #4]
 80045ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80045b0:	688d      	ldr	r5, [r1, #8]
 80045b2:	68c9      	ldr	r1, [r1, #12]
 80045b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80045b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 80045be:	4021      	ands	r1, r4
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80045c6:	bc30      	pop	{r4, r5}
 80045c8:	2000      	movs	r0, #0
 80045ca:	4770      	bx	lr
 80045cc:	cff00000 	.word	0xcff00000

080045d0 <__errno>:
 80045d0:	4b01      	ldr	r3, [pc, #4]	; (80045d8 <__errno+0x8>)
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000040 	.word	0x20000040

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	2600      	movs	r6, #0
 80045e0:	4d0c      	ldr	r5, [pc, #48]	; (8004614 <__libc_init_array+0x38>)
 80045e2:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	f002 fefc 	bl	80073e8 <_init>
 80045f0:	2600      	movs	r6, #0
 80045f2:	4d0a      	ldr	r5, [pc, #40]	; (800461c <__libc_init_array+0x40>)
 80045f4:	4c0a      	ldr	r4, [pc, #40]	; (8004620 <__libc_init_array+0x44>)
 80045f6:	1b64      	subs	r4, r4, r5
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	08007fbc 	.word	0x08007fbc
 8004618:	08007fbc 	.word	0x08007fbc
 800461c:	08007fbc 	.word	0x08007fbc
 8004620:	08007fc0 	.word	0x08007fc0

08004624 <malloc>:
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <malloc+0xc>)
 8004626:	4601      	mov	r1, r0
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	f000 b873 	b.w	8004714 <_malloc_r>
 800462e:	bf00      	nop
 8004630:	20000040 	.word	0x20000040

08004634 <memset>:
 8004634:	4603      	mov	r3, r0
 8004636:	4402      	add	r2, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <_free_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4605      	mov	r5, r0
 8004648:	2900      	cmp	r1, #0
 800464a:	d040      	beq.n	80046ce <_free_r+0x8a>
 800464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004650:	1f0c      	subs	r4, r1, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfb8      	it	lt
 8004656:	18e4      	addlt	r4, r4, r3
 8004658:	f001 fbfc 	bl	8005e54 <__malloc_lock>
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <_free_r+0x8c>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	b933      	cbnz	r3, 8004670 <_free_r+0x2c>
 8004662:	6063      	str	r3, [r4, #4]
 8004664:	6014      	str	r4, [r2, #0]
 8004666:	4628      	mov	r0, r5
 8004668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800466c:	f001 bbf8 	b.w	8005e60 <__malloc_unlock>
 8004670:	42a3      	cmp	r3, r4
 8004672:	d908      	bls.n	8004686 <_free_r+0x42>
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	1821      	adds	r1, r4, r0
 8004678:	428b      	cmp	r3, r1
 800467a:	bf01      	itttt	eq
 800467c:	6819      	ldreq	r1, [r3, #0]
 800467e:	685b      	ldreq	r3, [r3, #4]
 8004680:	1809      	addeq	r1, r1, r0
 8004682:	6021      	streq	r1, [r4, #0]
 8004684:	e7ed      	b.n	8004662 <_free_r+0x1e>
 8004686:	461a      	mov	r2, r3
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b10b      	cbz	r3, 8004690 <_free_r+0x4c>
 800468c:	42a3      	cmp	r3, r4
 800468e:	d9fa      	bls.n	8004686 <_free_r+0x42>
 8004690:	6811      	ldr	r1, [r2, #0]
 8004692:	1850      	adds	r0, r2, r1
 8004694:	42a0      	cmp	r0, r4
 8004696:	d10b      	bne.n	80046b0 <_free_r+0x6c>
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	4401      	add	r1, r0
 800469c:	1850      	adds	r0, r2, r1
 800469e:	4283      	cmp	r3, r0
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	d1e0      	bne.n	8004666 <_free_r+0x22>
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4401      	add	r1, r0
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	e7da      	b.n	8004666 <_free_r+0x22>
 80046b0:	d902      	bls.n	80046b8 <_free_r+0x74>
 80046b2:	230c      	movs	r3, #12
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	e7d6      	b.n	8004666 <_free_r+0x22>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	1821      	adds	r1, r4, r0
 80046bc:	428b      	cmp	r3, r1
 80046be:	bf01      	itttt	eq
 80046c0:	6819      	ldreq	r1, [r3, #0]
 80046c2:	685b      	ldreq	r3, [r3, #4]
 80046c4:	1809      	addeq	r1, r1, r0
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6054      	str	r4, [r2, #4]
 80046cc:	e7cb      	b.n	8004666 <_free_r+0x22>
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200003c8 	.word	0x200003c8

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0e      	ldr	r6, [pc, #56]	; (8004710 <sbrk_aligned+0x3c>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 fcec 	bl	80050bc <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 fce7 	bl	80050bc <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d00a      	beq.n	8004708 <sbrk_aligned+0x34>
 80046f2:	1cc4      	adds	r4, r0, #3
 80046f4:	f024 0403 	bic.w	r4, r4, #3
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d007      	beq.n	800470c <sbrk_aligned+0x38>
 80046fc:	1a21      	subs	r1, r4, r0
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 fcdc 	bl	80050bc <_sbrk_r>
 8004704:	3001      	adds	r0, #1
 8004706:	d101      	bne.n	800470c <sbrk_aligned+0x38>
 8004708:	f04f 34ff 	mov.w	r4, #4294967295
 800470c:	4620      	mov	r0, r4
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	200003cc 	.word	0x200003cc

08004714 <_malloc_r>:
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	1ccd      	adds	r5, r1, #3
 800471a:	f025 0503 	bic.w	r5, r5, #3
 800471e:	3508      	adds	r5, #8
 8004720:	2d0c      	cmp	r5, #12
 8004722:	bf38      	it	cc
 8004724:	250c      	movcc	r5, #12
 8004726:	2d00      	cmp	r5, #0
 8004728:	4607      	mov	r7, r0
 800472a:	db01      	blt.n	8004730 <_malloc_r+0x1c>
 800472c:	42a9      	cmp	r1, r5
 800472e:	d905      	bls.n	800473c <_malloc_r+0x28>
 8004730:	230c      	movs	r3, #12
 8004732:	2600      	movs	r6, #0
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4630      	mov	r0, r6
 8004738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800473c:	4e2e      	ldr	r6, [pc, #184]	; (80047f8 <_malloc_r+0xe4>)
 800473e:	f001 fb89 	bl	8005e54 <__malloc_lock>
 8004742:	6833      	ldr	r3, [r6, #0]
 8004744:	461c      	mov	r4, r3
 8004746:	bb34      	cbnz	r4, 8004796 <_malloc_r+0x82>
 8004748:	4629      	mov	r1, r5
 800474a:	4638      	mov	r0, r7
 800474c:	f7ff ffc2 	bl	80046d4 <sbrk_aligned>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	4604      	mov	r4, r0
 8004754:	d14d      	bne.n	80047f2 <_malloc_r+0xde>
 8004756:	6834      	ldr	r4, [r6, #0]
 8004758:	4626      	mov	r6, r4
 800475a:	2e00      	cmp	r6, #0
 800475c:	d140      	bne.n	80047e0 <_malloc_r+0xcc>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	4631      	mov	r1, r6
 8004762:	4638      	mov	r0, r7
 8004764:	eb04 0803 	add.w	r8, r4, r3
 8004768:	f000 fca8 	bl	80050bc <_sbrk_r>
 800476c:	4580      	cmp	r8, r0
 800476e:	d13a      	bne.n	80047e6 <_malloc_r+0xd2>
 8004770:	6821      	ldr	r1, [r4, #0]
 8004772:	3503      	adds	r5, #3
 8004774:	1a6d      	subs	r5, r5, r1
 8004776:	f025 0503 	bic.w	r5, r5, #3
 800477a:	3508      	adds	r5, #8
 800477c:	2d0c      	cmp	r5, #12
 800477e:	bf38      	it	cc
 8004780:	250c      	movcc	r5, #12
 8004782:	4638      	mov	r0, r7
 8004784:	4629      	mov	r1, r5
 8004786:	f7ff ffa5 	bl	80046d4 <sbrk_aligned>
 800478a:	3001      	adds	r0, #1
 800478c:	d02b      	beq.n	80047e6 <_malloc_r+0xd2>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	442b      	add	r3, r5
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	e00e      	b.n	80047b4 <_malloc_r+0xa0>
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	1b52      	subs	r2, r2, r5
 800479a:	d41e      	bmi.n	80047da <_malloc_r+0xc6>
 800479c:	2a0b      	cmp	r2, #11
 800479e:	d916      	bls.n	80047ce <_malloc_r+0xba>
 80047a0:	1961      	adds	r1, r4, r5
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	6025      	str	r5, [r4, #0]
 80047a6:	bf18      	it	ne
 80047a8:	6059      	strne	r1, [r3, #4]
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	bf08      	it	eq
 80047ae:	6031      	streq	r1, [r6, #0]
 80047b0:	5162      	str	r2, [r4, r5]
 80047b2:	604b      	str	r3, [r1, #4]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f104 060b 	add.w	r6, r4, #11
 80047ba:	f001 fb51 	bl	8005e60 <__malloc_unlock>
 80047be:	f026 0607 	bic.w	r6, r6, #7
 80047c2:	1d23      	adds	r3, r4, #4
 80047c4:	1af2      	subs	r2, r6, r3
 80047c6:	d0b6      	beq.n	8004736 <_malloc_r+0x22>
 80047c8:	1b9b      	subs	r3, r3, r6
 80047ca:	50a3      	str	r3, [r4, r2]
 80047cc:	e7b3      	b.n	8004736 <_malloc_r+0x22>
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	bf0c      	ite	eq
 80047d4:	6032      	streq	r2, [r6, #0]
 80047d6:	605a      	strne	r2, [r3, #4]
 80047d8:	e7ec      	b.n	80047b4 <_malloc_r+0xa0>
 80047da:	4623      	mov	r3, r4
 80047dc:	6864      	ldr	r4, [r4, #4]
 80047de:	e7b2      	b.n	8004746 <_malloc_r+0x32>
 80047e0:	4634      	mov	r4, r6
 80047e2:	6876      	ldr	r6, [r6, #4]
 80047e4:	e7b9      	b.n	800475a <_malloc_r+0x46>
 80047e6:	230c      	movs	r3, #12
 80047e8:	4638      	mov	r0, r7
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	f001 fb38 	bl	8005e60 <__malloc_unlock>
 80047f0:	e7a1      	b.n	8004736 <_malloc_r+0x22>
 80047f2:	6025      	str	r5, [r4, #0]
 80047f4:	e7de      	b.n	80047b4 <_malloc_r+0xa0>
 80047f6:	bf00      	nop
 80047f8:	200003c8 	.word	0x200003c8

080047fc <__cvt>:
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004802:	461f      	mov	r7, r3
 8004804:	bfbb      	ittet	lt
 8004806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800480a:	461f      	movlt	r7, r3
 800480c:	2300      	movge	r3, #0
 800480e:	232d      	movlt	r3, #45	; 0x2d
 8004810:	b088      	sub	sp, #32
 8004812:	4614      	mov	r4, r2
 8004814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004818:	7013      	strb	r3, [r2, #0]
 800481a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800481c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004820:	f023 0820 	bic.w	r8, r3, #32
 8004824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004828:	d005      	beq.n	8004836 <__cvt+0x3a>
 800482a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800482e:	d100      	bne.n	8004832 <__cvt+0x36>
 8004830:	3501      	adds	r5, #1
 8004832:	2302      	movs	r3, #2
 8004834:	e000      	b.n	8004838 <__cvt+0x3c>
 8004836:	2303      	movs	r3, #3
 8004838:	aa07      	add	r2, sp, #28
 800483a:	9204      	str	r2, [sp, #16]
 800483c:	aa06      	add	r2, sp, #24
 800483e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004842:	e9cd 3500 	strd	r3, r5, [sp]
 8004846:	4622      	mov	r2, r4
 8004848:	463b      	mov	r3, r7
 800484a:	f000 fcf5 	bl	8005238 <_dtoa_r>
 800484e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004852:	4606      	mov	r6, r0
 8004854:	d102      	bne.n	800485c <__cvt+0x60>
 8004856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004858:	07db      	lsls	r3, r3, #31
 800485a:	d522      	bpl.n	80048a2 <__cvt+0xa6>
 800485c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004860:	eb06 0905 	add.w	r9, r6, r5
 8004864:	d110      	bne.n	8004888 <__cvt+0x8c>
 8004866:	7833      	ldrb	r3, [r6, #0]
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d10a      	bne.n	8004882 <__cvt+0x86>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4620      	mov	r0, r4
 8004872:	4639      	mov	r1, r7
 8004874:	f7fc f904 	bl	8000a80 <__aeabi_dcmpeq>
 8004878:	b918      	cbnz	r0, 8004882 <__cvt+0x86>
 800487a:	f1c5 0501 	rsb	r5, r5, #1
 800487e:	f8ca 5000 	str.w	r5, [sl]
 8004882:	f8da 3000 	ldr.w	r3, [sl]
 8004886:	4499      	add	r9, r3
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	4620      	mov	r0, r4
 800488e:	4639      	mov	r1, r7
 8004890:	f7fc f8f6 	bl	8000a80 <__aeabi_dcmpeq>
 8004894:	b108      	cbz	r0, 800489a <__cvt+0x9e>
 8004896:	f8cd 901c 	str.w	r9, [sp, #28]
 800489a:	2230      	movs	r2, #48	; 0x30
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	454b      	cmp	r3, r9
 80048a0:	d307      	bcc.n	80048b2 <__cvt+0xb6>
 80048a2:	4630      	mov	r0, r6
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048a8:	1b9b      	subs	r3, r3, r6
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	b008      	add	sp, #32
 80048ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	9107      	str	r1, [sp, #28]
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e7f0      	b.n	800489c <__cvt+0xa0>

080048ba <__exponent>:
 80048ba:	4603      	mov	r3, r0
 80048bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048be:	2900      	cmp	r1, #0
 80048c0:	f803 2b02 	strb.w	r2, [r3], #2
 80048c4:	bfb6      	itet	lt
 80048c6:	222d      	movlt	r2, #45	; 0x2d
 80048c8:	222b      	movge	r2, #43	; 0x2b
 80048ca:	4249      	neglt	r1, r1
 80048cc:	2909      	cmp	r1, #9
 80048ce:	7042      	strb	r2, [r0, #1]
 80048d0:	dd2b      	ble.n	800492a <__exponent+0x70>
 80048d2:	f10d 0407 	add.w	r4, sp, #7
 80048d6:	46a4      	mov	ip, r4
 80048d8:	270a      	movs	r7, #10
 80048da:	fb91 f6f7 	sdiv	r6, r1, r7
 80048de:	460a      	mov	r2, r1
 80048e0:	46a6      	mov	lr, r4
 80048e2:	fb07 1516 	mls	r5, r7, r6, r1
 80048e6:	2a63      	cmp	r2, #99	; 0x63
 80048e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80048ec:	4631      	mov	r1, r6
 80048ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80048f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048f6:	dcf0      	bgt.n	80048da <__exponent+0x20>
 80048f8:	3130      	adds	r1, #48	; 0x30
 80048fa:	f1ae 0502 	sub.w	r5, lr, #2
 80048fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004902:	4629      	mov	r1, r5
 8004904:	1c44      	adds	r4, r0, #1
 8004906:	4561      	cmp	r1, ip
 8004908:	d30a      	bcc.n	8004920 <__exponent+0x66>
 800490a:	f10d 0209 	add.w	r2, sp, #9
 800490e:	eba2 020e 	sub.w	r2, r2, lr
 8004912:	4565      	cmp	r5, ip
 8004914:	bf88      	it	hi
 8004916:	2200      	movhi	r2, #0
 8004918:	4413      	add	r3, r2
 800491a:	1a18      	subs	r0, r3, r0
 800491c:	b003      	add	sp, #12
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004928:	e7ed      	b.n	8004906 <__exponent+0x4c>
 800492a:	2330      	movs	r3, #48	; 0x30
 800492c:	3130      	adds	r1, #48	; 0x30
 800492e:	7083      	strb	r3, [r0, #2]
 8004930:	70c1      	strb	r1, [r0, #3]
 8004932:	1d03      	adds	r3, r0, #4
 8004934:	e7f1      	b.n	800491a <__exponent+0x60>
	...

08004938 <_printf_float>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	b091      	sub	sp, #68	; 0x44
 800493e:	460c      	mov	r4, r1
 8004940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004944:	4616      	mov	r6, r2
 8004946:	461f      	mov	r7, r3
 8004948:	4605      	mov	r5, r0
 800494a:	f001 fa63 	bl	8005e14 <_localeconv_r>
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	f7fb fc68 	bl	8000228 <strlen>
 8004958:	2300      	movs	r3, #0
 800495a:	930e      	str	r3, [sp, #56]	; 0x38
 800495c:	f8d8 3000 	ldr.w	r3, [r8]
 8004960:	900a      	str	r0, [sp, #40]	; 0x28
 8004962:	3307      	adds	r3, #7
 8004964:	f023 0307 	bic.w	r3, r3, #7
 8004968:	f103 0208 	add.w	r2, r3, #8
 800496c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004970:	f8d4 b000 	ldr.w	fp, [r4]
 8004974:	f8c8 2000 	str.w	r2, [r8]
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004988:	930b      	str	r3, [sp, #44]	; 0x2c
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	4640      	mov	r0, r8
 8004990:	4b9c      	ldr	r3, [pc, #624]	; (8004c04 <_printf_float+0x2cc>)
 8004992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004994:	f7fc f8a6 	bl	8000ae4 <__aeabi_dcmpun>
 8004998:	bb70      	cbnz	r0, 80049f8 <_printf_float+0xc0>
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	4640      	mov	r0, r8
 80049a0:	4b98      	ldr	r3, [pc, #608]	; (8004c04 <_printf_float+0x2cc>)
 80049a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a4:	f7fc f880 	bl	8000aa8 <__aeabi_dcmple>
 80049a8:	bb30      	cbnz	r0, 80049f8 <_printf_float+0xc0>
 80049aa:	2200      	movs	r2, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	4640      	mov	r0, r8
 80049b0:	4651      	mov	r1, sl
 80049b2:	f7fc f86f 	bl	8000a94 <__aeabi_dcmplt>
 80049b6:	b110      	cbz	r0, 80049be <_printf_float+0x86>
 80049b8:	232d      	movs	r3, #45	; 0x2d
 80049ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049be:	4b92      	ldr	r3, [pc, #584]	; (8004c08 <_printf_float+0x2d0>)
 80049c0:	4892      	ldr	r0, [pc, #584]	; (8004c0c <_printf_float+0x2d4>)
 80049c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049c6:	bf94      	ite	ls
 80049c8:	4698      	movls	r8, r3
 80049ca:	4680      	movhi	r8, r0
 80049cc:	2303      	movs	r3, #3
 80049ce:	f04f 0a00 	mov.w	sl, #0
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	f02b 0304 	bic.w	r3, fp, #4
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	4633      	mov	r3, r6
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	9700      	str	r7, [sp, #0]
 80049e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80049e4:	f000 f9d4 	bl	8004d90 <_printf_common>
 80049e8:	3001      	adds	r0, #1
 80049ea:	f040 8090 	bne.w	8004b0e <_printf_float+0x1d6>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295
 80049f2:	b011      	add	sp, #68	; 0x44
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	4642      	mov	r2, r8
 80049fa:	4653      	mov	r3, sl
 80049fc:	4640      	mov	r0, r8
 80049fe:	4651      	mov	r1, sl
 8004a00:	f7fc f870 	bl	8000ae4 <__aeabi_dcmpun>
 8004a04:	b148      	cbz	r0, 8004a1a <_printf_float+0xe2>
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	bfb8      	it	lt
 8004a0c:	232d      	movlt	r3, #45	; 0x2d
 8004a0e:	4880      	ldr	r0, [pc, #512]	; (8004c10 <_printf_float+0x2d8>)
 8004a10:	bfb8      	it	lt
 8004a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a16:	4b7f      	ldr	r3, [pc, #508]	; (8004c14 <_printf_float+0x2dc>)
 8004a18:	e7d3      	b.n	80049c2 <_printf_float+0x8a>
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	d142      	bne.n	8004aaa <_printf_float+0x172>
 8004a24:	2306      	movs	r3, #6
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	9206      	str	r2, [sp, #24]
 8004a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8004a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a32:	aa0d      	add	r2, sp, #52	; 0x34
 8004a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a38:	9203      	str	r2, [sp, #12]
 8004a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	4642      	mov	r2, r8
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4653      	mov	r3, sl
 8004a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a50:	f7ff fed4 	bl	80047fc <__cvt>
 8004a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a56:	4680      	mov	r8, r0
 8004a58:	2947      	cmp	r1, #71	; 0x47
 8004a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a5c:	d108      	bne.n	8004a70 <_printf_float+0x138>
 8004a5e:	1cc8      	adds	r0, r1, #3
 8004a60:	db02      	blt.n	8004a68 <_printf_float+0x130>
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	4299      	cmp	r1, r3
 8004a66:	dd40      	ble.n	8004aea <_printf_float+0x1b2>
 8004a68:	f1a9 0902 	sub.w	r9, r9, #2
 8004a6c:	fa5f f989 	uxtb.w	r9, r9
 8004a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a74:	d81f      	bhi.n	8004ab6 <_printf_float+0x17e>
 8004a76:	464a      	mov	r2, r9
 8004a78:	3901      	subs	r1, #1
 8004a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8004a80:	f7ff ff1b 	bl	80048ba <__exponent>
 8004a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a86:	4682      	mov	sl, r0
 8004a88:	1813      	adds	r3, r2, r0
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	dc02      	bgt.n	8004a96 <_printf_float+0x15e>
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	07d2      	lsls	r2, r2, #31
 8004a94:	d501      	bpl.n	8004a9a <_printf_float+0x162>
 8004a96:	3301      	adds	r3, #1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d09b      	beq.n	80049da <_printf_float+0xa2>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	e797      	b.n	80049da <_printf_float+0xa2>
 8004aaa:	2947      	cmp	r1, #71	; 0x47
 8004aac:	d1bc      	bne.n	8004a28 <_printf_float+0xf0>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ba      	bne.n	8004a28 <_printf_float+0xf0>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7b7      	b.n	8004a26 <_printf_float+0xee>
 8004ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004aba:	d118      	bne.n	8004aee <_printf_float+0x1b6>
 8004abc:	2900      	cmp	r1, #0
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	dd0b      	ble.n	8004ada <_printf_float+0x1a2>
 8004ac2:	6121      	str	r1, [r4, #16]
 8004ac4:	b913      	cbnz	r3, 8004acc <_printf_float+0x194>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	07d0      	lsls	r0, r2, #31
 8004aca:	d502      	bpl.n	8004ad2 <_printf_float+0x19a>
 8004acc:	3301      	adds	r3, #1
 8004ace:	440b      	add	r3, r1
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	f04f 0a00 	mov.w	sl, #0
 8004ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ad8:	e7df      	b.n	8004a9a <_printf_float+0x162>
 8004ada:	b913      	cbnz	r3, 8004ae2 <_printf_float+0x1aa>
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	07d2      	lsls	r2, r2, #31
 8004ae0:	d501      	bpl.n	8004ae6 <_printf_float+0x1ae>
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	e7f4      	b.n	8004ad0 <_printf_float+0x198>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e7f2      	b.n	8004ad0 <_printf_float+0x198>
 8004aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af0:	4299      	cmp	r1, r3
 8004af2:	db05      	blt.n	8004b00 <_printf_float+0x1c8>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	6121      	str	r1, [r4, #16]
 8004af8:	07d8      	lsls	r0, r3, #31
 8004afa:	d5ea      	bpl.n	8004ad2 <_printf_float+0x19a>
 8004afc:	1c4b      	adds	r3, r1, #1
 8004afe:	e7e7      	b.n	8004ad0 <_printf_float+0x198>
 8004b00:	2900      	cmp	r1, #0
 8004b02:	bfcc      	ite	gt
 8004b04:	2201      	movgt	r2, #1
 8004b06:	f1c1 0202 	rsble	r2, r1, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	e7e0      	b.n	8004ad0 <_printf_float+0x198>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	055a      	lsls	r2, r3, #21
 8004b12:	d407      	bmi.n	8004b24 <_printf_float+0x1ec>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	4642      	mov	r2, r8
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d12b      	bne.n	8004b7a <_printf_float+0x242>
 8004b22:	e764      	b.n	80049ee <_printf_float+0xb6>
 8004b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b28:	f240 80dd 	bls.w	8004ce6 <_printf_float+0x3ae>
 8004b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b30:	2200      	movs	r2, #0
 8004b32:	2300      	movs	r3, #0
 8004b34:	f7fb ffa4 	bl	8000a80 <__aeabi_dcmpeq>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d033      	beq.n	8004ba4 <_printf_float+0x26c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4628      	mov	r0, r5
 8004b42:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <_printf_float+0x2e0>)
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f af51 	beq.w	80049ee <_printf_float+0xb6>
 8004b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b50:	429a      	cmp	r2, r3
 8004b52:	db02      	blt.n	8004b5a <_printf_float+0x222>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07d8      	lsls	r0, r3, #31
 8004b58:	d50f      	bpl.n	8004b7a <_printf_float+0x242>
 8004b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f af42 	beq.w	80049ee <_printf_float+0xb6>
 8004b6a:	f04f 0800 	mov.w	r8, #0
 8004b6e:	f104 091a 	add.w	r9, r4, #26
 8004b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b74:	3b01      	subs	r3, #1
 8004b76:	4543      	cmp	r3, r8
 8004b78:	dc09      	bgt.n	8004b8e <_printf_float+0x256>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	079b      	lsls	r3, r3, #30
 8004b7e:	f100 8102 	bmi.w	8004d86 <_printf_float+0x44e>
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b86:	4298      	cmp	r0, r3
 8004b88:	bfb8      	it	lt
 8004b8a:	4618      	movlt	r0, r3
 8004b8c:	e731      	b.n	80049f2 <_printf_float+0xba>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	464a      	mov	r2, r9
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f af28 	beq.w	80049ee <_printf_float+0xb6>
 8004b9e:	f108 0801 	add.w	r8, r8, #1
 8004ba2:	e7e6      	b.n	8004b72 <_printf_float+0x23a>
 8004ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dc38      	bgt.n	8004c1c <_printf_float+0x2e4>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <_printf_float+0x2e0>)
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f43f af1a 	beq.w	80049ee <_printf_float+0xb6>
 8004bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d102      	bne.n	8004bc8 <_printf_float+0x290>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07d9      	lsls	r1, r3, #31
 8004bc6:	d5d8      	bpl.n	8004b7a <_printf_float+0x242>
 8004bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af0b 	beq.w	80049ee <_printf_float+0xb6>
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	f104 0a1a 	add.w	sl, r4, #26
 8004be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be2:	425b      	negs	r3, r3
 8004be4:	454b      	cmp	r3, r9
 8004be6:	dc01      	bgt.n	8004bec <_printf_float+0x2b4>
 8004be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bea:	e794      	b.n	8004b16 <_printf_float+0x1de>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4652      	mov	r2, sl
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f aef9 	beq.w	80049ee <_printf_float+0xb6>
 8004bfc:	f109 0901 	add.w	r9, r9, #1
 8004c00:	e7ee      	b.n	8004be0 <_printf_float+0x2a8>
 8004c02:	bf00      	nop
 8004c04:	7fefffff 	.word	0x7fefffff
 8004c08:	08007be4 	.word	0x08007be4
 8004c0c:	08007be8 	.word	0x08007be8
 8004c10:	08007bf0 	.word	0x08007bf0
 8004c14:	08007bec 	.word	0x08007bec
 8004c18:	08007bf4 	.word	0x08007bf4
 8004c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bfa8      	it	ge
 8004c24:	461a      	movge	r2, r3
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	4691      	mov	r9, r2
 8004c2a:	dc37      	bgt.n	8004c9c <_printf_float+0x364>
 8004c2c:	f04f 0b00 	mov.w	fp, #0
 8004c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c34:	f104 021a 	add.w	r2, r4, #26
 8004c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8004c40:	455b      	cmp	r3, fp
 8004c42:	dc33      	bgt.n	8004cac <_printf_float+0x374>
 8004c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	db3b      	blt.n	8004cc4 <_printf_float+0x38c>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07da      	lsls	r2, r3, #31
 8004c50:	d438      	bmi.n	8004cc4 <_printf_float+0x38c>
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c56:	eba3 020a 	sub.w	r2, r3, sl
 8004c5a:	eba3 0901 	sub.w	r9, r3, r1
 8004c5e:	4591      	cmp	r9, r2
 8004c60:	bfa8      	it	ge
 8004c62:	4691      	movge	r9, r2
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	dc34      	bgt.n	8004cd4 <_printf_float+0x39c>
 8004c6a:	f04f 0800 	mov.w	r8, #0
 8004c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c72:	f104 0a1a 	add.w	sl, r4, #26
 8004c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	eba3 0309 	sub.w	r3, r3, r9
 8004c80:	4543      	cmp	r3, r8
 8004c82:	f77f af7a 	ble.w	8004b7a <_printf_float+0x242>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f aeac 	beq.w	80049ee <_printf_float+0xb6>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	e7ec      	b.n	8004c76 <_printf_float+0x33e>
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1c0      	bne.n	8004c2c <_printf_float+0x2f4>
 8004caa:	e6a0      	b.n	80049ee <_printf_float+0xb6>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f ae99 	beq.w	80049ee <_printf_float+0xb6>
 8004cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cbe:	f10b 0b01 	add.w	fp, fp, #1
 8004cc2:	e7b9      	b.n	8004c38 <_printf_float+0x300>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d1bf      	bne.n	8004c52 <_printf_float+0x31a>
 8004cd2:	e68c      	b.n	80049ee <_printf_float+0xb6>
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	eb08 020a 	add.w	r2, r8, sl
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d1c2      	bne.n	8004c6a <_printf_float+0x332>
 8004ce4:	e683      	b.n	80049ee <_printf_float+0xb6>
 8004ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	dc01      	bgt.n	8004cf0 <_printf_float+0x3b8>
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d537      	bpl.n	8004d60 <_printf_float+0x428>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f ae77 	beq.w	80049ee <_printf_float+0xb6>
 8004d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d04:	4631      	mov	r1, r6
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f43f ae6f 	beq.w	80049ee <_printf_float+0xb6>
 8004d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	f7fb feb2 	bl	8000a80 <__aeabi_dcmpeq>
 8004d1c:	b9d8      	cbnz	r0, 8004d56 <_printf_float+0x41e>
 8004d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d20:	f108 0201 	add.w	r2, r8, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d10e      	bne.n	8004d4e <_printf_float+0x416>
 8004d30:	e65d      	b.n	80049ee <_printf_float+0xb6>
 8004d32:	2301      	movs	r3, #1
 8004d34:	464a      	mov	r2, r9
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f ae56 	beq.w	80049ee <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	4543      	cmp	r3, r8
 8004d4c:	dcf1      	bgt.n	8004d32 <_printf_float+0x3fa>
 8004d4e:	4653      	mov	r3, sl
 8004d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d54:	e6e0      	b.n	8004b18 <_printf_float+0x1e0>
 8004d56:	f04f 0800 	mov.w	r8, #0
 8004d5a:	f104 091a 	add.w	r9, r4, #26
 8004d5e:	e7f2      	b.n	8004d46 <_printf_float+0x40e>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4642      	mov	r2, r8
 8004d64:	e7df      	b.n	8004d26 <_printf_float+0x3ee>
 8004d66:	2301      	movs	r3, #1
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae3c 	beq.w	80049ee <_printf_float+0xb6>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d7e:	1a5b      	subs	r3, r3, r1
 8004d80:	4543      	cmp	r3, r8
 8004d82:	dcf0      	bgt.n	8004d66 <_printf_float+0x42e>
 8004d84:	e6fd      	b.n	8004b82 <_printf_float+0x24a>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	f104 0919 	add.w	r9, r4, #25
 8004d8e:	e7f4      	b.n	8004d7a <_printf_float+0x442>

08004d90 <_printf_common>:
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	4616      	mov	r6, r2
 8004d96:	4699      	mov	r9, r3
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfb8      	it	lt
 8004da2:	4613      	movlt	r3, r2
 8004da4:	6033      	str	r3, [r6, #0]
 8004da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004daa:	460c      	mov	r4, r1
 8004dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004db0:	b10a      	cbz	r2, 8004db6 <_printf_common+0x26>
 8004db2:	3301      	adds	r3, #1
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	0699      	lsls	r1, r3, #26
 8004dba:	bf42      	ittt	mi
 8004dbc:	6833      	ldrmi	r3, [r6, #0]
 8004dbe:	3302      	addmi	r3, #2
 8004dc0:	6033      	strmi	r3, [r6, #0]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	f015 0506 	ands.w	r5, r5, #6
 8004dc8:	d106      	bne.n	8004dd8 <_printf_common+0x48>
 8004dca:	f104 0a19 	add.w	sl, r4, #25
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	6832      	ldr	r2, [r6, #0]
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dc28      	bgt.n	8004e2a <_printf_common+0x9a>
 8004dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ddc:	1e13      	subs	r3, r2, #0
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	bf18      	it	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	0692      	lsls	r2, r2, #26
 8004de6:	d42d      	bmi.n	8004e44 <_printf_common+0xb4>
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df0:	47c0      	blx	r8
 8004df2:	3001      	adds	r0, #1
 8004df4:	d020      	beq.n	8004e38 <_printf_common+0xa8>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	68e5      	ldr	r5, [r4, #12]
 8004dfa:	f003 0306 	and.w	r3, r3, #6
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	bf18      	it	ne
 8004e02:	2500      	movne	r5, #0
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	f04f 0600 	mov.w	r6, #0
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	bf08      	it	eq
 8004e0e:	1aad      	subeq	r5, r5, r2
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	bf08      	it	eq
 8004e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	bfc4      	itt	gt
 8004e1c:	1a9b      	subgt	r3, r3, r2
 8004e1e:	18ed      	addgt	r5, r5, r3
 8004e20:	341a      	adds	r4, #26
 8004e22:	42b5      	cmp	r5, r6
 8004e24:	d11a      	bne.n	8004e5c <_printf_common+0xcc>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e008      	b.n	8004e3c <_printf_common+0xac>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c0      	blx	r8
 8004e34:	3001      	adds	r0, #1
 8004e36:	d103      	bne.n	8004e40 <_printf_common+0xb0>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	3501      	adds	r5, #1
 8004e42:	e7c4      	b.n	8004dce <_printf_common+0x3e>
 8004e44:	2030      	movs	r0, #48	; 0x30
 8004e46:	18e1      	adds	r1, r4, r3
 8004e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e52:	4422      	add	r2, r4
 8004e54:	3302      	adds	r3, #2
 8004e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e5a:	e7c5      	b.n	8004de8 <_printf_common+0x58>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4649      	mov	r1, r9
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c0      	blx	r8
 8004e66:	3001      	adds	r0, #1
 8004e68:	d0e6      	beq.n	8004e38 <_printf_common+0xa8>
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7d9      	b.n	8004e22 <_printf_common+0x92>
	...

08004e70 <_printf_i>:
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	7e0f      	ldrb	r7, [r1, #24]
 8004e76:	4691      	mov	r9, r2
 8004e78:	2f78      	cmp	r7, #120	; 0x78
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	469a      	mov	sl, r3
 8004e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e86:	d807      	bhi.n	8004e98 <_printf_i+0x28>
 8004e88:	2f62      	cmp	r7, #98	; 0x62
 8004e8a:	d80a      	bhi.n	8004ea2 <_printf_i+0x32>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	f000 80d9 	beq.w	8005044 <_printf_i+0x1d4>
 8004e92:	2f58      	cmp	r7, #88	; 0x58
 8004e94:	f000 80a4 	beq.w	8004fe0 <_printf_i+0x170>
 8004e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ea0:	e03a      	b.n	8004f18 <_printf_i+0xa8>
 8004ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ea6:	2b15      	cmp	r3, #21
 8004ea8:	d8f6      	bhi.n	8004e98 <_printf_i+0x28>
 8004eaa:	a101      	add	r1, pc, #4	; (adr r1, 8004eb0 <_printf_i+0x40>)
 8004eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004e99 	.word	0x08004e99
 8004ebc:	08004e99 	.word	0x08004e99
 8004ec0:	08004e99 	.word	0x08004e99
 8004ec4:	08004e99 	.word	0x08004e99
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e99 	.word	0x08004e99
 8004ed0:	08004e99 	.word	0x08004e99
 8004ed4:	08004e99 	.word	0x08004e99
 8004ed8:	08004e99 	.word	0x08004e99
 8004edc:	0800502b 	.word	0x0800502b
 8004ee0:	08004f4d 	.word	0x08004f4d
 8004ee4:	0800500d 	.word	0x0800500d
 8004ee8:	08004e99 	.word	0x08004e99
 8004eec:	08004e99 	.word	0x08004e99
 8004ef0:	0800504d 	.word	0x0800504d
 8004ef4:	08004e99 	.word	0x08004e99
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004e99 	.word	0x08004e99
 8004f00:	08004e99 	.word	0x08004e99
 8004f04:	08005015 	.word	0x08005015
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0a4      	b.n	8005066 <_printf_i+0x1f6>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	6829      	ldr	r1, [r5, #0]
 8004f20:	0606      	lsls	r6, r0, #24
 8004f22:	f101 0304 	add.w	r3, r1, #4
 8004f26:	d50a      	bpl.n	8004f3e <_printf_i+0xce>
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	da03      	bge.n	8004f38 <_printf_i+0xc8>
 8004f30:	232d      	movs	r3, #45	; 0x2d
 8004f32:	4276      	negs	r6, r6
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f38:	230a      	movs	r3, #10
 8004f3a:	485e      	ldr	r0, [pc, #376]	; (80050b4 <_printf_i+0x244>)
 8004f3c:	e019      	b.n	8004f72 <_printf_i+0x102>
 8004f3e:	680e      	ldr	r6, [r1, #0]
 8004f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	bf18      	it	ne
 8004f48:	b236      	sxthne	r6, r6
 8004f4a:	e7ef      	b.n	8004f2c <_printf_i+0xbc>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	6029      	str	r1, [r5, #0]
 8004f54:	0601      	lsls	r1, r0, #24
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0xec>
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <_printf_i+0xf2>
 8004f5c:	0646      	lsls	r6, r0, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0xe8>
 8004f60:	881e      	ldrh	r6, [r3, #0]
 8004f62:	2f6f      	cmp	r7, #111	; 0x6f
 8004f64:	bf0c      	ite	eq
 8004f66:	2308      	moveq	r3, #8
 8004f68:	230a      	movne	r3, #10
 8004f6a:	4852      	ldr	r0, [pc, #328]	; (80050b4 <_printf_i+0x244>)
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f72:	6865      	ldr	r5, [r4, #4]
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	bfa8      	it	ge
 8004f78:	6821      	ldrge	r1, [r4, #0]
 8004f7a:	60a5      	str	r5, [r4, #8]
 8004f7c:	bfa4      	itt	ge
 8004f7e:	f021 0104 	bicge.w	r1, r1, #4
 8004f82:	6021      	strge	r1, [r4, #0]
 8004f84:	b90e      	cbnz	r6, 8004f8a <_printf_i+0x11a>
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	d04d      	beq.n	8005026 <_printf_i+0x1b6>
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f90:	fb03 6711 	mls	r7, r3, r1, r6
 8004f94:	5dc7      	ldrb	r7, [r0, r7]
 8004f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f9a:	4637      	mov	r7, r6
 8004f9c:	42bb      	cmp	r3, r7
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	d9f4      	bls.n	8004f8c <_printf_i+0x11c>
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d10b      	bne.n	8004fbe <_printf_i+0x14e>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	07de      	lsls	r6, r3, #31
 8004faa:	d508      	bpl.n	8004fbe <_printf_i+0x14e>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	6861      	ldr	r1, [r4, #4]
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	bfde      	ittt	le
 8004fb4:	2330      	movle	r3, #48	; 0x30
 8004fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fbe:	1b52      	subs	r2, r2, r5
 8004fc0:	6122      	str	r2, [r4, #16]
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f8cd a000 	str.w	sl, [sp]
 8004fcc:	aa03      	add	r2, sp, #12
 8004fce:	f7ff fedf 	bl	8004d90 <_printf_common>
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d14c      	bne.n	8005070 <_printf_i+0x200>
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	b004      	add	sp, #16
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe0:	4834      	ldr	r0, [pc, #208]	; (80050b4 <_printf_i+0x244>)
 8004fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fe6:	6829      	ldr	r1, [r5, #0]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fee:	6029      	str	r1, [r5, #0]
 8004ff0:	061d      	lsls	r5, r3, #24
 8004ff2:	d514      	bpl.n	800501e <_printf_i+0x1ae>
 8004ff4:	07df      	lsls	r7, r3, #31
 8004ff6:	bf44      	itt	mi
 8004ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffc:	6023      	strmi	r3, [r4, #0]
 8004ffe:	b91e      	cbnz	r6, 8005008 <_printf_i+0x198>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	2310      	movs	r3, #16
 800500a:	e7af      	b.n	8004f6c <_printf_i+0xfc>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	f043 0320 	orr.w	r3, r3, #32
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	2378      	movs	r3, #120	; 0x78
 8005016:	4828      	ldr	r0, [pc, #160]	; (80050b8 <_printf_i+0x248>)
 8005018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800501c:	e7e3      	b.n	8004fe6 <_printf_i+0x176>
 800501e:	0659      	lsls	r1, r3, #25
 8005020:	bf48      	it	mi
 8005022:	b2b6      	uxthmi	r6, r6
 8005024:	e7e6      	b.n	8004ff4 <_printf_i+0x184>
 8005026:	4615      	mov	r5, r2
 8005028:	e7bb      	b.n	8004fa2 <_printf_i+0x132>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	6826      	ldr	r6, [r4, #0]
 800502e:	1d18      	adds	r0, r3, #4
 8005030:	6961      	ldr	r1, [r4, #20]
 8005032:	6028      	str	r0, [r5, #0]
 8005034:	0635      	lsls	r5, r6, #24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	d501      	bpl.n	800503e <_printf_i+0x1ce>
 800503a:	6019      	str	r1, [r3, #0]
 800503c:	e002      	b.n	8005044 <_printf_i+0x1d4>
 800503e:	0670      	lsls	r0, r6, #25
 8005040:	d5fb      	bpl.n	800503a <_printf_i+0x1ca>
 8005042:	8019      	strh	r1, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	4615      	mov	r5, r2
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	e7ba      	b.n	8004fc2 <_printf_i+0x152>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	2100      	movs	r1, #0
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	681d      	ldr	r5, [r3, #0]
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	4628      	mov	r0, r5
 800505a:	f000 fedf 	bl	8005e1c <memchr>
 800505e:	b108      	cbz	r0, 8005064 <_printf_i+0x1f4>
 8005060:	1b40      	subs	r0, r0, r5
 8005062:	6060      	str	r0, [r4, #4]
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	2300      	movs	r3, #0
 800506a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506e:	e7a8      	b.n	8004fc2 <_printf_i+0x152>
 8005070:	462a      	mov	r2, r5
 8005072:	4649      	mov	r1, r9
 8005074:	4640      	mov	r0, r8
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	47d0      	blx	sl
 800507a:	3001      	adds	r0, #1
 800507c:	d0ab      	beq.n	8004fd6 <_printf_i+0x166>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	079b      	lsls	r3, r3, #30
 8005082:	d413      	bmi.n	80050ac <_printf_i+0x23c>
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	4298      	cmp	r0, r3
 800508a:	bfb8      	it	lt
 800508c:	4618      	movlt	r0, r3
 800508e:	e7a4      	b.n	8004fda <_printf_i+0x16a>
 8005090:	2301      	movs	r3, #1
 8005092:	4632      	mov	r2, r6
 8005094:	4649      	mov	r1, r9
 8005096:	4640      	mov	r0, r8
 8005098:	47d0      	blx	sl
 800509a:	3001      	adds	r0, #1
 800509c:	d09b      	beq.n	8004fd6 <_printf_i+0x166>
 800509e:	3501      	adds	r5, #1
 80050a0:	68e3      	ldr	r3, [r4, #12]
 80050a2:	9903      	ldr	r1, [sp, #12]
 80050a4:	1a5b      	subs	r3, r3, r1
 80050a6:	42ab      	cmp	r3, r5
 80050a8:	dcf2      	bgt.n	8005090 <_printf_i+0x220>
 80050aa:	e7eb      	b.n	8005084 <_printf_i+0x214>
 80050ac:	2500      	movs	r5, #0
 80050ae:	f104 0619 	add.w	r6, r4, #25
 80050b2:	e7f5      	b.n	80050a0 <_printf_i+0x230>
 80050b4:	08007bf6 	.word	0x08007bf6
 80050b8:	08007c07 	.word	0x08007c07

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	2300      	movs	r3, #0
 80050c0:	4d05      	ldr	r5, [pc, #20]	; (80050d8 <_sbrk_r+0x1c>)
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fd f806 	bl	80020d8 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200003d0 	.word	0x200003d0

080050dc <siprintf>:
 80050dc:	b40e      	push	{r1, r2, r3}
 80050de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050e2:	b500      	push	{lr}
 80050e4:	b09c      	sub	sp, #112	; 0x70
 80050e6:	ab1d      	add	r3, sp, #116	; 0x74
 80050e8:	9002      	str	r0, [sp, #8]
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	9107      	str	r1, [sp, #28]
 80050ee:	9104      	str	r1, [sp, #16]
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <siprintf+0x38>)
 80050f2:	4909      	ldr	r1, [pc, #36]	; (8005118 <siprintf+0x3c>)
 80050f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f8:	9105      	str	r1, [sp, #20]
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	a902      	add	r1, sp, #8
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	f001 faa6 	bl	8006650 <_svfiprintf_r>
 8005104:	2200      	movs	r2, #0
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	b01c      	add	sp, #112	; 0x70
 800510c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005110:	b003      	add	sp, #12
 8005112:	4770      	bx	lr
 8005114:	20000040 	.word	0x20000040
 8005118:	ffff0208 	.word	0xffff0208

0800511c <quorem>:
 800511c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	6903      	ldr	r3, [r0, #16]
 8005122:	690c      	ldr	r4, [r1, #16]
 8005124:	4607      	mov	r7, r0
 8005126:	42a3      	cmp	r3, r4
 8005128:	f2c0 8082 	blt.w	8005230 <quorem+0x114>
 800512c:	3c01      	subs	r4, #1
 800512e:	f100 0514 	add.w	r5, r0, #20
 8005132:	f101 0814 	add.w	r8, r1, #20
 8005136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005144:	3301      	adds	r3, #1
 8005146:	429a      	cmp	r2, r3
 8005148:	fbb2 f6f3 	udiv	r6, r2, r3
 800514c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005154:	d331      	bcc.n	80051ba <quorem+0x9e>
 8005156:	f04f 0e00 	mov.w	lr, #0
 800515a:	4640      	mov	r0, r8
 800515c:	46ac      	mov	ip, r5
 800515e:	46f2      	mov	sl, lr
 8005160:	f850 2b04 	ldr.w	r2, [r0], #4
 8005164:	b293      	uxth	r3, r2
 8005166:	fb06 e303 	mla	r3, r6, r3, lr
 800516a:	0c12      	lsrs	r2, r2, #16
 800516c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005170:	b29b      	uxth	r3, r3
 8005172:	fb06 e202 	mla	r2, r6, r2, lr
 8005176:	ebaa 0303 	sub.w	r3, sl, r3
 800517a:	f8dc a000 	ldr.w	sl, [ip]
 800517e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005182:	fa1f fa8a 	uxth.w	sl, sl
 8005186:	4453      	add	r3, sl
 8005188:	f8dc a000 	ldr.w	sl, [ip]
 800518c:	b292      	uxth	r2, r2
 800518e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800519c:	4581      	cmp	r9, r0
 800519e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051a2:	f84c 3b04 	str.w	r3, [ip], #4
 80051a6:	d2db      	bcs.n	8005160 <quorem+0x44>
 80051a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80051ac:	b92b      	cbnz	r3, 80051ba <quorem+0x9e>
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	3b04      	subs	r3, #4
 80051b2:	429d      	cmp	r5, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	d32f      	bcc.n	8005218 <quorem+0xfc>
 80051b8:	613c      	str	r4, [r7, #16]
 80051ba:	4638      	mov	r0, r7
 80051bc:	f001 f8d4 	bl	8006368 <__mcmp>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	db25      	blt.n	8005210 <quorem+0xf4>
 80051c4:	4628      	mov	r0, r5
 80051c6:	f04f 0c00 	mov.w	ip, #0
 80051ca:	3601      	adds	r6, #1
 80051cc:	f858 1b04 	ldr.w	r1, [r8], #4
 80051d0:	f8d0 e000 	ldr.w	lr, [r0]
 80051d4:	b28b      	uxth	r3, r1
 80051d6:	ebac 0303 	sub.w	r3, ip, r3
 80051da:	fa1f f28e 	uxth.w	r2, lr
 80051de:	4413      	add	r3, r2
 80051e0:	0c0a      	lsrs	r2, r1, #16
 80051e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051f0:	45c1      	cmp	r9, r8
 80051f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051f6:	f840 3b04 	str.w	r3, [r0], #4
 80051fa:	d2e7      	bcs.n	80051cc <quorem+0xb0>
 80051fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005204:	b922      	cbnz	r2, 8005210 <quorem+0xf4>
 8005206:	3b04      	subs	r3, #4
 8005208:	429d      	cmp	r5, r3
 800520a:	461a      	mov	r2, r3
 800520c:	d30a      	bcc.n	8005224 <quorem+0x108>
 800520e:	613c      	str	r4, [r7, #16]
 8005210:	4630      	mov	r0, r6
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	3b04      	subs	r3, #4
 800521c:	2a00      	cmp	r2, #0
 800521e:	d1cb      	bne.n	80051b8 <quorem+0x9c>
 8005220:	3c01      	subs	r4, #1
 8005222:	e7c6      	b.n	80051b2 <quorem+0x96>
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	3b04      	subs	r3, #4
 8005228:	2a00      	cmp	r2, #0
 800522a:	d1f0      	bne.n	800520e <quorem+0xf2>
 800522c:	3c01      	subs	r4, #1
 800522e:	e7eb      	b.n	8005208 <quorem+0xec>
 8005230:	2000      	movs	r0, #0
 8005232:	e7ee      	b.n	8005212 <quorem+0xf6>
 8005234:	0000      	movs	r0, r0
	...

08005238 <_dtoa_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	461f      	mov	r7, r3
 8005240:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005242:	b099      	sub	sp, #100	; 0x64
 8005244:	4605      	mov	r5, r0
 8005246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800524a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800524e:	b974      	cbnz	r4, 800526e <_dtoa_r+0x36>
 8005250:	2010      	movs	r0, #16
 8005252:	f7ff f9e7 	bl	8004624 <malloc>
 8005256:	4602      	mov	r2, r0
 8005258:	6268      	str	r0, [r5, #36]	; 0x24
 800525a:	b920      	cbnz	r0, 8005266 <_dtoa_r+0x2e>
 800525c:	21ea      	movs	r1, #234	; 0xea
 800525e:	4ba8      	ldr	r3, [pc, #672]	; (8005500 <_dtoa_r+0x2c8>)
 8005260:	48a8      	ldr	r0, [pc, #672]	; (8005504 <_dtoa_r+0x2cc>)
 8005262:	f001 faf5 	bl	8006850 <__assert_func>
 8005266:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800526a:	6004      	str	r4, [r0, #0]
 800526c:	60c4      	str	r4, [r0, #12]
 800526e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	b151      	cbz	r1, 800528a <_dtoa_r+0x52>
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	2301      	movs	r3, #1
 8005278:	4093      	lsls	r3, r2
 800527a:	604a      	str	r2, [r1, #4]
 800527c:	608b      	str	r3, [r1, #8]
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fe34 	bl	8005eec <_Bfree>
 8005284:	2200      	movs	r2, #0
 8005286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	1e3b      	subs	r3, r7, #0
 800528c:	bfaf      	iteee	ge
 800528e:	2300      	movge	r3, #0
 8005290:	2201      	movlt	r2, #1
 8005292:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005296:	9305      	strlt	r3, [sp, #20]
 8005298:	bfa8      	it	ge
 800529a:	f8c8 3000 	strge.w	r3, [r8]
 800529e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052a2:	4b99      	ldr	r3, [pc, #612]	; (8005508 <_dtoa_r+0x2d0>)
 80052a4:	bfb8      	it	lt
 80052a6:	f8c8 2000 	strlt.w	r2, [r8]
 80052aa:	ea33 0309 	bics.w	r3, r3, r9
 80052ae:	d119      	bne.n	80052e4 <_dtoa_r+0xac>
 80052b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052bc:	4333      	orrs	r3, r6
 80052be:	f000 857f 	beq.w	8005dc0 <_dtoa_r+0xb88>
 80052c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052c4:	b953      	cbnz	r3, 80052dc <_dtoa_r+0xa4>
 80052c6:	4b91      	ldr	r3, [pc, #580]	; (800550c <_dtoa_r+0x2d4>)
 80052c8:	e022      	b.n	8005310 <_dtoa_r+0xd8>
 80052ca:	4b91      	ldr	r3, [pc, #580]	; (8005510 <_dtoa_r+0x2d8>)
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	3308      	adds	r3, #8
 80052d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	9803      	ldr	r0, [sp, #12]
 80052d6:	b019      	add	sp, #100	; 0x64
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	4b8b      	ldr	r3, [pc, #556]	; (800550c <_dtoa_r+0x2d4>)
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	3303      	adds	r3, #3
 80052e2:	e7f5      	b.n	80052d0 <_dtoa_r+0x98>
 80052e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80052ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f7fb fbc4 	bl	8000a80 <__aeabi_dcmpeq>
 80052f8:	4680      	mov	r8, r0
 80052fa:	b158      	cbz	r0, 8005314 <_dtoa_r+0xdc>
 80052fc:	2301      	movs	r3, #1
 80052fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8558 	beq.w	8005dba <_dtoa_r+0xb82>
 800530a:	4882      	ldr	r0, [pc, #520]	; (8005514 <_dtoa_r+0x2dc>)
 800530c:	6018      	str	r0, [r3, #0]
 800530e:	1e43      	subs	r3, r0, #1
 8005310:	9303      	str	r3, [sp, #12]
 8005312:	e7df      	b.n	80052d4 <_dtoa_r+0x9c>
 8005314:	ab16      	add	r3, sp, #88	; 0x58
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	ab17      	add	r3, sp, #92	; 0x5c
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4628      	mov	r0, r5
 800531e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005322:	f001 f8c9 	bl	80064b8 <__d2b>
 8005326:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800532a:	4683      	mov	fp, r0
 800532c:	2c00      	cmp	r4, #0
 800532e:	d07f      	beq.n	8005430 <_dtoa_r+0x1f8>
 8005330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005336:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800533a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800533e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005342:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005346:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800534a:	2200      	movs	r2, #0
 800534c:	4b72      	ldr	r3, [pc, #456]	; (8005518 <_dtoa_r+0x2e0>)
 800534e:	f7fa ff77 	bl	8000240 <__aeabi_dsub>
 8005352:	a365      	add	r3, pc, #404	; (adr r3, 80054e8 <_dtoa_r+0x2b0>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f92a 	bl	80005b0 <__aeabi_dmul>
 800535c:	a364      	add	r3, pc, #400	; (adr r3, 80054f0 <_dtoa_r+0x2b8>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff6f 	bl	8000244 <__adddf3>
 8005366:	4606      	mov	r6, r0
 8005368:	4620      	mov	r0, r4
 800536a:	460f      	mov	r7, r1
 800536c:	f7fb f8b6 	bl	80004dc <__aeabi_i2d>
 8005370:	a361      	add	r3, pc, #388	; (adr r3, 80054f8 <_dtoa_r+0x2c0>)
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f7fb f91b 	bl	80005b0 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fa ff5f 	bl	8000244 <__adddf3>
 8005386:	4606      	mov	r6, r0
 8005388:	460f      	mov	r7, r1
 800538a:	f7fb fbc1 	bl	8000b10 <__aeabi_d2iz>
 800538e:	2200      	movs	r2, #0
 8005390:	4682      	mov	sl, r0
 8005392:	2300      	movs	r3, #0
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb fb7c 	bl	8000a94 <__aeabi_dcmplt>
 800539c:	b148      	cbz	r0, 80053b2 <_dtoa_r+0x17a>
 800539e:	4650      	mov	r0, sl
 80053a0:	f7fb f89c 	bl	80004dc <__aeabi_i2d>
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	f7fb fb6a 	bl	8000a80 <__aeabi_dcmpeq>
 80053ac:	b908      	cbnz	r0, 80053b2 <_dtoa_r+0x17a>
 80053ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b2:	f1ba 0f16 	cmp.w	sl, #22
 80053b6:	d858      	bhi.n	800546a <_dtoa_r+0x232>
 80053b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053bc:	4b57      	ldr	r3, [pc, #348]	; (800551c <_dtoa_r+0x2e4>)
 80053be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb fb65 	bl	8000a94 <__aeabi_dcmplt>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d04f      	beq.n	800546e <_dtoa_r+0x236>
 80053ce:	2300      	movs	r3, #0
 80053d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80053d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053d8:	1b1c      	subs	r4, r3, r4
 80053da:	1e63      	subs	r3, r4, #1
 80053dc:	9309      	str	r3, [sp, #36]	; 0x24
 80053de:	bf49      	itett	mi
 80053e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80053e4:	2300      	movpl	r3, #0
 80053e6:	9306      	strmi	r3, [sp, #24]
 80053e8:	2300      	movmi	r3, #0
 80053ea:	bf54      	ite	pl
 80053ec:	9306      	strpl	r3, [sp, #24]
 80053ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80053f0:	f1ba 0f00 	cmp.w	sl, #0
 80053f4:	db3d      	blt.n	8005472 <_dtoa_r+0x23a>
 80053f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80053fc:	4453      	add	r3, sl
 80053fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005400:	2300      	movs	r3, #0
 8005402:	930a      	str	r3, [sp, #40]	; 0x28
 8005404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005406:	2b09      	cmp	r3, #9
 8005408:	f200 808c 	bhi.w	8005524 <_dtoa_r+0x2ec>
 800540c:	2b05      	cmp	r3, #5
 800540e:	bfc4      	itt	gt
 8005410:	3b04      	subgt	r3, #4
 8005412:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005416:	bfc8      	it	gt
 8005418:	2400      	movgt	r4, #0
 800541a:	f1a3 0302 	sub.w	r3, r3, #2
 800541e:	bfd8      	it	le
 8005420:	2401      	movle	r4, #1
 8005422:	2b03      	cmp	r3, #3
 8005424:	f200 808a 	bhi.w	800553c <_dtoa_r+0x304>
 8005428:	e8df f003 	tbb	[pc, r3]
 800542c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005430:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005434:	441c      	add	r4, r3
 8005436:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800543a:	2b20      	cmp	r3, #32
 800543c:	bfc3      	ittte	gt
 800543e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005442:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005446:	fa09 f303 	lslgt.w	r3, r9, r3
 800544a:	f1c3 0320 	rsble	r3, r3, #32
 800544e:	bfc6      	itte	gt
 8005450:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005454:	4318      	orrgt	r0, r3
 8005456:	fa06 f003 	lslle.w	r0, r6, r3
 800545a:	f7fb f82f 	bl	80004bc <__aeabi_ui2d>
 800545e:	2301      	movs	r3, #1
 8005460:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005464:	3c01      	subs	r4, #1
 8005466:	9313      	str	r3, [sp, #76]	; 0x4c
 8005468:	e76f      	b.n	800534a <_dtoa_r+0x112>
 800546a:	2301      	movs	r3, #1
 800546c:	e7b2      	b.n	80053d4 <_dtoa_r+0x19c>
 800546e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005470:	e7b1      	b.n	80053d6 <_dtoa_r+0x19e>
 8005472:	9b06      	ldr	r3, [sp, #24]
 8005474:	eba3 030a 	sub.w	r3, r3, sl
 8005478:	9306      	str	r3, [sp, #24]
 800547a:	f1ca 0300 	rsb	r3, sl, #0
 800547e:	930a      	str	r3, [sp, #40]	; 0x28
 8005480:	2300      	movs	r3, #0
 8005482:	930e      	str	r3, [sp, #56]	; 0x38
 8005484:	e7be      	b.n	8005404 <_dtoa_r+0x1cc>
 8005486:	2300      	movs	r3, #0
 8005488:	930b      	str	r3, [sp, #44]	; 0x2c
 800548a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800548c:	2b00      	cmp	r3, #0
 800548e:	dc58      	bgt.n	8005542 <_dtoa_r+0x30a>
 8005490:	f04f 0901 	mov.w	r9, #1
 8005494:	464b      	mov	r3, r9
 8005496:	f8cd 9020 	str.w	r9, [sp, #32]
 800549a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800549e:	2200      	movs	r2, #0
 80054a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054a2:	6042      	str	r2, [r0, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	f102 0614 	add.w	r6, r2, #20
 80054aa:	429e      	cmp	r6, r3
 80054ac:	6841      	ldr	r1, [r0, #4]
 80054ae:	d94e      	bls.n	800554e <_dtoa_r+0x316>
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 fcdb 	bl	8005e6c <_Balloc>
 80054b6:	9003      	str	r0, [sp, #12]
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d14c      	bne.n	8005556 <_dtoa_r+0x31e>
 80054bc:	4602      	mov	r2, r0
 80054be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <_dtoa_r+0x2e8>)
 80054c4:	e6cc      	b.n	8005260 <_dtoa_r+0x28>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e7de      	b.n	8005488 <_dtoa_r+0x250>
 80054ca:	2300      	movs	r3, #0
 80054cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054d0:	eb0a 0903 	add.w	r9, sl, r3
 80054d4:	f109 0301 	add.w	r3, r9, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	bfb8      	it	lt
 80054de:	2301      	movlt	r3, #1
 80054e0:	e7dd      	b.n	800549e <_dtoa_r+0x266>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e7f2      	b.n	80054cc <_dtoa_r+0x294>
 80054e6:	bf00      	nop
 80054e8:	636f4361 	.word	0x636f4361
 80054ec:	3fd287a7 	.word	0x3fd287a7
 80054f0:	8b60c8b3 	.word	0x8b60c8b3
 80054f4:	3fc68a28 	.word	0x3fc68a28
 80054f8:	509f79fb 	.word	0x509f79fb
 80054fc:	3fd34413 	.word	0x3fd34413
 8005500:	08007c25 	.word	0x08007c25
 8005504:	08007c3c 	.word	0x08007c3c
 8005508:	7ff00000 	.word	0x7ff00000
 800550c:	08007c21 	.word	0x08007c21
 8005510:	08007c18 	.word	0x08007c18
 8005514:	08007bf5 	.word	0x08007bf5
 8005518:	3ff80000 	.word	0x3ff80000
 800551c:	08007d30 	.word	0x08007d30
 8005520:	08007c97 	.word	0x08007c97
 8005524:	2401      	movs	r4, #1
 8005526:	2300      	movs	r3, #0
 8005528:	940b      	str	r4, [sp, #44]	; 0x2c
 800552a:	9322      	str	r3, [sp, #136]	; 0x88
 800552c:	f04f 39ff 	mov.w	r9, #4294967295
 8005530:	2200      	movs	r2, #0
 8005532:	2312      	movs	r3, #18
 8005534:	f8cd 9020 	str.w	r9, [sp, #32]
 8005538:	9223      	str	r2, [sp, #140]	; 0x8c
 800553a:	e7b0      	b.n	800549e <_dtoa_r+0x266>
 800553c:	2301      	movs	r3, #1
 800553e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005540:	e7f4      	b.n	800552c <_dtoa_r+0x2f4>
 8005542:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005546:	464b      	mov	r3, r9
 8005548:	f8cd 9020 	str.w	r9, [sp, #32]
 800554c:	e7a7      	b.n	800549e <_dtoa_r+0x266>
 800554e:	3101      	adds	r1, #1
 8005550:	6041      	str	r1, [r0, #4]
 8005552:	0052      	lsls	r2, r2, #1
 8005554:	e7a7      	b.n	80054a6 <_dtoa_r+0x26e>
 8005556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005558:	9a03      	ldr	r2, [sp, #12]
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	2b0e      	cmp	r3, #14
 8005560:	f200 80a8 	bhi.w	80056b4 <_dtoa_r+0x47c>
 8005564:	2c00      	cmp	r4, #0
 8005566:	f000 80a5 	beq.w	80056b4 <_dtoa_r+0x47c>
 800556a:	f1ba 0f00 	cmp.w	sl, #0
 800556e:	dd34      	ble.n	80055da <_dtoa_r+0x3a2>
 8005570:	4a9a      	ldr	r2, [pc, #616]	; (80057dc <_dtoa_r+0x5a4>)
 8005572:	f00a 030f 	and.w	r3, sl, #15
 8005576:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800557a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800557e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005582:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005586:	ea4f 142a 	mov.w	r4, sl, asr #4
 800558a:	d016      	beq.n	80055ba <_dtoa_r+0x382>
 800558c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005590:	4b93      	ldr	r3, [pc, #588]	; (80057e0 <_dtoa_r+0x5a8>)
 8005592:	2703      	movs	r7, #3
 8005594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005598:	f7fb f934 	bl	8000804 <__aeabi_ddiv>
 800559c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055a0:	f004 040f 	and.w	r4, r4, #15
 80055a4:	4e8e      	ldr	r6, [pc, #568]	; (80057e0 <_dtoa_r+0x5a8>)
 80055a6:	b954      	cbnz	r4, 80055be <_dtoa_r+0x386>
 80055a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b0:	f7fb f928 	bl	8000804 <__aeabi_ddiv>
 80055b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055b8:	e029      	b.n	800560e <_dtoa_r+0x3d6>
 80055ba:	2702      	movs	r7, #2
 80055bc:	e7f2      	b.n	80055a4 <_dtoa_r+0x36c>
 80055be:	07e1      	lsls	r1, r4, #31
 80055c0:	d508      	bpl.n	80055d4 <_dtoa_r+0x39c>
 80055c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055ca:	f7fa fff1 	bl	80005b0 <__aeabi_dmul>
 80055ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055d2:	3701      	adds	r7, #1
 80055d4:	1064      	asrs	r4, r4, #1
 80055d6:	3608      	adds	r6, #8
 80055d8:	e7e5      	b.n	80055a6 <_dtoa_r+0x36e>
 80055da:	f000 80a5 	beq.w	8005728 <_dtoa_r+0x4f0>
 80055de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055e2:	f1ca 0400 	rsb	r4, sl, #0
 80055e6:	4b7d      	ldr	r3, [pc, #500]	; (80057dc <_dtoa_r+0x5a4>)
 80055e8:	f004 020f 	and.w	r2, r4, #15
 80055ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa ffdc 	bl	80005b0 <__aeabi_dmul>
 80055f8:	2702      	movs	r7, #2
 80055fa:	2300      	movs	r3, #0
 80055fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005600:	4e77      	ldr	r6, [pc, #476]	; (80057e0 <_dtoa_r+0x5a8>)
 8005602:	1124      	asrs	r4, r4, #4
 8005604:	2c00      	cmp	r4, #0
 8005606:	f040 8084 	bne.w	8005712 <_dtoa_r+0x4da>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1d2      	bne.n	80055b4 <_dtoa_r+0x37c>
 800560e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 808b 	beq.w	800572c <_dtoa_r+0x4f4>
 8005616:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800561a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800561e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005622:	2200      	movs	r2, #0
 8005624:	4b6f      	ldr	r3, [pc, #444]	; (80057e4 <_dtoa_r+0x5ac>)
 8005626:	f7fb fa35 	bl	8000a94 <__aeabi_dcmplt>
 800562a:	2800      	cmp	r0, #0
 800562c:	d07e      	beq.n	800572c <_dtoa_r+0x4f4>
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d07b      	beq.n	800572c <_dtoa_r+0x4f4>
 8005634:	f1b9 0f00 	cmp.w	r9, #0
 8005638:	dd38      	ble.n	80056ac <_dtoa_r+0x474>
 800563a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800563e:	2200      	movs	r2, #0
 8005640:	4b69      	ldr	r3, [pc, #420]	; (80057e8 <_dtoa_r+0x5b0>)
 8005642:	f7fa ffb5 	bl	80005b0 <__aeabi_dmul>
 8005646:	464c      	mov	r4, r9
 8005648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800564c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005650:	3701      	adds	r7, #1
 8005652:	4638      	mov	r0, r7
 8005654:	f7fa ff42 	bl	80004dc <__aeabi_i2d>
 8005658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800565c:	f7fa ffa8 	bl	80005b0 <__aeabi_dmul>
 8005660:	2200      	movs	r2, #0
 8005662:	4b62      	ldr	r3, [pc, #392]	; (80057ec <_dtoa_r+0x5b4>)
 8005664:	f7fa fdee 	bl	8000244 <__adddf3>
 8005668:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800566c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005670:	9611      	str	r6, [sp, #68]	; 0x44
 8005672:	2c00      	cmp	r4, #0
 8005674:	d15d      	bne.n	8005732 <_dtoa_r+0x4fa>
 8005676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567a:	2200      	movs	r2, #0
 800567c:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <_dtoa_r+0x5b8>)
 800567e:	f7fa fddf 	bl	8000240 <__aeabi_dsub>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800568a:	4633      	mov	r3, r6
 800568c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800568e:	f7fb fa1f 	bl	8000ad0 <__aeabi_dcmpgt>
 8005692:	2800      	cmp	r0, #0
 8005694:	f040 829c 	bne.w	8005bd0 <_dtoa_r+0x998>
 8005698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800569c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800569e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056a2:	f7fb f9f7 	bl	8000a94 <__aeabi_dcmplt>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f040 8290 	bne.w	8005bcc <_dtoa_r+0x994>
 80056ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f2c0 8152 	blt.w	8005960 <_dtoa_r+0x728>
 80056bc:	f1ba 0f0e 	cmp.w	sl, #14
 80056c0:	f300 814e 	bgt.w	8005960 <_dtoa_r+0x728>
 80056c4:	4b45      	ldr	r3, [pc, #276]	; (80057dc <_dtoa_r+0x5a4>)
 80056c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80056d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f280 80db 	bge.w	8005890 <_dtoa_r+0x658>
 80056da:	9b08      	ldr	r3, [sp, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f300 80d7 	bgt.w	8005890 <_dtoa_r+0x658>
 80056e2:	f040 8272 	bne.w	8005bca <_dtoa_r+0x992>
 80056e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b40      	ldr	r3, [pc, #256]	; (80057f0 <_dtoa_r+0x5b8>)
 80056ee:	f7fa ff5f 	bl	80005b0 <__aeabi_dmul>
 80056f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f6:	f7fb f9e1 	bl	8000abc <__aeabi_dcmpge>
 80056fa:	9c08      	ldr	r4, [sp, #32]
 80056fc:	4626      	mov	r6, r4
 80056fe:	2800      	cmp	r0, #0
 8005700:	f040 8248 	bne.w	8005b94 <_dtoa_r+0x95c>
 8005704:	2331      	movs	r3, #49	; 0x31
 8005706:	9f03      	ldr	r7, [sp, #12]
 8005708:	f10a 0a01 	add.w	sl, sl, #1
 800570c:	f807 3b01 	strb.w	r3, [r7], #1
 8005710:	e244      	b.n	8005b9c <_dtoa_r+0x964>
 8005712:	07e2      	lsls	r2, r4, #31
 8005714:	d505      	bpl.n	8005722 <_dtoa_r+0x4ea>
 8005716:	e9d6 2300 	ldrd	r2, r3, [r6]
 800571a:	f7fa ff49 	bl	80005b0 <__aeabi_dmul>
 800571e:	2301      	movs	r3, #1
 8005720:	3701      	adds	r7, #1
 8005722:	1064      	asrs	r4, r4, #1
 8005724:	3608      	adds	r6, #8
 8005726:	e76d      	b.n	8005604 <_dtoa_r+0x3cc>
 8005728:	2702      	movs	r7, #2
 800572a:	e770      	b.n	800560e <_dtoa_r+0x3d6>
 800572c:	46d0      	mov	r8, sl
 800572e:	9c08      	ldr	r4, [sp, #32]
 8005730:	e78f      	b.n	8005652 <_dtoa_r+0x41a>
 8005732:	9903      	ldr	r1, [sp, #12]
 8005734:	4b29      	ldr	r3, [pc, #164]	; (80057dc <_dtoa_r+0x5a4>)
 8005736:	4421      	add	r1, r4
 8005738:	9112      	str	r1, [sp, #72]	; 0x48
 800573a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800573c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005740:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005744:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005748:	2900      	cmp	r1, #0
 800574a:	d055      	beq.n	80057f8 <_dtoa_r+0x5c0>
 800574c:	2000      	movs	r0, #0
 800574e:	4929      	ldr	r1, [pc, #164]	; (80057f4 <_dtoa_r+0x5bc>)
 8005750:	f7fb f858 	bl	8000804 <__aeabi_ddiv>
 8005754:	463b      	mov	r3, r7
 8005756:	4632      	mov	r2, r6
 8005758:	f7fa fd72 	bl	8000240 <__aeabi_dsub>
 800575c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005760:	9f03      	ldr	r7, [sp, #12]
 8005762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005766:	f7fb f9d3 	bl	8000b10 <__aeabi_d2iz>
 800576a:	4604      	mov	r4, r0
 800576c:	f7fa feb6 	bl	80004dc <__aeabi_i2d>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005778:	f7fa fd62 	bl	8000240 <__aeabi_dsub>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	3430      	adds	r4, #48	; 0x30
 8005782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800578a:	f807 4b01 	strb.w	r4, [r7], #1
 800578e:	f7fb f981 	bl	8000a94 <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	d174      	bne.n	8005880 <_dtoa_r+0x648>
 8005796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579a:	2000      	movs	r0, #0
 800579c:	4911      	ldr	r1, [pc, #68]	; (80057e4 <_dtoa_r+0x5ac>)
 800579e:	f7fa fd4f 	bl	8000240 <__aeabi_dsub>
 80057a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057a6:	f7fb f975 	bl	8000a94 <__aeabi_dcmplt>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f040 80b7 	bne.w	800591e <_dtoa_r+0x6e6>
 80057b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057b2:	429f      	cmp	r7, r3
 80057b4:	f43f af7a 	beq.w	80056ac <_dtoa_r+0x474>
 80057b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057bc:	2200      	movs	r2, #0
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <_dtoa_r+0x5b0>)
 80057c0:	f7fa fef6 	bl	80005b0 <__aeabi_dmul>
 80057c4:	2200      	movs	r2, #0
 80057c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <_dtoa_r+0x5b0>)
 80057d0:	f7fa feee 	bl	80005b0 <__aeabi_dmul>
 80057d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057d8:	e7c3      	b.n	8005762 <_dtoa_r+0x52a>
 80057da:	bf00      	nop
 80057dc:	08007d30 	.word	0x08007d30
 80057e0:	08007d08 	.word	0x08007d08
 80057e4:	3ff00000 	.word	0x3ff00000
 80057e8:	40240000 	.word	0x40240000
 80057ec:	401c0000 	.word	0x401c0000
 80057f0:	40140000 	.word	0x40140000
 80057f4:	3fe00000 	.word	0x3fe00000
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fa fed8 	bl	80005b0 <__aeabi_dmul>
 8005800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005802:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005806:	9c03      	ldr	r4, [sp, #12]
 8005808:	9314      	str	r3, [sp, #80]	; 0x50
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	f7fb f97f 	bl	8000b10 <__aeabi_d2iz>
 8005812:	9015      	str	r0, [sp, #84]	; 0x54
 8005814:	f7fa fe62 	bl	80004dc <__aeabi_i2d>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005820:	f7fa fd0e 	bl	8000240 <__aeabi_dsub>
 8005824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005826:	4606      	mov	r6, r0
 8005828:	3330      	adds	r3, #48	; 0x30
 800582a:	f804 3b01 	strb.w	r3, [r4], #1
 800582e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005830:	460f      	mov	r7, r1
 8005832:	429c      	cmp	r4, r3
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	d124      	bne.n	8005884 <_dtoa_r+0x64c>
 800583a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800583e:	4bb0      	ldr	r3, [pc, #704]	; (8005b00 <_dtoa_r+0x8c8>)
 8005840:	f7fa fd00 	bl	8000244 <__adddf3>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f7fb f940 	bl	8000ad0 <__aeabi_dcmpgt>
 8005850:	2800      	cmp	r0, #0
 8005852:	d163      	bne.n	800591c <_dtoa_r+0x6e4>
 8005854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005858:	2000      	movs	r0, #0
 800585a:	49a9      	ldr	r1, [pc, #676]	; (8005b00 <_dtoa_r+0x8c8>)
 800585c:	f7fa fcf0 	bl	8000240 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fb f914 	bl	8000a94 <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f af1d 	beq.w	80056ac <_dtoa_r+0x474>
 8005872:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005874:	1e7b      	subs	r3, r7, #1
 8005876:	9314      	str	r3, [sp, #80]	; 0x50
 8005878:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d0f8      	beq.n	8005872 <_dtoa_r+0x63a>
 8005880:	46c2      	mov	sl, r8
 8005882:	e03b      	b.n	80058fc <_dtoa_r+0x6c4>
 8005884:	4b9f      	ldr	r3, [pc, #636]	; (8005b04 <_dtoa_r+0x8cc>)
 8005886:	f7fa fe93 	bl	80005b0 <__aeabi_dmul>
 800588a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800588e:	e7bc      	b.n	800580a <_dtoa_r+0x5d2>
 8005890:	9f03      	ldr	r7, [sp, #12]
 8005892:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa ffb1 	bl	8000804 <__aeabi_ddiv>
 80058a2:	f7fb f935 	bl	8000b10 <__aeabi_d2iz>
 80058a6:	4604      	mov	r4, r0
 80058a8:	f7fa fe18 	bl	80004dc <__aeabi_i2d>
 80058ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058b0:	f7fa fe7e 	bl	80005b0 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fa fcc0 	bl	8000240 <__aeabi_dsub>
 80058c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058c4:	f807 6b01 	strb.w	r6, [r7], #1
 80058c8:	9e03      	ldr	r6, [sp, #12]
 80058ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80058ce:	1bbe      	subs	r6, r7, r6
 80058d0:	45b4      	cmp	ip, r6
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	d136      	bne.n	8005946 <_dtoa_r+0x70e>
 80058d8:	f7fa fcb4 	bl	8000244 <__adddf3>
 80058dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	f7fb f8f4 	bl	8000ad0 <__aeabi_dcmpgt>
 80058e8:	bb58      	cbnz	r0, 8005942 <_dtoa_r+0x70a>
 80058ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ee:	4640      	mov	r0, r8
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7fb f8c5 	bl	8000a80 <__aeabi_dcmpeq>
 80058f6:	b108      	cbz	r0, 80058fc <_dtoa_r+0x6c4>
 80058f8:	07e1      	lsls	r1, r4, #31
 80058fa:	d422      	bmi.n	8005942 <_dtoa_r+0x70a>
 80058fc:	4628      	mov	r0, r5
 80058fe:	4659      	mov	r1, fp
 8005900:	f000 faf4 	bl	8005eec <_Bfree>
 8005904:	2300      	movs	r3, #0
 8005906:	703b      	strb	r3, [r7, #0]
 8005908:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800590a:	f10a 0001 	add.w	r0, sl, #1
 800590e:	6018      	str	r0, [r3, #0]
 8005910:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005912:	2b00      	cmp	r3, #0
 8005914:	f43f acde 	beq.w	80052d4 <_dtoa_r+0x9c>
 8005918:	601f      	str	r7, [r3, #0]
 800591a:	e4db      	b.n	80052d4 <_dtoa_r+0x9c>
 800591c:	4627      	mov	r7, r4
 800591e:	463b      	mov	r3, r7
 8005920:	461f      	mov	r7, r3
 8005922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005926:	2a39      	cmp	r2, #57	; 0x39
 8005928:	d107      	bne.n	800593a <_dtoa_r+0x702>
 800592a:	9a03      	ldr	r2, [sp, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d1f7      	bne.n	8005920 <_dtoa_r+0x6e8>
 8005930:	2230      	movs	r2, #48	; 0x30
 8005932:	9903      	ldr	r1, [sp, #12]
 8005934:	f108 0801 	add.w	r8, r8, #1
 8005938:	700a      	strb	r2, [r1, #0]
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	3201      	adds	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e79e      	b.n	8005880 <_dtoa_r+0x648>
 8005942:	46d0      	mov	r8, sl
 8005944:	e7eb      	b.n	800591e <_dtoa_r+0x6e6>
 8005946:	2200      	movs	r2, #0
 8005948:	4b6e      	ldr	r3, [pc, #440]	; (8005b04 <_dtoa_r+0x8cc>)
 800594a:	f7fa fe31 	bl	80005b0 <__aeabi_dmul>
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	4680      	mov	r8, r0
 8005954:	4689      	mov	r9, r1
 8005956:	f7fb f893 	bl	8000a80 <__aeabi_dcmpeq>
 800595a:	2800      	cmp	r0, #0
 800595c:	d09b      	beq.n	8005896 <_dtoa_r+0x65e>
 800595e:	e7cd      	b.n	80058fc <_dtoa_r+0x6c4>
 8005960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005962:	2a00      	cmp	r2, #0
 8005964:	f000 80d0 	beq.w	8005b08 <_dtoa_r+0x8d0>
 8005968:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800596a:	2a01      	cmp	r2, #1
 800596c:	f300 80ae 	bgt.w	8005acc <_dtoa_r+0x894>
 8005970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005972:	2a00      	cmp	r2, #0
 8005974:	f000 80a6 	beq.w	8005ac4 <_dtoa_r+0x88c>
 8005978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800597c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800597e:	9f06      	ldr	r7, [sp, #24]
 8005980:	9a06      	ldr	r2, [sp, #24]
 8005982:	2101      	movs	r1, #1
 8005984:	441a      	add	r2, r3
 8005986:	9206      	str	r2, [sp, #24]
 8005988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800598a:	4628      	mov	r0, r5
 800598c:	441a      	add	r2, r3
 800598e:	9209      	str	r2, [sp, #36]	; 0x24
 8005990:	f000 fb62 	bl	8006058 <__i2b>
 8005994:	4606      	mov	r6, r0
 8005996:	2f00      	cmp	r7, #0
 8005998:	dd0c      	ble.n	80059b4 <_dtoa_r+0x77c>
 800599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	dd09      	ble.n	80059b4 <_dtoa_r+0x77c>
 80059a0:	42bb      	cmp	r3, r7
 80059a2:	bfa8      	it	ge
 80059a4:	463b      	movge	r3, r7
 80059a6:	9a06      	ldr	r2, [sp, #24]
 80059a8:	1aff      	subs	r7, r7, r3
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	9206      	str	r2, [sp, #24]
 80059ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
 80059b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b6:	b1f3      	cbz	r3, 80059f6 <_dtoa_r+0x7be>
 80059b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80a8 	beq.w	8005b10 <_dtoa_r+0x8d8>
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	dd10      	ble.n	80059e6 <_dtoa_r+0x7ae>
 80059c4:	4631      	mov	r1, r6
 80059c6:	4622      	mov	r2, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fc03 	bl	80061d4 <__pow5mult>
 80059ce:	465a      	mov	r2, fp
 80059d0:	4601      	mov	r1, r0
 80059d2:	4606      	mov	r6, r0
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fb55 	bl	8006084 <__multiply>
 80059da:	4680      	mov	r8, r0
 80059dc:	4659      	mov	r1, fp
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fa84 	bl	8005eec <_Bfree>
 80059e4:	46c3      	mov	fp, r8
 80059e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e8:	1b1a      	subs	r2, r3, r4
 80059ea:	d004      	beq.n	80059f6 <_dtoa_r+0x7be>
 80059ec:	4659      	mov	r1, fp
 80059ee:	4628      	mov	r0, r5
 80059f0:	f000 fbf0 	bl	80061d4 <__pow5mult>
 80059f4:	4683      	mov	fp, r0
 80059f6:	2101      	movs	r1, #1
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 fb2d 	bl	8006058 <__i2b>
 80059fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a00:	4604      	mov	r4, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f340 8086 	ble.w	8005b14 <_dtoa_r+0x8dc>
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 fbe1 	bl	80061d4 <__pow5mult>
 8005a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a14:	4604      	mov	r4, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	dd7f      	ble.n	8005b1a <_dtoa_r+0x8e2>
 8005a1a:	f04f 0800 	mov.w	r8, #0
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a24:	6918      	ldr	r0, [r3, #16]
 8005a26:	f000 fac9 	bl	8005fbc <__hi0bits>
 8005a2a:	f1c0 0020 	rsb	r0, r0, #32
 8005a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a30:	4418      	add	r0, r3
 8005a32:	f010 001f 	ands.w	r0, r0, #31
 8005a36:	f000 8092 	beq.w	8005b5e <_dtoa_r+0x926>
 8005a3a:	f1c0 0320 	rsb	r3, r0, #32
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	f340 808a 	ble.w	8005b58 <_dtoa_r+0x920>
 8005a44:	f1c0 001c 	rsb	r0, r0, #28
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	4407      	add	r7, r0
 8005a4c:	4403      	add	r3, r0
 8005a4e:	9306      	str	r3, [sp, #24]
 8005a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a52:	4403      	add	r3, r0
 8005a54:	9309      	str	r3, [sp, #36]	; 0x24
 8005a56:	9b06      	ldr	r3, [sp, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dd05      	ble.n	8005a68 <_dtoa_r+0x830>
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fc11 	bl	8006288 <__lshift>
 8005a66:	4683      	mov	fp, r0
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd05      	ble.n	8005a7a <_dtoa_r+0x842>
 8005a6e:	4621      	mov	r1, r4
 8005a70:	461a      	mov	r2, r3
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fc08 	bl	8006288 <__lshift>
 8005a78:	4604      	mov	r4, r0
 8005a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d070      	beq.n	8005b62 <_dtoa_r+0x92a>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4658      	mov	r0, fp
 8005a84:	f000 fc70 	bl	8006368 <__mcmp>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	da6a      	bge.n	8005b62 <_dtoa_r+0x92a>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4659      	mov	r1, fp
 8005a90:	220a      	movs	r2, #10
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 fa4c 	bl	8005f30 <__multadd>
 8005a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a9a:	4683      	mov	fp, r0
 8005a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8194 	beq.w	8005dce <_dtoa_r+0xb96>
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	220a      	movs	r2, #10
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 fa3f 	bl	8005f30 <__multadd>
 8005ab2:	f1b9 0f00 	cmp.w	r9, #0
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	f300 8093 	bgt.w	8005be2 <_dtoa_r+0x9aa>
 8005abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	dc57      	bgt.n	8005b72 <_dtoa_r+0x93a>
 8005ac2:	e08e      	b.n	8005be2 <_dtoa_r+0x9aa>
 8005ac4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005aca:	e757      	b.n	800597c <_dtoa_r+0x744>
 8005acc:	9b08      	ldr	r3, [sp, #32]
 8005ace:	1e5c      	subs	r4, r3, #1
 8005ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	bfb7      	itett	lt
 8005ad6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ad8:	1b1c      	subge	r4, r3, r4
 8005ada:	1ae2      	sublt	r2, r4, r3
 8005adc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ade:	bfbe      	ittt	lt
 8005ae0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ae2:	189b      	addlt	r3, r3, r2
 8005ae4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ae6:	9b08      	ldr	r3, [sp, #32]
 8005ae8:	bfb8      	it	lt
 8005aea:	2400      	movlt	r4, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfbb      	ittet	lt
 8005af0:	9b06      	ldrlt	r3, [sp, #24]
 8005af2:	9a08      	ldrlt	r2, [sp, #32]
 8005af4:	9f06      	ldrge	r7, [sp, #24]
 8005af6:	1a9f      	sublt	r7, r3, r2
 8005af8:	bfac      	ite	ge
 8005afa:	9b08      	ldrge	r3, [sp, #32]
 8005afc:	2300      	movlt	r3, #0
 8005afe:	e73f      	b.n	8005980 <_dtoa_r+0x748>
 8005b00:	3fe00000 	.word	0x3fe00000
 8005b04:	40240000 	.word	0x40240000
 8005b08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b0a:	9f06      	ldr	r7, [sp, #24]
 8005b0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b0e:	e742      	b.n	8005996 <_dtoa_r+0x75e>
 8005b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b12:	e76b      	b.n	80059ec <_dtoa_r+0x7b4>
 8005b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	dc19      	bgt.n	8005b4e <_dtoa_r+0x916>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	b9bb      	cbnz	r3, 8005b4e <_dtoa_r+0x916>
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b24:	b99b      	cbnz	r3, 8005b4e <_dtoa_r+0x916>
 8005b26:	9b05      	ldr	r3, [sp, #20]
 8005b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	0d1b      	lsrs	r3, r3, #20
 8005b2e:	051b      	lsls	r3, r3, #20
 8005b30:	b183      	cbz	r3, 8005b54 <_dtoa_r+0x91c>
 8005b32:	f04f 0801 	mov.w	r8, #1
 8005b36:	9b06      	ldr	r3, [sp, #24]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	9306      	str	r3, [sp, #24]
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	3301      	adds	r3, #1
 8005b40:	9309      	str	r3, [sp, #36]	; 0x24
 8005b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f47f af6a 	bne.w	8005a1e <_dtoa_r+0x7e6>
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	e76f      	b.n	8005a2e <_dtoa_r+0x7f6>
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	e7f6      	b.n	8005b42 <_dtoa_r+0x90a>
 8005b54:	4698      	mov	r8, r3
 8005b56:	e7f4      	b.n	8005b42 <_dtoa_r+0x90a>
 8005b58:	f43f af7d 	beq.w	8005a56 <_dtoa_r+0x81e>
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	301c      	adds	r0, #28
 8005b60:	e772      	b.n	8005a48 <_dtoa_r+0x810>
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dc36      	bgt.n	8005bd6 <_dtoa_r+0x99e>
 8005b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	dd33      	ble.n	8005bd6 <_dtoa_r+0x99e>
 8005b6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b72:	f1b9 0f00 	cmp.w	r9, #0
 8005b76:	d10d      	bne.n	8005b94 <_dtoa_r+0x95c>
 8005b78:	4621      	mov	r1, r4
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f9d6 	bl	8005f30 <__multadd>
 8005b84:	4601      	mov	r1, r0
 8005b86:	4604      	mov	r4, r0
 8005b88:	4658      	mov	r0, fp
 8005b8a:	f000 fbed 	bl	8006368 <__mcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f73f adb8 	bgt.w	8005704 <_dtoa_r+0x4cc>
 8005b94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b96:	9f03      	ldr	r7, [sp, #12]
 8005b98:	ea6f 0a03 	mvn.w	sl, r3
 8005b9c:	f04f 0800 	mov.w	r8, #0
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f9a2 	bl	8005eec <_Bfree>
 8005ba8:	2e00      	cmp	r6, #0
 8005baa:	f43f aea7 	beq.w	80058fc <_dtoa_r+0x6c4>
 8005bae:	f1b8 0f00 	cmp.w	r8, #0
 8005bb2:	d005      	beq.n	8005bc0 <_dtoa_r+0x988>
 8005bb4:	45b0      	cmp	r8, r6
 8005bb6:	d003      	beq.n	8005bc0 <_dtoa_r+0x988>
 8005bb8:	4641      	mov	r1, r8
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f996 	bl	8005eec <_Bfree>
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f992 	bl	8005eec <_Bfree>
 8005bc8:	e698      	b.n	80058fc <_dtoa_r+0x6c4>
 8005bca:	2400      	movs	r4, #0
 8005bcc:	4626      	mov	r6, r4
 8005bce:	e7e1      	b.n	8005b94 <_dtoa_r+0x95c>
 8005bd0:	46c2      	mov	sl, r8
 8005bd2:	4626      	mov	r6, r4
 8005bd4:	e596      	b.n	8005704 <_dtoa_r+0x4cc>
 8005bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80fd 	beq.w	8005ddc <_dtoa_r+0xba4>
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	dd05      	ble.n	8005bf2 <_dtoa_r+0x9ba>
 8005be6:	4631      	mov	r1, r6
 8005be8:	463a      	mov	r2, r7
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 fb4c 	bl	8006288 <__lshift>
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	f1b8 0f00 	cmp.w	r8, #0
 8005bf6:	d05c      	beq.n	8005cb2 <_dtoa_r+0xa7a>
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	6871      	ldr	r1, [r6, #4]
 8005bfc:	f000 f936 	bl	8005e6c <_Balloc>
 8005c00:	4607      	mov	r7, r0
 8005c02:	b928      	cbnz	r0, 8005c10 <_dtoa_r+0x9d8>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <_dtoa_r+0xbd0>)
 8005c0c:	f7ff bb28 	b.w	8005260 <_dtoa_r+0x28>
 8005c10:	6932      	ldr	r2, [r6, #16]
 8005c12:	f106 010c 	add.w	r1, r6, #12
 8005c16:	3202      	adds	r2, #2
 8005c18:	0092      	lsls	r2, r2, #2
 8005c1a:	300c      	adds	r0, #12
 8005c1c:	f000 f90c 	bl	8005e38 <memcpy>
 8005c20:	2201      	movs	r2, #1
 8005c22:	4639      	mov	r1, r7
 8005c24:	4628      	mov	r0, r5
 8005c26:	f000 fb2f 	bl	8006288 <__lshift>
 8005c2a:	46b0      	mov	r8, r6
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	9308      	str	r3, [sp, #32]
 8005c34:	9b03      	ldr	r3, [sp, #12]
 8005c36:	444b      	add	r3, r9
 8005c38:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	9309      	str	r3, [sp, #36]	; 0x24
 8005c42:	9b08      	ldr	r3, [sp, #32]
 8005c44:	4621      	mov	r1, r4
 8005c46:	3b01      	subs	r3, #1
 8005c48:	4658      	mov	r0, fp
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	f7ff fa66 	bl	800511c <quorem>
 8005c50:	4603      	mov	r3, r0
 8005c52:	4641      	mov	r1, r8
 8005c54:	3330      	adds	r3, #48	; 0x30
 8005c56:	9006      	str	r0, [sp, #24]
 8005c58:	4658      	mov	r0, fp
 8005c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c5c:	f000 fb84 	bl	8006368 <__mcmp>
 8005c60:	4632      	mov	r2, r6
 8005c62:	4681      	mov	r9, r0
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fb9a 	bl	80063a0 <__mdiff>
 8005c6c:	68c2      	ldr	r2, [r0, #12]
 8005c6e:	4607      	mov	r7, r0
 8005c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c72:	bb02      	cbnz	r2, 8005cb6 <_dtoa_r+0xa7e>
 8005c74:	4601      	mov	r1, r0
 8005c76:	4658      	mov	r0, fp
 8005c78:	f000 fb76 	bl	8006368 <__mcmp>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c80:	4639      	mov	r1, r7
 8005c82:	4628      	mov	r0, r5
 8005c84:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005c88:	f000 f930 	bl	8005eec <_Bfree>
 8005c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c90:	9f08      	ldr	r7, [sp, #32]
 8005c92:	ea43 0102 	orr.w	r1, r3, r2
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c9c:	d10d      	bne.n	8005cba <_dtoa_r+0xa82>
 8005c9e:	2b39      	cmp	r3, #57	; 0x39
 8005ca0:	d029      	beq.n	8005cf6 <_dtoa_r+0xabe>
 8005ca2:	f1b9 0f00 	cmp.w	r9, #0
 8005ca6:	dd01      	ble.n	8005cac <_dtoa_r+0xa74>
 8005ca8:	9b06      	ldr	r3, [sp, #24]
 8005caa:	3331      	adds	r3, #49	; 0x31
 8005cac:	9a04      	ldr	r2, [sp, #16]
 8005cae:	7013      	strb	r3, [r2, #0]
 8005cb0:	e776      	b.n	8005ba0 <_dtoa_r+0x968>
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	e7b9      	b.n	8005c2a <_dtoa_r+0x9f2>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	e7e2      	b.n	8005c80 <_dtoa_r+0xa48>
 8005cba:	f1b9 0f00 	cmp.w	r9, #0
 8005cbe:	db06      	blt.n	8005cce <_dtoa_r+0xa96>
 8005cc0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005cc2:	ea41 0909 	orr.w	r9, r1, r9
 8005cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cc8:	ea59 0101 	orrs.w	r1, r9, r1
 8005ccc:	d120      	bne.n	8005d10 <_dtoa_r+0xad8>
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	ddec      	ble.n	8005cac <_dtoa_r+0xa74>
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	f000 fad5 	bl	8006288 <__lshift>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4683      	mov	fp, r0
 8005ce2:	f000 fb41 	bl	8006368 <__mcmp>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	9b08      	ldr	r3, [sp, #32]
 8005cea:	dc02      	bgt.n	8005cf2 <_dtoa_r+0xaba>
 8005cec:	d1de      	bne.n	8005cac <_dtoa_r+0xa74>
 8005cee:	07da      	lsls	r2, r3, #31
 8005cf0:	d5dc      	bpl.n	8005cac <_dtoa_r+0xa74>
 8005cf2:	2b39      	cmp	r3, #57	; 0x39
 8005cf4:	d1d8      	bne.n	8005ca8 <_dtoa_r+0xa70>
 8005cf6:	2339      	movs	r3, #57	; 0x39
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	7013      	strb	r3, [r2, #0]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	461f      	mov	r7, r3
 8005d00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	2a39      	cmp	r2, #57	; 0x39
 8005d08:	d050      	beq.n	8005dac <_dtoa_r+0xb74>
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e747      	b.n	8005ba0 <_dtoa_r+0x968>
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	dd03      	ble.n	8005d1c <_dtoa_r+0xae4>
 8005d14:	2b39      	cmp	r3, #57	; 0x39
 8005d16:	d0ee      	beq.n	8005cf6 <_dtoa_r+0xabe>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	e7c7      	b.n	8005cac <_dtoa_r+0xa74>
 8005d1c:	9a08      	ldr	r2, [sp, #32]
 8005d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d24:	428a      	cmp	r2, r1
 8005d26:	d02a      	beq.n	8005d7e <_dtoa_r+0xb46>
 8005d28:	4659      	mov	r1, fp
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f8fe 	bl	8005f30 <__multadd>
 8005d34:	45b0      	cmp	r8, r6
 8005d36:	4683      	mov	fp, r0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	f04f 020a 	mov.w	r2, #10
 8005d40:	4641      	mov	r1, r8
 8005d42:	4628      	mov	r0, r5
 8005d44:	d107      	bne.n	8005d56 <_dtoa_r+0xb1e>
 8005d46:	f000 f8f3 	bl	8005f30 <__multadd>
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	9b08      	ldr	r3, [sp, #32]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9308      	str	r3, [sp, #32]
 8005d54:	e775      	b.n	8005c42 <_dtoa_r+0xa0a>
 8005d56:	f000 f8eb 	bl	8005f30 <__multadd>
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	220a      	movs	r2, #10
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f8e4 	bl	8005f30 <__multadd>
 8005d68:	4606      	mov	r6, r0
 8005d6a:	e7f0      	b.n	8005d4e <_dtoa_r+0xb16>
 8005d6c:	f1b9 0f00 	cmp.w	r9, #0
 8005d70:	bfcc      	ite	gt
 8005d72:	464f      	movgt	r7, r9
 8005d74:	2701      	movle	r7, #1
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	9a03      	ldr	r2, [sp, #12]
 8005d7c:	4417      	add	r7, r2
 8005d7e:	4659      	mov	r1, fp
 8005d80:	2201      	movs	r2, #1
 8005d82:	4628      	mov	r0, r5
 8005d84:	9308      	str	r3, [sp, #32]
 8005d86:	f000 fa7f 	bl	8006288 <__lshift>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4683      	mov	fp, r0
 8005d8e:	f000 faeb 	bl	8006368 <__mcmp>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	dcb2      	bgt.n	8005cfc <_dtoa_r+0xac4>
 8005d96:	d102      	bne.n	8005d9e <_dtoa_r+0xb66>
 8005d98:	9b08      	ldr	r3, [sp, #32]
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d4ae      	bmi.n	8005cfc <_dtoa_r+0xac4>
 8005d9e:	463b      	mov	r3, r7
 8005da0:	461f      	mov	r7, r3
 8005da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005da6:	2a30      	cmp	r2, #48	; 0x30
 8005da8:	d0fa      	beq.n	8005da0 <_dtoa_r+0xb68>
 8005daa:	e6f9      	b.n	8005ba0 <_dtoa_r+0x968>
 8005dac:	9a03      	ldr	r2, [sp, #12]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d1a5      	bne.n	8005cfe <_dtoa_r+0xac6>
 8005db2:	2331      	movs	r3, #49	; 0x31
 8005db4:	f10a 0a01 	add.w	sl, sl, #1
 8005db8:	e779      	b.n	8005cae <_dtoa_r+0xa76>
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <_dtoa_r+0xbd4>)
 8005dbc:	f7ff baa8 	b.w	8005310 <_dtoa_r+0xd8>
 8005dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f47f aa81 	bne.w	80052ca <_dtoa_r+0x92>
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <_dtoa_r+0xbd8>)
 8005dca:	f7ff baa1 	b.w	8005310 <_dtoa_r+0xd8>
 8005dce:	f1b9 0f00 	cmp.w	r9, #0
 8005dd2:	dc03      	bgt.n	8005ddc <_dtoa_r+0xba4>
 8005dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f73f aecb 	bgt.w	8005b72 <_dtoa_r+0x93a>
 8005ddc:	9f03      	ldr	r7, [sp, #12]
 8005dde:	4621      	mov	r1, r4
 8005de0:	4658      	mov	r0, fp
 8005de2:	f7ff f99b 	bl	800511c <quorem>
 8005de6:	9a03      	ldr	r2, [sp, #12]
 8005de8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005dec:	f807 3b01 	strb.w	r3, [r7], #1
 8005df0:	1aba      	subs	r2, r7, r2
 8005df2:	4591      	cmp	r9, r2
 8005df4:	ddba      	ble.n	8005d6c <_dtoa_r+0xb34>
 8005df6:	4659      	mov	r1, fp
 8005df8:	2300      	movs	r3, #0
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 f897 	bl	8005f30 <__multadd>
 8005e02:	4683      	mov	fp, r0
 8005e04:	e7eb      	b.n	8005dde <_dtoa_r+0xba6>
 8005e06:	bf00      	nop
 8005e08:	08007c97 	.word	0x08007c97
 8005e0c:	08007bf4 	.word	0x08007bf4
 8005e10:	08007c18 	.word	0x08007c18

08005e14 <_localeconv_r>:
 8005e14:	4800      	ldr	r0, [pc, #0]	; (8005e18 <_localeconv_r+0x4>)
 8005e16:	4770      	bx	lr
 8005e18:	20000194 	.word	0x20000194

08005e1c <memchr>:
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	b2c9      	uxtb	r1, r1
 8005e22:	4402      	add	r2, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	d101      	bne.n	8005e2e <memchr+0x12>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e003      	b.n	8005e36 <memchr+0x1a>
 8005e2e:	7804      	ldrb	r4, [r0, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	428c      	cmp	r4, r1
 8005e34:	d1f6      	bne.n	8005e24 <memchr+0x8>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <memcpy>:
 8005e38:	440a      	add	r2, r1
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e40:	d100      	bne.n	8005e44 <memcpy+0xc>
 8005e42:	4770      	bx	lr
 8005e44:	b510      	push	{r4, lr}
 8005e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e50:	d1f9      	bne.n	8005e46 <memcpy+0xe>
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <__malloc_lock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__malloc_lock+0x8>)
 8005e56:	f000 bd2c 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	200003d4 	.word	0x200003d4

08005e60 <__malloc_unlock>:
 8005e60:	4801      	ldr	r0, [pc, #4]	; (8005e68 <__malloc_unlock+0x8>)
 8005e62:	f000 bd27 	b.w	80068b4 <__retarget_lock_release_recursive>
 8005e66:	bf00      	nop
 8005e68:	200003d4 	.word	0x200003d4

08005e6c <_Balloc>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	b976      	cbnz	r6, 8005e94 <_Balloc+0x28>
 8005e76:	2010      	movs	r0, #16
 8005e78:	f7fe fbd4 	bl	8004624 <malloc>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6260      	str	r0, [r4, #36]	; 0x24
 8005e80:	b920      	cbnz	r0, 8005e8c <_Balloc+0x20>
 8005e82:	2166      	movs	r1, #102	; 0x66
 8005e84:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <_Balloc+0x78>)
 8005e86:	4818      	ldr	r0, [pc, #96]	; (8005ee8 <_Balloc+0x7c>)
 8005e88:	f000 fce2 	bl	8006850 <__assert_func>
 8005e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e90:	6006      	str	r6, [r0, #0]
 8005e92:	60c6      	str	r6, [r0, #12]
 8005e94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e96:	68f3      	ldr	r3, [r6, #12]
 8005e98:	b183      	cbz	r3, 8005ebc <_Balloc+0x50>
 8005e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ea2:	b9b8      	cbnz	r0, 8005ed4 <_Balloc+0x68>
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8005eaa:	1d72      	adds	r2, r6, #5
 8005eac:	4620      	mov	r0, r4
 8005eae:	0092      	lsls	r2, r2, #2
 8005eb0:	f000 fb5e 	bl	8006570 <_calloc_r>
 8005eb4:	b160      	cbz	r0, 8005ed0 <_Balloc+0x64>
 8005eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eba:	e00e      	b.n	8005eda <_Balloc+0x6e>
 8005ebc:	2221      	movs	r2, #33	; 0x21
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 fb55 	bl	8006570 <_calloc_r>
 8005ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec8:	60f0      	str	r0, [r6, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e4      	bne.n	8005e9a <_Balloc+0x2e>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	6802      	ldr	r2, [r0, #0]
 8005ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005eda:	2300      	movs	r3, #0
 8005edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ee0:	e7f7      	b.n	8005ed2 <_Balloc+0x66>
 8005ee2:	bf00      	nop
 8005ee4:	08007c25 	.word	0x08007c25
 8005ee8:	08007ca8 	.word	0x08007ca8

08005eec <_Bfree>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	b976      	cbnz	r6, 8005f14 <_Bfree+0x28>
 8005ef6:	2010      	movs	r0, #16
 8005ef8:	f7fe fb94 	bl	8004624 <malloc>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6268      	str	r0, [r5, #36]	; 0x24
 8005f00:	b920      	cbnz	r0, 8005f0c <_Bfree+0x20>
 8005f02:	218a      	movs	r1, #138	; 0x8a
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <_Bfree+0x3c>)
 8005f06:	4809      	ldr	r0, [pc, #36]	; (8005f2c <_Bfree+0x40>)
 8005f08:	f000 fca2 	bl	8006850 <__assert_func>
 8005f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f10:	6006      	str	r6, [r0, #0]
 8005f12:	60c6      	str	r6, [r0, #12]
 8005f14:	b13c      	cbz	r4, 8005f26 <_Bfree+0x3a>
 8005f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f18:	6862      	ldr	r2, [r4, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f20:	6021      	str	r1, [r4, #0]
 8005f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	08007c25 	.word	0x08007c25
 8005f2c:	08007ca8 	.word	0x08007ca8

08005f30 <__multadd>:
 8005f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f34:	4607      	mov	r7, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	461e      	mov	r6, r3
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	690d      	ldr	r5, [r1, #16]
 8005f3e:	f101 0c14 	add.w	ip, r1, #20
 8005f42:	f8dc 3000 	ldr.w	r3, [ip]
 8005f46:	3001      	adds	r0, #1
 8005f48:	b299      	uxth	r1, r3
 8005f4a:	fb02 6101 	mla	r1, r2, r1, r6
 8005f4e:	0c1e      	lsrs	r6, r3, #16
 8005f50:	0c0b      	lsrs	r3, r1, #16
 8005f52:	fb02 3306 	mla	r3, r2, r6, r3
 8005f56:	b289      	uxth	r1, r1
 8005f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f5c:	4285      	cmp	r5, r0
 8005f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f62:	f84c 1b04 	str.w	r1, [ip], #4
 8005f66:	dcec      	bgt.n	8005f42 <__multadd+0x12>
 8005f68:	b30e      	cbz	r6, 8005fae <__multadd+0x7e>
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dc19      	bgt.n	8005fa4 <__multadd+0x74>
 8005f70:	6861      	ldr	r1, [r4, #4]
 8005f72:	4638      	mov	r0, r7
 8005f74:	3101      	adds	r1, #1
 8005f76:	f7ff ff79 	bl	8005e6c <_Balloc>
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	b928      	cbnz	r0, 8005f8a <__multadd+0x5a>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	21b5      	movs	r1, #181	; 0xb5
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <__multadd+0x84>)
 8005f84:	480c      	ldr	r0, [pc, #48]	; (8005fb8 <__multadd+0x88>)
 8005f86:	f000 fc63 	bl	8006850 <__assert_func>
 8005f8a:	6922      	ldr	r2, [r4, #16]
 8005f8c:	f104 010c 	add.w	r1, r4, #12
 8005f90:	3202      	adds	r2, #2
 8005f92:	0092      	lsls	r2, r2, #2
 8005f94:	300c      	adds	r0, #12
 8005f96:	f7ff ff4f 	bl	8005e38 <memcpy>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff ffa5 	bl	8005eec <_Bfree>
 8005fa2:	4644      	mov	r4, r8
 8005fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fa8:	3501      	adds	r5, #1
 8005faa:	615e      	str	r6, [r3, #20]
 8005fac:	6125      	str	r5, [r4, #16]
 8005fae:	4620      	mov	r0, r4
 8005fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb4:	08007c97 	.word	0x08007c97
 8005fb8:	08007ca8 	.word	0x08007ca8

08005fbc <__hi0bits>:
 8005fbc:	0c02      	lsrs	r2, r0, #16
 8005fbe:	0412      	lsls	r2, r2, #16
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	b9ca      	cbnz	r2, 8005ff8 <__hi0bits+0x3c>
 8005fc4:	0403      	lsls	r3, r0, #16
 8005fc6:	2010      	movs	r0, #16
 8005fc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fcc:	bf04      	itt	eq
 8005fce:	021b      	lsleq	r3, r3, #8
 8005fd0:	3008      	addeq	r0, #8
 8005fd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fd6:	bf04      	itt	eq
 8005fd8:	011b      	lsleq	r3, r3, #4
 8005fda:	3004      	addeq	r0, #4
 8005fdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005fe0:	bf04      	itt	eq
 8005fe2:	009b      	lsleq	r3, r3, #2
 8005fe4:	3002      	addeq	r0, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db05      	blt.n	8005ff6 <__hi0bits+0x3a>
 8005fea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005fee:	f100 0001 	add.w	r0, r0, #1
 8005ff2:	bf08      	it	eq
 8005ff4:	2020      	moveq	r0, #32
 8005ff6:	4770      	bx	lr
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7e5      	b.n	8005fc8 <__hi0bits+0xc>

08005ffc <__lo0bits>:
 8005ffc:	6803      	ldr	r3, [r0, #0]
 8005ffe:	4602      	mov	r2, r0
 8006000:	f013 0007 	ands.w	r0, r3, #7
 8006004:	d00b      	beq.n	800601e <__lo0bits+0x22>
 8006006:	07d9      	lsls	r1, r3, #31
 8006008:	d421      	bmi.n	800604e <__lo0bits+0x52>
 800600a:	0798      	lsls	r0, r3, #30
 800600c:	bf49      	itett	mi
 800600e:	085b      	lsrmi	r3, r3, #1
 8006010:	089b      	lsrpl	r3, r3, #2
 8006012:	2001      	movmi	r0, #1
 8006014:	6013      	strmi	r3, [r2, #0]
 8006016:	bf5c      	itt	pl
 8006018:	2002      	movpl	r0, #2
 800601a:	6013      	strpl	r3, [r2, #0]
 800601c:	4770      	bx	lr
 800601e:	b299      	uxth	r1, r3
 8006020:	b909      	cbnz	r1, 8006026 <__lo0bits+0x2a>
 8006022:	2010      	movs	r0, #16
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	b2d9      	uxtb	r1, r3
 8006028:	b909      	cbnz	r1, 800602e <__lo0bits+0x32>
 800602a:	3008      	adds	r0, #8
 800602c:	0a1b      	lsrs	r3, r3, #8
 800602e:	0719      	lsls	r1, r3, #28
 8006030:	bf04      	itt	eq
 8006032:	091b      	lsreq	r3, r3, #4
 8006034:	3004      	addeq	r0, #4
 8006036:	0799      	lsls	r1, r3, #30
 8006038:	bf04      	itt	eq
 800603a:	089b      	lsreq	r3, r3, #2
 800603c:	3002      	addeq	r0, #2
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	d403      	bmi.n	800604a <__lo0bits+0x4e>
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	f100 0001 	add.w	r0, r0, #1
 8006048:	d003      	beq.n	8006052 <__lo0bits+0x56>
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4770      	bx	lr
 800604e:	2000      	movs	r0, #0
 8006050:	4770      	bx	lr
 8006052:	2020      	movs	r0, #32
 8006054:	4770      	bx	lr
	...

08006058 <__i2b>:
 8006058:	b510      	push	{r4, lr}
 800605a:	460c      	mov	r4, r1
 800605c:	2101      	movs	r1, #1
 800605e:	f7ff ff05 	bl	8005e6c <_Balloc>
 8006062:	4602      	mov	r2, r0
 8006064:	b928      	cbnz	r0, 8006072 <__i2b+0x1a>
 8006066:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <__i2b+0x24>)
 800606c:	4804      	ldr	r0, [pc, #16]	; (8006080 <__i2b+0x28>)
 800606e:	f000 fbef 	bl	8006850 <__assert_func>
 8006072:	2301      	movs	r3, #1
 8006074:	6144      	str	r4, [r0, #20]
 8006076:	6103      	str	r3, [r0, #16]
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	08007c97 	.word	0x08007c97
 8006080:	08007ca8 	.word	0x08007ca8

08006084 <__multiply>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	4691      	mov	r9, r2
 800608a:	690a      	ldr	r2, [r1, #16]
 800608c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006090:	460c      	mov	r4, r1
 8006092:	429a      	cmp	r2, r3
 8006094:	bfbe      	ittt	lt
 8006096:	460b      	movlt	r3, r1
 8006098:	464c      	movlt	r4, r9
 800609a:	4699      	movlt	r9, r3
 800609c:	6927      	ldr	r7, [r4, #16]
 800609e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	6861      	ldr	r1, [r4, #4]
 80060a6:	eb07 060a 	add.w	r6, r7, sl
 80060aa:	42b3      	cmp	r3, r6
 80060ac:	b085      	sub	sp, #20
 80060ae:	bfb8      	it	lt
 80060b0:	3101      	addlt	r1, #1
 80060b2:	f7ff fedb 	bl	8005e6c <_Balloc>
 80060b6:	b930      	cbnz	r0, 80060c6 <__multiply+0x42>
 80060b8:	4602      	mov	r2, r0
 80060ba:	f240 115d 	movw	r1, #349	; 0x15d
 80060be:	4b43      	ldr	r3, [pc, #268]	; (80061cc <__multiply+0x148>)
 80060c0:	4843      	ldr	r0, [pc, #268]	; (80061d0 <__multiply+0x14c>)
 80060c2:	f000 fbc5 	bl	8006850 <__assert_func>
 80060c6:	f100 0514 	add.w	r5, r0, #20
 80060ca:	462b      	mov	r3, r5
 80060cc:	2200      	movs	r2, #0
 80060ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060d2:	4543      	cmp	r3, r8
 80060d4:	d321      	bcc.n	800611a <__multiply+0x96>
 80060d6:	f104 0314 	add.w	r3, r4, #20
 80060da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060de:	f109 0314 	add.w	r3, r9, #20
 80060e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060e6:	9202      	str	r2, [sp, #8]
 80060e8:	1b3a      	subs	r2, r7, r4
 80060ea:	3a15      	subs	r2, #21
 80060ec:	f022 0203 	bic.w	r2, r2, #3
 80060f0:	3204      	adds	r2, #4
 80060f2:	f104 0115 	add.w	r1, r4, #21
 80060f6:	428f      	cmp	r7, r1
 80060f8:	bf38      	it	cc
 80060fa:	2204      	movcc	r2, #4
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9a02      	ldr	r2, [sp, #8]
 8006100:	9303      	str	r3, [sp, #12]
 8006102:	429a      	cmp	r2, r3
 8006104:	d80c      	bhi.n	8006120 <__multiply+0x9c>
 8006106:	2e00      	cmp	r6, #0
 8006108:	dd03      	ble.n	8006112 <__multiply+0x8e>
 800610a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800610e:	2b00      	cmp	r3, #0
 8006110:	d059      	beq.n	80061c6 <__multiply+0x142>
 8006112:	6106      	str	r6, [r0, #16]
 8006114:	b005      	add	sp, #20
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	f843 2b04 	str.w	r2, [r3], #4
 800611e:	e7d8      	b.n	80060d2 <__multiply+0x4e>
 8006120:	f8b3 a000 	ldrh.w	sl, [r3]
 8006124:	f1ba 0f00 	cmp.w	sl, #0
 8006128:	d023      	beq.n	8006172 <__multiply+0xee>
 800612a:	46a9      	mov	r9, r5
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	f104 0e14 	add.w	lr, r4, #20
 8006134:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006138:	f8d9 1000 	ldr.w	r1, [r9]
 800613c:	fa1f fb82 	uxth.w	fp, r2
 8006140:	b289      	uxth	r1, r1
 8006142:	fb0a 110b 	mla	r1, sl, fp, r1
 8006146:	4461      	add	r1, ip
 8006148:	f8d9 c000 	ldr.w	ip, [r9]
 800614c:	0c12      	lsrs	r2, r2, #16
 800614e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006152:	fb0a c202 	mla	r2, sl, r2, ip
 8006156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800615a:	b289      	uxth	r1, r1
 800615c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006160:	4577      	cmp	r7, lr
 8006162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006166:	f849 1b04 	str.w	r1, [r9], #4
 800616a:	d8e3      	bhi.n	8006134 <__multiply+0xb0>
 800616c:	9a01      	ldr	r2, [sp, #4]
 800616e:	f845 c002 	str.w	ip, [r5, r2]
 8006172:	9a03      	ldr	r2, [sp, #12]
 8006174:	3304      	adds	r3, #4
 8006176:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800617a:	f1b9 0f00 	cmp.w	r9, #0
 800617e:	d020      	beq.n	80061c2 <__multiply+0x13e>
 8006180:	46ae      	mov	lr, r5
 8006182:	f04f 0a00 	mov.w	sl, #0
 8006186:	6829      	ldr	r1, [r5, #0]
 8006188:	f104 0c14 	add.w	ip, r4, #20
 800618c:	f8bc b000 	ldrh.w	fp, [ip]
 8006190:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006194:	b289      	uxth	r1, r1
 8006196:	fb09 220b 	mla	r2, r9, fp, r2
 800619a:	4492      	add	sl, r2
 800619c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061a0:	f84e 1b04 	str.w	r1, [lr], #4
 80061a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061a8:	f8be 1000 	ldrh.w	r1, [lr]
 80061ac:	0c12      	lsrs	r2, r2, #16
 80061ae:	fb09 1102 	mla	r1, r9, r2, r1
 80061b2:	4567      	cmp	r7, ip
 80061b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061bc:	d8e6      	bhi.n	800618c <__multiply+0x108>
 80061be:	9a01      	ldr	r2, [sp, #4]
 80061c0:	50a9      	str	r1, [r5, r2]
 80061c2:	3504      	adds	r5, #4
 80061c4:	e79b      	b.n	80060fe <__multiply+0x7a>
 80061c6:	3e01      	subs	r6, #1
 80061c8:	e79d      	b.n	8006106 <__multiply+0x82>
 80061ca:	bf00      	nop
 80061cc:	08007c97 	.word	0x08007c97
 80061d0:	08007ca8 	.word	0x08007ca8

080061d4 <__pow5mult>:
 80061d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d8:	4615      	mov	r5, r2
 80061da:	f012 0203 	ands.w	r2, r2, #3
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	d007      	beq.n	80061f4 <__pow5mult+0x20>
 80061e4:	4c25      	ldr	r4, [pc, #148]	; (800627c <__pow5mult+0xa8>)
 80061e6:	3a01      	subs	r2, #1
 80061e8:	2300      	movs	r3, #0
 80061ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ee:	f7ff fe9f 	bl	8005f30 <__multadd>
 80061f2:	4607      	mov	r7, r0
 80061f4:	10ad      	asrs	r5, r5, #2
 80061f6:	d03d      	beq.n	8006274 <__pow5mult+0xa0>
 80061f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061fa:	b97c      	cbnz	r4, 800621c <__pow5mult+0x48>
 80061fc:	2010      	movs	r0, #16
 80061fe:	f7fe fa11 	bl	8004624 <malloc>
 8006202:	4602      	mov	r2, r0
 8006204:	6270      	str	r0, [r6, #36]	; 0x24
 8006206:	b928      	cbnz	r0, 8006214 <__pow5mult+0x40>
 8006208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800620c:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <__pow5mult+0xac>)
 800620e:	481d      	ldr	r0, [pc, #116]	; (8006284 <__pow5mult+0xb0>)
 8006210:	f000 fb1e 	bl	8006850 <__assert_func>
 8006214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006218:	6004      	str	r4, [r0, #0]
 800621a:	60c4      	str	r4, [r0, #12]
 800621c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006224:	b94c      	cbnz	r4, 800623a <__pow5mult+0x66>
 8006226:	f240 2171 	movw	r1, #625	; 0x271
 800622a:	4630      	mov	r0, r6
 800622c:	f7ff ff14 	bl	8006058 <__i2b>
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	f8c8 0008 	str.w	r0, [r8, #8]
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	f04f 0900 	mov.w	r9, #0
 800623e:	07eb      	lsls	r3, r5, #31
 8006240:	d50a      	bpl.n	8006258 <__pow5mult+0x84>
 8006242:	4639      	mov	r1, r7
 8006244:	4622      	mov	r2, r4
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff1c 	bl	8006084 <__multiply>
 800624c:	4680      	mov	r8, r0
 800624e:	4639      	mov	r1, r7
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fe4b 	bl	8005eec <_Bfree>
 8006256:	4647      	mov	r7, r8
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	d00b      	beq.n	8006274 <__pow5mult+0xa0>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	b938      	cbnz	r0, 8006270 <__pow5mult+0x9c>
 8006260:	4622      	mov	r2, r4
 8006262:	4621      	mov	r1, r4
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff ff0d 	bl	8006084 <__multiply>
 800626a:	6020      	str	r0, [r4, #0]
 800626c:	f8c0 9000 	str.w	r9, [r0]
 8006270:	4604      	mov	r4, r0
 8006272:	e7e4      	b.n	800623e <__pow5mult+0x6a>
 8006274:	4638      	mov	r0, r7
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627a:	bf00      	nop
 800627c:	08007df8 	.word	0x08007df8
 8006280:	08007c25 	.word	0x08007c25
 8006284:	08007ca8 	.word	0x08007ca8

08006288 <__lshift>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	460c      	mov	r4, r1
 800628e:	4607      	mov	r7, r0
 8006290:	4691      	mov	r9, r2
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	6849      	ldr	r1, [r1, #4]
 8006296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800629a:	68a3      	ldr	r3, [r4, #8]
 800629c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062a0:	f108 0601 	add.w	r6, r8, #1
 80062a4:	42b3      	cmp	r3, r6
 80062a6:	db0b      	blt.n	80062c0 <__lshift+0x38>
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff fddf 	bl	8005e6c <_Balloc>
 80062ae:	4605      	mov	r5, r0
 80062b0:	b948      	cbnz	r0, 80062c6 <__lshift+0x3e>
 80062b2:	4602      	mov	r2, r0
 80062b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062b8:	4b29      	ldr	r3, [pc, #164]	; (8006360 <__lshift+0xd8>)
 80062ba:	482a      	ldr	r0, [pc, #168]	; (8006364 <__lshift+0xdc>)
 80062bc:	f000 fac8 	bl	8006850 <__assert_func>
 80062c0:	3101      	adds	r1, #1
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	e7ee      	b.n	80062a4 <__lshift+0x1c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	f100 0114 	add.w	r1, r0, #20
 80062cc:	f100 0210 	add.w	r2, r0, #16
 80062d0:	4618      	mov	r0, r3
 80062d2:	4553      	cmp	r3, sl
 80062d4:	db37      	blt.n	8006346 <__lshift+0xbe>
 80062d6:	6920      	ldr	r0, [r4, #16]
 80062d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062dc:	f104 0314 	add.w	r3, r4, #20
 80062e0:	f019 091f 	ands.w	r9, r9, #31
 80062e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062ec:	d02f      	beq.n	800634e <__lshift+0xc6>
 80062ee:	468a      	mov	sl, r1
 80062f0:	f04f 0c00 	mov.w	ip, #0
 80062f4:	f1c9 0e20 	rsb	lr, r9, #32
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	fa02 f209 	lsl.w	r2, r2, r9
 80062fe:	ea42 020c 	orr.w	r2, r2, ip
 8006302:	f84a 2b04 	str.w	r2, [sl], #4
 8006306:	f853 2b04 	ldr.w	r2, [r3], #4
 800630a:	4298      	cmp	r0, r3
 800630c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006310:	d8f2      	bhi.n	80062f8 <__lshift+0x70>
 8006312:	1b03      	subs	r3, r0, r4
 8006314:	3b15      	subs	r3, #21
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	3304      	adds	r3, #4
 800631c:	f104 0215 	add.w	r2, r4, #21
 8006320:	4290      	cmp	r0, r2
 8006322:	bf38      	it	cc
 8006324:	2304      	movcc	r3, #4
 8006326:	f841 c003 	str.w	ip, [r1, r3]
 800632a:	f1bc 0f00 	cmp.w	ip, #0
 800632e:	d001      	beq.n	8006334 <__lshift+0xac>
 8006330:	f108 0602 	add.w	r6, r8, #2
 8006334:	3e01      	subs	r6, #1
 8006336:	4638      	mov	r0, r7
 8006338:	4621      	mov	r1, r4
 800633a:	612e      	str	r6, [r5, #16]
 800633c:	f7ff fdd6 	bl	8005eec <_Bfree>
 8006340:	4628      	mov	r0, r5
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	f842 0f04 	str.w	r0, [r2, #4]!
 800634a:	3301      	adds	r3, #1
 800634c:	e7c1      	b.n	80062d2 <__lshift+0x4a>
 800634e:	3904      	subs	r1, #4
 8006350:	f853 2b04 	ldr.w	r2, [r3], #4
 8006354:	4298      	cmp	r0, r3
 8006356:	f841 2f04 	str.w	r2, [r1, #4]!
 800635a:	d8f9      	bhi.n	8006350 <__lshift+0xc8>
 800635c:	e7ea      	b.n	8006334 <__lshift+0xac>
 800635e:	bf00      	nop
 8006360:	08007c97 	.word	0x08007c97
 8006364:	08007ca8 	.word	0x08007ca8

08006368 <__mcmp>:
 8006368:	4603      	mov	r3, r0
 800636a:	690a      	ldr	r2, [r1, #16]
 800636c:	6900      	ldr	r0, [r0, #16]
 800636e:	b530      	push	{r4, r5, lr}
 8006370:	1a80      	subs	r0, r0, r2
 8006372:	d10d      	bne.n	8006390 <__mcmp+0x28>
 8006374:	3314      	adds	r3, #20
 8006376:	3114      	adds	r1, #20
 8006378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800637c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006388:	4295      	cmp	r5, r2
 800638a:	d002      	beq.n	8006392 <__mcmp+0x2a>
 800638c:	d304      	bcc.n	8006398 <__mcmp+0x30>
 800638e:	2001      	movs	r0, #1
 8006390:	bd30      	pop	{r4, r5, pc}
 8006392:	42a3      	cmp	r3, r4
 8006394:	d3f4      	bcc.n	8006380 <__mcmp+0x18>
 8006396:	e7fb      	b.n	8006390 <__mcmp+0x28>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e7f8      	b.n	8006390 <__mcmp+0x28>
	...

080063a0 <__mdiff>:
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	460d      	mov	r5, r1
 80063a6:	4607      	mov	r7, r0
 80063a8:	4611      	mov	r1, r2
 80063aa:	4628      	mov	r0, r5
 80063ac:	4614      	mov	r4, r2
 80063ae:	f7ff ffdb 	bl	8006368 <__mcmp>
 80063b2:	1e06      	subs	r6, r0, #0
 80063b4:	d111      	bne.n	80063da <__mdiff+0x3a>
 80063b6:	4631      	mov	r1, r6
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7ff fd57 	bl	8005e6c <_Balloc>
 80063be:	4602      	mov	r2, r0
 80063c0:	b928      	cbnz	r0, 80063ce <__mdiff+0x2e>
 80063c2:	f240 2132 	movw	r1, #562	; 0x232
 80063c6:	4b3a      	ldr	r3, [pc, #232]	; (80064b0 <__mdiff+0x110>)
 80063c8:	483a      	ldr	r0, [pc, #232]	; (80064b4 <__mdiff+0x114>)
 80063ca:	f000 fa41 	bl	8006850 <__assert_func>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063d4:	4610      	mov	r0, r2
 80063d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	bfa4      	itt	ge
 80063dc:	4623      	movge	r3, r4
 80063de:	462c      	movge	r4, r5
 80063e0:	4638      	mov	r0, r7
 80063e2:	6861      	ldr	r1, [r4, #4]
 80063e4:	bfa6      	itte	ge
 80063e6:	461d      	movge	r5, r3
 80063e8:	2600      	movge	r6, #0
 80063ea:	2601      	movlt	r6, #1
 80063ec:	f7ff fd3e 	bl	8005e6c <_Balloc>
 80063f0:	4602      	mov	r2, r0
 80063f2:	b918      	cbnz	r0, 80063fc <__mdiff+0x5c>
 80063f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80063f8:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <__mdiff+0x110>)
 80063fa:	e7e5      	b.n	80063c8 <__mdiff+0x28>
 80063fc:	f102 0814 	add.w	r8, r2, #20
 8006400:	46c2      	mov	sl, r8
 8006402:	f04f 0c00 	mov.w	ip, #0
 8006406:	6927      	ldr	r7, [r4, #16]
 8006408:	60c6      	str	r6, [r0, #12]
 800640a:	692e      	ldr	r6, [r5, #16]
 800640c:	f104 0014 	add.w	r0, r4, #20
 8006410:	f105 0914 	add.w	r9, r5, #20
 8006414:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006418:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800641c:	3410      	adds	r4, #16
 800641e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006422:	f859 3b04 	ldr.w	r3, [r9], #4
 8006426:	fa1f f18b 	uxth.w	r1, fp
 800642a:	448c      	add	ip, r1
 800642c:	b299      	uxth	r1, r3
 800642e:	0c1b      	lsrs	r3, r3, #16
 8006430:	ebac 0101 	sub.w	r1, ip, r1
 8006434:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006438:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800643c:	b289      	uxth	r1, r1
 800643e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006442:	454e      	cmp	r6, r9
 8006444:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006448:	f84a 3b04 	str.w	r3, [sl], #4
 800644c:	d8e7      	bhi.n	800641e <__mdiff+0x7e>
 800644e:	1b73      	subs	r3, r6, r5
 8006450:	3b15      	subs	r3, #21
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	3515      	adds	r5, #21
 8006458:	3304      	adds	r3, #4
 800645a:	42ae      	cmp	r6, r5
 800645c:	bf38      	it	cc
 800645e:	2304      	movcc	r3, #4
 8006460:	4418      	add	r0, r3
 8006462:	4443      	add	r3, r8
 8006464:	461e      	mov	r6, r3
 8006466:	4605      	mov	r5, r0
 8006468:	4575      	cmp	r5, lr
 800646a:	d30e      	bcc.n	800648a <__mdiff+0xea>
 800646c:	f10e 0103 	add.w	r1, lr, #3
 8006470:	1a09      	subs	r1, r1, r0
 8006472:	f021 0103 	bic.w	r1, r1, #3
 8006476:	3803      	subs	r0, #3
 8006478:	4586      	cmp	lr, r0
 800647a:	bf38      	it	cc
 800647c:	2100      	movcc	r1, #0
 800647e:	4419      	add	r1, r3
 8006480:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006484:	b18b      	cbz	r3, 80064aa <__mdiff+0x10a>
 8006486:	6117      	str	r7, [r2, #16]
 8006488:	e7a4      	b.n	80063d4 <__mdiff+0x34>
 800648a:	f855 8b04 	ldr.w	r8, [r5], #4
 800648e:	fa1f f188 	uxth.w	r1, r8
 8006492:	4461      	add	r1, ip
 8006494:	140c      	asrs	r4, r1, #16
 8006496:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800649a:	b289      	uxth	r1, r1
 800649c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80064a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80064a4:	f846 1b04 	str.w	r1, [r6], #4
 80064a8:	e7de      	b.n	8006468 <__mdiff+0xc8>
 80064aa:	3f01      	subs	r7, #1
 80064ac:	e7e8      	b.n	8006480 <__mdiff+0xe0>
 80064ae:	bf00      	nop
 80064b0:	08007c97 	.word	0x08007c97
 80064b4:	08007ca8 	.word	0x08007ca8

080064b8 <__d2b>:
 80064b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064bc:	2101      	movs	r1, #1
 80064be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80064c2:	4690      	mov	r8, r2
 80064c4:	461d      	mov	r5, r3
 80064c6:	f7ff fcd1 	bl	8005e6c <_Balloc>
 80064ca:	4604      	mov	r4, r0
 80064cc:	b930      	cbnz	r0, 80064dc <__d2b+0x24>
 80064ce:	4602      	mov	r2, r0
 80064d0:	f240 310a 	movw	r1, #778	; 0x30a
 80064d4:	4b24      	ldr	r3, [pc, #144]	; (8006568 <__d2b+0xb0>)
 80064d6:	4825      	ldr	r0, [pc, #148]	; (800656c <__d2b+0xb4>)
 80064d8:	f000 f9ba 	bl	8006850 <__assert_func>
 80064dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80064e4:	bb2d      	cbnz	r5, 8006532 <__d2b+0x7a>
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f1b8 0300 	subs.w	r3, r8, #0
 80064ec:	d026      	beq.n	800653c <__d2b+0x84>
 80064ee:	4668      	mov	r0, sp
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	f7ff fd83 	bl	8005ffc <__lo0bits>
 80064f6:	9900      	ldr	r1, [sp, #0]
 80064f8:	b1f0      	cbz	r0, 8006538 <__d2b+0x80>
 80064fa:	9a01      	ldr	r2, [sp, #4]
 80064fc:	f1c0 0320 	rsb	r3, r0, #32
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	430b      	orrs	r3, r1
 8006506:	40c2      	lsrs	r2, r0
 8006508:	6163      	str	r3, [r4, #20]
 800650a:	9201      	str	r2, [sp, #4]
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2102      	movne	r1, #2
 8006514:	2101      	moveq	r1, #1
 8006516:	61a3      	str	r3, [r4, #24]
 8006518:	6121      	str	r1, [r4, #16]
 800651a:	b1c5      	cbz	r5, 800654e <__d2b+0x96>
 800651c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006520:	4405      	add	r5, r0
 8006522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006526:	603d      	str	r5, [r7, #0]
 8006528:	6030      	str	r0, [r6, #0]
 800652a:	4620      	mov	r0, r4
 800652c:	b002      	add	sp, #8
 800652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006536:	e7d6      	b.n	80064e6 <__d2b+0x2e>
 8006538:	6161      	str	r1, [r4, #20]
 800653a:	e7e7      	b.n	800650c <__d2b+0x54>
 800653c:	a801      	add	r0, sp, #4
 800653e:	f7ff fd5d 	bl	8005ffc <__lo0bits>
 8006542:	2101      	movs	r1, #1
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	6121      	str	r1, [r4, #16]
 8006548:	6163      	str	r3, [r4, #20]
 800654a:	3020      	adds	r0, #32
 800654c:	e7e5      	b.n	800651a <__d2b+0x62>
 800654e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006552:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006556:	6038      	str	r0, [r7, #0]
 8006558:	6918      	ldr	r0, [r3, #16]
 800655a:	f7ff fd2f 	bl	8005fbc <__hi0bits>
 800655e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006562:	6031      	str	r1, [r6, #0]
 8006564:	e7e1      	b.n	800652a <__d2b+0x72>
 8006566:	bf00      	nop
 8006568:	08007c97 	.word	0x08007c97
 800656c:	08007ca8 	.word	0x08007ca8

08006570 <_calloc_r>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	fba1 5402 	umull	r5, r4, r1, r2
 8006576:	b934      	cbnz	r4, 8006586 <_calloc_r+0x16>
 8006578:	4629      	mov	r1, r5
 800657a:	f7fe f8cb 	bl	8004714 <_malloc_r>
 800657e:	4606      	mov	r6, r0
 8006580:	b928      	cbnz	r0, 800658e <_calloc_r+0x1e>
 8006582:	4630      	mov	r0, r6
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	220c      	movs	r2, #12
 8006588:	2600      	movs	r6, #0
 800658a:	6002      	str	r2, [r0, #0]
 800658c:	e7f9      	b.n	8006582 <_calloc_r+0x12>
 800658e:	462a      	mov	r2, r5
 8006590:	4621      	mov	r1, r4
 8006592:	f7fe f84f 	bl	8004634 <memset>
 8006596:	e7f4      	b.n	8006582 <_calloc_r+0x12>

08006598 <__ssputs_r>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	688e      	ldr	r6, [r1, #8]
 800659e:	4682      	mov	sl, r0
 80065a0:	429e      	cmp	r6, r3
 80065a2:	460c      	mov	r4, r1
 80065a4:	4690      	mov	r8, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	d838      	bhi.n	800661c <__ssputs_r+0x84>
 80065aa:	898a      	ldrh	r2, [r1, #12]
 80065ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065b0:	d032      	beq.n	8006618 <__ssputs_r+0x80>
 80065b2:	6825      	ldr	r5, [r4, #0]
 80065b4:	6909      	ldr	r1, [r1, #16]
 80065b6:	3301      	adds	r3, #1
 80065b8:	eba5 0901 	sub.w	r9, r5, r1
 80065bc:	6965      	ldr	r5, [r4, #20]
 80065be:	444b      	add	r3, r9
 80065c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065c8:	106d      	asrs	r5, r5, #1
 80065ca:	429d      	cmp	r5, r3
 80065cc:	bf38      	it	cc
 80065ce:	461d      	movcc	r5, r3
 80065d0:	0553      	lsls	r3, r2, #21
 80065d2:	d531      	bpl.n	8006638 <__ssputs_r+0xa0>
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7fe f89d 	bl	8004714 <_malloc_r>
 80065da:	4606      	mov	r6, r0
 80065dc:	b950      	cbnz	r0, 80065f4 <__ssputs_r+0x5c>
 80065de:	230c      	movs	r3, #12
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	f8ca 3000 	str.w	r3, [sl]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	464a      	mov	r2, r9
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	f7ff fc1e 	bl	8005e38 <memcpy>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	6126      	str	r6, [r4, #16]
 800660a:	444e      	add	r6, r9
 800660c:	6026      	str	r6, [r4, #0]
 800660e:	463e      	mov	r6, r7
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	eba5 0509 	sub.w	r5, r5, r9
 8006616:	60a5      	str	r5, [r4, #8]
 8006618:	42be      	cmp	r6, r7
 800661a:	d900      	bls.n	800661e <__ssputs_r+0x86>
 800661c:	463e      	mov	r6, r7
 800661e:	4632      	mov	r2, r6
 8006620:	4641      	mov	r1, r8
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	f000 f959 	bl	80068da <memmove>
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	2000      	movs	r0, #0
 800662c:	1b9b      	subs	r3, r3, r6
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	4433      	add	r3, r6
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	e7db      	b.n	80065f0 <__ssputs_r+0x58>
 8006638:	462a      	mov	r2, r5
 800663a:	f000 f968 	bl	800690e <_realloc_r>
 800663e:	4606      	mov	r6, r0
 8006640:	2800      	cmp	r0, #0
 8006642:	d1e1      	bne.n	8006608 <__ssputs_r+0x70>
 8006644:	4650      	mov	r0, sl
 8006646:	6921      	ldr	r1, [r4, #16]
 8006648:	f7fd fffc 	bl	8004644 <_free_r>
 800664c:	e7c7      	b.n	80065de <__ssputs_r+0x46>
	...

08006650 <_svfiprintf_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	4698      	mov	r8, r3
 8006656:	898b      	ldrh	r3, [r1, #12]
 8006658:	4607      	mov	r7, r0
 800665a:	061b      	lsls	r3, r3, #24
 800665c:	460d      	mov	r5, r1
 800665e:	4614      	mov	r4, r2
 8006660:	b09d      	sub	sp, #116	; 0x74
 8006662:	d50e      	bpl.n	8006682 <_svfiprintf_r+0x32>
 8006664:	690b      	ldr	r3, [r1, #16]
 8006666:	b963      	cbnz	r3, 8006682 <_svfiprintf_r+0x32>
 8006668:	2140      	movs	r1, #64	; 0x40
 800666a:	f7fe f853 	bl	8004714 <_malloc_r>
 800666e:	6028      	str	r0, [r5, #0]
 8006670:	6128      	str	r0, [r5, #16]
 8006672:	b920      	cbnz	r0, 800667e <_svfiprintf_r+0x2e>
 8006674:	230c      	movs	r3, #12
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e0d1      	b.n	8006822 <_svfiprintf_r+0x1d2>
 800667e:	2340      	movs	r3, #64	; 0x40
 8006680:	616b      	str	r3, [r5, #20]
 8006682:	2300      	movs	r3, #0
 8006684:	9309      	str	r3, [sp, #36]	; 0x24
 8006686:	2320      	movs	r3, #32
 8006688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800668c:	2330      	movs	r3, #48	; 0x30
 800668e:	f04f 0901 	mov.w	r9, #1
 8006692:	f8cd 800c 	str.w	r8, [sp, #12]
 8006696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800683c <_svfiprintf_r+0x1ec>
 800669a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800669e:	4623      	mov	r3, r4
 80066a0:	469a      	mov	sl, r3
 80066a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a6:	b10a      	cbz	r2, 80066ac <_svfiprintf_r+0x5c>
 80066a8:	2a25      	cmp	r2, #37	; 0x25
 80066aa:	d1f9      	bne.n	80066a0 <_svfiprintf_r+0x50>
 80066ac:	ebba 0b04 	subs.w	fp, sl, r4
 80066b0:	d00b      	beq.n	80066ca <_svfiprintf_r+0x7a>
 80066b2:	465b      	mov	r3, fp
 80066b4:	4622      	mov	r2, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff ff6d 	bl	8006598 <__ssputs_r>
 80066be:	3001      	adds	r0, #1
 80066c0:	f000 80aa 	beq.w	8006818 <_svfiprintf_r+0x1c8>
 80066c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c6:	445a      	add	r2, fp
 80066c8:	9209      	str	r2, [sp, #36]	; 0x24
 80066ca:	f89a 3000 	ldrb.w	r3, [sl]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80a2 	beq.w	8006818 <_svfiprintf_r+0x1c8>
 80066d4:	2300      	movs	r3, #0
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066de:	f10a 0a01 	add.w	sl, sl, #1
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ea:	931a      	str	r3, [sp, #104]	; 0x68
 80066ec:	4654      	mov	r4, sl
 80066ee:	2205      	movs	r2, #5
 80066f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f4:	4851      	ldr	r0, [pc, #324]	; (800683c <_svfiprintf_r+0x1ec>)
 80066f6:	f7ff fb91 	bl	8005e1c <memchr>
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	b9d8      	cbnz	r0, 8006736 <_svfiprintf_r+0xe6>
 80066fe:	06d0      	lsls	r0, r2, #27
 8006700:	bf44      	itt	mi
 8006702:	2320      	movmi	r3, #32
 8006704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006708:	0711      	lsls	r1, r2, #28
 800670a:	bf44      	itt	mi
 800670c:	232b      	movmi	r3, #43	; 0x2b
 800670e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006712:	f89a 3000 	ldrb.w	r3, [sl]
 8006716:	2b2a      	cmp	r3, #42	; 0x2a
 8006718:	d015      	beq.n	8006746 <_svfiprintf_r+0xf6>
 800671a:	4654      	mov	r4, sl
 800671c:	2000      	movs	r0, #0
 800671e:	f04f 0c0a 	mov.w	ip, #10
 8006722:	9a07      	ldr	r2, [sp, #28]
 8006724:	4621      	mov	r1, r4
 8006726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800672a:	3b30      	subs	r3, #48	; 0x30
 800672c:	2b09      	cmp	r3, #9
 800672e:	d94e      	bls.n	80067ce <_svfiprintf_r+0x17e>
 8006730:	b1b0      	cbz	r0, 8006760 <_svfiprintf_r+0x110>
 8006732:	9207      	str	r2, [sp, #28]
 8006734:	e014      	b.n	8006760 <_svfiprintf_r+0x110>
 8006736:	eba0 0308 	sub.w	r3, r0, r8
 800673a:	fa09 f303 	lsl.w	r3, r9, r3
 800673e:	4313      	orrs	r3, r2
 8006740:	46a2      	mov	sl, r4
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	e7d2      	b.n	80066ec <_svfiprintf_r+0x9c>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	1d19      	adds	r1, r3, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	9103      	str	r1, [sp, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfbb      	ittet	lt
 8006752:	425b      	neglt	r3, r3
 8006754:	f042 0202 	orrlt.w	r2, r2, #2
 8006758:	9307      	strge	r3, [sp, #28]
 800675a:	9307      	strlt	r3, [sp, #28]
 800675c:	bfb8      	it	lt
 800675e:	9204      	strlt	r2, [sp, #16]
 8006760:	7823      	ldrb	r3, [r4, #0]
 8006762:	2b2e      	cmp	r3, #46	; 0x2e
 8006764:	d10c      	bne.n	8006780 <_svfiprintf_r+0x130>
 8006766:	7863      	ldrb	r3, [r4, #1]
 8006768:	2b2a      	cmp	r3, #42	; 0x2a
 800676a:	d135      	bne.n	80067d8 <_svfiprintf_r+0x188>
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	3402      	adds	r4, #2
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	9203      	str	r2, [sp, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	bfb8      	it	lt
 800677a:	f04f 33ff 	movlt.w	r3, #4294967295
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006840 <_svfiprintf_r+0x1f0>
 8006784:	2203      	movs	r2, #3
 8006786:	4650      	mov	r0, sl
 8006788:	7821      	ldrb	r1, [r4, #0]
 800678a:	f7ff fb47 	bl	8005e1c <memchr>
 800678e:	b140      	cbz	r0, 80067a2 <_svfiprintf_r+0x152>
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	eba0 000a 	sub.w	r0, r0, sl
 8006796:	fa03 f000 	lsl.w	r0, r3, r0
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	3401      	adds	r4, #1
 800679e:	4303      	orrs	r3, r0
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a6:	2206      	movs	r2, #6
 80067a8:	4826      	ldr	r0, [pc, #152]	; (8006844 <_svfiprintf_r+0x1f4>)
 80067aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ae:	f7ff fb35 	bl	8005e1c <memchr>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d038      	beq.n	8006828 <_svfiprintf_r+0x1d8>
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <_svfiprintf_r+0x1f8>)
 80067b8:	bb1b      	cbnz	r3, 8006802 <_svfiprintf_r+0x1b2>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3307      	adds	r3, #7
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	3308      	adds	r3, #8
 80067c4:	9303      	str	r3, [sp, #12]
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	4433      	add	r3, r6
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	e767      	b.n	800669e <_svfiprintf_r+0x4e>
 80067ce:	460c      	mov	r4, r1
 80067d0:	2001      	movs	r0, #1
 80067d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067d6:	e7a5      	b.n	8006724 <_svfiprintf_r+0xd4>
 80067d8:	2300      	movs	r3, #0
 80067da:	f04f 0c0a 	mov.w	ip, #10
 80067de:	4619      	mov	r1, r3
 80067e0:	3401      	adds	r4, #1
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	4620      	mov	r0, r4
 80067e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ea:	3a30      	subs	r2, #48	; 0x30
 80067ec:	2a09      	cmp	r2, #9
 80067ee:	d903      	bls.n	80067f8 <_svfiprintf_r+0x1a8>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0c5      	beq.n	8006780 <_svfiprintf_r+0x130>
 80067f4:	9105      	str	r1, [sp, #20]
 80067f6:	e7c3      	b.n	8006780 <_svfiprintf_r+0x130>
 80067f8:	4604      	mov	r4, r0
 80067fa:	2301      	movs	r3, #1
 80067fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006800:	e7f0      	b.n	80067e4 <_svfiprintf_r+0x194>
 8006802:	ab03      	add	r3, sp, #12
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	462a      	mov	r2, r5
 8006808:	4638      	mov	r0, r7
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <_svfiprintf_r+0x1fc>)
 800680c:	a904      	add	r1, sp, #16
 800680e:	f7fe f893 	bl	8004938 <_printf_float>
 8006812:	1c42      	adds	r2, r0, #1
 8006814:	4606      	mov	r6, r0
 8006816:	d1d6      	bne.n	80067c6 <_svfiprintf_r+0x176>
 8006818:	89ab      	ldrh	r3, [r5, #12]
 800681a:	065b      	lsls	r3, r3, #25
 800681c:	f53f af2c 	bmi.w	8006678 <_svfiprintf_r+0x28>
 8006820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006822:	b01d      	add	sp, #116	; 0x74
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	462a      	mov	r2, r5
 800682e:	4638      	mov	r0, r7
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <_svfiprintf_r+0x1fc>)
 8006832:	a904      	add	r1, sp, #16
 8006834:	f7fe fb1c 	bl	8004e70 <_printf_i>
 8006838:	e7eb      	b.n	8006812 <_svfiprintf_r+0x1c2>
 800683a:	bf00      	nop
 800683c:	08007e04 	.word	0x08007e04
 8006840:	08007e0a 	.word	0x08007e0a
 8006844:	08007e0e 	.word	0x08007e0e
 8006848:	08004939 	.word	0x08004939
 800684c:	08006599 	.word	0x08006599

08006850 <__assert_func>:
 8006850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006852:	4614      	mov	r4, r2
 8006854:	461a      	mov	r2, r3
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <__assert_func+0x2c>)
 8006858:	4605      	mov	r5, r0
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68d8      	ldr	r0, [r3, #12]
 800685e:	b14c      	cbz	r4, 8006874 <__assert_func+0x24>
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <__assert_func+0x30>)
 8006862:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006866:	9100      	str	r1, [sp, #0]
 8006868:	462b      	mov	r3, r5
 800686a:	4906      	ldr	r1, [pc, #24]	; (8006884 <__assert_func+0x34>)
 800686c:	f000 f80e 	bl	800688c <fiprintf>
 8006870:	f000 faa2 	bl	8006db8 <abort>
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <__assert_func+0x38>)
 8006876:	461c      	mov	r4, r3
 8006878:	e7f3      	b.n	8006862 <__assert_func+0x12>
 800687a:	bf00      	nop
 800687c:	20000040 	.word	0x20000040
 8006880:	08007e15 	.word	0x08007e15
 8006884:	08007e22 	.word	0x08007e22
 8006888:	08007e50 	.word	0x08007e50

0800688c <fiprintf>:
 800688c:	b40e      	push	{r1, r2, r3}
 800688e:	b503      	push	{r0, r1, lr}
 8006890:	4601      	mov	r1, r0
 8006892:	ab03      	add	r3, sp, #12
 8006894:	4805      	ldr	r0, [pc, #20]	; (80068ac <fiprintf+0x20>)
 8006896:	f853 2b04 	ldr.w	r2, [r3], #4
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	f000 f88d 	bl	80069bc <_vfiprintf_r>
 80068a2:	b002      	add	sp, #8
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	20000040 	.word	0x20000040

080068b0 <__retarget_lock_init_recursive>:
 80068b0:	4770      	bx	lr

080068b2 <__retarget_lock_acquire_recursive>:
 80068b2:	4770      	bx	lr

080068b4 <__retarget_lock_release_recursive>:
 80068b4:	4770      	bx	lr

080068b6 <__ascii_mbtowc>:
 80068b6:	b082      	sub	sp, #8
 80068b8:	b901      	cbnz	r1, 80068bc <__ascii_mbtowc+0x6>
 80068ba:	a901      	add	r1, sp, #4
 80068bc:	b142      	cbz	r2, 80068d0 <__ascii_mbtowc+0x1a>
 80068be:	b14b      	cbz	r3, 80068d4 <__ascii_mbtowc+0x1e>
 80068c0:	7813      	ldrb	r3, [r2, #0]
 80068c2:	600b      	str	r3, [r1, #0]
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	1e10      	subs	r0, r2, #0
 80068c8:	bf18      	it	ne
 80068ca:	2001      	movne	r0, #1
 80068cc:	b002      	add	sp, #8
 80068ce:	4770      	bx	lr
 80068d0:	4610      	mov	r0, r2
 80068d2:	e7fb      	b.n	80068cc <__ascii_mbtowc+0x16>
 80068d4:	f06f 0001 	mvn.w	r0, #1
 80068d8:	e7f8      	b.n	80068cc <__ascii_mbtowc+0x16>

080068da <memmove>:
 80068da:	4288      	cmp	r0, r1
 80068dc:	b510      	push	{r4, lr}
 80068de:	eb01 0402 	add.w	r4, r1, r2
 80068e2:	d902      	bls.n	80068ea <memmove+0x10>
 80068e4:	4284      	cmp	r4, r0
 80068e6:	4623      	mov	r3, r4
 80068e8:	d807      	bhi.n	80068fa <memmove+0x20>
 80068ea:	1e43      	subs	r3, r0, #1
 80068ec:	42a1      	cmp	r1, r4
 80068ee:	d008      	beq.n	8006902 <memmove+0x28>
 80068f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f8:	e7f8      	b.n	80068ec <memmove+0x12>
 80068fa:	4601      	mov	r1, r0
 80068fc:	4402      	add	r2, r0
 80068fe:	428a      	cmp	r2, r1
 8006900:	d100      	bne.n	8006904 <memmove+0x2a>
 8006902:	bd10      	pop	{r4, pc}
 8006904:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006908:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800690c:	e7f7      	b.n	80068fe <memmove+0x24>

0800690e <_realloc_r>:
 800690e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006912:	4680      	mov	r8, r0
 8006914:	4614      	mov	r4, r2
 8006916:	460e      	mov	r6, r1
 8006918:	b921      	cbnz	r1, 8006924 <_realloc_r+0x16>
 800691a:	4611      	mov	r1, r2
 800691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006920:	f7fd bef8 	b.w	8004714 <_malloc_r>
 8006924:	b92a      	cbnz	r2, 8006932 <_realloc_r+0x24>
 8006926:	f7fd fe8d 	bl	8004644 <_free_r>
 800692a:	4625      	mov	r5, r4
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006932:	f000 fc61 	bl	80071f8 <_malloc_usable_size_r>
 8006936:	4284      	cmp	r4, r0
 8006938:	4607      	mov	r7, r0
 800693a:	d802      	bhi.n	8006942 <_realloc_r+0x34>
 800693c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006940:	d812      	bhi.n	8006968 <_realloc_r+0x5a>
 8006942:	4621      	mov	r1, r4
 8006944:	4640      	mov	r0, r8
 8006946:	f7fd fee5 	bl	8004714 <_malloc_r>
 800694a:	4605      	mov	r5, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	d0ed      	beq.n	800692c <_realloc_r+0x1e>
 8006950:	42bc      	cmp	r4, r7
 8006952:	4622      	mov	r2, r4
 8006954:	4631      	mov	r1, r6
 8006956:	bf28      	it	cs
 8006958:	463a      	movcs	r2, r7
 800695a:	f7ff fa6d 	bl	8005e38 <memcpy>
 800695e:	4631      	mov	r1, r6
 8006960:	4640      	mov	r0, r8
 8006962:	f7fd fe6f 	bl	8004644 <_free_r>
 8006966:	e7e1      	b.n	800692c <_realloc_r+0x1e>
 8006968:	4635      	mov	r5, r6
 800696a:	e7df      	b.n	800692c <_realloc_r+0x1e>

0800696c <__sfputc_r>:
 800696c:	6893      	ldr	r3, [r2, #8]
 800696e:	b410      	push	{r4}
 8006970:	3b01      	subs	r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	6093      	str	r3, [r2, #8]
 8006976:	da07      	bge.n	8006988 <__sfputc_r+0x1c>
 8006978:	6994      	ldr	r4, [r2, #24]
 800697a:	42a3      	cmp	r3, r4
 800697c:	db01      	blt.n	8006982 <__sfputc_r+0x16>
 800697e:	290a      	cmp	r1, #10
 8006980:	d102      	bne.n	8006988 <__sfputc_r+0x1c>
 8006982:	bc10      	pop	{r4}
 8006984:	f000 b94a 	b.w	8006c1c <__swbuf_r>
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	1c58      	adds	r0, r3, #1
 800698c:	6010      	str	r0, [r2, #0]
 800698e:	7019      	strb	r1, [r3, #0]
 8006990:	4608      	mov	r0, r1
 8006992:	bc10      	pop	{r4}
 8006994:	4770      	bx	lr

08006996 <__sfputs_r>:
 8006996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006998:	4606      	mov	r6, r0
 800699a:	460f      	mov	r7, r1
 800699c:	4614      	mov	r4, r2
 800699e:	18d5      	adds	r5, r2, r3
 80069a0:	42ac      	cmp	r4, r5
 80069a2:	d101      	bne.n	80069a8 <__sfputs_r+0x12>
 80069a4:	2000      	movs	r0, #0
 80069a6:	e007      	b.n	80069b8 <__sfputs_r+0x22>
 80069a8:	463a      	mov	r2, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b0:	f7ff ffdc 	bl	800696c <__sfputc_r>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d1f3      	bne.n	80069a0 <__sfputs_r+0xa>
 80069b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069bc <_vfiprintf_r>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	460d      	mov	r5, r1
 80069c2:	4614      	mov	r4, r2
 80069c4:	4698      	mov	r8, r3
 80069c6:	4606      	mov	r6, r0
 80069c8:	b09d      	sub	sp, #116	; 0x74
 80069ca:	b118      	cbz	r0, 80069d4 <_vfiprintf_r+0x18>
 80069cc:	6983      	ldr	r3, [r0, #24]
 80069ce:	b90b      	cbnz	r3, 80069d4 <_vfiprintf_r+0x18>
 80069d0:	f000 fb10 	bl	8006ff4 <__sinit>
 80069d4:	4b89      	ldr	r3, [pc, #548]	; (8006bfc <_vfiprintf_r+0x240>)
 80069d6:	429d      	cmp	r5, r3
 80069d8:	d11b      	bne.n	8006a12 <_vfiprintf_r+0x56>
 80069da:	6875      	ldr	r5, [r6, #4]
 80069dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069de:	07d9      	lsls	r1, r3, #31
 80069e0:	d405      	bmi.n	80069ee <_vfiprintf_r+0x32>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	059a      	lsls	r2, r3, #22
 80069e6:	d402      	bmi.n	80069ee <_vfiprintf_r+0x32>
 80069e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ea:	f7ff ff62 	bl	80068b2 <__retarget_lock_acquire_recursive>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	071b      	lsls	r3, r3, #28
 80069f2:	d501      	bpl.n	80069f8 <_vfiprintf_r+0x3c>
 80069f4:	692b      	ldr	r3, [r5, #16]
 80069f6:	b9eb      	cbnz	r3, 8006a34 <_vfiprintf_r+0x78>
 80069f8:	4629      	mov	r1, r5
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f96e 	bl	8006cdc <__swsetup_r>
 8006a00:	b1c0      	cbz	r0, 8006a34 <_vfiprintf_r+0x78>
 8006a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a04:	07dc      	lsls	r4, r3, #31
 8006a06:	d50e      	bpl.n	8006a26 <_vfiprintf_r+0x6a>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	b01d      	add	sp, #116	; 0x74
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	4b7b      	ldr	r3, [pc, #492]	; (8006c00 <_vfiprintf_r+0x244>)
 8006a14:	429d      	cmp	r5, r3
 8006a16:	d101      	bne.n	8006a1c <_vfiprintf_r+0x60>
 8006a18:	68b5      	ldr	r5, [r6, #8]
 8006a1a:	e7df      	b.n	80069dc <_vfiprintf_r+0x20>
 8006a1c:	4b79      	ldr	r3, [pc, #484]	; (8006c04 <_vfiprintf_r+0x248>)
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	bf08      	it	eq
 8006a22:	68f5      	ldreq	r5, [r6, #12]
 8006a24:	e7da      	b.n	80069dc <_vfiprintf_r+0x20>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	0598      	lsls	r0, r3, #22
 8006a2a:	d4ed      	bmi.n	8006a08 <_vfiprintf_r+0x4c>
 8006a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2e:	f7ff ff41 	bl	80068b4 <__retarget_lock_release_recursive>
 8006a32:	e7e9      	b.n	8006a08 <_vfiprintf_r+0x4c>
 8006a34:	2300      	movs	r3, #0
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	2320      	movs	r3, #32
 8006a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a3e:	2330      	movs	r3, #48	; 0x30
 8006a40:	f04f 0901 	mov.w	r9, #1
 8006a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c08 <_vfiprintf_r+0x24c>
 8006a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a50:	4623      	mov	r3, r4
 8006a52:	469a      	mov	sl, r3
 8006a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a58:	b10a      	cbz	r2, 8006a5e <_vfiprintf_r+0xa2>
 8006a5a:	2a25      	cmp	r2, #37	; 0x25
 8006a5c:	d1f9      	bne.n	8006a52 <_vfiprintf_r+0x96>
 8006a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a62:	d00b      	beq.n	8006a7c <_vfiprintf_r+0xc0>
 8006a64:	465b      	mov	r3, fp
 8006a66:	4622      	mov	r2, r4
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ff93 	bl	8006996 <__sfputs_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	f000 80aa 	beq.w	8006bca <_vfiprintf_r+0x20e>
 8006a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a78:	445a      	add	r2, fp
 8006a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80a2 	beq.w	8006bca <_vfiprintf_r+0x20e>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a90:	f10a 0a01 	add.w	sl, sl, #1
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9e:	4654      	mov	r4, sl
 8006aa0:	2205      	movs	r2, #5
 8006aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa6:	4858      	ldr	r0, [pc, #352]	; (8006c08 <_vfiprintf_r+0x24c>)
 8006aa8:	f7ff f9b8 	bl	8005e1c <memchr>
 8006aac:	9a04      	ldr	r2, [sp, #16]
 8006aae:	b9d8      	cbnz	r0, 8006ae8 <_vfiprintf_r+0x12c>
 8006ab0:	06d1      	lsls	r1, r2, #27
 8006ab2:	bf44      	itt	mi
 8006ab4:	2320      	movmi	r3, #32
 8006ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aba:	0713      	lsls	r3, r2, #28
 8006abc:	bf44      	itt	mi
 8006abe:	232b      	movmi	r3, #43	; 0x2b
 8006ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aca:	d015      	beq.n	8006af8 <_vfiprintf_r+0x13c>
 8006acc:	4654      	mov	r4, sl
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f04f 0c0a 	mov.w	ip, #10
 8006ad4:	9a07      	ldr	r2, [sp, #28]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006adc:	3b30      	subs	r3, #48	; 0x30
 8006ade:	2b09      	cmp	r3, #9
 8006ae0:	d94e      	bls.n	8006b80 <_vfiprintf_r+0x1c4>
 8006ae2:	b1b0      	cbz	r0, 8006b12 <_vfiprintf_r+0x156>
 8006ae4:	9207      	str	r2, [sp, #28]
 8006ae6:	e014      	b.n	8006b12 <_vfiprintf_r+0x156>
 8006ae8:	eba0 0308 	sub.w	r3, r0, r8
 8006aec:	fa09 f303 	lsl.w	r3, r9, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	46a2      	mov	sl, r4
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	e7d2      	b.n	8006a9e <_vfiprintf_r+0xe2>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	1d19      	adds	r1, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	9103      	str	r1, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bfbb      	ittet	lt
 8006b04:	425b      	neglt	r3, r3
 8006b06:	f042 0202 	orrlt.w	r2, r2, #2
 8006b0a:	9307      	strge	r3, [sp, #28]
 8006b0c:	9307      	strlt	r3, [sp, #28]
 8006b0e:	bfb8      	it	lt
 8006b10:	9204      	strlt	r2, [sp, #16]
 8006b12:	7823      	ldrb	r3, [r4, #0]
 8006b14:	2b2e      	cmp	r3, #46	; 0x2e
 8006b16:	d10c      	bne.n	8006b32 <_vfiprintf_r+0x176>
 8006b18:	7863      	ldrb	r3, [r4, #1]
 8006b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1c:	d135      	bne.n	8006b8a <_vfiprintf_r+0x1ce>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	3402      	adds	r4, #2
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9203      	str	r2, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfb8      	it	lt
 8006b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b30:	9305      	str	r3, [sp, #20]
 8006b32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006c0c <_vfiprintf_r+0x250>
 8006b36:	2203      	movs	r2, #3
 8006b38:	4650      	mov	r0, sl
 8006b3a:	7821      	ldrb	r1, [r4, #0]
 8006b3c:	f7ff f96e 	bl	8005e1c <memchr>
 8006b40:	b140      	cbz	r0, 8006b54 <_vfiprintf_r+0x198>
 8006b42:	2340      	movs	r3, #64	; 0x40
 8006b44:	eba0 000a 	sub.w	r0, r0, sl
 8006b48:	fa03 f000 	lsl.w	r0, r3, r0
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	3401      	adds	r4, #1
 8006b50:	4303      	orrs	r3, r0
 8006b52:	9304      	str	r3, [sp, #16]
 8006b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b58:	2206      	movs	r2, #6
 8006b5a:	482d      	ldr	r0, [pc, #180]	; (8006c10 <_vfiprintf_r+0x254>)
 8006b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b60:	f7ff f95c 	bl	8005e1c <memchr>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d03f      	beq.n	8006be8 <_vfiprintf_r+0x22c>
 8006b68:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <_vfiprintf_r+0x258>)
 8006b6a:	bb1b      	cbnz	r3, 8006bb4 <_vfiprintf_r+0x1f8>
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	3307      	adds	r3, #7
 8006b70:	f023 0307 	bic.w	r3, r3, #7
 8006b74:	3308      	adds	r3, #8
 8006b76:	9303      	str	r3, [sp, #12]
 8006b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7a:	443b      	add	r3, r7
 8006b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7e:	e767      	b.n	8006a50 <_vfiprintf_r+0x94>
 8006b80:	460c      	mov	r4, r1
 8006b82:	2001      	movs	r0, #1
 8006b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b88:	e7a5      	b.n	8006ad6 <_vfiprintf_r+0x11a>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f04f 0c0a 	mov.w	ip, #10
 8006b90:	4619      	mov	r1, r3
 8006b92:	3401      	adds	r4, #1
 8006b94:	9305      	str	r3, [sp, #20]
 8006b96:	4620      	mov	r0, r4
 8006b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b9c:	3a30      	subs	r2, #48	; 0x30
 8006b9e:	2a09      	cmp	r2, #9
 8006ba0:	d903      	bls.n	8006baa <_vfiprintf_r+0x1ee>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0c5      	beq.n	8006b32 <_vfiprintf_r+0x176>
 8006ba6:	9105      	str	r1, [sp, #20]
 8006ba8:	e7c3      	b.n	8006b32 <_vfiprintf_r+0x176>
 8006baa:	4604      	mov	r4, r0
 8006bac:	2301      	movs	r3, #1
 8006bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb2:	e7f0      	b.n	8006b96 <_vfiprintf_r+0x1da>
 8006bb4:	ab03      	add	r3, sp, #12
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <_vfiprintf_r+0x25c>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	f7fd feba 	bl	8004938 <_printf_float>
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	1c78      	adds	r0, r7, #1
 8006bc8:	d1d6      	bne.n	8006b78 <_vfiprintf_r+0x1bc>
 8006bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bcc:	07d9      	lsls	r1, r3, #31
 8006bce:	d405      	bmi.n	8006bdc <_vfiprintf_r+0x220>
 8006bd0:	89ab      	ldrh	r3, [r5, #12]
 8006bd2:	059a      	lsls	r2, r3, #22
 8006bd4:	d402      	bmi.n	8006bdc <_vfiprintf_r+0x220>
 8006bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd8:	f7ff fe6c 	bl	80068b4 <__retarget_lock_release_recursive>
 8006bdc:	89ab      	ldrh	r3, [r5, #12]
 8006bde:	065b      	lsls	r3, r3, #25
 8006be0:	f53f af12 	bmi.w	8006a08 <_vfiprintf_r+0x4c>
 8006be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be6:	e711      	b.n	8006a0c <_vfiprintf_r+0x50>
 8006be8:	ab03      	add	r3, sp, #12
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <_vfiprintf_r+0x25c>)
 8006bf2:	a904      	add	r1, sp, #16
 8006bf4:	f7fe f93c 	bl	8004e70 <_printf_i>
 8006bf8:	e7e4      	b.n	8006bc4 <_vfiprintf_r+0x208>
 8006bfa:	bf00      	nop
 8006bfc:	08007f7c 	.word	0x08007f7c
 8006c00:	08007f9c 	.word	0x08007f9c
 8006c04:	08007f5c 	.word	0x08007f5c
 8006c08:	08007e04 	.word	0x08007e04
 8006c0c:	08007e0a 	.word	0x08007e0a
 8006c10:	08007e0e 	.word	0x08007e0e
 8006c14:	08004939 	.word	0x08004939
 8006c18:	08006997 	.word	0x08006997

08006c1c <__swbuf_r>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	460e      	mov	r6, r1
 8006c20:	4614      	mov	r4, r2
 8006c22:	4605      	mov	r5, r0
 8006c24:	b118      	cbz	r0, 8006c2e <__swbuf_r+0x12>
 8006c26:	6983      	ldr	r3, [r0, #24]
 8006c28:	b90b      	cbnz	r3, 8006c2e <__swbuf_r+0x12>
 8006c2a:	f000 f9e3 	bl	8006ff4 <__sinit>
 8006c2e:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <__swbuf_r+0x98>)
 8006c30:	429c      	cmp	r4, r3
 8006c32:	d12b      	bne.n	8006c8c <__swbuf_r+0x70>
 8006c34:	686c      	ldr	r4, [r5, #4]
 8006c36:	69a3      	ldr	r3, [r4, #24]
 8006c38:	60a3      	str	r3, [r4, #8]
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	071a      	lsls	r2, r3, #28
 8006c3e:	d52f      	bpl.n	8006ca0 <__swbuf_r+0x84>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	b36b      	cbz	r3, 8006ca0 <__swbuf_r+0x84>
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	6820      	ldr	r0, [r4, #0]
 8006c48:	b2f6      	uxtb	r6, r6
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	6963      	ldr	r3, [r4, #20]
 8006c4e:	4637      	mov	r7, r6
 8006c50:	4283      	cmp	r3, r0
 8006c52:	dc04      	bgt.n	8006c5e <__swbuf_r+0x42>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f938 	bl	8006ecc <_fflush_r>
 8006c5c:	bb30      	cbnz	r0, 8006cac <__swbuf_r+0x90>
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	3001      	adds	r0, #1
 8006c62:	3b01      	subs	r3, #1
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	701e      	strb	r6, [r3, #0]
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	4283      	cmp	r3, r0
 8006c72:	d004      	beq.n	8006c7e <__swbuf_r+0x62>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	07db      	lsls	r3, r3, #31
 8006c78:	d506      	bpl.n	8006c88 <__swbuf_r+0x6c>
 8006c7a:	2e0a      	cmp	r6, #10
 8006c7c:	d104      	bne.n	8006c88 <__swbuf_r+0x6c>
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f923 	bl	8006ecc <_fflush_r>
 8006c86:	b988      	cbnz	r0, 8006cac <__swbuf_r+0x90>
 8006c88:	4638      	mov	r0, r7
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <__swbuf_r+0x9c>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d101      	bne.n	8006c96 <__swbuf_r+0x7a>
 8006c92:	68ac      	ldr	r4, [r5, #8]
 8006c94:	e7cf      	b.n	8006c36 <__swbuf_r+0x1a>
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <__swbuf_r+0xa0>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	bf08      	it	eq
 8006c9c:	68ec      	ldreq	r4, [r5, #12]
 8006c9e:	e7ca      	b.n	8006c36 <__swbuf_r+0x1a>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 f81a 	bl	8006cdc <__swsetup_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d0cb      	beq.n	8006c44 <__swbuf_r+0x28>
 8006cac:	f04f 37ff 	mov.w	r7, #4294967295
 8006cb0:	e7ea      	b.n	8006c88 <__swbuf_r+0x6c>
 8006cb2:	bf00      	nop
 8006cb4:	08007f7c 	.word	0x08007f7c
 8006cb8:	08007f9c 	.word	0x08007f9c
 8006cbc:	08007f5c 	.word	0x08007f5c

08006cc0 <__ascii_wctomb>:
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	b141      	cbz	r1, 8006cd8 <__ascii_wctomb+0x18>
 8006cc6:	2aff      	cmp	r2, #255	; 0xff
 8006cc8:	d904      	bls.n	8006cd4 <__ascii_wctomb+0x14>
 8006cca:	228a      	movs	r2, #138	; 0x8a
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	4770      	bx	lr
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	700a      	strb	r2, [r1, #0]
 8006cd8:	4770      	bx	lr
	...

08006cdc <__swsetup_r>:
 8006cdc:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <__swsetup_r+0xcc>)
 8006cde:	b570      	push	{r4, r5, r6, lr}
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	b125      	cbz	r5, 8006cf2 <__swsetup_r+0x16>
 8006ce8:	69ab      	ldr	r3, [r5, #24]
 8006cea:	b913      	cbnz	r3, 8006cf2 <__swsetup_r+0x16>
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 f981 	bl	8006ff4 <__sinit>
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <__swsetup_r+0xd0>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d10f      	bne.n	8006d18 <__swsetup_r+0x3c>
 8006cf8:	686c      	ldr	r4, [r5, #4]
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d00:	0719      	lsls	r1, r3, #28
 8006d02:	d42c      	bmi.n	8006d5e <__swsetup_r+0x82>
 8006d04:	06dd      	lsls	r5, r3, #27
 8006d06:	d411      	bmi.n	8006d2c <__swsetup_r+0x50>
 8006d08:	2309      	movs	r3, #9
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	e03e      	b.n	8006d96 <__swsetup_r+0xba>
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <__swsetup_r+0xd4>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d101      	bne.n	8006d22 <__swsetup_r+0x46>
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	e7eb      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <__swsetup_r+0xd8>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	bf08      	it	eq
 8006d28:	68ec      	ldreq	r4, [r5, #12]
 8006d2a:	e7e6      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d2c:	0758      	lsls	r0, r3, #29
 8006d2e:	d512      	bpl.n	8006d56 <__swsetup_r+0x7a>
 8006d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d32:	b141      	cbz	r1, 8006d46 <__swsetup_r+0x6a>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__swsetup_r+0x66>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7fd fc81 	bl	8004644 <_free_r>
 8006d42:	2300      	movs	r3, #0
 8006d44:	6363      	str	r3, [r4, #52]	; 0x34
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b94b      	cbnz	r3, 8006d76 <__swsetup_r+0x9a>
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d003      	beq.n	8006d76 <__swsetup_r+0x9a>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 fa01 	bl	8007178 <__smakebuf_r>
 8006d76:	89a0      	ldrh	r0, [r4, #12]
 8006d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d7c:	f010 0301 	ands.w	r3, r0, #1
 8006d80:	d00a      	beq.n	8006d98 <__swsetup_r+0xbc>
 8006d82:	2300      	movs	r3, #0
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	425b      	negs	r3, r3
 8006d8a:	61a3      	str	r3, [r4, #24]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b943      	cbnz	r3, 8006da2 <__swsetup_r+0xc6>
 8006d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d94:	d1ba      	bne.n	8006d0c <__swsetup_r+0x30>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	0781      	lsls	r1, r0, #30
 8006d9a:	bf58      	it	pl
 8006d9c:	6963      	ldrpl	r3, [r4, #20]
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	e7f4      	b.n	8006d8c <__swsetup_r+0xb0>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7f7      	b.n	8006d96 <__swsetup_r+0xba>
 8006da6:	bf00      	nop
 8006da8:	20000040 	.word	0x20000040
 8006dac:	08007f7c 	.word	0x08007f7c
 8006db0:	08007f9c 	.word	0x08007f9c
 8006db4:	08007f5c 	.word	0x08007f5c

08006db8 <abort>:
 8006db8:	2006      	movs	r0, #6
 8006dba:	b508      	push	{r3, lr}
 8006dbc:	f000 fa4c 	bl	8007258 <raise>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f7fb f959 	bl	8002078 <_exit>
	...

08006dc8 <__sflush_r>:
 8006dc8:	898a      	ldrh	r2, [r1, #12]
 8006dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dcc:	4605      	mov	r5, r0
 8006dce:	0710      	lsls	r0, r2, #28
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	d457      	bmi.n	8006e84 <__sflush_r+0xbc>
 8006dd4:	684b      	ldr	r3, [r1, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dc04      	bgt.n	8006de4 <__sflush_r+0x1c>
 8006dda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dc01      	bgt.n	8006de4 <__sflush_r+0x1c>
 8006de0:	2000      	movs	r0, #0
 8006de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	d0fa      	beq.n	8006de0 <__sflush_r+0x18>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006df0:	682f      	ldr	r7, [r5, #0]
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	d032      	beq.n	8006e5c <__sflush_r+0x94>
 8006df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	075a      	lsls	r2, r3, #29
 8006dfc:	d505      	bpl.n	8006e0a <__sflush_r+0x42>
 8006dfe:	6863      	ldr	r3, [r4, #4]
 8006e00:	1ac0      	subs	r0, r0, r3
 8006e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e04:	b10b      	cbz	r3, 8006e0a <__sflush_r+0x42>
 8006e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e08:	1ac0      	subs	r0, r0, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e10:	4628      	mov	r0, r5
 8006e12:	6a21      	ldr	r1, [r4, #32]
 8006e14:	47b0      	blx	r6
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	d106      	bne.n	8006e2a <__sflush_r+0x62>
 8006e1c:	6829      	ldr	r1, [r5, #0]
 8006e1e:	291d      	cmp	r1, #29
 8006e20:	d82c      	bhi.n	8006e7c <__sflush_r+0xb4>
 8006e22:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <__sflush_r+0x100>)
 8006e24:	40ca      	lsrs	r2, r1
 8006e26:	07d6      	lsls	r6, r2, #31
 8006e28:	d528      	bpl.n	8006e7c <__sflush_r+0xb4>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	6062      	str	r2, [r4, #4]
 8006e2e:	6922      	ldr	r2, [r4, #16]
 8006e30:	04d9      	lsls	r1, r3, #19
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	d504      	bpl.n	8006e40 <__sflush_r+0x78>
 8006e36:	1c42      	adds	r2, r0, #1
 8006e38:	d101      	bne.n	8006e3e <__sflush_r+0x76>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	b903      	cbnz	r3, 8006e40 <__sflush_r+0x78>
 8006e3e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e42:	602f      	str	r7, [r5, #0]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d0cb      	beq.n	8006de0 <__sflush_r+0x18>
 8006e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e4c:	4299      	cmp	r1, r3
 8006e4e:	d002      	beq.n	8006e56 <__sflush_r+0x8e>
 8006e50:	4628      	mov	r0, r5
 8006e52:	f7fd fbf7 	bl	8004644 <_free_r>
 8006e56:	2000      	movs	r0, #0
 8006e58:	6360      	str	r0, [r4, #52]	; 0x34
 8006e5a:	e7c2      	b.n	8006de2 <__sflush_r+0x1a>
 8006e5c:	6a21      	ldr	r1, [r4, #32]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b0      	blx	r6
 8006e64:	1c41      	adds	r1, r0, #1
 8006e66:	d1c7      	bne.n	8006df8 <__sflush_r+0x30>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0c4      	beq.n	8006df8 <__sflush_r+0x30>
 8006e6e:	2b1d      	cmp	r3, #29
 8006e70:	d001      	beq.n	8006e76 <__sflush_r+0xae>
 8006e72:	2b16      	cmp	r3, #22
 8006e74:	d101      	bne.n	8006e7a <__sflush_r+0xb2>
 8006e76:	602f      	str	r7, [r5, #0]
 8006e78:	e7b2      	b.n	8006de0 <__sflush_r+0x18>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e7ae      	b.n	8006de2 <__sflush_r+0x1a>
 8006e84:	690f      	ldr	r7, [r1, #16]
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d0aa      	beq.n	8006de0 <__sflush_r+0x18>
 8006e8a:	0793      	lsls	r3, r2, #30
 8006e8c:	bf18      	it	ne
 8006e8e:	2300      	movne	r3, #0
 8006e90:	680e      	ldr	r6, [r1, #0]
 8006e92:	bf08      	it	eq
 8006e94:	694b      	ldreq	r3, [r1, #20]
 8006e96:	1bf6      	subs	r6, r6, r7
 8006e98:	600f      	str	r7, [r1, #0]
 8006e9a:	608b      	str	r3, [r1, #8]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	dd9f      	ble.n	8006de0 <__sflush_r+0x18>
 8006ea0:	4633      	mov	r3, r6
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	6a21      	ldr	r1, [r4, #32]
 8006ea8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006eac:	47e0      	blx	ip
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dc06      	bgt.n	8006ec0 <__sflush_r+0xf8>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	e790      	b.n	8006de2 <__sflush_r+0x1a>
 8006ec0:	4407      	add	r7, r0
 8006ec2:	1a36      	subs	r6, r6, r0
 8006ec4:	e7ea      	b.n	8006e9c <__sflush_r+0xd4>
 8006ec6:	bf00      	nop
 8006ec8:	20400001 	.word	0x20400001

08006ecc <_fflush_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	690b      	ldr	r3, [r1, #16]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b913      	cbnz	r3, 8006edc <_fflush_r+0x10>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	b118      	cbz	r0, 8006ee6 <_fflush_r+0x1a>
 8006ede:	6983      	ldr	r3, [r0, #24]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <_fflush_r+0x1a>
 8006ee2:	f000 f887 	bl	8006ff4 <__sinit>
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <_fflush_r+0x6c>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	d11b      	bne.n	8006f24 <_fflush_r+0x58>
 8006eec:	686c      	ldr	r4, [r5, #4]
 8006eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ef      	beq.n	8006ed6 <_fflush_r+0xa>
 8006ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef8:	07d0      	lsls	r0, r2, #31
 8006efa:	d404      	bmi.n	8006f06 <_fflush_r+0x3a>
 8006efc:	0599      	lsls	r1, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_fflush_r+0x3a>
 8006f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f02:	f7ff fcd6 	bl	80068b2 <__retarget_lock_acquire_recursive>
 8006f06:	4628      	mov	r0, r5
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f7ff ff5d 	bl	8006dc8 <__sflush_r>
 8006f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f10:	4605      	mov	r5, r0
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d4e0      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	d4dd      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f7ff fcc9 	bl	80068b4 <__retarget_lock_release_recursive>
 8006f22:	e7d9      	b.n	8006ed8 <_fflush_r+0xc>
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_fflush_r+0x70>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d101      	bne.n	8006f2e <_fflush_r+0x62>
 8006f2a:	68ac      	ldr	r4, [r5, #8]
 8006f2c:	e7df      	b.n	8006eee <_fflush_r+0x22>
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <_fflush_r+0x74>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf08      	it	eq
 8006f34:	68ec      	ldreq	r4, [r5, #12]
 8006f36:	e7da      	b.n	8006eee <_fflush_r+0x22>
 8006f38:	08007f7c 	.word	0x08007f7c
 8006f3c:	08007f9c 	.word	0x08007f9c
 8006f40:	08007f5c 	.word	0x08007f5c

08006f44 <std>:
 8006f44:	2300      	movs	r3, #0
 8006f46:	b510      	push	{r4, lr}
 8006f48:	4604      	mov	r4, r0
 8006f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f52:	6083      	str	r3, [r0, #8]
 8006f54:	8181      	strh	r1, [r0, #12]
 8006f56:	6643      	str	r3, [r0, #100]	; 0x64
 8006f58:	81c2      	strh	r2, [r0, #14]
 8006f5a:	6183      	str	r3, [r0, #24]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	2208      	movs	r2, #8
 8006f60:	305c      	adds	r0, #92	; 0x5c
 8006f62:	f7fd fb67 	bl	8004634 <memset>
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x38>)
 8006f68:	6224      	str	r4, [r4, #32]
 8006f6a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <std+0x3c>)
 8006f6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f70:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <std+0x40>)
 8006f72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <std+0x44>)
 8006f76:	6323      	str	r3, [r4, #48]	; 0x30
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08007291 	.word	0x08007291
 8006f80:	080072b3 	.word	0x080072b3
 8006f84:	080072eb 	.word	0x080072eb
 8006f88:	0800730f 	.word	0x0800730f

08006f8c <_cleanup_r>:
 8006f8c:	4901      	ldr	r1, [pc, #4]	; (8006f94 <_cleanup_r+0x8>)
 8006f8e:	f000 b8af 	b.w	80070f0 <_fwalk_reent>
 8006f92:	bf00      	nop
 8006f94:	08006ecd 	.word	0x08006ecd

08006f98 <__sfmoreglue>:
 8006f98:	2268      	movs	r2, #104	; 0x68
 8006f9a:	b570      	push	{r4, r5, r6, lr}
 8006f9c:	1e4d      	subs	r5, r1, #1
 8006f9e:	4355      	muls	r5, r2
 8006fa0:	460e      	mov	r6, r1
 8006fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fa6:	f7fd fbb5 	bl	8004714 <_malloc_r>
 8006faa:	4604      	mov	r4, r0
 8006fac:	b140      	cbz	r0, 8006fc0 <__sfmoreglue+0x28>
 8006fae:	2100      	movs	r1, #0
 8006fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fb4:	300c      	adds	r0, #12
 8006fb6:	60a0      	str	r0, [r4, #8]
 8006fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fbc:	f7fd fb3a 	bl	8004634 <memset>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <__sfp_lock_acquire>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__sfp_lock_acquire+0x8>)
 8006fc6:	f7ff bc74 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 8006fca:	bf00      	nop
 8006fcc:	200003d5 	.word	0x200003d5

08006fd0 <__sfp_lock_release>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sfp_lock_release+0x8>)
 8006fd2:	f7ff bc6f 	b.w	80068b4 <__retarget_lock_release_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	200003d5 	.word	0x200003d5

08006fdc <__sinit_lock_acquire>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sinit_lock_acquire+0x8>)
 8006fde:	f7ff bc68 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	200003d6 	.word	0x200003d6

08006fe8 <__sinit_lock_release>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__sinit_lock_release+0x8>)
 8006fea:	f7ff bc63 	b.w	80068b4 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	200003d6 	.word	0x200003d6

08006ff4 <__sinit>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f7ff fff0 	bl	8006fdc <__sinit_lock_acquire>
 8006ffc:	69a3      	ldr	r3, [r4, #24]
 8006ffe:	b11b      	cbz	r3, 8007008 <__sinit+0x14>
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f7ff bff0 	b.w	8006fe8 <__sinit_lock_release>
 8007008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800700c:	6523      	str	r3, [r4, #80]	; 0x50
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <__sinit+0x68>)
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <__sinit+0x6c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	62a2      	str	r2, [r4, #40]	; 0x28
 8007016:	42a3      	cmp	r3, r4
 8007018:	bf08      	it	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	4620      	mov	r0, r4
 800701e:	bf08      	it	eq
 8007020:	61a3      	streq	r3, [r4, #24]
 8007022:	f000 f81f 	bl	8007064 <__sfp>
 8007026:	6060      	str	r0, [r4, #4]
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f81b 	bl	8007064 <__sfp>
 800702e:	60a0      	str	r0, [r4, #8]
 8007030:	4620      	mov	r0, r4
 8007032:	f000 f817 	bl	8007064 <__sfp>
 8007036:	2200      	movs	r2, #0
 8007038:	2104      	movs	r1, #4
 800703a:	60e0      	str	r0, [r4, #12]
 800703c:	6860      	ldr	r0, [r4, #4]
 800703e:	f7ff ff81 	bl	8006f44 <std>
 8007042:	2201      	movs	r2, #1
 8007044:	2109      	movs	r1, #9
 8007046:	68a0      	ldr	r0, [r4, #8]
 8007048:	f7ff ff7c 	bl	8006f44 <std>
 800704c:	2202      	movs	r2, #2
 800704e:	2112      	movs	r1, #18
 8007050:	68e0      	ldr	r0, [r4, #12]
 8007052:	f7ff ff77 	bl	8006f44 <std>
 8007056:	2301      	movs	r3, #1
 8007058:	61a3      	str	r3, [r4, #24]
 800705a:	e7d1      	b.n	8007000 <__sinit+0xc>
 800705c:	08007be0 	.word	0x08007be0
 8007060:	08006f8d 	.word	0x08006f8d

08007064 <__sfp>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	4607      	mov	r7, r0
 8007068:	f7ff ffac 	bl	8006fc4 <__sfp_lock_acquire>
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <__sfp+0x84>)
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	69b3      	ldr	r3, [r6, #24]
 8007072:	b913      	cbnz	r3, 800707a <__sfp+0x16>
 8007074:	4630      	mov	r0, r6
 8007076:	f7ff ffbd 	bl	8006ff4 <__sinit>
 800707a:	3648      	adds	r6, #72	; 0x48
 800707c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007080:	3b01      	subs	r3, #1
 8007082:	d503      	bpl.n	800708c <__sfp+0x28>
 8007084:	6833      	ldr	r3, [r6, #0]
 8007086:	b30b      	cbz	r3, 80070cc <__sfp+0x68>
 8007088:	6836      	ldr	r6, [r6, #0]
 800708a:	e7f7      	b.n	800707c <__sfp+0x18>
 800708c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007090:	b9d5      	cbnz	r5, 80070c8 <__sfp+0x64>
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <__sfp+0x88>)
 8007094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007098:	60e3      	str	r3, [r4, #12]
 800709a:	6665      	str	r5, [r4, #100]	; 0x64
 800709c:	f7ff fc08 	bl	80068b0 <__retarget_lock_init_recursive>
 80070a0:	f7ff ff96 	bl	8006fd0 <__sfp_lock_release>
 80070a4:	2208      	movs	r2, #8
 80070a6:	4629      	mov	r1, r5
 80070a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070b0:	6025      	str	r5, [r4, #0]
 80070b2:	61a5      	str	r5, [r4, #24]
 80070b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b8:	f7fd fabc 	bl	8004634 <memset>
 80070bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070c4:	4620      	mov	r0, r4
 80070c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c8:	3468      	adds	r4, #104	; 0x68
 80070ca:	e7d9      	b.n	8007080 <__sfp+0x1c>
 80070cc:	2104      	movs	r1, #4
 80070ce:	4638      	mov	r0, r7
 80070d0:	f7ff ff62 	bl	8006f98 <__sfmoreglue>
 80070d4:	4604      	mov	r4, r0
 80070d6:	6030      	str	r0, [r6, #0]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d1d5      	bne.n	8007088 <__sfp+0x24>
 80070dc:	f7ff ff78 	bl	8006fd0 <__sfp_lock_release>
 80070e0:	230c      	movs	r3, #12
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	e7ee      	b.n	80070c4 <__sfp+0x60>
 80070e6:	bf00      	nop
 80070e8:	08007be0 	.word	0x08007be0
 80070ec:	ffff0001 	.word	0xffff0001

080070f0 <_fwalk_reent>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4606      	mov	r6, r0
 80070f6:	4688      	mov	r8, r1
 80070f8:	2700      	movs	r7, #0
 80070fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007102:	f1b9 0901 	subs.w	r9, r9, #1
 8007106:	d505      	bpl.n	8007114 <_fwalk_reent+0x24>
 8007108:	6824      	ldr	r4, [r4, #0]
 800710a:	2c00      	cmp	r4, #0
 800710c:	d1f7      	bne.n	80070fe <_fwalk_reent+0xe>
 800710e:	4638      	mov	r0, r7
 8007110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007114:	89ab      	ldrh	r3, [r5, #12]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d907      	bls.n	800712a <_fwalk_reent+0x3a>
 800711a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800711e:	3301      	adds	r3, #1
 8007120:	d003      	beq.n	800712a <_fwalk_reent+0x3a>
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	47c0      	blx	r8
 8007128:	4307      	orrs	r7, r0
 800712a:	3568      	adds	r5, #104	; 0x68
 800712c:	e7e9      	b.n	8007102 <_fwalk_reent+0x12>

0800712e <__swhatbuf_r>:
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	460e      	mov	r6, r1
 8007132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007136:	4614      	mov	r4, r2
 8007138:	2900      	cmp	r1, #0
 800713a:	461d      	mov	r5, r3
 800713c:	b096      	sub	sp, #88	; 0x58
 800713e:	da08      	bge.n	8007152 <__swhatbuf_r+0x24>
 8007140:	2200      	movs	r2, #0
 8007142:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007146:	602a      	str	r2, [r5, #0]
 8007148:	061a      	lsls	r2, r3, #24
 800714a:	d410      	bmi.n	800716e <__swhatbuf_r+0x40>
 800714c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007150:	e00e      	b.n	8007170 <__swhatbuf_r+0x42>
 8007152:	466a      	mov	r2, sp
 8007154:	f000 f902 	bl	800735c <_fstat_r>
 8007158:	2800      	cmp	r0, #0
 800715a:	dbf1      	blt.n	8007140 <__swhatbuf_r+0x12>
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007162:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007166:	425a      	negs	r2, r3
 8007168:	415a      	adcs	r2, r3
 800716a:	602a      	str	r2, [r5, #0]
 800716c:	e7ee      	b.n	800714c <__swhatbuf_r+0x1e>
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	2000      	movs	r0, #0
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	b016      	add	sp, #88	; 0x58
 8007176:	bd70      	pop	{r4, r5, r6, pc}

08007178 <__smakebuf_r>:
 8007178:	898b      	ldrh	r3, [r1, #12]
 800717a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800717c:	079d      	lsls	r5, r3, #30
 800717e:	4606      	mov	r6, r0
 8007180:	460c      	mov	r4, r1
 8007182:	d507      	bpl.n	8007194 <__smakebuf_r+0x1c>
 8007184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	2301      	movs	r3, #1
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	b002      	add	sp, #8
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	466a      	mov	r2, sp
 8007196:	ab01      	add	r3, sp, #4
 8007198:	f7ff ffc9 	bl	800712e <__swhatbuf_r>
 800719c:	9900      	ldr	r1, [sp, #0]
 800719e:	4605      	mov	r5, r0
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7fd fab7 	bl	8004714 <_malloc_r>
 80071a6:	b948      	cbnz	r0, 80071bc <__smakebuf_r+0x44>
 80071a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ac:	059a      	lsls	r2, r3, #22
 80071ae:	d4ef      	bmi.n	8007190 <__smakebuf_r+0x18>
 80071b0:	f023 0303 	bic.w	r3, r3, #3
 80071b4:	f043 0302 	orr.w	r3, r3, #2
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	e7e3      	b.n	8007184 <__smakebuf_r+0xc>
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <__smakebuf_r+0x7c>)
 80071be:	62b3      	str	r3, [r6, #40]	; 0x28
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	6120      	str	r0, [r4, #16]
 80071ce:	6163      	str	r3, [r4, #20]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	b15b      	cbz	r3, 80071ec <__smakebuf_r+0x74>
 80071d4:	4630      	mov	r0, r6
 80071d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071da:	f000 f8d1 	bl	8007380 <_isatty_r>
 80071de:	b128      	cbz	r0, 80071ec <__smakebuf_r+0x74>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	81a3      	strh	r3, [r4, #12]
 80071ec:	89a0      	ldrh	r0, [r4, #12]
 80071ee:	4305      	orrs	r5, r0
 80071f0:	81a5      	strh	r5, [r4, #12]
 80071f2:	e7cd      	b.n	8007190 <__smakebuf_r+0x18>
 80071f4:	08006f8d 	.word	0x08006f8d

080071f8 <_malloc_usable_size_r>:
 80071f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fc:	1f18      	subs	r0, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfbc      	itt	lt
 8007202:	580b      	ldrlt	r3, [r1, r0]
 8007204:	18c0      	addlt	r0, r0, r3
 8007206:	4770      	bx	lr

08007208 <_raise_r>:
 8007208:	291f      	cmp	r1, #31
 800720a:	b538      	push	{r3, r4, r5, lr}
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	d904      	bls.n	800721c <_raise_r+0x14>
 8007212:	2316      	movs	r3, #22
 8007214:	6003      	str	r3, [r0, #0]
 8007216:	f04f 30ff 	mov.w	r0, #4294967295
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800721e:	b112      	cbz	r2, 8007226 <_raise_r+0x1e>
 8007220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007224:	b94b      	cbnz	r3, 800723a <_raise_r+0x32>
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f830 	bl	800728c <_getpid_r>
 800722c:	462a      	mov	r2, r5
 800722e:	4601      	mov	r1, r0
 8007230:	4620      	mov	r0, r4
 8007232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007236:	f000 b817 	b.w	8007268 <_kill_r>
 800723a:	2b01      	cmp	r3, #1
 800723c:	d00a      	beq.n	8007254 <_raise_r+0x4c>
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	d103      	bne.n	800724a <_raise_r+0x42>
 8007242:	2316      	movs	r3, #22
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	2001      	movs	r0, #1
 8007248:	e7e7      	b.n	800721a <_raise_r+0x12>
 800724a:	2400      	movs	r4, #0
 800724c:	4628      	mov	r0, r5
 800724e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007252:	4798      	blx	r3
 8007254:	2000      	movs	r0, #0
 8007256:	e7e0      	b.n	800721a <_raise_r+0x12>

08007258 <raise>:
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <raise+0xc>)
 800725a:	4601      	mov	r1, r0
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	f7ff bfd3 	b.w	8007208 <_raise_r>
 8007262:	bf00      	nop
 8007264:	20000040 	.word	0x20000040

08007268 <_kill_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	2300      	movs	r3, #0
 800726c:	4d06      	ldr	r5, [pc, #24]	; (8007288 <_kill_r+0x20>)
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	f7fa fef5 	bl	8002064 <_kill>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d102      	bne.n	8007284 <_kill_r+0x1c>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b103      	cbz	r3, 8007284 <_kill_r+0x1c>
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	200003d0 	.word	0x200003d0

0800728c <_getpid_r>:
 800728c:	f7fa bee8 	b.w	8002060 <_getpid>

08007290 <__sread>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	f000 f894 	bl	80073c4 <_read_r>
 800729c:	2800      	cmp	r0, #0
 800729e:	bfab      	itete	ge
 80072a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072a2:	89a3      	ldrhlt	r3, [r4, #12]
 80072a4:	181b      	addge	r3, r3, r0
 80072a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072aa:	bfac      	ite	ge
 80072ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ae:	81a3      	strhlt	r3, [r4, #12]
 80072b0:	bd10      	pop	{r4, pc}

080072b2 <__swrite>:
 80072b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b6:	461f      	mov	r7, r3
 80072b8:	898b      	ldrh	r3, [r1, #12]
 80072ba:	4605      	mov	r5, r0
 80072bc:	05db      	lsls	r3, r3, #23
 80072be:	460c      	mov	r4, r1
 80072c0:	4616      	mov	r6, r2
 80072c2:	d505      	bpl.n	80072d0 <__swrite+0x1e>
 80072c4:	2302      	movs	r3, #2
 80072c6:	2200      	movs	r2, #0
 80072c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072cc:	f000 f868 	bl	80073a0 <_lseek_r>
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	4632      	mov	r2, r6
 80072d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	4628      	mov	r0, r5
 80072dc:	463b      	mov	r3, r7
 80072de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	f000 b817 	b.w	8007318 <_write_r>

080072ea <__sseek>:
 80072ea:	b510      	push	{r4, lr}
 80072ec:	460c      	mov	r4, r1
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 f855 	bl	80073a0 <_lseek_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	bf15      	itete	ne
 80072fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007306:	81a3      	strheq	r3, [r4, #12]
 8007308:	bf18      	it	ne
 800730a:	81a3      	strhne	r3, [r4, #12]
 800730c:	bd10      	pop	{r4, pc}

0800730e <__sclose>:
 800730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007312:	f000 b813 	b.w	800733c <_close_r>
	...

08007318 <_write_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	2200      	movs	r2, #0
 8007322:	4d05      	ldr	r5, [pc, #20]	; (8007338 <_write_r+0x20>)
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7fa feba 	bl	80020a0 <_write>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_write_r+0x1e>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_write_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200003d0 	.word	0x200003d0

0800733c <_close_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	2300      	movs	r3, #0
 8007340:	4d05      	ldr	r5, [pc, #20]	; (8007358 <_close_r+0x1c>)
 8007342:	4604      	mov	r4, r0
 8007344:	4608      	mov	r0, r1
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	f7fa feb8 	bl	80020bc <_close>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_close_r+0x1a>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_close_r+0x1a>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	200003d0 	.word	0x200003d0

0800735c <_fstat_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	2300      	movs	r3, #0
 8007360:	4d06      	ldr	r5, [pc, #24]	; (800737c <_fstat_r+0x20>)
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	f7fa feab 	bl	80020c4 <_fstat>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d102      	bne.n	8007378 <_fstat_r+0x1c>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	b103      	cbz	r3, 8007378 <_fstat_r+0x1c>
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	bd38      	pop	{r3, r4, r5, pc}
 800737a:	bf00      	nop
 800737c:	200003d0 	.word	0x200003d0

08007380 <_isatty_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	2300      	movs	r3, #0
 8007384:	4d05      	ldr	r5, [pc, #20]	; (800739c <_isatty_r+0x1c>)
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fa fea0 	bl	80020d0 <_isatty>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_isatty_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_isatty_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200003d0 	.word	0x200003d0

080073a0 <_lseek_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	2200      	movs	r2, #0
 80073aa:	4d05      	ldr	r5, [pc, #20]	; (80073c0 <_lseek_r+0x20>)
 80073ac:	602a      	str	r2, [r5, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f7fa fe90 	bl	80020d4 <_lseek>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_lseek_r+0x1e>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_lseek_r+0x1e>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	200003d0 	.word	0x200003d0

080073c4 <_read_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	2200      	movs	r2, #0
 80073ce:	4d05      	ldr	r5, [pc, #20]	; (80073e4 <_read_r+0x20>)
 80073d0:	602a      	str	r2, [r5, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f7fa fe56 	bl	8002084 <_read>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_read_r+0x1e>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_read_r+0x1e>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200003d0 	.word	0x200003d0

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
