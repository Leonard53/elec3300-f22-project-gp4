
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e40  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  08009028  08009028  00019028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b24  08009b24  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08009b24  08009b24  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b24  08009b24  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009b2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000210  08009d3c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08009d3c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd0  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  0002be09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b383  00000000  00000000  0002fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0e5  00000000  00000000  0004aeeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1bc  00000000  00000000  00058fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f418c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004280  00000000  00000000  000f41dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	08009010 	.word	0x08009010

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	08009010 	.word	0x08009010

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	for ( ; nCount != 0; nCount -- );
 8001150:	e002      	b.n	8001158 <Delay+0x10>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3b01      	subs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f9      	bne.n	8001152 <Delay+0xa>
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <LCD_INIT>:

void LCD_INIT ( void )
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 f829 	bl	80011c8 <LCD_BackLed_Control>
	LCD_Rst();
 8001176:	f000 f80f 	bl	8001198 <LCD_Rst>
	LCD_REG_Config();
 800117a:	f000 f85f 	bl	800123c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001186:	22f0      	movs	r2, #240	; 0xf0
 8001188:	2100      	movs	r1, #0
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f9e7 	bl	800155e <LCD_Clear>
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <LCD_Rst>:


void LCD_Rst ( void )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <LCD_Rst+0x28>)
 80011a2:	f003 fcbc 	bl	8004b1e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 );
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <LCD_Rst+0x2c>)
 80011a8:	f7ff ffce 	bl	8001148 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2102      	movs	r1, #2
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <LCD_Rst+0x28>)
 80011b2:	f003 fcb4 	bl	8004b1e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 );
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <LCD_Rst+0x2c>)
 80011b8:	f7ff ffc6 	bl	8001148 <Delay>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011800 	.word	0x40011800
 80011c4:	0002bffc 	.word	0x0002bffc

080011c8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <LCD_BackLed_Control+0x34>)
 80011e0:	f003 fc9d 	bl	8004b1e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);
}
 80011e4:	e005      	b.n	80011f2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <LCD_BackLed_Control+0x34>)
 80011ee:	f003 fc96 	bl	8004b1e <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40011400 	.word	0x40011400

08001200 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800120a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	8013      	strh	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <LCD_Write_Data+0x1c>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	8013      	strh	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	60020000 	.word	0x60020000

0800123c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );
}


void LCD_REG_Config ( void )
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001240:	20cf      	movs	r0, #207	; 0xcf
 8001242:	f7ff ffdd 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ffe8 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800124c:	2081      	movs	r0, #129	; 0x81
 800124e:	f7ff ffe5 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001252:	2030      	movs	r0, #48	; 0x30
 8001254:	f7ff ffe2 	bl	800121c <LCD_Write_Data>

	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001258:	20ed      	movs	r0, #237	; 0xed
 800125a:	f7ff ffd1 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f7ff ffdc 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001264:	2003      	movs	r0, #3
 8001266:	f7ff ffd9 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800126a:	2012      	movs	r0, #18
 800126c:	f7ff ffd6 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001270:	2081      	movs	r0, #129	; 0x81
 8001272:	f7ff ffd3 	bl	800121c <LCD_Write_Data>

	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001276:	20e8      	movs	r0, #232	; 0xe8
 8001278:	f7ff ffc2 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800127c:	2085      	movs	r0, #133	; 0x85
 800127e:	f7ff ffcd 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001282:	2010      	movs	r0, #16
 8001284:	f7ff ffca 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f7ff ffc7 	bl	800121c <LCD_Write_Data>

	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800128e:	20cb      	movs	r0, #203	; 0xcb
 8001290:	f7ff ffb6 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f7ff ffc1 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800129a:	202c      	movs	r0, #44	; 0x2c
 800129c:	f7ff ffbe 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ffbb 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80012a6:	2034      	movs	r0, #52	; 0x34
 80012a8:	f7ff ffb8 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff ffb5 	bl	800121c <LCD_Write_Data>

	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80012b2:	20f7      	movs	r0, #247	; 0xf7
 80012b4:	f7ff ffa4 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80012b8:	2020      	movs	r0, #32
 80012ba:	f7ff ffaf 	bl	800121c <LCD_Write_Data>

	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80012be:	20ea      	movs	r0, #234	; 0xea
 80012c0:	f7ff ff9e 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ffa9 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff ffa6 	bl	800121c <LCD_Write_Data>

	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80012d0:	20b1      	movs	r0, #177	; 0xb1
 80012d2:	f7ff ff95 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ffa0 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80012dc:	201b      	movs	r0, #27
 80012de:	f7ff ff9d 	bl	800121c <LCD_Write_Data>

	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80012e2:	20b6      	movs	r0, #182	; 0xb6
 80012e4:	f7ff ff8c 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80012e8:	200a      	movs	r0, #10
 80012ea:	f7ff ff97 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80012ee:	20a2      	movs	r0, #162	; 0xa2
 80012f0:	f7ff ff94 	bl	800121c <LCD_Write_Data>

	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80012f4:	20c0      	movs	r0, #192	; 0xc0
 80012f6:	f7ff ff83 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80012fa:	2035      	movs	r0, #53	; 0x35
 80012fc:	f7ff ff8e 	bl	800121c <LCD_Write_Data>

	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001300:	20c1      	movs	r0, #193	; 0xc1
 8001302:	f7ff ff7d 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001306:	2011      	movs	r0, #17
 8001308:	f7ff ff88 	bl	800121c <LCD_Write_Data>

	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800130c:	20c5      	movs	r0, #197	; 0xc5
 800130e:	f7ff ff77 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001312:	2045      	movs	r0, #69	; 0x45
 8001314:	f7ff ff82 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001318:	2045      	movs	r0, #69	; 0x45
 800131a:	f7ff ff7f 	bl	800121c <LCD_Write_Data>

	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800131e:	20c7      	movs	r0, #199	; 0xc7
 8001320:	f7ff ff6e 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001324:	20a2      	movs	r0, #162	; 0xa2
 8001326:	f7ff ff79 	bl	800121c <LCD_Write_Data>

	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800132a:	20f2      	movs	r0, #242	; 0xf2
 800132c:	f7ff ff68 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff73 	bl	800121c <LCD_Write_Data>

	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001336:	2026      	movs	r0, #38	; 0x26
 8001338:	f7ff ff62 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ff6d 	bl	800121c <LCD_Write_Data>
	DEBUG_DELAY ();

	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001342:	20e0      	movs	r0, #224	; 0xe0
 8001344:	f7ff ff5c 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff ff67 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f7ff ff64 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001354:	2024      	movs	r0, #36	; 0x24
 8001356:	f7ff ff61 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800135a:	200b      	movs	r0, #11
 800135c:	f7ff ff5e 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001360:	200e      	movs	r0, #14
 8001362:	f7ff ff5b 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001366:	2009      	movs	r0, #9
 8001368:	f7ff ff58 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800136c:	2054      	movs	r0, #84	; 0x54
 800136e:	f7ff ff55 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001372:	20a8      	movs	r0, #168	; 0xa8
 8001374:	f7ff ff52 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001378:	2046      	movs	r0, #70	; 0x46
 800137a:	f7ff ff4f 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800137e:	200c      	movs	r0, #12
 8001380:	f7ff ff4c 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001384:	2017      	movs	r0, #23
 8001386:	f7ff ff49 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800138a:	2009      	movs	r0, #9
 800138c:	f7ff ff46 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001390:	200f      	movs	r0, #15
 8001392:	f7ff ff43 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001396:	2007      	movs	r0, #7
 8001398:	f7ff ff40 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff3d 	bl	800121c <LCD_Write_Data>

	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80013a2:	20e1      	movs	r0, #225	; 0xe1
 80013a4:	f7ff ff2c 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ff37 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80013ae:	2019      	movs	r0, #25
 80013b0:	f7ff ff34 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80013b4:	201b      	movs	r0, #27
 80013b6:	f7ff ff31 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80013ba:	2004      	movs	r0, #4
 80013bc:	f7ff ff2e 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80013c0:	2010      	movs	r0, #16
 80013c2:	f7ff ff2b 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80013c6:	2007      	movs	r0, #7
 80013c8:	f7ff ff28 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80013cc:	202a      	movs	r0, #42	; 0x2a
 80013ce:	f7ff ff25 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80013d2:	2047      	movs	r0, #71	; 0x47
 80013d4:	f7ff ff22 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80013d8:	2039      	movs	r0, #57	; 0x39
 80013da:	f7ff ff1f 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80013de:	2003      	movs	r0, #3
 80013e0:	f7ff ff1c 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80013e4:	2006      	movs	r0, #6
 80013e6:	f7ff ff19 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80013ea:	2006      	movs	r0, #6
 80013ec:	f7ff ff16 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80013f0:	2030      	movs	r0, #48	; 0x30
 80013f2:	f7ff ff13 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f7ff ff10 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80013fc:	200f      	movs	r0, #15
 80013fe:	f7ff ff0d 	bl	800121c <LCD_Write_Data>

	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 );
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f7ff fefc 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );
 8001408:	20c8      	movs	r0, #200	; 0xc8
 800140a:	f7ff ff07 	bl	800121c <LCD_Write_Data>
	DEBUG_DELAY ();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 800140e:	202a      	movs	r0, #42	; 0x2a
 8001410:	f7ff fef6 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff01 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fefe 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fefb 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001426:	20ef      	movs	r0, #239	; 0xef
 8001428:	f7ff fef8 	bl	800121c <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE );
 800142c:	202b      	movs	r0, #43	; 0x2b
 800142e:	f7ff fee7 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fef2 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff feef 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff feec 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001444:	203f      	movs	r0, #63	; 0x3f
 8001446:	f7ff fee9 	bl	800121c <LCD_Write_Data>

	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a );
 800144a:	203a      	movs	r0, #58	; 0x3a
 800144c:	f7ff fed8 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001450:	2055      	movs	r0, #85	; 0x55
 8001452:	f7ff fee3 	bl	800121c <LCD_Write_Data>

	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );
 8001456:	2011      	movs	r0, #17
 8001458:	f7ff fed2 	bl	8001200 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <LCD_REG_Config+0x230>)
 800145e:	f7ff fe73 	bl	8001148 <Delay>
	DEBUG_DELAY ();

	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 );
 8001462:	2029      	movs	r0, #41	; 0x29
 8001464:	f7ff fecc 	bl	8001200 <LCD_Write_Cmd>

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0002bffc 	.word	0x0002bffc

08001470 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	80fb      	strh	r3, [r7, #6]
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]
 800148a:	4613      	mov	r3, r2
 800148c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 800148e:	202a      	movs	r0, #42	; 0x2a
 8001490:	f7ff feb6 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff febe 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff feb8 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4413      	add	r3, r2
 80014b2:	3b01      	subs	r3, #1
 80014b4:	121b      	asrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff feaf 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fea4 	bl	800121c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE );
 80014d4:	202b      	movs	r0, #43	; 0x2b
 80014d6:	f7ff fe93 	bl	8001200 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe9b 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe95 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	883b      	ldrh	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	3b01      	subs	r3, #1
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe8c 	bl	800121c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	883b      	ldrh	r3, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe81 	bl	800121c <LCD_Write_Data>

}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}

08001522 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001532:	202c      	movs	r0, #44	; 0x2c
 8001534:	f7ff fe64 	bl	8001200 <LCD_Write_Cmd>

	for ( i = 0; i < usPoint; i ++ )
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e006      	b.n	800154c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe6b 	bl	800121c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f4      	bcc.n	800153e <LCD_FillColor+0x1c>

}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	4604      	mov	r4, r0
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4623      	mov	r3, r4
 800156e:	80fb      	strh	r3, [r7, #6]
 8001570:	4603      	mov	r3, r0
 8001572:	80bb      	strh	r3, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	88b9      	ldrh	r1, [r7, #4]
 8001582:	88f8      	ldrh	r0, [r7, #6]
 8001584:	f7ff ff74 	bl	8001470 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	883a      	ldrh	r2, [r7, #0]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	461a      	mov	r2, r3
 8001592:	8b3b      	ldrh	r3, [r7, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff ffc3 	bl	8001522 <LCD_FillColor>

}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <LCD_DrawChar>:

}


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	460b      	mov	r3, r1
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;


	ucRelativePositon = cChar - ' ';
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	3b20      	subs	r3, #32
 80015ba:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80015bc:	88b9      	ldrh	r1, [r7, #4]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	2310      	movs	r3, #16
 80015c2:	2208      	movs	r2, #8
 80015c4:	f7ff ff54 	bl	8001470 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 80015c8:	202c      	movs	r0, #44	; 0x2c
 80015ca:	f7ff fe19 	bl	8001200 <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80015ce:	2300      	movs	r3, #0
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	e023      	b.n	800161c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80015d4:	7b3a      	ldrb	r2, [r7, #12]
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	4914      	ldr	r1, [pc, #80]	; (800162c <LCD_DrawChar+0x88>)
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	440a      	add	r2, r1
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	73fb      	strb	r3, [r7, #15]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80015e4:	2300      	movs	r3, #0
 80015e6:	737b      	strb	r3, [r7, #13]
 80015e8:	e012      	b.n	8001610 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80015f4:	201f      	movs	r0, #31
 80015f6:	f7ff fe11 	bl	800121c <LCD_Write_Data>
 80015fa:	e003      	b.n	8001604 <LCD_DrawChar+0x60>

			else
				LCD_Write_Data (  0xFFFF );
 80015fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001600:	f7ff fe0c 	bl	800121c <LCD_Write_Data>

			ucTemp >>= 1;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	3301      	adds	r3, #1
 800160e:	737b      	strb	r3, [r7, #13]
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d9e9      	bls.n	80015ea <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	3301      	adds	r3, #1
 800161a:	73bb      	strb	r3, [r7, #14]
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d9d8      	bls.n	80015d4 <LCD_DrawChar+0x30>

		}

	}

}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	08009140 	.word	0x08009140

08001630 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001640:	e01c      	b.n	800167c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2be8      	cmp	r3, #232	; 0xe8
 8001646:	d904      	bls.n	8001652 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001648:	2300      	movs	r3, #0
 800164a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	3310      	adds	r3, #16
 8001650:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001658:	d903      	bls.n	8001662 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800165a:	2300      	movs	r3, #0
 800165c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800165e:	2300      	movs	r3, #0
 8001660:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	88b9      	ldrh	r1, [r7, #4]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff9a 	bl	80015a4 <LCD_DrawChar>

		pStr ++;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	3308      	adds	r3, #8
 800167a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1de      	bne.n	8001642 <LCD_DrawString+0x12>

	}

}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	460b      	mov	r3, r1
 800169a:	80bb      	strh	r3, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2bef      	cmp	r3, #239	; 0xef
 80016a4:	d809      	bhi.n	80016ba <LCD_DrawDot+0x2c>
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016ac:	d205      	bcs.n	80016ba <LCD_DrawDot+0x2c>
		LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80016ae:	88b9      	ldrh	r1, [r7, #4]
 80016b0:	88f8      	ldrh	r0, [r7, #6]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2201      	movs	r2, #1
 80016b6:	f7ff fedb 	bl	8001470 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	4619      	mov	r1, r3
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff2f 	bl	8001522 <LCD_FillColor>

}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <LCD_DrawEllipse>:

void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
	float xda, ydb, result;

	for (int16_t col = usC - SR; col <= usC + SR; col++) {
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	82fb      	strh	r3, [r7, #22]
 80016f4:	e06e      	b.n	80017d4 <LCD_DrawEllipse+0x108>
		for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	883b      	ldrh	r3, [r7, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	82bb      	strh	r3, [r7, #20]
 8001700:	e05b      	b.n	80017ba <LCD_DrawEllipse+0xee>
			if (col < 0 || col >= LCD_Default_Max_COLUMN || pag < 0 || pag >= LCD_Default_Max_PAGE) break;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db5e      	blt.n	80017c8 <LCD_DrawEllipse+0xfc>
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	2bef      	cmp	r3, #239	; 0xef
 8001710:	dc5a      	bgt.n	80017c8 <LCD_DrawEllipse+0xfc>
 8001712:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db56      	blt.n	80017c8 <LCD_DrawEllipse+0xfc>
 800171a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800171e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001722:	da51      	bge.n	80017c8 <LCD_DrawEllipse+0xfc>

			xda = (col - usC) / (float)SR;
 8001724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff faf1 	bl	8000d14 <__aeabi_i2f>
 8001732:	4604      	mov	r4, r0
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fae8 	bl	8000d0c <__aeabi_ui2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fbef 	bl	8000f24 <__aeabi_fdiv>
 8001746:	4603      	mov	r3, r0
 8001748:	613b      	str	r3, [r7, #16]
			ydb = (pag - usP) / (float)LR;
 800174a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fade 	bl	8000d14 <__aeabi_i2f>
 8001758:	4604      	mov	r4, r0
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fad5 	bl	8000d0c <__aeabi_ui2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fbdc 	bl	8000f24 <__aeabi_fdiv>
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
			result = xda * xda + ydb * ydb;
 8001770:	6939      	ldr	r1, [r7, #16]
 8001772:	6938      	ldr	r0, [r7, #16]
 8001774:	f7ff fb22 	bl	8000dbc <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	461c      	mov	r4, r3
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fb1c 	bl	8000dbc <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fa0f 	bl	8000bac <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	60bb      	str	r3, [r7, #8]

			if (result <= 1) {
 8001792:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f7ff fcb8 	bl	800110c <__aeabi_fcmple>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <LCD_DrawEllipse+0xe2>
				LCD_DrawDot(col, pag, usColor);
 80017a2:	8afb      	ldrh	r3, [r7, #22]
 80017a4:	8ab9      	ldrh	r1, [r7, #20]
 80017a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff70 	bl	800168e <LCD_DrawDot>
		for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80017ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	82bb      	strh	r3, [r7, #20]
 80017ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017be:	88b9      	ldrh	r1, [r7, #4]
 80017c0:	883b      	ldrh	r3, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dd9c      	ble.n	8001702 <LCD_DrawEllipse+0x36>
	for (int16_t col = usC - SR; col <= usC + SR; col++) {
 80017c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	82fb      	strh	r3, [r7, #22]
 80017d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d8:	88f9      	ldrh	r1, [r7, #6]
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	440b      	add	r3, r1
 80017de:	429a      	cmp	r2, r3
 80017e0:	dd89      	ble.n	80016f6 <LCD_DrawEllipse+0x2a>
			}
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	4603      	mov	r3, r0
 8001800:	80bb      	strh	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
 8001806:	4613      	mov	r3, r2
 8001808:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	3b20      	subs	r3, #32
 800180e:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001810:	88b9      	ldrh	r1, [r7, #4]
 8001812:	88f8      	ldrh	r0, [r7, #6]
 8001814:	2310      	movs	r3, #16
 8001816:	2208      	movs	r2, #8
 8001818:	f7ff fe2a 	bl	8001470 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 800181c:	202c      	movs	r0, #44	; 0x2c
 800181e:	f7ff fcef 	bl	8001200 <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001822:	2300      	movs	r3, #0
 8001824:	73bb      	strb	r3, [r7, #14]
 8001826:	e024      	b.n	8001872 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001828:	7b3a      	ldrb	r2, [r7, #12]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <LCD_DrawChar_Color+0x98>)
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	440a      	add	r2, r1
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73fb      	strb	r3, [r7, #15]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001838:	2300      	movs	r3, #0
 800183a:	737b      	strb	r3, [r7, #13]
 800183c:	e013      	b.n	8001866 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001848:	8c3b      	ldrh	r3, [r7, #32]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fce6 	bl	800121c <LCD_Write_Data>
 8001850:	e003      	b.n	800185a <LCD_DrawChar_Color+0x6e>

			else
				LCD_Write_Data ( usColor_Background );
 8001852:	883b      	ldrh	r3, [r7, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fce1 	bl	800121c <LCD_Write_Data>

			ucTemp >>= 1;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001860:	7b7b      	ldrb	r3, [r7, #13]
 8001862:	3301      	adds	r3, #1
 8001864:	737b      	strb	r3, [r7, #13]
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	2b07      	cmp	r3, #7
 800186a:	d9e8      	bls.n	800183e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	3301      	adds	r3, #1
 8001870:	73bb      	strb	r3, [r7, #14]
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d9d7      	bls.n	8001828 <LCD_DrawChar_Color+0x3c>

		}

	}

}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	08009140 	.word	0x08009140

08001888 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	LCD_Clear ( usX - 10, usY, 20, 1, WHITE);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	3b0a      	subs	r3, #10
 800189c:	b298      	uxth	r0, r3
 800189e:	88b9      	ldrh	r1, [r7, #4]
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	2214      	movs	r2, #20
 80018aa:	f7ff fe58 	bl	800155e <LCD_Clear>
	LCD_Clear ( usX, usY - 10, 1, 20, WHITE);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	3b0a      	subs	r3, #10
 80018b2:	b299      	uxth	r1, r3
 80018b4:	88f8      	ldrh	r0, [r7, #6]
 80018b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2314      	movs	r3, #20
 80018be:	2201      	movs	r2, #1
 80018c0:	f7ff fe4d 	bl	800155e <LCD_Clear>

}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	460b      	mov	r3, r1
 80018dc:	81bb      	strh	r3, [r7, #12]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80018e2:	e01f      	b.n	8001924 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	2be8      	cmp	r3, #232	; 0xe8
 80018e8:	d904      	bls.n	80018f4 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80018ea:	2300      	movs	r3, #0
 80018ec:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	3310      	adds	r3, #16
 80018f2:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80018fa:	d903      	bls.n	8001904 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80018fc:	2300      	movs	r3, #0
 80018fe:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001900:	2300      	movs	r3, #0
 8001902:	81bb      	strh	r3, [r7, #12]
		}

		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	88fc      	ldrh	r4, [r7, #6]
 800190a:	89b9      	ldrh	r1, [r7, #12]
 800190c:	89f8      	ldrh	r0, [r7, #14]
 800190e:	8c3b      	ldrh	r3, [r7, #32]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4623      	mov	r3, r4
 8001914:	f7ff ff6a 	bl	80017ec <LCD_DrawChar_Color>

		pStr ++;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]

		usC += WIDTH_EN_CHAR;
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	3308      	adds	r3, #8
 8001922:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1db      	bne.n	80018e4 <LCD_DrawString_Color+0x18>

	}

}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}

08001936 <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground, uint8_t delayEachChar )
{
 8001936:	b590      	push	{r4, r7, lr}
 8001938:	b087      	sub	sp, #28
 800193a:	af02      	add	r7, sp, #8
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	461a      	mov	r2, r3
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
 8001944:	460b      	mov	r3, r1
 8001946:	81bb      	strh	r3, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800194c:	e024      	b.n	8001998 <LCD_DrawString_Color_With_Delay+0x62>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	2be8      	cmp	r3, #232	; 0xe8
 8001952:	d904      	bls.n	800195e <LCD_DrawString_Color_With_Delay+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001954:	2300      	movs	r3, #0
 8001956:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	3310      	adds	r3, #16
 800195c:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800195e:	89bb      	ldrh	r3, [r7, #12]
 8001960:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001964:	d903      	bls.n	800196e <LCD_DrawString_Color_With_Delay+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001966:	2300      	movs	r3, #0
 8001968:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 800196a:	2300      	movs	r3, #0
 800196c:	81bb      	strh	r3, [r7, #12]
		}

		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	88fc      	ldrh	r4, [r7, #6]
 8001974:	89b9      	ldrh	r1, [r7, #12]
 8001976:	89f8      	ldrh	r0, [r7, #14]
 8001978:	8c3b      	ldrh	r3, [r7, #32]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4623      	mov	r3, r4
 800197e:	f7ff ff35 	bl	80017ec <LCD_DrawChar_Color>

		pStr ++;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]

		usC += WIDTH_EN_CHAR;
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	3308      	adds	r3, #8
 800198c:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(delayEachChar);
 800198e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001992:	4618      	mov	r0, r3
 8001994:	f001 ffba 	bl	800390c <HAL_Delay>
	while ( * pStr != '\0' )
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1d6      	bne.n	800194e <LCD_DrawString_Color_With_Delay+0x18>
	}

}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
	...

080019ac <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	f200 80a0 	bhi.w	8001b00 <LCD_GramScan+0x154>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <LCD_GramScan+0x1c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	08001a23 	.word	0x08001a23
 80019d0:	08001a6d 	.word	0x08001a6d
 80019d4:	08001ab7 	.word	0x08001ab7

//		____ x(240)
//	 |
//	 |	y(320)

		LCD_Write_Cmd ( 0x36 );
 80019d8:	2036      	movs	r0, #54	; 0x36
 80019da:	f7ff fc11 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0xC8 );
 80019de:	20c8      	movs	r0, #200	; 0xc8
 80019e0:	f7ff fc1c 	bl	800121c <LCD_Write_Data>
		LCD_Write_Cmd ( 0x2A  );
 80019e4:	202a      	movs	r0, #42	; 0x2a
 80019e6:	f7ff fc0b 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );	/* x start */
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fc16 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fc13 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );  /* x end */
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fc10 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0xEF );
 80019fc:	20ef      	movs	r0, #239	; 0xef
 80019fe:	f7ff fc0d 	bl	800121c <LCD_Write_Data>

		LCD_Write_Cmd ( 0x2B );
 8001a02:	202b      	movs	r0, #43	; 0x2b
 8001a04:	f7ff fbfc 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );	/* y start */
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fc07 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fc04 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x01 );	/* y end */
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fc01 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x3F );
 8001a1a:	203f      	movs	r0, #63	; 0x3f
 8001a1c:	f7ff fbfe 	bl	800121c <LCD_Write_Data>

		break;
 8001a20:	e06e      	b.n	8001b00 <LCD_GramScan+0x154>

//		|x(320)
//		|
//		|___ y(240)

		LCD_Write_Cmd ( 0x36 );
 8001a22:	2036      	movs	r0, #54	; 0x36
 8001a24:	f7ff fbec 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x68 );
 8001a28:	2068      	movs	r0, #104	; 0x68
 8001a2a:	f7ff fbf7 	bl	800121c <LCD_Write_Data>
		LCD_Write_Cmd ( 0x2A  );
 8001a2e:	202a      	movs	r0, #42	; 0x2a
 8001a30:	f7ff fbe6 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fbf1 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fbee 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x01 );
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fbeb 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x3F );
 8001a46:	203f      	movs	r0, #63	; 0x3f
 8001a48:	f7ff fbe8 	bl	800121c <LCD_Write_Data>

		LCD_Write_Cmd ( 0x2B );
 8001a4c:	202b      	movs	r0, #43	; 0x2b
 8001a4e:	f7ff fbd7 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fbe2 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fbdf 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fbdc 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0xEF );
 8001a64:	20ef      	movs	r0, #239	; 0xef
 8001a66:	f7ff fbd9 	bl	800121c <LCD_Write_Data>

		break;
 8001a6a:	e049      	b.n	8001b00 <LCD_GramScan+0x154>

//		           |x(320)
//		           |
//		y(240) ____|

		LCD_Write_Cmd ( 0x36 );
 8001a6c:	2036      	movs	r0, #54	; 0x36
 8001a6e:	f7ff fbc7 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x28 );
 8001a72:	2028      	movs	r0, #40	; 0x28
 8001a74:	f7ff fbd2 	bl	800121c <LCD_Write_Data>
		LCD_Write_Cmd ( 0x2A  );
 8001a78:	202a      	movs	r0, #42	; 0x2a
 8001a7a:	f7ff fbc1 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fbcc 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fbc9 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x01 );
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fbc6 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x3F );
 8001a90:	203f      	movs	r0, #63	; 0x3f
 8001a92:	f7ff fbc3 	bl	800121c <LCD_Write_Data>

		LCD_Write_Cmd ( 0x2B );
 8001a96:	202b      	movs	r0, #43	; 0x2b
 8001a98:	f7ff fbb2 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fbbd 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fbba 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fbb7 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0xEF );
 8001aae:	20ef      	movs	r0, #239	; 0xef
 8001ab0:	f7ff fbb4 	bl	800121c <LCD_Write_Data>

		break;
 8001ab4:	e024      	b.n	8001b00 <LCD_GramScan+0x154>

//		|y(320)
//		|
//		|___ x(240)

		LCD_Write_Cmd ( 0x36 );
 8001ab6:	2036      	movs	r0, #54	; 0x36
 8001ab8:	f7ff fba2 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x48 );
 8001abc:	2048      	movs	r0, #72	; 0x48
 8001abe:	f7ff fbad 	bl	800121c <LCD_Write_Data>
		LCD_Write_Cmd ( 0x2A  );
 8001ac2:	202a      	movs	r0, #42	; 0x2a
 8001ac4:	f7ff fb9c 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fba7 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fba4 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fba1 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0xEF );
 8001ada:	20ef      	movs	r0, #239	; 0xef
 8001adc:	f7ff fb9e 	bl	800121c <LCD_Write_Data>

		LCD_Write_Cmd ( 0x2B );
 8001ae0:	202b      	movs	r0, #43	; 0x2b
 8001ae2:	f7ff fb8d 	bl	8001200 <LCD_Write_Cmd>
		LCD_Write_Data ( 0x00 );
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fb98 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x00 );
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fb95 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x01 );
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fb92 	bl	800121c <LCD_Write_Data>
		LCD_Write_Data ( 0x3F );
 8001af8:	203f      	movs	r0, #63	; 0x3f
 8001afa:	f7ff fb8f 	bl	800121c <LCD_Write_Data>

		break;
 8001afe:	bf00      	nop

	}


	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001b00:	202c      	movs	r0, #44	; 0x2c
 8001b02:	f7ff fb7d 	bl	8001200 <LCD_Write_Cmd>


}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop

08001b10 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_UART_RxCpltCallback+0x4c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d117      	bne.n	8001b52 <HAL_UART_RxCpltCallback+0x42>
	{
		if(rxData==79) // Ascii value of 'O' is 79
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_UART_RxCpltCallback+0x50>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b4f      	cmp	r3, #79	; 0x4f
 8001b28:	d105      	bne.n	8001b36 <HAL_UART_RxCpltCallback+0x26>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // output to LED
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <HAL_UART_RxCpltCallback+0x54>)
 8001b30:	f002 fff5 	bl	8004b1e <HAL_GPIO_WritePin>
 8001b34:	e008      	b.n	8001b48 <HAL_UART_RxCpltCallback+0x38>
		}
		else if (rxData==88) // Ascii value of 'X' is 88
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_UART_RxCpltCallback+0x50>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b58      	cmp	r3, #88	; 0x58
 8001b3c:	d104      	bne.n	8001b48 <HAL_UART_RxCpltCallback+0x38>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2110      	movs	r1, #16
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <HAL_UART_RxCpltCallback+0x54>)
 8001b44:	f002 ffeb 	bl	8004b1e <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1); // Enabling interrupt receive again
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4905      	ldr	r1, [pc, #20]	; (8001b60 <HAL_UART_RxCpltCallback+0x50>)
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <HAL_UART_RxCpltCallback+0x58>)
 8001b4e:	f003 fe6f 	bl	8005830 <HAL_UART_Receive_IT>
	}
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	200002e8 	.word	0x200002e8
 8001b64:	40010800 	.word	0x40010800
 8001b68:	2000025c 	.word	0x2000025c

08001b6c <Check_touchkey>:

void Check_touchkey() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
	strType_XPT2046_Coordinate strDisplayCoordinate;
	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) ) {
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4925      	ldr	r1, [pc, #148]	; (8001c0c <Check_touchkey+0xa0>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fdb8 	bl	80036ec <XPT2046_Get_TouchedPoint>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03f      	beq.n	8001c02 <Check_touchkey+0x96>
		if (currentPage == home) {
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <Check_touchkey+0xa4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11f      	bne.n	8001bca <Check_touchkey+0x5e>
			if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2bd2      	cmp	r3, #210	; 0xd2
 8001b8e:	d938      	bls.n	8001c02 <Check_touchkey+0x96>
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2bf9      	cmp	r3, #249	; 0xf9
 8001b94:	d835      	bhi.n	8001c02 <Check_touchkey+0x96>
				if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 8001b96:	88bb      	ldrh	r3, [r7, #4]
 8001b98:	2b14      	cmp	r3, #20
 8001b9a:	d909      	bls.n	8001bb0 <Check_touchkey+0x44>
 8001b9c:	88bb      	ldrh	r3, [r7, #4]
 8001b9e:	2b63      	cmp	r3, #99	; 0x63
 8001ba0:	d806      	bhi.n	8001bb0 <Check_touchkey+0x44>
					currentPage = weight;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <Check_touchkey+0xa4>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
					changingPage = 1;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <Check_touchkey+0xa8>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
					changingPage = 1;
				}
			}
		}
	}
}
 8001bae:	e028      	b.n	8001c02 <Check_touchkey+0x96>
				else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	2b82      	cmp	r3, #130	; 0x82
 8001bb4:	d925      	bls.n	8001c02 <Check_touchkey+0x96>
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	2bd1      	cmp	r3, #209	; 0xd1
 8001bba:	d822      	bhi.n	8001c02 <Check_touchkey+0x96>
					currentPage = bluetooth;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <Check_touchkey+0xa4>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
					changingPage = 1;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <Check_touchkey+0xa8>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	e01b      	b.n	8001c02 <Check_touchkey+0x96>
		else if (currentPage == weight || currentPage == bluetooth) {
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <Check_touchkey+0xa4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d003      	beq.n	8001bda <Check_touchkey+0x6e>
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <Check_touchkey+0xa4>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d113      	bne.n	8001c02 <Check_touchkey+0x96>
			if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001be0:	d30f      	bcc.n	8001c02 <Check_touchkey+0x96>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 8001be8:	d80b      	bhi.n	8001c02 <Check_touchkey+0x96>
				if(strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	2b14      	cmp	r3, #20
 8001bee:	d908      	bls.n	8001c02 <Check_touchkey+0x96>
 8001bf0:	88bb      	ldrh	r3, [r7, #4]
 8001bf2:	2b95      	cmp	r3, #149	; 0x95
 8001bf4:	d805      	bhi.n	8001c02 <Check_touchkey+0x96>
					currentPage = home;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <Check_touchkey+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
					changingPage = 1;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <Check_touchkey+0xa8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	200002e9 	.word	0x200002e9
 8001c14:	20000000 	.word	0x20000000

08001c18 <HueToRGB565>:

uint16_t HueToRGB565(uint8_t hue) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	uint16_t portion = hue * 6;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	0052      	lsls	r2, r2, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	81fb      	strh	r3, [r7, #14]

	if (portion < 256) { // 0 <= degree < 60
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d81f      	bhi.n	8001c76 <HueToRGB565+0x5e>
		return RED + ((int)(portion / 256.0 * 64) << 5);
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc4f 	bl	80004dc <__aeabi_i2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <HueToRGB565+0x1f0>)
 8001c44:	f7fe fdde 	bl	8000804 <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HueToRGB565+0x1f4>)
 8001c56:	f7fe fcab 	bl	80005b0 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ff55 	bl	8000b10 <__aeabi_d2iz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	e0c4      	b.n	8001e00 <HueToRGB565+0x1e8>
	} else if (portion < 256 * 2) { // 60 <= degree < 120
 8001c76:	89fb      	ldrh	r3, [r7, #14]
 8001c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7c:	d224      	bcs.n	8001cc8 <HueToRGB565+0xb0>
		return (31 - (int)((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc29 	bl	80004dc <__aeabi_i2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HueToRGB565+0x1f0>)
 8001c90:	f7fe fdb8 	bl	8000804 <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HueToRGB565+0x1f8>)
 8001ca2:	f7fe fc85 	bl	80005b0 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7fe ff2f 	bl	8000b10 <__aeabi_d2iz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f1c3 031f 	rsb	r3, r3, #31
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	02db      	lsls	r3, r3, #11
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	e09b      	b.n	8001e00 <HueToRGB565+0x1e8>
	} else if (portion < 256 * 3) { // 120 <= degree < 180
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cce:	d21f      	bcs.n	8001d10 <HueToRGB565+0xf8>
		return GREEN + (int)((portion - 256 * 2) / 256.0 * 32);
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc00 	bl	80004dc <__aeabi_i2d>
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HueToRGB565+0x1f0>)
 8001ce2:	f7fe fd8f 	bl	8000804 <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HueToRGB565+0x1f8>)
 8001cf4:	f7fe fc5c 	bl	80005b0 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe ff06 	bl	8000b10 <__aeabi_d2iz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	e077      	b.n	8001e00 <HueToRGB565+0x1e8>
	} else if (portion < 256 * 4) { // 180 <= degree < 240
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d223      	bcs.n	8001d60 <HueToRGB565+0x148>
		return (63 - (int)((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbdc 	bl	80004dc <__aeabi_i2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HueToRGB565+0x1f0>)
 8001d2a:	f7fe fd6b 	bl	8000804 <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HueToRGB565+0x1f4>)
 8001d3c:	f7fe fc38 	bl	80005b0 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fee2 	bl	8000b10 <__aeabi_d2iz>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	331f      	adds	r3, #31
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	e04f      	b.n	8001e00 <HueToRGB565+0x1e8>
	} else if (portion < 256 * 5) { // 240 <= degree < 300
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d66:	d220      	bcs.n	8001daa <HueToRGB565+0x192>
		return BLUE + ((int)((portion - 256 * 4) / 256.0 * 32) << 11);
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbb4 	bl	80004dc <__aeabi_i2d>
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HueToRGB565+0x1f0>)
 8001d7a:	f7fe fd43 	bl	8000804 <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HueToRGB565+0x1f8>)
 8001d8c:	f7fe fc10 	bl	80005b0 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe feba 	bl	8000b10 <__aeabi_d2iz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	02db      	lsls	r3, r3, #11
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	331f      	adds	r3, #31
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	e02a      	b.n	8001e00 <HueToRGB565+0x1e8>
	} else if (portion < 256 * 6) { // 300 <= degree < 360
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001db0:	d226      	bcs.n	8001e00 <HueToRGB565+0x1e8>
		return (int)(31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8001db2:	89fb      	ldrh	r3, [r7, #14]
 8001db4:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb8f 	bl	80004dc <__aeabi_i2d>
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HueToRGB565+0x1f0>)
 8001dc4:	f7fe fd1e 	bl	8000804 <__aeabi_ddiv>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HueToRGB565+0x1f8>)
 8001dd6:	f7fe fbeb 	bl	80005b0 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	490c      	ldr	r1, [pc, #48]	; (8001e14 <HueToRGB565+0x1fc>)
 8001de4:	f7fe fa2c 	bl	8000240 <__aeabi_dsub>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe fe8e 	bl	8000b10 <__aeabi_d2iz>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	e7ff      	b.n	8001e00 <HueToRGB565+0x1e8>
	}
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40700000 	.word	0x40700000
 8001e0c:	40500000 	.word	0x40500000
 8001e10:	40400000 	.word	0x40400000
 8001e14:	403f0000 	.word	0x403f0000

08001e18 <getY>:

void initPins(struct YPin pin) {

}

void getY(uint8_t index, uint8_t delay) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460a      	mov	r2, r1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
	if ((index & 0x01) == 0) {
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <getY+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e38:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <getY+0x8c>)
 8001e3a:	f002 fe70 	bl	8004b1e <HAL_GPIO_WritePin>
 8001e3e:	e005      	b.n	8001e4c <getY+0x34>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <getY+0x8c>)
 8001e48:	f002 fe69 	bl	8004b1e <HAL_GPIO_WritePin>
	}

	if ((index & 0x02) == 0) {
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <getY+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <getY+0x8c>)
 8001e5e:	f002 fe5e 	bl	8004b1e <HAL_GPIO_WritePin>
 8001e62:	e005      	b.n	8001e70 <getY+0x58>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <getY+0x8c>)
 8001e6c:	f002 fe57 	bl	8004b1e <HAL_GPIO_WritePin>
	}

	if ((index & 0x04) == 0) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <getY+0x70>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <getY+0x8c>)
 8001e82:	f002 fe4c 	bl	8004b1e <HAL_GPIO_WritePin>
 8001e86:	e005      	b.n	8001e94 <getY+0x7c>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <getY+0x8c>)
 8001e90:	f002 fe45 	bl	8004b1e <HAL_GPIO_WritePin>
	}

	HAL_Delay(delay);
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 fd38 	bl	800390c <HAL_Delay>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <mainPage.1>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	void mainPage(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	f8c7 c004 	str.w	ip, [r7, #4]
		if(changingPage) {
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <mainPage.1+0xd4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d05b      	beq.n	8001f72 <mainPage.1+0xca>
			changingPage = 0;
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <mainPage.1+0xd4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
			currentPage = home;
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <mainPage.1+0xd8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
			LCD_Clear(0, 0, 240, 320, BLACK);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ece:	22f0      	movs	r2, #240	; 0xf0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fb43 	bl	800155e <LCD_Clear>
			char* output_text = "Welcome to the smart suitcase system";
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <mainPage.1+0xdc>)
 8001eda:	60fb      	str	r3, [r7, #12]
			LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001edc:	230a      	movs	r3, #10
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	231f      	movs	r3, #31
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	2128      	movs	r1, #40	; 0x28
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fd22 	bl	8001936 <LCD_DrawString_Color_With_Delay>
			HAL_Delay(100);
 8001ef2:	2064      	movs	r0, #100	; 0x64
 8001ef4:	f001 fd0a 	bl	800390c <HAL_Delay>
			output_text = "Please choose an option below.";
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <mainPage.1+0xe0>)
 8001efa:	60fb      	str	r3, [r7, #12]
			LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 8001efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	2164      	movs	r1, #100	; 0x64
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fcdf 	bl	80018cc <LCD_DrawString_Color>
			HAL_Delay(200);
 8001f0e:	20c8      	movs	r0, #200	; 0xc8
 8001f10:	f001 fcfc 	bl	800390c <HAL_Delay>
			LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8001f14:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2328      	movs	r3, #40	; 0x28
 8001f1c:	2250      	movs	r2, #80	; 0x50
 8001f1e:	21e6      	movs	r1, #230	; 0xe6
 8001f20:	2014      	movs	r0, #20
 8001f22:	f7ff fb1c 	bl	800155e <LCD_Clear>
			output_text = "WEIGHT";
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <mainPage.1+0xe4>)
 8001f28:	60fb      	str	r3, [r7, #12]
			LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	21f2      	movs	r1, #242	; 0xf2
 8001f3a:	2023      	movs	r0, #35	; 0x23
 8001f3c:	f7ff fcfb 	bl	8001936 <LCD_DrawString_Color_With_Delay>
			HAL_Delay(200);
 8001f40:	20c8      	movs	r0, #200	; 0xc8
 8001f42:	f001 fce3 	bl	800390c <HAL_Delay>
			output_text = "BLUEBOOTH";
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <mainPage.1+0xe8>)
 8001f48:	60fb      	str	r3, [r7, #12]
			LCD_Clear(130, 230, 80, 40, YELLOW); //BLUETOOTH: 130 ~ 210 / 210 ~ 250
 8001f4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2328      	movs	r3, #40	; 0x28
 8001f52:	2250      	movs	r2, #80	; 0x50
 8001f54:	21e6      	movs	r1, #230	; 0xe6
 8001f56:	2082      	movs	r0, #130	; 0x82
 8001f58:	f7ff fb01 	bl	800155e <LCD_Clear>
			LCD_DrawString_Color_With_Delay(135, 242, output_text, YELLOW, BLACK, 15);
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2300      	movs	r3, #0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	21f2      	movs	r1, #242	; 0xf2
 8001f6c:	2087      	movs	r0, #135	; 0x87
 8001f6e:	f7ff fce2 	bl	8001936 <LCD_DrawString_Color_With_Delay>
		}
	}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	200002e9 	.word	0x200002e9
 8001f84:	08009028 	.word	0x08009028
 8001f88:	08009050 	.word	0x08009050
 8001f8c:	08009070 	.word	0x08009070
 8001f90:	08009078 	.word	0x08009078

08001f94 <main>:
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af02      	add	r7, sp, #8
int main(void)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa0:	f001 fc52 	bl	8003848 <HAL_Init>
  /* USER CODE BEGIN Init */
	//HAL_UART_Receive_IT(&huart1, &rxData, 1); //enable global interruption
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa4:	f000 f9b8 	bl	8002318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa8:	f000 fa7c 	bl	80024a4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001fac:	f000 fb6e 	bl	800268c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001fb0:	f000 fa4e 	bl	8002450 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001fb4:	f000 fa0e 	bl	80023d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001fb8:	4838      	ldr	r0, [pc, #224]	; (800209c <main+0x108>)
 8001fba:	f002 f909 	bl	80041d0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_PollForConversion(&hadc2, 1000);
 8001fbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc2:	4836      	ldr	r0, [pc, #216]	; (800209c <main+0x108>)
 8001fc4:	f001 fe5e 	bl	8003c84 <HAL_ADC_PollForConversion>
  HAL_ADC_Start(&hadc2);
 8001fc8:	4834      	ldr	r0, [pc, #208]	; (800209c <main+0x108>)
 8001fca:	f001 fdad 	bl	8003b28 <HAL_ADC_Start>

  macXPT2046_CS_DISABLE();
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd4:	4832      	ldr	r0, [pc, #200]	; (80020a0 <main+0x10c>)
 8001fd6:	f002 fda2 	bl	8004b1e <HAL_GPIO_WritePin>
  LCD_INIT();
 8001fda:	f7ff f8c6 	bl	800116a <LCD_INIT>
  currentPage = home;
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <main+0x110>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(50);
 8001fe4:	2032      	movs	r0, #50	; 0x32
 8001fe6:	f001 fc91 	bl	800390c <HAL_Delay>
  while( ! XPT2046_Touch_Calibrate () );
 8001fea:	bf00      	nop
 8001fec:	f001 f948 	bl	8003280 <XPT2046_Touch_Calibrate>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0fa      	beq.n	8001fec <main+0x58>
  LCD_GramScan ( 1 );
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff fcd8 	bl	80019ac <LCD_GramScan>
  LCD_Clear ( 0, 0, 240, 320, BLACK );
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002004:	22f0      	movs	r2, #240	; 0xf0
 8002006:	2100      	movs	r1, #0
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff faa8 	bl	800155e <LCD_Clear>
  mainPage();
 800200e:	463b      	mov	r3, r7
 8002010:	469c      	mov	ip, r3
 8002012:	f7ff ff49 	bl	8001ea8 <mainPage.1>
  HAL_Delay(500);
 8002016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800201a:	f001 fc77 	bl	800390c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (currentPage == home) mainPage();
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <main+0x110>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <main+0x9c>
 8002026:	463b      	mov	r3, r7
 8002028:	469c      	mov	ip, r3
 800202a:	f7ff ff3d 	bl	8001ea8 <mainPage.1>
 800202e:	e00e      	b.n	800204e <main+0xba>
		else if (currentPage == weight) weightPage(0.0);
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <main+0x110>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <main+0xb2>
 8002038:	463b      	mov	r3, r7
 800203a:	469c      	mov	ip, r3
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f000 f83a 	bl	80020b8 <weightPage.0>
 8002044:	e003      	b.n	800204e <main+0xba>
		else mainPage();
 8002046:	463b      	mov	r3, r7
 8002048:	469c      	mov	ip, r3
 800204a:	f7ff ff2d 	bl	8001ea8 <mainPage.1>
		char* debug;
		if (currentPage == home) debug = "H";
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <main+0x110>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <main+0xc8>
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <main+0x114>)
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e008      	b.n	800206e <main+0xda>
		else if (currentPage == weight) debug = "W";
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <main+0x110>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <main+0xd6>
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <main+0x118>)
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	e001      	b.n	800206e <main+0xda>
		else debug = "B";
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <main+0x11c>)
 800206c:	607b      	str	r3, [r7, #4]
		LCD_DrawString_Color(200, 10, debug, BLACK, WHITE);
 800206e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	210a      	movs	r1, #10
 800207a:	20c8      	movs	r0, #200	; 0xc8
 800207c:	f7ff fc26 	bl	80018cc <LCD_DrawString_Color>
		if ( ucXPT2046_TouchFlag == 1 ) {
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <main+0x120>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d104      	bne.n	8002094 <main+0x100>
			Check_touchkey();
 800208a:	f7ff fd6f 	bl	8001b6c <Check_touchkey>
			ucXPT2046_TouchFlag = 0;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <main+0x120>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(50);
 8002094:	2032      	movs	r0, #50	; 0x32
 8002096:	f001 fc39 	bl	800390c <HAL_Delay>
	{
 800209a:	e7c0      	b.n	800201e <main+0x8a>
 800209c:	2000022c 	.word	0x2000022c
 80020a0:	40011400 	.word	0x40011400
 80020a4:	200002e9 	.word	0x200002e9
 80020a8:	08009084 	.word	0x08009084
 80020ac:	08009088 	.word	0x08009088
 80020b0:	0800908c 	.word	0x0800908c
 80020b4:	200002f4 	.word	0x200002f4

080020b8 <weightPage.0>:
	void weightPage(float KG) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b08f      	sub	sp, #60	; 0x3c
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	f8c7 c000 	str.w	ip, [r7]
		if(changingPage) {
 80020c4:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <weightPage.0+0x238>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d065      	beq.n	8002198 <weightPage.0+0xe0>
			changingPage = 0;
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <weightPage.0+0x238>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
			currentPage = weight;
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <weightPage.0+0x23c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
			output_text = "W E I G H T D E T E C T I O N";
 80020d8:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <weightPage.0+0x240>)
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
			LCD_Clear(0, 0, 240, 320, BLACK);
 80020dc:	2300      	movs	r3, #0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020e4:	22f0      	movs	r2, #240	; 0xf0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fa38 	bl	800155e <LCD_Clear>
			LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80020ee:	230a      	movs	r3, #10
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	231f      	movs	r3, #31
 80020fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fc:	2128      	movs	r1, #40	; 0x28
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fc19 	bl	8001936 <LCD_DrawString_Color_With_Delay>
			output_text = "Return to Home";
 8002104:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <weightPage.0+0x244>)
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
			LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8002108:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2319      	movs	r3, #25
 8002110:	2282      	movs	r2, #130	; 0x82
 8002112:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002116:	2014      	movs	r0, #20
 8002118:	f7ff fa21 	bl	800155e <LCD_Clear>
			LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 800211c:	230a      	movs	r3, #10
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2300      	movs	r3, #0
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212a:	f240 111d 	movw	r1, #285	; 0x11d
 800212e:	201e      	movs	r0, #30
 8002130:	f7ff fc01 	bl	8001936 <LCD_DrawString_Color_With_Delay>
			HAL_Delay(30);
 8002134:	201e      	movs	r0, #30
 8002136:	f001 fbe9 	bl	800390c <HAL_Delay>
			for (uint8_t i = 0; i < 8; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002140:	e026      	b.n	8002190 <weightPage.0+0xd8>
				char temp[10] = "";
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	809a      	strh	r2, [r3, #4]
				sprintf(temp, "Y%d: ", i);
 8002150:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	4969      	ldr	r1, [pc, #420]	; (8002300 <weightPage.0+0x248>)
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fcde 	bl	8006b1c <siprintf>
				LCD_DrawString_Color(170, 140 + 18 * i, temp, BACKGROUND, WHITE);
 8002160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	00d2      	lsls	r2, r2, #3
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	b29b      	uxth	r3, r3
 8002170:	338c      	adds	r3, #140	; 0x8c
 8002172:	b299      	uxth	r1, r3
 8002174:	f107 0218 	add.w	r2, r7, #24
 8002178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	20aa      	movs	r0, #170	; 0xaa
 8002182:	f7ff fba3 	bl	80018cc <LCD_DrawString_Color>
			for (uint8_t i = 0; i < 8; i++) {
 8002186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800218a:	3301      	adds	r3, #1
 800218c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002194:	2b07      	cmp	r3, #7
 8002196:	d9d4      	bls.n	8002142 <weightPage.0+0x8a>
		output_text = "[K G]";
 8002198:	4b5a      	ldr	r3, [pc, #360]	; (8002304 <weightPage.0+0x24c>)
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
		LCD_DrawString_Color(160, 100, output_text, BLUE, BLACK);
 800219c:	2300      	movs	r3, #0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	231f      	movs	r3, #31
 80021a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a4:	2164      	movs	r1, #100	; 0x64
 80021a6:	20a0      	movs	r0, #160	; 0xa0
 80021a8:	f7ff fb90 	bl	80018cc <LCD_DrawString_Color>
		for (uint8_t counter = 0; counter < 8; counter++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021b2:	e090      	b.n	80022d6 <weightPage.0+0x21e>
			getY(counter, 20);
 80021b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021b8:	2114      	movs	r1, #20
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe2c 	bl	8001e18 <getY>
			unsigned int val = HAL_ADC_GetValue(&hadc2);
 80021c0:	4851      	ldr	r0, [pc, #324]	; (8002308 <weightPage.0+0x250>)
 80021c2:	f001 fe65 	bl	8003e90 <HAL_ADC_GetValue>
 80021c6:	6278      	str	r0, [r7, #36]	; 0x24
			char dec[10] = "";
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	809a      	strh	r2, [r3, #4]
			if (counter < 4)
 80021d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d830      	bhi.n	8002240 <weightPage.0+0x188>
				LCD_DrawEllipse(50, 240 - counter * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));
 80021de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	02d2      	lsls	r2, r2, #11
 80021e8:	1ad2      	subs	r2, r2, r3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	33f0      	adds	r3, #240	; 0xf0
 80021f4:	b29c      	uxth	r4, r3
 80021f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021f8:	f7fe f960 	bl	80004bc <__aeabi_ui2d>
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <weightPage.0+0x254>)
 8002202:	f7fe faff 	bl	8000804 <__aeabi_ddiv>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <weightPage.0+0x258>)
 8002214:	f7fe f9cc 	bl	80005b0 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fc9e 	bl	8000b60 <__aeabi_d2uiz>
 8002224:	4603      	mov	r3, r0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fcf5 	bl	8001c18 <HueToRGB565>
 800222e:	4603      	mov	r3, r0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	230a      	movs	r3, #10
 8002234:	220a      	movs	r2, #10
 8002236:	4621      	mov	r1, r4
 8002238:	2032      	movs	r0, #50	; 0x32
 800223a:	f7ff fa47 	bl	80016cc <LCD_DrawEllipse>
 800223e:	e02e      	b.n	800229e <weightPage.0+0x1e6>
				LCD_DrawEllipse(100, 120 + (counter - 4) * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));
 8002240:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002244:	3b04      	subs	r3, #4
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	b29b      	uxth	r3, r3
 8002252:	3378      	adds	r3, #120	; 0x78
 8002254:	b29c      	uxth	r4, r3
 8002256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002258:	f7fe f930 	bl	80004bc <__aeabi_ui2d>
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <weightPage.0+0x254>)
 8002262:	f7fe facf 	bl	8000804 <__aeabi_ddiv>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <weightPage.0+0x258>)
 8002274:	f7fe f99c 	bl	80005b0 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc6e 	bl	8000b60 <__aeabi_d2uiz>
 8002284:	4603      	mov	r3, r0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fcc5 	bl	8001c18 <HueToRGB565>
 800228e:	4603      	mov	r3, r0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	230a      	movs	r3, #10
 8002294:	220a      	movs	r2, #10
 8002296:	4621      	mov	r1, r4
 8002298:	2064      	movs	r0, #100	; 0x64
 800229a:	f7ff fa17 	bl	80016cc <LCD_DrawEllipse>
			sprintf(dec, "%4d", val);
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	491b      	ldr	r1, [pc, #108]	; (8002314 <weightPage.0+0x25c>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fc38 	bl	8006b1c <siprintf>
			LCD_DrawString(200, 140 + 18 * counter, dec);
 80022ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	338c      	adds	r3, #140	; 0x8c
 80022be:	b29b      	uxth	r3, r3
 80022c0:	f107 020c 	add.w	r2, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	20c8      	movs	r0, #200	; 0xc8
 80022c8:	f7ff f9b2 	bl	8001630 <LCD_DrawString>
		for (uint8_t counter = 0; counter < 8; counter++) {
 80022cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022d0:	3301      	adds	r3, #1
 80022d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80022d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022da:	2b07      	cmp	r3, #7
 80022dc:	f67f af6a 	bls.w	80021b4 <weightPage.0+0xfc>
		HAL_Delay(100);
 80022e0:	2064      	movs	r0, #100	; 0x64
 80022e2:	f001 fb13 	bl	800390c <HAL_Delay>
	}
 80022e6:	bf00      	nop
 80022e8:	3734      	adds	r7, #52	; 0x34
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000
 80022f4:	200002e9 	.word	0x200002e9
 80022f8:	08009090 	.word	0x08009090
 80022fc:	080090b0 	.word	0x080090b0
 8002300:	080090c0 	.word	0x080090c0
 8002304:	080090c8 	.word	0x080090c8
 8002308:	2000022c 	.word	0x2000022c
 800230c:	40b00000 	.word	0x40b00000
 8002310:	40700000 	.word	0x40700000
 8002314:	080090d0 	.word	0x080090d0

08002318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b096      	sub	sp, #88	; 0x58
 800231c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002322:	2228      	movs	r2, #40	; 0x28
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f003 ff90 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800234c:	2301      	movs	r3, #1
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800235a:	2301      	movs	r3, #1
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235e:	2302      	movs	r3, #2
 8002360:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002366:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800236c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fc0e 	bl	8004b94 <HAL_RCC_OscConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800237e:	f000 f9e9 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002382:	230f      	movs	r3, #15
 8002384:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe7a 	bl	8005098 <HAL_RCC_ClockConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023aa:	f000 f9d3 	bl	8002754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023ae:	2302      	movs	r3, #2
 80023b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 f804 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80023c6:	f000 f9c5 	bl	8002754 <Error_Handler>
  }
}
 80023ca:	bf00      	nop
 80023cc:	3758      	adds	r7, #88	; 0x58
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_ADC2_Init+0x74>)
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <MX_ADC2_Init+0x78>)
 80023e8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <MX_ADC2_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_ADC2_Init+0x74>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_ADC2_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_ADC2_Init+0x74>)
 80023fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002402:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_ADC2_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_ADC2_Init+0x74>)
 800240c:	2201      	movs	r2, #1
 800240e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <MX_ADC2_Init+0x74>)
 8002412:	f001 fa9f 	bl	8003954 <HAL_ADC_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800241c:	f000 f99a 	bl	8002754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002420:	2303      	movs	r3, #3
 8002422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002424:	2301      	movs	r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002428:	2305      	movs	r3, #5
 800242a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_ADC2_Init+0x74>)
 8002432:	f001 fd39 	bl	8003ea8 <HAL_ADC_ConfigChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800243c:	f000 f98a 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000022c 	.word	0x2000022c
 800244c:	40012800 	.word	0x40012800

08002450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_USART1_UART_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31800;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800245c:	f647 4238 	movw	r2, #31800	; 0x7c38
 8002460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002488:	f003 f985 	bl	8005796 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002492:	f000 f95f 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000025c 	.word	0x2000025c
 80024a0:	40013800 	.word	0x40013800

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024b8:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a6c      	ldr	r2, [pc, #432]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	4b67      	ldr	r3, [pc, #412]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a66      	ldr	r2, [pc, #408]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <MX_GPIO_Init+0x1cc>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <MX_GPIO_Init+0x1cc>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a5a      	ldr	r2, [pc, #360]	; (8002670 <MX_GPIO_Init+0x1cc>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <MX_GPIO_Init+0x1cc>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002518:	4b55      	ldr	r3, [pc, #340]	; (8002670 <MX_GPIO_Init+0x1cc>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <MX_GPIO_Init+0x1cc>)
 800251e:	f043 0320 	orr.w	r3, r3, #32
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <MX_GPIO_Init+0x1cc>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2107      	movs	r1, #7
 8002534:	484f      	ldr	r0, [pc, #316]	; (8002674 <MX_GPIO_Init+0x1d0>)
 8002536:	f002 faf2 	bl	8004b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	2110      	movs	r1, #16
 800253e:	484e      	ldr	r0, [pc, #312]	; (8002678 <MX_GPIO_Init+0x1d4>)
 8002540:	f002 faed 	bl	8004b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002544:	2201      	movs	r2, #1
 8002546:	2123      	movs	r1, #35	; 0x23
 8002548:	484c      	ldr	r0, [pc, #304]	; (800267c <MX_GPIO_Init+0x1d8>)
 800254a:	f002 fae8 	bl	8004b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002554:	484a      	ldr	r0, [pc, #296]	; (8002680 <MX_GPIO_Init+0x1dc>)
 8002556:	f002 fae2 	bl	8004b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002560:	4848      	ldr	r0, [pc, #288]	; (8002684 <MX_GPIO_Init+0x1e0>)
 8002562:	f002 fadc 	bl	8004b1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8002566:	2307      	movs	r3, #7
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002576:	f107 0318 	add.w	r3, r7, #24
 800257a:	4619      	mov	r1, r3
 800257c:	483d      	ldr	r0, [pc, #244]	; (8002674 <MX_GPIO_Init+0x1d0>)
 800257e:	f002 f923 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002582:	2308      	movs	r3, #8
 8002584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258a:	2301      	movs	r3, #1
 800258c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800258e:	f107 0318 	add.w	r3, r7, #24
 8002592:	4619      	mov	r1, r3
 8002594:	4837      	ldr	r0, [pc, #220]	; (8002674 <MX_GPIO_Init+0x1d0>)
 8002596:	f002 f917 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800259a:	2310      	movs	r3, #16
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <MX_GPIO_Init+0x1e4>)
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a6:	f107 0318 	add.w	r3, r7, #24
 80025aa:	4619      	mov	r1, r3
 80025ac:	4831      	ldr	r0, [pc, #196]	; (8002674 <MX_GPIO_Init+0x1d0>)
 80025ae:	f002 f90b 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	4619      	mov	r1, r3
 80025c6:	482f      	ldr	r0, [pc, #188]	; (8002684 <MX_GPIO_Init+0x1e0>)
 80025c8:	f002 f8fe 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025cc:	2301      	movs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	4619      	mov	r1, r3
 80025de:	4826      	ldr	r0, [pc, #152]	; (8002678 <MX_GPIO_Init+0x1d4>)
 80025e0:	f002 f8f2 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025e4:	2310      	movs	r3, #16
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	4619      	mov	r1, r3
 80025fa:	481f      	ldr	r0, [pc, #124]	; (8002678 <MX_GPIO_Init+0x1d4>)
 80025fc:	f002 f8e4 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002600:	2323      	movs	r3, #35	; 0x23
 8002602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4619      	mov	r1, r3
 8002616:	4819      	ldr	r0, [pc, #100]	; (800267c <MX_GPIO_Init+0x1d8>)
 8002618:	f002 f8d6 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800261c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f107 0318 	add.w	r3, r7, #24
 8002632:	4619      	mov	r1, r3
 8002634:	4812      	ldr	r0, [pc, #72]	; (8002680 <MX_GPIO_Init+0x1dc>)
 8002636:	f002 f8c7 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800263a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	2301      	movs	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2302      	movs	r3, #2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	4619      	mov	r1, r3
 8002652:	480c      	ldr	r0, [pc, #48]	; (8002684 <MX_GPIO_Init+0x1e0>)
 8002654:	f002 f8b8 	bl	80047c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	200a      	movs	r0, #10
 800265e:	f001 ff3a 	bl	80044d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002662:	200a      	movs	r0, #10
 8002664:	f001 ff53 	bl	800450e <HAL_NVIC_EnableIRQ>

}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40011800 	.word	0x40011800
 8002678:	40010800 	.word	0x40010800
 800267c:	40010c00 	.word	0x40010c00
 8002680:	40011400 	.word	0x40011400
 8002684:	40011000 	.word	0x40011000
 8002688:	10210000 	.word	0x10210000

0800268c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	615a      	str	r2, [r3, #20]
 80026a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80026aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <MX_FSMC_Init+0xc0>)
 80026b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80026c4:	4b20      	ldr	r3, [pc, #128]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026c6:	2210      	movs	r2, #16
 80026c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_FSMC_Init+0xbc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002702:	230f      	movs	r3, #15
 8002704:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002706:	230f      	movs	r3, #15
 8002708:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800270a:	23ff      	movs	r3, #255	; 0xff
 800270c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800270e:	230f      	movs	r3, #15
 8002710:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002712:	2310      	movs	r3, #16
 8002714:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002716:	2311      	movs	r3, #17
 8002718:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <MX_FSMC_Init+0xbc>)
 8002726:	f002 ffe9 	bl	80056fc <HAL_SRAM_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002730:	f000 f810 	bl	8002754 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_FSMC_Init+0xc4>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4a05      	ldr	r2, [pc, #20]	; (8002750 <MX_FSMC_Init+0xc4>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002a0 	.word	0x200002a0
 800274c:	a0000104 	.word	0xa0000104
 8002750:	40010000 	.word	0x40010000

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_MspInit+0x5c>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_MspInit+0x5c>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6193      	str	r3, [r2, #24]
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_MspInit+0x5c>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_MspInit+0x5c>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_MspInit+0x5c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_MspInit+0x5c>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_MspInit+0x60>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_MspInit+0x60>)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010000 	.word	0x40010000

080027c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_ADC_MspInit+0x6c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d121      	bne.n	8002828 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_ADC_MspInit+0x70>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_ADC_MspInit+0x70>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_ADC_MspInit+0x70>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_ADC_MspInit+0x70>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_ADC_MspInit+0x70>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_ADC_MspInit+0x70>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002814:	2308      	movs	r3, #8
 8002816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	2303      	movs	r3, #3
 800281a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4619      	mov	r1, r3
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <HAL_ADC_MspInit+0x74>)
 8002824:	f001 ffd0 	bl	80047c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012800 	.word	0x40012800
 8002834:	40021000 	.word	0x40021000
 8002838:	40010800 	.word	0x40010800

0800283c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_UART_MspInit+0x9c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d139      	bne.n	80028d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <HAL_UART_MspInit+0xa0>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_UART_MspInit+0xa0>)
 8002862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_UART_MspInit+0xa0>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_UART_MspInit+0xa0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_UART_MspInit+0xa0>)
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_UART_MspInit+0xa0>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800288c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	4619      	mov	r1, r3
 80028a0:	480f      	ldr	r0, [pc, #60]	; (80028e0 <HAL_UART_MspInit+0xa4>)
 80028a2:	f001 ff91 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4809      	ldr	r0, [pc, #36]	; (80028e0 <HAL_UART_MspInit+0xa4>)
 80028bc:	f001 ff84 	bl	80047c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	2025      	movs	r0, #37	; 0x25
 80028c6:	f001 fe06 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ca:	2025      	movs	r0, #37	; 0x25
 80028cc:	f001 fe1f 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010800 	.word	0x40010800

080028e4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_FSMC_MspInit+0x78>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d129      	bne.n	8002954 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_FSMC_MspInit+0x78>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_FSMC_MspInit+0x7c>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4a15      	ldr	r2, [pc, #84]	; (8002960 <HAL_FSMC_MspInit+0x7c>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6153      	str	r3, [r2, #20]
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_FSMC_MspInit+0x7c>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800291e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002922:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	4619      	mov	r1, r3
 8002932:	480c      	ldr	r0, [pc, #48]	; (8002964 <HAL_FSMC_MspInit+0x80>)
 8002934:	f001 ff48 	bl	80047c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002938:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800293c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4619      	mov	r1, r3
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <HAL_FSMC_MspInit+0x84>)
 800294e:	f001 ff3b 	bl	80047c8 <HAL_GPIO_Init>
 8002952:	e000      	b.n	8002956 <HAL_FSMC_MspInit+0x72>
    return;
 8002954:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200002ec 	.word	0x200002ec
 8002960:	40021000 	.word	0x40021000
 8002964:	40011800 	.word	0x40011800
 8002968:	40011400 	.word	0x40011400

0800296c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002974:	f7ff ffb6 	bl	80028e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <HardFault_Handler+0x4>

08002992 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <MemManage_Handler+0x4>

08002998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <BusFault_Handler+0x4>

0800299e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <UsageFault_Handler+0x4>

080029a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029cc:	f000 ff82 	bl	80038d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <EXTI4_IRQHandler+0x2c>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <EXTI4_IRQHandler+0x22>
	{
		ucXPT2046_TouchFlag = 1;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <EXTI4_IRQHandler+0x30>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <EXTI4_IRQHandler+0x2c>)
 80029ec:	2210      	movs	r2, #16
 80029ee:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80029f0:	2010      	movs	r0, #16
 80029f2:	f002 f8c5 	bl	8004b80 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80029f6:	2010      	movs	r0, #16
 80029f8:	f002 f8aa 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40010400 	.word	0x40010400
 8002a04:	200002f4 	.word	0x200002f4

08002a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <USART1_IRQHandler+0x10>)
 8002a0e:	f002 ff3f 	bl	8005890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000025c 	.word	0x2000025c

08002a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <_kill>:

int _kill(int pid, int sig)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a34:	f003 fbe0 	bl	80061f8 <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2216      	movs	r2, #22
 8002a3c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_exit>:

void _exit (int status)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a52:	f04f 31ff 	mov.w	r1, #4294967295
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffe7 	bl	8002a2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a5c:	e7fe      	b.n	8002a5c <_exit+0x12>

08002a5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e00a      	b.n	8002a86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a70:	f3af 8000 	nop.w
 8002a74:	4601      	mov	r1, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	60ba      	str	r2, [r7, #8]
 8002a7c:	b2ca      	uxtb	r2, r1
 8002a7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dbf0      	blt.n	8002a70 <_read+0x12>
	}

	return len;
 8002a8e:	687b      	ldr	r3, [r7, #4]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e009      	b.n	8002abe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	60ba      	str	r2, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbf1      	blt.n	8002aaa <_write+0x12>
	}
	return len;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_close>:

int _close(int file)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	605a      	str	r2, [r3, #4]
	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <_isatty>:

int _isatty(int file)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0c:	2301      	movs	r3, #1
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8002b60:	f003 fb4a 	bl	80061f8 <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
		return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20010000 	.word	0x20010000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	200002f0 	.word	0x200002f0
 8002b98:	20000310 	.word	0x20000310

08002b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <XPT2046_DelayUS>:




static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e00a      	b.n	8002bcc <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	72fb      	strb	r3, [r7, #11]

		while ( uc -- );
 8002bba:	bf00      	nop
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	72fa      	strb	r2, [r7, #11]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1fa      	bne.n	8002bbc <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3f0      	bcc.n	8002bb6 <XPT2046_DelayUS+0xe>

	}

}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8002bea:	2200      	movs	r2, #0
 8002bec:	2104      	movs	r1, #4
 8002bee:	481d      	ldr	r0, [pc, #116]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002bf0:	f001 ff95 	bl	8004b1e <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	481a      	ldr	r0, [pc, #104]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002bfa:	f001 ff90 	bl	8004b1e <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ )
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e027      	b.n	8002c54 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	f1c3 0307 	rsb	r3, r3, #7
 8002c0c:	fa42 f303 	asr.w	r3, r2, r3
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <XPT2046_WriteCMD+0x44>
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	4811      	ldr	r0, [pc, #68]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002c1e:	f001 ff7e 	bl	8004b1e <HAL_GPIO_WritePin>
 8002c22:	e004      	b.n	8002c2e <XPT2046_WriteCMD+0x4e>
 8002c24:	2200      	movs	r2, #0
 8002c26:	2104      	movs	r1, #4
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002c2a:	f001 ff78 	bl	8004b1e <HAL_GPIO_WritePin>

		XPT2046_DelayUS ( 5 );
 8002c2e:	2005      	movs	r0, #5
 8002c30:	f7ff ffba 	bl	8002ba8 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8002c34:	2201      	movs	r2, #1
 8002c36:	2101      	movs	r1, #1
 8002c38:	480a      	ldr	r0, [pc, #40]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002c3a:	f001 ff70 	bl	8004b1e <HAL_GPIO_WritePin>

		XPT2046_DelayUS ( 5 );
 8002c3e:	2005      	movs	r0, #5
 8002c40:	f7ff ffb2 	bl	8002ba8 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002c44:	2200      	movs	r2, #0
 8002c46:	2101      	movs	r1, #1
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <XPT2046_WriteCMD+0x84>)
 8002c4a:	f001 ff68 	bl	8004b1e <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ )
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	d9d4      	bls.n	8002c04 <XPT2046_WriteCMD+0x24>
	}

}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40011800 	.word	0x40011800

08002c68 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	80bb      	strh	r3, [r7, #4]



	macXPT2046_MOSI_0();
 8002c72:	2200      	movs	r2, #0
 8002c74:	2104      	movs	r1, #4
 8002c76:	4819      	ldr	r0, [pc, #100]	; (8002cdc <XPT2046_ReadCMD+0x74>)
 8002c78:	f001 ff51 	bl	8004b1e <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4816      	ldr	r0, [pc, #88]	; (8002cdc <XPT2046_ReadCMD+0x74>)
 8002c82:	f001 ff4c 	bl	8004b1e <HAL_GPIO_WritePin>

	for ( i=0; i<12; i++ )
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e01e      	b.n	8002cca <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4812      	ldr	r0, [pc, #72]	; (8002cdc <XPT2046_ReadCMD+0x74>)
 8002c92:	f001 ff44 	bl	8004b1e <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8002c96:	2108      	movs	r1, #8
 8002c98:	4810      	ldr	r0, [pc, #64]	; (8002cdc <XPT2046_ReadCMD+0x74>)
 8002c9a:	f001 ff29 	bl	8004af0 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << ( 11 - i );
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f1c3 030b 	rsb	r3, r3, #11
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4807      	ldr	r0, [pc, #28]	; (8002cdc <XPT2046_ReadCMD+0x74>)
 8002cc0:	f001 ff2d 	bl	8004b1e <HAL_GPIO_WritePin>
	for ( i=0; i<12; i++ )
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b0b      	cmp	r3, #11
 8002cce:	d9dd      	bls.n	8002c8c <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8002cd0:	88bb      	ldrh	r3, [r7, #4]

}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40011800 	.word	0x40011800

08002ce0 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff77 	bl	8002be0 <XPT2046_WriteCMD>

	return 	XPT2046_ReadCMD ();
 8002cf2:	f7ff ffb9 	bl	8002c68 <XPT2046_ReadCMD>
 8002cf6:	4603      	mov	r3, r0

}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;



	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8002d0a:	2090      	movs	r0, #144	; 0x90
 8002d0c:	f7ff ffe8 	bl	8002ce0 <XPT2046_ReadAdc>
 8002d10:	4603      	mov	r3, r0
 8002d12:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 );
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7ff ff47 	bl	8002ba8 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y );
 8002d1a:	20d0      	movs	r0, #208	; 0xd0
 8002d1c:	f7ff ffe0 	bl	8002ce0 <XPT2046_ReadAdc>
 8002d20:	4603      	mov	r3, r0
 8002d22:	81bb      	strh	r3, [r7, #12]


	* sX_Ad = sX_Ad_Temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	89fa      	ldrh	r2, [r7, #14]
 8002d28:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	89ba      	ldrh	r2, [r7, #12]
 8002d2e:	801a      	strh	r2, [r3, #0]


}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <XPT2046_ReadAdc_Smooth_XY>:
}


#else
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	; 0x48
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2228      	movs	r2, #40	; 0x28
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fa7c 	bl	800624c <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do
	{
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );
 8002d54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d58:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ffce 	bl	8002d00 <XPT2046_ReadAdc_XY>

		sBufferArray [ 0 ] [ ucCount ] = sAD_X;
 8002d64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d68:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	3348      	adds	r3, #72	; 0x48
 8002d70:	443b      	add	r3, r7
 8002d72:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8002d76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d7a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002d7e:	330a      	adds	r3, #10
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	3348      	adds	r3, #72	; 0x48
 8002d84:	443b      	add	r3, r7
 8002d86:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount ++;
 8002d8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8002d94:	2110      	movs	r1, #16
 8002d96:	4871      	ldr	r0, [pc, #452]	; (8002f5c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002d98:	f001 feaa 	bl	8004af0 <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002da2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	d9d4      	bls.n	8002d54 <XPT2046_ReadAdc_Smooth_XY+0x1c>


	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8002daa:	2110      	movs	r1, #16
 8002dac:	486b      	ldr	r0, [pc, #428]	; (8002f5c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002dae:	f001 fe9f 	bl	8004af0 <HAL_GPIO_ReadPin>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )
 8002dbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	f040 80c4 	bne.w	8002f50 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8002dc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];
 8002dd2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34

		for ( i = 1; i < 10; i ++ )
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002de2:	e02b      	b.n	8002e3c <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8002de4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	3348      	adds	r3, #72	; 0x48
 8002dec:	443b      	add	r3, r7
 8002dee:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df6:	4293      	cmp	r3, r2
 8002df8:	dd08      	ble.n	8002e0c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8002dfa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	3348      	adds	r3, #72	; 0x48
 8002e02:	443b      	add	r3, r7
 8002e04:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
 8002e0a:	e012      	b.n	8002e32 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8002e0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	3348      	adds	r3, #72	; 0x48
 8002e14:	443b      	add	r3, r7
 8002e16:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	da07      	bge.n	8002e32 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8002e22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	3348      	adds	r3, #72	; 0x48
 8002e2a:	443b      	add	r3, r7
 8002e2c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8002e32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e36:	3301      	adds	r3, #1
 8002e38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d9cf      	bls.n	8002de4 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for ( i = 1; i < 10; i ++ )
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e4a:	e02f      	b.n	8002eac <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8002e4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e50:	330a      	adds	r3, #10
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	3348      	adds	r3, #72	; 0x48
 8002e56:	443b      	add	r3, r7
 8002e58:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	4293      	cmp	r3, r2
 8002e62:	dd09      	ble.n	8002e78 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8002e64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e68:	330a      	adds	r3, #10
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	3348      	adds	r3, #72	; 0x48
 8002e6e:	443b      	add	r3, r7
 8002e70:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e76:	e014      	b.n	8002ea2 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8002e78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e7c:	330a      	adds	r3, #10
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	3348      	adds	r3, #72	; 0x48
 8002e82:	443b      	add	r3, r7
 8002e84:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	da08      	bge.n	8002ea2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8002e90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e94:	330a      	adds	r3, #10
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3348      	adds	r3, #72	; 0x48
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8002ea2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002eac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d9cb      	bls.n	8002e4c <XPT2046_ReadAdc_Smooth_XY+0x114>

		}


		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8002eb4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ed0:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002ed2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8002ed6:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002ed8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002edc:	4413      	add	r3, r2
 8002ede:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002eee:	441a      	add	r2, r3
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8002f00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002f10:	4413      	add	r3, r2
 8002f12:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002f16:	4413      	add	r3, r2
 8002f18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002f1c:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8002f1e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8002f22:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8002f24:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002f28:	4413      	add	r3, r2
 8002f2a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002f2e:	4413      	add	r3, r2
 8002f30:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002f34:	4413      	add	r3, r2
 8002f36:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002f3a:	441a      	add	r2, r3
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	805a      	strh	r2, [r3, #2]


		return 1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <XPT2046_ReadAdc_Smooth_XY+0x21a>


	}


	return 0;
 8002f50:	2300      	movs	r3, #0


}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3748      	adds	r7, #72	; 0x48
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40011800 	.word	0x40011800
 8002f60:	200002f4 	.word	0x200002f4

08002f64 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	3204      	adds	r2, #4
 8002f86:	8852      	ldrh	r2, [r2, #2]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	8852      	ldrh	r2, [r2, #2]
 8002f90:	1a8a      	subs	r2, r1, r2
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
	                                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	1acb      	subs	r3, r1, r3
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	8849      	ldrh	r1, [r1, #2]
 8002faa:	4608      	mov	r0, r1
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	3108      	adds	r1, #8
 8002fb0:	8849      	ldrh	r1, [r1, #2]
 8002fb2:	1a41      	subs	r1, r0, r1
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fa8e 	bl	80004dc <__aeabi_i2d>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


	if (  pCalibrationFactor -> Divider == 0  )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fd52 	bl	8000a80 <__aeabi_dcmpeq>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
 8002fe6:	e145      	b.n	8003274 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	3204      	adds	r2, #4
 8002ffa:	8852      	ldrh	r2, [r2, #2]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	3208      	adds	r2, #8
 8003002:	8852      	ldrh	r2, [r2, #2]
 8003004:	1a8a      	subs	r2, r1, r2
 8003006:	fb03 f202 	mul.w	r2, r3, r2
		                            ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3304      	adds	r3, #4
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3308      	adds	r3, #8
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	1acb      	subs	r3, r1, r3
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	8849      	ldrh	r1, [r1, #2]
 800301e:	4608      	mov	r0, r1
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	3108      	adds	r1, #8
 8003024:	8849      	ldrh	r1, [r1, #2]
 8003026:	1a41      	subs	r1, r0, r1
 8003028:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fa54 	bl	80004dc <__aeabi_i2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3308      	adds	r3, #8
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	3204      	adds	r2, #4
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	4611      	mov	r1, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	3208      	adds	r2, #8
 8003058:	8812      	ldrh	r2, [r2, #0]
 800305a:	1a8a      	subs	r2, r1, r2
 800305c:	fb03 f202 	mul.w	r2, r3, r2
		                            ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3308      	adds	r3, #8
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	1acb      	subs	r3, r1, r3
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	3104      	adds	r1, #4
 8003072:	8809      	ldrh	r1, [r1, #0]
 8003074:	4608      	mov	r0, r1
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	3108      	adds	r1, #8
 800307a:	8809      	ldrh	r1, [r1, #0]
 800307c:	1a41      	subs	r1, r0, r1
 800307e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa29 	bl	80004dc <__aeabi_i2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3308      	adds	r3, #8
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3304      	adds	r3, #4
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3304      	adds	r3, #4
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3308      	adds	r3, #8
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	8852      	ldrh	r2, [r2, #2]
 80030be:	fb03 f202 	mul.w	r2, r3, r2
		                            ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3308      	adds	r3, #8
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	fb03 f101 	mul.w	r1, r3, r1
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3308      	adds	r3, #8
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1acb      	subs	r3, r1, r3
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	3104      	adds	r1, #4
 80030e8:	8849      	ldrh	r1, [r1, #2]
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80030ee:	441a      	add	r2, r3
		                            ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3304      	adds	r3, #4
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	fb03 f101 	mul.w	r1, r3, r1
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3304      	adds	r3, #4
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	fb00 f303 	mul.w	r3, r0, r3
 8003110:	1acb      	subs	r3, r1, r3
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	3108      	adds	r1, #8
 8003116:	8849      	ldrh	r1, [r1, #2]
 8003118:	fb01 f303 	mul.w	r3, r1, r3
		                            ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 800311c:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f9dc 	bl	80004dc <__aeabi_i2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	885b      	ldrh	r3, [r3, #2]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3308      	adds	r3, #8
 8003138:	885b      	ldrh	r3, [r3, #2]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	3204      	adds	r2, #4
 8003140:	8852      	ldrh	r2, [r2, #2]
 8003142:	4611      	mov	r1, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	3208      	adds	r2, #8
 8003148:	8852      	ldrh	r2, [r2, #2]
 800314a:	1a8a      	subs	r2, r1, r2
 800314c:	fb03 f202 	mul.w	r2, r3, r2
		                            ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3304      	adds	r3, #4
 8003154:	885b      	ldrh	r3, [r3, #2]
 8003156:	4619      	mov	r1, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3308      	adds	r3, #8
 800315c:	885b      	ldrh	r3, [r3, #2]
 800315e:	1acb      	subs	r3, r1, r3
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	8849      	ldrh	r1, [r1, #2]
 8003164:	4608      	mov	r0, r1
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	3108      	adds	r1, #8
 800316a:	8849      	ldrh	r1, [r1, #2]
 800316c:	1a41      	subs	r1, r0, r1
 800316e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9b1 	bl	80004dc <__aeabi_i2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3308      	adds	r3, #8
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	3204      	adds	r2, #4
 8003196:	8852      	ldrh	r2, [r2, #2]
 8003198:	4611      	mov	r1, r2
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	3208      	adds	r2, #8
 800319e:	8852      	ldrh	r2, [r2, #2]
 80031a0:	1a8a      	subs	r2, r1, r2
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
		                            ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	885b      	ldrh	r3, [r3, #2]
 80031aa:	4619      	mov	r1, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3308      	adds	r3, #8
 80031b0:	885b      	ldrh	r3, [r3, #2]
 80031b2:	1acb      	subs	r3, r1, r3
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	3104      	adds	r1, #4
 80031b8:	8809      	ldrh	r1, [r1, #0]
 80031ba:	4608      	mov	r0, r1
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	3108      	adds	r1, #8
 80031c0:	8809      	ldrh	r1, [r1, #0]
 80031c2:	1a41      	subs	r1, r0, r1
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f986 	bl	80004dc <__aeabi_i2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	e9c1 2308 	strd	r2, r3, [r1, #32]


		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3308      	adds	r3, #8
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3304      	adds	r3, #4
 80031e6:	885b      	ldrh	r3, [r3, #2]
 80031e8:	fb03 f202 	mul.w	r2, r3, r2
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3304      	adds	r3, #4
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3308      	adds	r3, #8
 80031f8:	885b      	ldrh	r3, [r3, #2]
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	8852      	ldrh	r2, [r2, #2]
 8003204:	fb03 f202 	mul.w	r2, r3, r2
		                            ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3308      	adds	r3, #8
 8003212:	885b      	ldrh	r3, [r3, #2]
 8003214:	fb03 f101 	mul.w	r1, r3, r1
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3308      	adds	r3, #8
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	885b      	ldrh	r3, [r3, #2]
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	1acb      	subs	r3, r1, r3
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	3104      	adds	r1, #4
 800322e:	8849      	ldrh	r1, [r1, #2]
 8003230:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003234:	441a      	add	r2, r3
		                            ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3304      	adds	r3, #4
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	fb03 f101 	mul.w	r1, r3, r1
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3304      	adds	r3, #4
 8003250:	885b      	ldrh	r3, [r3, #2]
 8003252:	fb00 f303 	mul.w	r3, r0, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	3108      	adds	r1, #8
 800325c:	8849      	ldrh	r1, [r1, #2]
 800325e:	fb01 f303 	mul.w	r3, r1, r3
		                            ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003262:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f939 	bl	80004dc <__aeabi_i2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}


	return ucRet;
 8003274:	7dfb      	ldrb	r3, [r7, #23]


}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8003280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003284:	b0a0      	sub	sp, #128	; 0x80
 8003286:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr [ 10 ];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800328e:	2300      	movs	r3, #0
 8003290:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003294:	2300      	movs	r3, #0
 8003296:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800329a:	2300      	movs	r3, #0
 800329c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char * pStr = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	66bb      	str	r3, [r7, #104]	; 0x68

	strType_XPT2046_Calibration CalibrationFactor;


#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 80032a4:	23f0      	movs	r3, #240	; 0xf0
 80032a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 80032aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

#endif



	strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 80032b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 80032be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 80032ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 80032d2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	109b      	asrs	r3, r3, #2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 80032e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	109b      	asrs	r3, r3, #2
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 80032f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 80032fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003302:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;
 8003306:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800330a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


	LCD_GramScan (1 );
 800330e:	2001      	movs	r0, #1
 8003310:	f7fe fb4c 	bl	80019ac <LCD_GramScan>


	for ( i = 0; i < 4; i ++ )
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800331a:	e063      	b.n	80033e4 <XPT2046_Touch_Calibrate+0x164>
	{
		LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 800331c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003320:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003324:	2100      	movs	r1, #0
 8003326:	9100      	str	r1, [sp, #0]
 8003328:	2100      	movs	r1, #0
 800332a:	2000      	movs	r0, #0
 800332c:	f7fe f917 	bl	800155e <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8003330:	4bc4      	ldr	r3, [pc, #784]	; (8003644 <XPT2046_Touch_Calibrate+0x3c4>)
 8003332:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8003334:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003338:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800333a:	f7fc ff75 	bl	8000228 <strlen>
 800333e:	4603      	mov	r3, r0
 8003340:	3b07      	subs	r3, #7
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	1ae3      	subs	r3, r4, r3
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	b298      	uxth	r0, r3
 800334a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	b299      	uxth	r1, r3
 8003352:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800335c:	f7fe fab6 	bl	80018cc <LCD_DrawString_Color>

		sprintf ( cStr, "%d", i + 1 );
 8003360:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800336a:	49b7      	ldr	r1, [pc, #732]	; (8003648 <XPT2046_Touch_Calibrate+0x3c8>)
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fbd5 	bl	8006b1c <siprintf>
		LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8003372:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b298      	uxth	r0, r3
 800337a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b10      	subs	r3, #16
 8003384:	b299      	uxth	r1, r3
 8003386:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800338a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	f7fe fa9b 	bl	80018cc <LCD_DrawString_Color>

		XPT2046_DelayUS ( 100000 );
 8003396:	48ad      	ldr	r0, [pc, #692]	; (800364c <XPT2046_Touch_Calibrate+0x3cc>)
 8003398:	f7ff fc06 	bl	8002ba8 <XPT2046_DelayUS>

		LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );
 800339c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3378      	adds	r3, #120	; 0x78
 80033a4:	443b      	add	r3, r7
 80033a6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80033aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3378      	adds	r3, #120	; 0x78
 80033b2:	443b      	add	r3, r7
 80033b4:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fe fa64 	bl	8001888 <LCD_DrawCross>

		while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );
 80033c0:	bf00      	nop
 80033c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fcb2 	bl	8002d38 <XPT2046_ReadAdc_Smooth_XY>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f3      	beq.n	80033c2 <XPT2046_Touch_Calibrate+0x142>
	for ( i = 0; i < 4; i ++ )
 80033da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033de:	3301      	adds	r3, #1
 80033e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d997      	bls.n	800331c <XPT2046_Touch_Calibrate+0x9c>

	}


	XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;
 80033ec:	463a      	mov	r2, r7
 80033ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80033f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fdb4 	bl	8002f64 <XPT2046_Calculate_CalibrationFactor>

	if ( CalibrationFactor .Divider == 0 ) goto Failure;
 80033fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fd fb3a 	bl	8000a80 <__aeabi_dcmpeq>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8115 	bne.w	800363e <XPT2046_Touch_Calibrate+0x3be>


	usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;
 8003414:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003418:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f85d 	bl	80004dc <__aeabi_i2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f7fd f8c1 	bl	80005b0 <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800343a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f84c 	bl	80004dc <__aeabi_i2d>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4620      	mov	r0, r4
 800344a:	4629      	mov	r1, r5
 800344c:	f7fd f8b0 	bl	80005b0 <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4640      	mov	r0, r8
 8003456:	4649      	mov	r1, r9
 8003458:	f7fc fef4 	bl	8000244 <__adddf3>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003468:	f7fc feec 	bl	8000244 <__adddf3>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003478:	f7fd f9c4 	bl	8000804 <__aeabi_ddiv>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f7fd fb6c 	bl	8000b60 <__aeabi_d2uiz>
 8003488:	4603      	mov	r3, r0
 800348a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;
 800348e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003492:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f820 	bl	80004dc <__aeabi_i2d>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fd f884 	bl	80005b0 <__aeabi_dmul>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4690      	mov	r8, r2
 80034ae:	4699      	mov	r9, r3
 80034b0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f80f 	bl	80004dc <__aeabi_i2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4620      	mov	r0, r4
 80034c4:	4629      	mov	r1, r5
 80034c6:	f7fd f873 	bl	80005b0 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4640      	mov	r0, r8
 80034d0:	4649      	mov	r1, r9
 80034d2:	f7fc feb7 	bl	8000244 <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e2:	f7fc feaf 	bl	8000244 <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034f2:	f7fd f987 	bl	8000804 <__aeabi_ddiv>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7fd fb2f 	bl	8000b60 <__aeabi_d2uiz>
 8003502:	4603      	mov	r3, r0
 8003504:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );
 8003508:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800350c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003510:	429a      	cmp	r2, r3
 8003512:	d906      	bls.n	8003522 <XPT2046_Touch_Calibrate+0x2a2>
 8003514:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003518:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	b29b      	uxth	r3, r3
 8003520:	e005      	b.n	800352e <XPT2046_Touch_Calibrate+0x2ae>
 8003522:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003526:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b29b      	uxth	r3, r3
 800352e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );
 8003532:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003536:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800353a:	429a      	cmp	r2, r3
 800353c:	d906      	bls.n	800354c <XPT2046_Touch_Calibrate+0x2cc>
 800353e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003542:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	e005      	b.n	8003558 <XPT2046_Touch_Calibrate+0x2d8>
 800354c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003550:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	b29b      	uxth	r3, r3
 8003558:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 800355c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003560:	2b0a      	cmp	r3, #10
 8003562:	d879      	bhi.n	8003658 <XPT2046_Touch_Calibrate+0x3d8>
 8003564:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003568:	2b0a      	cmp	r3, #10
 800356a:	d875      	bhi.n	8003658 <XPT2046_Touch_Calibrate+0x3d8>


	strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 800356c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003574:	f7fd f946 	bl	8000804 <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4934      	ldr	r1, [pc, #208]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 800357e:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8003582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003586:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800358a:	f7fd f93b 	bl	8000804 <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	492f      	ldr	r1, [pc, #188]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 8003594:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8003598:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800359c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035a0:	f7fd f930 	bl	8000804 <__aeabi_ddiv>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4929      	ldr	r1, [pc, #164]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 80035aa:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 80035ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035b6:	f7fd f925 	bl	8000804 <__aeabi_ddiv>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4924      	ldr	r1, [pc, #144]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 80035c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 80035c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035cc:	f7fd f91a 	bl	8000804 <__aeabi_ddiv>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	491e      	ldr	r1, [pc, #120]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 80035d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 80035da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035e2:	f7fd f90f 	bl	8000804 <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4919      	ldr	r1, [pc, #100]	; (8003650 <XPT2046_Touch_Calibrate+0x3d0>)
 80035ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


#endif


	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 80035f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80035f8:	2100      	movs	r1, #0
 80035fa:	9100      	str	r1, [sp, #0]
 80035fc:	2100      	movs	r1, #0
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fd ffad 	bl	800155e <LCD_Clear>

	pStr = "Calibrate Succeed";
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <XPT2046_Touch_Calibrate+0x3d4>)
 8003606:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8003608:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800360c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800360e:	f7fc fe0b 	bl	8000228 <strlen>
 8003612:	4603      	mov	r3, r0
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	1ae3      	subs	r3, r4, r3
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	b298      	uxth	r0, r3
 800361c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	b299      	uxth	r1, r3
 8003624:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2300      	movs	r3, #0
 800362c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800362e:	f7fe f94d 	bl	80018cc <LCD_DrawString_Color>

	XPT2046_DelayUS ( 50000 );
 8003632:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003636:	f7ff fab7 	bl	8002ba8 <XPT2046_DelayUS>

	return 1;
 800363a:	2301      	movs	r3, #1
 800363c:	e04b      	b.n	80036d6 <XPT2046_Touch_Calibrate+0x456>
	if ( CalibrationFactor .Divider == 0 ) goto Failure;
 800363e:	bf00      	nop
 8003640:	e00b      	b.n	800365a <XPT2046_Touch_Calibrate+0x3da>
 8003642:	bf00      	nop
 8003644:	080090d4 	.word	0x080090d4
 8003648:	080090ec 	.word	0x080090ec
 800364c:	000186a0 	.word	0x000186a0
 8003650:	20000008 	.word	0x20000008
 8003654:	080090f0 	.word	0x080090f0
	if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 8003658:	bf00      	nop


Failure:

	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 800365a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800365e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003662:	2100      	movs	r1, #0
 8003664:	9100      	str	r1, [sp, #0]
 8003666:	2100      	movs	r1, #0
 8003668:	2000      	movs	r0, #0
 800366a:	f7fd ff78 	bl	800155e <LCD_Clear>

	pStr = "Calibrate fail";
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <XPT2046_Touch_Calibrate+0x460>)
 8003670:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8003672:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003676:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003678:	f7fc fdd6 	bl	8000228 <strlen>
 800367c:	4603      	mov	r3, r0
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1ae3      	subs	r3, r4, r3
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	b298      	uxth	r0, r3
 8003686:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	b299      	uxth	r1, r3
 800368e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003698:	f7fe f918 	bl	80018cc <LCD_DrawString_Color>

	pStr = "try again";
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <XPT2046_Touch_Calibrate+0x464>)
 800369e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );
 80036a0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80036a4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80036a6:	f7fc fdbf 	bl	8000228 <strlen>
 80036aa:	4603      	mov	r3, r0
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1ae3      	subs	r3, r4, r3
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	b298      	uxth	r0, r3
 80036b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3310      	adds	r3, #16
 80036be:	b299      	uxth	r1, r3
 80036c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036ca:	f7fe f8ff 	bl	80018cc <LCD_DrawString_Color>

	XPT2046_DelayUS ( 300000 );
 80036ce:	4806      	ldr	r0, [pc, #24]	; (80036e8 <XPT2046_Touch_Calibrate+0x468>)
 80036d0:	f7ff fa6a 	bl	8002ba8 <XPT2046_DelayUS>

	return 0;
 80036d4:	2300      	movs	r3, #0


}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3778      	adds	r7, #120	; 0x78
 80036da:	46bd      	mov	sp, r7
 80036dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036e0:	08009104 	.word	0x08009104
 80036e4:	08009114 	.word	0x08009114
 80036e8:	000493e0 	.word	0x000493e0

080036ec <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80036ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;


	if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fb19 	bl	8002d38 <XPT2046_ReadAdc_Smooth_XY>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06e      	beq.n	80037ea <XPT2046_Get_TouchedPoint+0xfe>
	{
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f7fc fee1 	bl	80004dc <__aeabi_i2d>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fc ff45 	bl	80005b0 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4690      	mov	r8, r2
 800372c:	4699      	mov	r9, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fed0 	bl	80004dc <__aeabi_i2d>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4620      	mov	r0, r4
 8003742:	4629      	mov	r1, r5
 8003744:	f7fc ff34 	bl	80005b0 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4640      	mov	r0, r8
 800374e:	4649      	mov	r1, r9
 8003750:	f7fc fd78 	bl	8000244 <__adddf3>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003762:	f7fc fd6f 	bl	8000244 <__adddf3>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7fd f9f7 	bl	8000b60 <__aeabi_d2uiz>
 8003772:	4603      	mov	r3, r0
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc feaa 	bl	80004dc <__aeabi_i2d>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4620      	mov	r0, r4
 800378e:	4629      	mov	r1, r5
 8003790:	f7fc ff0e 	bl	80005b0 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4690      	mov	r8, r2
 800379a:	4699      	mov	r9, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fe99 	bl	80004dc <__aeabi_i2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7fc fefd 	bl	80005b0 <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4640      	mov	r0, r8
 80037bc:	4649      	mov	r1, r9
 80037be:	f7fc fd41 	bl	8000244 <__adddf3>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80037d0:	f7fc fd38 	bl	8000244 <__adddf3>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fd f9c0 	bl	8000b60 <__aeabi_d2uiz>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	805a      	strh	r2, [r3, #2]
 80037e8:	e001      	b.n	80037ee <XPT2046_Get_TouchedPoint+0x102>

	}

	else ucRet = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]


}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080037fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037fe:	490d      	ldr	r1, [pc, #52]	; (8003834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003804:	e002      	b.n	800380c <LoopCopyDataInit>

08003806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800380a:	3304      	adds	r3, #4

0800380c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800380c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003810:	d3f9      	bcc.n	8003806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003814:	4c0a      	ldr	r4, [pc, #40]	; (8003840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003818:	e001      	b.n	800381e <LoopFillZerobss>

0800381a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800381a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800381c:	3204      	adds	r2, #4

0800381e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003820:	d3fb      	bcc.n	800381a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003822:	f7ff f9bb 	bl	8002b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003826:	f002 fced 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800382a:	f7fe fbb3 	bl	8001f94 <main>
  bx lr
 800382e:	4770      	bx	lr
  ldr r0, =_sdata
 8003830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003834:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003838:	08009b2c 	.word	0x08009b2c
  ldr r2, =_sbss
 800383c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003840:	2000030c 	.word	0x2000030c

08003844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003844:	e7fe      	b.n	8003844 <ADC1_2_IRQHandler>
	...

08003848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_Init+0x28>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_Init+0x28>)
 8003852:	f043 0310 	orr.w	r3, r3, #16
 8003856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003858:	2003      	movs	r0, #3
 800385a:	f000 fe31 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800385e:	200f      	movs	r0, #15
 8003860:	f000 f808 	bl	8003874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003864:	f7fe ff7c 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40022000 	.word	0x40022000

08003874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_InitTick+0x54>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_InitTick+0x58>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388a:	fbb3 f3f1 	udiv	r3, r3, r1
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fe49 	bl	800452a <HAL_SYSTICK_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e00e      	b.n	80038c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d80a      	bhi.n	80038be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a8:	2200      	movs	r2, #0
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f000 fe11 	bl	80044d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038b4:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <HAL_InitTick+0x5c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000004 	.word	0x20000004
 80038cc:	2000003c 	.word	0x2000003c
 80038d0:	20000038 	.word	0x20000038

080038d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_IncTick+0x1c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_IncTick+0x20>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <HAL_IncTick+0x20>)
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	2000003c 	.word	0x2000003c
 80038f4:	200002f8 	.word	0x200002f8

080038f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return uwTick;
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <HAL_GetTick+0x10>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	200002f8 	.word	0x200002f8

0800390c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff fff0 	bl	80038f8 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d005      	beq.n	8003932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_Delay+0x44>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003932:	bf00      	nop
 8003934:	f7ff ffe0 	bl	80038f8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d8f7      	bhi.n	8003934 <HAL_Delay+0x28>
  {
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000003c 	.word	0x2000003c

08003954 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0ce      	b.n	8003b14 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe ff16 	bl	80027c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fbd7 	bl	800414c <ADC_ConversionStop_Disable>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 80a9 	bne.w	8003b02 <HAL_ADC_Init+0x1ae>
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 80a5 	bne.w	8003b02 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039c0:	f023 0302 	bic.w	r3, r3, #2
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4951      	ldr	r1, [pc, #324]	; (8003b1c <HAL_ADC_Init+0x1c8>)
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d10a      	bne.n	80039f0 <HAL_ADC_Init+0x9c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_Init+0x96>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	e004      	b.n	80039f4 <HAL_ADC_Init+0xa0>
 80039ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039ee:	e001      	b.n	80039f4 <HAL_ADC_Init+0xa0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7b1b      	ldrb	r3, [r3, #12]
 80039fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d003      	beq.n	8003a16 <HAL_ADC_Init+0xc2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_ADC_Init+0xc8>
 8003a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1a:	e000      	b.n	8003a1e <HAL_ADC_Init+0xca>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7d1b      	ldrb	r3, [r3, #20]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d119      	bne.n	8003a60 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	035a      	lsls	r2, r3, #13
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	e00b      	b.n	8003a60 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_ADC_Init+0x1cc>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a90:	d003      	beq.n	8003a9a <HAL_ADC_Init+0x146>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d104      	bne.n	8003aa4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	051b      	lsls	r3, r3, #20
 8003aa2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_ADC_Init+0x1d0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ade:	e018      	b.n	8003b12 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f023 0312 	bic.w	r3, r3, #18
 8003ae8:	f043 0210 	orr.w	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b00:	e007      	b.n	8003b12 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013c00 	.word	0x40013c00
 8003b20:	ffe1f7fd 	.word	0xffe1f7fd
 8003b24:	ff1f0efe 	.word	0xff1f0efe

08003b28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_Start+0x1a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e098      	b.n	8003c74 <HAL_ADC_Start+0x14c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 faa4 	bl	8004098 <ADC_Enable>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 8087 	bne.w	8003c6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <HAL_ADC_Start+0x154>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_Start+0x5e>
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_ADC_Start+0x158>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d026      	beq.n	8003bee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bb0:	e01d      	b.n	8003bee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	; (8003c80 <HAL_ADC_Start+0x158>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_ADC_Start+0xaa>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_ADC_Start+0x154>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10d      	bne.n	8003bee <HAL_ADC_Start+0xc6>
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_ADC_Start+0x158>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f023 0206 	bic.w	r2, r3, #6
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c06:	e002      	b.n	8003c0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0202 	mvn.w	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c2e:	d113      	bne.n	8003c58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_ADC_Start+0x154>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d105      	bne.n	8003c46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_ADC_Start+0x158>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	e00c      	b.n	8003c72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40012800 	.word	0x40012800
 8003c80:	40012400 	.word	0x40012400

08003c84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c9a:	f7ff fe2d 	bl	80038f8 <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0d3      	b.n	8003e6e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d131      	bne.n	8003d38 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d12a      	bne.n	8003d38 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ce2:	e021      	b.n	8003d28 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d01d      	beq.n	8003d28 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <HAL_ADC_PollForConversion+0x7e>
 8003cf2:	f7ff fe01 	bl	80038f8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d212      	bcs.n	8003d28 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f043 0204 	orr.w	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0a2      	b.n	8003e6e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0d6      	beq.n	8003ce4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d36:	e070      	b.n	8003e1a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_ADC_PollForConversion+0x1f4>)
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	2002      	movs	r0, #2
 8003d3e:	f001 fbf9 	bl	8005534 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d42:	4603      	mov	r3, r0
 8003d44:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6919      	ldr	r1, [r3, #16]
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_ADC_PollForConversion+0x1f8>)
 8003d50:	400b      	ands	r3, r1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_ADC_PollForConversion+0x104>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68d9      	ldr	r1, [r3, #12]
 8003d5c:	4b48      	ldr	r3, [pc, #288]	; (8003e80 <HAL_ADC_PollForConversion+0x1fc>)
 8003d5e:	400b      	ands	r3, r1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_ADC_PollForConversion+0x104>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6919      	ldr	r1, [r3, #16]
 8003d6a:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_ADC_PollForConversion+0x200>)
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <HAL_ADC_PollForConversion+0x100>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68d9      	ldr	r1, [r3, #12]
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_ADC_PollForConversion+0x204>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_PollForConversion+0x100>
 8003d80:	2314      	movs	r3, #20
 8003d82:	e020      	b.n	8003dc6 <HAL_ADC_PollForConversion+0x142>
 8003d84:	2329      	movs	r3, #41	; 0x29
 8003d86:	e01e      	b.n	8003dc6 <HAL_ADC_PollForConversion+0x142>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6919      	ldr	r1, [r3, #16]
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_ADC_PollForConversion+0x200>)
 8003d90:	400b      	ands	r3, r1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_ADC_PollForConversion+0x120>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_ADC_PollForConversion+0x204>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_ADC_PollForConversion+0x13c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_ADC_PollForConversion+0x208>)
 8003dac:	400b      	ands	r3, r1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <HAL_ADC_PollForConversion+0x140>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68d9      	ldr	r1, [r3, #12]
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <HAL_ADC_PollForConversion+0x208>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_PollForConversion+0x140>
 8003dc0:	2354      	movs	r3, #84	; 0x54
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADC_PollForConversion+0x142>
 8003dc4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003dcc:	e021      	b.n	8003e12 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d01a      	beq.n	8003e0c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_ADC_PollForConversion+0x168>
 8003ddc:	f7ff fd8c 	bl	80038f8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d20f      	bcs.n	8003e0c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d90b      	bls.n	8003e0c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e030      	b.n	8003e6e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d8d9      	bhi.n	8003dce <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0212 	mvn.w	r2, #18
 8003e22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e3e:	d115      	bne.n	8003e6c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	24924924 	.word	0x24924924
 8003e80:	00924924 	.word	0x00924924
 8003e84:	12492492 	.word	0x12492492
 8003e88:	00492492 	.word	0x00492492
 8003e8c:	00249249 	.word	0x00249249

08003e90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x20>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0dc      	b.n	8004082 <HAL_ADC_ConfigChannel+0x1da>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d81c      	bhi.n	8003f12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3b05      	subs	r3, #5
 8003eea:	221f      	movs	r2, #31
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	4019      	ands	r1, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	3b05      	subs	r3, #5
 8003f04:	fa00 f203 	lsl.w	r2, r0, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f10:	e03c      	b.n	8003f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d81c      	bhi.n	8003f54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	3b23      	subs	r3, #35	; 0x23
 8003f2c:	221f      	movs	r2, #31
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	4019      	ands	r1, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	3b23      	subs	r3, #35	; 0x23
 8003f46:	fa00 f203 	lsl.w	r2, r0, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
 8003f52:	e01b      	b.n	8003f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	3b41      	subs	r3, #65	; 0x41
 8003f66:	221f      	movs	r2, #31
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	4019      	ands	r1, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3b41      	subs	r3, #65	; 0x41
 8003f80:	fa00 f203 	lsl.w	r2, r0, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d91c      	bls.n	8003fce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b1e      	subs	r3, #30
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	4019      	ands	r1, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6898      	ldr	r0, [r3, #8]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3b1e      	subs	r3, #30
 8003fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e019      	b.n	8004002 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6919      	ldr	r1, [r3, #16]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	2207      	movs	r2, #7
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	4019      	ands	r1, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6898      	ldr	r0, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b10      	cmp	r3, #16
 8004008:	d003      	beq.n	8004012 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800400e:	2b11      	cmp	r3, #17
 8004010:	d132      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_ADC_ConfigChannel+0x1e4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d125      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d126      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004038:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b10      	cmp	r3, #16
 8004040:	d11a      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_ADC_ConfigChannel+0x1e8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_ADC_ConfigChannel+0x1ec>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	0c9a      	lsrs	r2, r3, #18
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004058:	e002      	b.n	8004060 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3b01      	subs	r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f9      	bne.n	800405a <HAL_ADC_ConfigChannel+0x1b2>
 8004066:	e007      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40012400 	.word	0x40012400
 8004090:	20000004 	.word	0x20000004
 8004094:	431bde83 	.word	0x431bde83

08004098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d040      	beq.n	8004138 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <ADC_Enable+0xac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <ADC_Enable+0xb0>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	0c9b      	lsrs	r3, r3, #18
 80040d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040d4:	e002      	b.n	80040dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f9      	bne.n	80040d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040e2:	f7ff fc09 	bl	80038f8 <HAL_GetTick>
 80040e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040e8:	e01f      	b.n	800412a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ea:	f7ff fc05 	bl	80038f8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d918      	bls.n	800412a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d011      	beq.n	800412a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e007      	b.n	800413a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d1d8      	bne.n	80040ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000004 	.word	0x20000004
 8004148:	431bde83 	.word	0x431bde83

0800414c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d12e      	bne.n	80041c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004176:	f7ff fbbf 	bl	80038f8 <HAL_GetTick>
 800417a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800417c:	e01b      	b.n	80041b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800417e:	f7ff fbbb 	bl	80038f8 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d914      	bls.n	80041b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d10d      	bne.n	80041b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e007      	b.n	80041c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d0dc      	beq.n	800417e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_ADCEx_Calibration_Start+0x1e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e095      	b.n	800431a <HAL_ADCEx_Calibration_Start+0x14a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ffa8 	bl	800414c <ADC_ConversionStop_Disable>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 8084 	bne.w	8004310 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004210:	f023 0302 	bic.w	r3, r3, #2
 8004214:	f043 0202 	orr.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_ADCEx_Calibration_Start+0x154>)
 800421e:	681c      	ldr	r4, [r3, #0]
 8004220:	2002      	movs	r0, #2
 8004222:	f001 f987 	bl	8005534 <HAL_RCCEx_GetPeriphCLKFreq>
 8004226:	4603      	mov	r3, r0
 8004228:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800422c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800422e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004230:	e002      	b.n	8004238 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b01      	subs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f9      	bne.n	8004232 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ff2a 	bl	8004098 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004254:	f7ff fb50 	bl	80038f8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800425a:	e01b      	b.n	8004294 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800425c:	f7ff fb4c 	bl	80038f8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b0a      	cmp	r3, #10
 8004268:	d914      	bls.n	8004294 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f023 0312 	bic.w	r3, r3, #18
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e042      	b.n	800431a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1dc      	bne.n	800425c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0204 	orr.w	r2, r2, #4
 80042b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80042b2:	f7ff fb21 	bl	80038f8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042b8:	e01b      	b.n	80042f2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80042ba:	f7ff fb1d 	bl	80038f8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b0a      	cmp	r3, #10
 80042c6:	d914      	bls.n	80042f2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	f023 0312 	bic.w	r3, r3, #18
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e013      	b.n	800431a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1dc      	bne.n	80042ba <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f023 0303 	bic.w	r3, r3, #3
 8004308:	f043 0201 	orr.w	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd90      	pop	{r4, r7, pc}
 8004322:	bf00      	nop
 8004324:	20000004 	.word	0x20000004

08004328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <__NVIC_SetPriorityGrouping+0x44>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800435a:	4a04      	ldr	r2, [pc, #16]	; (800436c <__NVIC_SetPriorityGrouping+0x44>)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	60d3      	str	r3, [r2, #12]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <__NVIC_GetPriorityGrouping+0x18>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 0307 	and.w	r3, r3, #7
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	db0b      	blt.n	80043b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	4906      	ldr	r1, [pc, #24]	; (80043c0 <__NVIC_EnableIRQ+0x34>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2001      	movs	r0, #1
 80043ae:	fa00 f202 	lsl.w	r2, r0, r2
 80043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db0a      	blt.n	80043ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	490c      	ldr	r1, [pc, #48]	; (8004410 <__NVIC_SetPriority+0x4c>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ec:	e00a      	b.n	8004404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4908      	ldr	r1, [pc, #32]	; (8004414 <__NVIC_SetPriority+0x50>)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3b04      	subs	r3, #4
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	440b      	add	r3, r1
 8004402:	761a      	strb	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e100 	.word	0xe000e100
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf28      	it	cs
 8004436:	2304      	movcs	r3, #4
 8004438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3304      	adds	r3, #4
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <NVIC_EncodePriority+0x30>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3b03      	subs	r3, #3
 8004446:	e000      	b.n	800444a <NVIC_EncodePriority+0x32>
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43d9      	mvns	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	4313      	orrs	r3, r2
         );
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800448c:	d301      	bcc.n	8004492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <SysTick_Config+0x40>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449a:	210f      	movs	r1, #15
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	f7ff ff90 	bl	80043c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SysTick_Config+0x40>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SysTick_Config+0x40>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	e000e010 	.word	0xe000e010

080044c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff2d 	bl	8004328 <__NVIC_SetPriorityGrouping>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e8:	f7ff ff42 	bl	8004370 <__NVIC_GetPriorityGrouping>
 80044ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f7ff ff90 	bl	8004418 <NVIC_EncodePriority>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff5f 	bl	80043c4 <__NVIC_SetPriority>
}
 8004506:	bf00      	nop
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff35 	bl	800438c <__NVIC_EnableIRQ>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffa2 	bl	800447c <SysTick_Config>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004554:	2b02      	cmp	r3, #2
 8004556:	d008      	beq.n	800456a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2204      	movs	r2, #4
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e020      	b.n	80045ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 020e 	bic.w	r2, r2, #14
 8004578:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d005      	beq.n	80045da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e0d6      	b.n	8004788 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 020e 	bic.w	r2, r2, #14
 80045e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_DMA_Abort_IT+0x1dc>)
 8004602:	429a      	cmp	r2, r3
 8004604:	d958      	bls.n	80046b8 <HAL_DMA_Abort_IT+0x100>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a63      	ldr	r2, [pc, #396]	; (8004798 <HAL_DMA_Abort_IT+0x1e0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04f      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xf8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a61      	ldr	r2, [pc, #388]	; (800479c <HAL_DMA_Abort_IT+0x1e4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d048      	beq.n	80046ac <HAL_DMA_Abort_IT+0xf4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a60      	ldr	r2, [pc, #384]	; (80047a0 <HAL_DMA_Abort_IT+0x1e8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d040      	beq.n	80046a6 <HAL_DMA_Abort_IT+0xee>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5e      	ldr	r2, [pc, #376]	; (80047a4 <HAL_DMA_Abort_IT+0x1ec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d038      	beq.n	80046a0 <HAL_DMA_Abort_IT+0xe8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5d      	ldr	r2, [pc, #372]	; (80047a8 <HAL_DMA_Abort_IT+0x1f0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d030      	beq.n	800469a <HAL_DMA_Abort_IT+0xe2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5b      	ldr	r2, [pc, #364]	; (80047ac <HAL_DMA_Abort_IT+0x1f4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d028      	beq.n	8004694 <HAL_DMA_Abort_IT+0xdc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a53      	ldr	r2, [pc, #332]	; (8004794 <HAL_DMA_Abort_IT+0x1dc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d020      	beq.n	800468e <HAL_DMA_Abort_IT+0xd6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a57      	ldr	r2, [pc, #348]	; (80047b0 <HAL_DMA_Abort_IT+0x1f8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d019      	beq.n	800468a <HAL_DMA_Abort_IT+0xd2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <HAL_DMA_Abort_IT+0x1fc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d012      	beq.n	8004686 <HAL_DMA_Abort_IT+0xce>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a54      	ldr	r2, [pc, #336]	; (80047b8 <HAL_DMA_Abort_IT+0x200>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00a      	beq.n	8004680 <HAL_DMA_Abort_IT+0xc8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a53      	ldr	r2, [pc, #332]	; (80047bc <HAL_DMA_Abort_IT+0x204>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d102      	bne.n	800467a <HAL_DMA_Abort_IT+0xc2>
 8004674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004678:	e01b      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 800467a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467e:	e018      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 8004680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004684:	e015      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 8004686:	2310      	movs	r3, #16
 8004688:	e013      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 800468a:	2301      	movs	r3, #1
 800468c:	e011      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 800468e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004692:	e00e      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 8004694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004698:	e00b      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 800469a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800469e:	e008      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 80046a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a4:	e005      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 80046a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046aa:	e002      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 80046ac:	2310      	movs	r3, #16
 80046ae:	e000      	b.n	80046b2 <HAL_DMA_Abort_IT+0xfa>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4a43      	ldr	r2, [pc, #268]	; (80047c0 <HAL_DMA_Abort_IT+0x208>)
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	e057      	b.n	8004768 <HAL_DMA_Abort_IT+0x1b0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a36      	ldr	r2, [pc, #216]	; (8004798 <HAL_DMA_Abort_IT+0x1e0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d04f      	beq.n	8004762 <HAL_DMA_Abort_IT+0x1aa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a35      	ldr	r2, [pc, #212]	; (800479c <HAL_DMA_Abort_IT+0x1e4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d048      	beq.n	800475e <HAL_DMA_Abort_IT+0x1a6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <HAL_DMA_Abort_IT+0x1e8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d040      	beq.n	8004758 <HAL_DMA_Abort_IT+0x1a0>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a32      	ldr	r2, [pc, #200]	; (80047a4 <HAL_DMA_Abort_IT+0x1ec>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d038      	beq.n	8004752 <HAL_DMA_Abort_IT+0x19a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <HAL_DMA_Abort_IT+0x1f0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d030      	beq.n	800474c <HAL_DMA_Abort_IT+0x194>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <HAL_DMA_Abort_IT+0x1f4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d028      	beq.n	8004746 <HAL_DMA_Abort_IT+0x18e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <HAL_DMA_Abort_IT+0x1dc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d020      	beq.n	8004740 <HAL_DMA_Abort_IT+0x188>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2b      	ldr	r2, [pc, #172]	; (80047b0 <HAL_DMA_Abort_IT+0x1f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d019      	beq.n	800473c <HAL_DMA_Abort_IT+0x184>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <HAL_DMA_Abort_IT+0x1fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d012      	beq.n	8004738 <HAL_DMA_Abort_IT+0x180>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <HAL_DMA_Abort_IT+0x200>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00a      	beq.n	8004732 <HAL_DMA_Abort_IT+0x17a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_DMA_Abort_IT+0x204>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d102      	bne.n	800472c <HAL_DMA_Abort_IT+0x174>
 8004726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800472a:	e01b      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 800472c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004730:	e018      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004736:	e015      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004738:	2310      	movs	r3, #16
 800473a:	e013      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 800473c:	2301      	movs	r3, #1
 800473e:	e011      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004744:	e00e      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004746:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800474a:	e00b      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 800474c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004750:	e008      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004756:	e005      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800475c:	e002      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 800475e:	2310      	movs	r3, #16
 8004760:	e000      	b.n	8004764 <HAL_DMA_Abort_IT+0x1ac>
 8004762:	2301      	movs	r3, #1
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_DMA_Abort_IT+0x20c>)
 8004766:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
    } 
  }
  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40020080 	.word	0x40020080
 8004798:	40020008 	.word	0x40020008
 800479c:	4002001c 	.word	0x4002001c
 80047a0:	40020030 	.word	0x40020030
 80047a4:	40020044 	.word	0x40020044
 80047a8:	40020058 	.word	0x40020058
 80047ac:	4002006c 	.word	0x4002006c
 80047b0:	40020408 	.word	0x40020408
 80047b4:	4002041c 	.word	0x4002041c
 80047b8:	40020430 	.word	0x40020430
 80047bc:	40020444 	.word	0x40020444
 80047c0:	40020400 	.word	0x40020400
 80047c4:	40020000 	.word	0x40020000

080047c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b08b      	sub	sp, #44	; 0x2c
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047da:	e179      	b.n	8004ad0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047dc:	2201      	movs	r2, #1
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8168 	bne.w	8004aca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a96      	ldr	r2, [pc, #600]	; (8004a58 <HAL_GPIO_Init+0x290>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d05e      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
 8004804:	4a94      	ldr	r2, [pc, #592]	; (8004a58 <HAL_GPIO_Init+0x290>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d875      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 800480a:	4a94      	ldr	r2, [pc, #592]	; (8004a5c <HAL_GPIO_Init+0x294>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d058      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
 8004810:	4a92      	ldr	r2, [pc, #584]	; (8004a5c <HAL_GPIO_Init+0x294>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d86f      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 8004816:	4a92      	ldr	r2, [pc, #584]	; (8004a60 <HAL_GPIO_Init+0x298>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d052      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
 800481c:	4a90      	ldr	r2, [pc, #576]	; (8004a60 <HAL_GPIO_Init+0x298>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d869      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 8004822:	4a90      	ldr	r2, [pc, #576]	; (8004a64 <HAL_GPIO_Init+0x29c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d04c      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
 8004828:	4a8e      	ldr	r2, [pc, #568]	; (8004a64 <HAL_GPIO_Init+0x29c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d863      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 800482e:	4a8e      	ldr	r2, [pc, #568]	; (8004a68 <HAL_GPIO_Init+0x2a0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d046      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
 8004834:	4a8c      	ldr	r2, [pc, #560]	; (8004a68 <HAL_GPIO_Init+0x2a0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d85d      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 800483a:	2b12      	cmp	r3, #18
 800483c:	d82a      	bhi.n	8004894 <HAL_GPIO_Init+0xcc>
 800483e:	2b12      	cmp	r3, #18
 8004840:	d859      	bhi.n	80048f6 <HAL_GPIO_Init+0x12e>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <HAL_GPIO_Init+0x80>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	080048c3 	.word	0x080048c3
 800484c:	0800489d 	.word	0x0800489d
 8004850:	080048af 	.word	0x080048af
 8004854:	080048f1 	.word	0x080048f1
 8004858:	080048f7 	.word	0x080048f7
 800485c:	080048f7 	.word	0x080048f7
 8004860:	080048f7 	.word	0x080048f7
 8004864:	080048f7 	.word	0x080048f7
 8004868:	080048f7 	.word	0x080048f7
 800486c:	080048f7 	.word	0x080048f7
 8004870:	080048f7 	.word	0x080048f7
 8004874:	080048f7 	.word	0x080048f7
 8004878:	080048f7 	.word	0x080048f7
 800487c:	080048f7 	.word	0x080048f7
 8004880:	080048f7 	.word	0x080048f7
 8004884:	080048f7 	.word	0x080048f7
 8004888:	080048f7 	.word	0x080048f7
 800488c:	080048a5 	.word	0x080048a5
 8004890:	080048b9 	.word	0x080048b9
 8004894:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_GPIO_Init+0x2a4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800489a:	e02c      	b.n	80048f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	623b      	str	r3, [r7, #32]
          break;
 80048a2:	e029      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	3304      	adds	r3, #4
 80048aa:	623b      	str	r3, [r7, #32]
          break;
 80048ac:	e024      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	3308      	adds	r3, #8
 80048b4:	623b      	str	r3, [r7, #32]
          break;
 80048b6:	e01f      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	330c      	adds	r3, #12
 80048be:	623b      	str	r3, [r7, #32]
          break;
 80048c0:	e01a      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048ca:	2304      	movs	r3, #4
 80048cc:	623b      	str	r3, [r7, #32]
          break;
 80048ce:	e013      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048d8:	2308      	movs	r3, #8
 80048da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	611a      	str	r2, [r3, #16]
          break;
 80048e2:	e009      	b.n	80048f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048e4:	2308      	movs	r3, #8
 80048e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	615a      	str	r2, [r3, #20]
          break;
 80048ee:	e003      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
          break;
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_Init+0x130>
          break;
 80048f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2bff      	cmp	r3, #255	; 0xff
 80048fc:	d801      	bhi.n	8004902 <HAL_GPIO_Init+0x13a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	e001      	b.n	8004906 <HAL_GPIO_Init+0x13e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2bff      	cmp	r3, #255	; 0xff
 800490c:	d802      	bhi.n	8004914 <HAL_GPIO_Init+0x14c>
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	e002      	b.n	800491a <HAL_GPIO_Init+0x152>
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	3b08      	subs	r3, #8
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	210f      	movs	r1, #15
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	401a      	ands	r2, r3
 800492c:	6a39      	ldr	r1, [r7, #32]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80c1 	beq.w	8004aca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004948:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <HAL_GPIO_Init+0x2a8>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	4a48      	ldr	r2, [pc, #288]	; (8004a70 <HAL_GPIO_Init+0x2a8>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6193      	str	r3, [r2, #24]
 8004954:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <HAL_GPIO_Init+0x2a8>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004960:	4a44      	ldr	r2, [pc, #272]	; (8004a74 <HAL_GPIO_Init+0x2ac>)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	3302      	adds	r3, #2
 8004968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	220f      	movs	r2, #15
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <HAL_GPIO_Init+0x2b0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01f      	beq.n	80049cc <HAL_GPIO_Init+0x204>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <HAL_GPIO_Init+0x2b4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d019      	beq.n	80049c8 <HAL_GPIO_Init+0x200>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <HAL_GPIO_Init+0x2b8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <HAL_GPIO_Init+0x1fc>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <HAL_GPIO_Init+0x2bc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00d      	beq.n	80049c0 <HAL_GPIO_Init+0x1f8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a38      	ldr	r2, [pc, #224]	; (8004a88 <HAL_GPIO_Init+0x2c0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <HAL_GPIO_Init+0x1f4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a37      	ldr	r2, [pc, #220]	; (8004a8c <HAL_GPIO_Init+0x2c4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_GPIO_Init+0x1f0>
 80049b4:	2305      	movs	r3, #5
 80049b6:	e00a      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049b8:	2306      	movs	r3, #6
 80049ba:	e008      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049bc:	2304      	movs	r3, #4
 80049be:	e006      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049c0:	2303      	movs	r3, #3
 80049c2:	e004      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e002      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <HAL_GPIO_Init+0x206>
 80049cc:	2300      	movs	r3, #0
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	f002 0203 	and.w	r2, r2, #3
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	4093      	lsls	r3, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80049de:	4925      	ldr	r1, [pc, #148]	; (8004a74 <HAL_GPIO_Init+0x2ac>)
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3302      	adds	r3, #2
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4924      	ldr	r1, [pc, #144]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	e006      	b.n	8004a14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a06:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	4920      	ldr	r1, [pc, #128]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	491a      	ldr	r1, [pc, #104]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d025      	beq.n	8004a94 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4910      	ldr	r1, [pc, #64]	; (8004a90 <HAL_GPIO_Init+0x2c8>)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]
 8004a54:	e025      	b.n	8004aa2 <HAL_GPIO_Init+0x2da>
 8004a56:	bf00      	nop
 8004a58:	10320000 	.word	0x10320000
 8004a5c:	10310000 	.word	0x10310000
 8004a60:	10220000 	.word	0x10220000
 8004a64:	10210000 	.word	0x10210000
 8004a68:	10120000 	.word	0x10120000
 8004a6c:	10110000 	.word	0x10110000
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40010800 	.word	0x40010800
 8004a7c:	40010c00 	.word	0x40010c00
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40011400 	.word	0x40011400
 8004a88:	40011800 	.word	0x40011800
 8004a8c:	40011c00 	.word	0x40011c00
 8004a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a94:	4b15      	ldr	r3, [pc, #84]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	4913      	ldr	r1, [pc, #76]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004aae:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
 8004aba:	e006      	b.n	8004aca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	4909      	ldr	r1, [pc, #36]	; (8004aec <HAL_GPIO_Init+0x324>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	3301      	adds	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f ae7e 	bne.w	80047dc <HAL_GPIO_Init+0x14>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	372c      	adds	r7, #44	; 0x2c
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e001      	b.n	8004b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	807b      	strh	r3, [r7, #2]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b2e:	787b      	ldrb	r3, [r7, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b3a:	e003      	b.n	8004b44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	041a      	lsls	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	611a      	str	r2, [r3, #16]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f806 	bl	8004b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40010400 	.word	0x40010400

08004b80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e272      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8087 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb4:	4b92      	ldr	r3, [pc, #584]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d00c      	beq.n	8004bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bc0:	4b8f      	ldr	r3, [pc, #572]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d112      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x5e>
 8004bcc:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06c      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x12c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d168      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e24c      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x76>
 8004bfc:	4b80      	ldr	r3, [pc, #512]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7f      	ldr	r2, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e02e      	b.n	8004c68 <HAL_RCC_OscConfig+0xd4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x98>
 8004c12:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7a      	ldr	r2, [pc, #488]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b78      	ldr	r3, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a77      	ldr	r2, [pc, #476]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e01d      	b.n	8004c68 <HAL_RCC_OscConfig+0xd4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0xbc>
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a71      	ldr	r2, [pc, #452]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b6f      	ldr	r3, [pc, #444]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a6e      	ldr	r2, [pc, #440]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCC_OscConfig+0xd4>
 8004c50:	4b6b      	ldr	r3, [pc, #428]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6a      	ldr	r2, [pc, #424]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a67      	ldr	r2, [pc, #412]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fe fe42 	bl	80038f8 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fe fe3e 	bl	80038f8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e200      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0xe4>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fe fe2e 	bl	80038f8 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fe fe2a 	bl	80038f8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e1ec      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x10c>
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d063      	beq.n	8004d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b4c      	ldr	r3, [pc, #304]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cda:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d11c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x18c>
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_RCC_OscConfig+0x176>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1c0      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b3d      	ldr	r3, [pc, #244]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4939      	ldr	r1, [pc, #228]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	e03a      	b.n	8004d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7fe fde3 	bl	80038f8 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fe fddf 	bl	80038f8 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1a1      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4927      	ldr	r1, [pc, #156]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	e015      	b.n	8004d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6a:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe fdc2 	bl	80038f8 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d78:	f7fe fdbe 	bl	80038f8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e180      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d03a      	beq.n	8004e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d019      	beq.n	8004dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004daa:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db0:	f7fe fda2 	bl	80038f8 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fe fd9e 	bl	80038f8 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e160      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	f000 fad8 	bl	800538c <RCC_Delay>
 8004ddc:	e01c      	b.n	8004e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de4:	f7fe fd88 	bl	80038f8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dea:	e00f      	b.n	8004e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fe fd84 	bl	80038f8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d908      	bls.n	8004e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e146      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	42420000 	.word	0x42420000
 8004e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0c:	4b92      	ldr	r3, [pc, #584]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e9      	bne.n	8004dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80a6 	beq.w	8004f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	2300      	movs	r3, #0
 8004e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2a:	4b8b      	ldr	r3, [pc, #556]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4a87      	ldr	r2, [pc, #540]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	61d3      	str	r3, [r2, #28]
 8004e42:	4b85      	ldr	r3, [pc, #532]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b82      	ldr	r3, [pc, #520]	; (800505c <HAL_RCC_OscConfig+0x4c8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b7f      	ldr	r3, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0x4c8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7e      	ldr	r2, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x4c8>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe fd45 	bl	80038f8 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe fd41 	bl	80038f8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b64      	cmp	r3, #100	; 0x64
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e103      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b75      	ldr	r3, [pc, #468]	; (800505c <HAL_RCC_OscConfig+0x4c8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x312>
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	4a6e      	ldr	r2, [pc, #440]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6213      	str	r3, [r2, #32]
 8004ea4:	e02d      	b.n	8004f02 <HAL_RCC_OscConfig+0x36e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x334>
 8004eae:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4a69      	ldr	r2, [pc, #420]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6213      	str	r3, [r2, #32]
 8004eba:	4b67      	ldr	r3, [pc, #412]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	4a66      	ldr	r2, [pc, #408]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	6213      	str	r3, [r2, #32]
 8004ec6:	e01c      	b.n	8004f02 <HAL_RCC_OscConfig+0x36e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d10c      	bne.n	8004eea <HAL_RCC_OscConfig+0x356>
 8004ed0:	4b61      	ldr	r3, [pc, #388]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4a60      	ldr	r2, [pc, #384]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	f043 0304 	orr.w	r3, r3, #4
 8004eda:	6213      	str	r3, [r2, #32]
 8004edc:	4b5e      	ldr	r3, [pc, #376]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6213      	str	r3, [r2, #32]
 8004ee8:	e00b      	b.n	8004f02 <HAL_RCC_OscConfig+0x36e>
 8004eea:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4a5a      	ldr	r2, [pc, #360]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	6213      	str	r3, [r2, #32]
 8004ef6:	4b58      	ldr	r3, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	4a57      	ldr	r2, [pc, #348]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	f023 0304 	bic.w	r3, r3, #4
 8004f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d015      	beq.n	8004f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7fe fcf5 	bl	80038f8 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fe fcf1 	bl	80038f8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e0b1      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f28:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ee      	beq.n	8004f12 <HAL_RCC_OscConfig+0x37e>
 8004f34:	e014      	b.n	8004f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f36:	f7fe fcdf 	bl	80038f8 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fe fcdb 	bl	80038f8 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e09b      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f54:	4b40      	ldr	r3, [pc, #256]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ee      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d105      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f66:	4b3c      	ldr	r3, [pc, #240]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8087 	beq.w	800508a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d061      	beq.n	800504c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d146      	bne.n	800501e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f90:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCC_OscConfig+0x4cc>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fe fcaf 	bl	80038f8 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fe fcab 	bl	80038f8 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e06d      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb0:	4b29      	ldr	r3, [pc, #164]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc4:	d108      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4921      	ldr	r1, [pc, #132]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a19      	ldr	r1, [r3, #32]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x4cc>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe fc7f 	bl	80038f8 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe fc7b 	bl	80038f8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e03d      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x46a>
 800501c:	e035      	b.n	800508a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x4cc>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fe fc68 	bl	80038f8 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fe fc64 	bl	80038f8 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e026      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x498>
 800504a:	e01e      	b.n	800508a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e019      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
 8005060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCC_OscConfig+0x500>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	429a      	cmp	r2, r3
 8005076:	d106      	bne.n	8005086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d0      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d910      	bls.n	80050dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b67      	ldr	r3, [pc, #412]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 0207 	bic.w	r2, r3, #7
 80050c2:	4965      	ldr	r1, [pc, #404]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a58      	ldr	r2, [pc, #352]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d040      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d115      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d107      	bne.n	8005166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e073      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005166:	4b3d      	ldr	r3, [pc, #244]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06b      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 0203 	bic.w	r2, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4936      	ldr	r1, [pc, #216]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005188:	f7fe fbb6 	bl	80038f8 <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005190:	f7fe fbb2 	bl	80038f8 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e053      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a6:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 020c 	and.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1eb      	bne.n	8005190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d210      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 0207 	bic.w	r2, r3, #7
 80051ce:	4922      	ldr	r1, [pc, #136]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490a      	ldr	r1, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1c8>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1cc>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1d0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fb14 	bl	8003874 <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40022000 	.word	0x40022000
 800525c:	40021000 	.word	0x40021000
 8005260:	08009730 	.word	0x08009730
 8005264:	20000004 	.word	0x20000004
 8005268:	20000038 	.word	0x20000038

0800526c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b490      	push	{r4, r7}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005272:	4b29      	ldr	r3, [pc, #164]	; (8005318 <HAL_RCC_GetSysClockFreq+0xac>)
 8005274:	1d3c      	adds	r4, r7, #4
 8005276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800527c:	f240 2301 	movw	r3, #513	; 0x201
 8005280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005296:	4b21      	ldr	r3, [pc, #132]	; (800531c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x40>
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x46>
 80052aa:	e02b      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052ac:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052ae:	623b      	str	r3, [r7, #32]
      break;
 80052b0:	e02b      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	0c9b      	lsrs	r3, r3, #18
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	3328      	adds	r3, #40	; 0x28
 80052bc:	443b      	add	r3, r7
 80052be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d012      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <HAL_RCC_GetSysClockFreq+0xb0>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	0c5b      	lsrs	r3, r3, #17
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	3328      	adds	r3, #40	; 0x28
 80052da:	443b      	add	r3, r7
 80052dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80052e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052e6:	fb03 f202 	mul.w	r2, r3, r2
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
 80052f2:	e004      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	623b      	str	r3, [r7, #32]
      break;
 8005302:	e002      	b.n	800530a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005306:	623b      	str	r3, [r7, #32]
      break;
 8005308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530a:	6a3b      	ldr	r3, [r7, #32]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3728      	adds	r7, #40	; 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bc90      	pop	{r4, r7}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	08009120 	.word	0x08009120
 800531c:	40021000 	.word	0x40021000
 8005320:	007a1200 	.word	0x007a1200
 8005324:	003d0900 	.word	0x003d0900

08005328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800532c:	4b02      	ldr	r3, [pc, #8]	; (8005338 <HAL_RCC_GetHCLKFreq+0x10>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	20000004 	.word	0x20000004

0800533c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005340:	f7ff fff2 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000
 8005360:	08009740 	.word	0x08009740

08005364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005368:	f7ff ffde 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	0adb      	lsrs	r3, r3, #11
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	08009740 	.word	0x08009740

0800538c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005394:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <RCC_Delay+0x34>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <RCC_Delay+0x38>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a5b      	lsrs	r3, r3, #9
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053a8:	bf00      	nop
  }
  while (Delay --);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1e5a      	subs	r2, r3, #1
 80053ae:	60fa      	str	r2, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f9      	bne.n	80053a8 <RCC_Delay+0x1c>
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	20000004 	.word	0x20000004
 80053c4:	10624dd3 	.word	0x10624dd3

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d07d      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053e4:	2300      	movs	r3, #0
 80053e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e8:	4b4f      	ldr	r3, [pc, #316]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b4c      	ldr	r3, [pc, #304]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	4a4b      	ldr	r2, [pc, #300]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	61d3      	str	r3, [r2, #28]
 8005400:	4b49      	ldr	r3, [pc, #292]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d118      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800541c:	4b43      	ldr	r3, [pc, #268]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a42      	ldr	r2, [pc, #264]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005426:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005428:	f7fe fa66 	bl	80038f8 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800542e:	e008      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005430:	f7fe fa62 	bl	80038f8 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e06d      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02e      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d027      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800546c:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005476:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800547c:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fe fa31 	bl	80038f8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	e00a      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7fe fa2d 	bl	80038f8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e036      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ee      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4917      	ldr	r1, [pc, #92]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	490b      	ldr	r1, [pc, #44]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4904      	ldr	r1, [pc, #16]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
 8005530:	42420440 	.word	0x42420440

08005534 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b08d      	sub	sp, #52	; 0x34
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800553c:	4b6a      	ldr	r3, [pc, #424]	; (80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800553e:	f107 040c 	add.w	r4, r7, #12
 8005542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005548:	f240 2301 	movw	r3, #513	; 0x201
 800554c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	2300      	movs	r3, #0
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005556:	2300      	movs	r3, #0
 8005558:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	2300      	movs	r3, #0
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	2b0f      	cmp	r3, #15
 8005568:	f200 80b4 	bhi.w	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005653 	.word	0x08005653
 8005578:	080056b9 	.word	0x080056b9
 800557c:	080056d5 	.word	0x080056d5
 8005580:	08005643 	.word	0x08005643
 8005584:	080056d5 	.word	0x080056d5
 8005588:	080056d5 	.word	0x080056d5
 800558c:	080056d5 	.word	0x080056d5
 8005590:	0800564b 	.word	0x0800564b
 8005594:	080056d5 	.word	0x080056d5
 8005598:	080056d5 	.word	0x080056d5
 800559c:	080056d5 	.word	0x080056d5
 80055a0:	080056d5 	.word	0x080056d5
 80055a4:	080056d5 	.word	0x080056d5
 80055a8:	080056d5 	.word	0x080056d5
 80055ac:	080056d5 	.word	0x080056d5
 80055b0:	080055b5 	.word	0x080055b5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80055b4:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055ba:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8088 	beq.w	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	0c9b      	lsrs	r3, r3, #18
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	3330      	adds	r3, #48	; 0x30
 80055d2:	443b      	add	r3, r7
 80055d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80055d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055e4:	4b41      	ldr	r3, [pc, #260]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	0c5b      	lsrs	r3, r3, #17
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	3330      	adds	r3, #48	; 0x30
 80055f0:	443b      	add	r3, r7
 80055f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005602:	4a3b      	ldr	r2, [pc, #236]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	fbb2 f2f3 	udiv	r2, r2, r3
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005612:	e004      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005618:	fb02 f303 	mul.w	r3, r2, r3
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800561e:	4b33      	ldr	r3, [pc, #204]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	d102      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005630:	e052      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005640:	e04a      	b.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005642:	f7ff fe13 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005646:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005648:	e049      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800564a:	f7ff fe0f 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800564e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005650:	e045      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005662:	d108      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
 8005674:	e01f      	b.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d109      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800568e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
 8005694:	e00f      	b.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a0:	d11c      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80056ae:	f24f 4324 	movw	r3, #62500	; 0xf424
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80056b4:	e012      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80056b6:	e011      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80056b8:	f7ff fe54 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	0b9b      	lsrs	r3, r3, #14
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	3301      	adds	r3, #1
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80056d4:	bf00      	nop
 80056d6:	e002      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80056d8:	bf00      	nop
 80056da:	e000      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80056dc:	bf00      	nop
    }
  }
  return (frequency);
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3734      	adds	r7, #52	; 0x34
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd90      	pop	{r4, r7, pc}
 80056e8:	08009130 	.word	0x08009130
 80056ec:	40021000 	.word	0x40021000
 80056f0:	007a1200 	.word	0x007a1200
 80056f4:	003d0900 	.word	0x003d0900
 80056f8:	aaaaaaab 	.word	0xaaaaaaab

080056fc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <HAL_SRAM_Init+0x1c>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005716:	d101      	bne.n	800571c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e038      	b.n	800578e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7fd f91b 	bl	800296c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3308      	adds	r3, #8
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f000 fc83 	bl	800604c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	461a      	mov	r2, r3
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	f000 fce5 	bl	8006120 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6858      	ldr	r0, [r3, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	f000 fd10 	bl	8006188 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	6892      	ldr	r2, [r2, #8]
 8005770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	f041 0101 	orr.w	r1, r1, #1
 8005780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e03f      	b.n	8005828 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fd f83d 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2224      	movs	r2, #36	; 0x24
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fba8 	bl	8005f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	d11d      	bne.n	8005886 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_Receive_IT+0x26>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e016      	b.n	8005888 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_UART_Receive_IT+0x38>
 8005864:	2302      	movs	r3, #2
 8005866:	e00f      	b.n	8005888 <HAL_UART_Receive_IT+0x58>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f9ce 	bl	8005c1e <UART_Start_Receive_IT>
 8005882:	4603      	mov	r3, r0
 8005884:	e000      	b.n	8005888 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_UART_IRQHandler+0x52>
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa7f 	bl	8005dde <UART_Receive_IT>
      return;
 80058e0:	e17b      	b.n	8005bda <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80b1 	beq.w	8005a4c <HAL_UART_IRQHandler+0x1bc>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_UART_IRQHandler+0x70>
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80a6 	beq.w	8005a4c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_UART_IRQHandler+0x90>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	f043 0201 	orr.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_UART_IRQHandler+0xb0>
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 0202 	orr.w	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_UART_IRQHandler+0xd0>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <HAL_UART_IRQHandler+0xfa>
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_UART_IRQHandler+0xee>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0208 	orr.w	r2, r3, #8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 811e 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_UART_IRQHandler+0x11e>
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa18 	bl	8005dde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <HAL_UART_IRQHandler+0x146>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d031      	beq.n	8005a3a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f95a 	bl	8005c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d023      	beq.n	8005a32 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4a76      	ldr	r2, [pc, #472]	; (8005be0 <HAL_UART_IRQHandler+0x350>)
 8005a08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fdd2 	bl	80045b8 <HAL_DMA_Abort_IT>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	e00e      	b.n	8005a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8e3 	bl	8005bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	e00a      	b.n	8005a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8df 	bl	8005bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e006      	b.n	8005a48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8db 	bl	8005bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a46:	e0c3      	b.n	8005bd0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	bf00      	nop
    return;
 8005a4a:	e0c1      	b.n	8005bd0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f040 80a1 	bne.w	8005b98 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 809b 	beq.w	8005b98 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8095 	beq.w	8005b98 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04e      	beq.n	8005b30 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a9c:	8a3b      	ldrh	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8098 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aa8:	8a3a      	ldrh	r2, [r7, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	f080 8092 	bcs.w	8005bd4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8a3a      	ldrh	r2, [r7, #16]
 8005ab4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d02b      	beq.n	8005b18 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ace:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0210 	bic.w	r2, r2, #16
 8005b0c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fd15 	bl	8004542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f86d 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b2e:	e051      	b.n	8005bd4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d047      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005b48:	8a7b      	ldrh	r3, [r7, #18]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d044      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b5c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0210 	bic.w	r2, r2, #16
 8005b8a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b8c:	8a7b      	ldrh	r3, [r7, #18]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f839 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b96:	e01f      	b.n	8005bd8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x324>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8af 	bl	8005d10 <UART_Transmit_IT>
    return;
 8005bb2:	e012      	b.n	8005bda <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <HAL_UART_IRQHandler+0x34a>
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8f0 	bl	8005dae <UART_EndTransmit_IT>
    return;
 8005bce:	e004      	b.n	8005bda <HAL_UART_IRQHandler+0x34a>
    return;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <HAL_UART_IRQHandler+0x34a>
      return;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <HAL_UART_IRQHandler+0x34a>
      return;
 8005bd8:	bf00      	nop
  }
}
 8005bda:	3728      	adds	r7, #40	; 0x28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08005ce9 	.word	0x08005ce9

08005be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0220 	orr.w	r2, r2, #32
 8005c82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0210 	bic.w	r2, r2, #16
 8005cce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff ff77 	bl	8005bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d13e      	bne.n	8005da2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d114      	bne.n	8005d58 <UART_Transmit_IT+0x48>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d110      	bne.n	8005d58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]
 8005d56:	e008      	b.n	8005d6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6211      	str	r1, [r2, #32]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff08 	bl	8005be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b22      	cmp	r3, #34	; 0x22
 8005df0:	f040 8099 	bne.w	8005f26 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d117      	bne.n	8005e2e <UART_Receive_IT+0x50>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d113      	bne.n	8005e2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	1c9a      	adds	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e2c:	e026      	b.n	8005e7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d007      	beq.n	8005e52 <UART_Receive_IT+0x74>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <UART_Receive_IT+0x82>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e008      	b.n	8005e72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d148      	bne.n	8005f22 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0220 	bic.w	r2, r2, #32
 8005e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d123      	bne.n	8005f18 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0210 	bic.w	r2, r2, #16
 8005ee4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d10a      	bne.n	8005f0a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fe79 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 8005f16:	e002      	b.n	8005f1e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fb fdf9 	bl	8001b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e002      	b.n	8005f28 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e000      	b.n	8005f28 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f26:	2302      	movs	r3, #2
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f6a:	f023 030c 	bic.w	r3, r3, #12
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <UART_SetConfig+0x114>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d103      	bne.n	8005fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7ff f9e4 	bl	8005364 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	e002      	b.n	8005fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7ff f9cc 	bl	800533c <HAL_RCC_GetPCLK1Freq>
 8005fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <UART_SetConfig+0x118>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	0119      	lsls	r1, r3, #4
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009a      	lsls	r2, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <UART_SetConfig+0x118>)
 8005fde:	fba3 0302 	umull	r0, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2064      	movs	r0, #100	; 0x64
 8005fe6:	fb00 f303 	mul.w	r3, r0, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <UART_SetConfig+0x118>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffc:	4419      	add	r1, r3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009a      	lsls	r2, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	fbb2 f2f3 	udiv	r2, r2, r3
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <UART_SetConfig+0x118>)
 8006016:	fba3 0302 	umull	r0, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2064      	movs	r0, #100	; 0x64
 800601e:	fb00 f303 	mul.w	r3, r0, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a07      	ldr	r2, [pc, #28]	; (8006048 <UART_SetConfig+0x118>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	440a      	add	r2, r1
 800603a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40013800 	.word	0x40013800
 8006048:	51eb851f 	.word	0x51eb851f

0800604c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	f023 0101 	bic.w	r1, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d102      	bne.n	800607c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006076:	2340      	movs	r3, #64	; 0x40
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e001      	b.n	8006080 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800608c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006092:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006098:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800609e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80060a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80060aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80060b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80060b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80060bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <FSMC_NORSRAM_Init+0xd0>)
 80060dc:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060e4:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80060ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	ea02 0103 	and.w	r1, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4319      	orrs	r1, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	0008fb7f 	.word	0x0008fb7f

08006120 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	431a      	orrs	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	431a      	orrs	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	3b01      	subs	r3, #1
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	431a      	orrs	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	3b02      	subs	r3, #2
 8006166:	061b      	lsls	r3, r3, #24
 8006168:	431a      	orrs	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	4313      	orrs	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	3201      	adds	r2, #1
 8006174:	4319      	orrs	r1, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619c:	d11d      	bne.n	80061da <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	6852      	ldr	r2, [r2, #4]
 80061b2:	0112      	lsls	r2, r2, #4
 80061b4:	4311      	orrs	r1, r2
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	6892      	ldr	r2, [r2, #8]
 80061ba:	0212      	lsls	r2, r2, #8
 80061bc:	4311      	orrs	r1, r2
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	6992      	ldr	r2, [r2, #24]
 80061c2:	4311      	orrs	r1, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	68d2      	ldr	r2, [r2, #12]
 80061c8:	0412      	lsls	r2, r2, #16
 80061ca:	430a      	orrs	r2, r1
 80061cc:	ea43 0102 	orr.w	r1, r3, r2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061d8:	e005      	b.n	80061e6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80061e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	cff00000 	.word	0xcff00000

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000040 	.word	0x20000040

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	2600      	movs	r6, #0
 8006208:	4d0c      	ldr	r5, [pc, #48]	; (800623c <__libc_init_array+0x38>)
 800620a:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	f002 fefc 	bl	8009010 <_init>
 8006218:	2600      	movs	r6, #0
 800621a:	4d0a      	ldr	r5, [pc, #40]	; (8006244 <__libc_init_array+0x40>)
 800621c:	4c0a      	ldr	r4, [pc, #40]	; (8006248 <__libc_init_array+0x44>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08009b24 	.word	0x08009b24
 8006240:	08009b24 	.word	0x08009b24
 8006244:	08009b24 	.word	0x08009b24
 8006248:	08009b28 	.word	0x08009b28

0800624c <memset>:
 800624c:	4603      	mov	r3, r0
 800624e:	4402      	add	r2, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	f803 1b01 	strb.w	r1, [r3], #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <__cvt>:
 800625c:	2b00      	cmp	r3, #0
 800625e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006262:	461f      	mov	r7, r3
 8006264:	bfbb      	ittet	lt
 8006266:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800626a:	461f      	movlt	r7, r3
 800626c:	2300      	movge	r3, #0
 800626e:	232d      	movlt	r3, #45	; 0x2d
 8006270:	b088      	sub	sp, #32
 8006272:	4614      	mov	r4, r2
 8006274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006276:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006278:	7013      	strb	r3, [r2, #0]
 800627a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800627c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006280:	f023 0820 	bic.w	r8, r3, #32
 8006284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006288:	d005      	beq.n	8006296 <__cvt+0x3a>
 800628a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800628e:	d100      	bne.n	8006292 <__cvt+0x36>
 8006290:	3501      	adds	r5, #1
 8006292:	2302      	movs	r3, #2
 8006294:	e000      	b.n	8006298 <__cvt+0x3c>
 8006296:	2303      	movs	r3, #3
 8006298:	aa07      	add	r2, sp, #28
 800629a:	9204      	str	r2, [sp, #16]
 800629c:	aa06      	add	r2, sp, #24
 800629e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062a2:	e9cd 3500 	strd	r3, r5, [sp]
 80062a6:	4622      	mov	r2, r4
 80062a8:	463b      	mov	r3, r7
 80062aa:	f000 fce5 	bl	8006c78 <_dtoa_r>
 80062ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062b2:	4606      	mov	r6, r0
 80062b4:	d102      	bne.n	80062bc <__cvt+0x60>
 80062b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062b8:	07db      	lsls	r3, r3, #31
 80062ba:	d522      	bpl.n	8006302 <__cvt+0xa6>
 80062bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062c0:	eb06 0905 	add.w	r9, r6, r5
 80062c4:	d110      	bne.n	80062e8 <__cvt+0x8c>
 80062c6:	7833      	ldrb	r3, [r6, #0]
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d10a      	bne.n	80062e2 <__cvt+0x86>
 80062cc:	2200      	movs	r2, #0
 80062ce:	2300      	movs	r3, #0
 80062d0:	4620      	mov	r0, r4
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7fa fbd4 	bl	8000a80 <__aeabi_dcmpeq>
 80062d8:	b918      	cbnz	r0, 80062e2 <__cvt+0x86>
 80062da:	f1c5 0501 	rsb	r5, r5, #1
 80062de:	f8ca 5000 	str.w	r5, [sl]
 80062e2:	f8da 3000 	ldr.w	r3, [sl]
 80062e6:	4499      	add	r9, r3
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fbc6 	bl	8000a80 <__aeabi_dcmpeq>
 80062f4:	b108      	cbz	r0, 80062fa <__cvt+0x9e>
 80062f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80062fa:	2230      	movs	r2, #48	; 0x30
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	454b      	cmp	r3, r9
 8006300:	d307      	bcc.n	8006312 <__cvt+0xb6>
 8006302:	4630      	mov	r0, r6
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006308:	1b9b      	subs	r3, r3, r6
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	b008      	add	sp, #32
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	9107      	str	r1, [sp, #28]
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e7f0      	b.n	80062fc <__cvt+0xa0>

0800631a <__exponent>:
 800631a:	4603      	mov	r3, r0
 800631c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800631e:	2900      	cmp	r1, #0
 8006320:	f803 2b02 	strb.w	r2, [r3], #2
 8006324:	bfb6      	itet	lt
 8006326:	222d      	movlt	r2, #45	; 0x2d
 8006328:	222b      	movge	r2, #43	; 0x2b
 800632a:	4249      	neglt	r1, r1
 800632c:	2909      	cmp	r1, #9
 800632e:	7042      	strb	r2, [r0, #1]
 8006330:	dd2b      	ble.n	800638a <__exponent+0x70>
 8006332:	f10d 0407 	add.w	r4, sp, #7
 8006336:	46a4      	mov	ip, r4
 8006338:	270a      	movs	r7, #10
 800633a:	fb91 f6f7 	sdiv	r6, r1, r7
 800633e:	460a      	mov	r2, r1
 8006340:	46a6      	mov	lr, r4
 8006342:	fb07 1516 	mls	r5, r7, r6, r1
 8006346:	2a63      	cmp	r2, #99	; 0x63
 8006348:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800634c:	4631      	mov	r1, r6
 800634e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006356:	dcf0      	bgt.n	800633a <__exponent+0x20>
 8006358:	3130      	adds	r1, #48	; 0x30
 800635a:	f1ae 0502 	sub.w	r5, lr, #2
 800635e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006362:	4629      	mov	r1, r5
 8006364:	1c44      	adds	r4, r0, #1
 8006366:	4561      	cmp	r1, ip
 8006368:	d30a      	bcc.n	8006380 <__exponent+0x66>
 800636a:	f10d 0209 	add.w	r2, sp, #9
 800636e:	eba2 020e 	sub.w	r2, r2, lr
 8006372:	4565      	cmp	r5, ip
 8006374:	bf88      	it	hi
 8006376:	2200      	movhi	r2, #0
 8006378:	4413      	add	r3, r2
 800637a:	1a18      	subs	r0, r3, r0
 800637c:	b003      	add	sp, #12
 800637e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006380:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006384:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006388:	e7ed      	b.n	8006366 <__exponent+0x4c>
 800638a:	2330      	movs	r3, #48	; 0x30
 800638c:	3130      	adds	r1, #48	; 0x30
 800638e:	7083      	strb	r3, [r0, #2]
 8006390:	70c1      	strb	r1, [r0, #3]
 8006392:	1d03      	adds	r3, r0, #4
 8006394:	e7f1      	b.n	800637a <__exponent+0x60>
	...

08006398 <_printf_float>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	b091      	sub	sp, #68	; 0x44
 800639e:	460c      	mov	r4, r1
 80063a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80063a4:	4616      	mov	r6, r2
 80063a6:	461f      	mov	r7, r3
 80063a8:	4605      	mov	r5, r0
 80063aa:	f001 fa53 	bl	8007854 <_localeconv_r>
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	9309      	str	r3, [sp, #36]	; 0x24
 80063b4:	f7f9 ff38 	bl	8000228 <strlen>
 80063b8:	2300      	movs	r3, #0
 80063ba:	930e      	str	r3, [sp, #56]	; 0x38
 80063bc:	f8d8 3000 	ldr.w	r3, [r8]
 80063c0:	900a      	str	r0, [sp, #40]	; 0x28
 80063c2:	3307      	adds	r3, #7
 80063c4:	f023 0307 	bic.w	r3, r3, #7
 80063c8:	f103 0208 	add.w	r2, r3, #8
 80063cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063d0:	f8d4 b000 	ldr.w	fp, [r4]
 80063d4:	f8c8 2000 	str.w	r2, [r8]
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	4640      	mov	r0, r8
 80063f0:	4b9c      	ldr	r3, [pc, #624]	; (8006664 <_printf_float+0x2cc>)
 80063f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f4:	f7fa fb76 	bl	8000ae4 <__aeabi_dcmpun>
 80063f8:	bb70      	cbnz	r0, 8006458 <_printf_float+0xc0>
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	4640      	mov	r0, r8
 8006400:	4b98      	ldr	r3, [pc, #608]	; (8006664 <_printf_float+0x2cc>)
 8006402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006404:	f7fa fb50 	bl	8000aa8 <__aeabi_dcmple>
 8006408:	bb30      	cbnz	r0, 8006458 <_printf_float+0xc0>
 800640a:	2200      	movs	r2, #0
 800640c:	2300      	movs	r3, #0
 800640e:	4640      	mov	r0, r8
 8006410:	4651      	mov	r1, sl
 8006412:	f7fa fb3f 	bl	8000a94 <__aeabi_dcmplt>
 8006416:	b110      	cbz	r0, 800641e <_printf_float+0x86>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641e:	4b92      	ldr	r3, [pc, #584]	; (8006668 <_printf_float+0x2d0>)
 8006420:	4892      	ldr	r0, [pc, #584]	; (800666c <_printf_float+0x2d4>)
 8006422:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006426:	bf94      	ite	ls
 8006428:	4698      	movls	r8, r3
 800642a:	4680      	movhi	r8, r0
 800642c:	2303      	movs	r3, #3
 800642e:	f04f 0a00 	mov.w	sl, #0
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	f02b 0304 	bic.w	r3, fp, #4
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	4633      	mov	r3, r6
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	9700      	str	r7, [sp, #0]
 8006442:	aa0f      	add	r2, sp, #60	; 0x3c
 8006444:	f000 f9d4 	bl	80067f0 <_printf_common>
 8006448:	3001      	adds	r0, #1
 800644a:	f040 8090 	bne.w	800656e <_printf_float+0x1d6>
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	b011      	add	sp, #68	; 0x44
 8006454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	4642      	mov	r2, r8
 800645a:	4653      	mov	r3, sl
 800645c:	4640      	mov	r0, r8
 800645e:	4651      	mov	r1, sl
 8006460:	f7fa fb40 	bl	8000ae4 <__aeabi_dcmpun>
 8006464:	b148      	cbz	r0, 800647a <_printf_float+0xe2>
 8006466:	f1ba 0f00 	cmp.w	sl, #0
 800646a:	bfb8      	it	lt
 800646c:	232d      	movlt	r3, #45	; 0x2d
 800646e:	4880      	ldr	r0, [pc, #512]	; (8006670 <_printf_float+0x2d8>)
 8006470:	bfb8      	it	lt
 8006472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006476:	4b7f      	ldr	r3, [pc, #508]	; (8006674 <_printf_float+0x2dc>)
 8006478:	e7d3      	b.n	8006422 <_printf_float+0x8a>
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	d142      	bne.n	800650a <_printf_float+0x172>
 8006484:	2306      	movs	r3, #6
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	9206      	str	r2, [sp, #24]
 800648c:	aa0e      	add	r2, sp, #56	; 0x38
 800648e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006492:	aa0d      	add	r2, sp, #52	; 0x34
 8006494:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006498:	9203      	str	r2, [sp, #12]
 800649a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800649e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	4642      	mov	r2, r8
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4628      	mov	r0, r5
 80064ac:	4653      	mov	r3, sl
 80064ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80064b0:	f7ff fed4 	bl	800625c <__cvt>
 80064b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064b6:	4680      	mov	r8, r0
 80064b8:	2947      	cmp	r1, #71	; 0x47
 80064ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064bc:	d108      	bne.n	80064d0 <_printf_float+0x138>
 80064be:	1cc8      	adds	r0, r1, #3
 80064c0:	db02      	blt.n	80064c8 <_printf_float+0x130>
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	4299      	cmp	r1, r3
 80064c6:	dd40      	ble.n	800654a <_printf_float+0x1b2>
 80064c8:	f1a9 0902 	sub.w	r9, r9, #2
 80064cc:	fa5f f989 	uxtb.w	r9, r9
 80064d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064d4:	d81f      	bhi.n	8006516 <_printf_float+0x17e>
 80064d6:	464a      	mov	r2, r9
 80064d8:	3901      	subs	r1, #1
 80064da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064de:	910d      	str	r1, [sp, #52]	; 0x34
 80064e0:	f7ff ff1b 	bl	800631a <__exponent>
 80064e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e6:	4682      	mov	sl, r0
 80064e8:	1813      	adds	r3, r2, r0
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	dc02      	bgt.n	80064f6 <_printf_float+0x15e>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	07d2      	lsls	r2, r2, #31
 80064f4:	d501      	bpl.n	80064fa <_printf_float+0x162>
 80064f6:	3301      	adds	r3, #1
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d09b      	beq.n	800643a <_printf_float+0xa2>
 8006502:	232d      	movs	r3, #45	; 0x2d
 8006504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006508:	e797      	b.n	800643a <_printf_float+0xa2>
 800650a:	2947      	cmp	r1, #71	; 0x47
 800650c:	d1bc      	bne.n	8006488 <_printf_float+0xf0>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ba      	bne.n	8006488 <_printf_float+0xf0>
 8006512:	2301      	movs	r3, #1
 8006514:	e7b7      	b.n	8006486 <_printf_float+0xee>
 8006516:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800651a:	d118      	bne.n	800654e <_printf_float+0x1b6>
 800651c:	2900      	cmp	r1, #0
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	dd0b      	ble.n	800653a <_printf_float+0x1a2>
 8006522:	6121      	str	r1, [r4, #16]
 8006524:	b913      	cbnz	r3, 800652c <_printf_float+0x194>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	07d0      	lsls	r0, r2, #31
 800652a:	d502      	bpl.n	8006532 <_printf_float+0x19a>
 800652c:	3301      	adds	r3, #1
 800652e:	440b      	add	r3, r1
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	f04f 0a00 	mov.w	sl, #0
 8006536:	65a1      	str	r1, [r4, #88]	; 0x58
 8006538:	e7df      	b.n	80064fa <_printf_float+0x162>
 800653a:	b913      	cbnz	r3, 8006542 <_printf_float+0x1aa>
 800653c:	6822      	ldr	r2, [r4, #0]
 800653e:	07d2      	lsls	r2, r2, #31
 8006540:	d501      	bpl.n	8006546 <_printf_float+0x1ae>
 8006542:	3302      	adds	r3, #2
 8006544:	e7f4      	b.n	8006530 <_printf_float+0x198>
 8006546:	2301      	movs	r3, #1
 8006548:	e7f2      	b.n	8006530 <_printf_float+0x198>
 800654a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800654e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006550:	4299      	cmp	r1, r3
 8006552:	db05      	blt.n	8006560 <_printf_float+0x1c8>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	6121      	str	r1, [r4, #16]
 8006558:	07d8      	lsls	r0, r3, #31
 800655a:	d5ea      	bpl.n	8006532 <_printf_float+0x19a>
 800655c:	1c4b      	adds	r3, r1, #1
 800655e:	e7e7      	b.n	8006530 <_printf_float+0x198>
 8006560:	2900      	cmp	r1, #0
 8006562:	bfcc      	ite	gt
 8006564:	2201      	movgt	r2, #1
 8006566:	f1c1 0202 	rsble	r2, r1, #2
 800656a:	4413      	add	r3, r2
 800656c:	e7e0      	b.n	8006530 <_printf_float+0x198>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	055a      	lsls	r2, r3, #21
 8006572:	d407      	bmi.n	8006584 <_printf_float+0x1ec>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	4642      	mov	r2, r8
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	d12b      	bne.n	80065da <_printf_float+0x242>
 8006582:	e764      	b.n	800644e <_printf_float+0xb6>
 8006584:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006588:	f240 80dd 	bls.w	8006746 <_printf_float+0x3ae>
 800658c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006590:	2200      	movs	r2, #0
 8006592:	2300      	movs	r3, #0
 8006594:	f7fa fa74 	bl	8000a80 <__aeabi_dcmpeq>
 8006598:	2800      	cmp	r0, #0
 800659a:	d033      	beq.n	8006604 <_printf_float+0x26c>
 800659c:	2301      	movs	r3, #1
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	4a35      	ldr	r2, [pc, #212]	; (8006678 <_printf_float+0x2e0>)
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af51 	beq.w	800644e <_printf_float+0xb6>
 80065ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065b0:	429a      	cmp	r2, r3
 80065b2:	db02      	blt.n	80065ba <_printf_float+0x222>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	07d8      	lsls	r0, r3, #31
 80065b8:	d50f      	bpl.n	80065da <_printf_float+0x242>
 80065ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f af42 	beq.w	800644e <_printf_float+0xb6>
 80065ca:	f04f 0800 	mov.w	r8, #0
 80065ce:	f104 091a 	add.w	r9, r4, #26
 80065d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4543      	cmp	r3, r8
 80065d8:	dc09      	bgt.n	80065ee <_printf_float+0x256>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	079b      	lsls	r3, r3, #30
 80065de:	f100 8102 	bmi.w	80067e6 <_printf_float+0x44e>
 80065e2:	68e0      	ldr	r0, [r4, #12]
 80065e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065e6:	4298      	cmp	r0, r3
 80065e8:	bfb8      	it	lt
 80065ea:	4618      	movlt	r0, r3
 80065ec:	e731      	b.n	8006452 <_printf_float+0xba>
 80065ee:	2301      	movs	r3, #1
 80065f0:	464a      	mov	r2, r9
 80065f2:	4631      	mov	r1, r6
 80065f4:	4628      	mov	r0, r5
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	f43f af28 	beq.w	800644e <_printf_float+0xb6>
 80065fe:	f108 0801 	add.w	r8, r8, #1
 8006602:	e7e6      	b.n	80065d2 <_printf_float+0x23a>
 8006604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc38      	bgt.n	800667c <_printf_float+0x2e4>
 800660a:	2301      	movs	r3, #1
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <_printf_float+0x2e0>)
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f af1a 	beq.w	800644e <_printf_float+0xb6>
 800661a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800661e:	4313      	orrs	r3, r2
 8006620:	d102      	bne.n	8006628 <_printf_float+0x290>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	07d9      	lsls	r1, r3, #31
 8006626:	d5d8      	bpl.n	80065da <_printf_float+0x242>
 8006628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f af0b 	beq.w	800644e <_printf_float+0xb6>
 8006638:	f04f 0900 	mov.w	r9, #0
 800663c:	f104 0a1a 	add.w	sl, r4, #26
 8006640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006642:	425b      	negs	r3, r3
 8006644:	454b      	cmp	r3, r9
 8006646:	dc01      	bgt.n	800664c <_printf_float+0x2b4>
 8006648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800664a:	e794      	b.n	8006576 <_printf_float+0x1de>
 800664c:	2301      	movs	r3, #1
 800664e:	4652      	mov	r2, sl
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f aef9 	beq.w	800644e <_printf_float+0xb6>
 800665c:	f109 0901 	add.w	r9, r9, #1
 8006660:	e7ee      	b.n	8006640 <_printf_float+0x2a8>
 8006662:	bf00      	nop
 8006664:	7fefffff 	.word	0x7fefffff
 8006668:	0800974c 	.word	0x0800974c
 800666c:	08009750 	.word	0x08009750
 8006670:	08009758 	.word	0x08009758
 8006674:	08009754 	.word	0x08009754
 8006678:	0800975c 	.word	0x0800975c
 800667c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800667e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006680:	429a      	cmp	r2, r3
 8006682:	bfa8      	it	ge
 8006684:	461a      	movge	r2, r3
 8006686:	2a00      	cmp	r2, #0
 8006688:	4691      	mov	r9, r2
 800668a:	dc37      	bgt.n	80066fc <_printf_float+0x364>
 800668c:	f04f 0b00 	mov.w	fp, #0
 8006690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006694:	f104 021a 	add.w	r2, r4, #26
 8006698:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800669c:	ebaa 0309 	sub.w	r3, sl, r9
 80066a0:	455b      	cmp	r3, fp
 80066a2:	dc33      	bgt.n	800670c <_printf_float+0x374>
 80066a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066a8:	429a      	cmp	r2, r3
 80066aa:	db3b      	blt.n	8006724 <_printf_float+0x38c>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07da      	lsls	r2, r3, #31
 80066b0:	d438      	bmi.n	8006724 <_printf_float+0x38c>
 80066b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066b6:	eba3 020a 	sub.w	r2, r3, sl
 80066ba:	eba3 0901 	sub.w	r9, r3, r1
 80066be:	4591      	cmp	r9, r2
 80066c0:	bfa8      	it	ge
 80066c2:	4691      	movge	r9, r2
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	dc34      	bgt.n	8006734 <_printf_float+0x39c>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066d2:	f104 0a1a 	add.w	sl, r4, #26
 80066d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066da:	1a9b      	subs	r3, r3, r2
 80066dc:	eba3 0309 	sub.w	r3, r3, r9
 80066e0:	4543      	cmp	r3, r8
 80066e2:	f77f af7a 	ble.w	80065da <_printf_float+0x242>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f aeac 	beq.w	800644e <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	e7ec      	b.n	80066d6 <_printf_float+0x33e>
 80066fc:	4613      	mov	r3, r2
 80066fe:	4631      	mov	r1, r6
 8006700:	4642      	mov	r2, r8
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	d1c0      	bne.n	800668c <_printf_float+0x2f4>
 800670a:	e6a0      	b.n	800644e <_printf_float+0xb6>
 800670c:	2301      	movs	r3, #1
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	920b      	str	r2, [sp, #44]	; 0x2c
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f ae99 	beq.w	800644e <_printf_float+0xb6>
 800671c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800671e:	f10b 0b01 	add.w	fp, fp, #1
 8006722:	e7b9      	b.n	8006698 <_printf_float+0x300>
 8006724:	4631      	mov	r1, r6
 8006726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	d1bf      	bne.n	80066b2 <_printf_float+0x31a>
 8006732:	e68c      	b.n	800644e <_printf_float+0xb6>
 8006734:	464b      	mov	r3, r9
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	eb08 020a 	add.w	r2, r8, sl
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	d1c2      	bne.n	80066ca <_printf_float+0x332>
 8006744:	e683      	b.n	800644e <_printf_float+0xb6>
 8006746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006748:	2a01      	cmp	r2, #1
 800674a:	dc01      	bgt.n	8006750 <_printf_float+0x3b8>
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d537      	bpl.n	80067c0 <_printf_float+0x428>
 8006750:	2301      	movs	r3, #1
 8006752:	4642      	mov	r2, r8
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f ae77 	beq.w	800644e <_printf_float+0xb6>
 8006760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f ae6f 	beq.w	800644e <_printf_float+0xb6>
 8006770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006774:	2200      	movs	r2, #0
 8006776:	2300      	movs	r3, #0
 8006778:	f7fa f982 	bl	8000a80 <__aeabi_dcmpeq>
 800677c:	b9d8      	cbnz	r0, 80067b6 <_printf_float+0x41e>
 800677e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006780:	f108 0201 	add.w	r2, r8, #1
 8006784:	3b01      	subs	r3, #1
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	d10e      	bne.n	80067ae <_printf_float+0x416>
 8006790:	e65d      	b.n	800644e <_printf_float+0xb6>
 8006792:	2301      	movs	r3, #1
 8006794:	464a      	mov	r2, r9
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f ae56 	beq.w	800644e <_printf_float+0xb6>
 80067a2:	f108 0801 	add.w	r8, r8, #1
 80067a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4543      	cmp	r3, r8
 80067ac:	dcf1      	bgt.n	8006792 <_printf_float+0x3fa>
 80067ae:	4653      	mov	r3, sl
 80067b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067b4:	e6e0      	b.n	8006578 <_printf_float+0x1e0>
 80067b6:	f04f 0800 	mov.w	r8, #0
 80067ba:	f104 091a 	add.w	r9, r4, #26
 80067be:	e7f2      	b.n	80067a6 <_printf_float+0x40e>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4642      	mov	r2, r8
 80067c4:	e7df      	b.n	8006786 <_printf_float+0x3ee>
 80067c6:	2301      	movs	r3, #1
 80067c8:	464a      	mov	r2, r9
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae3c 	beq.w	800644e <_printf_float+0xb6>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	68e3      	ldr	r3, [r4, #12]
 80067dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067de:	1a5b      	subs	r3, r3, r1
 80067e0:	4543      	cmp	r3, r8
 80067e2:	dcf0      	bgt.n	80067c6 <_printf_float+0x42e>
 80067e4:	e6fd      	b.n	80065e2 <_printf_float+0x24a>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	f104 0919 	add.w	r9, r4, #25
 80067ee:	e7f4      	b.n	80067da <_printf_float+0x442>

080067f0 <_printf_common>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	4616      	mov	r6, r2
 80067f6:	4699      	mov	r9, r3
 80067f8:	688a      	ldr	r2, [r1, #8]
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	4607      	mov	r7, r0
 80067fe:	4293      	cmp	r3, r2
 8006800:	bfb8      	it	lt
 8006802:	4613      	movlt	r3, r2
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800680a:	460c      	mov	r4, r1
 800680c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006810:	b10a      	cbz	r2, 8006816 <_printf_common+0x26>
 8006812:	3301      	adds	r3, #1
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	0699      	lsls	r1, r3, #26
 800681a:	bf42      	ittt	mi
 800681c:	6833      	ldrmi	r3, [r6, #0]
 800681e:	3302      	addmi	r3, #2
 8006820:	6033      	strmi	r3, [r6, #0]
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	f015 0506 	ands.w	r5, r5, #6
 8006828:	d106      	bne.n	8006838 <_printf_common+0x48>
 800682a:	f104 0a19 	add.w	sl, r4, #25
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	6832      	ldr	r2, [r6, #0]
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc28      	bgt.n	800688a <_printf_common+0x9a>
 8006838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800683c:	1e13      	subs	r3, r2, #0
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	bf18      	it	ne
 8006842:	2301      	movne	r3, #1
 8006844:	0692      	lsls	r2, r2, #26
 8006846:	d42d      	bmi.n	80068a4 <_printf_common+0xb4>
 8006848:	4649      	mov	r1, r9
 800684a:	4638      	mov	r0, r7
 800684c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006850:	47c0      	blx	r8
 8006852:	3001      	adds	r0, #1
 8006854:	d020      	beq.n	8006898 <_printf_common+0xa8>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	68e5      	ldr	r5, [r4, #12]
 800685a:	f003 0306 	and.w	r3, r3, #6
 800685e:	2b04      	cmp	r3, #4
 8006860:	bf18      	it	ne
 8006862:	2500      	movne	r5, #0
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	f04f 0600 	mov.w	r6, #0
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	bf08      	it	eq
 800686e:	1aad      	subeq	r5, r5, r2
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	bf08      	it	eq
 8006874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006878:	4293      	cmp	r3, r2
 800687a:	bfc4      	itt	gt
 800687c:	1a9b      	subgt	r3, r3, r2
 800687e:	18ed      	addgt	r5, r5, r3
 8006880:	341a      	adds	r4, #26
 8006882:	42b5      	cmp	r5, r6
 8006884:	d11a      	bne.n	80068bc <_printf_common+0xcc>
 8006886:	2000      	movs	r0, #0
 8006888:	e008      	b.n	800689c <_printf_common+0xac>
 800688a:	2301      	movs	r3, #1
 800688c:	4652      	mov	r2, sl
 800688e:	4649      	mov	r1, r9
 8006890:	4638      	mov	r0, r7
 8006892:	47c0      	blx	r8
 8006894:	3001      	adds	r0, #1
 8006896:	d103      	bne.n	80068a0 <_printf_common+0xb0>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	3501      	adds	r5, #1
 80068a2:	e7c4      	b.n	800682e <_printf_common+0x3e>
 80068a4:	2030      	movs	r0, #48	; 0x30
 80068a6:	18e1      	adds	r1, r4, r3
 80068a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b2:	4422      	add	r2, r4
 80068b4:	3302      	adds	r3, #2
 80068b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ba:	e7c5      	b.n	8006848 <_printf_common+0x58>
 80068bc:	2301      	movs	r3, #1
 80068be:	4622      	mov	r2, r4
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d0e6      	beq.n	8006898 <_printf_common+0xa8>
 80068ca:	3601      	adds	r6, #1
 80068cc:	e7d9      	b.n	8006882 <_printf_common+0x92>
	...

080068d0 <_printf_i>:
 80068d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	7e0f      	ldrb	r7, [r1, #24]
 80068d6:	4691      	mov	r9, r2
 80068d8:	2f78      	cmp	r7, #120	; 0x78
 80068da:	4680      	mov	r8, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	469a      	mov	sl, r3
 80068e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068e6:	d807      	bhi.n	80068f8 <_printf_i+0x28>
 80068e8:	2f62      	cmp	r7, #98	; 0x62
 80068ea:	d80a      	bhi.n	8006902 <_printf_i+0x32>
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	f000 80d9 	beq.w	8006aa4 <_printf_i+0x1d4>
 80068f2:	2f58      	cmp	r7, #88	; 0x58
 80068f4:	f000 80a4 	beq.w	8006a40 <_printf_i+0x170>
 80068f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006900:	e03a      	b.n	8006978 <_printf_i+0xa8>
 8006902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006906:	2b15      	cmp	r3, #21
 8006908:	d8f6      	bhi.n	80068f8 <_printf_i+0x28>
 800690a:	a101      	add	r1, pc, #4	; (adr r1, 8006910 <_printf_i+0x40>)
 800690c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006910:	08006969 	.word	0x08006969
 8006914:	0800697d 	.word	0x0800697d
 8006918:	080068f9 	.word	0x080068f9
 800691c:	080068f9 	.word	0x080068f9
 8006920:	080068f9 	.word	0x080068f9
 8006924:	080068f9 	.word	0x080068f9
 8006928:	0800697d 	.word	0x0800697d
 800692c:	080068f9 	.word	0x080068f9
 8006930:	080068f9 	.word	0x080068f9
 8006934:	080068f9 	.word	0x080068f9
 8006938:	080068f9 	.word	0x080068f9
 800693c:	08006a8b 	.word	0x08006a8b
 8006940:	080069ad 	.word	0x080069ad
 8006944:	08006a6d 	.word	0x08006a6d
 8006948:	080068f9 	.word	0x080068f9
 800694c:	080068f9 	.word	0x080068f9
 8006950:	08006aad 	.word	0x08006aad
 8006954:	080068f9 	.word	0x080068f9
 8006958:	080069ad 	.word	0x080069ad
 800695c:	080068f9 	.word	0x080068f9
 8006960:	080068f9 	.word	0x080068f9
 8006964:	08006a75 	.word	0x08006a75
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	602a      	str	r2, [r5, #0]
 8006970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006978:	2301      	movs	r3, #1
 800697a:	e0a4      	b.n	8006ac6 <_printf_i+0x1f6>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	6829      	ldr	r1, [r5, #0]
 8006980:	0606      	lsls	r6, r0, #24
 8006982:	f101 0304 	add.w	r3, r1, #4
 8006986:	d50a      	bpl.n	800699e <_printf_i+0xce>
 8006988:	680e      	ldr	r6, [r1, #0]
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	2e00      	cmp	r6, #0
 800698e:	da03      	bge.n	8006998 <_printf_i+0xc8>
 8006990:	232d      	movs	r3, #45	; 0x2d
 8006992:	4276      	negs	r6, r6
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006998:	230a      	movs	r3, #10
 800699a:	485e      	ldr	r0, [pc, #376]	; (8006b14 <_printf_i+0x244>)
 800699c:	e019      	b.n	80069d2 <_printf_i+0x102>
 800699e:	680e      	ldr	r6, [r1, #0]
 80069a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	bf18      	it	ne
 80069a8:	b236      	sxthne	r6, r6
 80069aa:	e7ef      	b.n	800698c <_printf_i+0xbc>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	6029      	str	r1, [r5, #0]
 80069b4:	0601      	lsls	r1, r0, #24
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0xec>
 80069b8:	681e      	ldr	r6, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0xf2>
 80069bc:	0646      	lsls	r6, r0, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0xe8>
 80069c0:	881e      	ldrh	r6, [r3, #0]
 80069c2:	2f6f      	cmp	r7, #111	; 0x6f
 80069c4:	bf0c      	ite	eq
 80069c6:	2308      	moveq	r3, #8
 80069c8:	230a      	movne	r3, #10
 80069ca:	4852      	ldr	r0, [pc, #328]	; (8006b14 <_printf_i+0x244>)
 80069cc:	2100      	movs	r1, #0
 80069ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069d2:	6865      	ldr	r5, [r4, #4]
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	bfa8      	it	ge
 80069d8:	6821      	ldrge	r1, [r4, #0]
 80069da:	60a5      	str	r5, [r4, #8]
 80069dc:	bfa4      	itt	ge
 80069de:	f021 0104 	bicge.w	r1, r1, #4
 80069e2:	6021      	strge	r1, [r4, #0]
 80069e4:	b90e      	cbnz	r6, 80069ea <_printf_i+0x11a>
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	d04d      	beq.n	8006a86 <_printf_i+0x1b6>
 80069ea:	4615      	mov	r5, r2
 80069ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80069f0:	fb03 6711 	mls	r7, r3, r1, r6
 80069f4:	5dc7      	ldrb	r7, [r0, r7]
 80069f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069fa:	4637      	mov	r7, r6
 80069fc:	42bb      	cmp	r3, r7
 80069fe:	460e      	mov	r6, r1
 8006a00:	d9f4      	bls.n	80069ec <_printf_i+0x11c>
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d10b      	bne.n	8006a1e <_printf_i+0x14e>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	07de      	lsls	r6, r3, #31
 8006a0a:	d508      	bpl.n	8006a1e <_printf_i+0x14e>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	6861      	ldr	r1, [r4, #4]
 8006a10:	4299      	cmp	r1, r3
 8006a12:	bfde      	ittt	le
 8006a14:	2330      	movle	r3, #48	; 0x30
 8006a16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a1e:	1b52      	subs	r2, r2, r5
 8006a20:	6122      	str	r2, [r4, #16]
 8006a22:	464b      	mov	r3, r9
 8006a24:	4621      	mov	r1, r4
 8006a26:	4640      	mov	r0, r8
 8006a28:	f8cd a000 	str.w	sl, [sp]
 8006a2c:	aa03      	add	r2, sp, #12
 8006a2e:	f7ff fedf 	bl	80067f0 <_printf_common>
 8006a32:	3001      	adds	r0, #1
 8006a34:	d14c      	bne.n	8006ad0 <_printf_i+0x200>
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3a:	b004      	add	sp, #16
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	4834      	ldr	r0, [pc, #208]	; (8006b14 <_printf_i+0x244>)
 8006a42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a46:	6829      	ldr	r1, [r5, #0]
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a4e:	6029      	str	r1, [r5, #0]
 8006a50:	061d      	lsls	r5, r3, #24
 8006a52:	d514      	bpl.n	8006a7e <_printf_i+0x1ae>
 8006a54:	07df      	lsls	r7, r3, #31
 8006a56:	bf44      	itt	mi
 8006a58:	f043 0320 	orrmi.w	r3, r3, #32
 8006a5c:	6023      	strmi	r3, [r4, #0]
 8006a5e:	b91e      	cbnz	r6, 8006a68 <_printf_i+0x198>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	f023 0320 	bic.w	r3, r3, #32
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	2310      	movs	r3, #16
 8006a6a:	e7af      	b.n	80069cc <_printf_i+0xfc>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	f043 0320 	orr.w	r3, r3, #32
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	2378      	movs	r3, #120	; 0x78
 8006a76:	4828      	ldr	r0, [pc, #160]	; (8006b18 <_printf_i+0x248>)
 8006a78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a7c:	e7e3      	b.n	8006a46 <_printf_i+0x176>
 8006a7e:	0659      	lsls	r1, r3, #25
 8006a80:	bf48      	it	mi
 8006a82:	b2b6      	uxthmi	r6, r6
 8006a84:	e7e6      	b.n	8006a54 <_printf_i+0x184>
 8006a86:	4615      	mov	r5, r2
 8006a88:	e7bb      	b.n	8006a02 <_printf_i+0x132>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	6826      	ldr	r6, [r4, #0]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6961      	ldr	r1, [r4, #20]
 8006a92:	6028      	str	r0, [r5, #0]
 8006a94:	0635      	lsls	r5, r6, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	d501      	bpl.n	8006a9e <_printf_i+0x1ce>
 8006a9a:	6019      	str	r1, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <_printf_i+0x1d4>
 8006a9e:	0670      	lsls	r0, r6, #25
 8006aa0:	d5fb      	bpl.n	8006a9a <_printf_i+0x1ca>
 8006aa2:	8019      	strh	r1, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4615      	mov	r5, r2
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	e7ba      	b.n	8006a22 <_printf_i+0x152>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	602a      	str	r2, [r5, #0]
 8006ab4:	681d      	ldr	r5, [r3, #0]
 8006ab6:	6862      	ldr	r2, [r4, #4]
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fed7 	bl	800786c <memchr>
 8006abe:	b108      	cbz	r0, 8006ac4 <_printf_i+0x1f4>
 8006ac0:	1b40      	subs	r0, r0, r5
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ace:	e7a8      	b.n	8006a22 <_printf_i+0x152>
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	47d0      	blx	sl
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0ab      	beq.n	8006a36 <_printf_i+0x166>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	079b      	lsls	r3, r3, #30
 8006ae2:	d413      	bmi.n	8006b0c <_printf_i+0x23c>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e7a4      	b.n	8006a3a <_printf_i+0x16a>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4632      	mov	r2, r6
 8006af4:	4649      	mov	r1, r9
 8006af6:	4640      	mov	r0, r8
 8006af8:	47d0      	blx	sl
 8006afa:	3001      	adds	r0, #1
 8006afc:	d09b      	beq.n	8006a36 <_printf_i+0x166>
 8006afe:	3501      	adds	r5, #1
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	9903      	ldr	r1, [sp, #12]
 8006b04:	1a5b      	subs	r3, r3, r1
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf2      	bgt.n	8006af0 <_printf_i+0x220>
 8006b0a:	e7eb      	b.n	8006ae4 <_printf_i+0x214>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	f104 0619 	add.w	r6, r4, #25
 8006b12:	e7f5      	b.n	8006b00 <_printf_i+0x230>
 8006b14:	0800975e 	.word	0x0800975e
 8006b18:	0800976f 	.word	0x0800976f

08006b1c <siprintf>:
 8006b1c:	b40e      	push	{r1, r2, r3}
 8006b1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b22:	b500      	push	{lr}
 8006b24:	b09c      	sub	sp, #112	; 0x70
 8006b26:	ab1d      	add	r3, sp, #116	; 0x74
 8006b28:	9002      	str	r0, [sp, #8]
 8006b2a:	9006      	str	r0, [sp, #24]
 8006b2c:	9107      	str	r1, [sp, #28]
 8006b2e:	9104      	str	r1, [sp, #16]
 8006b30:	4808      	ldr	r0, [pc, #32]	; (8006b54 <siprintf+0x38>)
 8006b32:	4909      	ldr	r1, [pc, #36]	; (8006b58 <siprintf+0x3c>)
 8006b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b38:	9105      	str	r1, [sp, #20]
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	a902      	add	r1, sp, #8
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	f001 fb7e 	bl	8008240 <_svfiprintf_r>
 8006b44:	2200      	movs	r2, #0
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	b01c      	add	sp, #112	; 0x70
 8006b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b50:	b003      	add	sp, #12
 8006b52:	4770      	bx	lr
 8006b54:	20000040 	.word	0x20000040
 8006b58:	ffff0208 	.word	0xffff0208

08006b5c <quorem>:
 8006b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	6903      	ldr	r3, [r0, #16]
 8006b62:	690c      	ldr	r4, [r1, #16]
 8006b64:	4607      	mov	r7, r0
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	f2c0 8082 	blt.w	8006c70 <quorem+0x114>
 8006b6c:	3c01      	subs	r4, #1
 8006b6e:	f100 0514 	add.w	r5, r0, #20
 8006b72:	f101 0814 	add.w	r8, r1, #20
 8006b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b84:	3301      	adds	r3, #1
 8006b86:	429a      	cmp	r2, r3
 8006b88:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b94:	d331      	bcc.n	8006bfa <quorem+0x9e>
 8006b96:	f04f 0e00 	mov.w	lr, #0
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	46ac      	mov	ip, r5
 8006b9e:	46f2      	mov	sl, lr
 8006ba0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ba4:	b293      	uxth	r3, r2
 8006ba6:	fb06 e303 	mla	r3, r6, r3, lr
 8006baa:	0c12      	lsrs	r2, r2, #16
 8006bac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8006bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006bba:	f8dc a000 	ldr.w	sl, [ip]
 8006bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bc2:	fa1f fa8a 	uxth.w	sl, sl
 8006bc6:	4453      	add	r3, sl
 8006bc8:	f8dc a000 	ldr.w	sl, [ip]
 8006bcc:	b292      	uxth	r2, r2
 8006bce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bdc:	4581      	cmp	r9, r0
 8006bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006be2:	f84c 3b04 	str.w	r3, [ip], #4
 8006be6:	d2db      	bcs.n	8006ba0 <quorem+0x44>
 8006be8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bec:	b92b      	cbnz	r3, 8006bfa <quorem+0x9e>
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	429d      	cmp	r5, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	d32f      	bcc.n	8006c58 <quorem+0xfc>
 8006bf8:	613c      	str	r4, [r7, #16]
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f001 f8d0 	bl	8007da0 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	db25      	blt.n	8006c50 <quorem+0xf4>
 8006c04:	4628      	mov	r0, r5
 8006c06:	f04f 0c00 	mov.w	ip, #0
 8006c0a:	3601      	adds	r6, #1
 8006c0c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006c10:	f8d0 e000 	ldr.w	lr, [r0]
 8006c14:	b28b      	uxth	r3, r1
 8006c16:	ebac 0303 	sub.w	r3, ip, r3
 8006c1a:	fa1f f28e 	uxth.w	r2, lr
 8006c1e:	4413      	add	r3, r2
 8006c20:	0c0a      	lsrs	r2, r1, #16
 8006c22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c30:	45c1      	cmp	r9, r8
 8006c32:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c36:	f840 3b04 	str.w	r3, [r0], #4
 8006c3a:	d2e7      	bcs.n	8006c0c <quorem+0xb0>
 8006c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c44:	b922      	cbnz	r2, 8006c50 <quorem+0xf4>
 8006c46:	3b04      	subs	r3, #4
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	d30a      	bcc.n	8006c64 <quorem+0x108>
 8006c4e:	613c      	str	r4, [r7, #16]
 8006c50:	4630      	mov	r0, r6
 8006c52:	b003      	add	sp, #12
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d1cb      	bne.n	8006bf8 <quorem+0x9c>
 8006c60:	3c01      	subs	r4, #1
 8006c62:	e7c6      	b.n	8006bf2 <quorem+0x96>
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	3b04      	subs	r3, #4
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d1f0      	bne.n	8006c4e <quorem+0xf2>
 8006c6c:	3c01      	subs	r4, #1
 8006c6e:	e7eb      	b.n	8006c48 <quorem+0xec>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e7ee      	b.n	8006c52 <quorem+0xf6>
 8006c74:	0000      	movs	r0, r0
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	461f      	mov	r7, r3
 8006c80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c82:	b099      	sub	sp, #100	; 0x64
 8006c84:	4605      	mov	r5, r0
 8006c86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c8e:	b974      	cbnz	r4, 8006cae <_dtoa_r+0x36>
 8006c90:	2010      	movs	r0, #16
 8006c92:	f000 fde3 	bl	800785c <malloc>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6268      	str	r0, [r5, #36]	; 0x24
 8006c9a:	b920      	cbnz	r0, 8006ca6 <_dtoa_r+0x2e>
 8006c9c:	21ea      	movs	r1, #234	; 0xea
 8006c9e:	4ba8      	ldr	r3, [pc, #672]	; (8006f40 <_dtoa_r+0x2c8>)
 8006ca0:	48a8      	ldr	r0, [pc, #672]	; (8006f44 <_dtoa_r+0x2cc>)
 8006ca2:	f001 fbdd 	bl	8008460 <__assert_func>
 8006ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006caa:	6004      	str	r4, [r0, #0]
 8006cac:	60c4      	str	r4, [r0, #12]
 8006cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	b151      	cbz	r1, 8006cca <_dtoa_r+0x52>
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4093      	lsls	r3, r2
 8006cba:	604a      	str	r2, [r1, #4]
 8006cbc:	608b      	str	r3, [r1, #8]
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fe30 	bl	8007924 <_Bfree>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	1e3b      	subs	r3, r7, #0
 8006ccc:	bfaf      	iteee	ge
 8006cce:	2300      	movge	r3, #0
 8006cd0:	2201      	movlt	r2, #1
 8006cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	9305      	strlt	r3, [sp, #20]
 8006cd8:	bfa8      	it	ge
 8006cda:	f8c8 3000 	strge.w	r3, [r8]
 8006cde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006ce2:	4b99      	ldr	r3, [pc, #612]	; (8006f48 <_dtoa_r+0x2d0>)
 8006ce4:	bfb8      	it	lt
 8006ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8006cea:	ea33 0309 	bics.w	r3, r3, r9
 8006cee:	d119      	bne.n	8006d24 <_dtoa_r+0xac>
 8006cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cfc:	4333      	orrs	r3, r6
 8006cfe:	f000 857f 	beq.w	8007800 <_dtoa_r+0xb88>
 8006d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d04:	b953      	cbnz	r3, 8006d1c <_dtoa_r+0xa4>
 8006d06:	4b91      	ldr	r3, [pc, #580]	; (8006f4c <_dtoa_r+0x2d4>)
 8006d08:	e022      	b.n	8006d50 <_dtoa_r+0xd8>
 8006d0a:	4b91      	ldr	r3, [pc, #580]	; (8006f50 <_dtoa_r+0x2d8>)
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	9803      	ldr	r0, [sp, #12]
 8006d16:	b019      	add	sp, #100	; 0x64
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	4b8b      	ldr	r3, [pc, #556]	; (8006f4c <_dtoa_r+0x2d4>)
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	3303      	adds	r3, #3
 8006d22:	e7f5      	b.n	8006d10 <_dtoa_r+0x98>
 8006d24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f7f9 fea4 	bl	8000a80 <__aeabi_dcmpeq>
 8006d38:	4680      	mov	r8, r0
 8006d3a:	b158      	cbz	r0, 8006d54 <_dtoa_r+0xdc>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8558 	beq.w	80077fa <_dtoa_r+0xb82>
 8006d4a:	4882      	ldr	r0, [pc, #520]	; (8006f54 <_dtoa_r+0x2dc>)
 8006d4c:	6018      	str	r0, [r3, #0]
 8006d4e:	1e43      	subs	r3, r0, #1
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	e7df      	b.n	8006d14 <_dtoa_r+0x9c>
 8006d54:	ab16      	add	r3, sp, #88	; 0x58
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	ab17      	add	r3, sp, #92	; 0x5c
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d62:	f001 f8c5 	bl	8007ef0 <__d2b>
 8006d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d6a:	4683      	mov	fp, r0
 8006d6c:	2c00      	cmp	r4, #0
 8006d6e:	d07f      	beq.n	8006e70 <_dtoa_r+0x1f8>
 8006d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006d82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4b72      	ldr	r3, [pc, #456]	; (8006f58 <_dtoa_r+0x2e0>)
 8006d8e:	f7f9 fa57 	bl	8000240 <__aeabi_dsub>
 8006d92:	a365      	add	r3, pc, #404	; (adr r3, 8006f28 <_dtoa_r+0x2b0>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fc0a 	bl	80005b0 <__aeabi_dmul>
 8006d9c:	a364      	add	r3, pc, #400	; (adr r3, 8006f30 <_dtoa_r+0x2b8>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa4f 	bl	8000244 <__adddf3>
 8006da6:	4606      	mov	r6, r0
 8006da8:	4620      	mov	r0, r4
 8006daa:	460f      	mov	r7, r1
 8006dac:	f7f9 fb96 	bl	80004dc <__aeabi_i2d>
 8006db0:	a361      	add	r3, pc, #388	; (adr r3, 8006f38 <_dtoa_r+0x2c0>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fbfb 	bl	80005b0 <__aeabi_dmul>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fa3f 	bl	8000244 <__adddf3>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	f7f9 fea1 	bl	8000b10 <__aeabi_d2iz>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe5c 	bl	8000a94 <__aeabi_dcmplt>
 8006ddc:	b148      	cbz	r0, 8006df2 <_dtoa_r+0x17a>
 8006dde:	4650      	mov	r0, sl
 8006de0:	f7f9 fb7c 	bl	80004dc <__aeabi_i2d>
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	f7f9 fe4a 	bl	8000a80 <__aeabi_dcmpeq>
 8006dec:	b908      	cbnz	r0, 8006df2 <_dtoa_r+0x17a>
 8006dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df2:	f1ba 0f16 	cmp.w	sl, #22
 8006df6:	d858      	bhi.n	8006eaa <_dtoa_r+0x232>
 8006df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dfc:	4b57      	ldr	r3, [pc, #348]	; (8006f5c <_dtoa_r+0x2e4>)
 8006dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fe45 	bl	8000a94 <__aeabi_dcmplt>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d04f      	beq.n	8006eae <_dtoa_r+0x236>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e18:	1b1c      	subs	r4, r3, r4
 8006e1a:	1e63      	subs	r3, r4, #1
 8006e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1e:	bf49      	itett	mi
 8006e20:	f1c4 0301 	rsbmi	r3, r4, #1
 8006e24:	2300      	movpl	r3, #0
 8006e26:	9306      	strmi	r3, [sp, #24]
 8006e28:	2300      	movmi	r3, #0
 8006e2a:	bf54      	ite	pl
 8006e2c:	9306      	strpl	r3, [sp, #24]
 8006e2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006e30:	f1ba 0f00 	cmp.w	sl, #0
 8006e34:	db3d      	blt.n	8006eb2 <_dtoa_r+0x23a>
 8006e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e3c:	4453      	add	r3, sl
 8006e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e40:	2300      	movs	r3, #0
 8006e42:	930a      	str	r3, [sp, #40]	; 0x28
 8006e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	f200 808c 	bhi.w	8006f64 <_dtoa_r+0x2ec>
 8006e4c:	2b05      	cmp	r3, #5
 8006e4e:	bfc4      	itt	gt
 8006e50:	3b04      	subgt	r3, #4
 8006e52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e56:	bfc8      	it	gt
 8006e58:	2400      	movgt	r4, #0
 8006e5a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e5e:	bfd8      	it	le
 8006e60:	2401      	movle	r4, #1
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	f200 808a 	bhi.w	8006f7c <_dtoa_r+0x304>
 8006e68:	e8df f003 	tbb	[pc, r3]
 8006e6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006e70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e74:	441c      	add	r4, r3
 8006e76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	bfc3      	ittte	gt
 8006e7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006e86:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e8a:	f1c3 0320 	rsble	r3, r3, #32
 8006e8e:	bfc6      	itte	gt
 8006e90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e94:	4318      	orrgt	r0, r3
 8006e96:	fa06 f003 	lslle.w	r0, r6, r3
 8006e9a:	f7f9 fb0f 	bl	80004bc <__aeabi_ui2d>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ea4:	3c01      	subs	r4, #1
 8006ea6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ea8:	e76f      	b.n	8006d8a <_dtoa_r+0x112>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e7b2      	b.n	8006e14 <_dtoa_r+0x19c>
 8006eae:	900f      	str	r0, [sp, #60]	; 0x3c
 8006eb0:	e7b1      	b.n	8006e16 <_dtoa_r+0x19e>
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	eba3 030a 	sub.w	r3, r3, sl
 8006eb8:	9306      	str	r3, [sp, #24]
 8006eba:	f1ca 0300 	rsb	r3, sl, #0
 8006ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec4:	e7be      	b.n	8006e44 <_dtoa_r+0x1cc>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dc58      	bgt.n	8006f82 <_dtoa_r+0x30a>
 8006ed0:	f04f 0901 	mov.w	r9, #1
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006eda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ede:	2200      	movs	r2, #0
 8006ee0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ee2:	6042      	str	r2, [r0, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	f102 0614 	add.w	r6, r2, #20
 8006eea:	429e      	cmp	r6, r3
 8006eec:	6841      	ldr	r1, [r0, #4]
 8006eee:	d94e      	bls.n	8006f8e <_dtoa_r+0x316>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 fcd7 	bl	80078a4 <_Balloc>
 8006ef6:	9003      	str	r0, [sp, #12]
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d14c      	bne.n	8006f96 <_dtoa_r+0x31e>
 8006efc:	4602      	mov	r2, r0
 8006efe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <_dtoa_r+0x2e8>)
 8006f04:	e6cc      	b.n	8006ca0 <_dtoa_r+0x28>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e7de      	b.n	8006ec8 <_dtoa_r+0x250>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f10:	eb0a 0903 	add.w	r9, sl, r3
 8006f14:	f109 0301 	add.w	r3, r9, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	9308      	str	r3, [sp, #32]
 8006f1c:	bfb8      	it	lt
 8006f1e:	2301      	movlt	r3, #1
 8006f20:	e7dd      	b.n	8006ede <_dtoa_r+0x266>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7f2      	b.n	8006f0c <_dtoa_r+0x294>
 8006f26:	bf00      	nop
 8006f28:	636f4361 	.word	0x636f4361
 8006f2c:	3fd287a7 	.word	0x3fd287a7
 8006f30:	8b60c8b3 	.word	0x8b60c8b3
 8006f34:	3fc68a28 	.word	0x3fc68a28
 8006f38:	509f79fb 	.word	0x509f79fb
 8006f3c:	3fd34413 	.word	0x3fd34413
 8006f40:	0800978d 	.word	0x0800978d
 8006f44:	080097a4 	.word	0x080097a4
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	08009789 	.word	0x08009789
 8006f50:	08009780 	.word	0x08009780
 8006f54:	0800975d 	.word	0x0800975d
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	08009898 	.word	0x08009898
 8006f60:	080097ff 	.word	0x080097ff
 8006f64:	2401      	movs	r4, #1
 8006f66:	2300      	movs	r3, #0
 8006f68:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f6a:	9322      	str	r3, [sp, #136]	; 0x88
 8006f6c:	f04f 39ff 	mov.w	r9, #4294967295
 8006f70:	2200      	movs	r2, #0
 8006f72:	2312      	movs	r3, #18
 8006f74:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f78:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f7a:	e7b0      	b.n	8006ede <_dtoa_r+0x266>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f80:	e7f4      	b.n	8006f6c <_dtoa_r+0x2f4>
 8006f82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006f86:	464b      	mov	r3, r9
 8006f88:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f8c:	e7a7      	b.n	8006ede <_dtoa_r+0x266>
 8006f8e:	3101      	adds	r1, #1
 8006f90:	6041      	str	r1, [r0, #4]
 8006f92:	0052      	lsls	r2, r2, #1
 8006f94:	e7a7      	b.n	8006ee6 <_dtoa_r+0x26e>
 8006f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f98:	9a03      	ldr	r2, [sp, #12]
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	9b08      	ldr	r3, [sp, #32]
 8006f9e:	2b0e      	cmp	r3, #14
 8006fa0:	f200 80a8 	bhi.w	80070f4 <_dtoa_r+0x47c>
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	f000 80a5 	beq.w	80070f4 <_dtoa_r+0x47c>
 8006faa:	f1ba 0f00 	cmp.w	sl, #0
 8006fae:	dd34      	ble.n	800701a <_dtoa_r+0x3a2>
 8006fb0:	4a9a      	ldr	r2, [pc, #616]	; (800721c <_dtoa_r+0x5a4>)
 8006fb2:	f00a 030f 	and.w	r3, sl, #15
 8006fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006fca:	d016      	beq.n	8006ffa <_dtoa_r+0x382>
 8006fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd0:	4b93      	ldr	r3, [pc, #588]	; (8007220 <_dtoa_r+0x5a8>)
 8006fd2:	2703      	movs	r7, #3
 8006fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fd8:	f7f9 fc14 	bl	8000804 <__aeabi_ddiv>
 8006fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fe0:	f004 040f 	and.w	r4, r4, #15
 8006fe4:	4e8e      	ldr	r6, [pc, #568]	; (8007220 <_dtoa_r+0x5a8>)
 8006fe6:	b954      	cbnz	r4, 8006ffe <_dtoa_r+0x386>
 8006fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff0:	f7f9 fc08 	bl	8000804 <__aeabi_ddiv>
 8006ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff8:	e029      	b.n	800704e <_dtoa_r+0x3d6>
 8006ffa:	2702      	movs	r7, #2
 8006ffc:	e7f2      	b.n	8006fe4 <_dtoa_r+0x36c>
 8006ffe:	07e1      	lsls	r1, r4, #31
 8007000:	d508      	bpl.n	8007014 <_dtoa_r+0x39c>
 8007002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800700a:	f7f9 fad1 	bl	80005b0 <__aeabi_dmul>
 800700e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007012:	3701      	adds	r7, #1
 8007014:	1064      	asrs	r4, r4, #1
 8007016:	3608      	adds	r6, #8
 8007018:	e7e5      	b.n	8006fe6 <_dtoa_r+0x36e>
 800701a:	f000 80a5 	beq.w	8007168 <_dtoa_r+0x4f0>
 800701e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007022:	f1ca 0400 	rsb	r4, sl, #0
 8007026:	4b7d      	ldr	r3, [pc, #500]	; (800721c <_dtoa_r+0x5a4>)
 8007028:	f004 020f 	and.w	r2, r4, #15
 800702c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f7f9 fabc 	bl	80005b0 <__aeabi_dmul>
 8007038:	2702      	movs	r7, #2
 800703a:	2300      	movs	r3, #0
 800703c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007040:	4e77      	ldr	r6, [pc, #476]	; (8007220 <_dtoa_r+0x5a8>)
 8007042:	1124      	asrs	r4, r4, #4
 8007044:	2c00      	cmp	r4, #0
 8007046:	f040 8084 	bne.w	8007152 <_dtoa_r+0x4da>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1d2      	bne.n	8006ff4 <_dtoa_r+0x37c>
 800704e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 808b 	beq.w	800716c <_dtoa_r+0x4f4>
 8007056:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800705a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800705e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007062:	2200      	movs	r2, #0
 8007064:	4b6f      	ldr	r3, [pc, #444]	; (8007224 <_dtoa_r+0x5ac>)
 8007066:	f7f9 fd15 	bl	8000a94 <__aeabi_dcmplt>
 800706a:	2800      	cmp	r0, #0
 800706c:	d07e      	beq.n	800716c <_dtoa_r+0x4f4>
 800706e:	9b08      	ldr	r3, [sp, #32]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d07b      	beq.n	800716c <_dtoa_r+0x4f4>
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	dd38      	ble.n	80070ec <_dtoa_r+0x474>
 800707a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800707e:	2200      	movs	r2, #0
 8007080:	4b69      	ldr	r3, [pc, #420]	; (8007228 <_dtoa_r+0x5b0>)
 8007082:	f7f9 fa95 	bl	80005b0 <__aeabi_dmul>
 8007086:	464c      	mov	r4, r9
 8007088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800708c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007090:	3701      	adds	r7, #1
 8007092:	4638      	mov	r0, r7
 8007094:	f7f9 fa22 	bl	80004dc <__aeabi_i2d>
 8007098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709c:	f7f9 fa88 	bl	80005b0 <__aeabi_dmul>
 80070a0:	2200      	movs	r2, #0
 80070a2:	4b62      	ldr	r3, [pc, #392]	; (800722c <_dtoa_r+0x5b4>)
 80070a4:	f7f9 f8ce 	bl	8000244 <__adddf3>
 80070a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80070ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070b0:	9611      	str	r6, [sp, #68]	; 0x44
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d15d      	bne.n	8007172 <_dtoa_r+0x4fa>
 80070b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ba:	2200      	movs	r2, #0
 80070bc:	4b5c      	ldr	r3, [pc, #368]	; (8007230 <_dtoa_r+0x5b8>)
 80070be:	f7f9 f8bf 	bl	8000240 <__aeabi_dsub>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070ca:	4633      	mov	r3, r6
 80070cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070ce:	f7f9 fcff 	bl	8000ad0 <__aeabi_dcmpgt>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	f040 829c 	bne.w	8007610 <_dtoa_r+0x998>
 80070d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80070e2:	f7f9 fcd7 	bl	8000a94 <__aeabi_dcmplt>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f040 8290 	bne.w	800760c <_dtoa_r+0x994>
 80070ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80070f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f2c0 8152 	blt.w	80073a0 <_dtoa_r+0x728>
 80070fc:	f1ba 0f0e 	cmp.w	sl, #14
 8007100:	f300 814e 	bgt.w	80073a0 <_dtoa_r+0x728>
 8007104:	4b45      	ldr	r3, [pc, #276]	; (800721c <_dtoa_r+0x5a4>)
 8007106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800710a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800710e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007114:	2b00      	cmp	r3, #0
 8007116:	f280 80db 	bge.w	80072d0 <_dtoa_r+0x658>
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f300 80d7 	bgt.w	80072d0 <_dtoa_r+0x658>
 8007122:	f040 8272 	bne.w	800760a <_dtoa_r+0x992>
 8007126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800712a:	2200      	movs	r2, #0
 800712c:	4b40      	ldr	r3, [pc, #256]	; (8007230 <_dtoa_r+0x5b8>)
 800712e:	f7f9 fa3f 	bl	80005b0 <__aeabi_dmul>
 8007132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007136:	f7f9 fcc1 	bl	8000abc <__aeabi_dcmpge>
 800713a:	9c08      	ldr	r4, [sp, #32]
 800713c:	4626      	mov	r6, r4
 800713e:	2800      	cmp	r0, #0
 8007140:	f040 8248 	bne.w	80075d4 <_dtoa_r+0x95c>
 8007144:	2331      	movs	r3, #49	; 0x31
 8007146:	9f03      	ldr	r7, [sp, #12]
 8007148:	f10a 0a01 	add.w	sl, sl, #1
 800714c:	f807 3b01 	strb.w	r3, [r7], #1
 8007150:	e244      	b.n	80075dc <_dtoa_r+0x964>
 8007152:	07e2      	lsls	r2, r4, #31
 8007154:	d505      	bpl.n	8007162 <_dtoa_r+0x4ea>
 8007156:	e9d6 2300 	ldrd	r2, r3, [r6]
 800715a:	f7f9 fa29 	bl	80005b0 <__aeabi_dmul>
 800715e:	2301      	movs	r3, #1
 8007160:	3701      	adds	r7, #1
 8007162:	1064      	asrs	r4, r4, #1
 8007164:	3608      	adds	r6, #8
 8007166:	e76d      	b.n	8007044 <_dtoa_r+0x3cc>
 8007168:	2702      	movs	r7, #2
 800716a:	e770      	b.n	800704e <_dtoa_r+0x3d6>
 800716c:	46d0      	mov	r8, sl
 800716e:	9c08      	ldr	r4, [sp, #32]
 8007170:	e78f      	b.n	8007092 <_dtoa_r+0x41a>
 8007172:	9903      	ldr	r1, [sp, #12]
 8007174:	4b29      	ldr	r3, [pc, #164]	; (800721c <_dtoa_r+0x5a4>)
 8007176:	4421      	add	r1, r4
 8007178:	9112      	str	r1, [sp, #72]	; 0x48
 800717a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800717c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007180:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007184:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007188:	2900      	cmp	r1, #0
 800718a:	d055      	beq.n	8007238 <_dtoa_r+0x5c0>
 800718c:	2000      	movs	r0, #0
 800718e:	4929      	ldr	r1, [pc, #164]	; (8007234 <_dtoa_r+0x5bc>)
 8007190:	f7f9 fb38 	bl	8000804 <__aeabi_ddiv>
 8007194:	463b      	mov	r3, r7
 8007196:	4632      	mov	r2, r6
 8007198:	f7f9 f852 	bl	8000240 <__aeabi_dsub>
 800719c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071a0:	9f03      	ldr	r7, [sp, #12]
 80071a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a6:	f7f9 fcb3 	bl	8000b10 <__aeabi_d2iz>
 80071aa:	4604      	mov	r4, r0
 80071ac:	f7f9 f996 	bl	80004dc <__aeabi_i2d>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b8:	f7f9 f842 	bl	8000240 <__aeabi_dsub>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	3430      	adds	r4, #48	; 0x30
 80071c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071ca:	f807 4b01 	strb.w	r4, [r7], #1
 80071ce:	f7f9 fc61 	bl	8000a94 <__aeabi_dcmplt>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d174      	bne.n	80072c0 <_dtoa_r+0x648>
 80071d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071da:	2000      	movs	r0, #0
 80071dc:	4911      	ldr	r1, [pc, #68]	; (8007224 <_dtoa_r+0x5ac>)
 80071de:	f7f9 f82f 	bl	8000240 <__aeabi_dsub>
 80071e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071e6:	f7f9 fc55 	bl	8000a94 <__aeabi_dcmplt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f040 80b7 	bne.w	800735e <_dtoa_r+0x6e6>
 80071f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071f2:	429f      	cmp	r7, r3
 80071f4:	f43f af7a 	beq.w	80070ec <_dtoa_r+0x474>
 80071f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071fc:	2200      	movs	r2, #0
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <_dtoa_r+0x5b0>)
 8007200:	f7f9 f9d6 	bl	80005b0 <__aeabi_dmul>
 8007204:	2200      	movs	r2, #0
 8007206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800720a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <_dtoa_r+0x5b0>)
 8007210:	f7f9 f9ce 	bl	80005b0 <__aeabi_dmul>
 8007214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007218:	e7c3      	b.n	80071a2 <_dtoa_r+0x52a>
 800721a:	bf00      	nop
 800721c:	08009898 	.word	0x08009898
 8007220:	08009870 	.word	0x08009870
 8007224:	3ff00000 	.word	0x3ff00000
 8007228:	40240000 	.word	0x40240000
 800722c:	401c0000 	.word	0x401c0000
 8007230:	40140000 	.word	0x40140000
 8007234:	3fe00000 	.word	0x3fe00000
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 f9b8 	bl	80005b0 <__aeabi_dmul>
 8007240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007242:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007246:	9c03      	ldr	r4, [sp, #12]
 8007248:	9314      	str	r3, [sp, #80]	; 0x50
 800724a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800724e:	f7f9 fc5f 	bl	8000b10 <__aeabi_d2iz>
 8007252:	9015      	str	r0, [sp, #84]	; 0x54
 8007254:	f7f9 f942 	bl	80004dc <__aeabi_i2d>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	f7f8 ffee 	bl	8000240 <__aeabi_dsub>
 8007264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007266:	4606      	mov	r6, r0
 8007268:	3330      	adds	r3, #48	; 0x30
 800726a:	f804 3b01 	strb.w	r3, [r4], #1
 800726e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007270:	460f      	mov	r7, r1
 8007272:	429c      	cmp	r4, r3
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	d124      	bne.n	80072c4 <_dtoa_r+0x64c>
 800727a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800727e:	4bb0      	ldr	r3, [pc, #704]	; (8007540 <_dtoa_r+0x8c8>)
 8007280:	f7f8 ffe0 	bl	8000244 <__adddf3>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4630      	mov	r0, r6
 800728a:	4639      	mov	r1, r7
 800728c:	f7f9 fc20 	bl	8000ad0 <__aeabi_dcmpgt>
 8007290:	2800      	cmp	r0, #0
 8007292:	d163      	bne.n	800735c <_dtoa_r+0x6e4>
 8007294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007298:	2000      	movs	r0, #0
 800729a:	49a9      	ldr	r1, [pc, #676]	; (8007540 <_dtoa_r+0x8c8>)
 800729c:	f7f8 ffd0 	bl	8000240 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 fbf4 	bl	8000a94 <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f43f af1d 	beq.w	80070ec <_dtoa_r+0x474>
 80072b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80072b4:	1e7b      	subs	r3, r7, #1
 80072b6:	9314      	str	r3, [sp, #80]	; 0x50
 80072b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80072bc:	2b30      	cmp	r3, #48	; 0x30
 80072be:	d0f8      	beq.n	80072b2 <_dtoa_r+0x63a>
 80072c0:	46c2      	mov	sl, r8
 80072c2:	e03b      	b.n	800733c <_dtoa_r+0x6c4>
 80072c4:	4b9f      	ldr	r3, [pc, #636]	; (8007544 <_dtoa_r+0x8cc>)
 80072c6:	f7f9 f973 	bl	80005b0 <__aeabi_dmul>
 80072ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ce:	e7bc      	b.n	800724a <_dtoa_r+0x5d2>
 80072d0:	9f03      	ldr	r7, [sp, #12]
 80072d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f7f9 fa91 	bl	8000804 <__aeabi_ddiv>
 80072e2:	f7f9 fc15 	bl	8000b10 <__aeabi_d2iz>
 80072e6:	4604      	mov	r4, r0
 80072e8:	f7f9 f8f8 	bl	80004dc <__aeabi_i2d>
 80072ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072f0:	f7f9 f95e 	bl	80005b0 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4640      	mov	r0, r8
 80072fa:	4649      	mov	r1, r9
 80072fc:	f7f8 ffa0 	bl	8000240 <__aeabi_dsub>
 8007300:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007304:	f807 6b01 	strb.w	r6, [r7], #1
 8007308:	9e03      	ldr	r6, [sp, #12]
 800730a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800730e:	1bbe      	subs	r6, r7, r6
 8007310:	45b4      	cmp	ip, r6
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	d136      	bne.n	8007386 <_dtoa_r+0x70e>
 8007318:	f7f8 ff94 	bl	8000244 <__adddf3>
 800731c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007320:	4680      	mov	r8, r0
 8007322:	4689      	mov	r9, r1
 8007324:	f7f9 fbd4 	bl	8000ad0 <__aeabi_dcmpgt>
 8007328:	bb58      	cbnz	r0, 8007382 <_dtoa_r+0x70a>
 800732a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	f7f9 fba5 	bl	8000a80 <__aeabi_dcmpeq>
 8007336:	b108      	cbz	r0, 800733c <_dtoa_r+0x6c4>
 8007338:	07e1      	lsls	r1, r4, #31
 800733a:	d422      	bmi.n	8007382 <_dtoa_r+0x70a>
 800733c:	4628      	mov	r0, r5
 800733e:	4659      	mov	r1, fp
 8007340:	f000 faf0 	bl	8007924 <_Bfree>
 8007344:	2300      	movs	r3, #0
 8007346:	703b      	strb	r3, [r7, #0]
 8007348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800734a:	f10a 0001 	add.w	r0, sl, #1
 800734e:	6018      	str	r0, [r3, #0]
 8007350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007352:	2b00      	cmp	r3, #0
 8007354:	f43f acde 	beq.w	8006d14 <_dtoa_r+0x9c>
 8007358:	601f      	str	r7, [r3, #0]
 800735a:	e4db      	b.n	8006d14 <_dtoa_r+0x9c>
 800735c:	4627      	mov	r7, r4
 800735e:	463b      	mov	r3, r7
 8007360:	461f      	mov	r7, r3
 8007362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007366:	2a39      	cmp	r2, #57	; 0x39
 8007368:	d107      	bne.n	800737a <_dtoa_r+0x702>
 800736a:	9a03      	ldr	r2, [sp, #12]
 800736c:	429a      	cmp	r2, r3
 800736e:	d1f7      	bne.n	8007360 <_dtoa_r+0x6e8>
 8007370:	2230      	movs	r2, #48	; 0x30
 8007372:	9903      	ldr	r1, [sp, #12]
 8007374:	f108 0801 	add.w	r8, r8, #1
 8007378:	700a      	strb	r2, [r1, #0]
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	3201      	adds	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e79e      	b.n	80072c0 <_dtoa_r+0x648>
 8007382:	46d0      	mov	r8, sl
 8007384:	e7eb      	b.n	800735e <_dtoa_r+0x6e6>
 8007386:	2200      	movs	r2, #0
 8007388:	4b6e      	ldr	r3, [pc, #440]	; (8007544 <_dtoa_r+0x8cc>)
 800738a:	f7f9 f911 	bl	80005b0 <__aeabi_dmul>
 800738e:	2200      	movs	r2, #0
 8007390:	2300      	movs	r3, #0
 8007392:	4680      	mov	r8, r0
 8007394:	4689      	mov	r9, r1
 8007396:	f7f9 fb73 	bl	8000a80 <__aeabi_dcmpeq>
 800739a:	2800      	cmp	r0, #0
 800739c:	d09b      	beq.n	80072d6 <_dtoa_r+0x65e>
 800739e:	e7cd      	b.n	800733c <_dtoa_r+0x6c4>
 80073a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	f000 80d0 	beq.w	8007548 <_dtoa_r+0x8d0>
 80073a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073aa:	2a01      	cmp	r2, #1
 80073ac:	f300 80ae 	bgt.w	800750c <_dtoa_r+0x894>
 80073b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	f000 80a6 	beq.w	8007504 <_dtoa_r+0x88c>
 80073b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073be:	9f06      	ldr	r7, [sp, #24]
 80073c0:	9a06      	ldr	r2, [sp, #24]
 80073c2:	2101      	movs	r1, #1
 80073c4:	441a      	add	r2, r3
 80073c6:	9206      	str	r2, [sp, #24]
 80073c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ca:	4628      	mov	r0, r5
 80073cc:	441a      	add	r2, r3
 80073ce:	9209      	str	r2, [sp, #36]	; 0x24
 80073d0:	f000 fb5e 	bl	8007a90 <__i2b>
 80073d4:	4606      	mov	r6, r0
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	dd0c      	ble.n	80073f4 <_dtoa_r+0x77c>
 80073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	dd09      	ble.n	80073f4 <_dtoa_r+0x77c>
 80073e0:	42bb      	cmp	r3, r7
 80073e2:	bfa8      	it	ge
 80073e4:	463b      	movge	r3, r7
 80073e6:	9a06      	ldr	r2, [sp, #24]
 80073e8:	1aff      	subs	r7, r7, r3
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	9206      	str	r2, [sp, #24]
 80073ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
 80073f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f6:	b1f3      	cbz	r3, 8007436 <_dtoa_r+0x7be>
 80073f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80a8 	beq.w	8007550 <_dtoa_r+0x8d8>
 8007400:	2c00      	cmp	r4, #0
 8007402:	dd10      	ble.n	8007426 <_dtoa_r+0x7ae>
 8007404:	4631      	mov	r1, r6
 8007406:	4622      	mov	r2, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f000 fbff 	bl	8007c0c <__pow5mult>
 800740e:	465a      	mov	r2, fp
 8007410:	4601      	mov	r1, r0
 8007412:	4606      	mov	r6, r0
 8007414:	4628      	mov	r0, r5
 8007416:	f000 fb51 	bl	8007abc <__multiply>
 800741a:	4680      	mov	r8, r0
 800741c:	4659      	mov	r1, fp
 800741e:	4628      	mov	r0, r5
 8007420:	f000 fa80 	bl	8007924 <_Bfree>
 8007424:	46c3      	mov	fp, r8
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	1b1a      	subs	r2, r3, r4
 800742a:	d004      	beq.n	8007436 <_dtoa_r+0x7be>
 800742c:	4659      	mov	r1, fp
 800742e:	4628      	mov	r0, r5
 8007430:	f000 fbec 	bl	8007c0c <__pow5mult>
 8007434:	4683      	mov	fp, r0
 8007436:	2101      	movs	r1, #1
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fb29 	bl	8007a90 <__i2b>
 800743e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007440:	4604      	mov	r4, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	f340 8086 	ble.w	8007554 <_dtoa_r+0x8dc>
 8007448:	461a      	mov	r2, r3
 800744a:	4601      	mov	r1, r0
 800744c:	4628      	mov	r0, r5
 800744e:	f000 fbdd 	bl	8007c0c <__pow5mult>
 8007452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007454:	4604      	mov	r4, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	dd7f      	ble.n	800755a <_dtoa_r+0x8e2>
 800745a:	f04f 0800 	mov.w	r8, #0
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007464:	6918      	ldr	r0, [r3, #16]
 8007466:	f000 fac5 	bl	80079f4 <__hi0bits>
 800746a:	f1c0 0020 	rsb	r0, r0, #32
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	4418      	add	r0, r3
 8007472:	f010 001f 	ands.w	r0, r0, #31
 8007476:	f000 8092 	beq.w	800759e <_dtoa_r+0x926>
 800747a:	f1c0 0320 	rsb	r3, r0, #32
 800747e:	2b04      	cmp	r3, #4
 8007480:	f340 808a 	ble.w	8007598 <_dtoa_r+0x920>
 8007484:	f1c0 001c 	rsb	r0, r0, #28
 8007488:	9b06      	ldr	r3, [sp, #24]
 800748a:	4407      	add	r7, r0
 800748c:	4403      	add	r3, r0
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007492:	4403      	add	r3, r0
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	9b06      	ldr	r3, [sp, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dd05      	ble.n	80074a8 <_dtoa_r+0x830>
 800749c:	4659      	mov	r1, fp
 800749e:	461a      	mov	r2, r3
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fc0d 	bl	8007cc0 <__lshift>
 80074a6:	4683      	mov	fp, r0
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd05      	ble.n	80074ba <_dtoa_r+0x842>
 80074ae:	4621      	mov	r1, r4
 80074b0:	461a      	mov	r2, r3
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 fc04 	bl	8007cc0 <__lshift>
 80074b8:	4604      	mov	r4, r0
 80074ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d070      	beq.n	80075a2 <_dtoa_r+0x92a>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4658      	mov	r0, fp
 80074c4:	f000 fc6c 	bl	8007da0 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	da6a      	bge.n	80075a2 <_dtoa_r+0x92a>
 80074cc:	2300      	movs	r3, #0
 80074ce:	4659      	mov	r1, fp
 80074d0:	220a      	movs	r2, #10
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 fa48 	bl	8007968 <__multadd>
 80074d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074da:	4683      	mov	fp, r0
 80074dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8194 	beq.w	800780e <_dtoa_r+0xb96>
 80074e6:	4631      	mov	r1, r6
 80074e8:	2300      	movs	r3, #0
 80074ea:	220a      	movs	r2, #10
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 fa3b 	bl	8007968 <__multadd>
 80074f2:	f1b9 0f00 	cmp.w	r9, #0
 80074f6:	4606      	mov	r6, r0
 80074f8:	f300 8093 	bgt.w	8007622 <_dtoa_r+0x9aa>
 80074fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074fe:	2b02      	cmp	r3, #2
 8007500:	dc57      	bgt.n	80075b2 <_dtoa_r+0x93a>
 8007502:	e08e      	b.n	8007622 <_dtoa_r+0x9aa>
 8007504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800750a:	e757      	b.n	80073bc <_dtoa_r+0x744>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	1e5c      	subs	r4, r3, #1
 8007510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007512:	42a3      	cmp	r3, r4
 8007514:	bfb7      	itett	lt
 8007516:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007518:	1b1c      	subge	r4, r3, r4
 800751a:	1ae2      	sublt	r2, r4, r3
 800751c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800751e:	bfbe      	ittt	lt
 8007520:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007522:	189b      	addlt	r3, r3, r2
 8007524:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	bfb8      	it	lt
 800752a:	2400      	movlt	r4, #0
 800752c:	2b00      	cmp	r3, #0
 800752e:	bfbb      	ittet	lt
 8007530:	9b06      	ldrlt	r3, [sp, #24]
 8007532:	9a08      	ldrlt	r2, [sp, #32]
 8007534:	9f06      	ldrge	r7, [sp, #24]
 8007536:	1a9f      	sublt	r7, r3, r2
 8007538:	bfac      	ite	ge
 800753a:	9b08      	ldrge	r3, [sp, #32]
 800753c:	2300      	movlt	r3, #0
 800753e:	e73f      	b.n	80073c0 <_dtoa_r+0x748>
 8007540:	3fe00000 	.word	0x3fe00000
 8007544:	40240000 	.word	0x40240000
 8007548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800754a:	9f06      	ldr	r7, [sp, #24]
 800754c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800754e:	e742      	b.n	80073d6 <_dtoa_r+0x75e>
 8007550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007552:	e76b      	b.n	800742c <_dtoa_r+0x7b4>
 8007554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007556:	2b01      	cmp	r3, #1
 8007558:	dc19      	bgt.n	800758e <_dtoa_r+0x916>
 800755a:	9b04      	ldr	r3, [sp, #16]
 800755c:	b9bb      	cbnz	r3, 800758e <_dtoa_r+0x916>
 800755e:	9b05      	ldr	r3, [sp, #20]
 8007560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007564:	b99b      	cbnz	r3, 800758e <_dtoa_r+0x916>
 8007566:	9b05      	ldr	r3, [sp, #20]
 8007568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800756c:	0d1b      	lsrs	r3, r3, #20
 800756e:	051b      	lsls	r3, r3, #20
 8007570:	b183      	cbz	r3, 8007594 <_dtoa_r+0x91c>
 8007572:	f04f 0801 	mov.w	r8, #1
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	3301      	adds	r3, #1
 800757a:	9306      	str	r3, [sp, #24]
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	3301      	adds	r3, #1
 8007580:	9309      	str	r3, [sp, #36]	; 0x24
 8007582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	f47f af6a 	bne.w	800745e <_dtoa_r+0x7e6>
 800758a:	2001      	movs	r0, #1
 800758c:	e76f      	b.n	800746e <_dtoa_r+0x7f6>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	e7f6      	b.n	8007582 <_dtoa_r+0x90a>
 8007594:	4698      	mov	r8, r3
 8007596:	e7f4      	b.n	8007582 <_dtoa_r+0x90a>
 8007598:	f43f af7d 	beq.w	8007496 <_dtoa_r+0x81e>
 800759c:	4618      	mov	r0, r3
 800759e:	301c      	adds	r0, #28
 80075a0:	e772      	b.n	8007488 <_dtoa_r+0x810>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dc36      	bgt.n	8007616 <_dtoa_r+0x99e>
 80075a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	dd33      	ble.n	8007616 <_dtoa_r+0x99e>
 80075ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075b2:	f1b9 0f00 	cmp.w	r9, #0
 80075b6:	d10d      	bne.n	80075d4 <_dtoa_r+0x95c>
 80075b8:	4621      	mov	r1, r4
 80075ba:	464b      	mov	r3, r9
 80075bc:	2205      	movs	r2, #5
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f9d2 	bl	8007968 <__multadd>
 80075c4:	4601      	mov	r1, r0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4658      	mov	r0, fp
 80075ca:	f000 fbe9 	bl	8007da0 <__mcmp>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f73f adb8 	bgt.w	8007144 <_dtoa_r+0x4cc>
 80075d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075d6:	9f03      	ldr	r7, [sp, #12]
 80075d8:	ea6f 0a03 	mvn.w	sl, r3
 80075dc:	f04f 0800 	mov.w	r8, #0
 80075e0:	4621      	mov	r1, r4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f99e 	bl	8007924 <_Bfree>
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	f43f aea7 	beq.w	800733c <_dtoa_r+0x6c4>
 80075ee:	f1b8 0f00 	cmp.w	r8, #0
 80075f2:	d005      	beq.n	8007600 <_dtoa_r+0x988>
 80075f4:	45b0      	cmp	r8, r6
 80075f6:	d003      	beq.n	8007600 <_dtoa_r+0x988>
 80075f8:	4641      	mov	r1, r8
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f992 	bl	8007924 <_Bfree>
 8007600:	4631      	mov	r1, r6
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f98e 	bl	8007924 <_Bfree>
 8007608:	e698      	b.n	800733c <_dtoa_r+0x6c4>
 800760a:	2400      	movs	r4, #0
 800760c:	4626      	mov	r6, r4
 800760e:	e7e1      	b.n	80075d4 <_dtoa_r+0x95c>
 8007610:	46c2      	mov	sl, r8
 8007612:	4626      	mov	r6, r4
 8007614:	e596      	b.n	8007144 <_dtoa_r+0x4cc>
 8007616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80fd 	beq.w	800781c <_dtoa_r+0xba4>
 8007622:	2f00      	cmp	r7, #0
 8007624:	dd05      	ble.n	8007632 <_dtoa_r+0x9ba>
 8007626:	4631      	mov	r1, r6
 8007628:	463a      	mov	r2, r7
 800762a:	4628      	mov	r0, r5
 800762c:	f000 fb48 	bl	8007cc0 <__lshift>
 8007630:	4606      	mov	r6, r0
 8007632:	f1b8 0f00 	cmp.w	r8, #0
 8007636:	d05c      	beq.n	80076f2 <_dtoa_r+0xa7a>
 8007638:	4628      	mov	r0, r5
 800763a:	6871      	ldr	r1, [r6, #4]
 800763c:	f000 f932 	bl	80078a4 <_Balloc>
 8007640:	4607      	mov	r7, r0
 8007642:	b928      	cbnz	r0, 8007650 <_dtoa_r+0x9d8>
 8007644:	4602      	mov	r2, r0
 8007646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800764a:	4b7f      	ldr	r3, [pc, #508]	; (8007848 <_dtoa_r+0xbd0>)
 800764c:	f7ff bb28 	b.w	8006ca0 <_dtoa_r+0x28>
 8007650:	6932      	ldr	r2, [r6, #16]
 8007652:	f106 010c 	add.w	r1, r6, #12
 8007656:	3202      	adds	r2, #2
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	300c      	adds	r0, #12
 800765c:	f000 f914 	bl	8007888 <memcpy>
 8007660:	2201      	movs	r2, #1
 8007662:	4639      	mov	r1, r7
 8007664:	4628      	mov	r0, r5
 8007666:	f000 fb2b 	bl	8007cc0 <__lshift>
 800766a:	46b0      	mov	r8, r6
 800766c:	4606      	mov	r6, r0
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	444b      	add	r3, r9
 8007678:	930a      	str	r3, [sp, #40]	; 0x28
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	9309      	str	r3, [sp, #36]	; 0x24
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	4621      	mov	r1, r4
 8007686:	3b01      	subs	r3, #1
 8007688:	4658      	mov	r0, fp
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	f7ff fa66 	bl	8006b5c <quorem>
 8007690:	4603      	mov	r3, r0
 8007692:	4641      	mov	r1, r8
 8007694:	3330      	adds	r3, #48	; 0x30
 8007696:	9006      	str	r0, [sp, #24]
 8007698:	4658      	mov	r0, fp
 800769a:	930b      	str	r3, [sp, #44]	; 0x2c
 800769c:	f000 fb80 	bl	8007da0 <__mcmp>
 80076a0:	4632      	mov	r2, r6
 80076a2:	4681      	mov	r9, r0
 80076a4:	4621      	mov	r1, r4
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fb96 	bl	8007dd8 <__mdiff>
 80076ac:	68c2      	ldr	r2, [r0, #12]
 80076ae:	4607      	mov	r7, r0
 80076b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b2:	bb02      	cbnz	r2, 80076f6 <_dtoa_r+0xa7e>
 80076b4:	4601      	mov	r1, r0
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fb72 	bl	8007da0 <__mcmp>
 80076bc:	4602      	mov	r2, r0
 80076be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c0:	4639      	mov	r1, r7
 80076c2:	4628      	mov	r0, r5
 80076c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80076c8:	f000 f92c 	bl	8007924 <_Bfree>
 80076cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d0:	9f08      	ldr	r7, [sp, #32]
 80076d2:	ea43 0102 	orr.w	r1, r3, r2
 80076d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d8:	430b      	orrs	r3, r1
 80076da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076dc:	d10d      	bne.n	80076fa <_dtoa_r+0xa82>
 80076de:	2b39      	cmp	r3, #57	; 0x39
 80076e0:	d029      	beq.n	8007736 <_dtoa_r+0xabe>
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	dd01      	ble.n	80076ec <_dtoa_r+0xa74>
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	3331      	adds	r3, #49	; 0x31
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	7013      	strb	r3, [r2, #0]
 80076f0:	e776      	b.n	80075e0 <_dtoa_r+0x968>
 80076f2:	4630      	mov	r0, r6
 80076f4:	e7b9      	b.n	800766a <_dtoa_r+0x9f2>
 80076f6:	2201      	movs	r2, #1
 80076f8:	e7e2      	b.n	80076c0 <_dtoa_r+0xa48>
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	db06      	blt.n	800770e <_dtoa_r+0xa96>
 8007700:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007702:	ea41 0909 	orr.w	r9, r1, r9
 8007706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007708:	ea59 0101 	orrs.w	r1, r9, r1
 800770c:	d120      	bne.n	8007750 <_dtoa_r+0xad8>
 800770e:	2a00      	cmp	r2, #0
 8007710:	ddec      	ble.n	80076ec <_dtoa_r+0xa74>
 8007712:	4659      	mov	r1, fp
 8007714:	2201      	movs	r2, #1
 8007716:	4628      	mov	r0, r5
 8007718:	9308      	str	r3, [sp, #32]
 800771a:	f000 fad1 	bl	8007cc0 <__lshift>
 800771e:	4621      	mov	r1, r4
 8007720:	4683      	mov	fp, r0
 8007722:	f000 fb3d 	bl	8007da0 <__mcmp>
 8007726:	2800      	cmp	r0, #0
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	dc02      	bgt.n	8007732 <_dtoa_r+0xaba>
 800772c:	d1de      	bne.n	80076ec <_dtoa_r+0xa74>
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d5dc      	bpl.n	80076ec <_dtoa_r+0xa74>
 8007732:	2b39      	cmp	r3, #57	; 0x39
 8007734:	d1d8      	bne.n	80076e8 <_dtoa_r+0xa70>
 8007736:	2339      	movs	r3, #57	; 0x39
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	7013      	strb	r3, [r2, #0]
 800773c:	463b      	mov	r3, r7
 800773e:	461f      	mov	r7, r3
 8007740:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007744:	3b01      	subs	r3, #1
 8007746:	2a39      	cmp	r2, #57	; 0x39
 8007748:	d050      	beq.n	80077ec <_dtoa_r+0xb74>
 800774a:	3201      	adds	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e747      	b.n	80075e0 <_dtoa_r+0x968>
 8007750:	2a00      	cmp	r2, #0
 8007752:	dd03      	ble.n	800775c <_dtoa_r+0xae4>
 8007754:	2b39      	cmp	r3, #57	; 0x39
 8007756:	d0ee      	beq.n	8007736 <_dtoa_r+0xabe>
 8007758:	3301      	adds	r3, #1
 800775a:	e7c7      	b.n	80076ec <_dtoa_r+0xa74>
 800775c:	9a08      	ldr	r2, [sp, #32]
 800775e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007760:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007764:	428a      	cmp	r2, r1
 8007766:	d02a      	beq.n	80077be <_dtoa_r+0xb46>
 8007768:	4659      	mov	r1, fp
 800776a:	2300      	movs	r3, #0
 800776c:	220a      	movs	r2, #10
 800776e:	4628      	mov	r0, r5
 8007770:	f000 f8fa 	bl	8007968 <__multadd>
 8007774:	45b0      	cmp	r8, r6
 8007776:	4683      	mov	fp, r0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	f04f 020a 	mov.w	r2, #10
 8007780:	4641      	mov	r1, r8
 8007782:	4628      	mov	r0, r5
 8007784:	d107      	bne.n	8007796 <_dtoa_r+0xb1e>
 8007786:	f000 f8ef 	bl	8007968 <__multadd>
 800778a:	4680      	mov	r8, r0
 800778c:	4606      	mov	r6, r0
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	3301      	adds	r3, #1
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	e775      	b.n	8007682 <_dtoa_r+0xa0a>
 8007796:	f000 f8e7 	bl	8007968 <__multadd>
 800779a:	4631      	mov	r1, r6
 800779c:	4680      	mov	r8, r0
 800779e:	2300      	movs	r3, #0
 80077a0:	220a      	movs	r2, #10
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 f8e0 	bl	8007968 <__multadd>
 80077a8:	4606      	mov	r6, r0
 80077aa:	e7f0      	b.n	800778e <_dtoa_r+0xb16>
 80077ac:	f1b9 0f00 	cmp.w	r9, #0
 80077b0:	bfcc      	ite	gt
 80077b2:	464f      	movgt	r7, r9
 80077b4:	2701      	movle	r7, #1
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	9a03      	ldr	r2, [sp, #12]
 80077bc:	4417      	add	r7, r2
 80077be:	4659      	mov	r1, fp
 80077c0:	2201      	movs	r2, #1
 80077c2:	4628      	mov	r0, r5
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	f000 fa7b 	bl	8007cc0 <__lshift>
 80077ca:	4621      	mov	r1, r4
 80077cc:	4683      	mov	fp, r0
 80077ce:	f000 fae7 	bl	8007da0 <__mcmp>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	dcb2      	bgt.n	800773c <_dtoa_r+0xac4>
 80077d6:	d102      	bne.n	80077de <_dtoa_r+0xb66>
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	d4ae      	bmi.n	800773c <_dtoa_r+0xac4>
 80077de:	463b      	mov	r3, r7
 80077e0:	461f      	mov	r7, r3
 80077e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e6:	2a30      	cmp	r2, #48	; 0x30
 80077e8:	d0fa      	beq.n	80077e0 <_dtoa_r+0xb68>
 80077ea:	e6f9      	b.n	80075e0 <_dtoa_r+0x968>
 80077ec:	9a03      	ldr	r2, [sp, #12]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d1a5      	bne.n	800773e <_dtoa_r+0xac6>
 80077f2:	2331      	movs	r3, #49	; 0x31
 80077f4:	f10a 0a01 	add.w	sl, sl, #1
 80077f8:	e779      	b.n	80076ee <_dtoa_r+0xa76>
 80077fa:	4b14      	ldr	r3, [pc, #80]	; (800784c <_dtoa_r+0xbd4>)
 80077fc:	f7ff baa8 	b.w	8006d50 <_dtoa_r+0xd8>
 8007800:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007802:	2b00      	cmp	r3, #0
 8007804:	f47f aa81 	bne.w	8006d0a <_dtoa_r+0x92>
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <_dtoa_r+0xbd8>)
 800780a:	f7ff baa1 	b.w	8006d50 <_dtoa_r+0xd8>
 800780e:	f1b9 0f00 	cmp.w	r9, #0
 8007812:	dc03      	bgt.n	800781c <_dtoa_r+0xba4>
 8007814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007816:	2b02      	cmp	r3, #2
 8007818:	f73f aecb 	bgt.w	80075b2 <_dtoa_r+0x93a>
 800781c:	9f03      	ldr	r7, [sp, #12]
 800781e:	4621      	mov	r1, r4
 8007820:	4658      	mov	r0, fp
 8007822:	f7ff f99b 	bl	8006b5c <quorem>
 8007826:	9a03      	ldr	r2, [sp, #12]
 8007828:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800782c:	f807 3b01 	strb.w	r3, [r7], #1
 8007830:	1aba      	subs	r2, r7, r2
 8007832:	4591      	cmp	r9, r2
 8007834:	ddba      	ble.n	80077ac <_dtoa_r+0xb34>
 8007836:	4659      	mov	r1, fp
 8007838:	2300      	movs	r3, #0
 800783a:	220a      	movs	r2, #10
 800783c:	4628      	mov	r0, r5
 800783e:	f000 f893 	bl	8007968 <__multadd>
 8007842:	4683      	mov	fp, r0
 8007844:	e7eb      	b.n	800781e <_dtoa_r+0xba6>
 8007846:	bf00      	nop
 8007848:	080097ff 	.word	0x080097ff
 800784c:	0800975c 	.word	0x0800975c
 8007850:	08009780 	.word	0x08009780

08007854 <_localeconv_r>:
 8007854:	4800      	ldr	r0, [pc, #0]	; (8007858 <_localeconv_r+0x4>)
 8007856:	4770      	bx	lr
 8007858:	20000194 	.word	0x20000194

0800785c <malloc>:
 800785c:	4b02      	ldr	r3, [pc, #8]	; (8007868 <malloc+0xc>)
 800785e:	4601      	mov	r1, r0
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f000 bc1d 	b.w	80080a0 <_malloc_r>
 8007866:	bf00      	nop
 8007868:	20000040 	.word	0x20000040

0800786c <memchr>:
 800786c:	4603      	mov	r3, r0
 800786e:	b510      	push	{r4, lr}
 8007870:	b2c9      	uxtb	r1, r1
 8007872:	4402      	add	r2, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	4618      	mov	r0, r3
 8007878:	d101      	bne.n	800787e <memchr+0x12>
 800787a:	2000      	movs	r0, #0
 800787c:	e003      	b.n	8007886 <memchr+0x1a>
 800787e:	7804      	ldrb	r4, [r0, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	428c      	cmp	r4, r1
 8007884:	d1f6      	bne.n	8007874 <memchr+0x8>
 8007886:	bd10      	pop	{r4, pc}

08007888 <memcpy>:
 8007888:	440a      	add	r2, r1
 800788a:	4291      	cmp	r1, r2
 800788c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007890:	d100      	bne.n	8007894 <memcpy+0xc>
 8007892:	4770      	bx	lr
 8007894:	b510      	push	{r4, lr}
 8007896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800789a:	4291      	cmp	r1, r2
 800789c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a0:	d1f9      	bne.n	8007896 <memcpy+0xe>
 80078a2:	bd10      	pop	{r4, pc}

080078a4 <_Balloc>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078a8:	4604      	mov	r4, r0
 80078aa:	460d      	mov	r5, r1
 80078ac:	b976      	cbnz	r6, 80078cc <_Balloc+0x28>
 80078ae:	2010      	movs	r0, #16
 80078b0:	f7ff ffd4 	bl	800785c <malloc>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6260      	str	r0, [r4, #36]	; 0x24
 80078b8:	b920      	cbnz	r0, 80078c4 <_Balloc+0x20>
 80078ba:	2166      	movs	r1, #102	; 0x66
 80078bc:	4b17      	ldr	r3, [pc, #92]	; (800791c <_Balloc+0x78>)
 80078be:	4818      	ldr	r0, [pc, #96]	; (8007920 <_Balloc+0x7c>)
 80078c0:	f000 fdce 	bl	8008460 <__assert_func>
 80078c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c8:	6006      	str	r6, [r0, #0]
 80078ca:	60c6      	str	r6, [r0, #12]
 80078cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078ce:	68f3      	ldr	r3, [r6, #12]
 80078d0:	b183      	cbz	r3, 80078f4 <_Balloc+0x50>
 80078d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078da:	b9b8      	cbnz	r0, 800790c <_Balloc+0x68>
 80078dc:	2101      	movs	r1, #1
 80078de:	fa01 f605 	lsl.w	r6, r1, r5
 80078e2:	1d72      	adds	r2, r6, #5
 80078e4:	4620      	mov	r0, r4
 80078e6:	0092      	lsls	r2, r2, #2
 80078e8:	f000 fb5e 	bl	8007fa8 <_calloc_r>
 80078ec:	b160      	cbz	r0, 8007908 <_Balloc+0x64>
 80078ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078f2:	e00e      	b.n	8007912 <_Balloc+0x6e>
 80078f4:	2221      	movs	r2, #33	; 0x21
 80078f6:	2104      	movs	r1, #4
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fb55 	bl	8007fa8 <_calloc_r>
 80078fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007900:	60f0      	str	r0, [r6, #12]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e4      	bne.n	80078d2 <_Balloc+0x2e>
 8007908:	2000      	movs	r0, #0
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	6802      	ldr	r2, [r0, #0]
 800790e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007912:	2300      	movs	r3, #0
 8007914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007918:	e7f7      	b.n	800790a <_Balloc+0x66>
 800791a:	bf00      	nop
 800791c:	0800978d 	.word	0x0800978d
 8007920:	08009810 	.word	0x08009810

08007924 <_Bfree>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007928:	4605      	mov	r5, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b976      	cbnz	r6, 800794c <_Bfree+0x28>
 800792e:	2010      	movs	r0, #16
 8007930:	f7ff ff94 	bl	800785c <malloc>
 8007934:	4602      	mov	r2, r0
 8007936:	6268      	str	r0, [r5, #36]	; 0x24
 8007938:	b920      	cbnz	r0, 8007944 <_Bfree+0x20>
 800793a:	218a      	movs	r1, #138	; 0x8a
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <_Bfree+0x3c>)
 800793e:	4809      	ldr	r0, [pc, #36]	; (8007964 <_Bfree+0x40>)
 8007940:	f000 fd8e 	bl	8008460 <__assert_func>
 8007944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007948:	6006      	str	r6, [r0, #0]
 800794a:	60c6      	str	r6, [r0, #12]
 800794c:	b13c      	cbz	r4, 800795e <_Bfree+0x3a>
 800794e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007950:	6862      	ldr	r2, [r4, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007958:	6021      	str	r1, [r4, #0]
 800795a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	0800978d 	.word	0x0800978d
 8007964:	08009810 	.word	0x08009810

08007968 <__multadd>:
 8007968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796c:	4607      	mov	r7, r0
 800796e:	460c      	mov	r4, r1
 8007970:	461e      	mov	r6, r3
 8007972:	2000      	movs	r0, #0
 8007974:	690d      	ldr	r5, [r1, #16]
 8007976:	f101 0c14 	add.w	ip, r1, #20
 800797a:	f8dc 3000 	ldr.w	r3, [ip]
 800797e:	3001      	adds	r0, #1
 8007980:	b299      	uxth	r1, r3
 8007982:	fb02 6101 	mla	r1, r2, r1, r6
 8007986:	0c1e      	lsrs	r6, r3, #16
 8007988:	0c0b      	lsrs	r3, r1, #16
 800798a:	fb02 3306 	mla	r3, r2, r6, r3
 800798e:	b289      	uxth	r1, r1
 8007990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007994:	4285      	cmp	r5, r0
 8007996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800799a:	f84c 1b04 	str.w	r1, [ip], #4
 800799e:	dcec      	bgt.n	800797a <__multadd+0x12>
 80079a0:	b30e      	cbz	r6, 80079e6 <__multadd+0x7e>
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dc19      	bgt.n	80079dc <__multadd+0x74>
 80079a8:	6861      	ldr	r1, [r4, #4]
 80079aa:	4638      	mov	r0, r7
 80079ac:	3101      	adds	r1, #1
 80079ae:	f7ff ff79 	bl	80078a4 <_Balloc>
 80079b2:	4680      	mov	r8, r0
 80079b4:	b928      	cbnz	r0, 80079c2 <__multadd+0x5a>
 80079b6:	4602      	mov	r2, r0
 80079b8:	21b5      	movs	r1, #181	; 0xb5
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <__multadd+0x84>)
 80079bc:	480c      	ldr	r0, [pc, #48]	; (80079f0 <__multadd+0x88>)
 80079be:	f000 fd4f 	bl	8008460 <__assert_func>
 80079c2:	6922      	ldr	r2, [r4, #16]
 80079c4:	f104 010c 	add.w	r1, r4, #12
 80079c8:	3202      	adds	r2, #2
 80079ca:	0092      	lsls	r2, r2, #2
 80079cc:	300c      	adds	r0, #12
 80079ce:	f7ff ff5b 	bl	8007888 <memcpy>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ffa5 	bl	8007924 <_Bfree>
 80079da:	4644      	mov	r4, r8
 80079dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079e0:	3501      	adds	r5, #1
 80079e2:	615e      	str	r6, [r3, #20]
 80079e4:	6125      	str	r5, [r4, #16]
 80079e6:	4620      	mov	r0, r4
 80079e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ec:	080097ff 	.word	0x080097ff
 80079f0:	08009810 	.word	0x08009810

080079f4 <__hi0bits>:
 80079f4:	0c02      	lsrs	r2, r0, #16
 80079f6:	0412      	lsls	r2, r2, #16
 80079f8:	4603      	mov	r3, r0
 80079fa:	b9ca      	cbnz	r2, 8007a30 <__hi0bits+0x3c>
 80079fc:	0403      	lsls	r3, r0, #16
 80079fe:	2010      	movs	r0, #16
 8007a00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a04:	bf04      	itt	eq
 8007a06:	021b      	lsleq	r3, r3, #8
 8007a08:	3008      	addeq	r0, #8
 8007a0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a0e:	bf04      	itt	eq
 8007a10:	011b      	lsleq	r3, r3, #4
 8007a12:	3004      	addeq	r0, #4
 8007a14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a18:	bf04      	itt	eq
 8007a1a:	009b      	lsleq	r3, r3, #2
 8007a1c:	3002      	addeq	r0, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	db05      	blt.n	8007a2e <__hi0bits+0x3a>
 8007a22:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a26:	f100 0001 	add.w	r0, r0, #1
 8007a2a:	bf08      	it	eq
 8007a2c:	2020      	moveq	r0, #32
 8007a2e:	4770      	bx	lr
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7e5      	b.n	8007a00 <__hi0bits+0xc>

08007a34 <__lo0bits>:
 8007a34:	6803      	ldr	r3, [r0, #0]
 8007a36:	4602      	mov	r2, r0
 8007a38:	f013 0007 	ands.w	r0, r3, #7
 8007a3c:	d00b      	beq.n	8007a56 <__lo0bits+0x22>
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	d421      	bmi.n	8007a86 <__lo0bits+0x52>
 8007a42:	0798      	lsls	r0, r3, #30
 8007a44:	bf49      	itett	mi
 8007a46:	085b      	lsrmi	r3, r3, #1
 8007a48:	089b      	lsrpl	r3, r3, #2
 8007a4a:	2001      	movmi	r0, #1
 8007a4c:	6013      	strmi	r3, [r2, #0]
 8007a4e:	bf5c      	itt	pl
 8007a50:	2002      	movpl	r0, #2
 8007a52:	6013      	strpl	r3, [r2, #0]
 8007a54:	4770      	bx	lr
 8007a56:	b299      	uxth	r1, r3
 8007a58:	b909      	cbnz	r1, 8007a5e <__lo0bits+0x2a>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	b2d9      	uxtb	r1, r3
 8007a60:	b909      	cbnz	r1, 8007a66 <__lo0bits+0x32>
 8007a62:	3008      	adds	r0, #8
 8007a64:	0a1b      	lsrs	r3, r3, #8
 8007a66:	0719      	lsls	r1, r3, #28
 8007a68:	bf04      	itt	eq
 8007a6a:	091b      	lsreq	r3, r3, #4
 8007a6c:	3004      	addeq	r0, #4
 8007a6e:	0799      	lsls	r1, r3, #30
 8007a70:	bf04      	itt	eq
 8007a72:	089b      	lsreq	r3, r3, #2
 8007a74:	3002      	addeq	r0, #2
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d403      	bmi.n	8007a82 <__lo0bits+0x4e>
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	f100 0001 	add.w	r0, r0, #1
 8007a80:	d003      	beq.n	8007a8a <__lo0bits+0x56>
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	4770      	bx	lr
 8007a86:	2000      	movs	r0, #0
 8007a88:	4770      	bx	lr
 8007a8a:	2020      	movs	r0, #32
 8007a8c:	4770      	bx	lr
	...

08007a90 <__i2b>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	2101      	movs	r1, #1
 8007a96:	f7ff ff05 	bl	80078a4 <_Balloc>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	b928      	cbnz	r0, 8007aaa <__i2b+0x1a>
 8007a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007aa2:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <__i2b+0x24>)
 8007aa4:	4804      	ldr	r0, [pc, #16]	; (8007ab8 <__i2b+0x28>)
 8007aa6:	f000 fcdb 	bl	8008460 <__assert_func>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	6144      	str	r4, [r0, #20]
 8007aae:	6103      	str	r3, [r0, #16]
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	bf00      	nop
 8007ab4:	080097ff 	.word	0x080097ff
 8007ab8:	08009810 	.word	0x08009810

08007abc <__multiply>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	690a      	ldr	r2, [r1, #16]
 8007ac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ac8:	460c      	mov	r4, r1
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bfbe      	ittt	lt
 8007ace:	460b      	movlt	r3, r1
 8007ad0:	464c      	movlt	r4, r9
 8007ad2:	4699      	movlt	r9, r3
 8007ad4:	6927      	ldr	r7, [r4, #16]
 8007ad6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	6861      	ldr	r1, [r4, #4]
 8007ade:	eb07 060a 	add.w	r6, r7, sl
 8007ae2:	42b3      	cmp	r3, r6
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	bfb8      	it	lt
 8007ae8:	3101      	addlt	r1, #1
 8007aea:	f7ff fedb 	bl	80078a4 <_Balloc>
 8007aee:	b930      	cbnz	r0, 8007afe <__multiply+0x42>
 8007af0:	4602      	mov	r2, r0
 8007af2:	f240 115d 	movw	r1, #349	; 0x15d
 8007af6:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <__multiply+0x148>)
 8007af8:	4843      	ldr	r0, [pc, #268]	; (8007c08 <__multiply+0x14c>)
 8007afa:	f000 fcb1 	bl	8008460 <__assert_func>
 8007afe:	f100 0514 	add.w	r5, r0, #20
 8007b02:	462b      	mov	r3, r5
 8007b04:	2200      	movs	r2, #0
 8007b06:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b0a:	4543      	cmp	r3, r8
 8007b0c:	d321      	bcc.n	8007b52 <__multiply+0x96>
 8007b0e:	f104 0314 	add.w	r3, r4, #20
 8007b12:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b16:	f109 0314 	add.w	r3, r9, #20
 8007b1a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	1b3a      	subs	r2, r7, r4
 8007b22:	3a15      	subs	r2, #21
 8007b24:	f022 0203 	bic.w	r2, r2, #3
 8007b28:	3204      	adds	r2, #4
 8007b2a:	f104 0115 	add.w	r1, r4, #21
 8007b2e:	428f      	cmp	r7, r1
 8007b30:	bf38      	it	cc
 8007b32:	2204      	movcc	r2, #4
 8007b34:	9201      	str	r2, [sp, #4]
 8007b36:	9a02      	ldr	r2, [sp, #8]
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d80c      	bhi.n	8007b58 <__multiply+0x9c>
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	dd03      	ble.n	8007b4a <__multiply+0x8e>
 8007b42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d059      	beq.n	8007bfe <__multiply+0x142>
 8007b4a:	6106      	str	r6, [r0, #16]
 8007b4c:	b005      	add	sp, #20
 8007b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b52:	f843 2b04 	str.w	r2, [r3], #4
 8007b56:	e7d8      	b.n	8007b0a <__multiply+0x4e>
 8007b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b5c:	f1ba 0f00 	cmp.w	sl, #0
 8007b60:	d023      	beq.n	8007baa <__multiply+0xee>
 8007b62:	46a9      	mov	r9, r5
 8007b64:	f04f 0c00 	mov.w	ip, #0
 8007b68:	f104 0e14 	add.w	lr, r4, #20
 8007b6c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b70:	f8d9 1000 	ldr.w	r1, [r9]
 8007b74:	fa1f fb82 	uxth.w	fp, r2
 8007b78:	b289      	uxth	r1, r1
 8007b7a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b7e:	4461      	add	r1, ip
 8007b80:	f8d9 c000 	ldr.w	ip, [r9]
 8007b84:	0c12      	lsrs	r2, r2, #16
 8007b86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b8a:	fb0a c202 	mla	r2, sl, r2, ip
 8007b8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b92:	b289      	uxth	r1, r1
 8007b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b98:	4577      	cmp	r7, lr
 8007b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b9e:	f849 1b04 	str.w	r1, [r9], #4
 8007ba2:	d8e3      	bhi.n	8007b6c <__multiply+0xb0>
 8007ba4:	9a01      	ldr	r2, [sp, #4]
 8007ba6:	f845 c002 	str.w	ip, [r5, r2]
 8007baa:	9a03      	ldr	r2, [sp, #12]
 8007bac:	3304      	adds	r3, #4
 8007bae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bb2:	f1b9 0f00 	cmp.w	r9, #0
 8007bb6:	d020      	beq.n	8007bfa <__multiply+0x13e>
 8007bb8:	46ae      	mov	lr, r5
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	6829      	ldr	r1, [r5, #0]
 8007bc0:	f104 0c14 	add.w	ip, r4, #20
 8007bc4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bcc:	b289      	uxth	r1, r1
 8007bce:	fb09 220b 	mla	r2, r9, fp, r2
 8007bd2:	4492      	add	sl, r2
 8007bd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007bd8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bdc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007be0:	f8be 1000 	ldrh.w	r1, [lr]
 8007be4:	0c12      	lsrs	r2, r2, #16
 8007be6:	fb09 1102 	mla	r1, r9, r2, r1
 8007bea:	4567      	cmp	r7, ip
 8007bec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007bf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bf4:	d8e6      	bhi.n	8007bc4 <__multiply+0x108>
 8007bf6:	9a01      	ldr	r2, [sp, #4]
 8007bf8:	50a9      	str	r1, [r5, r2]
 8007bfa:	3504      	adds	r5, #4
 8007bfc:	e79b      	b.n	8007b36 <__multiply+0x7a>
 8007bfe:	3e01      	subs	r6, #1
 8007c00:	e79d      	b.n	8007b3e <__multiply+0x82>
 8007c02:	bf00      	nop
 8007c04:	080097ff 	.word	0x080097ff
 8007c08:	08009810 	.word	0x08009810

08007c0c <__pow5mult>:
 8007c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c10:	4615      	mov	r5, r2
 8007c12:	f012 0203 	ands.w	r2, r2, #3
 8007c16:	4606      	mov	r6, r0
 8007c18:	460f      	mov	r7, r1
 8007c1a:	d007      	beq.n	8007c2c <__pow5mult+0x20>
 8007c1c:	4c25      	ldr	r4, [pc, #148]	; (8007cb4 <__pow5mult+0xa8>)
 8007c1e:	3a01      	subs	r2, #1
 8007c20:	2300      	movs	r3, #0
 8007c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c26:	f7ff fe9f 	bl	8007968 <__multadd>
 8007c2a:	4607      	mov	r7, r0
 8007c2c:	10ad      	asrs	r5, r5, #2
 8007c2e:	d03d      	beq.n	8007cac <__pow5mult+0xa0>
 8007c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c32:	b97c      	cbnz	r4, 8007c54 <__pow5mult+0x48>
 8007c34:	2010      	movs	r0, #16
 8007c36:	f7ff fe11 	bl	800785c <malloc>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c3e:	b928      	cbnz	r0, 8007c4c <__pow5mult+0x40>
 8007c40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c44:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <__pow5mult+0xac>)
 8007c46:	481d      	ldr	r0, [pc, #116]	; (8007cbc <__pow5mult+0xb0>)
 8007c48:	f000 fc0a 	bl	8008460 <__assert_func>
 8007c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c50:	6004      	str	r4, [r0, #0]
 8007c52:	60c4      	str	r4, [r0, #12]
 8007c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c5c:	b94c      	cbnz	r4, 8007c72 <__pow5mult+0x66>
 8007c5e:	f240 2171 	movw	r1, #625	; 0x271
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff ff14 	bl	8007a90 <__i2b>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c70:	6003      	str	r3, [r0, #0]
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	07eb      	lsls	r3, r5, #31
 8007c78:	d50a      	bpl.n	8007c90 <__pow5mult+0x84>
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ff1c 	bl	8007abc <__multiply>
 8007c84:	4680      	mov	r8, r0
 8007c86:	4639      	mov	r1, r7
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff fe4b 	bl	8007924 <_Bfree>
 8007c8e:	4647      	mov	r7, r8
 8007c90:	106d      	asrs	r5, r5, #1
 8007c92:	d00b      	beq.n	8007cac <__pow5mult+0xa0>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	b938      	cbnz	r0, 8007ca8 <__pow5mult+0x9c>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff ff0d 	bl	8007abc <__multiply>
 8007ca2:	6020      	str	r0, [r4, #0]
 8007ca4:	f8c0 9000 	str.w	r9, [r0]
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e7e4      	b.n	8007c76 <__pow5mult+0x6a>
 8007cac:	4638      	mov	r0, r7
 8007cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb2:	bf00      	nop
 8007cb4:	08009960 	.word	0x08009960
 8007cb8:	0800978d 	.word	0x0800978d
 8007cbc:	08009810 	.word	0x08009810

08007cc0 <__lshift>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	4691      	mov	r9, r2
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6849      	ldr	r1, [r1, #4]
 8007cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cd8:	f108 0601 	add.w	r6, r8, #1
 8007cdc:	42b3      	cmp	r3, r6
 8007cde:	db0b      	blt.n	8007cf8 <__lshift+0x38>
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7ff fddf 	bl	80078a4 <_Balloc>
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b948      	cbnz	r0, 8007cfe <__lshift+0x3e>
 8007cea:	4602      	mov	r2, r0
 8007cec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cf0:	4b29      	ldr	r3, [pc, #164]	; (8007d98 <__lshift+0xd8>)
 8007cf2:	482a      	ldr	r0, [pc, #168]	; (8007d9c <__lshift+0xdc>)
 8007cf4:	f000 fbb4 	bl	8008460 <__assert_func>
 8007cf8:	3101      	adds	r1, #1
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	e7ee      	b.n	8007cdc <__lshift+0x1c>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f100 0114 	add.w	r1, r0, #20
 8007d04:	f100 0210 	add.w	r2, r0, #16
 8007d08:	4618      	mov	r0, r3
 8007d0a:	4553      	cmp	r3, sl
 8007d0c:	db37      	blt.n	8007d7e <__lshift+0xbe>
 8007d0e:	6920      	ldr	r0, [r4, #16]
 8007d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d14:	f104 0314 	add.w	r3, r4, #20
 8007d18:	f019 091f 	ands.w	r9, r9, #31
 8007d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d24:	d02f      	beq.n	8007d86 <__lshift+0xc6>
 8007d26:	468a      	mov	sl, r1
 8007d28:	f04f 0c00 	mov.w	ip, #0
 8007d2c:	f1c9 0e20 	rsb	lr, r9, #32
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	fa02 f209 	lsl.w	r2, r2, r9
 8007d36:	ea42 020c 	orr.w	r2, r2, ip
 8007d3a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d42:	4298      	cmp	r0, r3
 8007d44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d48:	d8f2      	bhi.n	8007d30 <__lshift+0x70>
 8007d4a:	1b03      	subs	r3, r0, r4
 8007d4c:	3b15      	subs	r3, #21
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	3304      	adds	r3, #4
 8007d54:	f104 0215 	add.w	r2, r4, #21
 8007d58:	4290      	cmp	r0, r2
 8007d5a:	bf38      	it	cc
 8007d5c:	2304      	movcc	r3, #4
 8007d5e:	f841 c003 	str.w	ip, [r1, r3]
 8007d62:	f1bc 0f00 	cmp.w	ip, #0
 8007d66:	d001      	beq.n	8007d6c <__lshift+0xac>
 8007d68:	f108 0602 	add.w	r6, r8, #2
 8007d6c:	3e01      	subs	r6, #1
 8007d6e:	4638      	mov	r0, r7
 8007d70:	4621      	mov	r1, r4
 8007d72:	612e      	str	r6, [r5, #16]
 8007d74:	f7ff fdd6 	bl	8007924 <_Bfree>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d82:	3301      	adds	r3, #1
 8007d84:	e7c1      	b.n	8007d0a <__lshift+0x4a>
 8007d86:	3904      	subs	r1, #4
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	4298      	cmp	r0, r3
 8007d8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d92:	d8f9      	bhi.n	8007d88 <__lshift+0xc8>
 8007d94:	e7ea      	b.n	8007d6c <__lshift+0xac>
 8007d96:	bf00      	nop
 8007d98:	080097ff 	.word	0x080097ff
 8007d9c:	08009810 	.word	0x08009810

08007da0 <__mcmp>:
 8007da0:	4603      	mov	r3, r0
 8007da2:	690a      	ldr	r2, [r1, #16]
 8007da4:	6900      	ldr	r0, [r0, #16]
 8007da6:	b530      	push	{r4, r5, lr}
 8007da8:	1a80      	subs	r0, r0, r2
 8007daa:	d10d      	bne.n	8007dc8 <__mcmp+0x28>
 8007dac:	3314      	adds	r3, #20
 8007dae:	3114      	adds	r1, #20
 8007db0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007db4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dc0:	4295      	cmp	r5, r2
 8007dc2:	d002      	beq.n	8007dca <__mcmp+0x2a>
 8007dc4:	d304      	bcc.n	8007dd0 <__mcmp+0x30>
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	bd30      	pop	{r4, r5, pc}
 8007dca:	42a3      	cmp	r3, r4
 8007dcc:	d3f4      	bcc.n	8007db8 <__mcmp+0x18>
 8007dce:	e7fb      	b.n	8007dc8 <__mcmp+0x28>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e7f8      	b.n	8007dc8 <__mcmp+0x28>
	...

08007dd8 <__mdiff>:
 8007dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	460d      	mov	r5, r1
 8007dde:	4607      	mov	r7, r0
 8007de0:	4611      	mov	r1, r2
 8007de2:	4628      	mov	r0, r5
 8007de4:	4614      	mov	r4, r2
 8007de6:	f7ff ffdb 	bl	8007da0 <__mcmp>
 8007dea:	1e06      	subs	r6, r0, #0
 8007dec:	d111      	bne.n	8007e12 <__mdiff+0x3a>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff fd57 	bl	80078a4 <_Balloc>
 8007df6:	4602      	mov	r2, r0
 8007df8:	b928      	cbnz	r0, 8007e06 <__mdiff+0x2e>
 8007dfa:	f240 2132 	movw	r1, #562	; 0x232
 8007dfe:	4b3a      	ldr	r3, [pc, #232]	; (8007ee8 <__mdiff+0x110>)
 8007e00:	483a      	ldr	r0, [pc, #232]	; (8007eec <__mdiff+0x114>)
 8007e02:	f000 fb2d 	bl	8008460 <__assert_func>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	bfa4      	itt	ge
 8007e14:	4623      	movge	r3, r4
 8007e16:	462c      	movge	r4, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	6861      	ldr	r1, [r4, #4]
 8007e1c:	bfa6      	itte	ge
 8007e1e:	461d      	movge	r5, r3
 8007e20:	2600      	movge	r6, #0
 8007e22:	2601      	movlt	r6, #1
 8007e24:	f7ff fd3e 	bl	80078a4 <_Balloc>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	b918      	cbnz	r0, 8007e34 <__mdiff+0x5c>
 8007e2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e30:	4b2d      	ldr	r3, [pc, #180]	; (8007ee8 <__mdiff+0x110>)
 8007e32:	e7e5      	b.n	8007e00 <__mdiff+0x28>
 8007e34:	f102 0814 	add.w	r8, r2, #20
 8007e38:	46c2      	mov	sl, r8
 8007e3a:	f04f 0c00 	mov.w	ip, #0
 8007e3e:	6927      	ldr	r7, [r4, #16]
 8007e40:	60c6      	str	r6, [r0, #12]
 8007e42:	692e      	ldr	r6, [r5, #16]
 8007e44:	f104 0014 	add.w	r0, r4, #20
 8007e48:	f105 0914 	add.w	r9, r5, #20
 8007e4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e54:	3410      	adds	r4, #16
 8007e56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007e5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e5e:	fa1f f18b 	uxth.w	r1, fp
 8007e62:	448c      	add	ip, r1
 8007e64:	b299      	uxth	r1, r3
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	ebac 0101 	sub.w	r1, ip, r1
 8007e6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e74:	b289      	uxth	r1, r1
 8007e76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e7a:	454e      	cmp	r6, r9
 8007e7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e80:	f84a 3b04 	str.w	r3, [sl], #4
 8007e84:	d8e7      	bhi.n	8007e56 <__mdiff+0x7e>
 8007e86:	1b73      	subs	r3, r6, r5
 8007e88:	3b15      	subs	r3, #21
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	3515      	adds	r5, #21
 8007e90:	3304      	adds	r3, #4
 8007e92:	42ae      	cmp	r6, r5
 8007e94:	bf38      	it	cc
 8007e96:	2304      	movcc	r3, #4
 8007e98:	4418      	add	r0, r3
 8007e9a:	4443      	add	r3, r8
 8007e9c:	461e      	mov	r6, r3
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	4575      	cmp	r5, lr
 8007ea2:	d30e      	bcc.n	8007ec2 <__mdiff+0xea>
 8007ea4:	f10e 0103 	add.w	r1, lr, #3
 8007ea8:	1a09      	subs	r1, r1, r0
 8007eaa:	f021 0103 	bic.w	r1, r1, #3
 8007eae:	3803      	subs	r0, #3
 8007eb0:	4586      	cmp	lr, r0
 8007eb2:	bf38      	it	cc
 8007eb4:	2100      	movcc	r1, #0
 8007eb6:	4419      	add	r1, r3
 8007eb8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ebc:	b18b      	cbz	r3, 8007ee2 <__mdiff+0x10a>
 8007ebe:	6117      	str	r7, [r2, #16]
 8007ec0:	e7a4      	b.n	8007e0c <__mdiff+0x34>
 8007ec2:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ec6:	fa1f f188 	uxth.w	r1, r8
 8007eca:	4461      	add	r1, ip
 8007ecc:	140c      	asrs	r4, r1, #16
 8007ece:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ed2:	b289      	uxth	r1, r1
 8007ed4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ed8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007edc:	f846 1b04 	str.w	r1, [r6], #4
 8007ee0:	e7de      	b.n	8007ea0 <__mdiff+0xc8>
 8007ee2:	3f01      	subs	r7, #1
 8007ee4:	e7e8      	b.n	8007eb8 <__mdiff+0xe0>
 8007ee6:	bf00      	nop
 8007ee8:	080097ff 	.word	0x080097ff
 8007eec:	08009810 	.word	0x08009810

08007ef0 <__d2b>:
 8007ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007efa:	4690      	mov	r8, r2
 8007efc:	461d      	mov	r5, r3
 8007efe:	f7ff fcd1 	bl	80078a4 <_Balloc>
 8007f02:	4604      	mov	r4, r0
 8007f04:	b930      	cbnz	r0, 8007f14 <__d2b+0x24>
 8007f06:	4602      	mov	r2, r0
 8007f08:	f240 310a 	movw	r1, #778	; 0x30a
 8007f0c:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <__d2b+0xb0>)
 8007f0e:	4825      	ldr	r0, [pc, #148]	; (8007fa4 <__d2b+0xb4>)
 8007f10:	f000 faa6 	bl	8008460 <__assert_func>
 8007f14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f1c:	bb2d      	cbnz	r5, 8007f6a <__d2b+0x7a>
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	f1b8 0300 	subs.w	r3, r8, #0
 8007f24:	d026      	beq.n	8007f74 <__d2b+0x84>
 8007f26:	4668      	mov	r0, sp
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	f7ff fd83 	bl	8007a34 <__lo0bits>
 8007f2e:	9900      	ldr	r1, [sp, #0]
 8007f30:	b1f0      	cbz	r0, 8007f70 <__d2b+0x80>
 8007f32:	9a01      	ldr	r2, [sp, #4]
 8007f34:	f1c0 0320 	rsb	r3, r0, #32
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	40c2      	lsrs	r2, r0
 8007f40:	6163      	str	r3, [r4, #20]
 8007f42:	9201      	str	r2, [sp, #4]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bf14      	ite	ne
 8007f4a:	2102      	movne	r1, #2
 8007f4c:	2101      	moveq	r1, #1
 8007f4e:	61a3      	str	r3, [r4, #24]
 8007f50:	6121      	str	r1, [r4, #16]
 8007f52:	b1c5      	cbz	r5, 8007f86 <__d2b+0x96>
 8007f54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f58:	4405      	add	r5, r0
 8007f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f5e:	603d      	str	r5, [r7, #0]
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	b002      	add	sp, #8
 8007f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f6e:	e7d6      	b.n	8007f1e <__d2b+0x2e>
 8007f70:	6161      	str	r1, [r4, #20]
 8007f72:	e7e7      	b.n	8007f44 <__d2b+0x54>
 8007f74:	a801      	add	r0, sp, #4
 8007f76:	f7ff fd5d 	bl	8007a34 <__lo0bits>
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	6121      	str	r1, [r4, #16]
 8007f80:	6163      	str	r3, [r4, #20]
 8007f82:	3020      	adds	r0, #32
 8007f84:	e7e5      	b.n	8007f52 <__d2b+0x62>
 8007f86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f8e:	6038      	str	r0, [r7, #0]
 8007f90:	6918      	ldr	r0, [r3, #16]
 8007f92:	f7ff fd2f 	bl	80079f4 <__hi0bits>
 8007f96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f9a:	6031      	str	r1, [r6, #0]
 8007f9c:	e7e1      	b.n	8007f62 <__d2b+0x72>
 8007f9e:	bf00      	nop
 8007fa0:	080097ff 	.word	0x080097ff
 8007fa4:	08009810 	.word	0x08009810

08007fa8 <_calloc_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	fba1 5402 	umull	r5, r4, r1, r2
 8007fae:	b934      	cbnz	r4, 8007fbe <_calloc_r+0x16>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f000 f875 	bl	80080a0 <_malloc_r>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <_calloc_r+0x1e>
 8007fba:	4630      	mov	r0, r6
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	220c      	movs	r2, #12
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	6002      	str	r2, [r0, #0]
 8007fc4:	e7f9      	b.n	8007fba <_calloc_r+0x12>
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7fe f93f 	bl	800624c <memset>
 8007fce:	e7f4      	b.n	8007fba <_calloc_r+0x12>

08007fd0 <_free_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d040      	beq.n	800805a <_free_r+0x8a>
 8007fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fdc:	1f0c      	subs	r4, r1, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb8      	it	lt
 8007fe2:	18e4      	addlt	r4, r4, r3
 8007fe4:	f000 fa98 	bl	8008518 <__malloc_lock>
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <_free_r+0x8c>)
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	b933      	cbnz	r3, 8007ffc <_free_r+0x2c>
 8007fee:	6063      	str	r3, [r4, #4]
 8007ff0:	6014      	str	r4, [r2, #0]
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff8:	f000 ba94 	b.w	8008524 <__malloc_unlock>
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	d908      	bls.n	8008012 <_free_r+0x42>
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	1821      	adds	r1, r4, r0
 8008004:	428b      	cmp	r3, r1
 8008006:	bf01      	itttt	eq
 8008008:	6819      	ldreq	r1, [r3, #0]
 800800a:	685b      	ldreq	r3, [r3, #4]
 800800c:	1809      	addeq	r1, r1, r0
 800800e:	6021      	streq	r1, [r4, #0]
 8008010:	e7ed      	b.n	8007fee <_free_r+0x1e>
 8008012:	461a      	mov	r2, r3
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	b10b      	cbz	r3, 800801c <_free_r+0x4c>
 8008018:	42a3      	cmp	r3, r4
 800801a:	d9fa      	bls.n	8008012 <_free_r+0x42>
 800801c:	6811      	ldr	r1, [r2, #0]
 800801e:	1850      	adds	r0, r2, r1
 8008020:	42a0      	cmp	r0, r4
 8008022:	d10b      	bne.n	800803c <_free_r+0x6c>
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	4401      	add	r1, r0
 8008028:	1850      	adds	r0, r2, r1
 800802a:	4283      	cmp	r3, r0
 800802c:	6011      	str	r1, [r2, #0]
 800802e:	d1e0      	bne.n	8007ff2 <_free_r+0x22>
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4401      	add	r1, r0
 8008036:	6011      	str	r1, [r2, #0]
 8008038:	6053      	str	r3, [r2, #4]
 800803a:	e7da      	b.n	8007ff2 <_free_r+0x22>
 800803c:	d902      	bls.n	8008044 <_free_r+0x74>
 800803e:	230c      	movs	r3, #12
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	e7d6      	b.n	8007ff2 <_free_r+0x22>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	1821      	adds	r1, r4, r0
 8008048:	428b      	cmp	r3, r1
 800804a:	bf01      	itttt	eq
 800804c:	6819      	ldreq	r1, [r3, #0]
 800804e:	685b      	ldreq	r3, [r3, #4]
 8008050:	1809      	addeq	r1, r1, r0
 8008052:	6021      	streq	r1, [r4, #0]
 8008054:	6063      	str	r3, [r4, #4]
 8008056:	6054      	str	r4, [r2, #4]
 8008058:	e7cb      	b.n	8007ff2 <_free_r+0x22>
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	200002fc 	.word	0x200002fc

08008060 <sbrk_aligned>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4e0e      	ldr	r6, [pc, #56]	; (800809c <sbrk_aligned+0x3c>)
 8008064:	460c      	mov	r4, r1
 8008066:	6831      	ldr	r1, [r6, #0]
 8008068:	4605      	mov	r5, r0
 800806a:	b911      	cbnz	r1, 8008072 <sbrk_aligned+0x12>
 800806c:	f000 f9e8 	bl	8008440 <_sbrk_r>
 8008070:	6030      	str	r0, [r6, #0]
 8008072:	4621      	mov	r1, r4
 8008074:	4628      	mov	r0, r5
 8008076:	f000 f9e3 	bl	8008440 <_sbrk_r>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d00a      	beq.n	8008094 <sbrk_aligned+0x34>
 800807e:	1cc4      	adds	r4, r0, #3
 8008080:	f024 0403 	bic.w	r4, r4, #3
 8008084:	42a0      	cmp	r0, r4
 8008086:	d007      	beq.n	8008098 <sbrk_aligned+0x38>
 8008088:	1a21      	subs	r1, r4, r0
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f9d8 	bl	8008440 <_sbrk_r>
 8008090:	3001      	adds	r0, #1
 8008092:	d101      	bne.n	8008098 <sbrk_aligned+0x38>
 8008094:	f04f 34ff 	mov.w	r4, #4294967295
 8008098:	4620      	mov	r0, r4
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	20000300 	.word	0x20000300

080080a0 <_malloc_r>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	1ccd      	adds	r5, r1, #3
 80080a6:	f025 0503 	bic.w	r5, r5, #3
 80080aa:	3508      	adds	r5, #8
 80080ac:	2d0c      	cmp	r5, #12
 80080ae:	bf38      	it	cc
 80080b0:	250c      	movcc	r5, #12
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	4607      	mov	r7, r0
 80080b6:	db01      	blt.n	80080bc <_malloc_r+0x1c>
 80080b8:	42a9      	cmp	r1, r5
 80080ba:	d905      	bls.n	80080c8 <_malloc_r+0x28>
 80080bc:	230c      	movs	r3, #12
 80080be:	2600      	movs	r6, #0
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4630      	mov	r0, r6
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	4e2e      	ldr	r6, [pc, #184]	; (8008184 <_malloc_r+0xe4>)
 80080ca:	f000 fa25 	bl	8008518 <__malloc_lock>
 80080ce:	6833      	ldr	r3, [r6, #0]
 80080d0:	461c      	mov	r4, r3
 80080d2:	bb34      	cbnz	r4, 8008122 <_malloc_r+0x82>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7ff ffc2 	bl	8008060 <sbrk_aligned>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	4604      	mov	r4, r0
 80080e0:	d14d      	bne.n	800817e <_malloc_r+0xde>
 80080e2:	6834      	ldr	r4, [r6, #0]
 80080e4:	4626      	mov	r6, r4
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d140      	bne.n	800816c <_malloc_r+0xcc>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	4631      	mov	r1, r6
 80080ee:	4638      	mov	r0, r7
 80080f0:	eb04 0803 	add.w	r8, r4, r3
 80080f4:	f000 f9a4 	bl	8008440 <_sbrk_r>
 80080f8:	4580      	cmp	r8, r0
 80080fa:	d13a      	bne.n	8008172 <_malloc_r+0xd2>
 80080fc:	6821      	ldr	r1, [r4, #0]
 80080fe:	3503      	adds	r5, #3
 8008100:	1a6d      	subs	r5, r5, r1
 8008102:	f025 0503 	bic.w	r5, r5, #3
 8008106:	3508      	adds	r5, #8
 8008108:	2d0c      	cmp	r5, #12
 800810a:	bf38      	it	cc
 800810c:	250c      	movcc	r5, #12
 800810e:	4638      	mov	r0, r7
 8008110:	4629      	mov	r1, r5
 8008112:	f7ff ffa5 	bl	8008060 <sbrk_aligned>
 8008116:	3001      	adds	r0, #1
 8008118:	d02b      	beq.n	8008172 <_malloc_r+0xd2>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	442b      	add	r3, r5
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	e00e      	b.n	8008140 <_malloc_r+0xa0>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	1b52      	subs	r2, r2, r5
 8008126:	d41e      	bmi.n	8008166 <_malloc_r+0xc6>
 8008128:	2a0b      	cmp	r2, #11
 800812a:	d916      	bls.n	800815a <_malloc_r+0xba>
 800812c:	1961      	adds	r1, r4, r5
 800812e:	42a3      	cmp	r3, r4
 8008130:	6025      	str	r5, [r4, #0]
 8008132:	bf18      	it	ne
 8008134:	6059      	strne	r1, [r3, #4]
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	bf08      	it	eq
 800813a:	6031      	streq	r1, [r6, #0]
 800813c:	5162      	str	r2, [r4, r5]
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	4638      	mov	r0, r7
 8008142:	f104 060b 	add.w	r6, r4, #11
 8008146:	f000 f9ed 	bl	8008524 <__malloc_unlock>
 800814a:	f026 0607 	bic.w	r6, r6, #7
 800814e:	1d23      	adds	r3, r4, #4
 8008150:	1af2      	subs	r2, r6, r3
 8008152:	d0b6      	beq.n	80080c2 <_malloc_r+0x22>
 8008154:	1b9b      	subs	r3, r3, r6
 8008156:	50a3      	str	r3, [r4, r2]
 8008158:	e7b3      	b.n	80080c2 <_malloc_r+0x22>
 800815a:	6862      	ldr	r2, [r4, #4]
 800815c:	42a3      	cmp	r3, r4
 800815e:	bf0c      	ite	eq
 8008160:	6032      	streq	r2, [r6, #0]
 8008162:	605a      	strne	r2, [r3, #4]
 8008164:	e7ec      	b.n	8008140 <_malloc_r+0xa0>
 8008166:	4623      	mov	r3, r4
 8008168:	6864      	ldr	r4, [r4, #4]
 800816a:	e7b2      	b.n	80080d2 <_malloc_r+0x32>
 800816c:	4634      	mov	r4, r6
 800816e:	6876      	ldr	r6, [r6, #4]
 8008170:	e7b9      	b.n	80080e6 <_malloc_r+0x46>
 8008172:	230c      	movs	r3, #12
 8008174:	4638      	mov	r0, r7
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	f000 f9d4 	bl	8008524 <__malloc_unlock>
 800817c:	e7a1      	b.n	80080c2 <_malloc_r+0x22>
 800817e:	6025      	str	r5, [r4, #0]
 8008180:	e7de      	b.n	8008140 <_malloc_r+0xa0>
 8008182:	bf00      	nop
 8008184:	200002fc 	.word	0x200002fc

08008188 <__ssputs_r>:
 8008188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	688e      	ldr	r6, [r1, #8]
 800818e:	4682      	mov	sl, r0
 8008190:	429e      	cmp	r6, r3
 8008192:	460c      	mov	r4, r1
 8008194:	4690      	mov	r8, r2
 8008196:	461f      	mov	r7, r3
 8008198:	d838      	bhi.n	800820c <__ssputs_r+0x84>
 800819a:	898a      	ldrh	r2, [r1, #12]
 800819c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081a0:	d032      	beq.n	8008208 <__ssputs_r+0x80>
 80081a2:	6825      	ldr	r5, [r4, #0]
 80081a4:	6909      	ldr	r1, [r1, #16]
 80081a6:	3301      	adds	r3, #1
 80081a8:	eba5 0901 	sub.w	r9, r5, r1
 80081ac:	6965      	ldr	r5, [r4, #20]
 80081ae:	444b      	add	r3, r9
 80081b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081b8:	106d      	asrs	r5, r5, #1
 80081ba:	429d      	cmp	r5, r3
 80081bc:	bf38      	it	cc
 80081be:	461d      	movcc	r5, r3
 80081c0:	0553      	lsls	r3, r2, #21
 80081c2:	d531      	bpl.n	8008228 <__ssputs_r+0xa0>
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7ff ff6b 	bl	80080a0 <_malloc_r>
 80081ca:	4606      	mov	r6, r0
 80081cc:	b950      	cbnz	r0, 80081e4 <__ssputs_r+0x5c>
 80081ce:	230c      	movs	r3, #12
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	f8ca 3000 	str.w	r3, [sl]
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e4:	464a      	mov	r2, r9
 80081e6:	6921      	ldr	r1, [r4, #16]
 80081e8:	f7ff fb4e 	bl	8007888 <memcpy>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	6126      	str	r6, [r4, #16]
 80081fa:	444e      	add	r6, r9
 80081fc:	6026      	str	r6, [r4, #0]
 80081fe:	463e      	mov	r6, r7
 8008200:	6165      	str	r5, [r4, #20]
 8008202:	eba5 0509 	sub.w	r5, r5, r9
 8008206:	60a5      	str	r5, [r4, #8]
 8008208:	42be      	cmp	r6, r7
 800820a:	d900      	bls.n	800820e <__ssputs_r+0x86>
 800820c:	463e      	mov	r6, r7
 800820e:	4632      	mov	r2, r6
 8008210:	4641      	mov	r1, r8
 8008212:	6820      	ldr	r0, [r4, #0]
 8008214:	f000 f966 	bl	80084e4 <memmove>
 8008218:	68a3      	ldr	r3, [r4, #8]
 800821a:	2000      	movs	r0, #0
 800821c:	1b9b      	subs	r3, r3, r6
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	4433      	add	r3, r6
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	e7db      	b.n	80081e0 <__ssputs_r+0x58>
 8008228:	462a      	mov	r2, r5
 800822a:	f000 f981 	bl	8008530 <_realloc_r>
 800822e:	4606      	mov	r6, r0
 8008230:	2800      	cmp	r0, #0
 8008232:	d1e1      	bne.n	80081f8 <__ssputs_r+0x70>
 8008234:	4650      	mov	r0, sl
 8008236:	6921      	ldr	r1, [r4, #16]
 8008238:	f7ff feca 	bl	8007fd0 <_free_r>
 800823c:	e7c7      	b.n	80081ce <__ssputs_r+0x46>
	...

08008240 <_svfiprintf_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	4698      	mov	r8, r3
 8008246:	898b      	ldrh	r3, [r1, #12]
 8008248:	4607      	mov	r7, r0
 800824a:	061b      	lsls	r3, r3, #24
 800824c:	460d      	mov	r5, r1
 800824e:	4614      	mov	r4, r2
 8008250:	b09d      	sub	sp, #116	; 0x74
 8008252:	d50e      	bpl.n	8008272 <_svfiprintf_r+0x32>
 8008254:	690b      	ldr	r3, [r1, #16]
 8008256:	b963      	cbnz	r3, 8008272 <_svfiprintf_r+0x32>
 8008258:	2140      	movs	r1, #64	; 0x40
 800825a:	f7ff ff21 	bl	80080a0 <_malloc_r>
 800825e:	6028      	str	r0, [r5, #0]
 8008260:	6128      	str	r0, [r5, #16]
 8008262:	b920      	cbnz	r0, 800826e <_svfiprintf_r+0x2e>
 8008264:	230c      	movs	r3, #12
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	e0d1      	b.n	8008412 <_svfiprintf_r+0x1d2>
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	616b      	str	r3, [r5, #20]
 8008272:	2300      	movs	r3, #0
 8008274:	9309      	str	r3, [sp, #36]	; 0x24
 8008276:	2320      	movs	r3, #32
 8008278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800827c:	2330      	movs	r3, #48	; 0x30
 800827e:	f04f 0901 	mov.w	r9, #1
 8008282:	f8cd 800c 	str.w	r8, [sp, #12]
 8008286:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800842c <_svfiprintf_r+0x1ec>
 800828a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800828e:	4623      	mov	r3, r4
 8008290:	469a      	mov	sl, r3
 8008292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008296:	b10a      	cbz	r2, 800829c <_svfiprintf_r+0x5c>
 8008298:	2a25      	cmp	r2, #37	; 0x25
 800829a:	d1f9      	bne.n	8008290 <_svfiprintf_r+0x50>
 800829c:	ebba 0b04 	subs.w	fp, sl, r4
 80082a0:	d00b      	beq.n	80082ba <_svfiprintf_r+0x7a>
 80082a2:	465b      	mov	r3, fp
 80082a4:	4622      	mov	r2, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	4638      	mov	r0, r7
 80082aa:	f7ff ff6d 	bl	8008188 <__ssputs_r>
 80082ae:	3001      	adds	r0, #1
 80082b0:	f000 80aa 	beq.w	8008408 <_svfiprintf_r+0x1c8>
 80082b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b6:	445a      	add	r2, fp
 80082b8:	9209      	str	r2, [sp, #36]	; 0x24
 80082ba:	f89a 3000 	ldrb.w	r3, [sl]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 80a2 	beq.w	8008408 <_svfiprintf_r+0x1c8>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ce:	f10a 0a01 	add.w	sl, sl, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	9307      	str	r3, [sp, #28]
 80082d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082da:	931a      	str	r3, [sp, #104]	; 0x68
 80082dc:	4654      	mov	r4, sl
 80082de:	2205      	movs	r2, #5
 80082e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e4:	4851      	ldr	r0, [pc, #324]	; (800842c <_svfiprintf_r+0x1ec>)
 80082e6:	f7ff fac1 	bl	800786c <memchr>
 80082ea:	9a04      	ldr	r2, [sp, #16]
 80082ec:	b9d8      	cbnz	r0, 8008326 <_svfiprintf_r+0xe6>
 80082ee:	06d0      	lsls	r0, r2, #27
 80082f0:	bf44      	itt	mi
 80082f2:	2320      	movmi	r3, #32
 80082f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f8:	0711      	lsls	r1, r2, #28
 80082fa:	bf44      	itt	mi
 80082fc:	232b      	movmi	r3, #43	; 0x2b
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008302:	f89a 3000 	ldrb.w	r3, [sl]
 8008306:	2b2a      	cmp	r3, #42	; 0x2a
 8008308:	d015      	beq.n	8008336 <_svfiprintf_r+0xf6>
 800830a:	4654      	mov	r4, sl
 800830c:	2000      	movs	r0, #0
 800830e:	f04f 0c0a 	mov.w	ip, #10
 8008312:	9a07      	ldr	r2, [sp, #28]
 8008314:	4621      	mov	r1, r4
 8008316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800831a:	3b30      	subs	r3, #48	; 0x30
 800831c:	2b09      	cmp	r3, #9
 800831e:	d94e      	bls.n	80083be <_svfiprintf_r+0x17e>
 8008320:	b1b0      	cbz	r0, 8008350 <_svfiprintf_r+0x110>
 8008322:	9207      	str	r2, [sp, #28]
 8008324:	e014      	b.n	8008350 <_svfiprintf_r+0x110>
 8008326:	eba0 0308 	sub.w	r3, r0, r8
 800832a:	fa09 f303 	lsl.w	r3, r9, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	46a2      	mov	sl, r4
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	e7d2      	b.n	80082dc <_svfiprintf_r+0x9c>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	1d19      	adds	r1, r3, #4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	9103      	str	r1, [sp, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfbb      	ittet	lt
 8008342:	425b      	neglt	r3, r3
 8008344:	f042 0202 	orrlt.w	r2, r2, #2
 8008348:	9307      	strge	r3, [sp, #28]
 800834a:	9307      	strlt	r3, [sp, #28]
 800834c:	bfb8      	it	lt
 800834e:	9204      	strlt	r2, [sp, #16]
 8008350:	7823      	ldrb	r3, [r4, #0]
 8008352:	2b2e      	cmp	r3, #46	; 0x2e
 8008354:	d10c      	bne.n	8008370 <_svfiprintf_r+0x130>
 8008356:	7863      	ldrb	r3, [r4, #1]
 8008358:	2b2a      	cmp	r3, #42	; 0x2a
 800835a:	d135      	bne.n	80083c8 <_svfiprintf_r+0x188>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	3402      	adds	r4, #2
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	9203      	str	r2, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfb8      	it	lt
 800836a:	f04f 33ff 	movlt.w	r3, #4294967295
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008430 <_svfiprintf_r+0x1f0>
 8008374:	2203      	movs	r2, #3
 8008376:	4650      	mov	r0, sl
 8008378:	7821      	ldrb	r1, [r4, #0]
 800837a:	f7ff fa77 	bl	800786c <memchr>
 800837e:	b140      	cbz	r0, 8008392 <_svfiprintf_r+0x152>
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	eba0 000a 	sub.w	r0, r0, sl
 8008386:	fa03 f000 	lsl.w	r0, r3, r0
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	3401      	adds	r4, #1
 800838e:	4303      	orrs	r3, r0
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	2206      	movs	r2, #6
 8008398:	4826      	ldr	r0, [pc, #152]	; (8008434 <_svfiprintf_r+0x1f4>)
 800839a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800839e:	f7ff fa65 	bl	800786c <memchr>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d038      	beq.n	8008418 <_svfiprintf_r+0x1d8>
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <_svfiprintf_r+0x1f8>)
 80083a8:	bb1b      	cbnz	r3, 80083f2 <_svfiprintf_r+0x1b2>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	3307      	adds	r3, #7
 80083ae:	f023 0307 	bic.w	r3, r3, #7
 80083b2:	3308      	adds	r3, #8
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	4433      	add	r3, r6
 80083ba:	9309      	str	r3, [sp, #36]	; 0x24
 80083bc:	e767      	b.n	800828e <_svfiprintf_r+0x4e>
 80083be:	460c      	mov	r4, r1
 80083c0:	2001      	movs	r0, #1
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	e7a5      	b.n	8008314 <_svfiprintf_r+0xd4>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4619      	mov	r1, r3
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083da:	3a30      	subs	r2, #48	; 0x30
 80083dc:	2a09      	cmp	r2, #9
 80083de:	d903      	bls.n	80083e8 <_svfiprintf_r+0x1a8>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c5      	beq.n	8008370 <_svfiprintf_r+0x130>
 80083e4:	9105      	str	r1, [sp, #20]
 80083e6:	e7c3      	b.n	8008370 <_svfiprintf_r+0x130>
 80083e8:	4604      	mov	r4, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	e7f0      	b.n	80083d4 <_svfiprintf_r+0x194>
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	462a      	mov	r2, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	4b10      	ldr	r3, [pc, #64]	; (800843c <_svfiprintf_r+0x1fc>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	f7fd ffcb 	bl	8006398 <_printf_float>
 8008402:	1c42      	adds	r2, r0, #1
 8008404:	4606      	mov	r6, r0
 8008406:	d1d6      	bne.n	80083b6 <_svfiprintf_r+0x176>
 8008408:	89ab      	ldrh	r3, [r5, #12]
 800840a:	065b      	lsls	r3, r3, #25
 800840c:	f53f af2c 	bmi.w	8008268 <_svfiprintf_r+0x28>
 8008410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008412:	b01d      	add	sp, #116	; 0x74
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	ab03      	add	r3, sp, #12
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	462a      	mov	r2, r5
 800841e:	4638      	mov	r0, r7
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <_svfiprintf_r+0x1fc>)
 8008422:	a904      	add	r1, sp, #16
 8008424:	f7fe fa54 	bl	80068d0 <_printf_i>
 8008428:	e7eb      	b.n	8008402 <_svfiprintf_r+0x1c2>
 800842a:	bf00      	nop
 800842c:	0800996c 	.word	0x0800996c
 8008430:	08009972 	.word	0x08009972
 8008434:	08009976 	.word	0x08009976
 8008438:	08006399 	.word	0x08006399
 800843c:	08008189 	.word	0x08008189

08008440 <_sbrk_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	2300      	movs	r3, #0
 8008444:	4d05      	ldr	r5, [pc, #20]	; (800845c <_sbrk_r+0x1c>)
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7fa fb70 	bl	8002b30 <_sbrk>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_sbrk_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_sbrk_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20000304 	.word	0x20000304

08008460 <__assert_func>:
 8008460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008462:	4614      	mov	r4, r2
 8008464:	461a      	mov	r2, r3
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <__assert_func+0x2c>)
 8008468:	4605      	mov	r5, r0
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68d8      	ldr	r0, [r3, #12]
 800846e:	b14c      	cbz	r4, 8008484 <__assert_func+0x24>
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <__assert_func+0x30>)
 8008472:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008476:	9100      	str	r1, [sp, #0]
 8008478:	462b      	mov	r3, r5
 800847a:	4906      	ldr	r1, [pc, #24]	; (8008494 <__assert_func+0x34>)
 800847c:	f000 f80e 	bl	800849c <fiprintf>
 8008480:	f000 faaa 	bl	80089d8 <abort>
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <__assert_func+0x38>)
 8008486:	461c      	mov	r4, r3
 8008488:	e7f3      	b.n	8008472 <__assert_func+0x12>
 800848a:	bf00      	nop
 800848c:	20000040 	.word	0x20000040
 8008490:	0800997d 	.word	0x0800997d
 8008494:	0800998a 	.word	0x0800998a
 8008498:	080099b8 	.word	0x080099b8

0800849c <fiprintf>:
 800849c:	b40e      	push	{r1, r2, r3}
 800849e:	b503      	push	{r0, r1, lr}
 80084a0:	4601      	mov	r1, r0
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	4805      	ldr	r0, [pc, #20]	; (80084bc <fiprintf+0x20>)
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	f000 f895 	bl	80085dc <_vfiprintf_r>
 80084b2:	b002      	add	sp, #8
 80084b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b8:	b003      	add	sp, #12
 80084ba:	4770      	bx	lr
 80084bc:	20000040 	.word	0x20000040

080084c0 <__ascii_mbtowc>:
 80084c0:	b082      	sub	sp, #8
 80084c2:	b901      	cbnz	r1, 80084c6 <__ascii_mbtowc+0x6>
 80084c4:	a901      	add	r1, sp, #4
 80084c6:	b142      	cbz	r2, 80084da <__ascii_mbtowc+0x1a>
 80084c8:	b14b      	cbz	r3, 80084de <__ascii_mbtowc+0x1e>
 80084ca:	7813      	ldrb	r3, [r2, #0]
 80084cc:	600b      	str	r3, [r1, #0]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	1e10      	subs	r0, r2, #0
 80084d2:	bf18      	it	ne
 80084d4:	2001      	movne	r0, #1
 80084d6:	b002      	add	sp, #8
 80084d8:	4770      	bx	lr
 80084da:	4610      	mov	r0, r2
 80084dc:	e7fb      	b.n	80084d6 <__ascii_mbtowc+0x16>
 80084de:	f06f 0001 	mvn.w	r0, #1
 80084e2:	e7f8      	b.n	80084d6 <__ascii_mbtowc+0x16>

080084e4 <memmove>:
 80084e4:	4288      	cmp	r0, r1
 80084e6:	b510      	push	{r4, lr}
 80084e8:	eb01 0402 	add.w	r4, r1, r2
 80084ec:	d902      	bls.n	80084f4 <memmove+0x10>
 80084ee:	4284      	cmp	r4, r0
 80084f0:	4623      	mov	r3, r4
 80084f2:	d807      	bhi.n	8008504 <memmove+0x20>
 80084f4:	1e43      	subs	r3, r0, #1
 80084f6:	42a1      	cmp	r1, r4
 80084f8:	d008      	beq.n	800850c <memmove+0x28>
 80084fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008502:	e7f8      	b.n	80084f6 <memmove+0x12>
 8008504:	4601      	mov	r1, r0
 8008506:	4402      	add	r2, r0
 8008508:	428a      	cmp	r2, r1
 800850a:	d100      	bne.n	800850e <memmove+0x2a>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008516:	e7f7      	b.n	8008508 <memmove+0x24>

08008518 <__malloc_lock>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__malloc_lock+0x8>)
 800851a:	f000 bc19 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 800851e:	bf00      	nop
 8008520:	20000308 	.word	0x20000308

08008524 <__malloc_unlock>:
 8008524:	4801      	ldr	r0, [pc, #4]	; (800852c <__malloc_unlock+0x8>)
 8008526:	f000 bc14 	b.w	8008d52 <__retarget_lock_release_recursive>
 800852a:	bf00      	nop
 800852c:	20000308 	.word	0x20000308

08008530 <_realloc_r>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4680      	mov	r8, r0
 8008536:	4614      	mov	r4, r2
 8008538:	460e      	mov	r6, r1
 800853a:	b921      	cbnz	r1, 8008546 <_realloc_r+0x16>
 800853c:	4611      	mov	r1, r2
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f7ff bdad 	b.w	80080a0 <_malloc_r>
 8008546:	b92a      	cbnz	r2, 8008554 <_realloc_r+0x24>
 8008548:	f7ff fd42 	bl	8007fd0 <_free_r>
 800854c:	4625      	mov	r5, r4
 800854e:	4628      	mov	r0, r5
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	f000 fc64 	bl	8008e20 <_malloc_usable_size_r>
 8008558:	4284      	cmp	r4, r0
 800855a:	4607      	mov	r7, r0
 800855c:	d802      	bhi.n	8008564 <_realloc_r+0x34>
 800855e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008562:	d812      	bhi.n	800858a <_realloc_r+0x5a>
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff fd9a 	bl	80080a0 <_malloc_r>
 800856c:	4605      	mov	r5, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	d0ed      	beq.n	800854e <_realloc_r+0x1e>
 8008572:	42bc      	cmp	r4, r7
 8008574:	4622      	mov	r2, r4
 8008576:	4631      	mov	r1, r6
 8008578:	bf28      	it	cs
 800857a:	463a      	movcs	r2, r7
 800857c:	f7ff f984 	bl	8007888 <memcpy>
 8008580:	4631      	mov	r1, r6
 8008582:	4640      	mov	r0, r8
 8008584:	f7ff fd24 	bl	8007fd0 <_free_r>
 8008588:	e7e1      	b.n	800854e <_realloc_r+0x1e>
 800858a:	4635      	mov	r5, r6
 800858c:	e7df      	b.n	800854e <_realloc_r+0x1e>

0800858e <__sfputc_r>:
 800858e:	6893      	ldr	r3, [r2, #8]
 8008590:	b410      	push	{r4}
 8008592:	3b01      	subs	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	6093      	str	r3, [r2, #8]
 8008598:	da07      	bge.n	80085aa <__sfputc_r+0x1c>
 800859a:	6994      	ldr	r4, [r2, #24]
 800859c:	42a3      	cmp	r3, r4
 800859e:	db01      	blt.n	80085a4 <__sfputc_r+0x16>
 80085a0:	290a      	cmp	r1, #10
 80085a2:	d102      	bne.n	80085aa <__sfputc_r+0x1c>
 80085a4:	bc10      	pop	{r4}
 80085a6:	f000 b949 	b.w	800883c <__swbuf_r>
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	1c58      	adds	r0, r3, #1
 80085ae:	6010      	str	r0, [r2, #0]
 80085b0:	7019      	strb	r1, [r3, #0]
 80085b2:	4608      	mov	r0, r1
 80085b4:	bc10      	pop	{r4}
 80085b6:	4770      	bx	lr

080085b8 <__sfputs_r>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	18d5      	adds	r5, r2, r3
 80085c2:	42ac      	cmp	r4, r5
 80085c4:	d101      	bne.n	80085ca <__sfputs_r+0x12>
 80085c6:	2000      	movs	r0, #0
 80085c8:	e007      	b.n	80085da <__sfputs_r+0x22>
 80085ca:	463a      	mov	r2, r7
 80085cc:	4630      	mov	r0, r6
 80085ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d2:	f7ff ffdc 	bl	800858e <__sfputc_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d1f3      	bne.n	80085c2 <__sfputs_r+0xa>
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085dc <_vfiprintf_r>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	460d      	mov	r5, r1
 80085e2:	4614      	mov	r4, r2
 80085e4:	4698      	mov	r8, r3
 80085e6:	4606      	mov	r6, r0
 80085e8:	b09d      	sub	sp, #116	; 0x74
 80085ea:	b118      	cbz	r0, 80085f4 <_vfiprintf_r+0x18>
 80085ec:	6983      	ldr	r3, [r0, #24]
 80085ee:	b90b      	cbnz	r3, 80085f4 <_vfiprintf_r+0x18>
 80085f0:	f000 fb10 	bl	8008c14 <__sinit>
 80085f4:	4b89      	ldr	r3, [pc, #548]	; (800881c <_vfiprintf_r+0x240>)
 80085f6:	429d      	cmp	r5, r3
 80085f8:	d11b      	bne.n	8008632 <_vfiprintf_r+0x56>
 80085fa:	6875      	ldr	r5, [r6, #4]
 80085fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x32>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x32>
 8008608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860a:	f000 fba1 	bl	8008d50 <__retarget_lock_acquire_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	071b      	lsls	r3, r3, #28
 8008612:	d501      	bpl.n	8008618 <_vfiprintf_r+0x3c>
 8008614:	692b      	ldr	r3, [r5, #16]
 8008616:	b9eb      	cbnz	r3, 8008654 <_vfiprintf_r+0x78>
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f000 f96e 	bl	80088fc <__swsetup_r>
 8008620:	b1c0      	cbz	r0, 8008654 <_vfiprintf_r+0x78>
 8008622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008624:	07dc      	lsls	r4, r3, #31
 8008626:	d50e      	bpl.n	8008646 <_vfiprintf_r+0x6a>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	b01d      	add	sp, #116	; 0x74
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008632:	4b7b      	ldr	r3, [pc, #492]	; (8008820 <_vfiprintf_r+0x244>)
 8008634:	429d      	cmp	r5, r3
 8008636:	d101      	bne.n	800863c <_vfiprintf_r+0x60>
 8008638:	68b5      	ldr	r5, [r6, #8]
 800863a:	e7df      	b.n	80085fc <_vfiprintf_r+0x20>
 800863c:	4b79      	ldr	r3, [pc, #484]	; (8008824 <_vfiprintf_r+0x248>)
 800863e:	429d      	cmp	r5, r3
 8008640:	bf08      	it	eq
 8008642:	68f5      	ldreq	r5, [r6, #12]
 8008644:	e7da      	b.n	80085fc <_vfiprintf_r+0x20>
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	0598      	lsls	r0, r3, #22
 800864a:	d4ed      	bmi.n	8008628 <_vfiprintf_r+0x4c>
 800864c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864e:	f000 fb80 	bl	8008d52 <__retarget_lock_release_recursive>
 8008652:	e7e9      	b.n	8008628 <_vfiprintf_r+0x4c>
 8008654:	2300      	movs	r3, #0
 8008656:	9309      	str	r3, [sp, #36]	; 0x24
 8008658:	2320      	movs	r3, #32
 800865a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865e:	2330      	movs	r3, #48	; 0x30
 8008660:	f04f 0901 	mov.w	r9, #1
 8008664:	f8cd 800c 	str.w	r8, [sp, #12]
 8008668:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008828 <_vfiprintf_r+0x24c>
 800866c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008670:	4623      	mov	r3, r4
 8008672:	469a      	mov	sl, r3
 8008674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008678:	b10a      	cbz	r2, 800867e <_vfiprintf_r+0xa2>
 800867a:	2a25      	cmp	r2, #37	; 0x25
 800867c:	d1f9      	bne.n	8008672 <_vfiprintf_r+0x96>
 800867e:	ebba 0b04 	subs.w	fp, sl, r4
 8008682:	d00b      	beq.n	800869c <_vfiprintf_r+0xc0>
 8008684:	465b      	mov	r3, fp
 8008686:	4622      	mov	r2, r4
 8008688:	4629      	mov	r1, r5
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ff94 	bl	80085b8 <__sfputs_r>
 8008690:	3001      	adds	r0, #1
 8008692:	f000 80aa 	beq.w	80087ea <_vfiprintf_r+0x20e>
 8008696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008698:	445a      	add	r2, fp
 800869a:	9209      	str	r2, [sp, #36]	; 0x24
 800869c:	f89a 3000 	ldrb.w	r3, [sl]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80a2 	beq.w	80087ea <_vfiprintf_r+0x20e>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b0:	f10a 0a01 	add.w	sl, sl, #1
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	9307      	str	r3, [sp, #28]
 80086b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086bc:	931a      	str	r3, [sp, #104]	; 0x68
 80086be:	4654      	mov	r4, sl
 80086c0:	2205      	movs	r2, #5
 80086c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c6:	4858      	ldr	r0, [pc, #352]	; (8008828 <_vfiprintf_r+0x24c>)
 80086c8:	f7ff f8d0 	bl	800786c <memchr>
 80086cc:	9a04      	ldr	r2, [sp, #16]
 80086ce:	b9d8      	cbnz	r0, 8008708 <_vfiprintf_r+0x12c>
 80086d0:	06d1      	lsls	r1, r2, #27
 80086d2:	bf44      	itt	mi
 80086d4:	2320      	movmi	r3, #32
 80086d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086da:	0713      	lsls	r3, r2, #28
 80086dc:	bf44      	itt	mi
 80086de:	232b      	movmi	r3, #43	; 0x2b
 80086e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e4:	f89a 3000 	ldrb.w	r3, [sl]
 80086e8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ea:	d015      	beq.n	8008718 <_vfiprintf_r+0x13c>
 80086ec:	4654      	mov	r4, sl
 80086ee:	2000      	movs	r0, #0
 80086f0:	f04f 0c0a 	mov.w	ip, #10
 80086f4:	9a07      	ldr	r2, [sp, #28]
 80086f6:	4621      	mov	r1, r4
 80086f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086fc:	3b30      	subs	r3, #48	; 0x30
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d94e      	bls.n	80087a0 <_vfiprintf_r+0x1c4>
 8008702:	b1b0      	cbz	r0, 8008732 <_vfiprintf_r+0x156>
 8008704:	9207      	str	r2, [sp, #28]
 8008706:	e014      	b.n	8008732 <_vfiprintf_r+0x156>
 8008708:	eba0 0308 	sub.w	r3, r0, r8
 800870c:	fa09 f303 	lsl.w	r3, r9, r3
 8008710:	4313      	orrs	r3, r2
 8008712:	46a2      	mov	sl, r4
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	e7d2      	b.n	80086be <_vfiprintf_r+0xe2>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	1d19      	adds	r1, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	9103      	str	r1, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	bfbb      	ittet	lt
 8008724:	425b      	neglt	r3, r3
 8008726:	f042 0202 	orrlt.w	r2, r2, #2
 800872a:	9307      	strge	r3, [sp, #28]
 800872c:	9307      	strlt	r3, [sp, #28]
 800872e:	bfb8      	it	lt
 8008730:	9204      	strlt	r2, [sp, #16]
 8008732:	7823      	ldrb	r3, [r4, #0]
 8008734:	2b2e      	cmp	r3, #46	; 0x2e
 8008736:	d10c      	bne.n	8008752 <_vfiprintf_r+0x176>
 8008738:	7863      	ldrb	r3, [r4, #1]
 800873a:	2b2a      	cmp	r3, #42	; 0x2a
 800873c:	d135      	bne.n	80087aa <_vfiprintf_r+0x1ce>
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	3402      	adds	r4, #2
 8008742:	1d1a      	adds	r2, r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	9203      	str	r2, [sp, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	bfb8      	it	lt
 800874c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800882c <_vfiprintf_r+0x250>
 8008756:	2203      	movs	r2, #3
 8008758:	4650      	mov	r0, sl
 800875a:	7821      	ldrb	r1, [r4, #0]
 800875c:	f7ff f886 	bl	800786c <memchr>
 8008760:	b140      	cbz	r0, 8008774 <_vfiprintf_r+0x198>
 8008762:	2340      	movs	r3, #64	; 0x40
 8008764:	eba0 000a 	sub.w	r0, r0, sl
 8008768:	fa03 f000 	lsl.w	r0, r3, r0
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	3401      	adds	r4, #1
 8008770:	4303      	orrs	r3, r0
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008778:	2206      	movs	r2, #6
 800877a:	482d      	ldr	r0, [pc, #180]	; (8008830 <_vfiprintf_r+0x254>)
 800877c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008780:	f7ff f874 	bl	800786c <memchr>
 8008784:	2800      	cmp	r0, #0
 8008786:	d03f      	beq.n	8008808 <_vfiprintf_r+0x22c>
 8008788:	4b2a      	ldr	r3, [pc, #168]	; (8008834 <_vfiprintf_r+0x258>)
 800878a:	bb1b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x1f8>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	3307      	adds	r3, #7
 8008790:	f023 0307 	bic.w	r3, r3, #7
 8008794:	3308      	adds	r3, #8
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879a:	443b      	add	r3, r7
 800879c:	9309      	str	r3, [sp, #36]	; 0x24
 800879e:	e767      	b.n	8008670 <_vfiprintf_r+0x94>
 80087a0:	460c      	mov	r4, r1
 80087a2:	2001      	movs	r0, #1
 80087a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a8:	e7a5      	b.n	80086f6 <_vfiprintf_r+0x11a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f04f 0c0a 	mov.w	ip, #10
 80087b0:	4619      	mov	r1, r3
 80087b2:	3401      	adds	r4, #1
 80087b4:	9305      	str	r3, [sp, #20]
 80087b6:	4620      	mov	r0, r4
 80087b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087bc:	3a30      	subs	r2, #48	; 0x30
 80087be:	2a09      	cmp	r2, #9
 80087c0:	d903      	bls.n	80087ca <_vfiprintf_r+0x1ee>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0c5      	beq.n	8008752 <_vfiprintf_r+0x176>
 80087c6:	9105      	str	r1, [sp, #20]
 80087c8:	e7c3      	b.n	8008752 <_vfiprintf_r+0x176>
 80087ca:	4604      	mov	r4, r0
 80087cc:	2301      	movs	r3, #1
 80087ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d2:	e7f0      	b.n	80087b6 <_vfiprintf_r+0x1da>
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	462a      	mov	r2, r5
 80087da:	4630      	mov	r0, r6
 80087dc:	4b16      	ldr	r3, [pc, #88]	; (8008838 <_vfiprintf_r+0x25c>)
 80087de:	a904      	add	r1, sp, #16
 80087e0:	f7fd fdda 	bl	8006398 <_printf_float>
 80087e4:	4607      	mov	r7, r0
 80087e6:	1c78      	adds	r0, r7, #1
 80087e8:	d1d6      	bne.n	8008798 <_vfiprintf_r+0x1bc>
 80087ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ec:	07d9      	lsls	r1, r3, #31
 80087ee:	d405      	bmi.n	80087fc <_vfiprintf_r+0x220>
 80087f0:	89ab      	ldrh	r3, [r5, #12]
 80087f2:	059a      	lsls	r2, r3, #22
 80087f4:	d402      	bmi.n	80087fc <_vfiprintf_r+0x220>
 80087f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f8:	f000 faab 	bl	8008d52 <__retarget_lock_release_recursive>
 80087fc:	89ab      	ldrh	r3, [r5, #12]
 80087fe:	065b      	lsls	r3, r3, #25
 8008800:	f53f af12 	bmi.w	8008628 <_vfiprintf_r+0x4c>
 8008804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008806:	e711      	b.n	800862c <_vfiprintf_r+0x50>
 8008808:	ab03      	add	r3, sp, #12
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	462a      	mov	r2, r5
 800880e:	4630      	mov	r0, r6
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <_vfiprintf_r+0x25c>)
 8008812:	a904      	add	r1, sp, #16
 8008814:	f7fe f85c 	bl	80068d0 <_printf_i>
 8008818:	e7e4      	b.n	80087e4 <_vfiprintf_r+0x208>
 800881a:	bf00      	nop
 800881c:	08009ae4 	.word	0x08009ae4
 8008820:	08009b04 	.word	0x08009b04
 8008824:	08009ac4 	.word	0x08009ac4
 8008828:	0800996c 	.word	0x0800996c
 800882c:	08009972 	.word	0x08009972
 8008830:	08009976 	.word	0x08009976
 8008834:	08006399 	.word	0x08006399
 8008838:	080085b9 	.word	0x080085b9

0800883c <__swbuf_r>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	460e      	mov	r6, r1
 8008840:	4614      	mov	r4, r2
 8008842:	4605      	mov	r5, r0
 8008844:	b118      	cbz	r0, 800884e <__swbuf_r+0x12>
 8008846:	6983      	ldr	r3, [r0, #24]
 8008848:	b90b      	cbnz	r3, 800884e <__swbuf_r+0x12>
 800884a:	f000 f9e3 	bl	8008c14 <__sinit>
 800884e:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <__swbuf_r+0x98>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d12b      	bne.n	80088ac <__swbuf_r+0x70>
 8008854:	686c      	ldr	r4, [r5, #4]
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	071a      	lsls	r2, r3, #28
 800885e:	d52f      	bpl.n	80088c0 <__swbuf_r+0x84>
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b36b      	cbz	r3, 80088c0 <__swbuf_r+0x84>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	b2f6      	uxtb	r6, r6
 800886a:	1ac0      	subs	r0, r0, r3
 800886c:	6963      	ldr	r3, [r4, #20]
 800886e:	4637      	mov	r7, r6
 8008870:	4283      	cmp	r3, r0
 8008872:	dc04      	bgt.n	800887e <__swbuf_r+0x42>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f938 	bl	8008aec <_fflush_r>
 800887c:	bb30      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	3001      	adds	r0, #1
 8008882:	3b01      	subs	r3, #1
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	701e      	strb	r6, [r3, #0]
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	4283      	cmp	r3, r0
 8008892:	d004      	beq.n	800889e <__swbuf_r+0x62>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	07db      	lsls	r3, r3, #31
 8008898:	d506      	bpl.n	80088a8 <__swbuf_r+0x6c>
 800889a:	2e0a      	cmp	r6, #10
 800889c:	d104      	bne.n	80088a8 <__swbuf_r+0x6c>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 f923 	bl	8008aec <_fflush_r>
 80088a6:	b988      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 80088a8:	4638      	mov	r0, r7
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <__swbuf_r+0x9c>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d101      	bne.n	80088b6 <__swbuf_r+0x7a>
 80088b2:	68ac      	ldr	r4, [r5, #8]
 80088b4:	e7cf      	b.n	8008856 <__swbuf_r+0x1a>
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <__swbuf_r+0xa0>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	bf08      	it	eq
 80088bc:	68ec      	ldreq	r4, [r5, #12]
 80088be:	e7ca      	b.n	8008856 <__swbuf_r+0x1a>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f81a 	bl	80088fc <__swsetup_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0cb      	beq.n	8008864 <__swbuf_r+0x28>
 80088cc:	f04f 37ff 	mov.w	r7, #4294967295
 80088d0:	e7ea      	b.n	80088a8 <__swbuf_r+0x6c>
 80088d2:	bf00      	nop
 80088d4:	08009ae4 	.word	0x08009ae4
 80088d8:	08009b04 	.word	0x08009b04
 80088dc:	08009ac4 	.word	0x08009ac4

080088e0 <__ascii_wctomb>:
 80088e0:	4603      	mov	r3, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	b141      	cbz	r1, 80088f8 <__ascii_wctomb+0x18>
 80088e6:	2aff      	cmp	r2, #255	; 0xff
 80088e8:	d904      	bls.n	80088f4 <__ascii_wctomb+0x14>
 80088ea:	228a      	movs	r2, #138	; 0x8a
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	4770      	bx	lr
 80088f4:	2001      	movs	r0, #1
 80088f6:	700a      	strb	r2, [r1, #0]
 80088f8:	4770      	bx	lr
	...

080088fc <__swsetup_r>:
 80088fc:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <__swsetup_r+0xcc>)
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	681d      	ldr	r5, [r3, #0]
 8008902:	4606      	mov	r6, r0
 8008904:	460c      	mov	r4, r1
 8008906:	b125      	cbz	r5, 8008912 <__swsetup_r+0x16>
 8008908:	69ab      	ldr	r3, [r5, #24]
 800890a:	b913      	cbnz	r3, 8008912 <__swsetup_r+0x16>
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f981 	bl	8008c14 <__sinit>
 8008912:	4b2e      	ldr	r3, [pc, #184]	; (80089cc <__swsetup_r+0xd0>)
 8008914:	429c      	cmp	r4, r3
 8008916:	d10f      	bne.n	8008938 <__swsetup_r+0x3c>
 8008918:	686c      	ldr	r4, [r5, #4]
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008920:	0719      	lsls	r1, r3, #28
 8008922:	d42c      	bmi.n	800897e <__swsetup_r+0x82>
 8008924:	06dd      	lsls	r5, r3, #27
 8008926:	d411      	bmi.n	800894c <__swsetup_r+0x50>
 8008928:	2309      	movs	r3, #9
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	e03e      	b.n	80089b6 <__swsetup_r+0xba>
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <__swsetup_r+0xd4>)
 800893a:	429c      	cmp	r4, r3
 800893c:	d101      	bne.n	8008942 <__swsetup_r+0x46>
 800893e:	68ac      	ldr	r4, [r5, #8]
 8008940:	e7eb      	b.n	800891a <__swsetup_r+0x1e>
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <__swsetup_r+0xd8>)
 8008944:	429c      	cmp	r4, r3
 8008946:	bf08      	it	eq
 8008948:	68ec      	ldreq	r4, [r5, #12]
 800894a:	e7e6      	b.n	800891a <__swsetup_r+0x1e>
 800894c:	0758      	lsls	r0, r3, #29
 800894e:	d512      	bpl.n	8008976 <__swsetup_r+0x7a>
 8008950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008952:	b141      	cbz	r1, 8008966 <__swsetup_r+0x6a>
 8008954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008958:	4299      	cmp	r1, r3
 800895a:	d002      	beq.n	8008962 <__swsetup_r+0x66>
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff fb37 	bl	8007fd0 <_free_r>
 8008962:	2300      	movs	r3, #0
 8008964:	6363      	str	r3, [r4, #52]	; 0x34
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	2300      	movs	r3, #0
 8008970:	6063      	str	r3, [r4, #4]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f043 0308 	orr.w	r3, r3, #8
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	b94b      	cbnz	r3, 8008996 <__swsetup_r+0x9a>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800898c:	d003      	beq.n	8008996 <__swsetup_r+0x9a>
 800898e:	4621      	mov	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f000 fa05 	bl	8008da0 <__smakebuf_r>
 8008996:	89a0      	ldrh	r0, [r4, #12]
 8008998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800899c:	f010 0301 	ands.w	r3, r0, #1
 80089a0:	d00a      	beq.n	80089b8 <__swsetup_r+0xbc>
 80089a2:	2300      	movs	r3, #0
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	425b      	negs	r3, r3
 80089aa:	61a3      	str	r3, [r4, #24]
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	b943      	cbnz	r3, 80089c2 <__swsetup_r+0xc6>
 80089b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089b4:	d1ba      	bne.n	800892c <__swsetup_r+0x30>
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	0781      	lsls	r1, r0, #30
 80089ba:	bf58      	it	pl
 80089bc:	6963      	ldrpl	r3, [r4, #20]
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	e7f4      	b.n	80089ac <__swsetup_r+0xb0>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7f7      	b.n	80089b6 <__swsetup_r+0xba>
 80089c6:	bf00      	nop
 80089c8:	20000040 	.word	0x20000040
 80089cc:	08009ae4 	.word	0x08009ae4
 80089d0:	08009b04 	.word	0x08009b04
 80089d4:	08009ac4 	.word	0x08009ac4

080089d8 <abort>:
 80089d8:	2006      	movs	r0, #6
 80089da:	b508      	push	{r3, lr}
 80089dc:	f000 fa50 	bl	8008e80 <raise>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f7fa f832 	bl	8002a4a <_exit>
	...

080089e8 <__sflush_r>:
 80089e8:	898a      	ldrh	r2, [r1, #12]
 80089ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ec:	4605      	mov	r5, r0
 80089ee:	0710      	lsls	r0, r2, #28
 80089f0:	460c      	mov	r4, r1
 80089f2:	d457      	bmi.n	8008aa4 <__sflush_r+0xbc>
 80089f4:	684b      	ldr	r3, [r1, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc04      	bgt.n	8008a04 <__sflush_r+0x1c>
 80089fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc01      	bgt.n	8008a04 <__sflush_r+0x1c>
 8008a00:	2000      	movs	r0, #0
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d0fa      	beq.n	8008a00 <__sflush_r+0x18>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a10:	682f      	ldr	r7, [r5, #0]
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	d032      	beq.n	8008a7c <__sflush_r+0x94>
 8008a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	075a      	lsls	r2, r3, #29
 8008a1c:	d505      	bpl.n	8008a2a <__sflush_r+0x42>
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	1ac0      	subs	r0, r0, r3
 8008a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a24:	b10b      	cbz	r3, 8008a2a <__sflush_r+0x42>
 8008a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a28:	1ac0      	subs	r0, r0, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a30:	4628      	mov	r0, r5
 8008a32:	6a21      	ldr	r1, [r4, #32]
 8008a34:	47b0      	blx	r6
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	d106      	bne.n	8008a4a <__sflush_r+0x62>
 8008a3c:	6829      	ldr	r1, [r5, #0]
 8008a3e:	291d      	cmp	r1, #29
 8008a40:	d82c      	bhi.n	8008a9c <__sflush_r+0xb4>
 8008a42:	4a29      	ldr	r2, [pc, #164]	; (8008ae8 <__sflush_r+0x100>)
 8008a44:	40ca      	lsrs	r2, r1
 8008a46:	07d6      	lsls	r6, r2, #31
 8008a48:	d528      	bpl.n	8008a9c <__sflush_r+0xb4>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	6062      	str	r2, [r4, #4]
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	04d9      	lsls	r1, r3, #19
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	d504      	bpl.n	8008a60 <__sflush_r+0x78>
 8008a56:	1c42      	adds	r2, r0, #1
 8008a58:	d101      	bne.n	8008a5e <__sflush_r+0x76>
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	b903      	cbnz	r3, 8008a60 <__sflush_r+0x78>
 8008a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a62:	602f      	str	r7, [r5, #0]
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d0cb      	beq.n	8008a00 <__sflush_r+0x18>
 8008a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <__sflush_r+0x8e>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7ff faad 	bl	8007fd0 <_free_r>
 8008a76:	2000      	movs	r0, #0
 8008a78:	6360      	str	r0, [r4, #52]	; 0x34
 8008a7a:	e7c2      	b.n	8008a02 <__sflush_r+0x1a>
 8008a7c:	6a21      	ldr	r1, [r4, #32]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b0      	blx	r6
 8008a84:	1c41      	adds	r1, r0, #1
 8008a86:	d1c7      	bne.n	8008a18 <__sflush_r+0x30>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0c4      	beq.n	8008a18 <__sflush_r+0x30>
 8008a8e:	2b1d      	cmp	r3, #29
 8008a90:	d001      	beq.n	8008a96 <__sflush_r+0xae>
 8008a92:	2b16      	cmp	r3, #22
 8008a94:	d101      	bne.n	8008a9a <__sflush_r+0xb2>
 8008a96:	602f      	str	r7, [r5, #0]
 8008a98:	e7b2      	b.n	8008a00 <__sflush_r+0x18>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	e7ae      	b.n	8008a02 <__sflush_r+0x1a>
 8008aa4:	690f      	ldr	r7, [r1, #16]
 8008aa6:	2f00      	cmp	r7, #0
 8008aa8:	d0aa      	beq.n	8008a00 <__sflush_r+0x18>
 8008aaa:	0793      	lsls	r3, r2, #30
 8008aac:	bf18      	it	ne
 8008aae:	2300      	movne	r3, #0
 8008ab0:	680e      	ldr	r6, [r1, #0]
 8008ab2:	bf08      	it	eq
 8008ab4:	694b      	ldreq	r3, [r1, #20]
 8008ab6:	1bf6      	subs	r6, r6, r7
 8008ab8:	600f      	str	r7, [r1, #0]
 8008aba:	608b      	str	r3, [r1, #8]
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	dd9f      	ble.n	8008a00 <__sflush_r+0x18>
 8008ac0:	4633      	mov	r3, r6
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	6a21      	ldr	r1, [r4, #32]
 8008ac8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008acc:	47e0      	blx	ip
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dc06      	bgt.n	8008ae0 <__sflush_r+0xf8>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	e790      	b.n	8008a02 <__sflush_r+0x1a>
 8008ae0:	4407      	add	r7, r0
 8008ae2:	1a36      	subs	r6, r6, r0
 8008ae4:	e7ea      	b.n	8008abc <__sflush_r+0xd4>
 8008ae6:	bf00      	nop
 8008ae8:	20400001 	.word	0x20400001

08008aec <_fflush_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	690b      	ldr	r3, [r1, #16]
 8008af0:	4605      	mov	r5, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	b913      	cbnz	r3, 8008afc <_fflush_r+0x10>
 8008af6:	2500      	movs	r5, #0
 8008af8:	4628      	mov	r0, r5
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	b118      	cbz	r0, 8008b06 <_fflush_r+0x1a>
 8008afe:	6983      	ldr	r3, [r0, #24]
 8008b00:	b90b      	cbnz	r3, 8008b06 <_fflush_r+0x1a>
 8008b02:	f000 f887 	bl	8008c14 <__sinit>
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <_fflush_r+0x6c>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d11b      	bne.n	8008b44 <_fflush_r+0x58>
 8008b0c:	686c      	ldr	r4, [r5, #4]
 8008b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0ef      	beq.n	8008af6 <_fflush_r+0xa>
 8008b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b18:	07d0      	lsls	r0, r2, #31
 8008b1a:	d404      	bmi.n	8008b26 <_fflush_r+0x3a>
 8008b1c:	0599      	lsls	r1, r3, #22
 8008b1e:	d402      	bmi.n	8008b26 <_fflush_r+0x3a>
 8008b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b22:	f000 f915 	bl	8008d50 <__retarget_lock_acquire_recursive>
 8008b26:	4628      	mov	r0, r5
 8008b28:	4621      	mov	r1, r4
 8008b2a:	f7ff ff5d 	bl	80089e8 <__sflush_r>
 8008b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b30:	4605      	mov	r5, r0
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d4e0      	bmi.n	8008af8 <_fflush_r+0xc>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	059b      	lsls	r3, r3, #22
 8008b3a:	d4dd      	bmi.n	8008af8 <_fflush_r+0xc>
 8008b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3e:	f000 f908 	bl	8008d52 <__retarget_lock_release_recursive>
 8008b42:	e7d9      	b.n	8008af8 <_fflush_r+0xc>
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <_fflush_r+0x70>)
 8008b46:	429c      	cmp	r4, r3
 8008b48:	d101      	bne.n	8008b4e <_fflush_r+0x62>
 8008b4a:	68ac      	ldr	r4, [r5, #8]
 8008b4c:	e7df      	b.n	8008b0e <_fflush_r+0x22>
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <_fflush_r+0x74>)
 8008b50:	429c      	cmp	r4, r3
 8008b52:	bf08      	it	eq
 8008b54:	68ec      	ldreq	r4, [r5, #12]
 8008b56:	e7da      	b.n	8008b0e <_fflush_r+0x22>
 8008b58:	08009ae4 	.word	0x08009ae4
 8008b5c:	08009b04 	.word	0x08009b04
 8008b60:	08009ac4 	.word	0x08009ac4

08008b64 <std>:
 8008b64:	2300      	movs	r3, #0
 8008b66:	b510      	push	{r4, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b72:	6083      	str	r3, [r0, #8]
 8008b74:	8181      	strh	r1, [r0, #12]
 8008b76:	6643      	str	r3, [r0, #100]	; 0x64
 8008b78:	81c2      	strh	r2, [r0, #14]
 8008b7a:	6183      	str	r3, [r0, #24]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	2208      	movs	r2, #8
 8008b80:	305c      	adds	r0, #92	; 0x5c
 8008b82:	f7fd fb63 	bl	800624c <memset>
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <std+0x38>)
 8008b88:	6224      	str	r4, [r4, #32]
 8008b8a:	6263      	str	r3, [r4, #36]	; 0x24
 8008b8c:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <std+0x3c>)
 8008b8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b90:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <std+0x40>)
 8008b92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <std+0x44>)
 8008b96:	6323      	str	r3, [r4, #48]	; 0x30
 8008b98:	bd10      	pop	{r4, pc}
 8008b9a:	bf00      	nop
 8008b9c:	08008eb9 	.word	0x08008eb9
 8008ba0:	08008edb 	.word	0x08008edb
 8008ba4:	08008f13 	.word	0x08008f13
 8008ba8:	08008f37 	.word	0x08008f37

08008bac <_cleanup_r>:
 8008bac:	4901      	ldr	r1, [pc, #4]	; (8008bb4 <_cleanup_r+0x8>)
 8008bae:	f000 b8af 	b.w	8008d10 <_fwalk_reent>
 8008bb2:	bf00      	nop
 8008bb4:	08008aed 	.word	0x08008aed

08008bb8 <__sfmoreglue>:
 8008bb8:	2268      	movs	r2, #104	; 0x68
 8008bba:	b570      	push	{r4, r5, r6, lr}
 8008bbc:	1e4d      	subs	r5, r1, #1
 8008bbe:	4355      	muls	r5, r2
 8008bc0:	460e      	mov	r6, r1
 8008bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bc6:	f7ff fa6b 	bl	80080a0 <_malloc_r>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	b140      	cbz	r0, 8008be0 <__sfmoreglue+0x28>
 8008bce:	2100      	movs	r1, #0
 8008bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8008bd4:	300c      	adds	r0, #12
 8008bd6:	60a0      	str	r0, [r4, #8]
 8008bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bdc:	f7fd fb36 	bl	800624c <memset>
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd70      	pop	{r4, r5, r6, pc}

08008be4 <__sfp_lock_acquire>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sfp_lock_acquire+0x8>)
 8008be6:	f000 b8b3 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	20000309 	.word	0x20000309

08008bf0 <__sfp_lock_release>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sfp_lock_release+0x8>)
 8008bf2:	f000 b8ae 	b.w	8008d52 <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000309 	.word	0x20000309

08008bfc <__sinit_lock_acquire>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sinit_lock_acquire+0x8>)
 8008bfe:	f000 b8a7 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 8008c02:	bf00      	nop
 8008c04:	2000030a 	.word	0x2000030a

08008c08 <__sinit_lock_release>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sinit_lock_release+0x8>)
 8008c0a:	f000 b8a2 	b.w	8008d52 <__retarget_lock_release_recursive>
 8008c0e:	bf00      	nop
 8008c10:	2000030a 	.word	0x2000030a

08008c14 <__sinit>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	4604      	mov	r4, r0
 8008c18:	f7ff fff0 	bl	8008bfc <__sinit_lock_acquire>
 8008c1c:	69a3      	ldr	r3, [r4, #24]
 8008c1e:	b11b      	cbz	r3, 8008c28 <__sinit+0x14>
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c24:	f7ff bff0 	b.w	8008c08 <__sinit_lock_release>
 8008c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <__sinit+0x68>)
 8008c30:	4a13      	ldr	r2, [pc, #76]	; (8008c80 <__sinit+0x6c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	bf08      	it	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	bf08      	it	eq
 8008c40:	61a3      	streq	r3, [r4, #24]
 8008c42:	f000 f81f 	bl	8008c84 <__sfp>
 8008c46:	6060      	str	r0, [r4, #4]
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 f81b 	bl	8008c84 <__sfp>
 8008c4e:	60a0      	str	r0, [r4, #8]
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 f817 	bl	8008c84 <__sfp>
 8008c56:	2200      	movs	r2, #0
 8008c58:	2104      	movs	r1, #4
 8008c5a:	60e0      	str	r0, [r4, #12]
 8008c5c:	6860      	ldr	r0, [r4, #4]
 8008c5e:	f7ff ff81 	bl	8008b64 <std>
 8008c62:	2201      	movs	r2, #1
 8008c64:	2109      	movs	r1, #9
 8008c66:	68a0      	ldr	r0, [r4, #8]
 8008c68:	f7ff ff7c 	bl	8008b64 <std>
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	2112      	movs	r1, #18
 8008c70:	68e0      	ldr	r0, [r4, #12]
 8008c72:	f7ff ff77 	bl	8008b64 <std>
 8008c76:	2301      	movs	r3, #1
 8008c78:	61a3      	str	r3, [r4, #24]
 8008c7a:	e7d1      	b.n	8008c20 <__sinit+0xc>
 8008c7c:	08009748 	.word	0x08009748
 8008c80:	08008bad 	.word	0x08008bad

08008c84 <__sfp>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	4607      	mov	r7, r0
 8008c88:	f7ff ffac 	bl	8008be4 <__sfp_lock_acquire>
 8008c8c:	4b1e      	ldr	r3, [pc, #120]	; (8008d08 <__sfp+0x84>)
 8008c8e:	681e      	ldr	r6, [r3, #0]
 8008c90:	69b3      	ldr	r3, [r6, #24]
 8008c92:	b913      	cbnz	r3, 8008c9a <__sfp+0x16>
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff ffbd 	bl	8008c14 <__sinit>
 8008c9a:	3648      	adds	r6, #72	; 0x48
 8008c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	d503      	bpl.n	8008cac <__sfp+0x28>
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	b30b      	cbz	r3, 8008cec <__sfp+0x68>
 8008ca8:	6836      	ldr	r6, [r6, #0]
 8008caa:	e7f7      	b.n	8008c9c <__sfp+0x18>
 8008cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cb0:	b9d5      	cbnz	r5, 8008ce8 <__sfp+0x64>
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <__sfp+0x88>)
 8008cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cb8:	60e3      	str	r3, [r4, #12]
 8008cba:	6665      	str	r5, [r4, #100]	; 0x64
 8008cbc:	f000 f847 	bl	8008d4e <__retarget_lock_init_recursive>
 8008cc0:	f7ff ff96 	bl	8008bf0 <__sfp_lock_release>
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cd0:	6025      	str	r5, [r4, #0]
 8008cd2:	61a5      	str	r5, [r4, #24]
 8008cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cd8:	f7fd fab8 	bl	800624c <memset>
 8008cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce8:	3468      	adds	r4, #104	; 0x68
 8008cea:	e7d9      	b.n	8008ca0 <__sfp+0x1c>
 8008cec:	2104      	movs	r1, #4
 8008cee:	4638      	mov	r0, r7
 8008cf0:	f7ff ff62 	bl	8008bb8 <__sfmoreglue>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	6030      	str	r0, [r6, #0]
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d1d5      	bne.n	8008ca8 <__sfp+0x24>
 8008cfc:	f7ff ff78 	bl	8008bf0 <__sfp_lock_release>
 8008d00:	230c      	movs	r3, #12
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	e7ee      	b.n	8008ce4 <__sfp+0x60>
 8008d06:	bf00      	nop
 8008d08:	08009748 	.word	0x08009748
 8008d0c:	ffff0001 	.word	0xffff0001

08008d10 <_fwalk_reent>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	4606      	mov	r6, r0
 8008d16:	4688      	mov	r8, r1
 8008d18:	2700      	movs	r7, #0
 8008d1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d22:	f1b9 0901 	subs.w	r9, r9, #1
 8008d26:	d505      	bpl.n	8008d34 <_fwalk_reent+0x24>
 8008d28:	6824      	ldr	r4, [r4, #0]
 8008d2a:	2c00      	cmp	r4, #0
 8008d2c:	d1f7      	bne.n	8008d1e <_fwalk_reent+0xe>
 8008d2e:	4638      	mov	r0, r7
 8008d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d34:	89ab      	ldrh	r3, [r5, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d907      	bls.n	8008d4a <_fwalk_reent+0x3a>
 8008d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	d003      	beq.n	8008d4a <_fwalk_reent+0x3a>
 8008d42:	4629      	mov	r1, r5
 8008d44:	4630      	mov	r0, r6
 8008d46:	47c0      	blx	r8
 8008d48:	4307      	orrs	r7, r0
 8008d4a:	3568      	adds	r5, #104	; 0x68
 8008d4c:	e7e9      	b.n	8008d22 <_fwalk_reent+0x12>

08008d4e <__retarget_lock_init_recursive>:
 8008d4e:	4770      	bx	lr

08008d50 <__retarget_lock_acquire_recursive>:
 8008d50:	4770      	bx	lr

08008d52 <__retarget_lock_release_recursive>:
 8008d52:	4770      	bx	lr

08008d54 <__swhatbuf_r>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	460e      	mov	r6, r1
 8008d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	461d      	mov	r5, r3
 8008d62:	b096      	sub	sp, #88	; 0x58
 8008d64:	da08      	bge.n	8008d78 <__swhatbuf_r+0x24>
 8008d66:	2200      	movs	r2, #0
 8008d68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	061a      	lsls	r2, r3, #24
 8008d70:	d410      	bmi.n	8008d94 <__swhatbuf_r+0x40>
 8008d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d76:	e00e      	b.n	8008d96 <__swhatbuf_r+0x42>
 8008d78:	466a      	mov	r2, sp
 8008d7a:	f000 f903 	bl	8008f84 <_fstat_r>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	dbf1      	blt.n	8008d66 <__swhatbuf_r+0x12>
 8008d82:	9a01      	ldr	r2, [sp, #4]
 8008d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d8c:	425a      	negs	r2, r3
 8008d8e:	415a      	adcs	r2, r3
 8008d90:	602a      	str	r2, [r5, #0]
 8008d92:	e7ee      	b.n	8008d72 <__swhatbuf_r+0x1e>
 8008d94:	2340      	movs	r3, #64	; 0x40
 8008d96:	2000      	movs	r0, #0
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	b016      	add	sp, #88	; 0x58
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008da0 <__smakebuf_r>:
 8008da0:	898b      	ldrh	r3, [r1, #12]
 8008da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008da4:	079d      	lsls	r5, r3, #30
 8008da6:	4606      	mov	r6, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	d507      	bpl.n	8008dbc <__smakebuf_r+0x1c>
 8008dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	2301      	movs	r3, #1
 8008db6:	6163      	str	r3, [r4, #20]
 8008db8:	b002      	add	sp, #8
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	466a      	mov	r2, sp
 8008dbe:	ab01      	add	r3, sp, #4
 8008dc0:	f7ff ffc8 	bl	8008d54 <__swhatbuf_r>
 8008dc4:	9900      	ldr	r1, [sp, #0]
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7ff f969 	bl	80080a0 <_malloc_r>
 8008dce:	b948      	cbnz	r0, 8008de4 <__smakebuf_r+0x44>
 8008dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd4:	059a      	lsls	r2, r3, #22
 8008dd6:	d4ef      	bmi.n	8008db8 <__smakebuf_r+0x18>
 8008dd8:	f023 0303 	bic.w	r3, r3, #3
 8008ddc:	f043 0302 	orr.w	r3, r3, #2
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	e7e3      	b.n	8008dac <__smakebuf_r+0xc>
 8008de4:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <__smakebuf_r+0x7c>)
 8008de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	6020      	str	r0, [r4, #0]
 8008dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	9b00      	ldr	r3, [sp, #0]
 8008df4:	6120      	str	r0, [r4, #16]
 8008df6:	6163      	str	r3, [r4, #20]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	b15b      	cbz	r3, 8008e14 <__smakebuf_r+0x74>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e02:	f000 f8d1 	bl	8008fa8 <_isatty_r>
 8008e06:	b128      	cbz	r0, 8008e14 <__smakebuf_r+0x74>
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	f023 0303 	bic.w	r3, r3, #3
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	81a3      	strh	r3, [r4, #12]
 8008e14:	89a0      	ldrh	r0, [r4, #12]
 8008e16:	4305      	orrs	r5, r0
 8008e18:	81a5      	strh	r5, [r4, #12]
 8008e1a:	e7cd      	b.n	8008db8 <__smakebuf_r+0x18>
 8008e1c:	08008bad 	.word	0x08008bad

08008e20 <_malloc_usable_size_r>:
 8008e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e24:	1f18      	subs	r0, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfbc      	itt	lt
 8008e2a:	580b      	ldrlt	r3, [r1, r0]
 8008e2c:	18c0      	addlt	r0, r0, r3
 8008e2e:	4770      	bx	lr

08008e30 <_raise_r>:
 8008e30:	291f      	cmp	r1, #31
 8008e32:	b538      	push	{r3, r4, r5, lr}
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	d904      	bls.n	8008e44 <_raise_r+0x14>
 8008e3a:	2316      	movs	r3, #22
 8008e3c:	6003      	str	r3, [r0, #0]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e46:	b112      	cbz	r2, 8008e4e <_raise_r+0x1e>
 8008e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e4c:	b94b      	cbnz	r3, 8008e62 <_raise_r+0x32>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f830 	bl	8008eb4 <_getpid_r>
 8008e54:	462a      	mov	r2, r5
 8008e56:	4601      	mov	r1, r0
 8008e58:	4620      	mov	r0, r4
 8008e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e5e:	f000 b817 	b.w	8008e90 <_kill_r>
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d00a      	beq.n	8008e7c <_raise_r+0x4c>
 8008e66:	1c59      	adds	r1, r3, #1
 8008e68:	d103      	bne.n	8008e72 <_raise_r+0x42>
 8008e6a:	2316      	movs	r3, #22
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	2001      	movs	r0, #1
 8008e70:	e7e7      	b.n	8008e42 <_raise_r+0x12>
 8008e72:	2400      	movs	r4, #0
 8008e74:	4628      	mov	r0, r5
 8008e76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e7a:	4798      	blx	r3
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e7e0      	b.n	8008e42 <_raise_r+0x12>

08008e80 <raise>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <raise+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f7ff bfd3 	b.w	8008e30 <_raise_r>
 8008e8a:	bf00      	nop
 8008e8c:	20000040 	.word	0x20000040

08008e90 <_kill_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	2300      	movs	r3, #0
 8008e94:	4d06      	ldr	r5, [pc, #24]	; (8008eb0 <_kill_r+0x20>)
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f7f9 fdc4 	bl	8002a2a <_kill>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d102      	bne.n	8008eac <_kill_r+0x1c>
 8008ea6:	682b      	ldr	r3, [r5, #0]
 8008ea8:	b103      	cbz	r3, 8008eac <_kill_r+0x1c>
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000304 	.word	0x20000304

08008eb4 <_getpid_r>:
 8008eb4:	f7f9 bdb2 	b.w	8002a1c <_getpid>

08008eb8 <__sread>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	460c      	mov	r4, r1
 8008ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec0:	f000 f894 	bl	8008fec <_read_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	bfab      	itete	ge
 8008ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eca:	89a3      	ldrhlt	r3, [r4, #12]
 8008ecc:	181b      	addge	r3, r3, r0
 8008ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ed2:	bfac      	ite	ge
 8008ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ed6:	81a3      	strhlt	r3, [r4, #12]
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <__swrite>:
 8008eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ede:	461f      	mov	r7, r3
 8008ee0:	898b      	ldrh	r3, [r1, #12]
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	05db      	lsls	r3, r3, #23
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	4616      	mov	r6, r2
 8008eea:	d505      	bpl.n	8008ef8 <__swrite+0x1e>
 8008eec:	2302      	movs	r3, #2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef4:	f000 f868 	bl	8008fc8 <_lseek_r>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	4632      	mov	r2, r6
 8008efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	4628      	mov	r0, r5
 8008f04:	463b      	mov	r3, r7
 8008f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	f000 b817 	b.w	8008f40 <_write_r>

08008f12 <__sseek>:
 8008f12:	b510      	push	{r4, lr}
 8008f14:	460c      	mov	r4, r1
 8008f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1a:	f000 f855 	bl	8008fc8 <_lseek_r>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	bf15      	itete	ne
 8008f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f2e:	81a3      	strheq	r3, [r4, #12]
 8008f30:	bf18      	it	ne
 8008f32:	81a3      	strhne	r3, [r4, #12]
 8008f34:	bd10      	pop	{r4, pc}

08008f36 <__sclose>:
 8008f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3a:	f000 b813 	b.w	8008f64 <_close_r>
	...

08008f40 <_write_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4d05      	ldr	r5, [pc, #20]	; (8008f60 <_write_r+0x20>)
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f7f9 fda2 	bl	8002a98 <_write>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_write_r+0x1e>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_write_r+0x1e>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000304 	.word	0x20000304

08008f64 <_close_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	2300      	movs	r3, #0
 8008f68:	4d05      	ldr	r5, [pc, #20]	; (8008f80 <_close_r+0x1c>)
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f9 fdae 	bl	8002ad0 <_close>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_close_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_close_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000304 	.word	0x20000304

08008f84 <_fstat_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	2300      	movs	r3, #0
 8008f88:	4d06      	ldr	r5, [pc, #24]	; (8008fa4 <_fstat_r+0x20>)
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	f7f9 fda8 	bl	8002ae6 <_fstat>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d102      	bne.n	8008fa0 <_fstat_r+0x1c>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b103      	cbz	r3, 8008fa0 <_fstat_r+0x1c>
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000304 	.word	0x20000304

08008fa8 <_isatty_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	2300      	movs	r3, #0
 8008fac:	4d05      	ldr	r5, [pc, #20]	; (8008fc4 <_isatty_r+0x1c>)
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7f9 fda6 	bl	8002b04 <_isatty>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_isatty_r+0x1a>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_isatty_r+0x1a>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000304 	.word	0x20000304

08008fc8 <_lseek_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4d05      	ldr	r5, [pc, #20]	; (8008fe8 <_lseek_r+0x20>)
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f9 fd9e 	bl	8002b18 <_lseek>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_lseek_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_lseek_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000304 	.word	0x20000304

08008fec <_read_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4d05      	ldr	r5, [pc, #20]	; (800900c <_read_r+0x20>)
 8008ff8:	602a      	str	r2, [r5, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7f9 fd2f 	bl	8002a5e <_read>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_read_r+0x1e>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_read_r+0x1e>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	20000304 	.word	0x20000304

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
