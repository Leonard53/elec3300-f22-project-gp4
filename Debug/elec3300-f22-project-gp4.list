
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007440  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  08007628  08007628  00017628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e4  080081e4  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  080081e4  080081e4  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081e4  080081e4  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080081ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000210  080083fc  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080083fc  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013177  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  000333b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c161  00000000  00000000  000363dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  00042540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027e0  00000000  00000000  00042f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3ae  00000000  00000000  00045750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155cc  00000000  00000000  00060afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b5bd  00000000  00000000  000760ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00111687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033c8  00000000  00000000  001116d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	08007610 	.word	0x08007610

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	08007610 	.word	0x08007610

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <HueToRGB565>:
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);

uint16_t HueToRGB565(uint8_t hue) {
    uint16_t portion = hue * 6;
 8000ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000ba4:	0040      	lsls	r0, r0, #1

    if (portion < 256) { // 0 <= degree < 60
 8000ba6:	28ff      	cmp	r0, #255	; 0xff
uint16_t HueToRGB565(uint8_t hue) {
 8000ba8:	b508      	push	{r3, lr}
    if (portion < 256) { // 0 <= degree < 60
 8000baa:	d932      	bls.n	8000c12 <HueToRGB565+0x72>
        return RED + ((int) (portion / 256.0 * 64) << 5);
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8000bac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000bb0:	d31a      	bcc.n	8000be8 <HueToRGB565+0x48>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8000bb2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8000bb6:	d351      	bcc.n	8000c5c <HueToRGB565+0xbc>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8000bb8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000bbc:	d33a      	bcc.n	8000c34 <HueToRGB565+0x94>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8000bbe:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8000bc2:	d25d      	bcs.n	8000c80 <HueToRGB565+0xe0>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8000bc4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000bc8:	f7ff fc88 	bl	80004dc <__aeabi_i2d>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HueToRGB565+0x110>)
 8000bd0:	f7ff fcee 	bl	80005b0 <__aeabi_dmul>
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <HueToRGB565+0x114>)
 8000bd8:	f7ff fcea 	bl	80005b0 <__aeabi_dmul>
 8000bdc:	f7ff ff98 	bl	8000b10 <__aeabi_d2iz>
 8000be0:	02c0      	lsls	r0, r0, #11
 8000be2:	301f      	adds	r0, #31
 8000be4:	b280      	uxth	r0, r0
    } else if (portion < 256 * 6) { // 300 <= degree < 360
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
    }
}
 8000be6:	bd08      	pop	{r3, pc}
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8000be8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bec:	f7ff fc76 	bl	80004dc <__aeabi_i2d>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HueToRGB565+0x110>)
 8000bf4:	f7ff fcdc 	bl	80005b0 <__aeabi_dmul>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HueToRGB565+0x114>)
 8000bfc:	f7ff fcd8 	bl	80005b0 <__aeabi_dmul>
 8000c00:	f7ff ff86 	bl	8000b10 <__aeabi_d2iz>
 8000c04:	f1c0 001f 	rsb	r0, r0, #31
 8000c08:	02c0      	lsls	r0, r0, #11
 8000c0a:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c0e:	b280      	uxth	r0, r0
}
 8000c10:	bd08      	pop	{r3, pc}
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8000c12:	f7ff fc63 	bl	80004dc <__aeabi_i2d>
 8000c16:	2200      	movs	r2, #0
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HueToRGB565+0x110>)
 8000c1a:	f7ff fcc9 	bl	80005b0 <__aeabi_dmul>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HueToRGB565+0x118>)
 8000c22:	f7ff fcc5 	bl	80005b0 <__aeabi_dmul>
 8000c26:	f7ff ff73 	bl	8000b10 <__aeabi_d2iz>
 8000c2a:	0140      	lsls	r0, r0, #5
 8000c2c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000c30:	b280      	uxth	r0, r0
}
 8000c32:	bd08      	pop	{r3, pc}
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8000c34:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8000c38:	f7ff fc50 	bl	80004dc <__aeabi_i2d>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HueToRGB565+0x110>)
 8000c40:	f7ff fcb6 	bl	80005b0 <__aeabi_dmul>
 8000c44:	2200      	movs	r2, #0
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HueToRGB565+0x118>)
 8000c48:	f7ff fcb2 	bl	80005b0 <__aeabi_dmul>
 8000c4c:	f7ff ff60 	bl	8000b10 <__aeabi_d2iz>
 8000c50:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8000c54:	0140      	lsls	r0, r0, #5
 8000c56:	301f      	adds	r0, #31
 8000c58:	b280      	uxth	r0, r0
}
 8000c5a:	bd08      	pop	{r3, pc}
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8000c5c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8000c60:	f7ff fc3c 	bl	80004dc <__aeabi_i2d>
 8000c64:	2200      	movs	r2, #0
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HueToRGB565+0x110>)
 8000c68:	f7ff fca2 	bl	80005b0 <__aeabi_dmul>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HueToRGB565+0x114>)
 8000c70:	f7ff fc9e 	bl	80005b0 <__aeabi_dmul>
 8000c74:	f7ff ff4c 	bl	8000b10 <__aeabi_d2iz>
 8000c78:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c7c:	b280      	uxth	r0, r0
}
 8000c7e:	bd08      	pop	{r3, pc}
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8000c80:	f5a0 60a0 	sub.w	r0, r0, #1280	; 0x500
 8000c84:	f7ff fc2a 	bl	80004dc <__aeabi_i2d>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HueToRGB565+0x110>)
 8000c8c:	f7ff fc90 	bl	80005b0 <__aeabi_dmul>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HueToRGB565+0x114>)
 8000c94:	f7ff fc8c 	bl	80005b0 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4907      	ldr	r1, [pc, #28]	; (8000cbc <HueToRGB565+0x11c>)
 8000ca0:	f7ff face 	bl	8000240 <__aeabi_dsub>
 8000ca4:	f7ff ff34 	bl	8000b10 <__aeabi_d2iz>
 8000ca8:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000cac:	b280      	uxth	r0, r0
}
 8000cae:	bd08      	pop	{r3, pc}
 8000cb0:	3f700000 	.word	0x3f700000
 8000cb4:	40400000 	.word	0x40400000
 8000cb8:	40500000 	.word	0x40500000
 8000cbc:	403f0000 	.word	0x403f0000

08000cc0 <LCD_Rst>:
    LCD_REG_Config();
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
}


void LCD_Rst(void) {
 8000cc0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <LCD_Rst+0x24>)
 8000cc8:	f002 faf6 	bl	80032b8 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	d1fd      	bne.n	8000cce <LCD_Rst+0xe>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <LCD_Rst+0x24>)
 8000cd8:	f002 faee 	bl	80032b8 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	d1fd      	bne.n	8000cde <LCD_Rst+0x1e>
}
 8000ce2:	bd08      	pop	{r3, pc}
 8000ce4:	40011800 	.word	0x40011800
 8000ce8:	0002bffc 	.word	0x0002bffc

08000cec <LCD_REG_Config>:
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}


void LCD_Write_Cmd(uint16_t usCmd) {
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cf0:	23cf      	movs	r3, #207	; 0xcf
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 8000cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2081      	movs	r0, #129	; 0x81
 8000cfa:	f04f 0c30 	mov.w	ip, #48	; 0x30
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cfe:	f04f 04ed 	mov.w	r4, #237	; 0xed
 8000d02:	8013      	strh	r3, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <LCD_REG_Config+0x1dc>)
 8000d06:	f04f 0803 	mov.w	r8, #3
 8000d0a:	8019      	strh	r1, [r3, #0]
 8000d0c:	8018      	strh	r0, [r3, #0]
 8000d0e:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d12:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d14:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000d18:	801c      	strh	r4, [r3, #0]
 8000d1a:	f04f 0412 	mov.w	r4, #18
 8000d1e:	f8a3 8000 	strh.w	r8, [r3]
 8000d22:	801c      	strh	r4, [r3, #0]
 8000d24:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d26:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000d2a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d2c:	f04f 0085 	mov.w	r0, #133	; 0x85
 8000d30:	f04f 0b10 	mov.w	fp, #16
 8000d34:	8018      	strh	r0, [r3, #0]
 8000d36:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000d3a:	f8a3 b000 	strh.w	fp, [r3]
 8000d3e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d40:	f04f 00cb 	mov.w	r0, #203	; 0xcb
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d44:	f04f 0939 	mov.w	r9, #57	; 0x39
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d48:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d4a:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000d4e:	f8a3 9000 	strh.w	r9, [r3]
 8000d52:	8018      	strh	r0, [r3, #0]
 8000d54:	f04f 0034 	mov.w	r0, #52	; 0x34
 8000d58:	8019      	strh	r1, [r3, #0]
 8000d5a:	8018      	strh	r0, [r3, #0]
 8000d5c:	f04f 0002 	mov.w	r0, #2
 8000d60:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d62:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 8000d66:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d68:	f04f 0020 	mov.w	r0, #32
 8000d6c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d6e:	f04f 00ea 	mov.w	r0, #234	; 0xea
 8000d72:	8010      	strh	r0, [r2, #0]
 8000d74:	f04f 00b1 	mov.w	r0, #177	; 0xb1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d78:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d7a:	f04f 04b6 	mov.w	r4, #182	; 0xb6
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d7e:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d80:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d82:	f04f 001b 	mov.w	r0, #27
 8000d86:	8019      	strh	r1, [r3, #0]
 8000d88:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d8a:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d8c:	f04f 040a 	mov.w	r4, #10
 8000d90:	801c      	strh	r4, [r3, #0]
 8000d92:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 8000d96:	801c      	strh	r4, [r3, #0]
 8000d98:	4620      	mov	r0, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d9a:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 8000d9e:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000da0:	f04f 0435 	mov.w	r4, #53	; 0x35
 8000da4:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000da6:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 8000daa:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dac:	f04f 0411 	mov.w	r4, #17
 8000db0:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000db2:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 8000db6:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000db8:	f04f 0445 	mov.w	r4, #69	; 0x45
 8000dbc:	801c      	strh	r4, [r3, #0]
 8000dbe:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dc0:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 8000dc4:	8014      	strh	r4, [r2, #0]
 8000dc6:	f04f 04f2 	mov.w	r4, #242	; 0xf2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dca:	8018      	strh	r0, [r3, #0]
 8000dcc:	2501      	movs	r5, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dce:	8014      	strh	r4, [r2, #0]
 8000dd0:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 8000dd4:	f04f 0426 	mov.w	r4, #38	; 0x26
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dd8:	8019      	strh	r1, [r3, #0]
 8000dda:	270f      	movs	r7, #15
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ddc:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dde:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000de0:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000de2:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000de6:	801f      	strh	r7, [r3, #0]
 8000de8:	801c      	strh	r4, [r3, #0]
 8000dea:	8018      	strh	r0, [r3, #0]
 8000dec:	f04f 000b 	mov.w	r0, #11
 8000df0:	8018      	strh	r0, [r3, #0]
 8000df2:	f04f 000e 	mov.w	r0, #14
 8000df6:	f04f 0409 	mov.w	r4, #9
 8000dfa:	8018      	strh	r0, [r3, #0]
 8000dfc:	f04f 0054 	mov.w	r0, #84	; 0x54
 8000e00:	801c      	strh	r4, [r3, #0]
 8000e02:	8018      	strh	r0, [r3, #0]
 8000e04:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000e08:	8018      	strh	r0, [r3, #0]
 8000e0a:	f04f 0046 	mov.w	r0, #70	; 0x46
 8000e0e:	8018      	strh	r0, [r3, #0]
 8000e10:	f04f 000c 	mov.w	r0, #12
 8000e14:	8018      	strh	r0, [r3, #0]
 8000e16:	f04f 0017 	mov.w	r0, #23
 8000e1a:	f04f 0a07 	mov.w	sl, #7
 8000e1e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e20:	f04f 00e1 	mov.w	r0, #225	; 0xe1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e24:	801c      	strh	r4, [r3, #0]
 8000e26:	801f      	strh	r7, [r3, #0]
 8000e28:	f8a3 a000 	strh.w	sl, [r3]
 8000e2c:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e2e:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e30:	f04f 0019 	mov.w	r0, #25
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	8018      	strh	r0, [r3, #0]
 8000e38:	f04f 001b 	mov.w	r0, #27
 8000e3c:	8018      	strh	r0, [r3, #0]
 8000e3e:	f04f 0004 	mov.w	r0, #4
 8000e42:	262a      	movs	r6, #42	; 0x2a
 8000e44:	8018      	strh	r0, [r3, #0]
 8000e46:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000e4a:	f8a3 b000 	strh.w	fp, [r3]
 8000e4e:	f04f 0e06 	mov.w	lr, #6
 8000e52:	f8a3 a000 	strh.w	sl, [r3]
 8000e56:	801e      	strh	r6, [r3, #0]
 8000e58:	8018      	strh	r0, [r3, #0]
 8000e5a:	f04f 0038 	mov.w	r0, #56	; 0x38
 8000e5e:	f8a3 9000 	strh.w	r9, [r3]
 8000e62:	f8a3 8000 	strh.w	r8, [r3]
 8000e66:	f8a3 e000 	strh.w	lr, [r3]
 8000e6a:	f8a3 e000 	strh.w	lr, [r3]
 8000e6e:	f8a3 c000 	strh.w	ip, [r3]
 8000e72:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e74:	f04f 0036 	mov.w	r0, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e78:	801f      	strh	r7, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e7a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e7c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000e80:	8018      	strh	r0, [r3, #0]
 8000e82:	f04f 00ef 	mov.w	r0, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e86:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e88:	8019      	strh	r1, [r3, #0]
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	8019      	strh	r1, [r3, #0]
 8000e8e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e90:	f04f 002b 	mov.w	r0, #43	; 0x2b
 8000e94:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	8019      	strh	r1, [r3, #0]
 8000e9a:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8000e9e:	801d      	strh	r5, [r3, #0]
 8000ea0:	f04f 0055 	mov.w	r0, #85	; 0x55
 8000ea4:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ea6:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8000eaa:	8011      	strh	r1, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eac:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eae:	f04f 0311 	mov.w	r3, #17
 8000eb2:	4906      	ldr	r1, [pc, #24]	; (8000ecc <LCD_REG_Config+0x1e0>)
 8000eb4:	8013      	strh	r3, [r2, #0]
    for (; nCount != 0; nCount--);
 8000eb6:	3901      	subs	r1, #1
 8000eb8:	d1fd      	bne.n	8000eb6 <LCD_REG_Config+0x1ca>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eba:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ebe:	2229      	movs	r2, #41	; 0x29
 8000ec0:	801a      	strh	r2, [r3, #0]
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);

}
 8000ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec6:	bf00      	nop
 8000ec8:	60020000 	.word	0x60020000
 8000ecc:	0002bffc 	.word	0x0002bffc

08000ed0 <LCD_INIT>:
void LCD_INIT(void) {
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <LCD_INIT+0x54>)
 8000eda:	f002 f9ed 	bl	80032b8 <HAL_GPIO_WritePin>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ede:	272a      	movs	r7, #42	; 0x2a
    LCD_Rst();
 8000ee0:	f7ff feee 	bl	8000cc0 <LCD_Rst>
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ee4:	26ef      	movs	r6, #239	; 0xef
    LCD_REG_Config();
 8000ee6:	f7ff ff01 	bl	8000cec <LCD_REG_Config>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eea:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eec:	2100      	movs	r1, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eee:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ef2:	2401      	movs	r4, #1
 8000ef4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ef8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000efc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <LCD_INIT+0x58>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f02:	8007      	strh	r7, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f04:	8011      	strh	r1, [r2, #0]
 8000f06:	8011      	strh	r1, [r2, #0]
 8000f08:	8011      	strh	r1, [r2, #0]
 8000f0a:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f0c:	8005      	strh	r5, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f0e:	8011      	strh	r1, [r2, #0]
 8000f10:	8011      	strh	r1, [r2, #0]
 8000f12:	8014      	strh	r4, [r2, #0]
 8000f14:	f8a2 e000 	strh.w	lr, [r2]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f18:	f8a0 c000 	strh.w	ip, [r0]
    uint32_t i = 0;

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);

    for (i = 0; i < usPoint; i++)
 8000f1c:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f1e:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8000f20:	d1fc      	bne.n	8000f1c <LCD_INIT+0x4c>
}
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	40011400 	.word	0x40011400
 8000f28:	60020000 	.word	0x60020000

08000f2c <LCD_OpenWindow>:
void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 8000f2c:	b530      	push	{r4, r5, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f2e:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 8000f32:	242a      	movs	r4, #42	; 0x2a
 8000f34:	252b      	movs	r5, #43	; 0x2b
 8000f36:	f8ae 4000 	strh.w	r4, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f3a:	4c11      	ldr	r4, [pc, #68]	; (8000f80 <LCD_OpenWindow+0x54>)
    LCD_Write_Data(usCOLUMN >> 8);
 8000f3c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f40:	f8a4 c000 	strh.w	ip, [r4]
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f44:	eb00 0c02 	add.w	ip, r0, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	4402      	add	r2, r0
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f4c:	f10c 3cff 	add.w	ip, ip, #4294967295
    LCD_Write_Data(usCOLUMN & 0xff);
 8000f50:	b2c0      	uxtb	r0, r0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f52:	8020      	strh	r0, [r4, #0]
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f54:	b2d2      	uxtb	r2, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f56:	f3cc 200f 	ubfx	r0, ip, #8, #16
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f5a:	8020      	strh	r0, [r4, #0]
 8000f5c:	8022      	strh	r2, [r4, #0]
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f5e:	18ca      	adds	r2, r1, r3
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f60:	3b01      	subs	r3, #1
 8000f62:	440b      	add	r3, r1
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f64:	3a01      	subs	r2, #1
    LCD_Write_Data(usPAGE >> 8);
 8000f66:	0a08      	lsrs	r0, r1, #8
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f68:	f3c2 220f 	ubfx	r2, r2, #8, #16
    LCD_Write_Data(usPAGE & 0xff);
 8000f6c:	b2c9      	uxtb	r1, r1
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f6e:	b2db      	uxtb	r3, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f70:	f8ae 5000 	strh.w	r5, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f74:	8020      	strh	r0, [r4, #0]
 8000f76:	8021      	strh	r1, [r4, #0]
 8000f78:	8022      	strh	r2, [r4, #0]
 8000f7a:	8023      	strh	r3, [r4, #0]
}
 8000f7c:	bd30      	pop	{r4, r5, pc}
 8000f7e:	bf00      	nop
 8000f80:	60020000 	.word	0x60020000

08000f84 <LCD_Clear>:
        LCD_Write_Data(usColor);

}


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	461e      	mov	r6, r3
 8000f88:	4614      	mov	r4, r2
 8000f8a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8000f8e:	f7ff ffcd 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f92:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f96:	212c      	movs	r1, #44	; 0x2c

    LCD_FillColor(usWidth * usHeight, usColor);
 8000f98:	fb06 f404 	mul.w	r4, r6, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f9c:	8019      	strh	r1, [r3, #0]
    for (i = 0; i < usPoint; i++)
 8000f9e:	b12c      	cbz	r4, 8000fac <LCD_Clear+0x28>
 8000fa0:	2300      	movs	r3, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa2:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <LCD_Clear+0x2c>)
    for (i = 0; i < usPoint; i++)
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	429c      	cmp	r4, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa8:	800d      	strh	r5, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8000faa:	d1fb      	bne.n	8000fa4 <LCD_Clear+0x20>

}
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	bf00      	nop
 8000fb0:	60020000 	.word	0x60020000

08000fb4 <LCD_InitHeatCoords>:
			if (result <= 1) LCD_DrawDot(col, pag, HueToRGB565(sqrt(pow(col-usC, 2) + pow(pag-usP, 2)) * colorCoef + usHueCenter));
		}
	}
}

void LCD_InitHeatCoords(struct YPinData *data) {
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	22f0      	movs	r2, #240	; 0xf0
 8000fb8:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < 8; i++)
		if (i < 4) {
			data[i].x = 30;
			data[i].y = 240 - i * 40;
		} else {
			data[i].x = 70;
 8000fba:	2546      	movs	r5, #70	; 0x46
			data[i].x = 30;
 8000fbc:	241e      	movs	r4, #30
 8000fbe:	f100 0c02 	add.w	ip, r0, #2
 8000fc2:	e009      	b.n	8000fd8 <LCD_InitHeatCoords+0x24>
 8000fc4:	f82c 4c02 	strh.w	r4, [ip, #-2]
			data[i].y = 240 - i * 40;
 8000fc8:	8042      	strh	r2, [r0, #2]
	for (uint8_t i = 0; i < 8; i++)
 8000fca:	3301      	adds	r3, #1
 8000fcc:	3a28      	subs	r2, #40	; 0x28
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3006      	adds	r0, #6
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	f10c 0c06 	add.w	ip, ip, #6
		if (i < 4) {
 8000fd8:	1e59      	subs	r1, r3, #1
 8000fda:	2903      	cmp	r1, #3
			data[i].y = 120 + (i - 4) * 40;
 8000fdc:	f1c2 0ec8 	rsb	lr, r2, #200	; 0xc8
		if (i < 4) {
 8000fe0:	d9f0      	bls.n	8000fc4 <LCD_InitHeatCoords+0x10>
	for (uint8_t i = 0; i < 8; i++)
 8000fe2:	2b08      	cmp	r3, #8
			data[i].x = 70;
 8000fe4:	f82c 5c02 	strh.w	r5, [ip, #-2]
			data[i].y = 120 + (i - 4) * 40;
 8000fe8:	f8a0 e002 	strh.w	lr, [r0, #2]
	for (uint8_t i = 0; i < 8; i++)
 8000fec:	d1ed      	bne.n	8000fca <LCD_InitHeatCoords+0x16>
		}
}
 8000fee:	bd30      	pop	{r4, r5, pc}

08000ff0 <LCD_SetPinColor>:
void LCD_SetPinColor(struct YPinData *data, uint16_t color) {
	data->color = color;
 8000ff0:	7101      	strb	r1, [r0, #4]
}
 8000ff2:	4770      	bx	lr

08000ff4 <LCD_PrintHeatMap>:
	return pow(data->x - x, 2) + pow(data->y - y, 2);
}

void LCD_PrintHeatMap(struct YPinData *data) {
	// Loop all pixels inside the rectangular heat map
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000ff4:	8a43      	ldrh	r3, [r0, #18]
void LCD_PrintHeatMap(struct YPinData *data) {
 8000ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000ffa:	3b14      	subs	r3, #20
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4619      	mov	r1, r3
void LCD_PrintHeatMap(struct YPinData *data) {
 8001000:	b08b      	sub	sp, #44	; 0x2c
 8001002:	4602      	mov	r2, r0
 8001004:	9004      	str	r0, [sp, #16]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001006:	8b00      	ldrh	r0, [r0, #24]
 8001008:	9305      	str	r3, [sp, #20]
 800100a:	f100 0314 	add.w	r3, r0, #20
 800100e:	4299      	cmp	r1, r3
 8001010:	f300 80c8 	bgt.w	80011a4 <LCD_PrintHeatMap+0x1b0>
 8001014:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001016:	9a04      	ldr	r2, [sp, #16]
 8001018:	8a91      	ldrh	r1, [r2, #20]
 800101a:	f103 0214 	add.w	r2, r3, #20
 800101e:	3914      	subs	r1, #20
 8001020:	b289      	uxth	r1, r1
 8001022:	4291      	cmp	r1, r2
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	f300 80b3 	bgt.w	8001190 <LCD_PrintHeatMap+0x19c>
			// Check if in safe circle and altered circle, -1 means not exist
			int8_t inSafeCircle = -1;
			int16_t distSqrInAlteredCircle[8] = {-1};
 800102a:	2500      	movs	r5, #0
 800102c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001030:	9c04      	ldr	r4, [sp, #16]
 8001032:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8001036:	f8dd b014 	ldr.w	fp, [sp, #20]
 800103a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800103e:	f10d 0a18 	add.w	sl, sp, #24
 8001042:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001046:	9402      	str	r4, [sp, #8]
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 8001048:	8820      	ldrh	r0, [r4, #0]

			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800104a:	3406      	adds	r4, #6
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 800104c:	eba0 000b 	sub.w	r0, r0, fp
 8001050:	f7ff fa44 	bl	80004dc <__aeabi_i2d>
 8001054:	9b01      	ldr	r3, [sp, #4]
 8001056:	4680      	mov	r8, r0
 8001058:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 800105c:	4689      	mov	r9, r1
 800105e:	1ac0      	subs	r0, r0, r3
 8001060:	f7ff fa3c 	bl	80004dc <__aeabi_i2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	f7ff faa2 	bl	80005b0 <__aeabi_dmul>
 800106c:	4642      	mov	r2, r8
 800106e:	4606      	mov	r6, r0
 8001070:	460f      	mov	r7, r1
 8001072:	464b      	mov	r3, r9
 8001074:	4640      	mov	r0, r8
 8001076:	4649      	mov	r1, r9
 8001078:	f7ff fa9a 	bl	80005b0 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4630      	mov	r0, r6
 8001082:	4639      	mov	r1, r7
 8001084:	f7ff f8de 	bl	8000244 <__adddf3>
 8001088:	f7ff fd6a 	bl	8000b60 <__aeabi_d2uiz>
 800108c:	b280      	uxth	r0, r0
				uint16_t dist_sqr = LCD_DistSqr(&data[sensor], col, pag);
				if (dist_sqr <= 100) {
 800108e:	2864      	cmp	r0, #100	; 0x64
 8001090:	f240 808b 	bls.w	80011aa <LCD_PrintHeatMap+0x1b6>
					inSafeCircle = sensor;
					break;
				} else if (dist_sqr <= 900) {
 8001094:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001098:	f105 0501 	add.w	r5, r5, #1
					distSqrInAlteredCircle[sensor] = dist_sqr;
 800109c:	bf98      	it	ls
 800109e:	f8aa 0000 	strhls.w	r0, [sl]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 80010a2:	2d08      	cmp	r5, #8
 80010a4:	f10a 0a02 	add.w	sl, sl, #2
 80010a8:	d1ce      	bne.n	8001048 <LCD_PrintHeatMap+0x54>
 80010aa:	2500      	movs	r5, #0
 80010ac:	46a8      	mov	r8, r5
 80010ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 80010b2:	f10d 0416 	add.w	r4, sp, #22
 80010b6:	f10d 0926 	add.w	r9, sp, #38	; 0x26
			}

			uint16_t distSqrSum = 0;
			uint16_t weightedHue = 0;
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
				if (distSqrInAlteredCircle[sensor] != -1) {
 80010ba:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 80010be:	1c43      	adds	r3, r0, #1
 80010c0:	d040      	beq.n	8001144 <LCD_PrintHeatMap+0x150>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 80010c2:	f7ff fa0b 	bl	80004dc <__aeabi_i2d>
 80010c6:	2200      	movs	r2, #0
 80010c8:	2300      	movs	r3, #0
 80010ca:	4606      	mov	r6, r0
 80010cc:	460f      	mov	r7, r1
 80010ce:	f7ff fd09 	bl	8000ae4 <__aeabi_dcmpun>
 80010d2:	b938      	cbnz	r0, 80010e4 <LCD_PrintHeatMap+0xf0>
 80010d4:	2200      	movs	r2, #0
 80010d6:	2300      	movs	r3, #0
 80010d8:	4630      	mov	r0, r6
 80010da:	4639      	mov	r1, r7
 80010dc:	f7ff fcee 	bl	8000abc <__aeabi_dcmpge>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d070      	beq.n	80011c6 <LCD_PrintHeatMap+0x1d2>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 80010e4:	4630      	mov	r0, r6
 80010e6:	4639      	mov	r1, r7
 80010e8:	f006 f9be 	bl	8007468 <sqrt>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4640      	mov	r0, r8
 80010f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010f6:	f7ff f9f1 	bl	80004dc <__aeabi_i2d>
 80010fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010fe:	f7ff f8a1 	bl	8000244 <__adddf3>
 8001102:	f7ff fd2d 	bl	8000b60 <__aeabi_d2uiz>
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 8001106:	4639      	mov	r1, r7
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 8001108:	4680      	mov	r8, r0
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 800110a:	4630      	mov	r0, r6
 800110c:	f006 f9ac 	bl	8007468 <sqrt>
 8001110:	4606      	mov	r6, r0
 8001112:	460f      	mov	r7, r1
 8001114:	f89b 0004 	ldrb.w	r0, [fp, #4]
 8001118:	f7ff f9e0 	bl	80004dc <__aeabi_i2d>
 800111c:	4632      	mov	r2, r6
 800111e:	463b      	mov	r3, r7
 8001120:	f7ff fa46 	bl	80005b0 <__aeabi_dmul>
 8001124:	4606      	mov	r6, r0
 8001126:	4628      	mov	r0, r5
 8001128:	460f      	mov	r7, r1
 800112a:	f7ff f9d7 	bl	80004dc <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4630      	mov	r0, r6
 8001134:	4639      	mov	r1, r7
 8001136:	f7ff f885 	bl	8000244 <__adddf3>
 800113a:	f7ff fd11 	bl	8000b60 <__aeabi_d2uiz>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 800113e:	fa1f f888 	uxth.w	r8, r8
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 8001142:	b285      	uxth	r5, r0
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001144:	45a1      	cmp	r9, r4
 8001146:	f10b 0b06 	add.w	fp, fp, #6
 800114a:	d1b6      	bne.n	80010ba <LCD_PrintHeatMap+0xc6>
				}
			}

			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 800114c:	fbb5 f0f8 	udiv	r0, r5, r8
 8001150:	b2c0      	uxtb	r0, r0
 8001152:	f7ff fd25 	bl	8000ba0 <HueToRGB565>
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 8001156:	9b05      	ldr	r3, [sp, #20]
			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 8001158:	4604      	mov	r4, r0
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800115a:	2bef      	cmp	r3, #239	; 0xef
 800115c:	d803      	bhi.n	8001166 <LCD_PrintHeatMap+0x172>
 800115e:	9b01      	ldr	r3, [sp, #4]
 8001160:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001164:	d328      	bcc.n	80011b8 <LCD_PrintHeatMap+0x1c4>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001166:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800116a:	222c      	movs	r2, #44	; 0x2c
 800116c:	801a      	strh	r2, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 800116e:	9a01      	ldr	r2, [sp, #4]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001170:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001174:	3201      	adds	r2, #1
 8001176:	b292      	uxth	r2, r2
 8001178:	4611      	mov	r1, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800117a:	801c      	strh	r4, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 800117c:	9b04      	ldr	r3, [sp, #16]
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001182:	f103 0214 	add.w	r2, r3, #20
 8001186:	4291      	cmp	r1, r2
 8001188:	f77f af4f 	ble.w	800102a <LCD_PrintHeatMap+0x36>
 800118c:	9a04      	ldr	r2, [sp, #16]
 800118e:	8b10      	ldrh	r0, [r2, #24]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001190:	9a05      	ldr	r2, [sp, #20]
 8001192:	3201      	adds	r2, #1
 8001194:	b292      	uxth	r2, r2
 8001196:	4611      	mov	r1, r2
 8001198:	9205      	str	r2, [sp, #20]
 800119a:	f100 0214 	add.w	r2, r0, #20
 800119e:	4291      	cmp	r1, r2
 80011a0:	f77f af39 	ble.w	8001016 <LCD_PrintHeatMap+0x22>
		}
	}
}
 80011a4:	b00b      	add	sp, #44	; 0x2c
 80011a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LCD_DrawDot(col, pag, HueToRGB565(data[inSafeCircle].color));
 80011aa:	9b04      	ldr	r3, [sp, #16]
 80011ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011b0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80011b4:	7928      	ldrb	r0, [r5, #4]
 80011b6:	e7cc      	b.n	8001152 <LCD_PrintHeatMap+0x15e>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 80011b8:	2301      	movs	r3, #1
 80011ba:	9901      	ldr	r1, [sp, #4]
 80011bc:	461a      	mov	r2, r3
 80011be:	9805      	ldr	r0, [sp, #20]
 80011c0:	f7ff feb4 	bl	8000f2c <LCD_OpenWindow>
 80011c4:	e7cf      	b.n	8001166 <LCD_PrintHeatMap+0x172>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 80011c6:	4630      	mov	r0, r6
 80011c8:	4639      	mov	r1, r7
 80011ca:	f006 f94d 	bl	8007468 <sqrt>
 80011ce:	e789      	b.n	80010e4 <LCD_PrintHeatMap+0xf0>

080011d0 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	4616      	mov	r6, r2
 80011d4:	461c      	mov	r4, r3
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80011d6:	2208      	movs	r2, #8
 80011d8:	2310      	movs	r3, #16
                        uint16_t usColor_Foreground) {
 80011da:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80011de:	f7ff fea5 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011e2:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80011e6:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <LCD_DrawChar_Color+0x58>)
    ucRelativePositon = cChar - ' ';
 80011ec:	f1a6 0220 	sub.w	r2, r6, #32
 80011f0:	f103 0c10 	add.w	ip, r3, #16
 80011f4:	b2d2      	uxtb	r2, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <LCD_DrawChar_Color+0x5c>)
 80011f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80011fc:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001200:	f8a1 e000 	strh.w	lr, [r1]

    LCD_Write_Cmd(CMD_SetPixel);

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8001204:	2208      	movs	r2, #8
 8001206:	f813 1b01 	ldrb.w	r1, [r3], #1

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
            if (ucTemp & 0x01)
 800120a:	07ce      	lsls	r6, r1, #31
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800120c:	f102 32ff 	add.w	r2, r2, #4294967295
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001210:	bf4c      	ite	mi
 8001212:	8005      	strhmi	r5, [r0, #0]
 8001214:	8004      	strhpl	r4, [r0, #0]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001216:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                LCD_Write_Data(usColor_Foreground);

            else
                LCD_Write_Data(usColor_Background);

            ucTemp >>= 1;
 800121a:	ea4f 0151 	mov.w	r1, r1, lsr #1
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800121e:	d1f4      	bne.n	800120a <LCD_DrawChar_Color+0x3a>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 8001220:	4563      	cmp	r3, ip
 8001222:	d1ef      	bne.n	8001204 <LCD_DrawChar_Color+0x34>

        }

    }

}
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	bf00      	nop
 8001228:	08007628 	.word	0x08007628
 800122c:	60020000 	.word	0x60020000

08001230 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4605      	mov	r5, r0
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 8001234:	380a      	subs	r0, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001236:	2301      	movs	r3, #1
 8001238:	2214      	movs	r2, #20
 800123a:	b280      	uxth	r0, r0
void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 800123c:	460c      	mov	r4, r1
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800123e:	f7ff fe75 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001242:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001246:	202c      	movs	r0, #44	; 0x2c
 8001248:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800124a:	f04f 3cff 	mov.w	ip, #4294967295
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001250:	8008      	strh	r0, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8001252:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001254:	f8a2 c000 	strh.w	ip, [r2]
    for (i = 0; i < usPoint; i++)
 8001258:	d1fb      	bne.n	8001252 <LCD_DrawCross+0x22>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 800125a:	f1a4 010a 	sub.w	r1, r4, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800125e:	2314      	movs	r3, #20
 8001260:	2201      	movs	r2, #1
 8001262:	4628      	mov	r0, r5
 8001264:	b289      	uxth	r1, r1
 8001266:	f7ff fe61 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800126a:	242c      	movs	r4, #44	; 0x2c
 800126c:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8001270:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001272:	f04f 31ff 	mov.w	r1, #4294967295
 8001276:	4a03      	ldr	r2, [pc, #12]	; (8001284 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001278:	8004      	strh	r4, [r0, #0]
    for (i = 0; i < usPoint; i++)
 800127a:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800127c:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 800127e:	d1fc      	bne.n	800127a <LCD_DrawCross+0x4a>

}
 8001280:	bd38      	pop	{r3, r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	60020000 	.word	0x60020000

08001288 <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 8001288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800128c:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 800128e:	7812      	ldrb	r2, [r2, #0]
                          uint16_t usColor_Foreground) {
 8001290:	b082      	sub	sp, #8
 8001292:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    while (*pStr != '\0') {
 8001296:	b1da      	cbz	r2, 80012d0 <LCD_DrawString_Color+0x48>
 8001298:	4605      	mov	r5, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4698      	mov	r8, r3
 800129e:	e00b      	b.n	80012b8 <LCD_DrawString_Color+0x30>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 80012a0:	f105 0308 	add.w	r3, r5, #8
 80012a4:	4628      	mov	r0, r5
 80012a6:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 80012a8:	4643      	mov	r3, r8
 80012aa:	4621      	mov	r1, r4
 80012ac:	9700      	str	r7, [sp, #0]
 80012ae:	f7ff ff8f 	bl	80011d0 <LCD_DrawChar_Color>
    while (*pStr != '\0') {
 80012b2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80012b6:	b15a      	cbz	r2, 80012d0 <LCD_DrawString_Color+0x48>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 80012b8:	2de8      	cmp	r5, #232	; 0xe8
 80012ba:	d902      	bls.n	80012c2 <LCD_DrawString_Color+0x3a>
            usC = LCD_DispWindow_Start_COLUMN;
 80012bc:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 80012be:	3410      	adds	r4, #16
 80012c0:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 80012c2:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 80012c6:	d9eb      	bls.n	80012a0 <LCD_DrawString_Color+0x18>
            usP = LCD_DispWindow_Start_PAGE;
 80012c8:	2400      	movs	r4, #0
 80012ca:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 80012cc:	4620      	mov	r0, r4
 80012ce:	e7eb      	b.n	80012a8 <LCD_DrawString_Color+0x20>

    }

}
 80012d0:	b002      	add	sp, #8
 80012d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d6:	bf00      	nop

080012d8 <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80012d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012dc:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 80012de:	7812      	ldrb	r2, [r2, #0]
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80012e0:	b083      	sub	sp, #12
 80012e2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 80012e6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    while (*pStr != '\0') {
 80012ea:	b1fa      	cbz	r2, 800132c <LCD_DrawString_Color_With_Delay+0x54>
 80012ec:	4605      	mov	r5, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	461f      	mov	r7, r3
 80012f2:	e00f      	b.n	8001314 <LCD_DrawString_Color_With_Delay+0x3c>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 80012f4:	f105 0308 	add.w	r3, r5, #8
 80012f8:	4628      	mov	r0, r5
 80012fa:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4621      	mov	r1, r4
 8001300:	f8cd 9000 	str.w	r9, [sp]
 8001304:	f7ff ff64 	bl	80011d0 <LCD_DrawChar_Color>
        HAL_Delay(delayEachChar);
 8001308:	4640      	mov	r0, r8
 800130a:	f001 fad3 	bl	80028b4 <HAL_Delay>
    while (*pStr != '\0') {
 800130e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001312:	b15a      	cbz	r2, 800132c <LCD_DrawString_Color_With_Delay+0x54>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001314:	2de8      	cmp	r5, #232	; 0xe8
 8001316:	d902      	bls.n	800131e <LCD_DrawString_Color_With_Delay+0x46>
            usC = LCD_DispWindow_Start_COLUMN;
 8001318:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 800131a:	3410      	adds	r4, #16
 800131c:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 800131e:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 8001322:	d9e7      	bls.n	80012f4 <LCD_DrawString_Color_With_Delay+0x1c>
            usP = LCD_DispWindow_Start_PAGE;
 8001324:	2400      	movs	r4, #0
 8001326:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 8001328:	4620      	mov	r0, r4
 800132a:	e7e7      	b.n	80012fc <LCD_DrawString_Color_With_Delay+0x24>
    }

}
 800132c:	b003      	add	sp, #12
 800132e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001332:	bf00      	nop

08001334 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
    switch (ucOption) {
 8001334:	3801      	subs	r0, #1
void LCD_GramScan(uint8_t ucOption) {
 8001336:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (ucOption) {
 8001338:	2803      	cmp	r0, #3
 800133a:	d81e      	bhi.n	800137a <LCD_GramScan+0x46>
 800133c:	e8df f000 	tbb	[pc, r0]
 8001340:	2202424a 	.word	0x2202424a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001344:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001346:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800134a:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800134e:	f04f 0c28 	mov.w	ip, #40	; 0x28
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001352:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001354:	2601      	movs	r6, #1
 8001356:	253f      	movs	r5, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001358:	242b      	movs	r4, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800135a:	20ef      	movs	r0, #239	; 0xef
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800135e:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001362:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001366:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	801e      	strh	r6, [r3, #0]
 800136e:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001370:	800c      	strh	r4, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001372:	801a      	strh	r2, [r3, #0]
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800137a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800137e:	222c      	movs	r2, #44	; 0x2c
 8001380:	801a      	strh	r2, [r3, #0]

    /* write gram start */
    LCD_Write_Cmd(0x2C);


}
 8001382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001384:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001386:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800138a:	2736      	movs	r7, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800138c:	2648      	movs	r6, #72	; 0x48
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800138e:	252a      	movs	r5, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001390:	24ef      	movs	r4, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001392:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001396:	f04f 0c01 	mov.w	ip, #1
 800139a:	203f      	movs	r0, #63	; 0x3f
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800139e:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013a0:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013a2:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	801a      	strh	r2, [r3, #0]
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013ac:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013b8:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013ba:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013bc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80013c0:	801a      	strh	r2, [r3, #0]
}
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013c4:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013c6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80013ca:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013ce:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80013d2:	e7be      	b.n	8001352 <LCD_GramScan+0x1e>
 80013d4:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013d6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80013da:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013de:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013e2:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013e4:	26ef      	movs	r6, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013e6:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013e8:	2401      	movs	r4, #1
 80013ea:	203f      	movs	r0, #63	; 0x3f
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013ee:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013f2:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013f6:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001400:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001402:	801a      	strh	r2, [r3, #0]
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001408:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800140a:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800140c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001410:	801a      	strh	r2, [r3, #0]
}
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001414:	60020000 	.word	0x60020000

08001418 <mainPage.part.0>:

	for (uint8_t i = 0; i < 8; i++)
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
}

void mainPage(void) {
 8001418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (changingPage) {
        changingPage = 0;
 800141c:	2400      	movs	r4, #0
 800141e:	4828      	ldr	r0, [pc, #160]	; (80014c0 <mainPage.part.0+0xa8>)
        currentPage = home;
 8001420:	4928      	ldr	r1, [pc, #160]	; (80014c4 <mainPage.part.0+0xac>)
void mainPage(void) {
 8001422:	b082      	sub	sp, #8
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001424:	9400      	str	r4, [sp, #0]
 8001426:	f44f 73a0 	mov.w	r3, #320	; 0x140
        changingPage = 0;
 800142a:	6004      	str	r4, [r0, #0]
        currentPage = home;
 800142c:	700c      	strb	r4, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800142e:	4620      	mov	r0, r4
 8001430:	4621      	mov	r1, r4
 8001432:	22f0      	movs	r2, #240	; 0xf0
 8001434:	f7ff fda6 	bl	8000f84 <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001438:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800143c:	230a      	movs	r3, #10
        HAL_Delay(100);
        output_text = "Please choose an option below.";
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
        HAL_Delay(200);
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 800143e:	f647 77ff 	movw	r7, #32767	; 0x7fff
        output_text = "WEIGHT";
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001442:	250f      	movs	r5, #15
        HAL_Delay(200);
        output_text = "ACCEL.";
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 8001444:	f64f 76e0 	movw	r6, #65504	; 0xffe0
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001448:	2128      	movs	r1, #40	; 0x28
 800144a:	4620      	mov	r0, r4
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <mainPage.part.0+0xb0>)
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f8cd 8000 	str.w	r8, [sp]
 8001454:	231f      	movs	r3, #31
 8001456:	f7ff ff3f 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f001 fa2a 	bl	80028b4 <HAL_Delay>
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 8001460:	4623      	mov	r3, r4
 8001462:	2164      	movs	r1, #100	; 0x64
 8001464:	4620      	mov	r0, r4
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <mainPage.part.0+0xb4>)
 8001468:	f8cd 8000 	str.w	r8, [sp]
 800146c:	f7ff ff0c 	bl	8001288 <LCD_DrawString_Color>
        HAL_Delay(200);
 8001470:	20c8      	movs	r0, #200	; 0xc8
 8001472:	f001 fa1f 	bl	80028b4 <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8001476:	2328      	movs	r3, #40	; 0x28
 8001478:	2250      	movs	r2, #80	; 0x50
 800147a:	21e6      	movs	r1, #230	; 0xe6
 800147c:	2014      	movs	r0, #20
 800147e:	9700      	str	r7, [sp, #0]
 8001480:	f7ff fd80 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001484:	463b      	mov	r3, r7
 8001486:	21f2      	movs	r1, #242	; 0xf2
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <mainPage.part.0+0xb8>)
 800148a:	2023      	movs	r0, #35	; 0x23
 800148c:	e9cd 4500 	strd	r4, r5, [sp]
 8001490:	f7ff ff22 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 8001494:	20c8      	movs	r0, #200	; 0xc8
 8001496:	f001 fa0d 	bl	80028b4 <HAL_Delay>
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 800149a:	2328      	movs	r3, #40	; 0x28
 800149c:	2250      	movs	r2, #80	; 0x50
 800149e:	21e6      	movs	r1, #230	; 0xe6
 80014a0:	2082      	movs	r0, #130	; 0x82
 80014a2:	9600      	str	r6, [sp, #0]
 80014a4:	f7ff fd6e 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 80014a8:	4633      	mov	r3, r6
 80014aa:	21f2      	movs	r1, #242	; 0xf2
 80014ac:	2096      	movs	r0, #150	; 0x96
 80014ae:	e9cd 4500 	strd	r4, r5, [sp]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <mainPage.part.0+0xbc>)
 80014b4:	f7ff ff10 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
    }
}
 80014b8:	b002      	add	sp, #8
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000
 80014c4:	2000022c 	.word	0x2000022c
 80014c8:	08007c18 	.word	0x08007c18
 80014cc:	08007c40 	.word	0x08007c40
 80014d0:	08007c60 	.word	0x08007c60
 80014d4:	08007c68 	.word	0x08007c68

080014d8 <Check_touchkey>:
void Check_touchkey() {
 80014d8:	b500      	push	{lr}
 80014da:	b083      	sub	sp, #12
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 80014dc:	491b      	ldr	r1, [pc, #108]	; (800154c <Check_touchkey+0x74>)
 80014de:	a801      	add	r0, sp, #4
 80014e0:	f001 f924 	bl	800272c <XPT2046_Get_TouchedPoint>
 80014e4:	b190      	cbz	r0, 800150c <Check_touchkey+0x34>
        if (currentPage == home) {
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <Check_touchkey+0x78>)
 80014e8:	7813      	ldrb	r3, [r2, #0]
 80014ea:	b993      	cbnz	r3, 8001512 <Check_touchkey+0x3a>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 80014ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80014f0:	3bd3      	subs	r3, #211	; 0xd3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b26      	cmp	r3, #38	; 0x26
 80014f6:	d809      	bhi.n	800150c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 80014f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80014fc:	f1a3 0115 	sub.w	r1, r3, #21
 8001500:	294e      	cmp	r1, #78	; 0x4e
 8001502:	d819      	bhi.n	8001538 <Check_touchkey+0x60>
                    currentPage = weight;
 8001504:	2301      	movs	r3, #1
                    changingPage = 1;
 8001506:	4913      	ldr	r1, [pc, #76]	; (8001554 <Check_touchkey+0x7c>)
                    currentPage = weight;
 8001508:	7013      	strb	r3, [r2, #0]
                    changingPage = 1;
 800150a:	600b      	str	r3, [r1, #0]
}
 800150c:	b003      	add	sp, #12
 800150e:	f85d fb04 	ldr.w	pc, [sp], #4
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001512:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001516:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b18      	cmp	r3, #24
 800151e:	d8f5      	bhi.n	800150c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 8001520:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001524:	3b15      	subs	r3, #21
 8001526:	b29b      	uxth	r3, r3
 8001528:	2b80      	cmp	r3, #128	; 0x80
 800152a:	d8ef      	bhi.n	800150c <Check_touchkey+0x34>
                    currentPage = home;
 800152c:	2000      	movs	r0, #0
                    changingPage = 1;
 800152e:	2101      	movs	r1, #1
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <Check_touchkey+0x7c>)
                    currentPage = home;
 8001532:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 8001534:	6019      	str	r1, [r3, #0]
}
 8001536:	e7e9      	b.n	800150c <Check_touchkey+0x34>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 8001538:	3b83      	subs	r3, #131	; 0x83
 800153a:	2b4e      	cmp	r3, #78	; 0x4e
 800153c:	d8e6      	bhi.n	800150c <Check_touchkey+0x34>
                    currentPage = accelerometer;
 800153e:	2002      	movs	r0, #2
                    changingPage = 1;
 8001540:	2101      	movs	r1, #1
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <Check_touchkey+0x7c>)
                    currentPage = accelerometer;
 8001544:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 8001546:	6019      	str	r1, [r3, #0]
 8001548:	e7e0      	b.n	800150c <Check_touchkey+0x34>
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	2000022c 	.word	0x2000022c
 8001554:	20000000 	.word	0x20000000

08001558 <getY>:
void getY(uint8_t index, uint8_t delay) {
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4604      	mov	r4, r0
 800155c:	460d      	mov	r5, r1
    if ((index & 0x01) == 0) {
 800155e:	f010 0201 	ands.w	r2, r0, #1
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001562:	bf18      	it	ne
 8001564:	2201      	movne	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <getY+0x48>)
 800156c:	f001 fea4 	bl	80032b8 <HAL_GPIO_WritePin>
    if ((index & 0x02) == 0) {
 8001570:	f014 0202 	ands.w	r2, r4, #2
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001574:	bf18      	it	ne
 8001576:	2201      	movne	r2, #1
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <getY+0x48>)
 800157e:	f001 fe9b 	bl	80032b8 <HAL_GPIO_WritePin>
    if ((index & 0x04) == 0) {
 8001582:	f014 0204 	ands.w	r2, r4, #4
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <getY+0x48>)
 8001588:	bf18      	it	ne
 800158a:	2201      	movne	r2, #1
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	f001 fe92 	bl	80032b8 <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001594:	4628      	mov	r0, r5
}
 8001596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(delay);
 800159a:	f001 b98b 	b.w	80028b4 <HAL_Delay>
 800159e:	bf00      	nop
 80015a0:	40011000 	.word	0x40011000

080015a4 <initWeightSensors>:
void initWeightSensors(struct YPin *pins) {
 80015a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pins[2].weightAtSampledWeight = 300;
 80015a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
void initWeightSensors(struct YPin *pins) {
 80015ac:	4604      	mov	r4, r0
	pins[0].weightAtSampledWeight = 270;
 80015ae:	f44f 7087 	mov.w	r0, #270	; 0x10e
	pins[4].voltageAtZeroWeight = 1000;
 80015b2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800163c <initWeightSensors+0x98>
	pins[0].voltageAtZeroWeight = 1200;
 80015b6:	4922      	ldr	r1, [pc, #136]	; (8001640 <initWeightSensors+0x9c>)
	pins[1].voltageAtZeroWeight = 1300;
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <initWeightSensors+0xa0>)
	pins[2].voltageAtZeroWeight = 1800;
 80015ba:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001648 <initWeightSensors+0xa4>
	pins[3].voltageAtZeroWeight = 2800;
 80015be:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800164c <initWeightSensors+0xa8>
	pins[5].voltageAtZeroWeight = 1800;
 80015c2:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8001650 <initWeightSensors+0xac>
	pins[6].voltageAtZeroWeight = 1800;
 80015c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8001654 <initWeightSensors+0xb0>
	pins[7].voltageAtZeroWeight = 1000;
 80015ca:	4e23      	ldr	r6, [pc, #140]	; (8001658 <initWeightSensors+0xb4>)
	pins[4].voltageAtZeroWeight = 1000;
 80015cc:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	pins[7].weightAtSampledWeight = 300;
 80015d0:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 80015d4:	f240 57dc 	movw	r7, #1500	; 0x5dc
	pins[2].voltageAtZeroWeight = 1800;
 80015d8:	f8c4 a020 	str.w	sl, [r4, #32]
	pins[3].voltageAtZeroWeight = 2800;
 80015dc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	pins[5].voltageAtZeroWeight = 1800;
 80015e0:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
	pins[6].voltageAtZeroWeight = 1800;
 80015e4:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
	pins[7].voltageAtZeroWeight = 1000;
 80015e8:	6726      	str	r6, [r4, #112]	; 0x70
	pins[0].voltageAtZeroWeight = 1200;
 80015ea:	6021      	str	r1, [r4, #0]
	pins[1].voltageAtZeroWeight = 1300;
 80015ec:	6122      	str	r2, [r4, #16]
	pins[0].weightAtSampledWeight = 270;
 80015ee:	80a0      	strh	r0, [r4, #4]
	pins[1].weightAtSampledWeight = 270;
 80015f0:	82a0      	strh	r0, [r4, #20]
	pins[2].weightAtSampledWeight = 300;
 80015f2:	84a3      	strh	r3, [r4, #36]	; 0x24
	pins[3].weightAtSampledWeight = 300;
 80015f4:	86a3      	strh	r3, [r4, #52]	; 0x34
	pins[4].weightAtSampledWeight = 300;
 80015f6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	pins[5].weightAtSampledWeight = 300;
 80015fa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	pins[6].weightAtSampledWeight = 300;
 80015fe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	pins[7].weightAtSampledWeight = 300;
 8001602:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	for (uint8_t i = 0; i < 8; i++)
 8001606:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800160a:	e003      	b.n	8001614 <initWeightSensors+0x70>
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 800160c:	8aa0      	ldrh	r0, [r4, #20]
 800160e:	8a67      	ldrh	r7, [r4, #18]
 8001610:	f834 5f10 	ldrh.w	r5, [r4, #16]!
 8001614:	f7fe ff62 	bl	80004dc <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	1b78      	subs	r0, r7, r5
 800161c:	4616      	mov	r6, r2
 800161e:	460f      	mov	r7, r1
 8001620:	f7fe ff5c 	bl	80004dc <__aeabi_i2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4630      	mov	r0, r6
 800162a:	4639      	mov	r1, r7
 800162c:	f7ff f8ea 	bl	8000804 <__aeabi_ddiv>
	for (uint8_t i = 0; i < 8; i++)
 8001630:	45a0      	cmp	r8, r4
		pins[i].weightCoef = pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 8001632:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (uint8_t i = 0; i < 8; i++)
 8001636:	d1e9      	bne.n	800160c <initWeightSensors+0x68>
}
 8001638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163c:	070803e8 	.word	0x070803e8
 8001640:	05dc04b0 	.word	0x05dc04b0
 8001644:	05dc0514 	.word	0x05dc0514
 8001648:	0a280708 	.word	0x0a280708
 800164c:	0c800af0 	.word	0x0c800af0
 8001650:	07d00708 	.word	0x07d00708
 8001654:	08340708 	.word	0x08340708
 8001658:	53fc03e8 	.word	0x53fc03e8

0800165c <weightPage>:
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
    HAL_Delay(30);
}

void weightPage(void) {
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8001660:	495f      	ldr	r1, [pc, #380]	; (80017e0 <weightPage+0x184>)
void weightPage(void) {
 8001662:	b08b      	sub	sp, #44	; 0x2c
    if (changingPage) {
 8001664:	680b      	ldr	r3, [r1, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d168      	bne.n	800173c <weightPage+0xe0>
 800166a:	f10d 0918 	add.w	r9, sp, #24
 800166e:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(30);
 8001672:	2500      	movs	r5, #0
 8001674:	462f      	mov	r7, r5
 8001676:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80017e4 <weightPage+0x188>
 800167a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80017e8 <weightPage+0x18c>
        }
    }

    uint16_t sum = 0;
    for (uint8_t counter = 0; counter < 8; counter++) {
        getY(counter, 20);
 800167e:	2114      	movs	r1, #20
 8001680:	b2e8      	uxtb	r0, r5
 8001682:	f7ff ff69 	bl	8001558 <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001686:	4859      	ldr	r0, [pc, #356]	; (80017ec <weightPage+0x190>)
 8001688:	f001 f9d8 	bl	8002a3c <HAL_ADC_GetValue>
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 800168c:	f8b8 3000 	ldrh.w	r3, [r8]
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001690:	4604      	mov	r4, r0
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001692:	f108 0810 	add.w	r8, r8, #16
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001696:	1ac0      	subs	r0, r0, r3
 8001698:	f7fe ff10 	bl	80004bc <__aeabi_ui2d>
 800169c:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 80016a0:	f7fe ff86 	bl	80005b0 <__aeabi_dmul>
 80016a4:	f7ff fa34 	bl	8000b10 <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
//        if (counter < 4)
//        	LCD_DrawHeatCircle(30, 240 - counter * 40, 30, 85 - val * 85 / 4096, 85);
//		else
//			LCD_DrawHeatCircle(70, 120 + (counter - 4) * 40, 30, 85 - val * 85 / 4096, 85);

        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 80016aa:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80016ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4

        char dec[10] = "";
 80016b2:	2600      	movs	r6, #0
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 80016b4:	0b09      	lsrs	r1, r1, #12
 80016b6:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 80016ba:	b21b      	sxth	r3, r3
        if (weightPin < 0) weightPin = 0;
 80016bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 80016c0:	4650      	mov	r0, sl
 80016c2:	b289      	uxth	r1, r1
        sum += weightPin;
 80016c4:	441f      	add	r7, r3
 80016c6:	9303      	str	r3, [sp, #12]
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 80016c8:	f7ff fc92 	bl	8000ff0 <LCD_SetPinColor>
        sprintf(dec, "%4d %5d", val, weightPin);
 80016cc:	4622      	mov	r2, r4
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80016ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
        sprintf(dec, "%4d %5d", val, weightPin);
 80016d2:	9b03      	ldr	r3, [sp, #12]
 80016d4:	4946      	ldr	r1, [pc, #280]	; (80017f0 <weightPage+0x194>)
 80016d6:	4658      	mov	r0, fp
        char dec[10] = "";
 80016d8:	9605      	str	r6, [sp, #20]
 80016da:	f8c9 6000 	str.w	r6, [r9]
 80016de:	f8a9 6004 	strh.w	r6, [r9, #4]
        sprintf(dec, "%4d %5d", val, weightPin);
 80016e2:	f003 fd3b 	bl	800515c <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80016e6:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80016ea:	0049      	lsls	r1, r1, #1
 80016ec:	3164      	adds	r1, #100	; 0x64
 80016ee:	4633      	mov	r3, r6
 80016f0:	465a      	mov	r2, fp
 80016f2:	208c      	movs	r0, #140	; 0x8c
 80016f4:	b289      	uxth	r1, r1
 80016f6:	9400      	str	r4, [sp, #0]
    for (uint8_t counter = 0; counter < 8; counter++) {
 80016f8:	3501      	adds	r5, #1
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80016fa:	f7ff fdc5 	bl	8001288 <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 80016fe:	2d08      	cmp	r5, #8
 8001700:	f10a 0a06 	add.w	sl, sl, #6
        sum += weightPin;
 8001704:	b2bf      	uxth	r7, r7
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001706:	d1ba      	bne.n	800167e <weightPage+0x22>
    }
	LCD_PrintHeatMap(weightSensorsData);
 8001708:	4837      	ldr	r0, [pc, #220]	; (80017e8 <weightPage+0x18c>)
 800170a:	f7ff fc73 	bl	8000ff4 <LCD_PrintHeatMap>

    char output_gram[20] = "";
    sprintf(output_gram, "%6d Gram", sum);
 800170e:	463a      	mov	r2, r7
 8001710:	4658      	mov	r0, fp
 8001712:	4938      	ldr	r1, [pc, #224]	; (80017f4 <weightPage+0x198>)
    char output_gram[20] = "";
 8001714:	9605      	str	r6, [sp, #20]
 8001716:	e9c9 6600 	strd	r6, r6, [r9]
 800171a:	e9c9 6602 	strd	r6, r6, [r9, #8]
    sprintf(output_gram, "%6d Gram", sum);
 800171e:	f003 fd1d 	bl	800515c <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, WHITE);
 8001722:	231f      	movs	r3, #31
 8001724:	465a      	mov	r2, fp
 8001726:	2150      	movs	r1, #80	; 0x50
 8001728:	2078      	movs	r0, #120	; 0x78
 800172a:	9400      	str	r4, [sp, #0]
 800172c:	f7ff fdac 	bl	8001288 <LCD_DrawString_Color>

    HAL_Delay(20);
 8001730:	2014      	movs	r0, #20
 8001732:	f001 f8bf 	bl	80028b4 <HAL_Delay>
}
 8001736:	b00b      	add	sp, #44	; 0x2c
 8001738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        changingPage = 0;
 800173c:	f04f 0800 	mov.w	r8, #0
        currentPage = weight;
 8001740:	2501      	movs	r5, #1
 8001742:	482d      	ldr	r0, [pc, #180]	; (80017f8 <weightPage+0x19c>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001744:	f8cd 8000 	str.w	r8, [sp]
 8001748:	f44f 73a0 	mov.w	r3, #320	; 0x140
        currentPage = weight;
 800174c:	7005      	strb	r5, [r0, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800174e:	22f0      	movs	r2, #240	; 0xf0
 8001750:	4640      	mov	r0, r8
        changingPage = 0;
 8001752:	f8c1 8000 	str.w	r8, [r1]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001756:	4641      	mov	r1, r8
 8001758:	f7ff fc14 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 800175c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001760:	230a      	movs	r3, #10
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001762:	f647 7aff 	movw	sl, #32767	; 0x7fff
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001766:	2128      	movs	r1, #40	; 0x28
 8001768:	4640      	mov	r0, r8
 800176a:	e9cd 6300 	strd	r6, r3, [sp]
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <weightPage+0x1a0>)
 8001770:	231f      	movs	r3, #31
 8001772:	f7ff fdb1 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001776:	2319      	movs	r3, #25
 8001778:	2282      	movs	r2, #130	; 0x82
 800177a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800177e:	2014      	movs	r0, #20
 8001780:	f8cd a000 	str.w	sl, [sp]
 8001784:	f7ff fbfe 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001788:	230a      	movs	r3, #10
 800178a:	201e      	movs	r0, #30
 800178c:	e9cd 8300 	strd	r8, r3, [sp]
 8001790:	f240 111d 	movw	r1, #285	; 0x11d
 8001794:	4653      	mov	r3, sl
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <weightPage+0x1a4>)
 8001798:	f7ff fd9e 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(30);
 800179c:	201e      	movs	r0, #30
 800179e:	2464      	movs	r4, #100	; 0x64
 80017a0:	4645      	mov	r5, r8
            sprintf(temp, "Y%d: ", i);
 80017a2:	4f18      	ldr	r7, [pc, #96]	; (8001804 <weightPage+0x1a8>)
 80017a4:	f10d 0918 	add.w	r9, sp, #24
 80017a8:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(30);
 80017ac:	f001 f882 	bl	80028b4 <HAL_Delay>
            sprintf(temp, "Y%d: ", i);
 80017b0:	462a      	mov	r2, r5
 80017b2:	4639      	mov	r1, r7
 80017b4:	4658      	mov	r0, fp
            char temp[10] = "";
 80017b6:	f8cd 8014 	str.w	r8, [sp, #20]
        for (uint8_t i = 0; i < 8; i++) {
 80017ba:	3501      	adds	r5, #1
            char temp[10] = "";
 80017bc:	f8c9 8000 	str.w	r8, [r9]
 80017c0:	f8a9 8004 	strh.w	r8, [r9, #4]
            sprintf(temp, "Y%d: ", i);
 80017c4:	f003 fcca 	bl	800515c <siprintf>
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 80017c8:	4621      	mov	r1, r4
 80017ca:	2300      	movs	r3, #0
 80017cc:	465a      	mov	r2, fp
 80017ce:	206e      	movs	r0, #110	; 0x6e
 80017d0:	9600      	str	r6, [sp, #0]
 80017d2:	f7ff fd59 	bl	8001288 <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 80017d6:	3412      	adds	r4, #18
 80017d8:	2d08      	cmp	r5, #8
 80017da:	b2a4      	uxth	r4, r4
 80017dc:	d1e8      	bne.n	80017b0 <weightPage+0x154>
 80017de:	e748      	b.n	8001672 <weightPage+0x16>
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000308 	.word	0x20000308
 80017e8:	20000388 	.word	0x20000388
 80017ec:	20000230 	.word	0x20000230
 80017f0:	08007ca8 	.word	0x08007ca8
 80017f4:	08007cb0 	.word	0x08007cb0
 80017f8:	2000022c 	.word	0x2000022c
 80017fc:	08007c80 	.word	0x08007c80
 8001800:	08007c70 	.word	0x08007c70
 8001804:	08007ca0 	.word	0x08007ca0

08001808 <accelerometerPage>:

void accelerometerPage() {
 8001808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 800180c:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8001b48 <accelerometerPage+0x340>
void accelerometerPage() {
 8001810:	b093      	sub	sp, #76	; 0x4c
    if (changingPage) {
 8001812:	f8d8 3000 	ldr.w	r3, [r8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8085 	bne.w	8001926 <accelerometerPage+0x11e>
 800181c:	4bcb      	ldr	r3, [pc, #812]	; (8001b4c <accelerometerPage+0x344>)
 800181e:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8001b50 <accelerometerPage+0x348>
 8001822:	9305      	str	r3, [sp, #20]
 8001824:	4bcb      	ldr	r3, [pc, #812]	; (8001b54 <accelerometerPage+0x34c>)
 8001826:	ad09      	add	r5, sp, #36	; 0x24
 8001828:	9306      	str	r3, [sp, #24]
 800182a:	ab0f      	add	r3, sp, #60	; 0x3c
 800182c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8001830:	9307      	str	r3, [sp, #28]
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
        }
        /* DEBUG MESSAGE ABOVE */
    }
    // 0x3A for writing address, 0x3B for reading address
    uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 8001832:	2006      	movs	r0, #6
 8001834:	f002 ff36 	bl	80046a4 <malloc>
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 8001838:	f04f 0b64 	mov.w	fp, #100	; 0x64
    uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 800183c:	4607      	mov	r7, r0
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 800183e:	2306      	movs	r3, #6
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 8001840:	2400      	movs	r4, #0
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 8001842:	2232      	movs	r2, #50	; 0x32
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	9700      	str	r7, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	213a      	movs	r1, #58	; 0x3a
 800184c:	f8cd b008 	str.w	fp, [sp, #8]
 8001850:	48c1      	ldr	r0, [pc, #772]	; (8001b58 <accelerometerPage+0x350>)
 8001852:	f002 f8cf 	bl	80039f4 <HAL_I2C_Mem_Read>
    double finalizedX = 0.0, finalizedY = 0.0, finalizedZ = 0.0;
    // All axes have a scale factor of 7.8
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001856:	f9b9 3000 	ldrsh.w	r3, [r9]
 800185a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 800185e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001862:	1ac0      	subs	r0, r0, r3
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 8001864:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001868:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800186c:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8001870:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
 8001874:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001878:	f7fe fe30 	bl	80004dc <__aeabi_i2d>
 800187c:	a3b0      	add	r3, pc, #704	; (adr r3, 8001b40 <accelerometerPage+0x338>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fe95 	bl	80005b0 <__aeabi_dmul>
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001886:	9b06      	ldr	r3, [sp, #24]
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001888:	4680      	mov	r8, r0
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8001892:	4689      	mov	r9, r1
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8001894:	1ac0      	subs	r0, r0, r3
 8001896:	f7fe fe21 	bl	80004dc <__aeabi_i2d>
 800189a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001b40 <accelerometerPage+0x338>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fe86 	bl	80005b0 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 80018a8:	9905      	ldr	r1, [sp, #20]
 80018aa:	f9b7 0000 	ldrsh.w	r0, [r7]
 80018ae:	f9b1 1000 	ldrsh.w	r1, [r1]
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 80018b2:	4616      	mov	r6, r2
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 80018b4:	1a40      	subs	r0, r0, r1
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 80018b6:	461f      	mov	r7, r3
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 80018b8:	f7fe fe10 	bl	80004dc <__aeabi_i2d>
 80018bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8001b40 <accelerometerPage+0x338>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe75 	bl	80005b0 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
    sprintf(x_print, "%+5.3f", finalizedX);
 80018ca:	4628      	mov	r0, r5
 80018cc:	49a3      	ldr	r1, [pc, #652]	; (8001b5c <accelerometerPage+0x354>)
 80018ce:	f003 fc45 	bl	800515c <siprintf>
    sprintf(y_print, "%+5.3f", finalizedY);
 80018d2:	4642      	mov	r2, r8
 80018d4:	464b      	mov	r3, r9
 80018d6:	4650      	mov	r0, sl
 80018d8:	49a0      	ldr	r1, [pc, #640]	; (8001b5c <accelerometerPage+0x354>)
 80018da:	f003 fc3f 	bl	800515c <siprintf>
    sprintf(z_print, "%+5.3f", finalizedZ);
 80018de:	4632      	mov	r2, r6
 80018e0:	9e07      	ldr	r6, [sp, #28]
 80018e2:	463b      	mov	r3, r7
 80018e4:	4630      	mov	r0, r6
 80018e6:	499d      	ldr	r1, [pc, #628]	; (8001b5c <accelerometerPage+0x354>)
 80018e8:	f003 fc38 	bl	800515c <siprintf>
    LCD_DrawString_Color(150, 100, x_print, CYAN, BLACK);
 80018ec:	462a      	mov	r2, r5
 80018ee:	4659      	mov	r1, fp
 80018f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80018f4:	2096      	movs	r0, #150	; 0x96
 80018f6:	9400      	str	r4, [sp, #0]
 80018f8:	f7ff fcc6 	bl	8001288 <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 130, y_print, YELLOW, BLACK);
 80018fc:	4652      	mov	r2, sl
 80018fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001902:	2182      	movs	r1, #130	; 0x82
 8001904:	2096      	movs	r0, #150	; 0x96
 8001906:	9400      	str	r4, [sp, #0]
 8001908:	f7ff fcbe 	bl	8001288 <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 160, z_print, BLUE, BLACK);
 800190c:	4632      	mov	r2, r6
 800190e:	231f      	movs	r3, #31
 8001910:	21a0      	movs	r1, #160	; 0xa0
 8001912:	2096      	movs	r0, #150	; 0x96
 8001914:	9400      	str	r4, [sp, #0]
 8001916:	f7ff fcb7 	bl	8001288 <LCD_DrawString_Color>
    HAL_Delay(30);
 800191a:	201e      	movs	r0, #30
 800191c:	f000 ffca 	bl	80028b4 <HAL_Delay>
}
 8001920:	b013      	add	sp, #76	; 0x4c
 8001922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001926:	2601      	movs	r6, #1
 8001928:	2764      	movs	r7, #100	; 0x64
        uint8_t setPWLMode = 0x00; //reset accelerometer
 800192a:	2400      	movs	r4, #0
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 800192c:	ab0f      	add	r3, sp, #60	; 0x3c
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800192e:	ad09      	add	r5, sp, #36	; 0x24
 8001930:	222d      	movs	r2, #45	; 0x2d
 8001932:	213a      	movs	r1, #58	; 0x3a
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 8001934:	469b      	mov	fp, r3
 8001936:	9307      	str	r3, [sp, #28]
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001938:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800193c:	4633      	mov	r3, r6
 800193e:	4886      	ldr	r0, [pc, #536]	; (8001b58 <accelerometerPage+0x350>)
 8001940:	9500      	str	r5, [sp, #0]
        uint8_t setPWLMode = 0x00; //reset accelerometer
 8001942:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001946:	f001 ffa1 	bl	800388c <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800194a:	4638      	mov	r0, r7
 800194c:	f000 ffb2 	bl	80028b4 <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 8001950:	2308      	movs	r3, #8
        uint8_t formatting = 0x05; // full res +-4g
 8001952:	f04f 0905 	mov.w	r9, #5
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001956:	222d      	movs	r2, #45	; 0x2d
 8001958:	213a      	movs	r1, #58	; 0x3a
        setPWLMode = 0x08; //disable auto sleep, always measure
 800195a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800195e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8001962:	4633      	mov	r3, r6
 8001964:	487c      	ldr	r0, [pc, #496]	; (8001b58 <accelerometerPage+0x350>)
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 8001966:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800196a:	9500      	str	r5, [sp, #0]
 800196c:	f001 ff8e 	bl	800388c <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 8001970:	4633      	mov	r3, r6
 8001972:	2231      	movs	r2, #49	; 0x31
 8001974:	213a      	movs	r1, #58	; 0x3a
 8001976:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800197a:	4877      	ldr	r0, [pc, #476]	; (8001b58 <accelerometerPage+0x350>)
 800197c:	f8cd a000 	str.w	sl, [sp]
        uint8_t formatting = 0x05; // full res +-4g
 8001980:	f88d 9030 	strb.w	r9, [sp, #48]	; 0x30
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 8001984:	f001 ff82 	bl	800388c <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 8001988:	4633      	mov	r3, r6
 800198a:	4622      	mov	r2, r4
 800198c:	213a      	movs	r1, #58	; 0x3a
 800198e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8001992:	4871      	ldr	r0, [pc, #452]	; (8001b58 <accelerometerPage+0x350>)
 8001994:	f8cd b000 	str.w	fp, [sp]
        uint8_t debug = 0x00;
 8001998:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 800199c:	f002 f82a 	bl	80039f4 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 80019a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019a4:	22f0      	movs	r2, #240	; 0xf0
 80019a6:	4621      	mov	r1, r4
 80019a8:	4620      	mov	r0, r4
 80019aa:	9400      	str	r4, [sp, #0]
 80019ac:	f7ff faea 	bl	8000f84 <LCD_Clear>
        HAL_Delay(100);
 80019b0:	4638      	mov	r0, r7
 80019b2:	f000 ff7f 	bl	80028b4 <HAL_Delay>
        if (debug != 0xE5) {
 80019b6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80019ba:	2be5      	cmp	r3, #229	; 0xe5
 80019bc:	d01f      	beq.n	80019fe <accelerometerPage+0x1f6>
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 80019be:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80019c2:	4639      	mov	r1, r7
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 80019c4:	2703      	movs	r7, #3
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 80019c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019ca:	2032      	movs	r0, #50	; 0x32
 80019cc:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <accelerometerPage+0x358>)
 80019ce:	f8cd 9004 	str.w	r9, [sp, #4]
 80019d2:	9500      	str	r5, [sp, #0]
 80019d4:	f7ff fc80 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 80019d8:	4623      	mov	r3, r4
 80019da:	2196      	movs	r1, #150	; 0x96
 80019dc:	4620      	mov	r0, r4
 80019de:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <accelerometerPage+0x35c>)
 80019e0:	9500      	str	r5, [sp, #0]
 80019e2:	9701      	str	r7, [sp, #4]
 80019e4:	f7ff fc78 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 80019e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ec:	f000 ff62 	bl	80028b4 <HAL_Delay>
            currentPage = home;
 80019f0:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <accelerometerPage+0x360>)
            changingPage = 1;
 80019f2:	f8c8 6000 	str.w	r6, [r8]
            currentPage = home;
 80019f6:	701c      	strb	r4, [r3, #0]
}
 80019f8:	b013      	add	sp, #76	; 0x4c
 80019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 80019fe:	f04f 0b0a 	mov.w	fp, #10
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8001a02:	f8df c148 	ldr.w	ip, [pc, #328]	; 8001b4c <accelerometerPage+0x344>
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001a06:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8001b54 <accelerometerPage+0x34c>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8001a0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a0e:	4639      	mov	r1, r7
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <accelerometerPage+0x364>)
 8001a12:	4620      	mov	r0, r4
 8001a14:	9400      	str	r4, [sp, #0]
 8001a16:	f8cd b004 	str.w	fp, [sp, #4]
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8001a1a:	f8cd c014 	str.w	ip, [sp, #20]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001a1e:	f8cd e018 	str.w	lr, [sp, #24]
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8001a22:	f7ff fc59 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(3000);
 8001a26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a2a:	f000 ff43 	bl	80028b4 <HAL_Delay>
        uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 8001a2e:	2006      	movs	r0, #6
 8001a30:	f002 fe38 	bl	80046a4 <malloc>
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 8001a34:	4633      	mov	r3, r6
 8001a36:	2206      	movs	r2, #6
        uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 8001a38:	4606      	mov	r6, r0
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 8001a3a:	213a      	movs	r1, #58	; 0x3a
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9600      	str	r6, [sp, #0]
 8001a40:	2232      	movs	r2, #50	; 0x32
 8001a42:	4845      	ldr	r0, [pc, #276]	; (8001b58 <accelerometerPage+0x350>)
 8001a44:	9702      	str	r7, [sp, #8]
 8001a46:	f001 ffd5 	bl	80039f4 <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a4a:	9400      	str	r4, [sp, #0]
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8001a4c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8001a50:	8833      	ldrh	r3, [r6, #0]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 8001a52:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8001b50 <accelerometerPage+0x348>
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8001a56:	f8ac 3000 	strh.w	r3, [ip]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 8001a5a:	8873      	ldrh	r3, [r6, #2]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001a5c:	f8dd e018 	ldr.w	lr, [sp, #24]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 8001a60:	f8a9 3000 	strh.w	r3, [r9]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001a64:	88b3      	ldrh	r3, [r6, #4]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a66:	22f0      	movs	r2, #240	; 0xf0
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 8001a68:	f8ae 3000 	strh.w	r3, [lr]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fa86 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8001a78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	4a3c      	ldr	r2, [pc, #240]	; (8001b70 <accelerometerPage+0x368>)
 8001a80:	4620      	mov	r0, r4
 8001a82:	e9cd 4b00 	strd	r4, fp, [sp]
 8001a86:	f7ff fc27 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8001a8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a8e:	f000 ff11 	bl	80028b4 <HAL_Delay>
        currentPage = accelerometer;
 8001a92:	2202      	movs	r2, #2
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001a94:	f64f 76ff 	movw	r6, #65535	; 0xffff
        currentPage = accelerometer;
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <accelerometerPage+0x360>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4620      	mov	r0, r4
        changingPage = 0;
 8001a9e:	f8c8 4000 	str.w	r4, [r8]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001aa2:	9400      	str	r4, [sp, #0]
        currentPage = accelerometer;
 8001aa4:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001aa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001aaa:	22f0      	movs	r2, #240	; 0xf0
 8001aac:	f7ff fa6a 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001ab0:	231f      	movs	r3, #31
 8001ab2:	2128      	movs	r1, #40	; 0x28
 8001ab4:	4658      	mov	r0, fp
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <accelerometerPage+0x36c>)
 8001ab8:	f8cd b004 	str.w	fp, [sp, #4]
 8001abc:	9600      	str	r6, [sp, #0]
 8001abe:	f7ff fc0b 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001ac2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001ac6:	2282      	movs	r2, #130	; 0x82
 8001ac8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001acc:	2014      	movs	r0, #20
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	f7ff fa57 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001ad6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001ada:	f240 111d 	movw	r1, #285	; 0x11d
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <accelerometerPage+0x370>)
 8001ae0:	201e      	movs	r0, #30
 8001ae2:	e9cd 4b00 	strd	r4, fp, [sp]
 8001ae6:	f7ff fbf7 	bl	80012d8 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(30);
 8001aea:	201e      	movs	r0, #30
 8001aec:	f000 fee2 	bl	80028b4 <HAL_Delay>
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 8001af0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001af4:	4639      	mov	r1, r7
 8001af6:	2028      	movs	r0, #40	; 0x28
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <accelerometerPage+0x374>)
 8001afa:	9400      	str	r4, [sp, #0]
 8001afc:	f7ff fbc4 	bl	8001288 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 8001b00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b04:	2182      	movs	r1, #130	; 0x82
 8001b06:	2028      	movs	r0, #40	; 0x28
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <accelerometerPage+0x378>)
 8001b0a:	9400      	str	r4, [sp, #0]
 8001b0c:	f7ff fbbc 	bl	8001288 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 8001b10:	231f      	movs	r3, #31
 8001b12:	21a0      	movs	r1, #160	; 0xa0
 8001b14:	2028      	movs	r0, #40	; 0x28
 8001b16:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <accelerometerPage+0x37c>)
 8001b18:	9400      	str	r4, [sp, #0]
 8001b1a:	f7ff fbb5 	bl	8001288 <LCD_DrawString_Color>
        if (debug != 0xE5) {
 8001b1e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001b22:	2be5      	cmp	r3, #229	; 0xe5
 8001b24:	f43f ae85 	beq.w	8001832 <accelerometerPage+0x2a>
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 8001b28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b2c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b30:	208c      	movs	r0, #140	; 0x8c
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <accelerometerPage+0x380>)
 8001b34:	9600      	str	r6, [sp, #0]
 8001b36:	f7ff fba7 	bl	8001288 <LCD_DrawString_Color>
 8001b3a:	e67a      	b.n	8001832 <accelerometerPage+0x2a>
 8001b3c:	f3af 8000 	nop.w
 8001b40:	d916872b 	.word	0xd916872b
 8001b44:	3fb3f7ce 	.word	0x3fb3f7ce
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	200002fc 	.word	0x200002fc
 8001b50:	200002fe 	.word	0x200002fe
 8001b54:	20000300 	.word	0x20000300
 8001b58:	20000260 	.word	0x20000260
 8001b5c:	08007d88 	.word	0x08007d88
 8001b60:	08007cbc 	.word	0x08007cbc
 8001b64:	08007cd0 	.word	0x08007cd0
 8001b68:	2000022c 	.word	0x2000022c
 8001b6c:	08007d00 	.word	0x08007d00
 8001b70:	08007d30 	.word	0x08007d30
 8001b74:	08007d54 	.word	0x08007d54
 8001b78:	08007c70 	.word	0x08007c70
 8001b7c:	08007d70 	.word	0x08007d70
 8001b80:	08007d74 	.word	0x08007d74
 8001b84:	08007d78 	.word	0x08007d78
 8001b88:	08007d7c 	.word	0x08007d7c

08001b8c <SystemClock_Config>:
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 8001b8e:	b510      	push	{r4, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b90:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2402      	movs	r4, #2
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b98:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 8001b9c:	b096      	sub	sp, #88	; 0x58
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9e:	900c      	str	r0, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba0:	9010      	str	r0, [sp, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ba2:	a80c      	add	r0, sp, #48	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba4:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001bb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001bb8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bbc:	9115      	str	r1, [sp, #84]	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	9301      	str	r3, [sp, #4]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc2:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	920d      	str	r2, [sp, #52]	; 0x34
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bca:	f002 f89f 	bl	8003d0c <HAL_RCC_OscConfig>
 8001bce:	b108      	cbz	r0, 8001bd4 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
  */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001bd2:	e7fe      	b.n	8001bd2 <SystemClock_Config+0x46>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220f      	movs	r2, #15
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bdc:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001be2:	4621      	mov	r1, r4
 8001be4:	a801      	add	r0, sp, #4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be6:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001be8:	9201      	str	r2, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bea:	f002 fabb 	bl	8004164 <HAL_RCC_ClockConfig>
 8001bee:	b108      	cbz	r0, 8001bf4 <SystemClock_Config+0x68>
 8001bf0:	b672      	cpsid	i
    while (1) {
 8001bf2:	e7fe      	b.n	8001bf2 <SystemClock_Config+0x66>
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001bf8:	a806      	add	r0, sp, #24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bfa:	9406      	str	r4, [sp, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bfc:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001bfe:	f002 fb71 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	b108      	cbz	r0, 8001c08 <SystemClock_Config+0x7c>
 8001c04:	b672      	cpsid	i
    while (1) {
 8001c06:	e7fe      	b.n	8001c06 <SystemClock_Config+0x7a>
}
 8001c08:	b016      	add	sp, #88	; 0x58
 8001c0a:	bd10      	pop	{r4, pc}

08001c0c <main>:
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	2400      	movs	r4, #0
int main(void) {
 8001c0e:	b580      	push	{r7, lr}
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c10:	2710      	movs	r7, #16
int main(void) {
 8001c12:	b08e      	sub	sp, #56	; 0x38
    HAL_Init();
 8001c14:	f000 fe2a 	bl	800286c <HAL_Init>
    SystemClock_Config();
 8001c18:	f7ff ffb8 	bl	8001b8c <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001c20:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c24:	4ba7      	ldr	r3, [pc, #668]	; (8001ec4 <main+0x2b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2501      	movs	r5, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c28:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c2a:	2107      	movs	r1, #7
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c34:	48a4      	ldr	r0, [pc, #656]	; (8001ec8 <main+0x2bc>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	433a      	orrs	r2, r7
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	403a      	ands	r2, r7
 8001c4a:	9203      	str	r2, [sp, #12]
 8001c4c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	f002 0204 	and.w	r2, r2, #4
 8001c5c:	9204      	str	r2, [sp, #16]
 8001c5e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	619a      	str	r2, [r3, #24]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	f002 0208 	and.w	r2, r2, #8
 8001c6e:	9205      	str	r2, [sp, #20]
 8001c70:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	619a      	str	r2, [r3, #24]
 8001c7a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c7c:	4622      	mov	r2, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	9306      	str	r3, [sp, #24]
 8001c84:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001c86:	f001 fb17 	bl	80032b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	4639      	mov	r1, r7
 8001c8e:	488f      	ldr	r0, [pc, #572]	; (8001ecc <main+0x2c0>)
 8001c90:	f001 fb12 	bl	80032b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 8001c94:	2123      	movs	r1, #35	; 0x23
 8001c96:	462a      	mov	r2, r5
 8001c98:	488d      	ldr	r0, [pc, #564]	; (8001ed0 <main+0x2c4>)
 8001c9a:	f001 fb0d 	bl	80032b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ca4:	488b      	ldr	r0, [pc, #556]	; (8001ed4 <main+0x2c8>)
 8001ca6:	f001 fb07 	bl	80032b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8001caa:	4622      	mov	r2, r4
 8001cac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001cb0:	4889      	ldr	r0, [pc, #548]	; (8001ed8 <main+0x2cc>)
 8001cb2:	f001 fb01 	bl	80032b8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8001cb6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb8:	4883      	ldr	r0, [pc, #524]	; (8001ec8 <main+0x2bc>)
 8001cba:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8001cbc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc2:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc4:	f001 f9ca 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc8:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cca:	487f      	ldr	r0, [pc, #508]	; (8001ec8 <main+0x2bc>)
 8001ccc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd0:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f001 f9c2 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd8:	4b80      	ldr	r3, [pc, #512]	; (8001edc <main+0x2d0>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cda:	487b      	ldr	r0, [pc, #492]	; (8001ec8 <main+0x2bc>)
 8001cdc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cde:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce4:	f001 f9ba 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	487a      	ldr	r0, [pc, #488]	; (8001ed8 <main+0x2cc>)
 8001cee:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cf0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	f001 f9b1 	bl	800305c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	4874      	ldr	r0, [pc, #464]	; (8001ecc <main+0x2c0>)
 8001cfc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f001 f9aa 	bl	800305c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	4870      	ldr	r0, [pc, #448]	; (8001ecc <main+0x2c0>)
 8001d0a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	e9cd 7507 	strd	r7, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d10:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f001 f9a2 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8001d18:	2323      	movs	r3, #35	; 0x23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	486d      	ldr	r0, [pc, #436]	; (8001ed0 <main+0x2c4>)
 8001d1c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8001d1e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f001 f999 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001d2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2e:	4869      	ldr	r0, [pc, #420]	; (8001ed4 <main+0x2c8>)
 8001d30:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8001d32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d38:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3a:	f001 f98f 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001d3e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	4864      	ldr	r0, [pc, #400]	; (8001ed8 <main+0x2cc>)
 8001d48:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f001 f984 	bl	800305c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d54:	4622      	mov	r2, r4
 8001d56:	4621      	mov	r1, r4
 8001d58:	200a      	movs	r0, #10
 8001d5a:	f001 f91b 	bl	8002f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d5e:	200a      	movs	r0, #10
 8001d60:	f001 f956 	bl	8003010 <HAL_NVIC_EnableIRQ>
    Timing.AddressSetupTime = 15;
 8001d64:	230f      	movs	r3, #15
    Timing.DataSetupTime = 255;
 8001d66:	20ff      	movs	r0, #255	; 0xff
    Timing.AddressHoldTime = 15;
 8001d68:	e9cd 3307 	strd	r3, r3, [sp, #28]
    Timing.BusTurnAroundDuration = 15;
 8001d6c:	930a      	str	r3, [sp, #40]	; 0x28
    Timing.DataLatency = 17;
 8001d6e:	2311      	movs	r3, #17
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d70:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001d74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    Timing.DataSetupTime = 255;
 8001d78:	9009      	str	r0, [sp, #36]	; 0x24
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d7a:	4859      	ldr	r0, [pc, #356]	; (8001ee0 <main+0x2d4>)
    Timing.DataLatency = 17;
 8001d7c:	930c      	str	r3, [sp, #48]	; 0x30
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <main+0x2d8>)
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d80:	6001      	str	r1, [r0, #0]
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001d82:	6282      	str	r2, [r0, #40]	; 0x28
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001d84:	a907      	add	r1, sp, #28
 8001d86:	4622      	mov	r2, r4
    hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d88:	e9c0 4402 	strd	r4, r4, [r0, #8]
    hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d8c:	e9c0 4406 	strd	r4, r4, [r0, #24]
    hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d90:	e9c0 4408 	strd	r4, r4, [r0, #32]
    hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001d94:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
    hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001d98:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
    FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d9c:	940d      	str	r4, [sp, #52]	; 0x34
    Timing.CLKDivision = 16;
 8001d9e:	970b      	str	r7, [sp, #44]	; 0x2c
    hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001da0:	6147      	str	r7, [r0, #20]
    hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001da2:	6104      	str	r4, [r0, #16]
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001da4:	6043      	str	r3, [r0, #4]
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001da6:	f002 fba5 	bl	80044f4 <HAL_SRAM_Init>
 8001daa:	b108      	cbz	r0, 8001db0 <main+0x1a4>
 8001dac:	b672      	cpsid	i
    while (1) {
 8001dae:	e7fe      	b.n	8001dae <main+0x1a2>
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001db4:	4a4c      	ldr	r2, [pc, #304]	; (8001ee8 <main+0x2dc>)
    hadc2.Instance = ADC2;
 8001db6:	4c4d      	ldr	r4, [pc, #308]	; (8001eec <main+0x2e0>)
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001db8:	69d3      	ldr	r3, [r2, #28]
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	61d3      	str	r3, [r2, #28]
    hadc2.Instance = ADC2;
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <main+0x2e4>)
    ADC_ChannelConfTypeDef sConfig = {0};
 8001dc2:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001dc6:	9009      	str	r0, [sp, #36]	; 0x24
    hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dc8:	60a0      	str	r0, [r4, #8]
    hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001dca:	7520      	strb	r0, [r4, #20]
    hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dcc:	6060      	str	r0, [r4, #4]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001dce:	4620      	mov	r0, r4
    hadc2.Init.ContinuousConvMode = ENABLE;
 8001dd0:	7325      	strb	r5, [r4, #12]
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dd2:	61e1      	str	r1, [r4, #28]
    hadc2.Init.NbrOfConversion = 1;
 8001dd4:	6125      	str	r5, [r4, #16]
    hadc2.Instance = ADC2;
 8001dd6:	6023      	str	r3, [r4, #0]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001dd8:	f000 ffa2 	bl	8002d20 <HAL_ADC_Init>
 8001ddc:	b108      	cbz	r0, 8001de2 <main+0x1d6>
 8001dde:	b672      	cpsid	i
    while (1) {
 8001de0:	e7fe      	b.n	8001de0 <main+0x1d4>
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001de2:	2305      	movs	r3, #5
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001de4:	4620      	mov	r0, r4
 8001de6:	a907      	add	r1, sp, #28
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001de8:	9309      	str	r3, [sp, #36]	; 0x24
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dea:	e9cd 6507 	strd	r6, r5, [sp, #28]
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001dee:	f000 fe29 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b108      	cbz	r0, 8001dfa <main+0x1ee>
 8001df6:	b672      	cpsid	i
    while (1) {
 8001df8:	e7fe      	b.n	8001df8 <main+0x1ec>
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c2.Instance = I2C2;
 8001dfe:	483d      	ldr	r0, [pc, #244]	; (8001ef4 <main+0x2e8>)
 8001e00:	493d      	ldr	r1, [pc, #244]	; (8001ef8 <main+0x2ec>)
    hi2c2.Init.OwnAddress2 = 0;
 8001e02:	e9c0 3305 	strd	r3, r3, [r0, #20]
    hi2c2.Instance = I2C2;
 8001e06:	6001      	str	r1, [r0, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001e08:	493c      	ldr	r1, [pc, #240]	; (8001efc <main+0x2f0>)
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e0a:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0e:	6083      	str	r3, [r0, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001e10:	60c3      	str	r3, [r0, #12]
    hi2c2.Init.ClockSpeed = 100000;
 8001e12:	6041      	str	r1, [r0, #4]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e14:	6102      	str	r2, [r0, #16]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001e16:	f001 fc71 	bl	80036fc <HAL_I2C_Init>
 8001e1a:	4606      	mov	r6, r0
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d145      	bne.n	8001eac <main+0x2a0>
    HAL_ADCEx_Calibration_Start(&hadc2);
 8001e20:	4620      	mov	r0, r4
 8001e22:	f001 f829 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 8001e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f000 fd54 	bl	80028d8 <HAL_ADC_PollForConversion>
    currentPage = home;
 8001e30:	4d33      	ldr	r5, [pc, #204]	; (8001f00 <main+0x2f4>)
    HAL_ADC_Start(&hadc2);
 8001e32:	4620      	mov	r0, r4
 8001e34:	f000 fee4 	bl	8002c00 <HAL_ADC_Start>
    LCD_INIT();
 8001e38:	f7ff f84a 	bl	8000ed0 <LCD_INIT>
    HAL_Delay(50);
 8001e3c:	2032      	movs	r0, #50	; 0x32
    currentPage = home;
 8001e3e:	702e      	strb	r6, [r5, #0]
    HAL_Delay(50);
 8001e40:	f000 fd38 	bl	80028b4 <HAL_Delay>
    while (!XPT2046_Touch_Calibrate());
 8001e44:	f000 fab6 	bl	80023b4 <XPT2046_Touch_Calibrate>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d0fb      	beq.n	8001e44 <main+0x238>
    LCD_GramScan(1);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff fa71 	bl	8001334 <LCD_GramScan>
    LCD_Clear(0, 0, 240, 320, BLACK);
 8001e52:	2100      	movs	r1, #0
    if (changingPage) {
 8001e54:	4e2b      	ldr	r6, [pc, #172]	; (8001f04 <main+0x2f8>)
    LCD_Clear(0, 0, 240, 320, BLACK);
 8001e56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e5a:	22f0      	movs	r2, #240	; 0xf0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	9100      	str	r1, [sp, #0]
 8001e60:	f7ff f890 	bl	8000f84 <LCD_Clear>
    if (changingPage) {
 8001e64:	6833      	ldr	r3, [r6, #0]
 8001e66:	bb4b      	cbnz	r3, 8001ebc <main+0x2b0>
    initWeightSensors(weightSensors);
 8001e68:	4827      	ldr	r0, [pc, #156]	; (8001f08 <main+0x2fc>)
 8001e6a:	f7ff fb9b 	bl	80015a4 <initWeightSensors>
    LCD_InitHeatCoords(weightSensorsData);
 8001e6e:	4827      	ldr	r0, [pc, #156]	; (8001f0c <main+0x300>)
 8001e70:	f7ff f8a0 	bl	8000fb4 <LCD_InitHeatCoords>
    HAL_Delay(500);
 8001e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e78:	f000 fd1c 	bl	80028b4 <HAL_Delay>
            ucXPT2046_TouchFlag = 0;
 8001e7c:	2700      	movs	r7, #0
 8001e7e:	4c24      	ldr	r4, [pc, #144]	; (8001f10 <main+0x304>)
 8001e80:	e008      	b.n	8001e94 <main+0x288>
        if (ucXPT2046_TouchFlag == 1) {
 8001e82:	7823      	ldrb	r3, [r4, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <main+0x282>
            Check_touchkey();
 8001e88:	f7ff fb26 	bl	80014d8 <Check_touchkey>
            ucXPT2046_TouchFlag = 0;
 8001e8c:	7027      	strb	r7, [r4, #0]
        HAL_Delay(50);
 8001e8e:	2032      	movs	r0, #50	; 0x32
 8001e90:	f000 fd10 	bl	80028b4 <HAL_Delay>
        if (currentPage == home) mainPage();
 8001e94:	782b      	ldrb	r3, [r5, #0]
 8001e96:	b11b      	cbz	r3, 8001ea0 <main+0x294>
        else if (currentPage == weight) weightPage();
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d009      	beq.n	8001eb0 <main+0x2a4>
        else if (currentPage == accelerometer) accelerometerPage();
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d00a      	beq.n	8001eb6 <main+0x2aa>
    if (changingPage) {
 8001ea0:	6833      	ldr	r3, [r6, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ed      	beq.n	8001e82 <main+0x276>
 8001ea6:	f7ff fab7 	bl	8001418 <mainPage.part.0>
 8001eaa:	e7ea      	b.n	8001e82 <main+0x276>
 8001eac:	b672      	cpsid	i
    while (1) {
 8001eae:	e7fe      	b.n	8001eae <main+0x2a2>
        else if (currentPage == weight) weightPage();
 8001eb0:	f7ff fbd4 	bl	800165c <weightPage>
 8001eb4:	e7e5      	b.n	8001e82 <main+0x276>
        else if (currentPage == accelerometer) accelerometerPage();
 8001eb6:	f7ff fca7 	bl	8001808 <accelerometerPage>
 8001eba:	e7e2      	b.n	8001e82 <main+0x276>
 8001ebc:	f7ff faac 	bl	8001418 <mainPage.part.0>
 8001ec0:	e7d2      	b.n	8001e68 <main+0x25c>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40011800 	.word	0x40011800
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011400 	.word	0x40011400
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	10210000 	.word	0x10210000
 8001ee0:	200002b4 	.word	0x200002b4
 8001ee4:	a0000104 	.word	0xa0000104
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	20000230 	.word	0x20000230
 8001ef0:	40012800 	.word	0x40012800
 8001ef4:	20000260 	.word	0x20000260
 8001ef8:	40005800 	.word	0x40005800
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	2000022c 	.word	0x2000022c
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000308 	.word	0x20000308
 8001f0c:	20000388 	.word	0x20000388
 8001f10:	200003c0 	.word	0x200003c0

08001f14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_MspInit+0x3c>)
{
 8001f16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f1a:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	f002 0201 	and.w	r2, r2, #1
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f32:	61da      	str	r2, [r3, #28]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3e:	684b      	ldr	r3, [r1, #4]
 8001f40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f48:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000

08001f58 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	2300      	movs	r3, #0
{
 8001f5a:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC2)
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <HAL_ADC_MspInit+0x5c>)
 8001f5e:	6801      	ldr	r1, [r0, #0]
{
 8001f60:	b087      	sub	sp, #28
  if(hadc->Instance==ADC2)
 8001f62:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f68:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC2)
 8001f6c:	d001      	beq.n	8001f72 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f6e:	b007      	add	sp, #28
 8001f70:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f72:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f74:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f7e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f86:	619a      	str	r2, [r3, #24]
 8001f88:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f8e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001f92:	9200      	str	r2, [sp, #0]
 8001f94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	f042 0204 	orr.w	r2, r2, #4
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa0:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f001 f856 	bl	800305c <HAL_GPIO_Init>
}
 8001fb0:	b007      	add	sp, #28
 8001fb2:	bd30      	pop	{r4, r5, pc}
 8001fb4:	40012800 	.word	0x40012800
 8001fb8:	40010800 	.word	0x40010800

08001fbc <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	2300      	movs	r3, #0
{
 8001fbe:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <HAL_I2C_MspInit+0x5c>)
 8001fc2:	6801      	ldr	r1, [r0, #0]
{
 8001fc4:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8001fc6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fd2:	b007      	add	sp, #28
 8001fd4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fda:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fdc:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4c0f      	ldr	r4, [pc, #60]	; (800201c <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	69a3      	ldr	r3, [r4, #24]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	61a3      	str	r3, [r4, #24]
 8001fea:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fec:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f001 f82e 	bl	800305c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002000:	69e3      	ldr	r3, [r4, #28]
 8002002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002006:	61e3      	str	r3, [r4, #28]
 8002008:	69e3      	ldr	r3, [r4, #28]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	9b01      	ldr	r3, [sp, #4]
}
 8002012:	b007      	add	sp, #28
 8002014:	bd30      	pop	{r4, r5, pc}
 8002016:	bf00      	nop
 8002018:	40005800 	.word	0x40005800
 800201c:	40021000 	.word	0x40021000
 8002020:	40010c00 	.word	0x40010c00

08002024 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002024:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002026:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800202a:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 800202c:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800202e:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8002030:	bb12      	cbnz	r2, 8002078 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8002032:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002036:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002038:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 800203c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002040:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8002044:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002046:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6153      	str	r3, [r2, #20]
 8002050:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002052:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800205c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002062:	f000 fffb 	bl	800305c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002066:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <HAL_SRAM_MspInit+0x60>)
 800206c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002070:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002072:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002074:	f000 fff2 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002078:	b007      	add	sp, #28
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	200003b8 	.word	0x200003b8
 8002080:	40011800 	.word	0x40011800
 8002084:	40011400 	.word	0x40011400

08002088 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <HardFault_Handler>
 800208e:	bf00      	nop

08002090 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler>
 8002092:	bf00      	nop

08002094 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <BusFault_Handler>
 8002096:	bf00      	nop

08002098 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler>
 800209a:	bf00      	nop

0800209c <SVC_Handler>:
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <DebugMon_Handler>:
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <PendSV_Handler>:
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a8:	f000 bbf2 	b.w	8002890 <HAL_IncTick>

080020ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <EXTI4_IRQHandler+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	06d2      	lsls	r2, r2, #27
 80020b4:	d404      	bmi.n	80020c0 <EXTI4_IRQHandler+0x14>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80020ba:	2010      	movs	r0, #16
 80020bc:	f001 b902 	b.w	80032c4 <HAL_GPIO_EXTI_IRQHandler>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80020c0:	2010      	movs	r0, #16
        ucXPT2046_TouchFlag = 1;
 80020c2:	2101      	movs	r1, #1
 80020c4:	4a05      	ldr	r2, [pc, #20]	; (80020dc <EXTI4_IRQHandler+0x30>)
 80020c6:	7011      	strb	r1, [r2, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80020c8:	6158      	str	r0, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80020ca:	f001 f8f9 	bl	80032c0 <HAL_GPIO_EXTI_Callback>
}
 80020ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80020d2:	2010      	movs	r0, #16
 80020d4:	f001 b8f6 	b.w	80032c4 <HAL_GPIO_EXTI_IRQHandler>
 80020d8:	40010400 	.word	0x40010400
 80020dc:	200003c0 	.word	0x200003c0

080020e0 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
    return 1;
}
 80020e0:	2001      	movs	r0, #1
 80020e2:	4770      	bx	lr

080020e4 <_kill>:

int _kill(int pid, int sig) {
 80020e4:	b508      	push	{r3, lr}
    errno = EINVAL;
 80020e6:	f002 fab3 	bl	8004650 <__errno>
 80020ea:	2216      	movs	r2, #22
 80020ec:	4603      	mov	r3, r0
    return -1;
}
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295
    errno = EINVAL;
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	bd08      	pop	{r3, pc}
 80020f6:	bf00      	nop

080020f8 <_exit>:

void _exit(int status) {
 80020f8:	b508      	push	{r3, lr}
    errno = EINVAL;
 80020fa:	f002 faa9 	bl	8004650 <__errno>
 80020fe:	2316      	movs	r3, #22
 8002100:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
 8002102:	e7fe      	b.n	8002102 <_exit+0xa>

08002104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002104:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002106:	1e16      	subs	r6, r2, #0
 8002108:	dd07      	ble.n	800211a <_read+0x16>
 800210a:	460c      	mov	r4, r1
 800210c:	198d      	adds	r5, r1, r6
        *ptr++ = __io_getchar();
 800210e:	f3af 8000 	nop.w
 8002112:	f804 0b01 	strb.w	r0, [r4], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002116:	42a5      	cmp	r5, r4
 8002118:	d1f9      	bne.n	800210e <_read+0xa>
    }

    return len;
}
 800211a:	4630      	mov	r0, r6
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	bf00      	nop

08002120 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002120:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002122:	1e16      	subs	r6, r2, #0
 8002124:	dd07      	ble.n	8002136 <_write+0x16>
 8002126:	460c      	mov	r4, r1
 8002128:	198d      	adds	r5, r1, r6
        __io_putchar(*ptr++);
 800212a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800212e:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002132:	42a5      	cmp	r5, r4
 8002134:	d1f9      	bne.n	800212a <_write+0xa>
    }
    return len;
}
 8002136:	4630      	mov	r0, r6
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	bf00      	nop

0800213c <_close>:

int _close(int file) {
    return -1;
}
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <_fstat>:


int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    return 0;
}
 8002148:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 800214a:	604b      	str	r3, [r1, #4]
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <_isatty>:

int _isatty(int file) {
    return 1;
}
 8002150:	2001      	movs	r0, #1
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8002154:	2000      	movs	r0, #0
 8002156:	4770      	bx	lr

08002158 <_sbrk>:
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *) stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <_sbrk+0x38>)
void *_sbrk(ptrdiff_t incr) {
 800215a:	4603      	mov	r3, r0
 800215c:	b510      	push	{r4, lr}
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800215e:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <_sbrk+0x3c>)
 8002160:	4c0d      	ldr	r4, [pc, #52]	; (8002198 <_sbrk+0x40>)
    if (NULL == __sbrk_heap_end) {
 8002162:	6808      	ldr	r0, [r1, #0]
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8002164:	1b12      	subs	r2, r2, r4
    if (NULL == __sbrk_heap_end) {
 8002166:	b120      	cbz	r0, 8002172 <_sbrk+0x1a>
        __sbrk_heap_end = &_end;
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002168:	4403      	add	r3, r0
 800216a:	4293      	cmp	r3, r2
 800216c:	d807      	bhi.n	800217e <_sbrk+0x26>
        errno = ENOMEM;
        return (void *) -1;
    }

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;
 800216e:	600b      	str	r3, [r1, #0]

    return (void *) prev_heap_end;
}
 8002170:	bd10      	pop	{r4, pc}
        __sbrk_heap_end = &_end;
 8002172:	4c0a      	ldr	r4, [pc, #40]	; (800219c <_sbrk+0x44>)
 8002174:	4620      	mov	r0, r4
    if (__sbrk_heap_end + incr > max_heap) {
 8002176:	4403      	add	r3, r0
 8002178:	4293      	cmp	r3, r2
        __sbrk_heap_end = &_end;
 800217a:	600c      	str	r4, [r1, #0]
    if (__sbrk_heap_end + incr > max_heap) {
 800217c:	d9f7      	bls.n	800216e <_sbrk+0x16>
        errno = ENOMEM;
 800217e:	f002 fa67 	bl	8004650 <__errno>
 8002182:	220c      	movs	r2, #12
 8002184:	4603      	mov	r3, r0
        return (void *) -1;
 8002186:	f04f 30ff 	mov.w	r0, #4294967295
        errno = ENOMEM;
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bd10      	pop	{r4, pc}
 800218e:	bf00      	nop
 8002190:	200003bc 	.word	0x200003bc
 8002194:	20010000 	.word	0x20010000
 8002198:	00000400 	.word	0x00000400
 800219c:	200003d8 	.word	0x200003d8

080021a0 <SystemInit>:

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <XPT2046_WriteCMD>:
    }

}


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4606      	mov	r6, r0
    uint8_t i;


    macXPT2046_MOSI_0();
 80021a8:	4815      	ldr	r0, [pc, #84]	; (8002200 <XPT2046_WriteCMD+0x5c>)
 80021aa:	2200      	movs	r2, #0

    macXPT2046_CLK_LOW();

    for (i = 0; i < 8; i++) {
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80021ac:	4605      	mov	r5, r0
    macXPT2046_MOSI_0();
 80021ae:	2104      	movs	r1, #4
 80021b0:	f001 f882 	bl	80032b8 <HAL_GPIO_WritePin>
    macXPT2046_CLK_LOW();
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	4628      	mov	r0, r5
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80021ba:	2407      	movs	r4, #7
    macXPT2046_CLK_LOW();
 80021bc:	f001 f87c 	bl	80032b8 <HAL_GPIO_WritePin>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80021c0:	fa46 f204 	asr.w	r2, r6, r4
 80021c4:	f012 0201 	ands.w	r2, r2, #1
 80021c8:	bf18      	it	ne
 80021ca:	2201      	movne	r2, #1
 80021cc:	2104      	movs	r1, #4
 80021ce:	4628      	mov	r0, r5
 80021d0:	f001 f872 	bl	80032b8 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 80021d4:	2300      	movs	r3, #0
 80021d6:	3301      	adds	r3, #1
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d3fc      	bcc.n	80021d6 <XPT2046_WriteCMD+0x32>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_HIGH();
 80021dc:	2201      	movs	r2, #1
 80021de:	4628      	mov	r0, r5
 80021e0:	4611      	mov	r1, r2
 80021e2:	f001 f869 	bl	80032b8 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	3301      	adds	r3, #1
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d3fc      	bcc.n	80021e8 <XPT2046_WriteCMD+0x44>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_LOW();
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	4628      	mov	r0, r5
    for (i = 0; i < 8; i++) {
 80021f4:	3c01      	subs	r4, #1
        macXPT2046_CLK_LOW();
 80021f6:	f001 f85f 	bl	80032b8 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 80021fa:	1c63      	adds	r3, r4, #1
 80021fc:	d1e0      	bne.n	80021c0 <XPT2046_WriteCMD+0x1c>
    }

}
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	40011800 	.word	0x40011800

08002204 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002204:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    uint16_t usBuf = 0, usTemp;


    macXPT2046_MOSI_0();
 8002206:	2200      	movs	r2, #0
 8002208:	2104      	movs	r1, #4
 800220a:	4811      	ldr	r0, [pc, #68]	; (8002250 <XPT2046_ReadCMD+0x4c>)
 800220c:	f001 f854 	bl	80032b8 <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002210:	2201      	movs	r2, #1
 8002212:	480f      	ldr	r0, [pc, #60]	; (8002250 <XPT2046_ReadCMD+0x4c>)
 8002214:	4611      	mov	r1, r2
 8002216:	250b      	movs	r5, #11
    uint16_t usBuf = 0, usTemp;
 8002218:	2400      	movs	r4, #0

    for (i = 0; i < 12; i++) {
        macXPT2046_CLK_LOW();
 800221a:	4606      	mov	r6, r0
    macXPT2046_CLK_HIGH();
 800221c:	f001 f84c 	bl	80032b8 <HAL_GPIO_WritePin>
        macXPT2046_CLK_LOW();
 8002220:	2200      	movs	r2, #0
 8002222:	2101      	movs	r1, #1
 8002224:	4630      	mov	r0, r6
 8002226:	f001 f847 	bl	80032b8 <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 800222a:	2108      	movs	r1, #8
 800222c:	4630      	mov	r0, r6
 800222e:	f001 f83d 	bl	80032ac <HAL_GPIO_ReadPin>

        usBuf |= usTemp << (11 - i);

        macXPT2046_CLK_HIGH();
 8002232:	2201      	movs	r2, #1
        usTemp = macXPT2046_MISO();
 8002234:	4603      	mov	r3, r0
        macXPT2046_CLK_HIGH();
 8002236:	4611      	mov	r1, r2
        usBuf |= usTemp << (11 - i);
 8002238:	40ab      	lsls	r3, r5
        macXPT2046_CLK_HIGH();
 800223a:	4630      	mov	r0, r6
    for (i = 0; i < 12; i++) {
 800223c:	3d01      	subs	r5, #1
        usBuf |= usTemp << (11 - i);
 800223e:	431c      	orrs	r4, r3
        macXPT2046_CLK_HIGH();
 8002240:	f001 f83a 	bl	80032b8 <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8002244:	1c6b      	adds	r3, r5, #1
        usBuf |= usTemp << (11 - i);
 8002246:	b2a4      	uxth	r4, r4
    for (i = 0; i < 12; i++) {
 8002248:	d1ea      	bne.n	8002220 <XPT2046_ReadCMD+0x1c>

    }

    return usBuf;

}
 800224a:	4620      	mov	r0, r4
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	bf00      	nop
 8002250:	40011800 	.word	0x40011800

08002254 <XPT2046_ReadAdc_Smooth_XY>:

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
    uint8_t ucCount = 0, i;

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8002254:	2100      	movs	r1, #0
static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	4680      	mov	r8, r0
    int16_t sBufferArray[2][10] = {{0},
 800225e:	2228      	movs	r2, #40	; 0x28
 8002260:	4668      	mov	r0, sp
 8002262:	466e      	mov	r6, sp
    uint8_t ucCount = 0, i;
 8002264:	460c      	mov	r4, r1
        sBufferArray[0][ucCount] = sAD_X;
        sBufferArray[1][ucCount] = sAD_Y;

        ucCount++;

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002266:	4f51      	ldr	r7, [pc, #324]	; (80023ac <XPT2046_ReadAdc_Smooth_XY+0x158>)
    int16_t sBufferArray[2][10] = {{0},
 8002268:	f002 fa24 	bl	80046b4 <memset>
    XPT2046_WriteCMD(ucChannel);
 800226c:	2090      	movs	r0, #144	; 0x90
 800226e:	f7ff ff99 	bl	80021a4 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002272:	f7ff ffc7 	bl	8002204 <XPT2046_ReadCMD>
    for (i = 0; i < ulCount; i++) {
 8002276:	2300      	movs	r3, #0
    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 8002278:	b205      	sxth	r5, r0
    for (i = 0; i < ulCount; i++) {
 800227a:	3301      	adds	r3, #1
 800227c:	d0fd      	beq.n	800227a <XPT2046_ReadAdc_Smooth_XY+0x26>
    XPT2046_WriteCMD(ucChannel);
 800227e:	20d0      	movs	r0, #208	; 0xd0
 8002280:	f7ff ff90 	bl	80021a4 <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002284:	f7ff ffbe 	bl	8002204 <XPT2046_ReadCMD>
 8002288:	4603      	mov	r3, r0
        sBufferArray[0][ucCount] = sAD_X;
 800228a:	f826 5b02 	strh.w	r5, [r6], #2
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800228e:	2110      	movs	r1, #16
 8002290:	4638      	mov	r0, r7
        sBufferArray[1][ucCount] = sAD_Y;
 8002292:	8273      	strh	r3, [r6, #18]
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002294:	f001 f80a 	bl	80032ac <HAL_GPIO_ReadPin>
        ucCount++;
 8002298:	3401      	adds	r4, #1
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800229a:	4605      	mov	r5, r0
        ucCount++;
 800229c:	b2e4      	uxtb	r4, r4
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800229e:	2800      	cmp	r0, #0
 80022a0:	d174      	bne.n	800238c <XPT2046_ReadAdc_Smooth_XY+0x138>
 80022a2:	2c0a      	cmp	r4, #10
 80022a4:	d1e2      	bne.n	800226c <XPT2046_ReadAdc_Smooth_XY+0x18>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80022a6:	2110      	movs	r1, #16
 80022a8:	4840      	ldr	r0, [pc, #256]	; (80023ac <XPT2046_ReadAdc_Smooth_XY+0x158>)
 80022aa:	f000 ffff 	bl	80032ac <HAL_GPIO_ReadPin>
 80022ae:	b108      	cbz	r0, 80022b4 <XPT2046_ReadAdc_Smooth_XY+0x60>
        ucXPT2046_TouchFlag = 0;
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 80022b2:	701d      	strb	r5, [r3, #0]


    if (ucCount == 10) {
        lX_Max = lX_Min = sBufferArray[0][0];
 80022b4:	f9bd c000 	ldrsh.w	ip, [sp]
        lY_Max = lY_Min = sBufferArray[1][0];
 80022b8:	466b      	mov	r3, sp
        lX_Max = lX_Min = sBufferArray[0][0];
 80022ba:	4664      	mov	r4, ip
 80022bc:	4661      	mov	r1, ip
        lY_Max = lY_Min = sBufferArray[1][0];
 80022be:	f9bd 7014 	ldrsh.w	r7, [sp, #20]

        for (i = 1; i < 10; i++) {
 80022c2:	f10d 0012 	add.w	r0, sp, #18
 80022c6:	e004      	b.n	80022d2 <XPT2046_ReadAdc_Smooth_XY+0x7e>
 80022c8:	4294      	cmp	r4, r2
 80022ca:	bfb8      	it	lt
 80022cc:	4614      	movlt	r4, r2
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d006      	beq.n	80022e0 <XPT2046_ReadAdc_Smooth_XY+0x8c>
            if (sBufferArray[0][i] < lX_Min)
 80022d2:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 80022d6:	428a      	cmp	r2, r1
 80022d8:	daf6      	bge.n	80022c8 <XPT2046_ReadAdc_Smooth_XY+0x74>
        for (i = 1; i < 10; i++) {
 80022da:	4298      	cmp	r0, r3
 80022dc:	4611      	mov	r1, r2
 80022de:	d1f8      	bne.n	80022d2 <XPT2046_ReadAdc_Smooth_XY+0x7e>
        lY_Max = lY_Min = sBufferArray[1][0];
 80022e0:	4638      	mov	r0, r7
 80022e2:	463d      	mov	r5, r7
 80022e4:	f10d 0626 	add.w	r6, sp, #38	; 0x26
 80022e8:	ab05      	add	r3, sp, #20
 80022ea:	e004      	b.n	80022f6 <XPT2046_ReadAdc_Smooth_XY+0xa2>
 80022ec:	4290      	cmp	r0, r2
 80022ee:	bfb8      	it	lt
 80022f0:	4610      	movlt	r0, r2
            else if (sBufferArray[0][i] > lX_Max)
                lX_Max = sBufferArray[0][i];

        }

        for (i = 1; i < 10; i++) {
 80022f2:	42b3      	cmp	r3, r6
 80022f4:	d006      	beq.n	8002304 <XPT2046_ReadAdc_Smooth_XY+0xb0>
            if (sBufferArray[1][i] < lY_Min)
 80022f6:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 80022fa:	42aa      	cmp	r2, r5
 80022fc:	daf6      	bge.n	80022ec <XPT2046_ReadAdc_Smooth_XY+0x98>
        for (i = 1; i < 10; i++) {
 80022fe:	42b3      	cmp	r3, r6
 8002300:	4615      	mov	r5, r2
 8002302:	d1f8      	bne.n	80022f6 <XPT2046_ReadAdc_Smooth_XY+0xa2>
                lY_Max = sBufferArray[1][i];

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002304:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002308:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
                                sBufferArray[0][4] +
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 800230c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002310:	4462      	add	r2, ip
 8002312:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002314:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8002318:	443b      	add	r3, r7
 800231a:	4433      	add	r3, r6
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 800231c:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8002320:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002322:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8002326:	4433      	add	r3, r6
                                sBufferArray[0][4] +
 8002328:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 800232c:	4432      	add	r2, r6
                                sBufferArray[1][4] +
 800232e:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002332:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002334:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
                                sBufferArray[0][4] +
 8002338:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 800233a:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
                                sBufferArray[1][4] +
 800233e:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002340:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8002344:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002346:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800234a:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 800234c:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8002350:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002352:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8002356:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002358:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800235c:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 800235e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8002362:	4433      	add	r3, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8002364:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002368:	4432      	add	r2, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 800236a:	1a52      	subs	r2, r2, r1
 800236c:	1b12      	subs	r2, r2, r4
 800236e:	10d2      	asrs	r2, r2, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002370:	f8a8 2000 	strh.w	r2, [r8]
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002374:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002378:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 800237a:	1b5b      	subs	r3, r3, r5
 800237c:	1a1b      	subs	r3, r3, r0


        return 1;
 800237e:	2001      	movs	r0, #1
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002380:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002382:	f8a8 3002 	strh.w	r3, [r8, #2]


    return 0;


}
 8002386:	b00a      	add	sp, #40	; 0x28
 8002388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 800238c:	2110      	movs	r1, #16
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002390:	f000 ff8c 	bl	80032ac <HAL_GPIO_ReadPin>
 8002394:	b930      	cbnz	r0, 80023a4 <XPT2046_ReadAdc_Smooth_XY+0x150>
    if (ucCount == 10) {
 8002396:	2c0a      	cmp	r4, #10
    return 0;
 8002398:	bf18      	it	ne
 800239a:	2000      	movne	r0, #0
    if (ucCount == 10) {
 800239c:	d08a      	beq.n	80022b4 <XPT2046_ReadAdc_Smooth_XY+0x60>
}
 800239e:	b00a      	add	sp, #40	; 0x28
 80023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ucXPT2046_TouchFlag = 0;
 80023a4:	2200      	movs	r2, #0
 80023a6:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e7f4      	b.n	8002396 <XPT2046_ReadAdc_Smooth_XY+0x142>
 80023ac:	40011800 	.word	0x40011800
 80023b0:	200003c0 	.word	0x200003c0

080023b4 <XPT2046_Touch_Calibrate>:


}


uint8_t XPT2046_Touch_Calibrate(void) {
 80023b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 80023b8:	213c      	movs	r1, #60	; 0x3c
    strCrossCoordinate[0].y = usScreenHeigth >> 2;

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 80023ba:	22f0      	movs	r2, #240	; 0xf0

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80023bc:	23b4      	movs	r3, #180	; 0xb4
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 80023be:	f04f 0a50 	mov.w	sl, #80	; 0x50


    LCD_GramScan(1);
 80023c2:	2001      	movs	r0, #1
uint8_t XPT2046_Touch_Calibrate(void) {
 80023c4:	b09b      	sub	sp, #108	; 0x6c
    LCD_GramScan(1);
 80023c6:	4607      	mov	r7, r0

    for (i = 0; i < 4; i++) {
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);

        pStr = "Touch Calibrate ......";
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 80023c8:	f8df b340 	ldr.w	fp, [pc, #832]	; 800270c <XPT2046_Touch_Calibrate+0x358>
 80023cc:	4ed0      	ldr	r6, [pc, #832]	; (8002710 <XPT2046_Touch_Calibrate+0x35c>)
 80023ce:	ad16      	add	r5, sp, #88	; 0x58
 80023d0:	f10d 084e 	add.w	r8, sp, #78	; 0x4e
    strCrossCoordinate[0].x = usScreenWidth >> 2;
 80023d4:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 80023d8:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 80023dc:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 80023e0:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80023e4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 80023e8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 80023ec:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    LCD_GramScan(1);
 80023f0:	f7fe ffa0 	bl	8001334 <LCD_GramScan>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80023f4:	2400      	movs	r4, #0
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 80023f6:	f44f 4978 	mov.w	r9, #63488	; 0xf800
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80023fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023fe:	22f0      	movs	r2, #240	; 0xf0
 8002400:	4621      	mov	r1, r4
 8002402:	4620      	mov	r0, r4
 8002404:	9400      	str	r4, [sp, #0]
 8002406:	f7fe fdbd 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 800240a:	4623      	mov	r3, r4
 800240c:	465a      	mov	r2, fp
 800240e:	21a0      	movs	r1, #160	; 0xa0
 8002410:	203c      	movs	r0, #60	; 0x3c
 8002412:	f8cd 9000 	str.w	r9, [sp]
 8002416:	f7fe ff37 	bl	8001288 <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 800241a:	463a      	mov	r2, r7
 800241c:	49bd      	ldr	r1, [pc, #756]	; (8002714 <XPT2046_Touch_Calibrate+0x360>)
 800241e:	a80f      	add	r0, sp, #60	; 0x3c
 8002420:	f002 fe9c 	bl	800515c <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 8002424:	4623      	mov	r3, r4
 8002426:	2190      	movs	r1, #144	; 0x90
 8002428:	2078      	movs	r0, #120	; 0x78
 800242a:	f8cd 9000 	str.w	r9, [sp]
 800242e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002430:	f7fe ff2a 	bl	8001288 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 8002434:	4623      	mov	r3, r4
 8002436:	3301      	adds	r3, #1
 8002438:	42b3      	cmp	r3, r6
 800243a:	d3fc      	bcc.n	8002436 <XPT2046_Touch_Calibrate+0x82>

        XPT2046_DelayUS(100000);

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 800243c:	4651      	mov	r1, sl
 800243e:	f838 0c06 	ldrh.w	r0, [r8, #-6]
 8002442:	f7fe fef5 	bl	8001230 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 8002446:	4628      	mov	r0, r5
 8002448:	f7ff ff04 	bl	8002254 <XPT2046_ReadAdc_Smooth_XY>
 800244c:	2800      	cmp	r0, #0
 800244e:	d0fa      	beq.n	8002446 <XPT2046_Touch_Calibrate+0x92>
    for (i = 0; i < 4; i++) {
 8002450:	3701      	adds	r7, #1
 8002452:	2f05      	cmp	r7, #5
 8002454:	f105 0504 	add.w	r5, r5, #4
 8002458:	f108 0804 	add.w	r8, r8, #4
 800245c:	d002      	beq.n	8002464 <XPT2046_Touch_Calibrate+0xb0>
        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 800245e:	f838 ac04 	ldrh.w	sl, [r8, #-4]
 8002462:	e7c7      	b.n	80023f4 <XPT2046_Touch_Calibrate+0x40>
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8002464:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8002468:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
 800246c:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8002470:	f8bd 805e 	ldrh.w	r8, [sp, #94]	; 0x5e
 8002474:	1b32      	subs	r2, r6, r4
 8002476:	eba8 0307 	sub.w	r3, r8, r7
 800247a:	fb03 f202 	mul.w	r2, r3, r2
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	4613      	mov	r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8002482:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002486:	f8bd 905a 	ldrh.w	r9, [sp, #90]	; 0x5a
 800248a:	eba5 0a04 	sub.w	sl, r5, r4
 800248e:	eba9 0207 	sub.w	r2, r9, r7
 8002492:	fb0a fb02 	mul.w	fp, sl, r2
    if (pCalibrationFactor->Divider == 0)
 8002496:	455b      	cmp	r3, fp
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	f000 8115 	beq.w	80026c8 <XPT2046_Touch_Calibrate+0x314>
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800249e:	eba8 0009 	sub.w	r0, r8, r9
 80024a2:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->An =
 80024a6:	00c0      	lsls	r0, r0, #3
 80024a8:	f7fe f818 	bl	80004dc <__aeabi_i2d>
 80024ac:	460a      	mov	r2, r1
 80024ae:	4601      	mov	r1, r0
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 80024b0:	1b70      	subs	r0, r6, r5
 80024b2:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->Bn =
 80024b6:	00c0      	lsls	r0, r0, #3
        pCalibrationFactor->An =
 80024b8:	e9cd 1206 	strd	r1, r2, [sp, #24]
        pCalibrationFactor->Bn =
 80024bc:	f7fe f80e 	bl	80004dc <__aeabi_i2d>
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 80024c0:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
        pCalibrationFactor->Bn =
 80024c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 80024c8:	fb0c f006 	mul.w	r0, ip, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 80024cc:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 80024d0:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 80024d4:	fb0c fc05 	mul.w	ip, ip, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 80024d8:	fb08 f000 	mul.w	r0, r8, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 80024dc:	1baa      	subs	r2, r5, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 80024de:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 80024e2:	fb07 f202 	mul.w	r2, r7, r2
                pScreenSample[0].y +
 80024e6:	fb09 000c 	mla	r0, r9, ip, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 80024ea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
        pCalibrationFactor->Cn =
 80024ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80024f2:	f7fd fff3 	bl	80004dc <__aeabi_i2d>
        pCalibrationFactor->Dn =
 80024f6:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Cn =
 80024fa:	460a      	mov	r2, r1
 80024fc:	4601      	mov	r1, r0
        pCalibrationFactor->Dn =
 80024fe:	9b04      	ldr	r3, [sp, #16]
        pCalibrationFactor->Cn =
 8002500:	e9cd 1204 	strd	r1, r2, [sp, #16]
        pCalibrationFactor->Dn =
 8002504:	fb0c f003 	mul.w	r0, ip, r3
 8002508:	f7fd ffe8 	bl	80004dc <__aeabi_i2d>
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 800250c:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Dn =
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002514:	fb0c f00a 	mul.w	r0, ip, sl
        pCalibrationFactor->En =
 8002518:	4240      	negs	r0, r0
        pCalibrationFactor->Dn =
 800251a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        pCalibrationFactor->En =
 800251e:	f7fd ffdd 	bl	80004dc <__aeabi_i2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002526:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800252a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 800252e:	1b64      	subs	r4, r4, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002530:	0109      	lsls	r1, r1, #4
 8002532:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002536:	fb09 f404 	mul.w	r4, r9, r4
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 800253a:	fb08 f801 	mul.w	r8, r8, r1
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 800253e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002542:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002546:	012d      	lsls	r5, r5, #4
                pScreenSample[0].y +
 8002548:	eb08 1404 	add.w	r4, r8, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 800254c:	eba5 1506 	sub.w	r5, r5, r6, lsl #4
        pCalibrationFactor->Fn =
 8002550:	fb07 4005 	mla	r0, r7, r5, r4
        pCalibrationFactor->En =
 8002554:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        pCalibrationFactor->Fn =
 8002558:	f7fd ffc0 	bl	80004dc <__aeabi_i2d>
    pCalibrationFactor->Divider =
 800255c:	9b02      	ldr	r3, [sp, #8]
        pCalibrationFactor->Fn =
 800255e:	4680      	mov	r8, r0
    pCalibrationFactor->Divider =
 8002560:	eba3 000b 	sub.w	r0, r3, fp
        pCalibrationFactor->Fn =
 8002564:	4689      	mov	r9, r1
    pCalibrationFactor->Divider =
 8002566:	f7fd ffb9 	bl	80004dc <__aeabi_i2d>
 800256a:	4682      	mov	sl, r0
    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);

    if (CalibrationFactor.Divider == 0) goto Failure;


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 800256c:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    pCalibrationFactor->Divider =
 8002570:	468b      	mov	fp, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002572:	f7fd ffb3 	bl	80004dc <__aeabi_i2d>
 8002576:	4606      	mov	r6, r0
 8002578:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
 800257c:	460f      	mov	r7, r1
 800257e:	f7fd ffad 	bl	80004dc <__aeabi_i2d>
 8002582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002586:	4604      	mov	r4, r0
 8002588:	460d      	mov	r5, r1
 800258a:	4630      	mov	r0, r6
 800258c:	4639      	mov	r1, r7
 800258e:	f7fe f80f 	bl	80005b0 <__aeabi_dmul>
 8002592:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800259a:	4620      	mov	r0, r4
 800259c:	4629      	mov	r1, r5
 800259e:	f7fe f807 	bl	80005b0 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80025aa:	f7fd fe4b 	bl	8000244 <__adddf3>
 80025ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025b2:	f7fd fe47 	bl	8000244 <__adddf3>
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 80025b6:	4652      	mov	r2, sl
 80025b8:	465b      	mov	r3, fp
 80025ba:	f7fe f923 	bl	8000804 <__aeabi_ddiv>
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 80025be:	f7fe facf 	bl	8000b60 <__aeabi_d2uiz>
 80025c2:	4603      	mov	r3, r0
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80025c4:	4639      	mov	r1, r7
 80025c6:	4630      	mov	r0, r6
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 80025c8:	b29e      	uxth	r6, r3
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80025ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80025ce:	f7fd ffef 	bl	80005b0 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	4614      	mov	r4, r2
 80025dc:	461d      	mov	r5, r3
 80025de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80025e2:	f7fd ffe5 	bl	80005b0 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fd fe29 	bl	8000244 <__adddf3>
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	f7fd fe25 	bl	8000244 <__adddf3>
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80025fa:	4652      	mov	r2, sl
 80025fc:	465b      	mov	r3, fp
 80025fe:	f7fe f901 	bl	8000804 <__aeabi_ddiv>
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002602:	f7fe faad 	bl	8000b60 <__aeabi_d2uiz>

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002606:	2eb4      	cmp	r6, #180	; 0xb4
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002608:	b280      	uxth	r0, r0
    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 800260a:	bf8c      	ite	hi
 800260c:	f1a6 02b4 	subhi.w	r2, r6, #180	; 0xb4
 8002610:	f1c6 02b4 	rsbls	r2, r6, #180	; 0xb4
 8002614:	b292      	uxth	r2, r2
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002616:	2850      	cmp	r0, #80	; 0x50
 8002618:	bf8c      	ite	hi
 800261a:	f1a0 0350 	subhi.w	r3, r0, #80	; 0x50
 800261e:	f1c0 0350 	rsbls	r3, r0, #80	; 0x50
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002622:	2a0a      	cmp	r2, #10
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002624:	b29b      	uxth	r3, r3
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002626:	d84f      	bhi.n	80026c8 <XPT2046_Touch_Calibrate+0x314>
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d84d      	bhi.n	80026c8 <XPT2046_Touch_Calibrate+0x314>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 800262c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002630:	4652      	mov	r2, sl
 8002632:	465b      	mov	r3, fp
 8002634:	f7fe f8e6 	bl	8000804 <__aeabi_ddiv>
 8002638:	4d37      	ldr	r5, [pc, #220]	; (8002718 <XPT2046_Touch_Calibrate+0x364>)
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 800263a:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 800263c:	e9c5 0100 	strd	r0, r1, [r5]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002640:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002644:	465b      	mov	r3, fp
 8002646:	f7fe f8dd 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 800264a:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 800264c:	e9c5 0102 	strd	r0, r1, [r5, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002654:	465b      	mov	r3, fp
 8002656:	f7fe f8d5 	bl	8000804 <__aeabi_ddiv>

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 800265a:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 800265c:	e9c5 0104 	strd	r0, r1, [r5, #16]
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002664:	465b      	mov	r3, fp
 8002666:	f7fe f8cd 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 800266a:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 800266c:	e9c5 0106 	strd	r0, r1, [r5, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002674:	465b      	mov	r3, fp
 8002676:	f7fe f8c5 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 800267a:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 800267c:	e9c5 0108 	strd	r0, r1, [r5, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002680:	465b      	mov	r3, fp
 8002682:	4640      	mov	r0, r8
 8002684:	4649      	mov	r1, r9
 8002686:	f7fe f8bd 	bl	8000804 <__aeabi_ddiv>


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800268a:	2400      	movs	r4, #0
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 800268c:	4606      	mov	r6, r0
 800268e:	460f      	mov	r7, r1
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002690:	9400      	str	r4, [sp, #0]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002692:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

    pStr = "Calibrate Succeed";
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002696:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800269a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800269e:	22f0      	movs	r2, #240	; 0xf0
 80026a0:	4621      	mov	r1, r4
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7fe fc6e 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 80026a8:	4623      	mov	r3, r4
 80026aa:	21a0      	movs	r1, #160	; 0xa0
 80026ac:	2034      	movs	r0, #52	; 0x34
 80026ae:	4a1b      	ldr	r2, [pc, #108]	; (800271c <XPT2046_Touch_Calibrate+0x368>)
 80026b0:	9500      	str	r5, [sp, #0]
 80026b2:	f7fe fde9 	bl	8001288 <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 80026b6:	f24c 3350 	movw	r3, #50000	; 0xc350
    for (i = 0; i < ulCount; i++) {
 80026ba:	3401      	adds	r4, #1
 80026bc:	429c      	cmp	r4, r3
 80026be:	d3fc      	bcc.n	80026ba <XPT2046_Touch_Calibrate+0x306>

    return 1;
 80026c0:	2001      	movs	r0, #1
    XPT2046_DelayUS(300000);

    return 0;


}
 80026c2:	b01b      	add	sp, #108	; 0x6c
 80026c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80026c8:	2400      	movs	r4, #0
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 80026ca:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80026ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026d2:	22f0      	movs	r2, #240	; 0xf0
 80026d4:	4621      	mov	r1, r4
 80026d6:	4620      	mov	r0, r4
 80026d8:	9400      	str	r4, [sp, #0]
 80026da:	f7fe fc53 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 80026de:	4623      	mov	r3, r4
 80026e0:	21a0      	movs	r1, #160	; 0xa0
 80026e2:	2040      	movs	r0, #64	; 0x40
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <XPT2046_Touch_Calibrate+0x36c>)
 80026e6:	9500      	str	r5, [sp, #0]
 80026e8:	f7fe fdce 	bl	8001288 <LCD_DrawString_Color>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 80026ec:	4623      	mov	r3, r4
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <XPT2046_Touch_Calibrate+0x370>)
 80026f0:	21b0      	movs	r1, #176	; 0xb0
 80026f2:	2054      	movs	r0, #84	; 0x54
 80026f4:	9500      	str	r5, [sp, #0]
 80026f6:	f7fe fdc7 	bl	8001288 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 80026fa:	4623      	mov	r3, r4
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <XPT2046_Touch_Calibrate+0x374>)
 80026fe:	3301      	adds	r3, #1
 8002700:	4293      	cmp	r3, r2
 8002702:	d3fc      	bcc.n	80026fe <XPT2046_Touch_Calibrate+0x34a>
    return 0;
 8002704:	2000      	movs	r0, #0
}
 8002706:	b01b      	add	sp, #108	; 0x6c
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270c:	08007da8 	.word	0x08007da8
 8002710:	000186a0 	.word	0x000186a0
 8002714:	08007dc0 	.word	0x08007dc0
 8002718:	20000008 	.word	0x20000008
 800271c:	08007dc4 	.word	0x08007dc4
 8002720:	08007dd8 	.word	0x08007dd8
 8002724:	08007de8 	.word	0x08007de8
 8002728:	000493e0 	.word	0x000493e0

0800272c <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 800272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002730:	b083      	sub	sp, #12
 8002732:	4683      	mov	fp, r0
    uint8_t ucRet = 1;

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8002734:	a801      	add	r0, sp, #4
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 8002736:	468a      	mov	sl, r1
    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8002738:	f7ff fd8c 	bl	8002254 <XPT2046_ReadAdc_Smooth_XY>
 800273c:	2800      	cmp	r0, #0
 800273e:	d048      	beq.n	80027d2 <XPT2046_Get_TouchedPoint+0xa6>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002740:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002744:	f7fd feca 	bl	80004dc <__aeabi_i2d>
 8002748:	4606      	mov	r6, r0
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800274a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 800274e:	460f      	mov	r7, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002750:	f7fd fec4 	bl	80004dc <__aeabi_i2d>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002754:	e9da 2300 	ldrd	r2, r3, [sl]
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 800275c:	4630      	mov	r0, r6
 800275e:	4639      	mov	r1, r7
 8002760:	f7fd ff26 	bl	80005b0 <__aeabi_dmul>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002764:	e9da 2302 	ldrd	r2, r3, [sl, #8]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002768:	4680      	mov	r8, r0
 800276a:	4689      	mov	r9, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800276c:	4620      	mov	r0, r4
 800276e:	4629      	mov	r1, r5
 8002770:	f7fd ff1e 	bl	80005b0 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002778:	4640      	mov	r0, r8
 800277a:	4649      	mov	r1, r9
 800277c:	f7fd fd62 	bl	8000244 <__adddf3>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002780:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8002784:	f7fd fd5e 	bl	8000244 <__adddf3>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002788:	f7fe f9ea 	bl	8000b60 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800278e:	4639      	mov	r1, r7
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002790:	f8ab 3000 	strh.w	r3, [fp]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002794:	4630      	mov	r0, r6
 8002796:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800279a:	f7fd ff09 	bl	80005b0 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80027a2:	4620      	mov	r0, r4
 80027a4:	4629      	mov	r1, r5
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80027aa:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 80027ae:	f7fd feff 	bl	80005b0 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	f7fd fd43 	bl	8000244 <__adddf3>
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80027be:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 80027c2:	f7fd fd3f 	bl	8000244 <__adddf3>
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80027c6:	f7fe f9cb 	bl	8000b60 <__aeabi_d2uiz>
 80027ca:	4603      	mov	r3, r0
    uint8_t ucRet = 1;
 80027cc:	2001      	movs	r0, #1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 80027ce:	f8ab 3002 	strh.w	r3, [fp, #2]
    } else ucRet = 0;

    return ucRet;


}
 80027d2:	b003      	add	sp, #12
 80027d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f0:	4c0a      	ldr	r4, [pc, #40]	; (800281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027fe:	f7ff fccf 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002802:	f001 ff2b 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002806:	f7ff fa01 	bl	8001c0c <main>
  bx lr
 800280a:	4770      	bx	lr
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002814:	080081ec 	.word	0x080081ec
  ldr r2, =_sbss
 8002818:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800281c:	200003d8 	.word	0x200003d8

08002820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_2_IRQHandler>
	...

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <HAL_InitTick+0x3c>)
{
 800282c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282e:	7811      	ldrb	r1, [r2, #0]
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_InitTick+0x40>)
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fbb2 f0f3 	udiv	r0, r2, r3
 800283c:	f000 fbf6 	bl	800302c <HAL_SYSTICK_Config>
 8002840:	b908      	cbnz	r0, 8002846 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	2d0f      	cmp	r5, #15
 8002844:	d901      	bls.n	800284a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002848:	bd38      	pop	{r3, r4, r5, pc}
 800284a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	4602      	mov	r2, r0
 800284e:	4629      	mov	r1, r5
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f000 fb9e 	bl	8002f94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_InitTick+0x44>)
 800285a:	4620      	mov	r0, r4
 800285c:	601d      	str	r5, [r3, #0]
}
 800285e:	bd38      	pop	{r3, r4, r5, pc}
 8002860:	20000038 	.word	0x20000038
 8002864:	20000004 	.word	0x20000004
 8002868:	2000003c 	.word	0x2000003c

0800286c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_Init+0x20>)
{
 800286e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002872:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	f043 0310 	orr.w	r3, r3, #16
 8002878:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	f000 fb79 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800287e:	200f      	movs	r0, #15
 8002880:	f7ff ffd0 	bl	8002824 <HAL_InitTick>
  HAL_MspInit();
 8002884:	f7ff fb46 	bl	8001f14 <HAL_MspInit>
}
 8002888:	2000      	movs	r0, #0
 800288a:	bd08      	pop	{r3, pc}
 800288c:	40022000 	.word	0x40022000

08002890 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <HAL_IncTick+0x10>)
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_IncTick+0x14>)
 8002894:	6811      	ldr	r1, [r2, #0]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	440b      	add	r3, r1
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200003c4 	.word	0x200003c4
 80028a4:	20000038 	.word	0x20000038

080028a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028a8:	4b01      	ldr	r3, [pc, #4]	; (80028b0 <HAL_GetTick+0x8>)
 80028aa:	6818      	ldr	r0, [r3, #0]
}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	200003c4 	.word	0x200003c4

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff fff6 	bl	80028a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028bc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80028be:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80028c0:	d002      	beq.n	80028c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_Delay+0x20>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c8:	f7ff ffee 	bl	80028a8 <HAL_GetTick>
 80028cc:	1b40      	subs	r0, r0, r5
 80028ce:	42a0      	cmp	r0, r4
 80028d0:	d3fa      	bcc.n	80028c8 <HAL_Delay+0x14>
  {
  }
}
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000038 	.word	0x20000038

080028d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028dc:	2500      	movs	r5, #0
{
 80028de:	b083      	sub	sp, #12
 80028e0:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028e2:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80028e4:	f7ff ffe0 	bl	80028a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	05d7      	lsls	r7, r2, #23
 80028ee:	d472      	bmi.n	80029d6 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4607      	mov	r7, r0
 80028f4:	05d5      	lsls	r5, r2, #23
 80028f6:	d403      	bmi.n	8002900 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028fa:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80028fe:	d01e      	beq.n	800293e <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_ADC_PollForConversion+0x154>)
 8002902:	2002      	movs	r0, #2
 8002904:	681d      	ldr	r5, [r3, #0]
 8002906:	f001 fd6f 	bl	80043e8 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800290a:	6833      	ldr	r3, [r6, #0]
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_ADC_PollForConversion+0x158>)
 800290e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002910:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002914:	4211      	tst	r1, r2
 8002916:	d125      	bne.n	8002964 <HAL_ADC_PollForConversion+0x8c>
 8002918:	68d9      	ldr	r1, [r3, #12]
 800291a:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800291e:	4211      	tst	r1, r2
 8002920:	d120      	bne.n	8002964 <HAL_ADC_PollForConversion+0x8c>
 8002922:	6919      	ldr	r1, [r3, #16]
 8002924:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_ADC_PollForConversion+0x15c>)
 8002926:	4211      	tst	r1, r2
 8002928:	d17e      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x150>
 800292a:	68d9      	ldr	r1, [r3, #12]
 800292c:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002930:	4211      	tst	r1, r2
 8002932:	bf14      	ite	ne
 8002934:	2029      	movne	r0, #41	; 0x29
 8002936:	2014      	moveq	r0, #20
 8002938:	e01e      	b.n	8002978 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 800293a:	1c60      	adds	r0, r4, #1
 800293c:	d154      	bne.n	80029e8 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	0791      	lsls	r1, r2, #30
 8002942:	d5fa      	bpl.n	800293a <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002944:	f06f 0212 	mvn.w	r2, #18
 8002948:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800294c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002950:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002958:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800295c:	d055      	beq.n	8002a0a <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800295e:	2000      	movs	r0, #0
}
 8002960:	b003      	add	sp, #12
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	4a33      	ldr	r2, [pc, #204]	; (8002a34 <HAL_ADC_PollForConversion+0x15c>)
 8002968:	4211      	tst	r1, r2
 800296a:	d12a      	bne.n	80029c2 <HAL_ADC_PollForConversion+0xea>
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002972:	4211      	tst	r1, r2
 8002974:	d125      	bne.n	80029c2 <HAL_ADC_PollForConversion+0xea>
 8002976:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002978:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800297c:	9a01      	ldr	r2, [sp, #4]
 800297e:	4295      	cmp	r5, r2
 8002980:	d809      	bhi.n	8002996 <HAL_ADC_PollForConversion+0xbe>
 8002982:	e7df      	b.n	8002944 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002984:	9b01      	ldr	r3, [sp, #4]
 8002986:	42ab      	cmp	r3, r5
 8002988:	d311      	bcc.n	80029ae <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	42ab      	cmp	r3, r5
 8002994:	d237      	bcs.n	8002a06 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 8002996:	1c62      	adds	r2, r4, #1
 8002998:	d0f7      	beq.n	800298a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800299a:	2c00      	cmp	r4, #0
 800299c:	d0f2      	beq.n	8002984 <HAL_ADC_PollForConversion+0xac>
 800299e:	f7ff ff83 	bl	80028a8 <HAL_GetTick>
 80029a2:	1bc0      	subs	r0, r0, r7
 80029a4:	42a0      	cmp	r0, r4
 80029a6:	d9f0      	bls.n	800298a <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029a8:	9b01      	ldr	r3, [sp, #4]
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	d2ed      	bcs.n	800298a <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 80029ae:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80029b0:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80029b4:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80029be:	b003      	add	sp, #12
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_ADC_PollForConversion+0x160>)
 80029c6:	4211      	tst	r1, r2
 80029c8:	d114      	bne.n	80029f4 <HAL_ADC_PollForConversion+0x11c>
 80029ca:	68d9      	ldr	r1, [r3, #12]
 80029cc:	4211      	tst	r1, r2
 80029ce:	bf14      	ite	ne
 80029d0:	20fc      	movne	r0, #252	; 0xfc
 80029d2:	2054      	moveq	r0, #84	; 0x54
 80029d4:	e7d0      	b.n	8002978 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80029da:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	f043 0320 	orr.w	r3, r3, #32
 80029e2:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80029e4:	b003      	add	sp, #12
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029e8:	b934      	cbnz	r4, 80029f8 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f012 0202 	ands.w	r2, r2, #2
 80029f0:	d1a5      	bne.n	800293e <HAL_ADC_PollForConversion+0x66>
 80029f2:	e7dd      	b.n	80029b0 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029f4:	20fc      	movs	r0, #252	; 0xfc
 80029f6:	e7bf      	b.n	8002978 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029f8:	f7ff ff56 	bl	80028a8 <HAL_GetTick>
 80029fc:	1bc3      	subs	r3, r0, r7
 80029fe:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a00:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a02:	d99c      	bls.n	800293e <HAL_ADC_PollForConversion+0x66>
 8002a04:	e7f1      	b.n	80029ea <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a06:	6833      	ldr	r3, [r6, #0]
 8002a08:	e79c      	b.n	8002944 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a0a:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d1a6      	bne.n	800295e <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a10:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a16:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a18:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a1a:	04db      	lsls	r3, r3, #19
 8002a1c:	d49f      	bmi.n	800295e <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a26:	e79b      	b.n	8002960 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a28:	2029      	movs	r0, #41	; 0x29
 8002a2a:	e7a5      	b.n	8002978 <HAL_ADC_PollForConversion+0xa0>
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	24924924 	.word	0x24924924
 8002a34:	12492492 	.word	0x12492492
 8002a38:	00249249 	.word	0x00249249

08002a3c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop

08002a44 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002a44:	2300      	movs	r3, #0
{ 
 8002a46:	b530      	push	{r4, r5, lr}
 8002a48:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002a4a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d074      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0xfa>
 8002a54:	2301      	movs	r3, #1
 8002a56:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a5a:	684b      	ldr	r3, [r1, #4]
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a60:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8002a62:	d932      	bls.n	8002aca <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a64:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8002a6a:	d84e      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a6c:	f04f 0c1f 	mov.w	ip, #31
 8002a70:	6808      	ldr	r0, [r1, #0]
 8002a72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002a74:	3b23      	subs	r3, #35	; 0x23
 8002a76:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a7a:	fa0c f303 	lsl.w	r3, ip, r3
 8002a7e:	ea25 0303 	bic.w	r3, r5, r3
 8002a82:	ea43 030e 	orr.w	r3, r3, lr
 8002a86:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a88:	2809      	cmp	r0, #9
 8002a8a:	d930      	bls.n	8002aee <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a8c:	f04f 0c07 	mov.w	ip, #7
 8002a90:	688d      	ldr	r5, [r1, #8]
 8002a92:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002a96:	68e3      	ldr	r3, [r4, #12]
 8002a98:	391e      	subs	r1, #30
 8002a9a:	408d      	lsls	r5, r1
 8002a9c:	fa0c f101 	lsl.w	r1, ip, r1
 8002aa0:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa4:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aa8:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aaa:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aac:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aae:	d844      	bhi.n	8002b3a <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_ADC_ConfigChannel+0x128>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d038      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002aba:	f043 0320 	orr.w	r3, r3, #32
 8002abe:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002ac6:	b003      	add	sp, #12
 8002ac8:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002aca:	f04f 0c1f 	mov.w	ip, #31
 8002ace:	6808      	ldr	r0, [r1, #0]
 8002ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ad4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002ad6:	3b05      	subs	r3, #5
 8002ad8:	fa00 fe03 	lsl.w	lr, r0, r3
 8002adc:	fa0c f303 	lsl.w	r3, ip, r3
 8002ae0:	ea25 0303 	bic.w	r3, r5, r3
 8002ae4:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ae8:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002aea:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aec:	d8ce      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aee:	2507      	movs	r5, #7
 8002af0:	6889      	ldr	r1, [r1, #8]
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002af8:	4081      	lsls	r1, r0
 8002afa:	fa05 f000 	lsl.w	r0, r5, r0
 8002afe:	ea23 0300 	bic.w	r3, r3, r0
 8002b02:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b06:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b08:	e7da      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b0a:	f04f 0c1f 	mov.w	ip, #31
 8002b0e:	6808      	ldr	r0, [r1, #0]
 8002b10:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002b12:	3b41      	subs	r3, #65	; 0x41
 8002b14:	fa00 fe03 	lsl.w	lr, r0, r3
 8002b18:	fa0c f303 	lsl.w	r3, ip, r3
 8002b1c:	ea25 0303 	bic.w	r3, r5, r3
 8002b20:	ea43 030e 	orr.w	r3, r3, lr
 8002b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b26:	e7af      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b28:	68a3      	ldr	r3, [r4, #8]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	d405      	bmi.n	8002b3a <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b2e:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b30:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b36:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b38:	d004      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e7c0      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002b3e:	2002      	movs	r0, #2
}
 8002b40:	b003      	add	sp, #12
 8002b42:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_ADC_ConfigChannel+0x12c>)
 8002b46:	490b      	ldr	r1, [pc, #44]	; (8002b74 <HAL_ADC_ConfigChannel+0x130>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fba1 1303 	umull	r1, r3, r1, r3
 8002b4e:	0c9b      	lsrs	r3, r3, #18
 8002b50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b58:	9b01      	ldr	r3, [sp, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ed      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002b5e:	9b01      	ldr	r3, [sp, #4]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x11a>
 8002b6a:	e7e6      	b.n	8002b3a <HAL_ADC_ConfigChannel+0xf6>
 8002b6c:	40012400 	.word	0x40012400
 8002b70:	20000004 	.word	0x20000004
 8002b74:	431bde83 	.word	0x431bde83

08002b78 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002b78:	2300      	movs	r3, #0
{
 8002b7a:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b7c:	6802      	ldr	r2, [r0, #0]
{
 8002b7e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002b80:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b82:	6893      	ldr	r3, [r2, #8]
 8002b84:	07d9      	lsls	r1, r3, #31
 8002b86:	d427      	bmi.n	8002bd8 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <ADC_Enable+0x80>)
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	481b      	ldr	r0, [pc, #108]	; (8002bfc <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002b90:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b92:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8002b96:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9a:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002b9c:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002ba0:	9b01      	ldr	r3, [sp, #4]
 8002ba2:	b12b      	cbz	r3, 8002bb0 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f9      	bne.n	8002ba4 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb0:	f7ff fe7a 	bl	80028a8 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bb4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002bb6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	07da      	lsls	r2, r3, #31
 8002bbc:	d40c      	bmi.n	8002bd8 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bbe:	f7ff fe73 	bl	80028a8 <HAL_GetTick>
 8002bc2:	1b43      	subs	r3, r0, r5
 8002bc4:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bc6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc8:	d903      	bls.n	8002bd2 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	f012 0201 	ands.w	r2, r2, #1
 8002bd0:	d005      	beq.n	8002bde <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	07db      	lsls	r3, r3, #31
 8002bd6:	d5f2      	bpl.n	8002bbe <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2000      	movs	r0, #0
}
 8002bda:	b003      	add	sp, #12
 8002bdc:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002be2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bee:	4303      	orrs	r3, r0
 8002bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002bf2:	b003      	add	sp, #12
 8002bf4:	bd30      	pop	{r4, r5, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	431bde83 	.word	0x431bde83

08002c00 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002c00:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d038      	beq.n	8002c7a <HAL_ADC_Start+0x7a>
 8002c08:	2301      	movs	r3, #1
{
 8002c0a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002c0c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002c10:	4604      	mov	r4, r0
 8002c12:	f7ff ffb1 	bl	8002b78 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c16:	bb60      	cbnz	r0, 8002c72 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	4929      	ldr	r1, [pc, #164]	; (8002cc4 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c2a:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c2e:	d026      	beq.n	8002c7e <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c36:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c38:	6853      	ldr	r3, [r2, #4]
 8002c3a:	0559      	lsls	r1, r3, #21
 8002c3c:	d42b      	bmi.n	8002c96 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002c40:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c42:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c46:	bf18      	it	ne
 8002c48:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002c4a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c4e:	bf18      	it	ne
 8002c50:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c56:	f06f 0302 	mvn.w	r3, #2
 8002c5a:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c5c:	6893      	ldr	r3, [r2, #8]
 8002c5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c66:	d01d      	beq.n	8002ca4 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c68:	6893      	ldr	r3, [r2, #8]
 8002c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6e:	6093      	str	r3, [r2, #8]
}
 8002c70:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002c72:	2300      	movs	r3, #0
 8002c74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002c78:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002c7a:	2002      	movs	r0, #2
}
 8002c7c:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_ADC_Start+0xc8>)
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8002c86:	d0d3      	beq.n	8002c30 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c8e:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	055b      	lsls	r3, r3, #21
 8002c94:	d5d3      	bpl.n	8002c3e <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ca2:	e7cc      	b.n	8002c3e <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_ADC_Start+0xc4>)
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002caa:	6893      	ldr	r3, [r2, #8]
 8002cac:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002cb0:	6093      	str	r3, [r2, #8]
}
 8002cb2:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cb4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002cb8:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cba:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002cbe:	d1d3      	bne.n	8002c68 <HAL_ADC_Start+0x68>
 8002cc0:	e7f3      	b.n	8002caa <HAL_ADC_Start+0xaa>
 8002cc2:	bf00      	nop
 8002cc4:	40012800 	.word	0x40012800
 8002cc8:	40012400 	.word	0x40012400

08002ccc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cce:	6803      	ldr	r3, [r0, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	07d4      	lsls	r4, r2, #31
 8002cd4:	d401      	bmi.n	8002cda <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cd6:	2000      	movs	r0, #0
}
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002cda:	4604      	mov	r4, r0
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002ce4:	f7ff fde0 	bl	80028a8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002cea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	07d9      	lsls	r1, r3, #31
 8002cf0:	d5f1      	bpl.n	8002cd6 <ADC_ConversionStop_Disable+0xa>
 8002cf2:	e002      	b.n	8002cfa <ADC_ConversionStop_Disable+0x2e>
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	07db      	lsls	r3, r3, #31
 8002cf8:	d5ed      	bpl.n	8002cd6 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cfa:	f7ff fdd5 	bl	80028a8 <HAL_GetTick>
 8002cfe:	1b43      	subs	r3, r0, r5
 8002d00:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d02:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d04:	d9f6      	bls.n	8002cf4 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	07d2      	lsls	r2, r2, #31
 8002d0a:	d5f3      	bpl.n	8002cf4 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d18:	4303      	orrs	r3, r0
 8002d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002d1c:	bd38      	pop	{r3, r4, r5, pc}
 8002d1e:	bf00      	nop

08002d20 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d075      	beq.n	8002e10 <HAL_ADC_Init+0xf0>
{
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d28:	4604      	mov	r4, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d052      	beq.n	8002dd4 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff ffcc 	bl	8002ccc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d36:	f013 0310 	ands.w	r3, r3, #16
 8002d3a:	d145      	bne.n	8002dc8 <HAL_ADC_Init+0xa8>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d143      	bne.n	8002dc8 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8002d40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d42:	4d4a      	ldr	r5, [pc, #296]	; (8002e6c <HAL_ADC_Init+0x14c>)
 8002d44:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002d46:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002d4a:	f021 0102 	bic.w	r1, r1, #2
 8002d4e:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d52:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8002d54:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d56:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d58:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d5a:	d053      	beq.n	8002e04 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d5c:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d5e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8002d62:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d64:	68a5      	ldr	r5, [r4, #8]
 8002d66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002d6a:	d039      	beq.n	8002de0 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d6c:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d70:	2d01      	cmp	r5, #1
 8002d72:	bf0c      	ite	eq
 8002d74:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002d78:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d7c:	f1be 0f01 	cmp.w	lr, #1
 8002d80:	d052      	beq.n	8002e28 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 8002d82:	6856      	ldr	r6, [r2, #4]
 8002d84:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002d88:	ea46 060c 	orr.w	r6, r6, ip
 8002d8c:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d8e:	6897      	ldr	r7, [r2, #8]
 8002d90:	4e37      	ldr	r6, [pc, #220]	; (8002e70 <HAL_ADC_Init+0x150>)
 8002d92:	403e      	ands	r6, r7
 8002d94:	430e      	orrs	r6, r1
 8002d96:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d98:	2d01      	cmp	r5, #1
 8002d9a:	d02f      	beq.n	8002dfc <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8002d9c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002d9e:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8002da2:	ea4c 0303 	orr.w	r3, ip, r3
 8002da6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_ADC_Init+0x154>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	4299      	cmp	r1, r3
 8002db0:	d030      	beq.n	8002e14 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 8002db2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002db6:	f023 0312 	bic.w	r3, r3, #18
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc2:	4303      	orrs	r3, r0
 8002dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002dca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002dd6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002dda:	f7ff f8bd 	bl	8001f58 <HAL_ADC_MspInit>
 8002dde:	e7a6      	b.n	8002d2e <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de0:	7d27      	ldrb	r7, [r4, #20]
 8002de2:	2f01      	cmp	r7, #1
 8002de4:	d01f      	beq.n	8002e26 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8002de6:	6853      	ldr	r3, [r2, #4]
 8002de8:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002df2:	6895      	ldr	r5, [r2, #8]
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_ADC_Init+0x150>)
 8002df6:	402b      	ands	r3, r5
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	051b      	lsls	r3, r3, #20
 8002e02:	e7cb      	b.n	8002d9c <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e04:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8002e08:	bf08      	it	eq
 8002e0a:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8002e0e:	e7a5      	b.n	8002d5c <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
}
 8002e12:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002e14:	2300      	movs	r3, #0
 8002e16:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e26:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e28:	b1c6      	cbz	r6, 8002e5c <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e2c:	f046 0620 	orr.w	r6, r6, #32
 8002e30:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e34:	f046 0601 	orr.w	r6, r6, #1
 8002e38:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002e3a:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e3c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002e40:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002e44:	ea46 060c 	orr.w	r6, r6, ip
 8002e48:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002e4a:	6897      	ldr	r7, [r2, #8]
 8002e4c:	4e08      	ldr	r6, [pc, #32]	; (8002e70 <HAL_ADC_Init+0x150>)
 8002e4e:	ea06 0607 	and.w	r6, r6, r7
 8002e52:	ea46 0601 	orr.w	r6, r6, r1
 8002e56:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e58:	d19e      	bne.n	8002d98 <HAL_ADC_Init+0x78>
 8002e5a:	e7cf      	b.n	8002dfc <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e5c:	69a6      	ldr	r6, [r4, #24]
 8002e5e:	3e01      	subs	r6, #1
 8002e60:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8002e64:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8002e68:	e7e7      	b.n	8002e3a <HAL_ADC_Init+0x11a>
 8002e6a:	bf00      	nop
 8002e6c:	40013c00 	.word	0x40013c00
 8002e70:	ffe1f7fd 	.word	0xffe1f7fd
 8002e74:	ff1f0efe 	.word	0xff1f0efe

08002e78 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e78:	2300      	movs	r3, #0
{
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002e7e:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d05f      	beq.n	8002f48 <HAL_ADCEx_Calibration_Start+0xd0>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e8e:	4604      	mov	r4, r0
 8002e90:	f7ff ff1c 	bl	8002ccc <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e94:	4605      	mov	r5, r0
 8002e96:	b128      	cbz	r0, 8002ea4 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e98:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8002e9a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8002e9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ea6:	4a31      	ldr	r2, [pc, #196]	; (8002f6c <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	6816      	ldr	r6, [r2, #0]
 8002eba:	f001 fa95 	bl	80043e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ebe:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ec2:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002ec4:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	b12b      	cbz	r3, 8002ed6 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002eca:	9b01      	ldr	r3, [sp, #4]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fe4e 	bl	8002b78 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	6893      	ldr	r3, [r2, #8]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002ee6:	f7ff fcdf 	bl	80028a8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002eea:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002eec:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	0711      	lsls	r1, r2, #28
 8002ef2:	d50b      	bpl.n	8002f0c <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ef4:	f7ff fcd8 	bl	80028a8 <HAL_GetTick>
 8002ef8:	1b83      	subs	r3, r0, r6
 8002efa:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002efc:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002efe:	d902      	bls.n	8002f06 <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	0712      	lsls	r2, r2, #28
 8002f04:	d424      	bmi.n	8002f50 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	0710      	lsls	r0, r2, #28
 8002f0a:	d4f3      	bmi.n	8002ef4 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	f042 0204 	orr.w	r2, r2, #4
 8002f12:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002f14:	f7ff fcc8 	bl	80028a8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f18:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002f1a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0759      	lsls	r1, r3, #29
 8002f20:	d50b      	bpl.n	8002f3a <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f22:	f7ff fcc1 	bl	80028a8 <HAL_GetTick>
 8002f26:	1b83      	subs	r3, r0, r6
 8002f28:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f2a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f2c:	d902      	bls.n	8002f34 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	0752      	lsls	r2, r2, #29
 8002f32:	d40d      	bmi.n	8002f50 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	075b      	lsls	r3, r3, #29
 8002f38:	d4f3      	bmi.n	8002f22 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f46:	e7a7      	b.n	8002e98 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002f48:	2502      	movs	r5, #2
}
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002f50:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002f52:	2200      	movs	r2, #0
}
 8002f54:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8002f56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002f58:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	f023 0312 	bic.w	r3, r3, #18
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002f66:	b002      	add	sp, #8
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000004 	.word	0x20000004

08002f70 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f70:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f76:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f8c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b500      	push	{lr}
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9e:	f1c3 0e07 	rsb	lr, r3, #7
 8002fa2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002faa:	bf28      	it	cs
 8002fac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb0:	f1bc 0f06 	cmp.w	ip, #6
 8002fb4:	d91b      	bls.n	8002fee <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	fa0c fc03 	lsl.w	ip, ip, r3
 8002fc0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8002fc8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002fcc:	ea21 010c 	bic.w	r1, r1, ip
 8002fd0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	db0c      	blt.n	8002ff4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	0109      	lsls	r1, r1, #4
 8002fdc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002fe0:	b2c9      	uxtb	r1, r1
 8002fe2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002fe6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	e7e7      	b.n	8002fc4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_NVIC_SetPriority+0x78>)
 8002ff6:	f000 000f 	and.w	r0, r0, #15
 8002ffa:	0109      	lsls	r1, r1, #4
 8002ffc:	b2c9      	uxtb	r1, r1
 8002ffe:	4403      	add	r3, r0
 8003000:	7619      	strb	r1, [r3, #24]
 8003002:	f85d fb04 	ldr.w	pc, [sp], #4
 8003006:	bf00      	nop
 8003008:	e000ed00 	.word	0xe000ed00
 800300c:	e000ecfc 	.word	0xe000ecfc

08003010 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003010:	2800      	cmp	r0, #0
 8003012:	db07      	blt.n	8003024 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003014:	2301      	movs	r3, #1
 8003016:	f000 011f 	and.w	r1, r0, #31
 800301a:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_NVIC_EnableIRQ+0x18>)
 800301c:	0940      	lsrs	r0, r0, #5
 800301e:	408b      	lsls	r3, r1
 8003020:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	3801      	subs	r0, #1
 800302e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003032:	d20f      	bcs.n	8003054 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003034:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003040:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	4c05      	ldr	r4, [pc, #20]	; (8003058 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003044:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800304e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003050:	6119      	str	r1, [r3, #16]
 8003052:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003054:	2001      	movs	r0, #1
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003060:	680e      	ldr	r6, [r1, #0]
{
 8003062:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	2e00      	cmp	r6, #0
 8003066:	f000 80be 	beq.w	80031e6 <HAL_GPIO_Init+0x18a>
 800306a:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306c:	4f85      	ldr	r7, [pc, #532]	; (8003284 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 800306e:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8003070:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003072:	4d85      	ldr	r5, [pc, #532]	; (8003288 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8003074:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800328c <HAL_GPIO_Init+0x230>
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800307a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	fa36 f403 	lsrs.w	r4, r6, r3
 8003080:	f102 0204 	add.w	r2, r2, #4
 8003084:	f000 80af 	beq.w	80031e6 <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8003088:	2401      	movs	r4, #1
 800308a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800308c:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003090:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003094:	d1f1      	bne.n	800307a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003096:	684e      	ldr	r6, [r1, #4]
 8003098:	2e12      	cmp	r6, #18
 800309a:	f200 80a7 	bhi.w	80031ec <HAL_GPIO_Init+0x190>
 800309e:	2e12      	cmp	r6, #18
 80030a0:	d81a      	bhi.n	80030d8 <HAL_GPIO_Init+0x7c>
 80030a2:	e8df f006 	tbb	[pc, r6]
 80030a6:	c2b0      	.short	0xc2b0
 80030a8:	1919d7be 	.word	0x1919d7be
 80030ac:	19191919 	.word	0x19191919
 80030b0:	19191919 	.word	0x19191919
 80030b4:	ba191919 	.word	0xba191919
 80030b8:	c5          	.byte	0xc5
 80030b9:	00          	.byte	0x00
 80030ba:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003290 <HAL_GPIO_Init+0x234>
 80030be:	4576      	cmp	r6, lr
 80030c0:	f000 80a1 	beq.w	8003206 <HAL_GPIO_Init+0x1aa>
 80030c4:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80030c8:	4576      	cmp	r6, lr
 80030ca:	f000 809c 	beq.w	8003206 <HAL_GPIO_Init+0x1aa>
 80030ce:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80030d2:	4576      	cmp	r6, lr
 80030d4:	f000 8097 	beq.w	8003206 <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80030dc:	bf9c      	itt	ls
 80030de:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e0:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030e2:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e6:	bf84      	itt	hi
 80030e8:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ec:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f0:	f8de 4000 	ldr.w	r4, [lr]
 80030f4:	fa0a f90b 	lsl.w	r9, sl, fp
 80030f8:	fa06 fb0b 	lsl.w	fp, r6, fp
 80030fc:	ea24 040b 	bic.w	r4, r4, fp
 8003100:	ea44 0409 	orr.w	r4, r4, r9
 8003104:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003108:	684c      	ldr	r4, [r1, #4]
 800310a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800310e:	f000 8082 	beq.w	8003216 <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003112:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003116:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311a:	f04e 0e01 	orr.w	lr, lr, #1
 800311e:	f8c7 e018 	str.w	lr, [r7, #24]
 8003122:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003126:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312a:	f00e 0e01 	and.w	lr, lr, #1
 800312e:	f8cd e004 	str.w	lr, [sp, #4]
 8003132:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003136:	f023 0e03 	bic.w	lr, r3, #3
 800313a:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 800313e:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003142:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003146:	fa06 f609 	lsl.w	r6, r6, r9
 800314a:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800314e:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003294 <HAL_GPIO_Init+0x238>
 8003152:	4558      	cmp	r0, fp
 8003154:	d01b      	beq.n	800318e <HAL_GPIO_Init+0x132>
 8003156:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800315a:	4558      	cmp	r0, fp
 800315c:	d073      	beq.n	8003246 <HAL_GPIO_Init+0x1ea>
 800315e:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003298 <HAL_GPIO_Init+0x23c>
 8003162:	4558      	cmp	r0, fp
 8003164:	d068      	beq.n	8003238 <HAL_GPIO_Init+0x1dc>
 8003166:	f8df b134 	ldr.w	fp, [pc, #308]	; 800329c <HAL_GPIO_Init+0x240>
 800316a:	4558      	cmp	r0, fp
 800316c:	d07c      	beq.n	8003268 <HAL_GPIO_Init+0x20c>
 800316e:	f8df b130 	ldr.w	fp, [pc, #304]	; 80032a0 <HAL_GPIO_Init+0x244>
 8003172:	4558      	cmp	r0, fp
 8003174:	d07f      	beq.n	8003276 <HAL_GPIO_Init+0x21a>
 8003176:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80032a4 <HAL_GPIO_Init+0x248>
 800317a:	4558      	cmp	r0, fp
 800317c:	bf0c      	ite	eq
 800317e:	f04f 0b05 	moveq.w	fp, #5
 8003182:	f04f 0b06 	movne.w	fp, #6
 8003186:	fa0b f909 	lsl.w	r9, fp, r9
 800318a:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800318e:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003192:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003194:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003198:	bf14      	ite	ne
 800319a:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800319e:	ea26 060c 	biceq.w	r6, r6, ip
 80031a2:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80031a4:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80031aa:	bf14      	ite	ne
 80031ac:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b0:	ea26 060c 	biceq.w	r6, r6, ip
 80031b4:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b6:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	bf14      	ite	ne
 80031be:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031c2:	ea26 060c 	biceq.w	r6, r6, ip
 80031c6:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c8:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80031cc:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ce:	d01f      	beq.n	8003210 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 80031d0:	ea44 040c 	orr.w	r4, r4, ip
 80031d4:	60ec      	str	r4, [r5, #12]
 80031d6:	680e      	ldr	r6, [r1, #0]
	position++;
 80031d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031da:	fa36 f403 	lsrs.w	r4, r6, r3
 80031de:	f102 0204 	add.w	r2, r2, #4
 80031e2:	f47f af51 	bne.w	8003088 <HAL_GPIO_Init+0x2c>
  }
}
 80031e6:	b003      	add	sp, #12
 80031e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80031ec:	4546      	cmp	r6, r8
 80031ee:	d00a      	beq.n	8003206 <HAL_GPIO_Init+0x1aa>
 80031f0:	f67f af63 	bls.w	80030ba <HAL_GPIO_Init+0x5e>
 80031f4:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80032a8 <HAL_GPIO_Init+0x24c>
 80031f8:	4576      	cmp	r6, lr
 80031fa:	d004      	beq.n	8003206 <HAL_GPIO_Init+0x1aa>
 80031fc:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003200:	4576      	cmp	r6, lr
 8003202:	f47f af69 	bne.w	80030d8 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003206:	688e      	ldr	r6, [r1, #8]
 8003208:	bb3e      	cbnz	r6, 800325a <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800320a:	f04f 0a04 	mov.w	sl, #4
 800320e:	e763      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003210:	ea24 040c 	bic.w	r4, r4, ip
 8003214:	60ec      	str	r4, [r5, #12]
 8003216:	680e      	ldr	r6, [r1, #0]
 8003218:	e72f      	b.n	800307a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321a:	68cc      	ldr	r4, [r1, #12]
 800321c:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003220:	e75a      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003222:	68cc      	ldr	r4, [r1, #12]
 8003224:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003228:	e756      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800322a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800322e:	e753      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003230:	68cc      	ldr	r4, [r1, #12]
 8003232:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003236:	e74f      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003238:	f04f 0b02 	mov.w	fp, #2
 800323c:	fa0b f909 	lsl.w	r9, fp, r9
 8003240:	ea46 0609 	orr.w	r6, r6, r9
 8003244:	e7a3      	b.n	800318e <HAL_GPIO_Init+0x132>
 8003246:	f04f 0b01 	mov.w	fp, #1
 800324a:	fa0b f909 	lsl.w	r9, fp, r9
 800324e:	ea46 0609 	orr.w	r6, r6, r9
 8003252:	e79c      	b.n	800318e <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8003254:	f04f 0a00 	mov.w	sl, #0
 8003258:	e73e      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800325a:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800325c:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003260:	bf0c      	ite	eq
 8003262:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003264:	6144      	strne	r4, [r0, #20]
 8003266:	e737      	b.n	80030d8 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003268:	f04f 0b03 	mov.w	fp, #3
 800326c:	fa0b f909 	lsl.w	r9, fp, r9
 8003270:	ea46 0609 	orr.w	r6, r6, r9
 8003274:	e78b      	b.n	800318e <HAL_GPIO_Init+0x132>
 8003276:	f04f 0b04 	mov.w	fp, #4
 800327a:	fa0b f909 	lsl.w	r9, fp, r9
 800327e:	ea46 0609 	orr.w	r6, r6, r9
 8003282:	e784      	b.n	800318e <HAL_GPIO_Init+0x132>
 8003284:	40021000 	.word	0x40021000
 8003288:	40010400 	.word	0x40010400
 800328c:	10220000 	.word	0x10220000
 8003290:	10120000 	.word	0x10120000
 8003294:	40010800 	.word	0x40010800
 8003298:	40011000 	.word	0x40011000
 800329c:	40011400 	.word	0x40011400
 80032a0:	40011800 	.word	0x40011800
 80032a4:	40011c00 	.word	0x40011c00
 80032a8:	10310000 	.word	0x10310000

080032ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032ac:	6883      	ldr	r3, [r0, #8]
 80032ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032b0:	bf14      	ite	ne
 80032b2:	2001      	movne	r0, #1
 80032b4:	2000      	moveq	r0, #0
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b8:	b902      	cbnz	r2, 80032bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032ba:	0409      	lsls	r1, r1, #16
 80032bc:	6101      	str	r1, [r0, #16]
  }
}
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop

080032c4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80032c6:	6951      	ldr	r1, [r2, #20]
 80032c8:	4201      	tst	r1, r0
 80032ca:	d100      	bne.n	80032ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80032cc:	4770      	bx	lr
{
 80032ce:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d2:	f7ff fff5 	bl	80032c0 <HAL_GPIO_EXTI_Callback>
}
 80032d6:	bd08      	pop	{r3, pc}
 80032d8:	40010400 	.word	0x40010400

080032dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e0:	4680      	mov	r8, r0
 80032e2:	460e      	mov	r6, r1
 80032e4:	4617      	mov	r7, r2
 80032e6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e8:	f8d8 4000 	ldr.w	r4, [r8]
 80032ec:	e004      	b.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ee:	6965      	ldr	r5, [r4, #20]
 80032f0:	056a      	lsls	r2, r5, #21
 80032f2:	d409      	bmi.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	d121      	bne.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f8:	6960      	ldr	r0, [r4, #20]
 80032fa:	ea26 0000 	bic.w	r0, r6, r0
 80032fe:	b280      	uxth	r0, r0
 8003300:	2800      	cmp	r0, #0
 8003302:	d1f4      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8003312:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003318:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331a:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800331c:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003328:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800332c:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003330:	f043 0304 	orr.w	r3, r3, #4
 8003334:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 8003338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7ff fab4 	bl	80028a8 <HAL_GetTick>
 8003340:	eba0 0009 	sub.w	r0, r0, r9
 8003344:	42b8      	cmp	r0, r7
 8003346:	d801      	bhi.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8003348:	2f00      	cmp	r7, #0
 800334a:	d1cd      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003350:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003360:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003366:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 800336e:	e7c9      	b.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08003370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	4606      	mov	r6, r0
 8003374:	460d      	mov	r5, r1
 8003376:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003378:	e008      	b.n	800338c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800337a:	6962      	ldr	r2, [r4, #20]
 800337c:	06d2      	lsls	r2, r2, #27
 800337e:	d41b      	bmi.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7ff fa92 	bl	80028a8 <HAL_GetTick>
 8003384:	1bc0      	subs	r0, r0, r7
 8003386:	42a8      	cmp	r0, r5
 8003388:	d807      	bhi.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800338a:	b135      	cbz	r5, 800339a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800338c:	6834      	ldr	r4, [r6, #0]
 800338e:	6963      	ldr	r3, [r4, #20]
 8003390:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003394:	d0f1      	beq.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003396:	2000      	movs	r0, #0
}
 8003398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800339a:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800339e:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80033aa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 80033b2:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	6433      	str	r3, [r6, #64]	; 0x40
}
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b8:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033be:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033ca:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80033cc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 80033d0:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033d2:	6432      	str	r2, [r6, #64]	; 0x40
}
 80033d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d6:	bf00      	nop

080033d8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	460e      	mov	r6, r1
 80033de:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e0:	682c      	ldr	r4, [r5, #0]
 80033e2:	e001      	b.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	1c73      	adds	r3, r6, #1
 80033e6:	d119      	bne.n	800341c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80033ee:	d113      	bne.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f0:	6960      	ldr	r0, [r4, #20]
 80033f2:	0542      	lsls	r2, r0, #21
 80033f4:	d5f6      	bpl.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f6:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003408:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800340e:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003412:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003414:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003418:	2000      	movs	r0, #0
}
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7ff fa44 	bl	80028a8 <HAL_GetTick>
 8003420:	1bc0      	subs	r0, r0, r7
 8003422:	42b0      	cmp	r0, r6
 8003424:	d801      	bhi.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8003426:	2e00      	cmp	r6, #0
 8003428:	d1da      	bne.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800343a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003442:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003448 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	4605      	mov	r5, r0
 800344c:	460e      	mov	r6, r1
 800344e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	682c      	ldr	r4, [r5, #0]
 8003452:	e001      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003454:	1c73      	adds	r3, r6, #1
 8003456:	d119      	bne.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003458:	6963      	ldr	r3, [r4, #20]
 800345a:	f013 0304 	ands.w	r3, r3, #4
 800345e:	d113      	bne.n	8003488 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003460:	6960      	ldr	r0, [r4, #20]
 8003462:	0542      	lsls	r2, r0, #21
 8003464:	d5f6      	bpl.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800346a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003478:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800347a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347e:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003484:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003488:	2000      	movs	r0, #0
}
 800348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7ff fa0c 	bl	80028a8 <HAL_GetTick>
 8003490:	1bc0      	subs	r0, r0, r7
 8003492:	42b0      	cmp	r0, r6
 8003494:	d801      	bhi.n	800349a <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8003496:	2e00      	cmp	r6, #0
 8003498:	d1da      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034aa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80034b2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	642b      	str	r3, [r5, #64]	; 0x40
}
 80034b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034b8 <I2C_RequestMemoryWrite>:
{
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034bc:	6805      	ldr	r5, [r0, #0]
{
 80034be:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c0:	682b      	ldr	r3, [r5, #0]
{
 80034c2:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80034c8:	4607      	mov	r7, r0
 80034ca:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 80034ce:	4688      	mov	r8, r1
 80034d0:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d2:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	e001      	b.n	80034da <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	1c71      	adds	r1, r6, #1
 80034d8:	d110      	bne.n	80034fc <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034da:	696c      	ldr	r4, [r5, #20]
 80034dc:	07e3      	lsls	r3, r4, #31
 80034de:	d5fa      	bpl.n	80034d6 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e0:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80034e4:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e6:	4653      	mov	r3, sl
 80034e8:	4632      	mov	r2, r6
 80034ea:	4638      	mov	r0, r7
 80034ec:	492e      	ldr	r1, [pc, #184]	; (80035a8 <I2C_RequestMemoryWrite+0xf0>)
 80034ee:	f7ff fef5 	bl	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f2:	b160      	cbz	r0, 800350e <I2C_RequestMemoryWrite+0x56>
    return HAL_ERROR;
 80034f4:	2001      	movs	r0, #1
}
 80034f6:	b003      	add	sp, #12
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7ff f9d4 	bl	80028a8 <HAL_GetTick>
 8003500:	eba0 000a 	sub.w	r0, r0, sl
 8003504:	4286      	cmp	r6, r0
 8003506:	d31a      	bcc.n	800353e <I2C_RequestMemoryWrite+0x86>
 8003508:	b1ce      	cbz	r6, 800353e <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	683d      	ldr	r5, [r7, #0]
 800350c:	e7e5      	b.n	80034da <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9001      	str	r0, [sp, #4]
 8003512:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003514:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	9101      	str	r1, [sp, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351c:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003520:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	f7ff ff59 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003526:	2800      	cmp	r0, #0
 8003528:	d133      	bne.n	8003592 <I2C_RequestMemoryWrite+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352a:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352e:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003530:	d121      	bne.n	8003576 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003532:	fa5f f289 	uxtb.w	r2, r9
 8003536:	611a      	str	r2, [r3, #16]
}
 8003538:	b003      	add	sp, #12
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 800353e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003540:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003542:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003544:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003548:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003554:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	05da      	lsls	r2, r3, #23
 800355e:	d506      	bpl.n	800356e <I2C_RequestMemoryWrite+0xb6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003564:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003568:	b003      	add	sp, #12
 800356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 800356e:	2003      	movs	r0, #3
}
 8003570:	b003      	add	sp, #12
 8003572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003576:	ea4f 2019 	mov.w	r0, r9, lsr #8
 800357a:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	4652      	mov	r2, sl
 800357e:	4631      	mov	r1, r6
 8003580:	4638      	mov	r0, r7
 8003582:	f7ff ff29 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003586:	b920      	cbnz	r0, 8003592 <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	fa5f f389 	uxtb.w	r3, r9
 800358e:	6113      	str	r3, [r2, #16]
 8003590:	e7b1      	b.n	80034f6 <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003594:	2b04      	cmp	r3, #4
 8003596:	d1ad      	bne.n	80034f4 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e7a7      	b.n	80034f6 <I2C_RequestMemoryWrite+0x3e>
 80035a6:	bf00      	nop
 80035a8:	00010002 	.word	0x00010002

080035ac <I2C_RequestMemoryRead>:
{
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b0:	6805      	ldr	r5, [r0, #0]
{
 80035b2:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b4:	682b      	ldr	r3, [r5, #0]
{
 80035b6:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035bc:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	682b      	ldr	r3, [r5, #0]
{
 80035c0:	4607      	mov	r7, r0
 80035c2:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80035ca:	4688      	mov	r8, r1
 80035cc:	4692      	mov	sl, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ce:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d0:	e001      	b.n	80035d6 <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	1c74      	adds	r4, r6, #1
 80035d4:	d112      	bne.n	80035fc <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d6:	696c      	ldr	r4, [r5, #20]
 80035d8:	07e1      	lsls	r1, r4, #31
 80035da:	d5fa      	bpl.n	80035d2 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035dc:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 80035e0:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e2:	4632      	mov	r2, r6
 80035e4:	464b      	mov	r3, r9
 80035e6:	4638      	mov	r0, r7
 80035e8:	4943      	ldr	r1, [pc, #268]	; (80036f8 <I2C_RequestMemoryRead+0x14c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ea:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ee:	f7ff fe75 	bl	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f2:	b168      	cbz	r0, 8003610 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
}
 80035f6:	b003      	add	sp, #12
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7ff f954 	bl	80028a8 <HAL_GetTick>
 8003600:	eba0 0009 	sub.w	r0, r0, r9
 8003604:	4286      	cmp	r6, r0
 8003606:	d337      	bcc.n	8003678 <I2C_RequestMemoryRead+0xcc>
 8003608:	2e00      	cmp	r6, #0
 800360a:	d035      	beq.n	8003678 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800360c:	683d      	ldr	r5, [r7, #0]
 800360e:	e7e2      	b.n	80035d6 <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9001      	str	r0, [sp, #4]
 8003614:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	464a      	mov	r2, r9
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	9101      	str	r1, [sp, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361c:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003620:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003624:	f7ff fed8 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	2800      	cmp	r0, #0
 800362a:	d13d      	bne.n	80036a8 <I2C_RequestMemoryRead+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362c:	f1bb 0f01 	cmp.w	fp, #1
 8003630:	d148      	bne.n	80036c4 <I2C_RequestMemoryRead+0x118>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	fa5f f28a 	uxtb.w	r2, sl
 8003638:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	464a      	mov	r2, r9
 800363c:	4631      	mov	r1, r6
 800363e:	4638      	mov	r0, r7
 8003640:	f7ff feca 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	2800      	cmp	r0, #0
 8003646:	d12f      	bne.n	80036a8 <I2C_RequestMemoryRead+0xfc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	680b      	ldr	r3, [r1, #0]
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	e001      	b.n	8003658 <I2C_RequestMemoryRead+0xac>
    if (Timeout != HAL_MAX_DELAY)
 8003654:	1c72      	adds	r2, r6, #1
 8003656:	d145      	bne.n	80036e4 <I2C_RequestMemoryRead+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	694b      	ldr	r3, [r1, #20]
 800365a:	07db      	lsls	r3, r3, #31
 800365c:	d5fa      	bpl.n	8003654 <I2C_RequestMemoryRead+0xa8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800365e:	f048 0401 	orr.w	r4, r8, #1
 8003662:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003664:	464b      	mov	r3, r9
 8003666:	4632      	mov	r2, r6
 8003668:	4638      	mov	r0, r7
 800366a:	4923      	ldr	r1, [pc, #140]	; (80036f8 <I2C_RequestMemoryRead+0x14c>)
 800366c:	f7ff fe36 	bl	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003670:	3800      	subs	r0, #0
 8003672:	bf18      	it	ne
 8003674:	2001      	movne	r0, #1
 8003676:	e7be      	b.n	80035f6 <I2C_RequestMemoryRead+0x4a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003678:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800367a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800367c:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800367e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003682:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003688:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800368e:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003694:	680b      	ldr	r3, [r1, #0]
 8003696:	05d8      	lsls	r0, r3, #23
 8003698:	d510      	bpl.n	80036bc <I2C_RequestMemoryRead+0x110>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369a:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 800369e:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a0:	643b      	str	r3, [r7, #64]	; 0x40
}
 80036a2:	b003      	add	sp, #12
 80036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d1a2      	bne.n	80035f4 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 80036b0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e79c      	b.n	80035f6 <I2C_RequestMemoryRead+0x4a>
    return HAL_TIMEOUT;
 80036bc:	2003      	movs	r0, #3
}
 80036be:	b003      	add	sp, #12
 80036c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80036ca:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036cc:	4631      	mov	r1, r6
 80036ce:	464a      	mov	r2, r9
 80036d0:	4638      	mov	r0, r7
 80036d2:	f7ff fe81 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1e6      	bne.n	80036a8 <I2C_RequestMemoryRead+0xfc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	fa5f f38a 	uxtb.w	r3, sl
 80036e0:	6113      	str	r3, [r2, #16]
 80036e2:	e7aa      	b.n	800363a <I2C_RequestMemoryRead+0x8e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7ff f8e0 	bl	80028a8 <HAL_GetTick>
 80036e8:	eba0 0309 	sub.w	r3, r0, r9
 80036ec:	429e      	cmp	r6, r3
 80036ee:	d3c3      	bcc.n	8003678 <I2C_RequestMemoryRead+0xcc>
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	d0c1      	beq.n	8003678 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	e7af      	b.n	8003658 <I2C_RequestMemoryRead+0xac>
 80036f8:	00010002 	.word	0x00010002

080036fc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80036fc:	2800      	cmp	r0, #0
 80036fe:	f000 80b9 	beq.w	8003874 <HAL_I2C_Init+0x178>
{
 8003702:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003704:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003708:	4604      	mov	r4, r0
 800370a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8098 	beq.w	8003844 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003716:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003718:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003732:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003734:	f000 fdb6 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003738:	6863      	ldr	r3, [r4, #4]
 800373a:	494f      	ldr	r1, [pc, #316]	; (8003878 <HAL_I2C_Init+0x17c>)
 800373c:	428b      	cmp	r3, r1
 800373e:	d84f      	bhi.n	80037e0 <HAL_I2C_Init+0xe4>
 8003740:	4a4e      	ldr	r2, [pc, #312]	; (800387c <HAL_I2C_Init+0x180>)
 8003742:	4290      	cmp	r0, r2
 8003744:	d97c      	bls.n	8003840 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003746:	4d4e      	ldr	r5, [pc, #312]	; (8003880 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003748:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800374a:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374e:	1e43      	subs	r3, r0, #1
 8003750:	fbb3 f3f2 	udiv	r3, r3, r2
 8003754:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003758:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375c:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375e:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003762:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003766:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800376a:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376c:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800376e:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003770:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003774:	ea41 010c 	orr.w	r1, r1, ip
 8003778:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800377a:	69d1      	ldr	r1, [r2, #28]
 800377c:	ea13 0f0e 	tst.w	r3, lr
 8003780:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003784:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003788:	d161      	bne.n	800384e <HAL_I2C_Init+0x152>
 800378a:	2304      	movs	r3, #4
 800378c:	430b      	orrs	r3, r1
 800378e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003790:	6811      	ldr	r1, [r2, #0]
 8003792:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003796:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800379a:	4303      	orrs	r3, r0
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a0:	6891      	ldr	r1, [r2, #8]
 80037a2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80037a6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80037aa:	4303      	orrs	r3, r0
 80037ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b4:	68d0      	ldr	r0, [r2, #12]
 80037b6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80037ba:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80037be:	430b      	orrs	r3, r1
 80037c0:	4303      	orrs	r3, r0
 80037c2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c6:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80037dc:	4608      	mov	r0, r1
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_I2C_Init+0x188>)
 80037e2:	4290      	cmp	r0, r2
 80037e4:	d92c      	bls.n	8003840 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80037e6:	4d26      	ldr	r5, [pc, #152]	; (8003880 <HAL_I2C_Init+0x184>)
 80037e8:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80037f0:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037f4:	fb02 f101 	mul.w	r1, r2, r1
 80037f8:	4d23      	ldr	r5, [pc, #140]	; (8003888 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fc:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003800:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003802:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003804:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003808:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 800380c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380e:	6a15      	ldr	r5, [r2, #32]
 8003810:	3101      	adds	r1, #1
 8003812:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003816:	4329      	orrs	r1, r5
 8003818:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381a:	69d1      	ldr	r1, [r2, #28]
 800381c:	68a5      	ldr	r5, [r4, #8]
 800381e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003822:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003826:	b9ad      	cbnz	r5, 8003854 <HAL_I2C_Init+0x158>
 8003828:	3801      	subs	r0, #1
 800382a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	b1d3      	cbz	r3, 8003870 <HAL_I2C_Init+0x174>
 800383a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383e:	e7a5      	b.n	800378c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
}
 8003842:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003844:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003848:	f7fe fbb8 	bl	8001fbc <HAL_I2C_MspInit>
 800384c:	e762      	b.n	8003714 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800384e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003852:	e79b      	b.n	800378c <HAL_I2C_Init+0x90>
 8003854:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003858:	3801      	subs	r0, #1
 800385a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	b113      	cbz	r3, 8003870 <HAL_I2C_Init+0x174>
 800386a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800386e:	e78d      	b.n	800378c <HAL_I2C_Init+0x90>
 8003870:	2301      	movs	r3, #1
 8003872:	e78b      	b.n	800378c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003874:	2001      	movs	r0, #1
}
 8003876:	4770      	bx	lr
 8003878:	000186a0 	.word	0x000186a0
 800387c:	001e847f 	.word	0x001e847f
 8003880:	431bde83 	.word	0x431bde83
 8003884:	003d08ff 	.word	0x003d08ff
 8003888:	10624dd3 	.word	0x10624dd3

0800388c <HAL_I2C_Mem_Write>:
{
 800388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003890:	4604      	mov	r4, r0
 8003892:	b083      	sub	sp, #12
 8003894:	4699      	mov	r9, r3
 8003896:	460f      	mov	r7, r1
 8003898:	4690      	mov	r8, r2
 800389a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800389e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff f802 	bl	80028a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d003      	beq.n	80038b4 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80038ac:	2002      	movs	r0, #2
}
 80038ae:	b003      	add	sp, #12
 80038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b4:	4605      	mov	r5, r0
 80038b6:	e004      	b.n	80038c2 <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fff6 	bl	80028a8 <HAL_GetTick>
 80038bc:	1b40      	subs	r0, r0, r5
 80038be:	2819      	cmp	r0, #25
 80038c0:	d87b      	bhi.n	80039ba <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	6983      	ldr	r3, [r0, #24]
 80038c6:	ea6f 0c03 	mvn.w	ip, r3
 80038ca:	f01c 0b02 	ands.w	fp, ip, #2
 80038ce:	d0f3      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 80038d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d0e9      	beq.n	80038ac <HAL_I2C_Mem_Write+0x20>
 80038d8:	2301      	movs	r3, #1
 80038da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038de:	6803      	ldr	r3, [r0, #0]
 80038e0:	07da      	lsls	r2, r3, #31
 80038e2:	d565      	bpl.n	80039b0 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e4:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e6:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038ea:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ee:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f2:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f4:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f6:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f8:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80038fc:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80038fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003900:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003902:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003906:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390a:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390e:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003912:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003916:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003918:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391a:	4835      	ldr	r0, [pc, #212]	; (80039f0 <HAL_I2C_Mem_Write+0x164>)
 800391c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff fdca 	bl	80034b8 <I2C_RequestMemoryWrite>
 8003924:	2800      	cmp	r0, #0
 8003926:	d13f      	bne.n	80039a8 <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 8003928:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d029      	beq.n	8003982 <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	462a      	mov	r2, r5
 8003930:	4631      	mov	r1, r6
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff fd50 	bl	80033d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	2800      	cmp	r0, #0
 800393a:	d14f      	bne.n	80039dc <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	4639      	mov	r1, r7
 8003942:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8003946:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800394c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800394e:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 8003952:	3b01      	subs	r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003958:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 800395a:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395c:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 800395e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003960:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003962:	d50c      	bpl.n	800397e <HAL_I2C_Mem_Write+0xf2>
 8003964:	b16a      	cbz	r2, 8003982 <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003966:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 8003968:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396c:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800396e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003970:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8003972:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003974:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003976:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003978:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800397a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800397c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800397e:	2a00      	cmp	r2, #0
 8003980:	d1d5      	bne.n	800392e <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003982:	462a      	mov	r2, r5
 8003984:	4631      	mov	r1, r6
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff fd5e 	bl	8003448 <I2C_WaitOnBTFFlagUntilTimeout>
 800398c:	bb30      	cbnz	r0, 80039dc <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003998:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800399e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80039a6:	e782      	b.n	80038ae <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80039a8:	2001      	movs	r0, #1
}
 80039aa:	b003      	add	sp, #12
 80039ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 80039b0:	6803      	ldr	r3, [r0, #0]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6003      	str	r3, [r0, #0]
 80039b8:	e794      	b.n	80038e4 <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ba:	2320      	movs	r3, #32
      return HAL_BUSY;
 80039bc:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039be:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c6:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039cc:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80039d6:	b003      	add	sp, #12
 80039d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d1e2      	bne.n	80039a8 <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80039e4:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e75e      	b.n	80038ae <HAL_I2C_Mem_Write+0x22>
 80039f0:	ffff0000 	.word	0xffff0000

080039f4 <HAL_I2C_Mem_Read>:
{
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 80039f8:	2400      	movs	r4, #0
{
 80039fa:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80039fc:	9403      	str	r4, [sp, #12]
{
 80039fe:	4604      	mov	r4, r0
 8003a00:	4699      	mov	r9, r3
 8003a02:	460f      	mov	r7, r1
 8003a04:	4690      	mov	r8, r2
 8003a06:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8003a0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7fe ff4c 	bl	80028a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d004      	beq.n	8003a22 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8003a18:	2702      	movs	r7, #2
}
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	b009      	add	sp, #36	; 0x24
 8003a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a22:	4606      	mov	r6, r0
 8003a24:	e005      	b.n	8003a32 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fe ff3f 	bl	80028a8 <HAL_GetTick>
 8003a2a:	1b80      	subs	r0, r0, r6
 8003a2c:	2819      	cmp	r0, #25
 8003a2e:	f200 80b9 	bhi.w	8003ba4 <HAL_I2C_Mem_Read+0x1b0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	6983      	ldr	r3, [r0, #24]
 8003a36:	ea6f 0c03 	mvn.w	ip, r3
 8003a3a:	f01c 0b02 	ands.w	fp, ip, #2
 8003a3e:	d0f2      	beq.n	8003a26 <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8003a40:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d0e7      	beq.n	8003a18 <HAL_I2C_Mem_Read+0x24>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	07db      	lsls	r3, r3, #31
 8003a52:	d539      	bpl.n	8003ac8 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a54:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a56:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5a:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a5e:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a62:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a64:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a66:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a68:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8003a6c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8003a6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003a70:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a72:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a76:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a7a:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7e:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003a82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a86:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003a88:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a8a:	489d      	ldr	r0, [pc, #628]	; (8003d00 <HAL_I2C_Mem_Read+0x30c>)
 8003a8c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fd8c 	bl	80035ac <I2C_RequestMemoryRead>
 8003a94:	4607      	mov	r7, r0
 8003a96:	2800      	cmp	r0, #0
 8003a98:	f040 809d 	bne.w	8003bd6 <HAL_I2C_Mem_Read+0x1e2>
    if (hi2c->XferSize == 0U)
 8003a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a9e:	b9c3      	cbnz	r3, 8003ad2 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	9004      	str	r0, [sp, #16]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	9204      	str	r2, [sp, #16]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	9204      	str	r2, [sp, #16]
 8003aac:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab4:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003ac6:	e7a8      	b.n	8003a1a <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8003ac8:	6803      	ldr	r3, [r0, #0]
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6003      	str	r3, [r0, #0]
 8003ad0:	e7c0      	b.n	8003a54 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8003ad2:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad4:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8003ad6:	f000 8100 	beq.w	8003cda <HAL_I2C_Mem_Read+0x2e6>
    else if (hi2c->XferSize == 2U)
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	f000 80c9 	beq.w	8003c72 <HAL_I2C_Mem_Read+0x27e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	6811      	ldr	r1, [r2, #0]
 8003ae2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003ae6:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae8:	9007      	str	r0, [sp, #28]
 8003aea:	6951      	ldr	r1, [r2, #20]
 8003aec:	9107      	str	r1, [sp, #28]
 8003aee:	6992      	ldr	r2, [r2, #24]
 8003af0:	9207      	str	r2, [sp, #28]
 8003af2:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8003af4:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003af6:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8003d04 <HAL_I2C_Mem_Read+0x310>
 8003afa:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8003d08 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8003afe:	d832      	bhi.n	8003b66 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d061      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x1d4>
        else if (hi2c->XferSize == 2U)
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d172      	bne.n	8003bee <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	e002      	b.n	8003b12 <HAL_I2C_Mem_Read+0x11e>
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	1c69      	adds	r1, r5, #1
 8003b0e:	f040 80c6 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b12:	6953      	ldr	r3, [r2, #20]
 8003b14:	075b      	lsls	r3, r3, #29
 8003b16:	d5f9      	bpl.n	8003b0c <HAL_I2C_Mem_Read+0x118>
 8003b18:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003b2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b34:	3301      	adds	r3, #1
 8003b36:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b46:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003b48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003b4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003b58:	3201      	adds	r2, #1
          hi2c->XferSize--;
 8003b5a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003b5c:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0a9      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d9cc      	bls.n	8003b00 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	4632      	mov	r2, r6
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7ff fc00 	bl	8003370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d130      	bne.n	8003bd6 <HAL_I2C_Mem_Read+0x1e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b7a:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003b7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b7e:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003b86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003b88:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b8a:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003b90:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b94:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8003b96:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003b98:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b9c:	d5df      	bpl.n	8003b5e <HAL_I2C_Mem_Read+0x16a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	7053      	strb	r3, [r2, #1]
 8003ba2:	e7d1      	b.n	8003b48 <HAL_I2C_Mem_Read+0x154>
      return HAL_BUSY;
 8003ba4:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ba6:	2320      	movs	r3, #32
}
 8003ba8:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003baa:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bb2:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003bb8:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	f043 0320 	orr.w	r3, r3, #32
 8003bc0:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003bc2:	b009      	add	sp, #36	; 0x24
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	4632      	mov	r2, r6
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7ff fbcf 	bl	8003370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d0b4      	beq.n	8003b40 <HAL_I2C_Mem_Read+0x14c>
      return HAL_ERROR;
 8003bd6:	2701      	movs	r7, #1
}
 8003bd8:	4638      	mov	r0, r7
 8003bda:	b009      	add	sp, #36	; 0x24
 8003bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be0:	f7fe fe62 	bl	80028a8 <HAL_GetTick>
 8003be4:	1b80      	subs	r0, r0, r6
 8003be6:	4285      	cmp	r5, r0
 8003be8:	d361      	bcc.n	8003cae <HAL_I2C_Mem_Read+0x2ba>
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	d05f      	beq.n	8003cae <HAL_I2C_Mem_Read+0x2ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	e001      	b.n	8003bf6 <HAL_I2C_Mem_Read+0x202>
    if (Timeout != HAL_MAX_DELAY)
 8003bf2:	1c68      	adds	r0, r5, #1
 8003bf4:	d1f4      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x1ec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf6:	6953      	ldr	r3, [r2, #20]
 8003bf8:	0759      	lsls	r1, r3, #29
 8003bfa:	d5fa      	bpl.n	8003bf2 <HAL_I2C_Mem_Read+0x1fe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c0c:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c0e:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8003c12:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c14:	08db      	lsrs	r3, r3, #3
 8003c16:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8003c1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8003c22:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c24:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c2c:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8003c2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003c34:	1c4b      	adds	r3, r1, #1
 8003c36:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c38:	e003      	b.n	8003c42 <HAL_I2C_Mem_Read+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	0752      	lsls	r2, r2, #29
 8003c40:	d444      	bmi.n	8003ccc <HAL_I2C_Mem_Read+0x2d8>
            count--;
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003c48:	9b03      	ldr	r3, [sp, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f5      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x246>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c50:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
 8003c60:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c62:	b662      	cpsie	i
              return HAL_ERROR;
 8003c64:	2701      	movs	r7, #1
}
 8003c66:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8003c68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003c6c:	b009      	add	sp, #36	; 0x24
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	9006      	str	r0, [sp, #24]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	9206      	str	r2, [sp, #24]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	9206      	str	r2, [sp, #24]
 8003c88:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c92:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003c94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f af2c 	bne.w	8003af4 <HAL_I2C_Mem_Read+0x100>
 8003c9c:	e70b      	b.n	8003ab6 <HAL_I2C_Mem_Read+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe fe03 	bl	80028a8 <HAL_GetTick>
 8003ca2:	1b80      	subs	r0, r0, r6
 8003ca4:	4285      	cmp	r5, r0
 8003ca6:	d302      	bcc.n	8003cae <HAL_I2C_Mem_Read+0x2ba>
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	f47f af2d 	bne.w	8003b08 <HAL_I2C_Mem_Read+0x114>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cae:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cb0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cb2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cb8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8003cbe:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003cc4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003cca:	e6a6      	b.n	8003a1a <HAL_I2C_Mem_Read+0x26>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	704b      	strb	r3, [r1, #1]
 8003cd8:	e727      	b.n	8003b2a <HAL_I2C_Mem_Read+0x136>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	9005      	str	r0, [sp, #20]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	9205      	str	r2, [sp, #20]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	9205      	str	r2, [sp, #20]
 8003cf0:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cfa:	b662      	cpsie	i
}
 8003cfc:	e7ca      	b.n	8003c94 <HAL_I2C_Mem_Read+0x2a0>
 8003cfe:	bf00      	nop
 8003d00:	ffff0000 	.word	0xffff0000
 8003d04:	20000004 	.word	0x20000004
 8003d08:	14f8b589 	.word	0x14f8b589

08003d0c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	f000 81b6 	beq.w	800407e <HAL_RCC_OscConfig+0x372>
{
 8003d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	4604      	mov	r4, r0
 8003d1a:	07dd      	lsls	r5, r3, #31
{
 8003d1c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	d535      	bpl.n	8003d8c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d20:	499a      	ldr	r1, [pc, #616]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d22:	684a      	ldr	r2, [r1, #4]
 8003d24:	f002 020c 	and.w	r2, r2, #12
 8003d28:	2a04      	cmp	r2, #4
 8003d2a:	f000 80ef 	beq.w	8003f0c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d2e:	684a      	ldr	r2, [r1, #4]
 8003d30:	f002 020c 	and.w	r2, r2, #12
 8003d34:	2a08      	cmp	r2, #8
 8003d36:	f000 80e5 	beq.w	8003f04 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d010      	beq.n	8003d64 <HAL_RCC_OscConfig+0x58>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 810c 	beq.w	8003f60 <HAL_RCC_OscConfig+0x254>
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	f000 8182 	beq.w	8004054 <HAL_RCC_OscConfig+0x348>
 8003d50:	4b8e      	ldr	r3, [pc, #568]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e004      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
 8003d64:	4a89      	ldr	r2, [pc, #548]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fd9b 	bl	80028a8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4e86      	ldr	r6, [pc, #536]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003d74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	e005      	b.n	8003d84 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe fd96 	bl	80028a8 <HAL_GetTick>
 8003d7c:	1b40      	subs	r0, r0, r5
 8003d7e:	2864      	cmp	r0, #100	; 0x64
 8003d80:	f200 80ea 	bhi.w	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d84:	6833      	ldr	r3, [r6, #0]
 8003d86:	039a      	lsls	r2, r3, #14
 8003d88:	d5f6      	bpl.n	8003d78 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	079f      	lsls	r7, r3, #30
 8003d8e:	d528      	bpl.n	8003de2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d90:	4a7e      	ldr	r2, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d92:	6851      	ldr	r1, [r2, #4]
 8003d94:	f011 0f0c 	tst.w	r1, #12
 8003d98:	f000 808d 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d9c:	6851      	ldr	r1, [r2, #4]
 8003d9e:	f001 010c 	and.w	r1, r1, #12
 8003da2:	2908      	cmp	r1, #8
 8003da4:	f000 8083 	beq.w	8003eae <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8118 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	2201      	movs	r2, #1
 8003db2:	4b77      	ldr	r3, [pc, #476]	; (8003f90 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	4e75      	ldr	r6, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8003db6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003db8:	f7fe fd76 	bl	80028a8 <HAL_GetTick>
 8003dbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	e005      	b.n	8003dcc <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fd72 	bl	80028a8 <HAL_GetTick>
 8003dc4:	1b40      	subs	r0, r0, r5
 8003dc6:	2802      	cmp	r0, #2
 8003dc8:	f200 80c6 	bhi.w	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	0798      	lsls	r0, r3, #30
 8003dd0:	d5f6      	bpl.n	8003dc0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd2:	6833      	ldr	r3, [r6, #0]
 8003dd4:	6962      	ldr	r2, [r4, #20]
 8003dd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003dda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003dde:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	071a      	lsls	r2, r3, #28
 8003de4:	d41f      	bmi.n	8003e26 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	075d      	lsls	r5, r3, #29
 8003de8:	d542      	bpl.n	8003e70 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	00d0      	lsls	r0, r2, #3
 8003df0:	d57d      	bpl.n	8003eee <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4e67      	ldr	r6, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x288>)
 8003df6:	6833      	ldr	r3, [r6, #0]
 8003df8:	05d9      	lsls	r1, r3, #23
 8003dfa:	f140 809d 	bpl.w	8003f38 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f000 80fe 	beq.w	8004002 <HAL_RCC_OscConfig+0x2f6>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80ca 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x294>
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	f000 812c 	beq.w	800406e <HAL_RCC_OscConfig+0x362>
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	621a      	str	r2, [r3, #32]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	e0f2      	b.n	800400c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e26:	69a3      	ldr	r3, [r4, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04f      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e30:	4e56      	ldr	r6, [pc, #344]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8003e32:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003e36:	f7fe fd37 	bl	80028a8 <HAL_GetTick>
 8003e3a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3c:	e005      	b.n	8003e4a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fd33 	bl	80028a8 <HAL_GetTick>
 8003e42:	1b40      	subs	r0, r0, r5
 8003e44:	2802      	cmp	r0, #2
 8003e46:	f200 8087 	bhi.w	8003f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003e4c:	079b      	lsls	r3, r3, #30
 8003e4e:	d5f6      	bpl.n	8003e3e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e50:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <HAL_RCC_OscConfig+0x28c>)
 8003e52:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0x290>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0a5b      	lsrs	r3, r3, #9
 8003e5c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003e5e:	bf00      	nop
  }
  while (Delay --);
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	1e5a      	subs	r2, r3, #1
 8003e64:	9201      	str	r2, [sp, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f9      	bne.n	8003e5e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	075d      	lsls	r5, r3, #29
 8003e6e:	d4bc      	bmi.n	8003dea <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e70:	69e0      	ldr	r0, [r4, #28]
 8003e72:	b1c0      	cbz	r0, 8003ea6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e74:	4d45      	ldr	r5, [pc, #276]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e76:	686b      	ldr	r3, [r5, #4]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	f000 80d8 	beq.w	8004032 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003e82:	2200      	movs	r2, #0
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8a:	f000 80fa 	beq.w	8004082 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fd0b 	bl	80028a8 <HAL_GetTick>
 8003e92:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	e004      	b.n	8003ea0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe fd07 	bl	80028a8 <HAL_GetTick>
 8003e9a:	1b00      	subs	r0, r0, r4
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	d85b      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	d4f7      	bmi.n	8003e96 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003ea6:	2000      	movs	r0, #0
}
 8003ea8:	b002      	add	sp, #8
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	03d6      	lsls	r6, r2, #15
 8003eb2:	f53f af79 	bmi.w	8003da8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	0795      	lsls	r5, r2, #30
 8003ebc:	d530      	bpl.n	8003f20 <HAL_RCC_OscConfig+0x214>
 8003ebe:	6922      	ldr	r2, [r4, #16]
 8003ec0:	2a01      	cmp	r2, #1
 8003ec2:	d02d      	beq.n	8003f20 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003ec4:	2001      	movs	r0, #1
}
 8003ec6:	b002      	add	sp, #8
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003ecc:	4a30      	ldr	r2, [pc, #192]	; (8003f90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ece:	4e2f      	ldr	r6, [pc, #188]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003ed0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003ed4:	f7fe fce8 	bl	80028a8 <HAL_GetTick>
 8003ed8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eda:	e004      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fe fce4 	bl	80028a8 <HAL_GetTick>
 8003ee0:	1b40      	subs	r0, r0, r5
 8003ee2:	2802      	cmp	r0, #2
 8003ee4:	d838      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ee8:	079f      	lsls	r7, r3, #30
 8003eea:	d4f7      	bmi.n	8003edc <HAL_RCC_OscConfig+0x1d0>
 8003eec:	e7bd      	b.n	8003e6a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003ef0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef6:	61da      	str	r2, [r3, #28]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003f02:	e777      	b.n	8003df4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	684a      	ldr	r2, [r1, #4]
 8003f06:	03d0      	lsls	r0, r2, #15
 8003f08:	f57f af17 	bpl.w	8003d3a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	0391      	lsls	r1, r2, #14
 8003f12:	f57f af3b 	bpl.w	8003d8c <HAL_RCC_OscConfig+0x80>
 8003f16:	6862      	ldr	r2, [r4, #4]
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	f47f af37 	bne.w	8003d8c <HAL_RCC_OscConfig+0x80>
 8003f1e:	e7d1      	b.n	8003ec4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	491a      	ldr	r1, [pc, #104]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f22:	6960      	ldr	r0, [r4, #20]
 8003f24:	680a      	ldr	r2, [r1, #0]
 8003f26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003f2a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003f2e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f30:	071a      	lsls	r2, r3, #28
 8003f32:	f57f af58 	bpl.w	8003de6 <HAL_RCC_OscConfig+0xda>
 8003f36:	e776      	b.n	8003e26 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f38:	6833      	ldr	r3, [r6, #0]
 8003f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f40:	f7fe fcb2 	bl	80028a8 <HAL_GetTick>
 8003f44:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f46:	6833      	ldr	r3, [r6, #0]
 8003f48:	05da      	lsls	r2, r3, #23
 8003f4a:	f53f af58 	bmi.w	8003dfe <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fe fcab 	bl	80028a8 <HAL_GetTick>
 8003f52:	1bc0      	subs	r0, r0, r7
 8003f54:	2864      	cmp	r0, #100	; 0x64
 8003f56:	d9f6      	bls.n	8003f46 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003f58:	2003      	movs	r0, #3
}
 8003f5a:	b002      	add	sp, #8
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f60:	4d0a      	ldr	r5, [pc, #40]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f72:	f7fe fc99 	bl	80028a8 <HAL_GetTick>
 8003f76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f78:	e004      	b.n	8003f84 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7a:	f7fe fc95 	bl	80028a8 <HAL_GetTick>
 8003f7e:	1b80      	subs	r0, r0, r6
 8003f80:	2864      	cmp	r0, #100	; 0x64
 8003f82:	d8e9      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	039b      	lsls	r3, r3, #14
 8003f88:	d4f7      	bmi.n	8003f7a <HAL_RCC_OscConfig+0x26e>
 8003f8a:	e6fe      	b.n	8003d8a <HAL_RCC_OscConfig+0x7e>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	42420000 	.word	0x42420000
 8003f94:	40007000 	.word	0x40007000
 8003f98:	20000004 	.word	0x20000004
 8003f9c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa0:	4e50      	ldr	r6, [pc, #320]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa6:	6a33      	ldr	r3, [r6, #32]
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6233      	str	r3, [r6, #32]
 8003fae:	6a33      	ldr	r3, [r6, #32]
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fc77 	bl	80028a8 <HAL_GetTick>
 8003fba:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe fc73 	bl	80028a8 <HAL_GetTick>
 8003fc2:	1bc0      	subs	r0, r0, r7
 8003fc4:	4540      	cmp	r0, r8
 8003fc6:	d8c7      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	6a33      	ldr	r3, [r6, #32]
 8003fca:	0798      	lsls	r0, r3, #30
 8003fcc:	d4f7      	bmi.n	8003fbe <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	f43f af4e 	beq.w	8003e70 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4a43      	ldr	r2, [pc, #268]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
 8003fd6:	69d3      	ldr	r3, [r2, #28]
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	e747      	b.n	8003e70 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	4a41      	ldr	r2, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	4e40      	ldr	r6, [pc, #256]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8003fe4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fc5f 	bl	80028a8 <HAL_GetTick>
 8003fea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fec:	e004      	b.n	8003ff8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe fc5b 	bl	80028a8 <HAL_GetTick>
 8003ff2:	1b40      	subs	r0, r0, r5
 8003ff4:	2802      	cmp	r0, #2
 8003ff6:	d8af      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff8:	6833      	ldr	r3, [r6, #0]
 8003ffa:	0799      	lsls	r1, r3, #30
 8003ffc:	d4f7      	bmi.n	8003fee <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	e6ef      	b.n	8003de2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
 8004004:	6a13      	ldr	r3, [r2, #32]
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800400c:	f7fe fc4c 	bl	80028a8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004014:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	4f33      	ldr	r7, [pc, #204]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
 8004018:	e004      	b.n	8004024 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fe fc45 	bl	80028a8 <HAL_GetTick>
 800401e:	1b80      	subs	r0, r0, r6
 8004020:	4540      	cmp	r0, r8
 8004022:	d899      	bhi.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	079b      	lsls	r3, r3, #30
 8004028:	d5f7      	bpl.n	800401a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800402a:	2d00      	cmp	r5, #0
 800402c:	f43f af20 	beq.w	8003e70 <HAL_RCC_OscConfig+0x164>
 8004030:	e7d0      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004032:	2801      	cmp	r0, #1
 8004034:	f43f af38 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8004038:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	6a22      	ldr	r2, [r4, #32]
 800403c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004040:	4291      	cmp	r1, r2
 8004042:	f47f af3f 	bne.w	8003ec4 <HAL_RCC_OscConfig+0x1b8>
 8004046:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004048:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800404c:	1a18      	subs	r0, r3, r0
 800404e:	bf18      	it	ne
 8004050:	2001      	movne	r0, #1
 8004052:	e729      	b.n	8003ea8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004058:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e67f      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406e:	f042 0204 	orr.w	r2, r2, #4
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	621a      	str	r2, [r3, #32]
 800407c:	e7c6      	b.n	800400c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800407e:	2001      	movs	r0, #1
}
 8004080:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004082:	f7fe fc11 	bl	80028a8 <HAL_GetTick>
 8004086:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004088:	e005      	b.n	8004096 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe fc0d 	bl	80028a8 <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	2802      	cmp	r0, #2
 8004092:	f63f af61 	bhi.w	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	682b      	ldr	r3, [r5, #0]
 8004098:	0199      	lsls	r1, r3, #6
 800409a:	d4f6      	bmi.n	800408a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800409c:	6a23      	ldr	r3, [r4, #32]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040a4:	686a      	ldr	r2, [r5, #4]
 80040a6:	68a1      	ldr	r1, [r4, #8]
 80040a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80040ac:	430a      	orrs	r2, r1
 80040ae:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80040b0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b2:	4d0c      	ldr	r5, [pc, #48]	; (80040e4 <HAL_RCC_OscConfig+0x3d8>)
 80040b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80040b6:	686a      	ldr	r2, [r5, #4]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80040be:	490a      	ldr	r1, [pc, #40]	; (80040e8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c0:	4313      	orrs	r3, r2
 80040c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80040c4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80040c6:	f7fe fbef 	bl	80028a8 <HAL_GetTick>
 80040ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	e005      	b.n	80040da <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe fbeb 	bl	80028a8 <HAL_GetTick>
 80040d2:	1b00      	subs	r0, r0, r4
 80040d4:	2802      	cmp	r0, #2
 80040d6:	f63f af3f 	bhi.w	8003f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	019a      	lsls	r2, r3, #6
 80040de:	d5f6      	bpl.n	80040ce <HAL_RCC_OscConfig+0x3c2>
 80040e0:	e6e1      	b.n	8003ea6 <HAL_RCC_OscConfig+0x19a>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	42420000 	.word	0x42420000

080040ec <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040ec:	f240 2c01 	movw	ip, #513	; 0x201
{
 80040f0:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80040f4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040f6:	f10d 0e18 	add.w	lr, sp, #24
 80040fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040fc:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004102:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8004106:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004108:	f003 010c 	and.w	r1, r3, #12
 800410c:	2908      	cmp	r1, #8
 800410e:	d003      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8004110:	4812      	ldr	r0, [pc, #72]	; (800415c <HAL_RCC_GetSysClockFreq+0x70>)
}
 8004112:	b007      	add	sp, #28
 8004114:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004118:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800411c:	3118      	adds	r1, #24
 800411e:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004120:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004122:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004126:	d50e      	bpl.n	8004146 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004128:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004130:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004134:	3318      	adds	r3, #24
 8004136:	446b      	add	r3, sp
 8004138:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800413c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004140:	b007      	add	sp, #28
 8004142:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_GetSysClockFreq+0x74>)
 8004148:	fb03 f000 	mul.w	r0, r3, r0
}
 800414c:	b007      	add	sp, #28
 800414e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004152:	bf00      	nop
 8004154:	08007df4 	.word	0x08007df4
 8004158:	40021000 	.word	0x40021000
 800415c:	007a1200 	.word	0x007a1200
 8004160:	003d0900 	.word	0x003d0900

08004164 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004164:	2800      	cmp	r0, #0
 8004166:	f000 808c 	beq.w	8004282 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800416a:	4a49      	ldr	r2, [pc, #292]	; (8004290 <HAL_RCC_ClockConfig+0x12c>)
{
 800416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	4604      	mov	r4, r0
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	428b      	cmp	r3, r1
 800417a:	460d      	mov	r5, r1
 800417c:	d20c      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	f023 0307 	bic.w	r3, r3, #7
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	428b      	cmp	r3, r1
 8004190:	d002      	beq.n	8004198 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004192:	2001      	movs	r0, #1
}
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	0798      	lsls	r0, r3, #30
 800419c:	d514      	bpl.n	80041c8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419e:	0759      	lsls	r1, r3, #29
 80041a0:	d504      	bpl.n	80041ac <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a2:	493c      	ldr	r1, [pc, #240]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 80041a4:	684a      	ldr	r2, [r1, #4]
 80041a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041aa:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	071a      	lsls	r2, r3, #28
 80041ae:	d504      	bpl.n	80041ba <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4938      	ldr	r1, [pc, #224]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 80041b2:	684a      	ldr	r2, [r1, #4]
 80041b4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80041b8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ba:	4936      	ldr	r1, [pc, #216]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 80041bc:	68a0      	ldr	r0, [r4, #8]
 80041be:	684a      	ldr	r2, [r1, #4]
 80041c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041c4:	4302      	orrs	r2, r0
 80041c6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c8:	07df      	lsls	r7, r3, #31
 80041ca:	d520      	bpl.n	800420e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041cc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d4:	d057      	beq.n	8004286 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	2a02      	cmp	r2, #2
 80041d8:	d050      	beq.n	800427c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	0799      	lsls	r1, r3, #30
 80041dc:	d5d9      	bpl.n	8004192 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4e2d      	ldr	r6, [pc, #180]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e4:	6873      	ldr	r3, [r6, #4]
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80041ee:	f7fe fb5b 	bl	80028a8 <HAL_GetTick>
 80041f2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f4:	e004      	b.n	8004200 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f6:	f7fe fb57 	bl	80028a8 <HAL_GetTick>
 80041fa:	1bc0      	subs	r0, r0, r7
 80041fc:	4540      	cmp	r0, r8
 80041fe:	d845      	bhi.n	800428c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	6873      	ldr	r3, [r6, #4]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800420c:	d1f3      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800420e:	4a20      	ldr	r2, [pc, #128]	; (8004290 <HAL_RCC_ClockConfig+0x12c>)
 8004210:	6813      	ldr	r3, [r2, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	42ab      	cmp	r3, r5
 8004218:	d909      	bls.n	800422e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	432b      	orrs	r3, r5
 8004222:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004224:	6813      	ldr	r3, [r2, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	42ab      	cmp	r3, r5
 800422c:	d1b1      	bne.n	8004192 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	075a      	lsls	r2, r3, #29
 8004232:	d506      	bpl.n	8004242 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4917      	ldr	r1, [pc, #92]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 8004236:	68e0      	ldr	r0, [r4, #12]
 8004238:	684a      	ldr	r2, [r1, #4]
 800423a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800423e:	4302      	orrs	r2, r0
 8004240:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	d507      	bpl.n	8004256 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 8004248:	6921      	ldr	r1, [r4, #16]
 800424a:	6853      	ldr	r3, [r2, #4]
 800424c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004250:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004254:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004256:	f7ff ff49 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 800425a:	4603      	mov	r3, r0
 800425c:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <HAL_RCC_ClockConfig+0x130>)
 800425e:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x134>)
 8004260:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004262:	480e      	ldr	r0, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004264:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004268:	5c89      	ldrb	r1, [r1, r2]
 800426a:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <HAL_RCC_ClockConfig+0x13c>)
 800426c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 800426e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004270:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004272:	f7fe fad7 	bl	8002824 <HAL_InitTick>
  return HAL_OK;
 8004276:	2000      	movs	r0, #0
}
 8004278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427c:	0198      	lsls	r0, r3, #6
 800427e:	d4ae      	bmi.n	80041de <HAL_RCC_ClockConfig+0x7a>
 8004280:	e787      	b.n	8004192 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004282:	2001      	movs	r0, #1
}
 8004284:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	039e      	lsls	r6, r3, #14
 8004288:	d4a9      	bmi.n	80041de <HAL_RCC_ClockConfig+0x7a>
 800428a:	e782      	b.n	8004192 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800428c:	2003      	movs	r0, #3
 800428e:	e781      	b.n	8004194 <HAL_RCC_ClockConfig+0x30>
 8004290:	40022000 	.word	0x40022000
 8004294:	40021000 	.word	0x40021000
 8004298:	08007d90 	.word	0x08007d90
 800429c:	2000003c 	.word	0x2000003c
 80042a0:	20000004 	.word	0x20000004

080042a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4905      	ldr	r1, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	6810      	ldr	r0, [r2, #0]
}
 80042b4:	40d8      	lsrs	r0, r3
 80042b6:	4770      	bx	lr
 80042b8:	40021000 	.word	0x40021000
 80042bc:	20000004 	.word	0x20000004
 80042c0:	08007da0 	.word	0x08007da0

080042c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4905      	ldr	r1, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042cc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	6810      	ldr	r0, [r2, #0]
}
 80042d4:	40d8      	lsrs	r0, r3
 80042d6:	4770      	bx	lr
 80042d8:	40021000 	.word	0x40021000
 80042dc:	20000004 	.word	0x20000004
 80042e0:	08007da0 	.word	0x08007da0

080042e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042ea:	6800      	ldr	r0, [r0, #0]
{
 80042ec:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042ee:	07c1      	lsls	r1, r0, #31
 80042f0:	d52c      	bpl.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	00d2      	lsls	r2, r2, #3
 80042f8:	d53f      	bpl.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4d39      	ldr	r5, [pc, #228]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80042fc:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	05df      	lsls	r7, r3, #23
 8004302:	d548      	bpl.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004304:	4d35      	ldr	r5, [pc, #212]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004306:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004308:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800430c:	d011      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800430e:	6861      	ldr	r1, [r4, #4]
 8004310:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004314:	429a      	cmp	r2, r3
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004318:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800431a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800431c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800431e:	4a31      	ldr	r2, [pc, #196]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004320:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004324:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004328:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800432c:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800432e:	07d9      	lsls	r1, r3, #31
 8004330:	d444      	bmi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	6861      	ldr	r1, [r4, #4]
 8004334:	4a29      	ldr	r2, [pc, #164]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004336:	6a13      	ldr	r3, [r2, #32]
 8004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004340:	b11e      	cbz	r6, 800434a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004342:	69d3      	ldr	r3, [r2, #28]
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	0783      	lsls	r3, r0, #30
 800434e:	d506      	bpl.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004352:	68a3      	ldr	r3, [r4, #8]
 8004354:	684a      	ldr	r2, [r1, #4]
 8004356:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800435a:	431a      	orrs	r2, r3
 800435c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800435e:	f010 0010 	ands.w	r0, r0, #16
 8004362:	d007      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004364:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004366:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004368:	6961      	ldr	r1, [r4, #20]
 800436a:	6853      	ldr	r3, [r2, #4]
 800436c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004370:	430b      	orrs	r3, r1
 8004372:	6053      	str	r3, [r2, #4]
}
 8004374:	b002      	add	sp, #8
 8004376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	4d18      	ldr	r5, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004382:	61da      	str	r2, [r3, #28]
 8004384:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004386:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	05df      	lsls	r7, r3, #23
 8004394:	d4b6      	bmi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800439e:	f7fe fa83 	bl	80028a8 <HAL_GetTick>
 80043a2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	05d8      	lsls	r0, r3, #23
 80043a8:	d4ac      	bmi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fe fa7d 	bl	80028a8 <HAL_GetTick>
 80043ae:	1bc3      	subs	r3, r0, r7
 80043b0:	2b64      	cmp	r3, #100	; 0x64
 80043b2:	d9f7      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80043b4:	2003      	movs	r0, #3
}
 80043b6:	b002      	add	sp, #8
 80043b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80043bc:	f7fe fa74 	bl	80028a8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80043c4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	e004      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fe fa6e 	bl	80028a8 <HAL_GetTick>
 80043cc:	1bc0      	subs	r0, r0, r7
 80043ce:	4540      	cmp	r0, r8
 80043d0:	d8f0      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	6a2b      	ldr	r3, [r5, #32]
 80043d4:	079a      	lsls	r2, r3, #30
 80043d6:	d5f7      	bpl.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80043d8:	e7ab      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
 80043e4:	42420000 	.word	0x42420000

080043e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043e8:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043ea:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 80043ec:	b087      	sub	sp, #28
 80043ee:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f2:	f10d 0e18 	add.w	lr, sp, #24
 80043f6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043fa:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043fe:	f10c 30ff 	add.w	r0, ip, #4294967295
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004402:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8004406:	280f      	cmp	r0, #15
 8004408:	d819      	bhi.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 800440a:	e8df f000 	tbb	[pc, r0]
 800440e:	2108      	.short	0x2108
 8004410:	18181c18 	.word	0x18181c18
 8004414:	18181c18 	.word	0x18181c18
 8004418:	18181818 	.word	0x18181818
 800441c:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800441e:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004422:	4930      	ldr	r1, [pc, #192]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004424:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004426:	401a      	ands	r2, r3
 8004428:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800442c:	d055      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004436:	d048      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443c:	d03d      	beq.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 800443e:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004440:	b007      	add	sp, #28
 8004442:	f85d fb04 	ldr.w	pc, [sp], #4
 8004446:	b007      	add	sp, #28
 8004448:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 800444c:	f7ff be4e 	b.w	80040ec <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004450:	f7ff ff38 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800445c:	3301      	adds	r3, #1
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004464:	b007      	add	sp, #28
 8004466:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800446c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004474:	d0e4      	beq.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004476:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800447a:	3118      	adds	r1, #24
 800447c:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800447e:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004480:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004484:	d40c      	bmi.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8004488:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	d4d5      	bmi.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8004496:	0040      	lsls	r0, r0, #1
 8004498:	fba3 3000 	umull	r3, r0, r3, r0
 800449c:	0840      	lsrs	r0, r0, #1
 800449e:	e7cf      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044a0:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044a2:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80044a8:	3318      	adds	r3, #24
 80044aa:	446b      	add	r3, sp
 80044ac:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	fb03 f000 	mul.w	r0, r3, r0
 80044b8:	e7e8      	b.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 80044ba:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044be:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 80044c0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80044c4:	bf18      	it	ne
 80044c6:	4618      	movne	r0, r3
 80044c8:	e7ba      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 80044ca:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 80044d0:	f010 0002 	ands.w	r0, r0, #2
 80044d4:	bf18      	it	ne
 80044d6:	4618      	movne	r0, r3
 80044d8:	e7b2      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 80044da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044de:	e7af      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80044e0:	08007df4 	.word	0x08007df4
 80044e4:	40021000 	.word	0x40021000
 80044e8:	003d0900 	.word	0x003d0900
 80044ec:	aaaaaaab 	.word	0xaaaaaaab
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80044f4:	b368      	cbz	r0, 8004552 <HAL_SRAM_Init+0x5e>
 80044f6:	6983      	ldr	r3, [r0, #24]
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	4604      	mov	r4, r0
 8004500:	d029      	beq.n	8004556 <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004502:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004506:	4615      	mov	r5, r2
 8004508:	460e      	mov	r6, r1
 800450a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800450e:	b1db      	cbz	r3, 8004548 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004510:	4621      	mov	r1, r4
 8004512:	f851 0b08 	ldr.w	r0, [r1], #8
 8004516:	f000 f821 	bl	800455c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800451a:	4631      	mov	r1, r6
 800451c:	68a2      	ldr	r2, [r4, #8]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	f000 f852 	bl	80045c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004524:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8004528:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800452a:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800452c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800452e:	f000 f86d 	bl	800460c <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8004536:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800453c:	432b      	orrs	r3, r5
 800453e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8004542:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8004546:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8004548:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 800454c:	f7fd fd6a 	bl	8002024 <HAL_SRAM_MspInit>
 8004550:	e7de      	b.n	8004510 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
}
 8004554:	4770      	bx	lr
    return HAL_ERROR;
 8004556:	2001      	movs	r0, #1
}
 8004558:	bd70      	pop	{r4, r5, r6, pc}
 800455a:	bf00      	nop

0800455c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800455c:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 800455e:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004560:	688b      	ldr	r3, [r1, #8]
{
 8004562:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004564:	2b08      	cmp	r3, #8
 8004566:	bf0c      	ite	eq
 8004568:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 800456c:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800456e:	684e      	ldr	r6, [r1, #4]
 8004570:	680c      	ldr	r4, [r1, #0]
 8004572:	4333      	orrs	r3, r6
 8004574:	68ce      	ldr	r6, [r1, #12]
 8004576:	4d13      	ldr	r5, [pc, #76]	; (80045c4 <FSMC_NORSRAM_Init+0x68>)
 8004578:	4333      	orrs	r3, r6
 800457a:	690e      	ldr	r6, [r1, #16]
 800457c:	4333      	orrs	r3, r6
 800457e:	694e      	ldr	r6, [r1, #20]
 8004580:	4333      	orrs	r3, r6
 8004582:	69ce      	ldr	r6, [r1, #28]
 8004584:	4333      	orrs	r3, r6
 8004586:	6a0e      	ldr	r6, [r1, #32]
 8004588:	4333      	orrs	r3, r6
 800458a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800458c:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800458e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8004592:	f026 0601 	bic.w	r6, r6, #1
 8004596:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800459a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800459c:	4333      	orrs	r3, r6
 800459e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80045a0:	4333      	orrs	r3, r6
 80045a2:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80045a4:	4333      	orrs	r3, r6
 80045a6:	698e      	ldr	r6, [r1, #24]
 80045a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80045aa:	4333      	orrs	r3, r6
 80045ac:	430b      	orrs	r3, r1
 80045ae:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80045b2:	400d      	ands	r5, r1
 80045b4:	432b      	orrs	r3, r5
 80045b6:	ea43 030c 	orr.w	r3, r3, ip
 80045ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80045be:	bc70      	pop	{r4, r5, r6}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	fff00080 	.word	0xfff00080

080045c8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80045c8:	4603      	mov	r3, r0
 80045ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80045ce:	6853      	ldr	r3, [r2, #4]
{
 80045d0:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80045d2:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 80045d6:	698c      	ldr	r4, [r1, #24]
 80045d8:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 80045da:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80045dc:	4323      	orrs	r3, r4
 80045de:	684c      	ldr	r4, [r1, #4]
 80045e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80045e4:	688c      	ldr	r4, [r1, #8]
 80045e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80045ea:	68cc      	ldr	r4, [r1, #12]
 80045ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045f0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 80045f4:	f104 3eff 	add.w	lr, r4, #4294967295
 80045f8:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 80045fc:	3902      	subs	r1, #2
 80045fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004602:	ea43 030c 	orr.w	r3, r3, ip
 8004606:	6053      	str	r3, [r2, #4]
}
 8004608:	bd10      	pop	{r4, pc}
 800460a:	bf00      	nop

0800460c <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004610:	d005      	beq.n	800461e <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004612:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004616:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800461a:	2000      	movs	r0, #0
 800461c:	4770      	bx	lr
{
 800461e:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	698d      	ldr	r5, [r1, #24]
 8004624:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004628:	432b      	orrs	r3, r5
 800462a:	684d      	ldr	r5, [r1, #4]
 800462c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004630:	688d      	ldr	r5, [r1, #8]
 8004632:	68c9      	ldr	r1, [r1, #12]
 8004634:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004638:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 800463e:	4021      	ands	r1, r4
 8004640:	430b      	orrs	r3, r1
 8004642:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004646:	bc30      	pop	{r4, r5}
 8004648:	2000      	movs	r0, #0
 800464a:	4770      	bx	lr
 800464c:	cff00000 	.word	0xcff00000

08004650 <__errno>:
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <__errno+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000040 	.word	0x20000040

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	2600      	movs	r6, #0
 8004660:	4d0c      	ldr	r5, [pc, #48]	; (8004694 <__libc_init_array+0x38>)
 8004662:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <__libc_init_array+0x3c>)
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	f002 ffd0 	bl	8007610 <_init>
 8004670:	2600      	movs	r6, #0
 8004672:	4d0a      	ldr	r5, [pc, #40]	; (800469c <__libc_init_array+0x40>)
 8004674:	4c0a      	ldr	r4, [pc, #40]	; (80046a0 <__libc_init_array+0x44>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	080081e4 	.word	0x080081e4
 8004698:	080081e4 	.word	0x080081e4
 800469c:	080081e4 	.word	0x080081e4
 80046a0:	080081e8 	.word	0x080081e8

080046a4 <malloc>:
 80046a4:	4b02      	ldr	r3, [pc, #8]	; (80046b0 <malloc+0xc>)
 80046a6:	4601      	mov	r1, r0
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f000 b873 	b.w	8004794 <_malloc_r>
 80046ae:	bf00      	nop
 80046b0:	20000040 	.word	0x20000040

080046b4 <memset>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	4402      	add	r2, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <_free_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4605      	mov	r5, r0
 80046c8:	2900      	cmp	r1, #0
 80046ca:	d040      	beq.n	800474e <_free_r+0x8a>
 80046cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d0:	1f0c      	subs	r4, r1, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bfb8      	it	lt
 80046d6:	18e4      	addlt	r4, r4, r3
 80046d8:	f001 fbfc 	bl	8005ed4 <__malloc_lock>
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <_free_r+0x8c>)
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	b933      	cbnz	r3, 80046f0 <_free_r+0x2c>
 80046e2:	6063      	str	r3, [r4, #4]
 80046e4:	6014      	str	r4, [r2, #0]
 80046e6:	4628      	mov	r0, r5
 80046e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ec:	f001 bbf8 	b.w	8005ee0 <__malloc_unlock>
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d908      	bls.n	8004706 <_free_r+0x42>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	1821      	adds	r1, r4, r0
 80046f8:	428b      	cmp	r3, r1
 80046fa:	bf01      	itttt	eq
 80046fc:	6819      	ldreq	r1, [r3, #0]
 80046fe:	685b      	ldreq	r3, [r3, #4]
 8004700:	1809      	addeq	r1, r1, r0
 8004702:	6021      	streq	r1, [r4, #0]
 8004704:	e7ed      	b.n	80046e2 <_free_r+0x1e>
 8004706:	461a      	mov	r2, r3
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b10b      	cbz	r3, 8004710 <_free_r+0x4c>
 800470c:	42a3      	cmp	r3, r4
 800470e:	d9fa      	bls.n	8004706 <_free_r+0x42>
 8004710:	6811      	ldr	r1, [r2, #0]
 8004712:	1850      	adds	r0, r2, r1
 8004714:	42a0      	cmp	r0, r4
 8004716:	d10b      	bne.n	8004730 <_free_r+0x6c>
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	4401      	add	r1, r0
 800471c:	1850      	adds	r0, r2, r1
 800471e:	4283      	cmp	r3, r0
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	d1e0      	bne.n	80046e6 <_free_r+0x22>
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4401      	add	r1, r0
 800472a:	6011      	str	r1, [r2, #0]
 800472c:	6053      	str	r3, [r2, #4]
 800472e:	e7da      	b.n	80046e6 <_free_r+0x22>
 8004730:	d902      	bls.n	8004738 <_free_r+0x74>
 8004732:	230c      	movs	r3, #12
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	e7d6      	b.n	80046e6 <_free_r+0x22>
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	1821      	adds	r1, r4, r0
 800473c:	428b      	cmp	r3, r1
 800473e:	bf01      	itttt	eq
 8004740:	6819      	ldreq	r1, [r3, #0]
 8004742:	685b      	ldreq	r3, [r3, #4]
 8004744:	1809      	addeq	r1, r1, r0
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	6054      	str	r4, [r2, #4]
 800474c:	e7cb      	b.n	80046e6 <_free_r+0x22>
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200003c8 	.word	0x200003c8

08004754 <sbrk_aligned>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4e0e      	ldr	r6, [pc, #56]	; (8004790 <sbrk_aligned+0x3c>)
 8004758:	460c      	mov	r4, r1
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	4605      	mov	r5, r0
 800475e:	b911      	cbnz	r1, 8004766 <sbrk_aligned+0x12>
 8004760:	f000 fcec 	bl	800513c <_sbrk_r>
 8004764:	6030      	str	r0, [r6, #0]
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 fce7 	bl	800513c <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d00a      	beq.n	8004788 <sbrk_aligned+0x34>
 8004772:	1cc4      	adds	r4, r0, #3
 8004774:	f024 0403 	bic.w	r4, r4, #3
 8004778:	42a0      	cmp	r0, r4
 800477a:	d007      	beq.n	800478c <sbrk_aligned+0x38>
 800477c:	1a21      	subs	r1, r4, r0
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fcdc 	bl	800513c <_sbrk_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d101      	bne.n	800478c <sbrk_aligned+0x38>
 8004788:	f04f 34ff 	mov.w	r4, #4294967295
 800478c:	4620      	mov	r0, r4
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	200003cc 	.word	0x200003cc

08004794 <_malloc_r>:
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	1ccd      	adds	r5, r1, #3
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	4607      	mov	r7, r0
 80047aa:	db01      	blt.n	80047b0 <_malloc_r+0x1c>
 80047ac:	42a9      	cmp	r1, r5
 80047ae:	d905      	bls.n	80047bc <_malloc_r+0x28>
 80047b0:	230c      	movs	r3, #12
 80047b2:	2600      	movs	r6, #0
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4630      	mov	r0, r6
 80047b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047bc:	4e2e      	ldr	r6, [pc, #184]	; (8004878 <_malloc_r+0xe4>)
 80047be:	f001 fb89 	bl	8005ed4 <__malloc_lock>
 80047c2:	6833      	ldr	r3, [r6, #0]
 80047c4:	461c      	mov	r4, r3
 80047c6:	bb34      	cbnz	r4, 8004816 <_malloc_r+0x82>
 80047c8:	4629      	mov	r1, r5
 80047ca:	4638      	mov	r0, r7
 80047cc:	f7ff ffc2 	bl	8004754 <sbrk_aligned>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	4604      	mov	r4, r0
 80047d4:	d14d      	bne.n	8004872 <_malloc_r+0xde>
 80047d6:	6834      	ldr	r4, [r6, #0]
 80047d8:	4626      	mov	r6, r4
 80047da:	2e00      	cmp	r6, #0
 80047dc:	d140      	bne.n	8004860 <_malloc_r+0xcc>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	4631      	mov	r1, r6
 80047e2:	4638      	mov	r0, r7
 80047e4:	eb04 0803 	add.w	r8, r4, r3
 80047e8:	f000 fca8 	bl	800513c <_sbrk_r>
 80047ec:	4580      	cmp	r8, r0
 80047ee:	d13a      	bne.n	8004866 <_malloc_r+0xd2>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	3503      	adds	r5, #3
 80047f4:	1a6d      	subs	r5, r5, r1
 80047f6:	f025 0503 	bic.w	r5, r5, #3
 80047fa:	3508      	adds	r5, #8
 80047fc:	2d0c      	cmp	r5, #12
 80047fe:	bf38      	it	cc
 8004800:	250c      	movcc	r5, #12
 8004802:	4638      	mov	r0, r7
 8004804:	4629      	mov	r1, r5
 8004806:	f7ff ffa5 	bl	8004754 <sbrk_aligned>
 800480a:	3001      	adds	r0, #1
 800480c:	d02b      	beq.n	8004866 <_malloc_r+0xd2>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	442b      	add	r3, r5
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	e00e      	b.n	8004834 <_malloc_r+0xa0>
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	1b52      	subs	r2, r2, r5
 800481a:	d41e      	bmi.n	800485a <_malloc_r+0xc6>
 800481c:	2a0b      	cmp	r2, #11
 800481e:	d916      	bls.n	800484e <_malloc_r+0xba>
 8004820:	1961      	adds	r1, r4, r5
 8004822:	42a3      	cmp	r3, r4
 8004824:	6025      	str	r5, [r4, #0]
 8004826:	bf18      	it	ne
 8004828:	6059      	strne	r1, [r3, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	bf08      	it	eq
 800482e:	6031      	streq	r1, [r6, #0]
 8004830:	5162      	str	r2, [r4, r5]
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	4638      	mov	r0, r7
 8004836:	f104 060b 	add.w	r6, r4, #11
 800483a:	f001 fb51 	bl	8005ee0 <__malloc_unlock>
 800483e:	f026 0607 	bic.w	r6, r6, #7
 8004842:	1d23      	adds	r3, r4, #4
 8004844:	1af2      	subs	r2, r6, r3
 8004846:	d0b6      	beq.n	80047b6 <_malloc_r+0x22>
 8004848:	1b9b      	subs	r3, r3, r6
 800484a:	50a3      	str	r3, [r4, r2]
 800484c:	e7b3      	b.n	80047b6 <_malloc_r+0x22>
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	42a3      	cmp	r3, r4
 8004852:	bf0c      	ite	eq
 8004854:	6032      	streq	r2, [r6, #0]
 8004856:	605a      	strne	r2, [r3, #4]
 8004858:	e7ec      	b.n	8004834 <_malloc_r+0xa0>
 800485a:	4623      	mov	r3, r4
 800485c:	6864      	ldr	r4, [r4, #4]
 800485e:	e7b2      	b.n	80047c6 <_malloc_r+0x32>
 8004860:	4634      	mov	r4, r6
 8004862:	6876      	ldr	r6, [r6, #4]
 8004864:	e7b9      	b.n	80047da <_malloc_r+0x46>
 8004866:	230c      	movs	r3, #12
 8004868:	4638      	mov	r0, r7
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	f001 fb38 	bl	8005ee0 <__malloc_unlock>
 8004870:	e7a1      	b.n	80047b6 <_malloc_r+0x22>
 8004872:	6025      	str	r5, [r4, #0]
 8004874:	e7de      	b.n	8004834 <_malloc_r+0xa0>
 8004876:	bf00      	nop
 8004878:	200003c8 	.word	0x200003c8

0800487c <__cvt>:
 800487c:	2b00      	cmp	r3, #0
 800487e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004882:	461f      	mov	r7, r3
 8004884:	bfbb      	ittet	lt
 8004886:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800488a:	461f      	movlt	r7, r3
 800488c:	2300      	movge	r3, #0
 800488e:	232d      	movlt	r3, #45	; 0x2d
 8004890:	b088      	sub	sp, #32
 8004892:	4614      	mov	r4, r2
 8004894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004896:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004898:	7013      	strb	r3, [r2, #0]
 800489a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800489c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048a0:	f023 0820 	bic.w	r8, r3, #32
 80048a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048a8:	d005      	beq.n	80048b6 <__cvt+0x3a>
 80048aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048ae:	d100      	bne.n	80048b2 <__cvt+0x36>
 80048b0:	3501      	adds	r5, #1
 80048b2:	2302      	movs	r3, #2
 80048b4:	e000      	b.n	80048b8 <__cvt+0x3c>
 80048b6:	2303      	movs	r3, #3
 80048b8:	aa07      	add	r2, sp, #28
 80048ba:	9204      	str	r2, [sp, #16]
 80048bc:	aa06      	add	r2, sp, #24
 80048be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048c2:	e9cd 3500 	strd	r3, r5, [sp]
 80048c6:	4622      	mov	r2, r4
 80048c8:	463b      	mov	r3, r7
 80048ca:	f000 fcf5 	bl	80052b8 <_dtoa_r>
 80048ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048d2:	4606      	mov	r6, r0
 80048d4:	d102      	bne.n	80048dc <__cvt+0x60>
 80048d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048d8:	07db      	lsls	r3, r3, #31
 80048da:	d522      	bpl.n	8004922 <__cvt+0xa6>
 80048dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048e0:	eb06 0905 	add.w	r9, r6, r5
 80048e4:	d110      	bne.n	8004908 <__cvt+0x8c>
 80048e6:	7833      	ldrb	r3, [r6, #0]
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d10a      	bne.n	8004902 <__cvt+0x86>
 80048ec:	2200      	movs	r2, #0
 80048ee:	2300      	movs	r3, #0
 80048f0:	4620      	mov	r0, r4
 80048f2:	4639      	mov	r1, r7
 80048f4:	f7fc f8c4 	bl	8000a80 <__aeabi_dcmpeq>
 80048f8:	b918      	cbnz	r0, 8004902 <__cvt+0x86>
 80048fa:	f1c5 0501 	rsb	r5, r5, #1
 80048fe:	f8ca 5000 	str.w	r5, [sl]
 8004902:	f8da 3000 	ldr.w	r3, [sl]
 8004906:	4499      	add	r9, r3
 8004908:	2200      	movs	r2, #0
 800490a:	2300      	movs	r3, #0
 800490c:	4620      	mov	r0, r4
 800490e:	4639      	mov	r1, r7
 8004910:	f7fc f8b6 	bl	8000a80 <__aeabi_dcmpeq>
 8004914:	b108      	cbz	r0, 800491a <__cvt+0x9e>
 8004916:	f8cd 901c 	str.w	r9, [sp, #28]
 800491a:	2230      	movs	r2, #48	; 0x30
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	454b      	cmp	r3, r9
 8004920:	d307      	bcc.n	8004932 <__cvt+0xb6>
 8004922:	4630      	mov	r0, r6
 8004924:	9b07      	ldr	r3, [sp, #28]
 8004926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004928:	1b9b      	subs	r3, r3, r6
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	b008      	add	sp, #32
 800492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	9107      	str	r1, [sp, #28]
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	e7f0      	b.n	800491c <__cvt+0xa0>

0800493a <__exponent>:
 800493a:	4603      	mov	r3, r0
 800493c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493e:	2900      	cmp	r1, #0
 8004940:	f803 2b02 	strb.w	r2, [r3], #2
 8004944:	bfb6      	itet	lt
 8004946:	222d      	movlt	r2, #45	; 0x2d
 8004948:	222b      	movge	r2, #43	; 0x2b
 800494a:	4249      	neglt	r1, r1
 800494c:	2909      	cmp	r1, #9
 800494e:	7042      	strb	r2, [r0, #1]
 8004950:	dd2b      	ble.n	80049aa <__exponent+0x70>
 8004952:	f10d 0407 	add.w	r4, sp, #7
 8004956:	46a4      	mov	ip, r4
 8004958:	270a      	movs	r7, #10
 800495a:	fb91 f6f7 	sdiv	r6, r1, r7
 800495e:	460a      	mov	r2, r1
 8004960:	46a6      	mov	lr, r4
 8004962:	fb07 1516 	mls	r5, r7, r6, r1
 8004966:	2a63      	cmp	r2, #99	; 0x63
 8004968:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800496c:	4631      	mov	r1, r6
 800496e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004976:	dcf0      	bgt.n	800495a <__exponent+0x20>
 8004978:	3130      	adds	r1, #48	; 0x30
 800497a:	f1ae 0502 	sub.w	r5, lr, #2
 800497e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004982:	4629      	mov	r1, r5
 8004984:	1c44      	adds	r4, r0, #1
 8004986:	4561      	cmp	r1, ip
 8004988:	d30a      	bcc.n	80049a0 <__exponent+0x66>
 800498a:	f10d 0209 	add.w	r2, sp, #9
 800498e:	eba2 020e 	sub.w	r2, r2, lr
 8004992:	4565      	cmp	r5, ip
 8004994:	bf88      	it	hi
 8004996:	2200      	movhi	r2, #0
 8004998:	4413      	add	r3, r2
 800499a:	1a18      	subs	r0, r3, r0
 800499c:	b003      	add	sp, #12
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049a8:	e7ed      	b.n	8004986 <__exponent+0x4c>
 80049aa:	2330      	movs	r3, #48	; 0x30
 80049ac:	3130      	adds	r1, #48	; 0x30
 80049ae:	7083      	strb	r3, [r0, #2]
 80049b0:	70c1      	strb	r1, [r0, #3]
 80049b2:	1d03      	adds	r3, r0, #4
 80049b4:	e7f1      	b.n	800499a <__exponent+0x60>
	...

080049b8 <_printf_float>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	b091      	sub	sp, #68	; 0x44
 80049be:	460c      	mov	r4, r1
 80049c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049c4:	4616      	mov	r6, r2
 80049c6:	461f      	mov	r7, r3
 80049c8:	4605      	mov	r5, r0
 80049ca:	f001 fa63 	bl	8005e94 <_localeconv_r>
 80049ce:	6803      	ldr	r3, [r0, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	9309      	str	r3, [sp, #36]	; 0x24
 80049d4:	f7fb fc28 	bl	8000228 <strlen>
 80049d8:	2300      	movs	r3, #0
 80049da:	930e      	str	r3, [sp, #56]	; 0x38
 80049dc:	f8d8 3000 	ldr.w	r3, [r8]
 80049e0:	900a      	str	r0, [sp, #40]	; 0x28
 80049e2:	3307      	adds	r3, #7
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	f103 0208 	add.w	r2, r3, #8
 80049ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80049f0:	f8d4 b000 	ldr.w	fp, [r4]
 80049f4:	f8c8 2000 	str.w	r2, [r8]
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4b9c      	ldr	r3, [pc, #624]	; (8004c84 <_printf_float+0x2cc>)
 8004a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a14:	f7fc f866 	bl	8000ae4 <__aeabi_dcmpun>
 8004a18:	bb70      	cbnz	r0, 8004a78 <_printf_float+0xc0>
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4b98      	ldr	r3, [pc, #608]	; (8004c84 <_printf_float+0x2cc>)
 8004a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a24:	f7fc f840 	bl	8000aa8 <__aeabi_dcmple>
 8004a28:	bb30      	cbnz	r0, 8004a78 <_printf_float+0xc0>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4651      	mov	r1, sl
 8004a32:	f7fc f82f 	bl	8000a94 <__aeabi_dcmplt>
 8004a36:	b110      	cbz	r0, 8004a3e <_printf_float+0x86>
 8004a38:	232d      	movs	r3, #45	; 0x2d
 8004a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3e:	4b92      	ldr	r3, [pc, #584]	; (8004c88 <_printf_float+0x2d0>)
 8004a40:	4892      	ldr	r0, [pc, #584]	; (8004c8c <_printf_float+0x2d4>)
 8004a42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a46:	bf94      	ite	ls
 8004a48:	4698      	movls	r8, r3
 8004a4a:	4680      	movhi	r8, r0
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	f04f 0a00 	mov.w	sl, #0
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	f02b 0304 	bic.w	r3, fp, #4
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	4633      	mov	r3, r6
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	9700      	str	r7, [sp, #0]
 8004a62:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a64:	f000 f9d4 	bl	8004e10 <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f040 8090 	bne.w	8004b8e <_printf_float+0x1d6>
 8004a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a72:	b011      	add	sp, #68	; 0x44
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4653      	mov	r3, sl
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4651      	mov	r1, sl
 8004a80:	f7fc f830 	bl	8000ae4 <__aeabi_dcmpun>
 8004a84:	b148      	cbz	r0, 8004a9a <_printf_float+0xe2>
 8004a86:	f1ba 0f00 	cmp.w	sl, #0
 8004a8a:	bfb8      	it	lt
 8004a8c:	232d      	movlt	r3, #45	; 0x2d
 8004a8e:	4880      	ldr	r0, [pc, #512]	; (8004c90 <_printf_float+0x2d8>)
 8004a90:	bfb8      	it	lt
 8004a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a96:	4b7f      	ldr	r3, [pc, #508]	; (8004c94 <_printf_float+0x2dc>)
 8004a98:	e7d3      	b.n	8004a42 <_printf_float+0x8a>
 8004a9a:	6863      	ldr	r3, [r4, #4]
 8004a9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	d142      	bne.n	8004b2a <_printf_float+0x172>
 8004aa4:	2306      	movs	r3, #6
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	9206      	str	r2, [sp, #24]
 8004aac:	aa0e      	add	r2, sp, #56	; 0x38
 8004aae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ab2:	aa0d      	add	r2, sp, #52	; 0x34
 8004ab4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ab8:	9203      	str	r2, [sp, #12]
 8004aba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004abe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4628      	mov	r0, r5
 8004acc:	4653      	mov	r3, sl
 8004ace:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ad0:	f7ff fed4 	bl	800487c <__cvt>
 8004ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	2947      	cmp	r1, #71	; 0x47
 8004ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004adc:	d108      	bne.n	8004af0 <_printf_float+0x138>
 8004ade:	1cc8      	adds	r0, r1, #3
 8004ae0:	db02      	blt.n	8004ae8 <_printf_float+0x130>
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	dd40      	ble.n	8004b6a <_printf_float+0x1b2>
 8004ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8004aec:	fa5f f989 	uxtb.w	r9, r9
 8004af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004af4:	d81f      	bhi.n	8004b36 <_printf_float+0x17e>
 8004af6:	464a      	mov	r2, r9
 8004af8:	3901      	subs	r1, #1
 8004afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004afe:	910d      	str	r1, [sp, #52]	; 0x34
 8004b00:	f7ff ff1b 	bl	800493a <__exponent>
 8004b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b06:	4682      	mov	sl, r0
 8004b08:	1813      	adds	r3, r2, r0
 8004b0a:	2a01      	cmp	r2, #1
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	dc02      	bgt.n	8004b16 <_printf_float+0x15e>
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	07d2      	lsls	r2, r2, #31
 8004b14:	d501      	bpl.n	8004b1a <_printf_float+0x162>
 8004b16:	3301      	adds	r3, #1
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d09b      	beq.n	8004a5a <_printf_float+0xa2>
 8004b22:	232d      	movs	r3, #45	; 0x2d
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	e797      	b.n	8004a5a <_printf_float+0xa2>
 8004b2a:	2947      	cmp	r1, #71	; 0x47
 8004b2c:	d1bc      	bne.n	8004aa8 <_printf_float+0xf0>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ba      	bne.n	8004aa8 <_printf_float+0xf0>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7b7      	b.n	8004aa6 <_printf_float+0xee>
 8004b36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b3a:	d118      	bne.n	8004b6e <_printf_float+0x1b6>
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	dd0b      	ble.n	8004b5a <_printf_float+0x1a2>
 8004b42:	6121      	str	r1, [r4, #16]
 8004b44:	b913      	cbnz	r3, 8004b4c <_printf_float+0x194>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	07d0      	lsls	r0, r2, #31
 8004b4a:	d502      	bpl.n	8004b52 <_printf_float+0x19a>
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	440b      	add	r3, r1
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	f04f 0a00 	mov.w	sl, #0
 8004b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b58:	e7df      	b.n	8004b1a <_printf_float+0x162>
 8004b5a:	b913      	cbnz	r3, 8004b62 <_printf_float+0x1aa>
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	07d2      	lsls	r2, r2, #31
 8004b60:	d501      	bpl.n	8004b66 <_printf_float+0x1ae>
 8004b62:	3302      	adds	r3, #2
 8004b64:	e7f4      	b.n	8004b50 <_printf_float+0x198>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e7f2      	b.n	8004b50 <_printf_float+0x198>
 8004b6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b70:	4299      	cmp	r1, r3
 8004b72:	db05      	blt.n	8004b80 <_printf_float+0x1c8>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	6121      	str	r1, [r4, #16]
 8004b78:	07d8      	lsls	r0, r3, #31
 8004b7a:	d5ea      	bpl.n	8004b52 <_printf_float+0x19a>
 8004b7c:	1c4b      	adds	r3, r1, #1
 8004b7e:	e7e7      	b.n	8004b50 <_printf_float+0x198>
 8004b80:	2900      	cmp	r1, #0
 8004b82:	bfcc      	ite	gt
 8004b84:	2201      	movgt	r2, #1
 8004b86:	f1c1 0202 	rsble	r2, r1, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	e7e0      	b.n	8004b50 <_printf_float+0x198>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	055a      	lsls	r2, r3, #21
 8004b92:	d407      	bmi.n	8004ba4 <_printf_float+0x1ec>
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	4642      	mov	r2, r8
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d12b      	bne.n	8004bfa <_printf_float+0x242>
 8004ba2:	e764      	b.n	8004a6e <_printf_float+0xb6>
 8004ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ba8:	f240 80dd 	bls.w	8004d66 <_printf_float+0x3ae>
 8004bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f7fb ff64 	bl	8000a80 <__aeabi_dcmpeq>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d033      	beq.n	8004c24 <_printf_float+0x26c>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	4a35      	ldr	r2, [pc, #212]	; (8004c98 <_printf_float+0x2e0>)
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f43f af51 	beq.w	8004a6e <_printf_float+0xb6>
 8004bcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	db02      	blt.n	8004bda <_printf_float+0x222>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	07d8      	lsls	r0, r3, #31
 8004bd8:	d50f      	bpl.n	8004bfa <_printf_float+0x242>
 8004bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f af42 	beq.w	8004a6e <_printf_float+0xb6>
 8004bea:	f04f 0800 	mov.w	r8, #0
 8004bee:	f104 091a 	add.w	r9, r4, #26
 8004bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4543      	cmp	r3, r8
 8004bf8:	dc09      	bgt.n	8004c0e <_printf_float+0x256>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	f100 8102 	bmi.w	8004e06 <_printf_float+0x44e>
 8004c02:	68e0      	ldr	r0, [r4, #12]
 8004c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c06:	4298      	cmp	r0, r3
 8004c08:	bfb8      	it	lt
 8004c0a:	4618      	movlt	r0, r3
 8004c0c:	e731      	b.n	8004a72 <_printf_float+0xba>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	464a      	mov	r2, r9
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f af28 	beq.w	8004a6e <_printf_float+0xb6>
 8004c1e:	f108 0801 	add.w	r8, r8, #1
 8004c22:	e7e6      	b.n	8004bf2 <_printf_float+0x23a>
 8004c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dc38      	bgt.n	8004c9c <_printf_float+0x2e4>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <_printf_float+0x2e0>)
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f af1a 	beq.w	8004a6e <_printf_float+0xb6>
 8004c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d102      	bne.n	8004c48 <_printf_float+0x290>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	07d9      	lsls	r1, r3, #31
 8004c46:	d5d8      	bpl.n	8004bfa <_printf_float+0x242>
 8004c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af0b 	beq.w	8004a6e <_printf_float+0xb6>
 8004c58:	f04f 0900 	mov.w	r9, #0
 8004c5c:	f104 0a1a 	add.w	sl, r4, #26
 8004c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c62:	425b      	negs	r3, r3
 8004c64:	454b      	cmp	r3, r9
 8004c66:	dc01      	bgt.n	8004c6c <_printf_float+0x2b4>
 8004c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c6a:	e794      	b.n	8004b96 <_printf_float+0x1de>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4652      	mov	r2, sl
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f aef9 	beq.w	8004a6e <_printf_float+0xb6>
 8004c7c:	f109 0901 	add.w	r9, r9, #1
 8004c80:	e7ee      	b.n	8004c60 <_printf_float+0x2a8>
 8004c82:	bf00      	nop
 8004c84:	7fefffff 	.word	0x7fefffff
 8004c88:	08007e0c 	.word	0x08007e0c
 8004c8c:	08007e10 	.word	0x08007e10
 8004c90:	08007e18 	.word	0x08007e18
 8004c94:	08007e14 	.word	0x08007e14
 8004c98:	08007e1c 	.word	0x08007e1c
 8004c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bfa8      	it	ge
 8004ca4:	461a      	movge	r2, r3
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	4691      	mov	r9, r2
 8004caa:	dc37      	bgt.n	8004d1c <_printf_float+0x364>
 8004cac:	f04f 0b00 	mov.w	fp, #0
 8004cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb4:	f104 021a 	add.w	r2, r4, #26
 8004cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004cbc:	ebaa 0309 	sub.w	r3, sl, r9
 8004cc0:	455b      	cmp	r3, fp
 8004cc2:	dc33      	bgt.n	8004d2c <_printf_float+0x374>
 8004cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	db3b      	blt.n	8004d44 <_printf_float+0x38c>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	07da      	lsls	r2, r3, #31
 8004cd0:	d438      	bmi.n	8004d44 <_printf_float+0x38c>
 8004cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cd6:	eba3 020a 	sub.w	r2, r3, sl
 8004cda:	eba3 0901 	sub.w	r9, r3, r1
 8004cde:	4591      	cmp	r9, r2
 8004ce0:	bfa8      	it	ge
 8004ce2:	4691      	movge	r9, r2
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	dc34      	bgt.n	8004d54 <_printf_float+0x39c>
 8004cea:	f04f 0800 	mov.w	r8, #0
 8004cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cf2:	f104 0a1a 	add.w	sl, r4, #26
 8004cf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	eba3 0309 	sub.w	r3, r3, r9
 8004d00:	4543      	cmp	r3, r8
 8004d02:	f77f af7a 	ble.w	8004bfa <_printf_float+0x242>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f aeac 	beq.w	8004a6e <_printf_float+0xb6>
 8004d16:	f108 0801 	add.w	r8, r8, #1
 8004d1a:	e7ec      	b.n	8004cf6 <_printf_float+0x33e>
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4642      	mov	r2, r8
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b8      	blx	r7
 8004d26:	3001      	adds	r0, #1
 8004d28:	d1c0      	bne.n	8004cac <_printf_float+0x2f4>
 8004d2a:	e6a0      	b.n	8004a6e <_printf_float+0xb6>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f ae99 	beq.w	8004a6e <_printf_float+0xb6>
 8004d3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d3e:	f10b 0b01 	add.w	fp, fp, #1
 8004d42:	e7b9      	b.n	8004cb8 <_printf_float+0x300>
 8004d44:	4631      	mov	r1, r6
 8004d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d1bf      	bne.n	8004cd2 <_printf_float+0x31a>
 8004d52:	e68c      	b.n	8004a6e <_printf_float+0xb6>
 8004d54:	464b      	mov	r3, r9
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	eb08 020a 	add.w	r2, r8, sl
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	d1c2      	bne.n	8004cea <_printf_float+0x332>
 8004d64:	e683      	b.n	8004a6e <_printf_float+0xb6>
 8004d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d68:	2a01      	cmp	r2, #1
 8004d6a:	dc01      	bgt.n	8004d70 <_printf_float+0x3b8>
 8004d6c:	07db      	lsls	r3, r3, #31
 8004d6e:	d537      	bpl.n	8004de0 <_printf_float+0x428>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4642      	mov	r2, r8
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f ae77 	beq.w	8004a6e <_printf_float+0xb6>
 8004d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f ae6f 	beq.w	8004a6e <_printf_float+0xb6>
 8004d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	f7fb fe72 	bl	8000a80 <__aeabi_dcmpeq>
 8004d9c:	b9d8      	cbnz	r0, 8004dd6 <_printf_float+0x41e>
 8004d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da0:	f108 0201 	add.w	r2, r8, #1
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	d10e      	bne.n	8004dce <_printf_float+0x416>
 8004db0:	e65d      	b.n	8004a6e <_printf_float+0xb6>
 8004db2:	2301      	movs	r3, #1
 8004db4:	464a      	mov	r2, r9
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f ae56 	beq.w	8004a6e <_printf_float+0xb6>
 8004dc2:	f108 0801 	add.w	r8, r8, #1
 8004dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	4543      	cmp	r3, r8
 8004dcc:	dcf1      	bgt.n	8004db2 <_printf_float+0x3fa>
 8004dce:	4653      	mov	r3, sl
 8004dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004dd4:	e6e0      	b.n	8004b98 <_printf_float+0x1e0>
 8004dd6:	f04f 0800 	mov.w	r8, #0
 8004dda:	f104 091a 	add.w	r9, r4, #26
 8004dde:	e7f2      	b.n	8004dc6 <_printf_float+0x40e>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4642      	mov	r2, r8
 8004de4:	e7df      	b.n	8004da6 <_printf_float+0x3ee>
 8004de6:	2301      	movs	r3, #1
 8004de8:	464a      	mov	r2, r9
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae3c 	beq.w	8004a6e <_printf_float+0xb6>
 8004df6:	f108 0801 	add.w	r8, r8, #1
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004dfe:	1a5b      	subs	r3, r3, r1
 8004e00:	4543      	cmp	r3, r8
 8004e02:	dcf0      	bgt.n	8004de6 <_printf_float+0x42e>
 8004e04:	e6fd      	b.n	8004c02 <_printf_float+0x24a>
 8004e06:	f04f 0800 	mov.w	r8, #0
 8004e0a:	f104 0919 	add.w	r9, r4, #25
 8004e0e:	e7f4      	b.n	8004dfa <_printf_float+0x442>

08004e10 <_printf_common>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	4616      	mov	r6, r2
 8004e16:	4699      	mov	r9, r3
 8004e18:	688a      	ldr	r2, [r1, #8]
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	bfb8      	it	lt
 8004e22:	4613      	movlt	r3, r2
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e30:	b10a      	cbz	r2, 8004e36 <_printf_common+0x26>
 8004e32:	3301      	adds	r3, #1
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	0699      	lsls	r1, r3, #26
 8004e3a:	bf42      	ittt	mi
 8004e3c:	6833      	ldrmi	r3, [r6, #0]
 8004e3e:	3302      	addmi	r3, #2
 8004e40:	6033      	strmi	r3, [r6, #0]
 8004e42:	6825      	ldr	r5, [r4, #0]
 8004e44:	f015 0506 	ands.w	r5, r5, #6
 8004e48:	d106      	bne.n	8004e58 <_printf_common+0x48>
 8004e4a:	f104 0a19 	add.w	sl, r4, #25
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	6832      	ldr	r2, [r6, #0]
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	dc28      	bgt.n	8004eaa <_printf_common+0x9a>
 8004e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e5c:	1e13      	subs	r3, r2, #0
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	0692      	lsls	r2, r2, #26
 8004e66:	d42d      	bmi.n	8004ec4 <_printf_common+0xb4>
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d020      	beq.n	8004eb8 <_printf_common+0xa8>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	68e5      	ldr	r5, [r4, #12]
 8004e7a:	f003 0306 	and.w	r3, r3, #6
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	bf18      	it	ne
 8004e82:	2500      	movne	r5, #0
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	f04f 0600 	mov.w	r6, #0
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	bf08      	it	eq
 8004e8e:	1aad      	subeq	r5, r5, r2
 8004e90:	6922      	ldr	r2, [r4, #16]
 8004e92:	bf08      	it	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfc4      	itt	gt
 8004e9c:	1a9b      	subgt	r3, r3, r2
 8004e9e:	18ed      	addgt	r5, r5, r3
 8004ea0:	341a      	adds	r4, #26
 8004ea2:	42b5      	cmp	r5, r6
 8004ea4:	d11a      	bne.n	8004edc <_printf_common+0xcc>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	e008      	b.n	8004ebc <_printf_common+0xac>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4652      	mov	r2, sl
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	47c0      	blx	r8
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d103      	bne.n	8004ec0 <_printf_common+0xb0>
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	e7c4      	b.n	8004e4e <_printf_common+0x3e>
 8004ec4:	2030      	movs	r0, #48	; 0x30
 8004ec6:	18e1      	adds	r1, r4, r3
 8004ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ed2:	4422      	add	r2, r4
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eda:	e7c5      	b.n	8004e68 <_printf_common+0x58>
 8004edc:	2301      	movs	r3, #1
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d0e6      	beq.n	8004eb8 <_printf_common+0xa8>
 8004eea:	3601      	adds	r6, #1
 8004eec:	e7d9      	b.n	8004ea2 <_printf_common+0x92>
	...

08004ef0 <_printf_i>:
 8004ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	7e0f      	ldrb	r7, [r1, #24]
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	2f78      	cmp	r7, #120	; 0x78
 8004efa:	4680      	mov	r8, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	469a      	mov	sl, r3
 8004f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f06:	d807      	bhi.n	8004f18 <_printf_i+0x28>
 8004f08:	2f62      	cmp	r7, #98	; 0x62
 8004f0a:	d80a      	bhi.n	8004f22 <_printf_i+0x32>
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	f000 80d9 	beq.w	80050c4 <_printf_i+0x1d4>
 8004f12:	2f58      	cmp	r7, #88	; 0x58
 8004f14:	f000 80a4 	beq.w	8005060 <_printf_i+0x170>
 8004f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f20:	e03a      	b.n	8004f98 <_printf_i+0xa8>
 8004f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f26:	2b15      	cmp	r3, #21
 8004f28:	d8f6      	bhi.n	8004f18 <_printf_i+0x28>
 8004f2a:	a101      	add	r1, pc, #4	; (adr r1, 8004f30 <_printf_i+0x40>)
 8004f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f19 	.word	0x08004f19
 8004f3c:	08004f19 	.word	0x08004f19
 8004f40:	08004f19 	.word	0x08004f19
 8004f44:	08004f19 	.word	0x08004f19
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004f19 	.word	0x08004f19
 8004f50:	08004f19 	.word	0x08004f19
 8004f54:	08004f19 	.word	0x08004f19
 8004f58:	08004f19 	.word	0x08004f19
 8004f5c:	080050ab 	.word	0x080050ab
 8004f60:	08004fcd 	.word	0x08004fcd
 8004f64:	0800508d 	.word	0x0800508d
 8004f68:	08004f19 	.word	0x08004f19
 8004f6c:	08004f19 	.word	0x08004f19
 8004f70:	080050cd 	.word	0x080050cd
 8004f74:	08004f19 	.word	0x08004f19
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f19 	.word	0x08004f19
 8004f80:	08004f19 	.word	0x08004f19
 8004f84:	08005095 	.word	0x08005095
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	602a      	str	r2, [r5, #0]
 8004f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0a4      	b.n	80050e6 <_printf_i+0x1f6>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	6829      	ldr	r1, [r5, #0]
 8004fa0:	0606      	lsls	r6, r0, #24
 8004fa2:	f101 0304 	add.w	r3, r1, #4
 8004fa6:	d50a      	bpl.n	8004fbe <_printf_i+0xce>
 8004fa8:	680e      	ldr	r6, [r1, #0]
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	da03      	bge.n	8004fb8 <_printf_i+0xc8>
 8004fb0:	232d      	movs	r3, #45	; 0x2d
 8004fb2:	4276      	negs	r6, r6
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	230a      	movs	r3, #10
 8004fba:	485e      	ldr	r0, [pc, #376]	; (8005134 <_printf_i+0x244>)
 8004fbc:	e019      	b.n	8004ff2 <_printf_i+0x102>
 8004fbe:	680e      	ldr	r6, [r1, #0]
 8004fc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	bf18      	it	ne
 8004fc8:	b236      	sxthne	r6, r6
 8004fca:	e7ef      	b.n	8004fac <_printf_i+0xbc>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	6029      	str	r1, [r5, #0]
 8004fd4:	0601      	lsls	r1, r0, #24
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0xec>
 8004fd8:	681e      	ldr	r6, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0xf2>
 8004fdc:	0646      	lsls	r6, r0, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0xe8>
 8004fe0:	881e      	ldrh	r6, [r3, #0]
 8004fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2308      	moveq	r3, #8
 8004fe8:	230a      	movne	r3, #10
 8004fea:	4852      	ldr	r0, [pc, #328]	; (8005134 <_printf_i+0x244>)
 8004fec:	2100      	movs	r1, #0
 8004fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ff2:	6865      	ldr	r5, [r4, #4]
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	bfa8      	it	ge
 8004ff8:	6821      	ldrge	r1, [r4, #0]
 8004ffa:	60a5      	str	r5, [r4, #8]
 8004ffc:	bfa4      	itt	ge
 8004ffe:	f021 0104 	bicge.w	r1, r1, #4
 8005002:	6021      	strge	r1, [r4, #0]
 8005004:	b90e      	cbnz	r6, 800500a <_printf_i+0x11a>
 8005006:	2d00      	cmp	r5, #0
 8005008:	d04d      	beq.n	80050a6 <_printf_i+0x1b6>
 800500a:	4615      	mov	r5, r2
 800500c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005010:	fb03 6711 	mls	r7, r3, r1, r6
 8005014:	5dc7      	ldrb	r7, [r0, r7]
 8005016:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800501a:	4637      	mov	r7, r6
 800501c:	42bb      	cmp	r3, r7
 800501e:	460e      	mov	r6, r1
 8005020:	d9f4      	bls.n	800500c <_printf_i+0x11c>
 8005022:	2b08      	cmp	r3, #8
 8005024:	d10b      	bne.n	800503e <_printf_i+0x14e>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07de      	lsls	r6, r3, #31
 800502a:	d508      	bpl.n	800503e <_printf_i+0x14e>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	6861      	ldr	r1, [r4, #4]
 8005030:	4299      	cmp	r1, r3
 8005032:	bfde      	ittt	le
 8005034:	2330      	movle	r3, #48	; 0x30
 8005036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800503a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800503e:	1b52      	subs	r2, r2, r5
 8005040:	6122      	str	r2, [r4, #16]
 8005042:	464b      	mov	r3, r9
 8005044:	4621      	mov	r1, r4
 8005046:	4640      	mov	r0, r8
 8005048:	f8cd a000 	str.w	sl, [sp]
 800504c:	aa03      	add	r2, sp, #12
 800504e:	f7ff fedf 	bl	8004e10 <_printf_common>
 8005052:	3001      	adds	r0, #1
 8005054:	d14c      	bne.n	80050f0 <_printf_i+0x200>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b004      	add	sp, #16
 800505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005060:	4834      	ldr	r0, [pc, #208]	; (8005134 <_printf_i+0x244>)
 8005062:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005066:	6829      	ldr	r1, [r5, #0]
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f851 6b04 	ldr.w	r6, [r1], #4
 800506e:	6029      	str	r1, [r5, #0]
 8005070:	061d      	lsls	r5, r3, #24
 8005072:	d514      	bpl.n	800509e <_printf_i+0x1ae>
 8005074:	07df      	lsls	r7, r3, #31
 8005076:	bf44      	itt	mi
 8005078:	f043 0320 	orrmi.w	r3, r3, #32
 800507c:	6023      	strmi	r3, [r4, #0]
 800507e:	b91e      	cbnz	r6, 8005088 <_printf_i+0x198>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	2310      	movs	r3, #16
 800508a:	e7af      	b.n	8004fec <_printf_i+0xfc>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f043 0320 	orr.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	2378      	movs	r3, #120	; 0x78
 8005096:	4828      	ldr	r0, [pc, #160]	; (8005138 <_printf_i+0x248>)
 8005098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800509c:	e7e3      	b.n	8005066 <_printf_i+0x176>
 800509e:	0659      	lsls	r1, r3, #25
 80050a0:	bf48      	it	mi
 80050a2:	b2b6      	uxthmi	r6, r6
 80050a4:	e7e6      	b.n	8005074 <_printf_i+0x184>
 80050a6:	4615      	mov	r5, r2
 80050a8:	e7bb      	b.n	8005022 <_printf_i+0x132>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	6826      	ldr	r6, [r4, #0]
 80050ae:	1d18      	adds	r0, r3, #4
 80050b0:	6961      	ldr	r1, [r4, #20]
 80050b2:	6028      	str	r0, [r5, #0]
 80050b4:	0635      	lsls	r5, r6, #24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	d501      	bpl.n	80050be <_printf_i+0x1ce>
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	e002      	b.n	80050c4 <_printf_i+0x1d4>
 80050be:	0670      	lsls	r0, r6, #25
 80050c0:	d5fb      	bpl.n	80050ba <_printf_i+0x1ca>
 80050c2:	8019      	strh	r1, [r3, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	4615      	mov	r5, r2
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	e7ba      	b.n	8005042 <_printf_i+0x152>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	2100      	movs	r1, #0
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	602a      	str	r2, [r5, #0]
 80050d4:	681d      	ldr	r5, [r3, #0]
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 fedf 	bl	8005e9c <memchr>
 80050de:	b108      	cbz	r0, 80050e4 <_printf_i+0x1f4>
 80050e0:	1b40      	subs	r0, r0, r5
 80050e2:	6060      	str	r0, [r4, #4]
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	2300      	movs	r3, #0
 80050ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ee:	e7a8      	b.n	8005042 <_printf_i+0x152>
 80050f0:	462a      	mov	r2, r5
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	47d0      	blx	sl
 80050fa:	3001      	adds	r0, #1
 80050fc:	d0ab      	beq.n	8005056 <_printf_i+0x166>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	079b      	lsls	r3, r3, #30
 8005102:	d413      	bmi.n	800512c <_printf_i+0x23c>
 8005104:	68e0      	ldr	r0, [r4, #12]
 8005106:	9b03      	ldr	r3, [sp, #12]
 8005108:	4298      	cmp	r0, r3
 800510a:	bfb8      	it	lt
 800510c:	4618      	movlt	r0, r3
 800510e:	e7a4      	b.n	800505a <_printf_i+0x16a>
 8005110:	2301      	movs	r3, #1
 8005112:	4632      	mov	r2, r6
 8005114:	4649      	mov	r1, r9
 8005116:	4640      	mov	r0, r8
 8005118:	47d0      	blx	sl
 800511a:	3001      	adds	r0, #1
 800511c:	d09b      	beq.n	8005056 <_printf_i+0x166>
 800511e:	3501      	adds	r5, #1
 8005120:	68e3      	ldr	r3, [r4, #12]
 8005122:	9903      	ldr	r1, [sp, #12]
 8005124:	1a5b      	subs	r3, r3, r1
 8005126:	42ab      	cmp	r3, r5
 8005128:	dcf2      	bgt.n	8005110 <_printf_i+0x220>
 800512a:	e7eb      	b.n	8005104 <_printf_i+0x214>
 800512c:	2500      	movs	r5, #0
 800512e:	f104 0619 	add.w	r6, r4, #25
 8005132:	e7f5      	b.n	8005120 <_printf_i+0x230>
 8005134:	08007e1e 	.word	0x08007e1e
 8005138:	08007e2f 	.word	0x08007e2f

0800513c <_sbrk_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	2300      	movs	r3, #0
 8005140:	4d05      	ldr	r5, [pc, #20]	; (8005158 <_sbrk_r+0x1c>)
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fd f806 	bl	8002158 <_sbrk>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_sbrk_r+0x1a>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_sbrk_r+0x1a>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	200003d0 	.word	0x200003d0

0800515c <siprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005162:	b500      	push	{lr}
 8005164:	b09c      	sub	sp, #112	; 0x70
 8005166:	ab1d      	add	r3, sp, #116	; 0x74
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	9107      	str	r1, [sp, #28]
 800516e:	9104      	str	r1, [sp, #16]
 8005170:	4808      	ldr	r0, [pc, #32]	; (8005194 <siprintf+0x38>)
 8005172:	4909      	ldr	r1, [pc, #36]	; (8005198 <siprintf+0x3c>)
 8005174:	f853 2b04 	ldr.w	r2, [r3], #4
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	a902      	add	r1, sp, #8
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	f001 faa6 	bl	80066d0 <_svfiprintf_r>
 8005184:	2200      	movs	r2, #0
 8005186:	9b02      	ldr	r3, [sp, #8]
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	b01c      	add	sp, #112	; 0x70
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	20000040 	.word	0x20000040
 8005198:	ffff0208 	.word	0xffff0208

0800519c <quorem>:
 800519c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	6903      	ldr	r3, [r0, #16]
 80051a2:	690c      	ldr	r4, [r1, #16]
 80051a4:	4607      	mov	r7, r0
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	f2c0 8082 	blt.w	80052b0 <quorem+0x114>
 80051ac:	3c01      	subs	r4, #1
 80051ae:	f100 0514 	add.w	r5, r0, #20
 80051b2:	f101 0814 	add.w	r8, r1, #20
 80051b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c4:	3301      	adds	r3, #1
 80051c6:	429a      	cmp	r2, r3
 80051c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80051cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051d4:	d331      	bcc.n	800523a <quorem+0x9e>
 80051d6:	f04f 0e00 	mov.w	lr, #0
 80051da:	4640      	mov	r0, r8
 80051dc:	46ac      	mov	ip, r5
 80051de:	46f2      	mov	sl, lr
 80051e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051e4:	b293      	uxth	r3, r2
 80051e6:	fb06 e303 	mla	r3, r6, r3, lr
 80051ea:	0c12      	lsrs	r2, r2, #16
 80051ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	fb06 e202 	mla	r2, r6, r2, lr
 80051f6:	ebaa 0303 	sub.w	r3, sl, r3
 80051fa:	f8dc a000 	ldr.w	sl, [ip]
 80051fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005202:	fa1f fa8a 	uxth.w	sl, sl
 8005206:	4453      	add	r3, sl
 8005208:	f8dc a000 	ldr.w	sl, [ip]
 800520c:	b292      	uxth	r2, r2
 800520e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800521c:	4581      	cmp	r9, r0
 800521e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005222:	f84c 3b04 	str.w	r3, [ip], #4
 8005226:	d2db      	bcs.n	80051e0 <quorem+0x44>
 8005228:	f855 300b 	ldr.w	r3, [r5, fp]
 800522c:	b92b      	cbnz	r3, 800523a <quorem+0x9e>
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	3b04      	subs	r3, #4
 8005232:	429d      	cmp	r5, r3
 8005234:	461a      	mov	r2, r3
 8005236:	d32f      	bcc.n	8005298 <quorem+0xfc>
 8005238:	613c      	str	r4, [r7, #16]
 800523a:	4638      	mov	r0, r7
 800523c:	f001 f8d4 	bl	80063e8 <__mcmp>
 8005240:	2800      	cmp	r0, #0
 8005242:	db25      	blt.n	8005290 <quorem+0xf4>
 8005244:	4628      	mov	r0, r5
 8005246:	f04f 0c00 	mov.w	ip, #0
 800524a:	3601      	adds	r6, #1
 800524c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005250:	f8d0 e000 	ldr.w	lr, [r0]
 8005254:	b28b      	uxth	r3, r1
 8005256:	ebac 0303 	sub.w	r3, ip, r3
 800525a:	fa1f f28e 	uxth.w	r2, lr
 800525e:	4413      	add	r3, r2
 8005260:	0c0a      	lsrs	r2, r1, #16
 8005262:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005270:	45c1      	cmp	r9, r8
 8005272:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005276:	f840 3b04 	str.w	r3, [r0], #4
 800527a:	d2e7      	bcs.n	800524c <quorem+0xb0>
 800527c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005284:	b922      	cbnz	r2, 8005290 <quorem+0xf4>
 8005286:	3b04      	subs	r3, #4
 8005288:	429d      	cmp	r5, r3
 800528a:	461a      	mov	r2, r3
 800528c:	d30a      	bcc.n	80052a4 <quorem+0x108>
 800528e:	613c      	str	r4, [r7, #16]
 8005290:	4630      	mov	r0, r6
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	3b04      	subs	r3, #4
 800529c:	2a00      	cmp	r2, #0
 800529e:	d1cb      	bne.n	8005238 <quorem+0x9c>
 80052a0:	3c01      	subs	r4, #1
 80052a2:	e7c6      	b.n	8005232 <quorem+0x96>
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	3b04      	subs	r3, #4
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d1f0      	bne.n	800528e <quorem+0xf2>
 80052ac:	3c01      	subs	r4, #1
 80052ae:	e7eb      	b.n	8005288 <quorem+0xec>
 80052b0:	2000      	movs	r0, #0
 80052b2:	e7ee      	b.n	8005292 <quorem+0xf6>
 80052b4:	0000      	movs	r0, r0
	...

080052b8 <_dtoa_r>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	461f      	mov	r7, r3
 80052c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052c2:	b099      	sub	sp, #100	; 0x64
 80052c4:	4605      	mov	r5, r0
 80052c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052ce:	b974      	cbnz	r4, 80052ee <_dtoa_r+0x36>
 80052d0:	2010      	movs	r0, #16
 80052d2:	f7ff f9e7 	bl	80046a4 <malloc>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6268      	str	r0, [r5, #36]	; 0x24
 80052da:	b920      	cbnz	r0, 80052e6 <_dtoa_r+0x2e>
 80052dc:	21ea      	movs	r1, #234	; 0xea
 80052de:	4ba8      	ldr	r3, [pc, #672]	; (8005580 <_dtoa_r+0x2c8>)
 80052e0:	48a8      	ldr	r0, [pc, #672]	; (8005584 <_dtoa_r+0x2cc>)
 80052e2:	f001 faf5 	bl	80068d0 <__assert_func>
 80052e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ea:	6004      	str	r4, [r0, #0]
 80052ec:	60c4      	str	r4, [r0, #12]
 80052ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	b151      	cbz	r1, 800530a <_dtoa_r+0x52>
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	2301      	movs	r3, #1
 80052f8:	4093      	lsls	r3, r2
 80052fa:	604a      	str	r2, [r1, #4]
 80052fc:	608b      	str	r3, [r1, #8]
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fe34 	bl	8005f6c <_Bfree>
 8005304:	2200      	movs	r2, #0
 8005306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	1e3b      	subs	r3, r7, #0
 800530c:	bfaf      	iteee	ge
 800530e:	2300      	movge	r3, #0
 8005310:	2201      	movlt	r2, #1
 8005312:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005316:	9305      	strlt	r3, [sp, #20]
 8005318:	bfa8      	it	ge
 800531a:	f8c8 3000 	strge.w	r3, [r8]
 800531e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005322:	4b99      	ldr	r3, [pc, #612]	; (8005588 <_dtoa_r+0x2d0>)
 8005324:	bfb8      	it	lt
 8005326:	f8c8 2000 	strlt.w	r2, [r8]
 800532a:	ea33 0309 	bics.w	r3, r3, r9
 800532e:	d119      	bne.n	8005364 <_dtoa_r+0xac>
 8005330:	f242 730f 	movw	r3, #9999	; 0x270f
 8005334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800533c:	4333      	orrs	r3, r6
 800533e:	f000 857f 	beq.w	8005e40 <_dtoa_r+0xb88>
 8005342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005344:	b953      	cbnz	r3, 800535c <_dtoa_r+0xa4>
 8005346:	4b91      	ldr	r3, [pc, #580]	; (800558c <_dtoa_r+0x2d4>)
 8005348:	e022      	b.n	8005390 <_dtoa_r+0xd8>
 800534a:	4b91      	ldr	r3, [pc, #580]	; (8005590 <_dtoa_r+0x2d8>)
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	3308      	adds	r3, #8
 8005350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	9803      	ldr	r0, [sp, #12]
 8005356:	b019      	add	sp, #100	; 0x64
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	4b8b      	ldr	r3, [pc, #556]	; (800558c <_dtoa_r+0x2d4>)
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	3303      	adds	r3, #3
 8005362:	e7f5      	b.n	8005350 <_dtoa_r+0x98>
 8005364:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005368:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800536c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	f7fb fb84 	bl	8000a80 <__aeabi_dcmpeq>
 8005378:	4680      	mov	r8, r0
 800537a:	b158      	cbz	r0, 8005394 <_dtoa_r+0xdc>
 800537c:	2301      	movs	r3, #1
 800537e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8558 	beq.w	8005e3a <_dtoa_r+0xb82>
 800538a:	4882      	ldr	r0, [pc, #520]	; (8005594 <_dtoa_r+0x2dc>)
 800538c:	6018      	str	r0, [r3, #0]
 800538e:	1e43      	subs	r3, r0, #1
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	e7df      	b.n	8005354 <_dtoa_r+0x9c>
 8005394:	ab16      	add	r3, sp, #88	; 0x58
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	ab17      	add	r3, sp, #92	; 0x5c
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	4628      	mov	r0, r5
 800539e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053a2:	f001 f8c9 	bl	8006538 <__d2b>
 80053a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053aa:	4683      	mov	fp, r0
 80053ac:	2c00      	cmp	r4, #0
 80053ae:	d07f      	beq.n	80054b0 <_dtoa_r+0x1f8>
 80053b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80053ca:	2200      	movs	r2, #0
 80053cc:	4b72      	ldr	r3, [pc, #456]	; (8005598 <_dtoa_r+0x2e0>)
 80053ce:	f7fa ff37 	bl	8000240 <__aeabi_dsub>
 80053d2:	a365      	add	r3, pc, #404	; (adr r3, 8005568 <_dtoa_r+0x2b0>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f8ea 	bl	80005b0 <__aeabi_dmul>
 80053dc:	a364      	add	r3, pc, #400	; (adr r3, 8005570 <_dtoa_r+0x2b8>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa ff2f 	bl	8000244 <__adddf3>
 80053e6:	4606      	mov	r6, r0
 80053e8:	4620      	mov	r0, r4
 80053ea:	460f      	mov	r7, r1
 80053ec:	f7fb f876 	bl	80004dc <__aeabi_i2d>
 80053f0:	a361      	add	r3, pc, #388	; (adr r3, 8005578 <_dtoa_r+0x2c0>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f8db 	bl	80005b0 <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4630      	mov	r0, r6
 8005400:	4639      	mov	r1, r7
 8005402:	f7fa ff1f 	bl	8000244 <__adddf3>
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	f7fb fb81 	bl	8000b10 <__aeabi_d2iz>
 800540e:	2200      	movs	r2, #0
 8005410:	4682      	mov	sl, r0
 8005412:	2300      	movs	r3, #0
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fb fb3c 	bl	8000a94 <__aeabi_dcmplt>
 800541c:	b148      	cbz	r0, 8005432 <_dtoa_r+0x17a>
 800541e:	4650      	mov	r0, sl
 8005420:	f7fb f85c 	bl	80004dc <__aeabi_i2d>
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	f7fb fb2a 	bl	8000a80 <__aeabi_dcmpeq>
 800542c:	b908      	cbnz	r0, 8005432 <_dtoa_r+0x17a>
 800542e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005432:	f1ba 0f16 	cmp.w	sl, #22
 8005436:	d858      	bhi.n	80054ea <_dtoa_r+0x232>
 8005438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800543c:	4b57      	ldr	r3, [pc, #348]	; (800559c <_dtoa_r+0x2e4>)
 800543e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb fb25 	bl	8000a94 <__aeabi_dcmplt>
 800544a:	2800      	cmp	r0, #0
 800544c:	d04f      	beq.n	80054ee <_dtoa_r+0x236>
 800544e:	2300      	movs	r3, #0
 8005450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005454:	930f      	str	r3, [sp, #60]	; 0x3c
 8005456:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005458:	1b1c      	subs	r4, r3, r4
 800545a:	1e63      	subs	r3, r4, #1
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	bf49      	itett	mi
 8005460:	f1c4 0301 	rsbmi	r3, r4, #1
 8005464:	2300      	movpl	r3, #0
 8005466:	9306      	strmi	r3, [sp, #24]
 8005468:	2300      	movmi	r3, #0
 800546a:	bf54      	ite	pl
 800546c:	9306      	strpl	r3, [sp, #24]
 800546e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005470:	f1ba 0f00 	cmp.w	sl, #0
 8005474:	db3d      	blt.n	80054f2 <_dtoa_r+0x23a>
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800547c:	4453      	add	r3, sl
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	2300      	movs	r3, #0
 8005482:	930a      	str	r3, [sp, #40]	; 0x28
 8005484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005486:	2b09      	cmp	r3, #9
 8005488:	f200 808c 	bhi.w	80055a4 <_dtoa_r+0x2ec>
 800548c:	2b05      	cmp	r3, #5
 800548e:	bfc4      	itt	gt
 8005490:	3b04      	subgt	r3, #4
 8005492:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005496:	bfc8      	it	gt
 8005498:	2400      	movgt	r4, #0
 800549a:	f1a3 0302 	sub.w	r3, r3, #2
 800549e:	bfd8      	it	le
 80054a0:	2401      	movle	r4, #1
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	f200 808a 	bhi.w	80055bc <_dtoa_r+0x304>
 80054a8:	e8df f003 	tbb	[pc, r3]
 80054ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80054b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054b4:	441c      	add	r4, r3
 80054b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	bfc3      	ittte	gt
 80054be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80054ca:	f1c3 0320 	rsble	r3, r3, #32
 80054ce:	bfc6      	itte	gt
 80054d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054d4:	4318      	orrgt	r0, r3
 80054d6:	fa06 f003 	lslle.w	r0, r6, r3
 80054da:	f7fa ffef 	bl	80004bc <__aeabi_ui2d>
 80054de:	2301      	movs	r3, #1
 80054e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054e4:	3c01      	subs	r4, #1
 80054e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80054e8:	e76f      	b.n	80053ca <_dtoa_r+0x112>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e7b2      	b.n	8005454 <_dtoa_r+0x19c>
 80054ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80054f0:	e7b1      	b.n	8005456 <_dtoa_r+0x19e>
 80054f2:	9b06      	ldr	r3, [sp, #24]
 80054f4:	eba3 030a 	sub.w	r3, r3, sl
 80054f8:	9306      	str	r3, [sp, #24]
 80054fa:	f1ca 0300 	rsb	r3, sl, #0
 80054fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005500:	2300      	movs	r3, #0
 8005502:	930e      	str	r3, [sp, #56]	; 0x38
 8005504:	e7be      	b.n	8005484 <_dtoa_r+0x1cc>
 8005506:	2300      	movs	r3, #0
 8005508:	930b      	str	r3, [sp, #44]	; 0x2c
 800550a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800550c:	2b00      	cmp	r3, #0
 800550e:	dc58      	bgt.n	80055c2 <_dtoa_r+0x30a>
 8005510:	f04f 0901 	mov.w	r9, #1
 8005514:	464b      	mov	r3, r9
 8005516:	f8cd 9020 	str.w	r9, [sp, #32]
 800551a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800551e:	2200      	movs	r2, #0
 8005520:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005522:	6042      	str	r2, [r0, #4]
 8005524:	2204      	movs	r2, #4
 8005526:	f102 0614 	add.w	r6, r2, #20
 800552a:	429e      	cmp	r6, r3
 800552c:	6841      	ldr	r1, [r0, #4]
 800552e:	d94e      	bls.n	80055ce <_dtoa_r+0x316>
 8005530:	4628      	mov	r0, r5
 8005532:	f000 fcdb 	bl	8005eec <_Balloc>
 8005536:	9003      	str	r0, [sp, #12]
 8005538:	2800      	cmp	r0, #0
 800553a:	d14c      	bne.n	80055d6 <_dtoa_r+0x31e>
 800553c:	4602      	mov	r2, r0
 800553e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <_dtoa_r+0x2e8>)
 8005544:	e6cc      	b.n	80052e0 <_dtoa_r+0x28>
 8005546:	2301      	movs	r3, #1
 8005548:	e7de      	b.n	8005508 <_dtoa_r+0x250>
 800554a:	2300      	movs	r3, #0
 800554c:	930b      	str	r3, [sp, #44]	; 0x2c
 800554e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005550:	eb0a 0903 	add.w	r9, sl, r3
 8005554:	f109 0301 	add.w	r3, r9, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	9308      	str	r3, [sp, #32]
 800555c:	bfb8      	it	lt
 800555e:	2301      	movlt	r3, #1
 8005560:	e7dd      	b.n	800551e <_dtoa_r+0x266>
 8005562:	2301      	movs	r3, #1
 8005564:	e7f2      	b.n	800554c <_dtoa_r+0x294>
 8005566:	bf00      	nop
 8005568:	636f4361 	.word	0x636f4361
 800556c:	3fd287a7 	.word	0x3fd287a7
 8005570:	8b60c8b3 	.word	0x8b60c8b3
 8005574:	3fc68a28 	.word	0x3fc68a28
 8005578:	509f79fb 	.word	0x509f79fb
 800557c:	3fd34413 	.word	0x3fd34413
 8005580:	08007e4d 	.word	0x08007e4d
 8005584:	08007e64 	.word	0x08007e64
 8005588:	7ff00000 	.word	0x7ff00000
 800558c:	08007e49 	.word	0x08007e49
 8005590:	08007e40 	.word	0x08007e40
 8005594:	08007e1d 	.word	0x08007e1d
 8005598:	3ff80000 	.word	0x3ff80000
 800559c:	08007f58 	.word	0x08007f58
 80055a0:	08007ebf 	.word	0x08007ebf
 80055a4:	2401      	movs	r4, #1
 80055a6:	2300      	movs	r3, #0
 80055a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80055aa:	9322      	str	r3, [sp, #136]	; 0x88
 80055ac:	f04f 39ff 	mov.w	r9, #4294967295
 80055b0:	2200      	movs	r2, #0
 80055b2:	2312      	movs	r3, #18
 80055b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80055b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80055ba:	e7b0      	b.n	800551e <_dtoa_r+0x266>
 80055bc:	2301      	movs	r3, #1
 80055be:	930b      	str	r3, [sp, #44]	; 0x2c
 80055c0:	e7f4      	b.n	80055ac <_dtoa_r+0x2f4>
 80055c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80055c6:	464b      	mov	r3, r9
 80055c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80055cc:	e7a7      	b.n	800551e <_dtoa_r+0x266>
 80055ce:	3101      	adds	r1, #1
 80055d0:	6041      	str	r1, [r0, #4]
 80055d2:	0052      	lsls	r2, r2, #1
 80055d4:	e7a7      	b.n	8005526 <_dtoa_r+0x26e>
 80055d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055d8:	9a03      	ldr	r2, [sp, #12]
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	9b08      	ldr	r3, [sp, #32]
 80055de:	2b0e      	cmp	r3, #14
 80055e0:	f200 80a8 	bhi.w	8005734 <_dtoa_r+0x47c>
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	f000 80a5 	beq.w	8005734 <_dtoa_r+0x47c>
 80055ea:	f1ba 0f00 	cmp.w	sl, #0
 80055ee:	dd34      	ble.n	800565a <_dtoa_r+0x3a2>
 80055f0:	4a9a      	ldr	r2, [pc, #616]	; (800585c <_dtoa_r+0x5a4>)
 80055f2:	f00a 030f 	and.w	r3, sl, #15
 80055f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80055fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005602:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005606:	ea4f 142a 	mov.w	r4, sl, asr #4
 800560a:	d016      	beq.n	800563a <_dtoa_r+0x382>
 800560c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005610:	4b93      	ldr	r3, [pc, #588]	; (8005860 <_dtoa_r+0x5a8>)
 8005612:	2703      	movs	r7, #3
 8005614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005618:	f7fb f8f4 	bl	8000804 <__aeabi_ddiv>
 800561c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005620:	f004 040f 	and.w	r4, r4, #15
 8005624:	4e8e      	ldr	r6, [pc, #568]	; (8005860 <_dtoa_r+0x5a8>)
 8005626:	b954      	cbnz	r4, 800563e <_dtoa_r+0x386>
 8005628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800562c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005630:	f7fb f8e8 	bl	8000804 <__aeabi_ddiv>
 8005634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005638:	e029      	b.n	800568e <_dtoa_r+0x3d6>
 800563a:	2702      	movs	r7, #2
 800563c:	e7f2      	b.n	8005624 <_dtoa_r+0x36c>
 800563e:	07e1      	lsls	r1, r4, #31
 8005640:	d508      	bpl.n	8005654 <_dtoa_r+0x39c>
 8005642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005646:	e9d6 2300 	ldrd	r2, r3, [r6]
 800564a:	f7fa ffb1 	bl	80005b0 <__aeabi_dmul>
 800564e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005652:	3701      	adds	r7, #1
 8005654:	1064      	asrs	r4, r4, #1
 8005656:	3608      	adds	r6, #8
 8005658:	e7e5      	b.n	8005626 <_dtoa_r+0x36e>
 800565a:	f000 80a5 	beq.w	80057a8 <_dtoa_r+0x4f0>
 800565e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005662:	f1ca 0400 	rsb	r4, sl, #0
 8005666:	4b7d      	ldr	r3, [pc, #500]	; (800585c <_dtoa_r+0x5a4>)
 8005668:	f004 020f 	and.w	r2, r4, #15
 800566c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa ff9c 	bl	80005b0 <__aeabi_dmul>
 8005678:	2702      	movs	r7, #2
 800567a:	2300      	movs	r3, #0
 800567c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005680:	4e77      	ldr	r6, [pc, #476]	; (8005860 <_dtoa_r+0x5a8>)
 8005682:	1124      	asrs	r4, r4, #4
 8005684:	2c00      	cmp	r4, #0
 8005686:	f040 8084 	bne.w	8005792 <_dtoa_r+0x4da>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d2      	bne.n	8005634 <_dtoa_r+0x37c>
 800568e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 808b 	beq.w	80057ac <_dtoa_r+0x4f4>
 8005696:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800569a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800569e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056a2:	2200      	movs	r2, #0
 80056a4:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <_dtoa_r+0x5ac>)
 80056a6:	f7fb f9f5 	bl	8000a94 <__aeabi_dcmplt>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d07e      	beq.n	80057ac <_dtoa_r+0x4f4>
 80056ae:	9b08      	ldr	r3, [sp, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d07b      	beq.n	80057ac <_dtoa_r+0x4f4>
 80056b4:	f1b9 0f00 	cmp.w	r9, #0
 80056b8:	dd38      	ble.n	800572c <_dtoa_r+0x474>
 80056ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056be:	2200      	movs	r2, #0
 80056c0:	4b69      	ldr	r3, [pc, #420]	; (8005868 <_dtoa_r+0x5b0>)
 80056c2:	f7fa ff75 	bl	80005b0 <__aeabi_dmul>
 80056c6:	464c      	mov	r4, r9
 80056c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80056d0:	3701      	adds	r7, #1
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7fa ff02 	bl	80004dc <__aeabi_i2d>
 80056d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056dc:	f7fa ff68 	bl	80005b0 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	4b62      	ldr	r3, [pc, #392]	; (800586c <_dtoa_r+0x5b4>)
 80056e4:	f7fa fdae 	bl	8000244 <__adddf3>
 80056e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f0:	9611      	str	r6, [sp, #68]	; 0x44
 80056f2:	2c00      	cmp	r4, #0
 80056f4:	d15d      	bne.n	80057b2 <_dtoa_r+0x4fa>
 80056f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <_dtoa_r+0x5b8>)
 80056fe:	f7fa fd9f 	bl	8000240 <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800570a:	4633      	mov	r3, r6
 800570c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800570e:	f7fb f9df 	bl	8000ad0 <__aeabi_dcmpgt>
 8005712:	2800      	cmp	r0, #0
 8005714:	f040 829c 	bne.w	8005c50 <_dtoa_r+0x998>
 8005718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800571c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800571e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005722:	f7fb f9b7 	bl	8000a94 <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f040 8290 	bne.w	8005c4c <_dtoa_r+0x994>
 800572c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005736:	2b00      	cmp	r3, #0
 8005738:	f2c0 8152 	blt.w	80059e0 <_dtoa_r+0x728>
 800573c:	f1ba 0f0e 	cmp.w	sl, #14
 8005740:	f300 814e 	bgt.w	80059e0 <_dtoa_r+0x728>
 8005744:	4b45      	ldr	r3, [pc, #276]	; (800585c <_dtoa_r+0x5a4>)
 8005746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800574a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800574e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005754:	2b00      	cmp	r3, #0
 8005756:	f280 80db 	bge.w	8005910 <_dtoa_r+0x658>
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f300 80d7 	bgt.w	8005910 <_dtoa_r+0x658>
 8005762:	f040 8272 	bne.w	8005c4a <_dtoa_r+0x992>
 8005766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800576a:	2200      	movs	r2, #0
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <_dtoa_r+0x5b8>)
 800576e:	f7fa ff1f 	bl	80005b0 <__aeabi_dmul>
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	f7fb f9a1 	bl	8000abc <__aeabi_dcmpge>
 800577a:	9c08      	ldr	r4, [sp, #32]
 800577c:	4626      	mov	r6, r4
 800577e:	2800      	cmp	r0, #0
 8005780:	f040 8248 	bne.w	8005c14 <_dtoa_r+0x95c>
 8005784:	2331      	movs	r3, #49	; 0x31
 8005786:	9f03      	ldr	r7, [sp, #12]
 8005788:	f10a 0a01 	add.w	sl, sl, #1
 800578c:	f807 3b01 	strb.w	r3, [r7], #1
 8005790:	e244      	b.n	8005c1c <_dtoa_r+0x964>
 8005792:	07e2      	lsls	r2, r4, #31
 8005794:	d505      	bpl.n	80057a2 <_dtoa_r+0x4ea>
 8005796:	e9d6 2300 	ldrd	r2, r3, [r6]
 800579a:	f7fa ff09 	bl	80005b0 <__aeabi_dmul>
 800579e:	2301      	movs	r3, #1
 80057a0:	3701      	adds	r7, #1
 80057a2:	1064      	asrs	r4, r4, #1
 80057a4:	3608      	adds	r6, #8
 80057a6:	e76d      	b.n	8005684 <_dtoa_r+0x3cc>
 80057a8:	2702      	movs	r7, #2
 80057aa:	e770      	b.n	800568e <_dtoa_r+0x3d6>
 80057ac:	46d0      	mov	r8, sl
 80057ae:	9c08      	ldr	r4, [sp, #32]
 80057b0:	e78f      	b.n	80056d2 <_dtoa_r+0x41a>
 80057b2:	9903      	ldr	r1, [sp, #12]
 80057b4:	4b29      	ldr	r3, [pc, #164]	; (800585c <_dtoa_r+0x5a4>)
 80057b6:	4421      	add	r1, r4
 80057b8:	9112      	str	r1, [sp, #72]	; 0x48
 80057ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d055      	beq.n	8005878 <_dtoa_r+0x5c0>
 80057cc:	2000      	movs	r0, #0
 80057ce:	4929      	ldr	r1, [pc, #164]	; (8005874 <_dtoa_r+0x5bc>)
 80057d0:	f7fb f818 	bl	8000804 <__aeabi_ddiv>
 80057d4:	463b      	mov	r3, r7
 80057d6:	4632      	mov	r2, r6
 80057d8:	f7fa fd32 	bl	8000240 <__aeabi_dsub>
 80057dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e0:	9f03      	ldr	r7, [sp, #12]
 80057e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e6:	f7fb f993 	bl	8000b10 <__aeabi_d2iz>
 80057ea:	4604      	mov	r4, r0
 80057ec:	f7fa fe76 	bl	80004dc <__aeabi_i2d>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f8:	f7fa fd22 	bl	8000240 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	3430      	adds	r4, #48	; 0x30
 8005802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800580a:	f807 4b01 	strb.w	r4, [r7], #1
 800580e:	f7fb f941 	bl	8000a94 <__aeabi_dcmplt>
 8005812:	2800      	cmp	r0, #0
 8005814:	d174      	bne.n	8005900 <_dtoa_r+0x648>
 8005816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581a:	2000      	movs	r0, #0
 800581c:	4911      	ldr	r1, [pc, #68]	; (8005864 <_dtoa_r+0x5ac>)
 800581e:	f7fa fd0f 	bl	8000240 <__aeabi_dsub>
 8005822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005826:	f7fb f935 	bl	8000a94 <__aeabi_dcmplt>
 800582a:	2800      	cmp	r0, #0
 800582c:	f040 80b7 	bne.w	800599e <_dtoa_r+0x6e6>
 8005830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005832:	429f      	cmp	r7, r3
 8005834:	f43f af7a 	beq.w	800572c <_dtoa_r+0x474>
 8005838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800583c:	2200      	movs	r2, #0
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <_dtoa_r+0x5b0>)
 8005840:	f7fa feb6 	bl	80005b0 <__aeabi_dmul>
 8005844:	2200      	movs	r2, #0
 8005846:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800584a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <_dtoa_r+0x5b0>)
 8005850:	f7fa feae 	bl	80005b0 <__aeabi_dmul>
 8005854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005858:	e7c3      	b.n	80057e2 <_dtoa_r+0x52a>
 800585a:	bf00      	nop
 800585c:	08007f58 	.word	0x08007f58
 8005860:	08007f30 	.word	0x08007f30
 8005864:	3ff00000 	.word	0x3ff00000
 8005868:	40240000 	.word	0x40240000
 800586c:	401c0000 	.word	0x401c0000
 8005870:	40140000 	.word	0x40140000
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fe98 	bl	80005b0 <__aeabi_dmul>
 8005880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005886:	9c03      	ldr	r4, [sp, #12]
 8005888:	9314      	str	r3, [sp, #80]	; 0x50
 800588a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588e:	f7fb f93f 	bl	8000b10 <__aeabi_d2iz>
 8005892:	9015      	str	r0, [sp, #84]	; 0x54
 8005894:	f7fa fe22 	bl	80004dc <__aeabi_i2d>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a0:	f7fa fcce 	bl	8000240 <__aeabi_dsub>
 80058a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058a6:	4606      	mov	r6, r0
 80058a8:	3330      	adds	r3, #48	; 0x30
 80058aa:	f804 3b01 	strb.w	r3, [r4], #1
 80058ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058b0:	460f      	mov	r7, r1
 80058b2:	429c      	cmp	r4, r3
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	d124      	bne.n	8005904 <_dtoa_r+0x64c>
 80058ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058be:	4bb0      	ldr	r3, [pc, #704]	; (8005b80 <_dtoa_r+0x8c8>)
 80058c0:	f7fa fcc0 	bl	8000244 <__adddf3>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fb f900 	bl	8000ad0 <__aeabi_dcmpgt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d163      	bne.n	800599c <_dtoa_r+0x6e4>
 80058d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058d8:	2000      	movs	r0, #0
 80058da:	49a9      	ldr	r1, [pc, #676]	; (8005b80 <_dtoa_r+0x8c8>)
 80058dc:	f7fa fcb0 	bl	8000240 <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4630      	mov	r0, r6
 80058e6:	4639      	mov	r1, r7
 80058e8:	f7fb f8d4 	bl	8000a94 <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f43f af1d 	beq.w	800572c <_dtoa_r+0x474>
 80058f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058f4:	1e7b      	subs	r3, r7, #1
 80058f6:	9314      	str	r3, [sp, #80]	; 0x50
 80058f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d0f8      	beq.n	80058f2 <_dtoa_r+0x63a>
 8005900:	46c2      	mov	sl, r8
 8005902:	e03b      	b.n	800597c <_dtoa_r+0x6c4>
 8005904:	4b9f      	ldr	r3, [pc, #636]	; (8005b84 <_dtoa_r+0x8cc>)
 8005906:	f7fa fe53 	bl	80005b0 <__aeabi_dmul>
 800590a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800590e:	e7bc      	b.n	800588a <_dtoa_r+0x5d2>
 8005910:	9f03      	ldr	r7, [sp, #12]
 8005912:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa ff71 	bl	8000804 <__aeabi_ddiv>
 8005922:	f7fb f8f5 	bl	8000b10 <__aeabi_d2iz>
 8005926:	4604      	mov	r4, r0
 8005928:	f7fa fdd8 	bl	80004dc <__aeabi_i2d>
 800592c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005930:	f7fa fe3e 	bl	80005b0 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4640      	mov	r0, r8
 800593a:	4649      	mov	r1, r9
 800593c:	f7fa fc80 	bl	8000240 <__aeabi_dsub>
 8005940:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005944:	f807 6b01 	strb.w	r6, [r7], #1
 8005948:	9e03      	ldr	r6, [sp, #12]
 800594a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800594e:	1bbe      	subs	r6, r7, r6
 8005950:	45b4      	cmp	ip, r6
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	d136      	bne.n	80059c6 <_dtoa_r+0x70e>
 8005958:	f7fa fc74 	bl	8000244 <__adddf3>
 800595c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005960:	4680      	mov	r8, r0
 8005962:	4689      	mov	r9, r1
 8005964:	f7fb f8b4 	bl	8000ad0 <__aeabi_dcmpgt>
 8005968:	bb58      	cbnz	r0, 80059c2 <_dtoa_r+0x70a>
 800596a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800596e:	4640      	mov	r0, r8
 8005970:	4649      	mov	r1, r9
 8005972:	f7fb f885 	bl	8000a80 <__aeabi_dcmpeq>
 8005976:	b108      	cbz	r0, 800597c <_dtoa_r+0x6c4>
 8005978:	07e1      	lsls	r1, r4, #31
 800597a:	d422      	bmi.n	80059c2 <_dtoa_r+0x70a>
 800597c:	4628      	mov	r0, r5
 800597e:	4659      	mov	r1, fp
 8005980:	f000 faf4 	bl	8005f6c <_Bfree>
 8005984:	2300      	movs	r3, #0
 8005986:	703b      	strb	r3, [r7, #0]
 8005988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800598a:	f10a 0001 	add.w	r0, sl, #1
 800598e:	6018      	str	r0, [r3, #0]
 8005990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005992:	2b00      	cmp	r3, #0
 8005994:	f43f acde 	beq.w	8005354 <_dtoa_r+0x9c>
 8005998:	601f      	str	r7, [r3, #0]
 800599a:	e4db      	b.n	8005354 <_dtoa_r+0x9c>
 800599c:	4627      	mov	r7, r4
 800599e:	463b      	mov	r3, r7
 80059a0:	461f      	mov	r7, r3
 80059a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059a6:	2a39      	cmp	r2, #57	; 0x39
 80059a8:	d107      	bne.n	80059ba <_dtoa_r+0x702>
 80059aa:	9a03      	ldr	r2, [sp, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1f7      	bne.n	80059a0 <_dtoa_r+0x6e8>
 80059b0:	2230      	movs	r2, #48	; 0x30
 80059b2:	9903      	ldr	r1, [sp, #12]
 80059b4:	f108 0801 	add.w	r8, r8, #1
 80059b8:	700a      	strb	r2, [r1, #0]
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	3201      	adds	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e79e      	b.n	8005900 <_dtoa_r+0x648>
 80059c2:	46d0      	mov	r8, sl
 80059c4:	e7eb      	b.n	800599e <_dtoa_r+0x6e6>
 80059c6:	2200      	movs	r2, #0
 80059c8:	4b6e      	ldr	r3, [pc, #440]	; (8005b84 <_dtoa_r+0x8cc>)
 80059ca:	f7fa fdf1 	bl	80005b0 <__aeabi_dmul>
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4680      	mov	r8, r0
 80059d4:	4689      	mov	r9, r1
 80059d6:	f7fb f853 	bl	8000a80 <__aeabi_dcmpeq>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d09b      	beq.n	8005916 <_dtoa_r+0x65e>
 80059de:	e7cd      	b.n	800597c <_dtoa_r+0x6c4>
 80059e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	f000 80d0 	beq.w	8005b88 <_dtoa_r+0x8d0>
 80059e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059ea:	2a01      	cmp	r2, #1
 80059ec:	f300 80ae 	bgt.w	8005b4c <_dtoa_r+0x894>
 80059f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	f000 80a6 	beq.w	8005b44 <_dtoa_r+0x88c>
 80059f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059fe:	9f06      	ldr	r7, [sp, #24]
 8005a00:	9a06      	ldr	r2, [sp, #24]
 8005a02:	2101      	movs	r1, #1
 8005a04:	441a      	add	r2, r3
 8005a06:	9206      	str	r2, [sp, #24]
 8005a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	441a      	add	r2, r3
 8005a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a10:	f000 fb62 	bl	80060d8 <__i2b>
 8005a14:	4606      	mov	r6, r0
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	dd0c      	ble.n	8005a34 <_dtoa_r+0x77c>
 8005a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dd09      	ble.n	8005a34 <_dtoa_r+0x77c>
 8005a20:	42bb      	cmp	r3, r7
 8005a22:	bfa8      	it	ge
 8005a24:	463b      	movge	r3, r7
 8005a26:	9a06      	ldr	r2, [sp, #24]
 8005a28:	1aff      	subs	r7, r7, r3
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	9206      	str	r2, [sp, #24]
 8005a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	9309      	str	r3, [sp, #36]	; 0x24
 8005a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a36:	b1f3      	cbz	r3, 8005a76 <_dtoa_r+0x7be>
 8005a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80a8 	beq.w	8005b90 <_dtoa_r+0x8d8>
 8005a40:	2c00      	cmp	r4, #0
 8005a42:	dd10      	ble.n	8005a66 <_dtoa_r+0x7ae>
 8005a44:	4631      	mov	r1, r6
 8005a46:	4622      	mov	r2, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 fc03 	bl	8006254 <__pow5mult>
 8005a4e:	465a      	mov	r2, fp
 8005a50:	4601      	mov	r1, r0
 8005a52:	4606      	mov	r6, r0
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 fb55 	bl	8006104 <__multiply>
 8005a5a:	4680      	mov	r8, r0
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 fa84 	bl	8005f6c <_Bfree>
 8005a64:	46c3      	mov	fp, r8
 8005a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a68:	1b1a      	subs	r2, r3, r4
 8005a6a:	d004      	beq.n	8005a76 <_dtoa_r+0x7be>
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 fbf0 	bl	8006254 <__pow5mult>
 8005a74:	4683      	mov	fp, r0
 8005a76:	2101      	movs	r1, #1
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fb2d 	bl	80060d8 <__i2b>
 8005a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a80:	4604      	mov	r4, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f340 8086 	ble.w	8005b94 <_dtoa_r+0x8dc>
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 fbe1 	bl	8006254 <__pow5mult>
 8005a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a94:	4604      	mov	r4, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	dd7f      	ble.n	8005b9a <_dtoa_r+0x8e2>
 8005a9a:	f04f 0800 	mov.w	r8, #0
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005aa4:	6918      	ldr	r0, [r3, #16]
 8005aa6:	f000 fac9 	bl	800603c <__hi0bits>
 8005aaa:	f1c0 0020 	rsb	r0, r0, #32
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	4418      	add	r0, r3
 8005ab2:	f010 001f 	ands.w	r0, r0, #31
 8005ab6:	f000 8092 	beq.w	8005bde <_dtoa_r+0x926>
 8005aba:	f1c0 0320 	rsb	r3, r0, #32
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	f340 808a 	ble.w	8005bd8 <_dtoa_r+0x920>
 8005ac4:	f1c0 001c 	rsb	r0, r0, #28
 8005ac8:	9b06      	ldr	r3, [sp, #24]
 8005aca:	4407      	add	r7, r0
 8005acc:	4403      	add	r3, r0
 8005ace:	9306      	str	r3, [sp, #24]
 8005ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad2:	4403      	add	r3, r0
 8005ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad6:	9b06      	ldr	r3, [sp, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dd05      	ble.n	8005ae8 <_dtoa_r+0x830>
 8005adc:	4659      	mov	r1, fp
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 fc11 	bl	8006308 <__lshift>
 8005ae6:	4683      	mov	fp, r0
 8005ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dd05      	ble.n	8005afa <_dtoa_r+0x842>
 8005aee:	4621      	mov	r1, r4
 8005af0:	461a      	mov	r2, r3
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 fc08 	bl	8006308 <__lshift>
 8005af8:	4604      	mov	r4, r0
 8005afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d070      	beq.n	8005be2 <_dtoa_r+0x92a>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4658      	mov	r0, fp
 8005b04:	f000 fc70 	bl	80063e8 <__mcmp>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	da6a      	bge.n	8005be2 <_dtoa_r+0x92a>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4659      	mov	r1, fp
 8005b10:	220a      	movs	r2, #10
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fa4c 	bl	8005fb0 <__multadd>
 8005b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1a:	4683      	mov	fp, r0
 8005b1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8194 	beq.w	8005e4e <_dtoa_r+0xb96>
 8005b26:	4631      	mov	r1, r6
 8005b28:	2300      	movs	r3, #0
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 fa3f 	bl	8005fb0 <__multadd>
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	4606      	mov	r6, r0
 8005b38:	f300 8093 	bgt.w	8005c62 <_dtoa_r+0x9aa>
 8005b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	dc57      	bgt.n	8005bf2 <_dtoa_r+0x93a>
 8005b42:	e08e      	b.n	8005c62 <_dtoa_r+0x9aa>
 8005b44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b4a:	e757      	b.n	80059fc <_dtoa_r+0x744>
 8005b4c:	9b08      	ldr	r3, [sp, #32]
 8005b4e:	1e5c      	subs	r4, r3, #1
 8005b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	bfb7      	itett	lt
 8005b56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b58:	1b1c      	subge	r4, r3, r4
 8005b5a:	1ae2      	sublt	r2, r4, r3
 8005b5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b5e:	bfbe      	ittt	lt
 8005b60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b62:	189b      	addlt	r3, r3, r2
 8005b64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b66:	9b08      	ldr	r3, [sp, #32]
 8005b68:	bfb8      	it	lt
 8005b6a:	2400      	movlt	r4, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbb      	ittet	lt
 8005b70:	9b06      	ldrlt	r3, [sp, #24]
 8005b72:	9a08      	ldrlt	r2, [sp, #32]
 8005b74:	9f06      	ldrge	r7, [sp, #24]
 8005b76:	1a9f      	sublt	r7, r3, r2
 8005b78:	bfac      	ite	ge
 8005b7a:	9b08      	ldrge	r3, [sp, #32]
 8005b7c:	2300      	movlt	r3, #0
 8005b7e:	e73f      	b.n	8005a00 <_dtoa_r+0x748>
 8005b80:	3fe00000 	.word	0x3fe00000
 8005b84:	40240000 	.word	0x40240000
 8005b88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b8a:	9f06      	ldr	r7, [sp, #24]
 8005b8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b8e:	e742      	b.n	8005a16 <_dtoa_r+0x75e>
 8005b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b92:	e76b      	b.n	8005a6c <_dtoa_r+0x7b4>
 8005b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	dc19      	bgt.n	8005bce <_dtoa_r+0x916>
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	b9bb      	cbnz	r3, 8005bce <_dtoa_r+0x916>
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba4:	b99b      	cbnz	r3, 8005bce <_dtoa_r+0x916>
 8005ba6:	9b05      	ldr	r3, [sp, #20]
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	0d1b      	lsrs	r3, r3, #20
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	b183      	cbz	r3, 8005bd4 <_dtoa_r+0x91c>
 8005bb2:	f04f 0801 	mov.w	r8, #1
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f af6a 	bne.w	8005a9e <_dtoa_r+0x7e6>
 8005bca:	2001      	movs	r0, #1
 8005bcc:	e76f      	b.n	8005aae <_dtoa_r+0x7f6>
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	e7f6      	b.n	8005bc2 <_dtoa_r+0x90a>
 8005bd4:	4698      	mov	r8, r3
 8005bd6:	e7f4      	b.n	8005bc2 <_dtoa_r+0x90a>
 8005bd8:	f43f af7d 	beq.w	8005ad6 <_dtoa_r+0x81e>
 8005bdc:	4618      	mov	r0, r3
 8005bde:	301c      	adds	r0, #28
 8005be0:	e772      	b.n	8005ac8 <_dtoa_r+0x810>
 8005be2:	9b08      	ldr	r3, [sp, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc36      	bgt.n	8005c56 <_dtoa_r+0x99e>
 8005be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	dd33      	ble.n	8005c56 <_dtoa_r+0x99e>
 8005bee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	d10d      	bne.n	8005c14 <_dtoa_r+0x95c>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f9d6 	bl	8005fb0 <__multadd>
 8005c04:	4601      	mov	r1, r0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fbed 	bl	80063e8 <__mcmp>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f73f adb8 	bgt.w	8005784 <_dtoa_r+0x4cc>
 8005c14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c16:	9f03      	ldr	r7, [sp, #12]
 8005c18:	ea6f 0a03 	mvn.w	sl, r3
 8005c1c:	f04f 0800 	mov.w	r8, #0
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f9a2 	bl	8005f6c <_Bfree>
 8005c28:	2e00      	cmp	r6, #0
 8005c2a:	f43f aea7 	beq.w	800597c <_dtoa_r+0x6c4>
 8005c2e:	f1b8 0f00 	cmp.w	r8, #0
 8005c32:	d005      	beq.n	8005c40 <_dtoa_r+0x988>
 8005c34:	45b0      	cmp	r8, r6
 8005c36:	d003      	beq.n	8005c40 <_dtoa_r+0x988>
 8005c38:	4641      	mov	r1, r8
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 f996 	bl	8005f6c <_Bfree>
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f992 	bl	8005f6c <_Bfree>
 8005c48:	e698      	b.n	800597c <_dtoa_r+0x6c4>
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	4626      	mov	r6, r4
 8005c4e:	e7e1      	b.n	8005c14 <_dtoa_r+0x95c>
 8005c50:	46c2      	mov	sl, r8
 8005c52:	4626      	mov	r6, r4
 8005c54:	e596      	b.n	8005784 <_dtoa_r+0x4cc>
 8005c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80fd 	beq.w	8005e5c <_dtoa_r+0xba4>
 8005c62:	2f00      	cmp	r7, #0
 8005c64:	dd05      	ble.n	8005c72 <_dtoa_r+0x9ba>
 8005c66:	4631      	mov	r1, r6
 8005c68:	463a      	mov	r2, r7
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f000 fb4c 	bl	8006308 <__lshift>
 8005c70:	4606      	mov	r6, r0
 8005c72:	f1b8 0f00 	cmp.w	r8, #0
 8005c76:	d05c      	beq.n	8005d32 <_dtoa_r+0xa7a>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	6871      	ldr	r1, [r6, #4]
 8005c7c:	f000 f936 	bl	8005eec <_Balloc>
 8005c80:	4607      	mov	r7, r0
 8005c82:	b928      	cbnz	r0, 8005c90 <_dtoa_r+0x9d8>
 8005c84:	4602      	mov	r2, r0
 8005c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c8a:	4b7f      	ldr	r3, [pc, #508]	; (8005e88 <_dtoa_r+0xbd0>)
 8005c8c:	f7ff bb28 	b.w	80052e0 <_dtoa_r+0x28>
 8005c90:	6932      	ldr	r2, [r6, #16]
 8005c92:	f106 010c 	add.w	r1, r6, #12
 8005c96:	3202      	adds	r2, #2
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	300c      	adds	r0, #12
 8005c9c:	f000 f90c 	bl	8005eb8 <memcpy>
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 fb2f 	bl	8006308 <__lshift>
 8005caa:	46b0      	mov	r8, r6
 8005cac:	4606      	mov	r6, r0
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	9308      	str	r3, [sp, #32]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	444b      	add	r3, r9
 8005cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc2:	9b08      	ldr	r3, [sp, #32]
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	4658      	mov	r0, fp
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	f7ff fa66 	bl	800519c <quorem>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	3330      	adds	r3, #48	; 0x30
 8005cd6:	9006      	str	r0, [sp, #24]
 8005cd8:	4658      	mov	r0, fp
 8005cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cdc:	f000 fb84 	bl	80063e8 <__mcmp>
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	4681      	mov	r9, r0
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 fb9a 	bl	8006420 <__mdiff>
 8005cec:	68c2      	ldr	r2, [r0, #12]
 8005cee:	4607      	mov	r7, r0
 8005cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf2:	bb02      	cbnz	r2, 8005d36 <_dtoa_r+0xa7e>
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	f000 fb76 	bl	80063e8 <__mcmp>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d00:	4639      	mov	r1, r7
 8005d02:	4628      	mov	r0, r5
 8005d04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d08:	f000 f930 	bl	8005f6c <_Bfree>
 8005d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d10:	9f08      	ldr	r7, [sp, #32]
 8005d12:	ea43 0102 	orr.w	r1, r3, r2
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d1c:	d10d      	bne.n	8005d3a <_dtoa_r+0xa82>
 8005d1e:	2b39      	cmp	r3, #57	; 0x39
 8005d20:	d029      	beq.n	8005d76 <_dtoa_r+0xabe>
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	dd01      	ble.n	8005d2c <_dtoa_r+0xa74>
 8005d28:	9b06      	ldr	r3, [sp, #24]
 8005d2a:	3331      	adds	r3, #49	; 0x31
 8005d2c:	9a04      	ldr	r2, [sp, #16]
 8005d2e:	7013      	strb	r3, [r2, #0]
 8005d30:	e776      	b.n	8005c20 <_dtoa_r+0x968>
 8005d32:	4630      	mov	r0, r6
 8005d34:	e7b9      	b.n	8005caa <_dtoa_r+0x9f2>
 8005d36:	2201      	movs	r2, #1
 8005d38:	e7e2      	b.n	8005d00 <_dtoa_r+0xa48>
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	db06      	blt.n	8005d4e <_dtoa_r+0xa96>
 8005d40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005d42:	ea41 0909 	orr.w	r9, r1, r9
 8005d46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d48:	ea59 0101 	orrs.w	r1, r9, r1
 8005d4c:	d120      	bne.n	8005d90 <_dtoa_r+0xad8>
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	ddec      	ble.n	8005d2c <_dtoa_r+0xa74>
 8005d52:	4659      	mov	r1, fp
 8005d54:	2201      	movs	r2, #1
 8005d56:	4628      	mov	r0, r5
 8005d58:	9308      	str	r3, [sp, #32]
 8005d5a:	f000 fad5 	bl	8006308 <__lshift>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4683      	mov	fp, r0
 8005d62:	f000 fb41 	bl	80063e8 <__mcmp>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	9b08      	ldr	r3, [sp, #32]
 8005d6a:	dc02      	bgt.n	8005d72 <_dtoa_r+0xaba>
 8005d6c:	d1de      	bne.n	8005d2c <_dtoa_r+0xa74>
 8005d6e:	07da      	lsls	r2, r3, #31
 8005d70:	d5dc      	bpl.n	8005d2c <_dtoa_r+0xa74>
 8005d72:	2b39      	cmp	r3, #57	; 0x39
 8005d74:	d1d8      	bne.n	8005d28 <_dtoa_r+0xa70>
 8005d76:	2339      	movs	r3, #57	; 0x39
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	7013      	strb	r3, [r2, #0]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	461f      	mov	r7, r3
 8005d80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	2a39      	cmp	r2, #57	; 0x39
 8005d88:	d050      	beq.n	8005e2c <_dtoa_r+0xb74>
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e747      	b.n	8005c20 <_dtoa_r+0x968>
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	dd03      	ble.n	8005d9c <_dtoa_r+0xae4>
 8005d94:	2b39      	cmp	r3, #57	; 0x39
 8005d96:	d0ee      	beq.n	8005d76 <_dtoa_r+0xabe>
 8005d98:	3301      	adds	r3, #1
 8005d9a:	e7c7      	b.n	8005d2c <_dtoa_r+0xa74>
 8005d9c:	9a08      	ldr	r2, [sp, #32]
 8005d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005da0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d02a      	beq.n	8005dfe <_dtoa_r+0xb46>
 8005da8:	4659      	mov	r1, fp
 8005daa:	2300      	movs	r3, #0
 8005dac:	220a      	movs	r2, #10
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f8fe 	bl	8005fb0 <__multadd>
 8005db4:	45b0      	cmp	r8, r6
 8005db6:	4683      	mov	fp, r0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	f04f 020a 	mov.w	r2, #10
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	d107      	bne.n	8005dd6 <_dtoa_r+0xb1e>
 8005dc6:	f000 f8f3 	bl	8005fb0 <__multadd>
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4606      	mov	r6, r0
 8005dce:	9b08      	ldr	r3, [sp, #32]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	9308      	str	r3, [sp, #32]
 8005dd4:	e775      	b.n	8005cc2 <_dtoa_r+0xa0a>
 8005dd6:	f000 f8eb 	bl	8005fb0 <__multadd>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4680      	mov	r8, r0
 8005dde:	2300      	movs	r3, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f8e4 	bl	8005fb0 <__multadd>
 8005de8:	4606      	mov	r6, r0
 8005dea:	e7f0      	b.n	8005dce <_dtoa_r+0xb16>
 8005dec:	f1b9 0f00 	cmp.w	r9, #0
 8005df0:	bfcc      	ite	gt
 8005df2:	464f      	movgt	r7, r9
 8005df4:	2701      	movle	r7, #1
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	9a03      	ldr	r2, [sp, #12]
 8005dfc:	4417      	add	r7, r2
 8005dfe:	4659      	mov	r1, fp
 8005e00:	2201      	movs	r2, #1
 8005e02:	4628      	mov	r0, r5
 8005e04:	9308      	str	r3, [sp, #32]
 8005e06:	f000 fa7f 	bl	8006308 <__lshift>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4683      	mov	fp, r0
 8005e0e:	f000 faeb 	bl	80063e8 <__mcmp>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	dcb2      	bgt.n	8005d7c <_dtoa_r+0xac4>
 8005e16:	d102      	bne.n	8005e1e <_dtoa_r+0xb66>
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	07db      	lsls	r3, r3, #31
 8005e1c:	d4ae      	bmi.n	8005d7c <_dtoa_r+0xac4>
 8005e1e:	463b      	mov	r3, r7
 8005e20:	461f      	mov	r7, r3
 8005e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e26:	2a30      	cmp	r2, #48	; 0x30
 8005e28:	d0fa      	beq.n	8005e20 <_dtoa_r+0xb68>
 8005e2a:	e6f9      	b.n	8005c20 <_dtoa_r+0x968>
 8005e2c:	9a03      	ldr	r2, [sp, #12]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d1a5      	bne.n	8005d7e <_dtoa_r+0xac6>
 8005e32:	2331      	movs	r3, #49	; 0x31
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	e779      	b.n	8005d2e <_dtoa_r+0xa76>
 8005e3a:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <_dtoa_r+0xbd4>)
 8005e3c:	f7ff baa8 	b.w	8005390 <_dtoa_r+0xd8>
 8005e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f47f aa81 	bne.w	800534a <_dtoa_r+0x92>
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <_dtoa_r+0xbd8>)
 8005e4a:	f7ff baa1 	b.w	8005390 <_dtoa_r+0xd8>
 8005e4e:	f1b9 0f00 	cmp.w	r9, #0
 8005e52:	dc03      	bgt.n	8005e5c <_dtoa_r+0xba4>
 8005e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	f73f aecb 	bgt.w	8005bf2 <_dtoa_r+0x93a>
 8005e5c:	9f03      	ldr	r7, [sp, #12]
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4658      	mov	r0, fp
 8005e62:	f7ff f99b 	bl	800519c <quorem>
 8005e66:	9a03      	ldr	r2, [sp, #12]
 8005e68:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e6c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e70:	1aba      	subs	r2, r7, r2
 8005e72:	4591      	cmp	r9, r2
 8005e74:	ddba      	ble.n	8005dec <_dtoa_r+0xb34>
 8005e76:	4659      	mov	r1, fp
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f897 	bl	8005fb0 <__multadd>
 8005e82:	4683      	mov	fp, r0
 8005e84:	e7eb      	b.n	8005e5e <_dtoa_r+0xba6>
 8005e86:	bf00      	nop
 8005e88:	08007ebf 	.word	0x08007ebf
 8005e8c:	08007e1c 	.word	0x08007e1c
 8005e90:	08007e40 	.word	0x08007e40

08005e94 <_localeconv_r>:
 8005e94:	4800      	ldr	r0, [pc, #0]	; (8005e98 <_localeconv_r+0x4>)
 8005e96:	4770      	bx	lr
 8005e98:	20000194 	.word	0x20000194

08005e9c <memchr>:
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	b2c9      	uxtb	r1, r1
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	d101      	bne.n	8005eae <memchr+0x12>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e003      	b.n	8005eb6 <memchr+0x1a>
 8005eae:	7804      	ldrb	r4, [r0, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	428c      	cmp	r4, r1
 8005eb4:	d1f6      	bne.n	8005ea4 <memchr+0x8>
 8005eb6:	bd10      	pop	{r4, pc}

08005eb8 <memcpy>:
 8005eb8:	440a      	add	r2, r1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	4770      	bx	lr
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed0:	d1f9      	bne.n	8005ec6 <memcpy+0xe>
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <__malloc_lock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__malloc_lock+0x8>)
 8005ed6:	f000 bd2c 	b.w	8006932 <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	200003d4 	.word	0x200003d4

08005ee0 <__malloc_unlock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__malloc_unlock+0x8>)
 8005ee2:	f000 bd27 	b.w	8006934 <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200003d4 	.word	0x200003d4

08005eec <_Balloc>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	b976      	cbnz	r6, 8005f14 <_Balloc+0x28>
 8005ef6:	2010      	movs	r0, #16
 8005ef8:	f7fe fbd4 	bl	80046a4 <malloc>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6260      	str	r0, [r4, #36]	; 0x24
 8005f00:	b920      	cbnz	r0, 8005f0c <_Balloc+0x20>
 8005f02:	2166      	movs	r1, #102	; 0x66
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <_Balloc+0x78>)
 8005f06:	4818      	ldr	r0, [pc, #96]	; (8005f68 <_Balloc+0x7c>)
 8005f08:	f000 fce2 	bl	80068d0 <__assert_func>
 8005f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f10:	6006      	str	r6, [r0, #0]
 8005f12:	60c6      	str	r6, [r0, #12]
 8005f14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f16:	68f3      	ldr	r3, [r6, #12]
 8005f18:	b183      	cbz	r3, 8005f3c <_Balloc+0x50>
 8005f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f22:	b9b8      	cbnz	r0, 8005f54 <_Balloc+0x68>
 8005f24:	2101      	movs	r1, #1
 8005f26:	fa01 f605 	lsl.w	r6, r1, r5
 8005f2a:	1d72      	adds	r2, r6, #5
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	f000 fb5e 	bl	80065f0 <_calloc_r>
 8005f34:	b160      	cbz	r0, 8005f50 <_Balloc+0x64>
 8005f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f3a:	e00e      	b.n	8005f5a <_Balloc+0x6e>
 8005f3c:	2221      	movs	r2, #33	; 0x21
 8005f3e:	2104      	movs	r1, #4
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fb55 	bl	80065f0 <_calloc_r>
 8005f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f48:	60f0      	str	r0, [r6, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e4      	bne.n	8005f1a <_Balloc+0x2e>
 8005f50:	2000      	movs	r0, #0
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	6802      	ldr	r2, [r0, #0]
 8005f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f60:	e7f7      	b.n	8005f52 <_Balloc+0x66>
 8005f62:	bf00      	nop
 8005f64:	08007e4d 	.word	0x08007e4d
 8005f68:	08007ed0 	.word	0x08007ed0

08005f6c <_Bfree>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	b976      	cbnz	r6, 8005f94 <_Bfree+0x28>
 8005f76:	2010      	movs	r0, #16
 8005f78:	f7fe fb94 	bl	80046a4 <malloc>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f80:	b920      	cbnz	r0, 8005f8c <_Bfree+0x20>
 8005f82:	218a      	movs	r1, #138	; 0x8a
 8005f84:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <_Bfree+0x3c>)
 8005f86:	4809      	ldr	r0, [pc, #36]	; (8005fac <_Bfree+0x40>)
 8005f88:	f000 fca2 	bl	80068d0 <__assert_func>
 8005f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f90:	6006      	str	r6, [r0, #0]
 8005f92:	60c6      	str	r6, [r0, #12]
 8005f94:	b13c      	cbz	r4, 8005fa6 <_Bfree+0x3a>
 8005f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f98:	6862      	ldr	r2, [r4, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa0:	6021      	str	r1, [r4, #0]
 8005fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	08007e4d 	.word	0x08007e4d
 8005fac:	08007ed0 	.word	0x08007ed0

08005fb0 <__multadd>:
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	461e      	mov	r6, r3
 8005fba:	2000      	movs	r0, #0
 8005fbc:	690d      	ldr	r5, [r1, #16]
 8005fbe:	f101 0c14 	add.w	ip, r1, #20
 8005fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	b299      	uxth	r1, r3
 8005fca:	fb02 6101 	mla	r1, r2, r1, r6
 8005fce:	0c1e      	lsrs	r6, r3, #16
 8005fd0:	0c0b      	lsrs	r3, r1, #16
 8005fd2:	fb02 3306 	mla	r3, r2, r6, r3
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fdc:	4285      	cmp	r5, r0
 8005fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fe6:	dcec      	bgt.n	8005fc2 <__multadd+0x12>
 8005fe8:	b30e      	cbz	r6, 800602e <__multadd+0x7e>
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc19      	bgt.n	8006024 <__multadd+0x74>
 8005ff0:	6861      	ldr	r1, [r4, #4]
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	3101      	adds	r1, #1
 8005ff6:	f7ff ff79 	bl	8005eec <_Balloc>
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	b928      	cbnz	r0, 800600a <__multadd+0x5a>
 8005ffe:	4602      	mov	r2, r0
 8006000:	21b5      	movs	r1, #181	; 0xb5
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <__multadd+0x84>)
 8006004:	480c      	ldr	r0, [pc, #48]	; (8006038 <__multadd+0x88>)
 8006006:	f000 fc63 	bl	80068d0 <__assert_func>
 800600a:	6922      	ldr	r2, [r4, #16]
 800600c:	f104 010c 	add.w	r1, r4, #12
 8006010:	3202      	adds	r2, #2
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	300c      	adds	r0, #12
 8006016:	f7ff ff4f 	bl	8005eb8 <memcpy>
 800601a:	4621      	mov	r1, r4
 800601c:	4638      	mov	r0, r7
 800601e:	f7ff ffa5 	bl	8005f6c <_Bfree>
 8006022:	4644      	mov	r4, r8
 8006024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006028:	3501      	adds	r5, #1
 800602a:	615e      	str	r6, [r3, #20]
 800602c:	6125      	str	r5, [r4, #16]
 800602e:	4620      	mov	r0, r4
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006034:	08007ebf 	.word	0x08007ebf
 8006038:	08007ed0 	.word	0x08007ed0

0800603c <__hi0bits>:
 800603c:	0c02      	lsrs	r2, r0, #16
 800603e:	0412      	lsls	r2, r2, #16
 8006040:	4603      	mov	r3, r0
 8006042:	b9ca      	cbnz	r2, 8006078 <__hi0bits+0x3c>
 8006044:	0403      	lsls	r3, r0, #16
 8006046:	2010      	movs	r0, #16
 8006048:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800604c:	bf04      	itt	eq
 800604e:	021b      	lsleq	r3, r3, #8
 8006050:	3008      	addeq	r0, #8
 8006052:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006056:	bf04      	itt	eq
 8006058:	011b      	lsleq	r3, r3, #4
 800605a:	3004      	addeq	r0, #4
 800605c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006060:	bf04      	itt	eq
 8006062:	009b      	lsleq	r3, r3, #2
 8006064:	3002      	addeq	r0, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	db05      	blt.n	8006076 <__hi0bits+0x3a>
 800606a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800606e:	f100 0001 	add.w	r0, r0, #1
 8006072:	bf08      	it	eq
 8006074:	2020      	moveq	r0, #32
 8006076:	4770      	bx	lr
 8006078:	2000      	movs	r0, #0
 800607a:	e7e5      	b.n	8006048 <__hi0bits+0xc>

0800607c <__lo0bits>:
 800607c:	6803      	ldr	r3, [r0, #0]
 800607e:	4602      	mov	r2, r0
 8006080:	f013 0007 	ands.w	r0, r3, #7
 8006084:	d00b      	beq.n	800609e <__lo0bits+0x22>
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	d421      	bmi.n	80060ce <__lo0bits+0x52>
 800608a:	0798      	lsls	r0, r3, #30
 800608c:	bf49      	itett	mi
 800608e:	085b      	lsrmi	r3, r3, #1
 8006090:	089b      	lsrpl	r3, r3, #2
 8006092:	2001      	movmi	r0, #1
 8006094:	6013      	strmi	r3, [r2, #0]
 8006096:	bf5c      	itt	pl
 8006098:	2002      	movpl	r0, #2
 800609a:	6013      	strpl	r3, [r2, #0]
 800609c:	4770      	bx	lr
 800609e:	b299      	uxth	r1, r3
 80060a0:	b909      	cbnz	r1, 80060a6 <__lo0bits+0x2a>
 80060a2:	2010      	movs	r0, #16
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	b2d9      	uxtb	r1, r3
 80060a8:	b909      	cbnz	r1, 80060ae <__lo0bits+0x32>
 80060aa:	3008      	adds	r0, #8
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	0719      	lsls	r1, r3, #28
 80060b0:	bf04      	itt	eq
 80060b2:	091b      	lsreq	r3, r3, #4
 80060b4:	3004      	addeq	r0, #4
 80060b6:	0799      	lsls	r1, r3, #30
 80060b8:	bf04      	itt	eq
 80060ba:	089b      	lsreq	r3, r3, #2
 80060bc:	3002      	addeq	r0, #2
 80060be:	07d9      	lsls	r1, r3, #31
 80060c0:	d403      	bmi.n	80060ca <__lo0bits+0x4e>
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	f100 0001 	add.w	r0, r0, #1
 80060c8:	d003      	beq.n	80060d2 <__lo0bits+0x56>
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4770      	bx	lr
 80060ce:	2000      	movs	r0, #0
 80060d0:	4770      	bx	lr
 80060d2:	2020      	movs	r0, #32
 80060d4:	4770      	bx	lr
	...

080060d8 <__i2b>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	460c      	mov	r4, r1
 80060dc:	2101      	movs	r1, #1
 80060de:	f7ff ff05 	bl	8005eec <_Balloc>
 80060e2:	4602      	mov	r2, r0
 80060e4:	b928      	cbnz	r0, 80060f2 <__i2b+0x1a>
 80060e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <__i2b+0x24>)
 80060ec:	4804      	ldr	r0, [pc, #16]	; (8006100 <__i2b+0x28>)
 80060ee:	f000 fbef 	bl	80068d0 <__assert_func>
 80060f2:	2301      	movs	r3, #1
 80060f4:	6144      	str	r4, [r0, #20]
 80060f6:	6103      	str	r3, [r0, #16]
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop
 80060fc:	08007ebf 	.word	0x08007ebf
 8006100:	08007ed0 	.word	0x08007ed0

08006104 <__multiply>:
 8006104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006108:	4691      	mov	r9, r2
 800610a:	690a      	ldr	r2, [r1, #16]
 800610c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006110:	460c      	mov	r4, r1
 8006112:	429a      	cmp	r2, r3
 8006114:	bfbe      	ittt	lt
 8006116:	460b      	movlt	r3, r1
 8006118:	464c      	movlt	r4, r9
 800611a:	4699      	movlt	r9, r3
 800611c:	6927      	ldr	r7, [r4, #16]
 800611e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	6861      	ldr	r1, [r4, #4]
 8006126:	eb07 060a 	add.w	r6, r7, sl
 800612a:	42b3      	cmp	r3, r6
 800612c:	b085      	sub	sp, #20
 800612e:	bfb8      	it	lt
 8006130:	3101      	addlt	r1, #1
 8006132:	f7ff fedb 	bl	8005eec <_Balloc>
 8006136:	b930      	cbnz	r0, 8006146 <__multiply+0x42>
 8006138:	4602      	mov	r2, r0
 800613a:	f240 115d 	movw	r1, #349	; 0x15d
 800613e:	4b43      	ldr	r3, [pc, #268]	; (800624c <__multiply+0x148>)
 8006140:	4843      	ldr	r0, [pc, #268]	; (8006250 <__multiply+0x14c>)
 8006142:	f000 fbc5 	bl	80068d0 <__assert_func>
 8006146:	f100 0514 	add.w	r5, r0, #20
 800614a:	462b      	mov	r3, r5
 800614c:	2200      	movs	r2, #0
 800614e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006152:	4543      	cmp	r3, r8
 8006154:	d321      	bcc.n	800619a <__multiply+0x96>
 8006156:	f104 0314 	add.w	r3, r4, #20
 800615a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800615e:	f109 0314 	add.w	r3, r9, #20
 8006162:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	1b3a      	subs	r2, r7, r4
 800616a:	3a15      	subs	r2, #21
 800616c:	f022 0203 	bic.w	r2, r2, #3
 8006170:	3204      	adds	r2, #4
 8006172:	f104 0115 	add.w	r1, r4, #21
 8006176:	428f      	cmp	r7, r1
 8006178:	bf38      	it	cc
 800617a:	2204      	movcc	r2, #4
 800617c:	9201      	str	r2, [sp, #4]
 800617e:	9a02      	ldr	r2, [sp, #8]
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	429a      	cmp	r2, r3
 8006184:	d80c      	bhi.n	80061a0 <__multiply+0x9c>
 8006186:	2e00      	cmp	r6, #0
 8006188:	dd03      	ble.n	8006192 <__multiply+0x8e>
 800618a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800618e:	2b00      	cmp	r3, #0
 8006190:	d059      	beq.n	8006246 <__multiply+0x142>
 8006192:	6106      	str	r6, [r0, #16]
 8006194:	b005      	add	sp, #20
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	f843 2b04 	str.w	r2, [r3], #4
 800619e:	e7d8      	b.n	8006152 <__multiply+0x4e>
 80061a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80061a4:	f1ba 0f00 	cmp.w	sl, #0
 80061a8:	d023      	beq.n	80061f2 <__multiply+0xee>
 80061aa:	46a9      	mov	r9, r5
 80061ac:	f04f 0c00 	mov.w	ip, #0
 80061b0:	f104 0e14 	add.w	lr, r4, #20
 80061b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80061b8:	f8d9 1000 	ldr.w	r1, [r9]
 80061bc:	fa1f fb82 	uxth.w	fp, r2
 80061c0:	b289      	uxth	r1, r1
 80061c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80061c6:	4461      	add	r1, ip
 80061c8:	f8d9 c000 	ldr.w	ip, [r9]
 80061cc:	0c12      	lsrs	r2, r2, #16
 80061ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80061d2:	fb0a c202 	mla	r2, sl, r2, ip
 80061d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061da:	b289      	uxth	r1, r1
 80061dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061e0:	4577      	cmp	r7, lr
 80061e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061e6:	f849 1b04 	str.w	r1, [r9], #4
 80061ea:	d8e3      	bhi.n	80061b4 <__multiply+0xb0>
 80061ec:	9a01      	ldr	r2, [sp, #4]
 80061ee:	f845 c002 	str.w	ip, [r5, r2]
 80061f2:	9a03      	ldr	r2, [sp, #12]
 80061f4:	3304      	adds	r3, #4
 80061f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	d020      	beq.n	8006242 <__multiply+0x13e>
 8006200:	46ae      	mov	lr, r5
 8006202:	f04f 0a00 	mov.w	sl, #0
 8006206:	6829      	ldr	r1, [r5, #0]
 8006208:	f104 0c14 	add.w	ip, r4, #20
 800620c:	f8bc b000 	ldrh.w	fp, [ip]
 8006210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006214:	b289      	uxth	r1, r1
 8006216:	fb09 220b 	mla	r2, r9, fp, r2
 800621a:	4492      	add	sl, r2
 800621c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006220:	f84e 1b04 	str.w	r1, [lr], #4
 8006224:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006228:	f8be 1000 	ldrh.w	r1, [lr]
 800622c:	0c12      	lsrs	r2, r2, #16
 800622e:	fb09 1102 	mla	r1, r9, r2, r1
 8006232:	4567      	cmp	r7, ip
 8006234:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800623c:	d8e6      	bhi.n	800620c <__multiply+0x108>
 800623e:	9a01      	ldr	r2, [sp, #4]
 8006240:	50a9      	str	r1, [r5, r2]
 8006242:	3504      	adds	r5, #4
 8006244:	e79b      	b.n	800617e <__multiply+0x7a>
 8006246:	3e01      	subs	r6, #1
 8006248:	e79d      	b.n	8006186 <__multiply+0x82>
 800624a:	bf00      	nop
 800624c:	08007ebf 	.word	0x08007ebf
 8006250:	08007ed0 	.word	0x08007ed0

08006254 <__pow5mult>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	4615      	mov	r5, r2
 800625a:	f012 0203 	ands.w	r2, r2, #3
 800625e:	4606      	mov	r6, r0
 8006260:	460f      	mov	r7, r1
 8006262:	d007      	beq.n	8006274 <__pow5mult+0x20>
 8006264:	4c25      	ldr	r4, [pc, #148]	; (80062fc <__pow5mult+0xa8>)
 8006266:	3a01      	subs	r2, #1
 8006268:	2300      	movs	r3, #0
 800626a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800626e:	f7ff fe9f 	bl	8005fb0 <__multadd>
 8006272:	4607      	mov	r7, r0
 8006274:	10ad      	asrs	r5, r5, #2
 8006276:	d03d      	beq.n	80062f4 <__pow5mult+0xa0>
 8006278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800627a:	b97c      	cbnz	r4, 800629c <__pow5mult+0x48>
 800627c:	2010      	movs	r0, #16
 800627e:	f7fe fa11 	bl	80046a4 <malloc>
 8006282:	4602      	mov	r2, r0
 8006284:	6270      	str	r0, [r6, #36]	; 0x24
 8006286:	b928      	cbnz	r0, 8006294 <__pow5mult+0x40>
 8006288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800628c:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <__pow5mult+0xac>)
 800628e:	481d      	ldr	r0, [pc, #116]	; (8006304 <__pow5mult+0xb0>)
 8006290:	f000 fb1e 	bl	80068d0 <__assert_func>
 8006294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006298:	6004      	str	r4, [r0, #0]
 800629a:	60c4      	str	r4, [r0, #12]
 800629c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062a4:	b94c      	cbnz	r4, 80062ba <__pow5mult+0x66>
 80062a6:	f240 2171 	movw	r1, #625	; 0x271
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ff14 	bl	80060d8 <__i2b>
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062b8:	6003      	str	r3, [r0, #0]
 80062ba:	f04f 0900 	mov.w	r9, #0
 80062be:	07eb      	lsls	r3, r5, #31
 80062c0:	d50a      	bpl.n	80062d8 <__pow5mult+0x84>
 80062c2:	4639      	mov	r1, r7
 80062c4:	4622      	mov	r2, r4
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ff1c 	bl	8006104 <__multiply>
 80062cc:	4680      	mov	r8, r0
 80062ce:	4639      	mov	r1, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff fe4b 	bl	8005f6c <_Bfree>
 80062d6:	4647      	mov	r7, r8
 80062d8:	106d      	asrs	r5, r5, #1
 80062da:	d00b      	beq.n	80062f4 <__pow5mult+0xa0>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	b938      	cbnz	r0, 80062f0 <__pow5mult+0x9c>
 80062e0:	4622      	mov	r2, r4
 80062e2:	4621      	mov	r1, r4
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ff0d 	bl	8006104 <__multiply>
 80062ea:	6020      	str	r0, [r4, #0]
 80062ec:	f8c0 9000 	str.w	r9, [r0]
 80062f0:	4604      	mov	r4, r0
 80062f2:	e7e4      	b.n	80062be <__pow5mult+0x6a>
 80062f4:	4638      	mov	r0, r7
 80062f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fa:	bf00      	nop
 80062fc:	08008020 	.word	0x08008020
 8006300:	08007e4d 	.word	0x08007e4d
 8006304:	08007ed0 	.word	0x08007ed0

08006308 <__lshift>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	460c      	mov	r4, r1
 800630e:	4607      	mov	r7, r0
 8006310:	4691      	mov	r9, r2
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	6849      	ldr	r1, [r1, #4]
 8006316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800631a:	68a3      	ldr	r3, [r4, #8]
 800631c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006320:	f108 0601 	add.w	r6, r8, #1
 8006324:	42b3      	cmp	r3, r6
 8006326:	db0b      	blt.n	8006340 <__lshift+0x38>
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff fddf 	bl	8005eec <_Balloc>
 800632e:	4605      	mov	r5, r0
 8006330:	b948      	cbnz	r0, 8006346 <__lshift+0x3e>
 8006332:	4602      	mov	r2, r0
 8006334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006338:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <__lshift+0xd8>)
 800633a:	482a      	ldr	r0, [pc, #168]	; (80063e4 <__lshift+0xdc>)
 800633c:	f000 fac8 	bl	80068d0 <__assert_func>
 8006340:	3101      	adds	r1, #1
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	e7ee      	b.n	8006324 <__lshift+0x1c>
 8006346:	2300      	movs	r3, #0
 8006348:	f100 0114 	add.w	r1, r0, #20
 800634c:	f100 0210 	add.w	r2, r0, #16
 8006350:	4618      	mov	r0, r3
 8006352:	4553      	cmp	r3, sl
 8006354:	db37      	blt.n	80063c6 <__lshift+0xbe>
 8006356:	6920      	ldr	r0, [r4, #16]
 8006358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800635c:	f104 0314 	add.w	r3, r4, #20
 8006360:	f019 091f 	ands.w	r9, r9, #31
 8006364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800636c:	d02f      	beq.n	80063ce <__lshift+0xc6>
 800636e:	468a      	mov	sl, r1
 8006370:	f04f 0c00 	mov.w	ip, #0
 8006374:	f1c9 0e20 	rsb	lr, r9, #32
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	fa02 f209 	lsl.w	r2, r2, r9
 800637e:	ea42 020c 	orr.w	r2, r2, ip
 8006382:	f84a 2b04 	str.w	r2, [sl], #4
 8006386:	f853 2b04 	ldr.w	r2, [r3], #4
 800638a:	4298      	cmp	r0, r3
 800638c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006390:	d8f2      	bhi.n	8006378 <__lshift+0x70>
 8006392:	1b03      	subs	r3, r0, r4
 8006394:	3b15      	subs	r3, #21
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	3304      	adds	r3, #4
 800639c:	f104 0215 	add.w	r2, r4, #21
 80063a0:	4290      	cmp	r0, r2
 80063a2:	bf38      	it	cc
 80063a4:	2304      	movcc	r3, #4
 80063a6:	f841 c003 	str.w	ip, [r1, r3]
 80063aa:	f1bc 0f00 	cmp.w	ip, #0
 80063ae:	d001      	beq.n	80063b4 <__lshift+0xac>
 80063b0:	f108 0602 	add.w	r6, r8, #2
 80063b4:	3e01      	subs	r6, #1
 80063b6:	4638      	mov	r0, r7
 80063b8:	4621      	mov	r1, r4
 80063ba:	612e      	str	r6, [r5, #16]
 80063bc:	f7ff fdd6 	bl	8005f6c <_Bfree>
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80063ca:	3301      	adds	r3, #1
 80063cc:	e7c1      	b.n	8006352 <__lshift+0x4a>
 80063ce:	3904      	subs	r1, #4
 80063d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d4:	4298      	cmp	r0, r3
 80063d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80063da:	d8f9      	bhi.n	80063d0 <__lshift+0xc8>
 80063dc:	e7ea      	b.n	80063b4 <__lshift+0xac>
 80063de:	bf00      	nop
 80063e0:	08007ebf 	.word	0x08007ebf
 80063e4:	08007ed0 	.word	0x08007ed0

080063e8 <__mcmp>:
 80063e8:	4603      	mov	r3, r0
 80063ea:	690a      	ldr	r2, [r1, #16]
 80063ec:	6900      	ldr	r0, [r0, #16]
 80063ee:	b530      	push	{r4, r5, lr}
 80063f0:	1a80      	subs	r0, r0, r2
 80063f2:	d10d      	bne.n	8006410 <__mcmp+0x28>
 80063f4:	3314      	adds	r3, #20
 80063f6:	3114      	adds	r1, #20
 80063f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006408:	4295      	cmp	r5, r2
 800640a:	d002      	beq.n	8006412 <__mcmp+0x2a>
 800640c:	d304      	bcc.n	8006418 <__mcmp+0x30>
 800640e:	2001      	movs	r0, #1
 8006410:	bd30      	pop	{r4, r5, pc}
 8006412:	42a3      	cmp	r3, r4
 8006414:	d3f4      	bcc.n	8006400 <__mcmp+0x18>
 8006416:	e7fb      	b.n	8006410 <__mcmp+0x28>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e7f8      	b.n	8006410 <__mcmp+0x28>
	...

08006420 <__mdiff>:
 8006420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	460d      	mov	r5, r1
 8006426:	4607      	mov	r7, r0
 8006428:	4611      	mov	r1, r2
 800642a:	4628      	mov	r0, r5
 800642c:	4614      	mov	r4, r2
 800642e:	f7ff ffdb 	bl	80063e8 <__mcmp>
 8006432:	1e06      	subs	r6, r0, #0
 8006434:	d111      	bne.n	800645a <__mdiff+0x3a>
 8006436:	4631      	mov	r1, r6
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff fd57 	bl	8005eec <_Balloc>
 800643e:	4602      	mov	r2, r0
 8006440:	b928      	cbnz	r0, 800644e <__mdiff+0x2e>
 8006442:	f240 2132 	movw	r1, #562	; 0x232
 8006446:	4b3a      	ldr	r3, [pc, #232]	; (8006530 <__mdiff+0x110>)
 8006448:	483a      	ldr	r0, [pc, #232]	; (8006534 <__mdiff+0x114>)
 800644a:	f000 fa41 	bl	80068d0 <__assert_func>
 800644e:	2301      	movs	r3, #1
 8006450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006454:	4610      	mov	r0, r2
 8006456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	bfa4      	itt	ge
 800645c:	4623      	movge	r3, r4
 800645e:	462c      	movge	r4, r5
 8006460:	4638      	mov	r0, r7
 8006462:	6861      	ldr	r1, [r4, #4]
 8006464:	bfa6      	itte	ge
 8006466:	461d      	movge	r5, r3
 8006468:	2600      	movge	r6, #0
 800646a:	2601      	movlt	r6, #1
 800646c:	f7ff fd3e 	bl	8005eec <_Balloc>
 8006470:	4602      	mov	r2, r0
 8006472:	b918      	cbnz	r0, 800647c <__mdiff+0x5c>
 8006474:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <__mdiff+0x110>)
 800647a:	e7e5      	b.n	8006448 <__mdiff+0x28>
 800647c:	f102 0814 	add.w	r8, r2, #20
 8006480:	46c2      	mov	sl, r8
 8006482:	f04f 0c00 	mov.w	ip, #0
 8006486:	6927      	ldr	r7, [r4, #16]
 8006488:	60c6      	str	r6, [r0, #12]
 800648a:	692e      	ldr	r6, [r5, #16]
 800648c:	f104 0014 	add.w	r0, r4, #20
 8006490:	f105 0914 	add.w	r9, r5, #20
 8006494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800649c:	3410      	adds	r4, #16
 800649e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80064a6:	fa1f f18b 	uxth.w	r1, fp
 80064aa:	448c      	add	ip, r1
 80064ac:	b299      	uxth	r1, r3
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	ebac 0101 	sub.w	r1, ip, r1
 80064b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064bc:	b289      	uxth	r1, r1
 80064be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064c2:	454e      	cmp	r6, r9
 80064c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064c8:	f84a 3b04 	str.w	r3, [sl], #4
 80064cc:	d8e7      	bhi.n	800649e <__mdiff+0x7e>
 80064ce:	1b73      	subs	r3, r6, r5
 80064d0:	3b15      	subs	r3, #21
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	3515      	adds	r5, #21
 80064d8:	3304      	adds	r3, #4
 80064da:	42ae      	cmp	r6, r5
 80064dc:	bf38      	it	cc
 80064de:	2304      	movcc	r3, #4
 80064e0:	4418      	add	r0, r3
 80064e2:	4443      	add	r3, r8
 80064e4:	461e      	mov	r6, r3
 80064e6:	4605      	mov	r5, r0
 80064e8:	4575      	cmp	r5, lr
 80064ea:	d30e      	bcc.n	800650a <__mdiff+0xea>
 80064ec:	f10e 0103 	add.w	r1, lr, #3
 80064f0:	1a09      	subs	r1, r1, r0
 80064f2:	f021 0103 	bic.w	r1, r1, #3
 80064f6:	3803      	subs	r0, #3
 80064f8:	4586      	cmp	lr, r0
 80064fa:	bf38      	it	cc
 80064fc:	2100      	movcc	r1, #0
 80064fe:	4419      	add	r1, r3
 8006500:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006504:	b18b      	cbz	r3, 800652a <__mdiff+0x10a>
 8006506:	6117      	str	r7, [r2, #16]
 8006508:	e7a4      	b.n	8006454 <__mdiff+0x34>
 800650a:	f855 8b04 	ldr.w	r8, [r5], #4
 800650e:	fa1f f188 	uxth.w	r1, r8
 8006512:	4461      	add	r1, ip
 8006514:	140c      	asrs	r4, r1, #16
 8006516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800651a:	b289      	uxth	r1, r1
 800651c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006520:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006524:	f846 1b04 	str.w	r1, [r6], #4
 8006528:	e7de      	b.n	80064e8 <__mdiff+0xc8>
 800652a:	3f01      	subs	r7, #1
 800652c:	e7e8      	b.n	8006500 <__mdiff+0xe0>
 800652e:	bf00      	nop
 8006530:	08007ebf 	.word	0x08007ebf
 8006534:	08007ed0 	.word	0x08007ed0

08006538 <__d2b>:
 8006538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800653c:	2101      	movs	r1, #1
 800653e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006542:	4690      	mov	r8, r2
 8006544:	461d      	mov	r5, r3
 8006546:	f7ff fcd1 	bl	8005eec <_Balloc>
 800654a:	4604      	mov	r4, r0
 800654c:	b930      	cbnz	r0, 800655c <__d2b+0x24>
 800654e:	4602      	mov	r2, r0
 8006550:	f240 310a 	movw	r1, #778	; 0x30a
 8006554:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <__d2b+0xb0>)
 8006556:	4825      	ldr	r0, [pc, #148]	; (80065ec <__d2b+0xb4>)
 8006558:	f000 f9ba 	bl	80068d0 <__assert_func>
 800655c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006560:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006564:	bb2d      	cbnz	r5, 80065b2 <__d2b+0x7a>
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	f1b8 0300 	subs.w	r3, r8, #0
 800656c:	d026      	beq.n	80065bc <__d2b+0x84>
 800656e:	4668      	mov	r0, sp
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f7ff fd83 	bl	800607c <__lo0bits>
 8006576:	9900      	ldr	r1, [sp, #0]
 8006578:	b1f0      	cbz	r0, 80065b8 <__d2b+0x80>
 800657a:	9a01      	ldr	r2, [sp, #4]
 800657c:	f1c0 0320 	rsb	r3, r0, #32
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	430b      	orrs	r3, r1
 8006586:	40c2      	lsrs	r2, r0
 8006588:	6163      	str	r3, [r4, #20]
 800658a:	9201      	str	r2, [sp, #4]
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2102      	movne	r1, #2
 8006594:	2101      	moveq	r1, #1
 8006596:	61a3      	str	r3, [r4, #24]
 8006598:	6121      	str	r1, [r4, #16]
 800659a:	b1c5      	cbz	r5, 80065ce <__d2b+0x96>
 800659c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065a0:	4405      	add	r5, r0
 80065a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065a6:	603d      	str	r5, [r7, #0]
 80065a8:	6030      	str	r0, [r6, #0]
 80065aa:	4620      	mov	r0, r4
 80065ac:	b002      	add	sp, #8
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b6:	e7d6      	b.n	8006566 <__d2b+0x2e>
 80065b8:	6161      	str	r1, [r4, #20]
 80065ba:	e7e7      	b.n	800658c <__d2b+0x54>
 80065bc:	a801      	add	r0, sp, #4
 80065be:	f7ff fd5d 	bl	800607c <__lo0bits>
 80065c2:	2101      	movs	r1, #1
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	6121      	str	r1, [r4, #16]
 80065c8:	6163      	str	r3, [r4, #20]
 80065ca:	3020      	adds	r0, #32
 80065cc:	e7e5      	b.n	800659a <__d2b+0x62>
 80065ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80065d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065d6:	6038      	str	r0, [r7, #0]
 80065d8:	6918      	ldr	r0, [r3, #16]
 80065da:	f7ff fd2f 	bl	800603c <__hi0bits>
 80065de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80065e2:	6031      	str	r1, [r6, #0]
 80065e4:	e7e1      	b.n	80065aa <__d2b+0x72>
 80065e6:	bf00      	nop
 80065e8:	08007ebf 	.word	0x08007ebf
 80065ec:	08007ed0 	.word	0x08007ed0

080065f0 <_calloc_r>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	fba1 5402 	umull	r5, r4, r1, r2
 80065f6:	b934      	cbnz	r4, 8006606 <_calloc_r+0x16>
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fe f8cb 	bl	8004794 <_malloc_r>
 80065fe:	4606      	mov	r6, r0
 8006600:	b928      	cbnz	r0, 800660e <_calloc_r+0x1e>
 8006602:	4630      	mov	r0, r6
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	220c      	movs	r2, #12
 8006608:	2600      	movs	r6, #0
 800660a:	6002      	str	r2, [r0, #0]
 800660c:	e7f9      	b.n	8006602 <_calloc_r+0x12>
 800660e:	462a      	mov	r2, r5
 8006610:	4621      	mov	r1, r4
 8006612:	f7fe f84f 	bl	80046b4 <memset>
 8006616:	e7f4      	b.n	8006602 <_calloc_r+0x12>

08006618 <__ssputs_r>:
 8006618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	688e      	ldr	r6, [r1, #8]
 800661e:	4682      	mov	sl, r0
 8006620:	429e      	cmp	r6, r3
 8006622:	460c      	mov	r4, r1
 8006624:	4690      	mov	r8, r2
 8006626:	461f      	mov	r7, r3
 8006628:	d838      	bhi.n	800669c <__ssputs_r+0x84>
 800662a:	898a      	ldrh	r2, [r1, #12]
 800662c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006630:	d032      	beq.n	8006698 <__ssputs_r+0x80>
 8006632:	6825      	ldr	r5, [r4, #0]
 8006634:	6909      	ldr	r1, [r1, #16]
 8006636:	3301      	adds	r3, #1
 8006638:	eba5 0901 	sub.w	r9, r5, r1
 800663c:	6965      	ldr	r5, [r4, #20]
 800663e:	444b      	add	r3, r9
 8006640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	429d      	cmp	r5, r3
 800664c:	bf38      	it	cc
 800664e:	461d      	movcc	r5, r3
 8006650:	0553      	lsls	r3, r2, #21
 8006652:	d531      	bpl.n	80066b8 <__ssputs_r+0xa0>
 8006654:	4629      	mov	r1, r5
 8006656:	f7fe f89d 	bl	8004794 <_malloc_r>
 800665a:	4606      	mov	r6, r0
 800665c:	b950      	cbnz	r0, 8006674 <__ssputs_r+0x5c>
 800665e:	230c      	movs	r3, #12
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	f8ca 3000 	str.w	r3, [sl]
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006674:	464a      	mov	r2, r9
 8006676:	6921      	ldr	r1, [r4, #16]
 8006678:	f7ff fc1e 	bl	8005eb8 <memcpy>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	6126      	str	r6, [r4, #16]
 800668a:	444e      	add	r6, r9
 800668c:	6026      	str	r6, [r4, #0]
 800668e:	463e      	mov	r6, r7
 8006690:	6165      	str	r5, [r4, #20]
 8006692:	eba5 0509 	sub.w	r5, r5, r9
 8006696:	60a5      	str	r5, [r4, #8]
 8006698:	42be      	cmp	r6, r7
 800669a:	d900      	bls.n	800669e <__ssputs_r+0x86>
 800669c:	463e      	mov	r6, r7
 800669e:	4632      	mov	r2, r6
 80066a0:	4641      	mov	r1, r8
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	f000 f959 	bl	800695a <memmove>
 80066a8:	68a3      	ldr	r3, [r4, #8]
 80066aa:	2000      	movs	r0, #0
 80066ac:	1b9b      	subs	r3, r3, r6
 80066ae:	60a3      	str	r3, [r4, #8]
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	4433      	add	r3, r6
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	e7db      	b.n	8006670 <__ssputs_r+0x58>
 80066b8:	462a      	mov	r2, r5
 80066ba:	f000 f968 	bl	800698e <_realloc_r>
 80066be:	4606      	mov	r6, r0
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d1e1      	bne.n	8006688 <__ssputs_r+0x70>
 80066c4:	4650      	mov	r0, sl
 80066c6:	6921      	ldr	r1, [r4, #16]
 80066c8:	f7fd fffc 	bl	80046c4 <_free_r>
 80066cc:	e7c7      	b.n	800665e <__ssputs_r+0x46>
	...

080066d0 <_svfiprintf_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	4698      	mov	r8, r3
 80066d6:	898b      	ldrh	r3, [r1, #12]
 80066d8:	4607      	mov	r7, r0
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	460d      	mov	r5, r1
 80066de:	4614      	mov	r4, r2
 80066e0:	b09d      	sub	sp, #116	; 0x74
 80066e2:	d50e      	bpl.n	8006702 <_svfiprintf_r+0x32>
 80066e4:	690b      	ldr	r3, [r1, #16]
 80066e6:	b963      	cbnz	r3, 8006702 <_svfiprintf_r+0x32>
 80066e8:	2140      	movs	r1, #64	; 0x40
 80066ea:	f7fe f853 	bl	8004794 <_malloc_r>
 80066ee:	6028      	str	r0, [r5, #0]
 80066f0:	6128      	str	r0, [r5, #16]
 80066f2:	b920      	cbnz	r0, 80066fe <_svfiprintf_r+0x2e>
 80066f4:	230c      	movs	r3, #12
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	e0d1      	b.n	80068a2 <_svfiprintf_r+0x1d2>
 80066fe:	2340      	movs	r3, #64	; 0x40
 8006700:	616b      	str	r3, [r5, #20]
 8006702:	2300      	movs	r3, #0
 8006704:	9309      	str	r3, [sp, #36]	; 0x24
 8006706:	2320      	movs	r3, #32
 8006708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800670c:	2330      	movs	r3, #48	; 0x30
 800670e:	f04f 0901 	mov.w	r9, #1
 8006712:	f8cd 800c 	str.w	r8, [sp, #12]
 8006716:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068bc <_svfiprintf_r+0x1ec>
 800671a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800671e:	4623      	mov	r3, r4
 8006720:	469a      	mov	sl, r3
 8006722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006726:	b10a      	cbz	r2, 800672c <_svfiprintf_r+0x5c>
 8006728:	2a25      	cmp	r2, #37	; 0x25
 800672a:	d1f9      	bne.n	8006720 <_svfiprintf_r+0x50>
 800672c:	ebba 0b04 	subs.w	fp, sl, r4
 8006730:	d00b      	beq.n	800674a <_svfiprintf_r+0x7a>
 8006732:	465b      	mov	r3, fp
 8006734:	4622      	mov	r2, r4
 8006736:	4629      	mov	r1, r5
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff ff6d 	bl	8006618 <__ssputs_r>
 800673e:	3001      	adds	r0, #1
 8006740:	f000 80aa 	beq.w	8006898 <_svfiprintf_r+0x1c8>
 8006744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006746:	445a      	add	r2, fp
 8006748:	9209      	str	r2, [sp, #36]	; 0x24
 800674a:	f89a 3000 	ldrb.w	r3, [sl]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80a2 	beq.w	8006898 <_svfiprintf_r+0x1c8>
 8006754:	2300      	movs	r3, #0
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800675e:	f10a 0a01 	add.w	sl, sl, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	9307      	str	r3, [sp, #28]
 8006766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800676a:	931a      	str	r3, [sp, #104]	; 0x68
 800676c:	4654      	mov	r4, sl
 800676e:	2205      	movs	r2, #5
 8006770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006774:	4851      	ldr	r0, [pc, #324]	; (80068bc <_svfiprintf_r+0x1ec>)
 8006776:	f7ff fb91 	bl	8005e9c <memchr>
 800677a:	9a04      	ldr	r2, [sp, #16]
 800677c:	b9d8      	cbnz	r0, 80067b6 <_svfiprintf_r+0xe6>
 800677e:	06d0      	lsls	r0, r2, #27
 8006780:	bf44      	itt	mi
 8006782:	2320      	movmi	r3, #32
 8006784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006788:	0711      	lsls	r1, r2, #28
 800678a:	bf44      	itt	mi
 800678c:	232b      	movmi	r3, #43	; 0x2b
 800678e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006792:	f89a 3000 	ldrb.w	r3, [sl]
 8006796:	2b2a      	cmp	r3, #42	; 0x2a
 8006798:	d015      	beq.n	80067c6 <_svfiprintf_r+0xf6>
 800679a:	4654      	mov	r4, sl
 800679c:	2000      	movs	r0, #0
 800679e:	f04f 0c0a 	mov.w	ip, #10
 80067a2:	9a07      	ldr	r2, [sp, #28]
 80067a4:	4621      	mov	r1, r4
 80067a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067aa:	3b30      	subs	r3, #48	; 0x30
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	d94e      	bls.n	800684e <_svfiprintf_r+0x17e>
 80067b0:	b1b0      	cbz	r0, 80067e0 <_svfiprintf_r+0x110>
 80067b2:	9207      	str	r2, [sp, #28]
 80067b4:	e014      	b.n	80067e0 <_svfiprintf_r+0x110>
 80067b6:	eba0 0308 	sub.w	r3, r0, r8
 80067ba:	fa09 f303 	lsl.w	r3, r9, r3
 80067be:	4313      	orrs	r3, r2
 80067c0:	46a2      	mov	sl, r4
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	e7d2      	b.n	800676c <_svfiprintf_r+0x9c>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	1d19      	adds	r1, r3, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	9103      	str	r1, [sp, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfbb      	ittet	lt
 80067d2:	425b      	neglt	r3, r3
 80067d4:	f042 0202 	orrlt.w	r2, r2, #2
 80067d8:	9307      	strge	r3, [sp, #28]
 80067da:	9307      	strlt	r3, [sp, #28]
 80067dc:	bfb8      	it	lt
 80067de:	9204      	strlt	r2, [sp, #16]
 80067e0:	7823      	ldrb	r3, [r4, #0]
 80067e2:	2b2e      	cmp	r3, #46	; 0x2e
 80067e4:	d10c      	bne.n	8006800 <_svfiprintf_r+0x130>
 80067e6:	7863      	ldrb	r3, [r4, #1]
 80067e8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ea:	d135      	bne.n	8006858 <_svfiprintf_r+0x188>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3402      	adds	r4, #2
 80067f0:	1d1a      	adds	r2, r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	9203      	str	r2, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80068c0 <_svfiprintf_r+0x1f0>
 8006804:	2203      	movs	r2, #3
 8006806:	4650      	mov	r0, sl
 8006808:	7821      	ldrb	r1, [r4, #0]
 800680a:	f7ff fb47 	bl	8005e9c <memchr>
 800680e:	b140      	cbz	r0, 8006822 <_svfiprintf_r+0x152>
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	eba0 000a 	sub.w	r0, r0, sl
 8006816:	fa03 f000 	lsl.w	r0, r3, r0
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	3401      	adds	r4, #1
 800681e:	4303      	orrs	r3, r0
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006826:	2206      	movs	r2, #6
 8006828:	4826      	ldr	r0, [pc, #152]	; (80068c4 <_svfiprintf_r+0x1f4>)
 800682a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800682e:	f7ff fb35 	bl	8005e9c <memchr>
 8006832:	2800      	cmp	r0, #0
 8006834:	d038      	beq.n	80068a8 <_svfiprintf_r+0x1d8>
 8006836:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <_svfiprintf_r+0x1f8>)
 8006838:	bb1b      	cbnz	r3, 8006882 <_svfiprintf_r+0x1b2>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	3307      	adds	r3, #7
 800683e:	f023 0307 	bic.w	r3, r3, #7
 8006842:	3308      	adds	r3, #8
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	4433      	add	r3, r6
 800684a:	9309      	str	r3, [sp, #36]	; 0x24
 800684c:	e767      	b.n	800671e <_svfiprintf_r+0x4e>
 800684e:	460c      	mov	r4, r1
 8006850:	2001      	movs	r0, #1
 8006852:	fb0c 3202 	mla	r2, ip, r2, r3
 8006856:	e7a5      	b.n	80067a4 <_svfiprintf_r+0xd4>
 8006858:	2300      	movs	r3, #0
 800685a:	f04f 0c0a 	mov.w	ip, #10
 800685e:	4619      	mov	r1, r3
 8006860:	3401      	adds	r4, #1
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	4620      	mov	r0, r4
 8006866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686a:	3a30      	subs	r2, #48	; 0x30
 800686c:	2a09      	cmp	r2, #9
 800686e:	d903      	bls.n	8006878 <_svfiprintf_r+0x1a8>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0c5      	beq.n	8006800 <_svfiprintf_r+0x130>
 8006874:	9105      	str	r1, [sp, #20]
 8006876:	e7c3      	b.n	8006800 <_svfiprintf_r+0x130>
 8006878:	4604      	mov	r4, r0
 800687a:	2301      	movs	r3, #1
 800687c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006880:	e7f0      	b.n	8006864 <_svfiprintf_r+0x194>
 8006882:	ab03      	add	r3, sp, #12
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	462a      	mov	r2, r5
 8006888:	4638      	mov	r0, r7
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <_svfiprintf_r+0x1fc>)
 800688c:	a904      	add	r1, sp, #16
 800688e:	f7fe f893 	bl	80049b8 <_printf_float>
 8006892:	1c42      	adds	r2, r0, #1
 8006894:	4606      	mov	r6, r0
 8006896:	d1d6      	bne.n	8006846 <_svfiprintf_r+0x176>
 8006898:	89ab      	ldrh	r3, [r5, #12]
 800689a:	065b      	lsls	r3, r3, #25
 800689c:	f53f af2c 	bmi.w	80066f8 <_svfiprintf_r+0x28>
 80068a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a2:	b01d      	add	sp, #116	; 0x74
 80068a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4638      	mov	r0, r7
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <_svfiprintf_r+0x1fc>)
 80068b2:	a904      	add	r1, sp, #16
 80068b4:	f7fe fb1c 	bl	8004ef0 <_printf_i>
 80068b8:	e7eb      	b.n	8006892 <_svfiprintf_r+0x1c2>
 80068ba:	bf00      	nop
 80068bc:	0800802c 	.word	0x0800802c
 80068c0:	08008032 	.word	0x08008032
 80068c4:	08008036 	.word	0x08008036
 80068c8:	080049b9 	.word	0x080049b9
 80068cc:	08006619 	.word	0x08006619

080068d0 <__assert_func>:
 80068d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068d2:	4614      	mov	r4, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b09      	ldr	r3, [pc, #36]	; (80068fc <__assert_func+0x2c>)
 80068d8:	4605      	mov	r5, r0
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68d8      	ldr	r0, [r3, #12]
 80068de:	b14c      	cbz	r4, 80068f4 <__assert_func+0x24>
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <__assert_func+0x30>)
 80068e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068e6:	9100      	str	r1, [sp, #0]
 80068e8:	462b      	mov	r3, r5
 80068ea:	4906      	ldr	r1, [pc, #24]	; (8006904 <__assert_func+0x34>)
 80068ec:	f000 f80e 	bl	800690c <fiprintf>
 80068f0:	f000 faa2 	bl	8006e38 <abort>
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <__assert_func+0x38>)
 80068f6:	461c      	mov	r4, r3
 80068f8:	e7f3      	b.n	80068e2 <__assert_func+0x12>
 80068fa:	bf00      	nop
 80068fc:	20000040 	.word	0x20000040
 8006900:	0800803d 	.word	0x0800803d
 8006904:	0800804a 	.word	0x0800804a
 8006908:	08008078 	.word	0x08008078

0800690c <fiprintf>:
 800690c:	b40e      	push	{r1, r2, r3}
 800690e:	b503      	push	{r0, r1, lr}
 8006910:	4601      	mov	r1, r0
 8006912:	ab03      	add	r3, sp, #12
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <fiprintf+0x20>)
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	f000 f88d 	bl	8006a3c <_vfiprintf_r>
 8006922:	b002      	add	sp, #8
 8006924:	f85d eb04 	ldr.w	lr, [sp], #4
 8006928:	b003      	add	sp, #12
 800692a:	4770      	bx	lr
 800692c:	20000040 	.word	0x20000040

08006930 <__retarget_lock_init_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_acquire_recursive>:
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_release_recursive>:
 8006934:	4770      	bx	lr

08006936 <__ascii_mbtowc>:
 8006936:	b082      	sub	sp, #8
 8006938:	b901      	cbnz	r1, 800693c <__ascii_mbtowc+0x6>
 800693a:	a901      	add	r1, sp, #4
 800693c:	b142      	cbz	r2, 8006950 <__ascii_mbtowc+0x1a>
 800693e:	b14b      	cbz	r3, 8006954 <__ascii_mbtowc+0x1e>
 8006940:	7813      	ldrb	r3, [r2, #0]
 8006942:	600b      	str	r3, [r1, #0]
 8006944:	7812      	ldrb	r2, [r2, #0]
 8006946:	1e10      	subs	r0, r2, #0
 8006948:	bf18      	it	ne
 800694a:	2001      	movne	r0, #1
 800694c:	b002      	add	sp, #8
 800694e:	4770      	bx	lr
 8006950:	4610      	mov	r0, r2
 8006952:	e7fb      	b.n	800694c <__ascii_mbtowc+0x16>
 8006954:	f06f 0001 	mvn.w	r0, #1
 8006958:	e7f8      	b.n	800694c <__ascii_mbtowc+0x16>

0800695a <memmove>:
 800695a:	4288      	cmp	r0, r1
 800695c:	b510      	push	{r4, lr}
 800695e:	eb01 0402 	add.w	r4, r1, r2
 8006962:	d902      	bls.n	800696a <memmove+0x10>
 8006964:	4284      	cmp	r4, r0
 8006966:	4623      	mov	r3, r4
 8006968:	d807      	bhi.n	800697a <memmove+0x20>
 800696a:	1e43      	subs	r3, r0, #1
 800696c:	42a1      	cmp	r1, r4
 800696e:	d008      	beq.n	8006982 <memmove+0x28>
 8006970:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006974:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006978:	e7f8      	b.n	800696c <memmove+0x12>
 800697a:	4601      	mov	r1, r0
 800697c:	4402      	add	r2, r0
 800697e:	428a      	cmp	r2, r1
 8006980:	d100      	bne.n	8006984 <memmove+0x2a>
 8006982:	bd10      	pop	{r4, pc}
 8006984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006988:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800698c:	e7f7      	b.n	800697e <memmove+0x24>

0800698e <_realloc_r>:
 800698e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006992:	4680      	mov	r8, r0
 8006994:	4614      	mov	r4, r2
 8006996:	460e      	mov	r6, r1
 8006998:	b921      	cbnz	r1, 80069a4 <_realloc_r+0x16>
 800699a:	4611      	mov	r1, r2
 800699c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	f7fd bef8 	b.w	8004794 <_malloc_r>
 80069a4:	b92a      	cbnz	r2, 80069b2 <_realloc_r+0x24>
 80069a6:	f7fd fe8d 	bl	80046c4 <_free_r>
 80069aa:	4625      	mov	r5, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b2:	f000 fc61 	bl	8007278 <_malloc_usable_size_r>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4607      	mov	r7, r0
 80069ba:	d802      	bhi.n	80069c2 <_realloc_r+0x34>
 80069bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069c0:	d812      	bhi.n	80069e8 <_realloc_r+0x5a>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4640      	mov	r0, r8
 80069c6:	f7fd fee5 	bl	8004794 <_malloc_r>
 80069ca:	4605      	mov	r5, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0ed      	beq.n	80069ac <_realloc_r+0x1e>
 80069d0:	42bc      	cmp	r4, r7
 80069d2:	4622      	mov	r2, r4
 80069d4:	4631      	mov	r1, r6
 80069d6:	bf28      	it	cs
 80069d8:	463a      	movcs	r2, r7
 80069da:	f7ff fa6d 	bl	8005eb8 <memcpy>
 80069de:	4631      	mov	r1, r6
 80069e0:	4640      	mov	r0, r8
 80069e2:	f7fd fe6f 	bl	80046c4 <_free_r>
 80069e6:	e7e1      	b.n	80069ac <_realloc_r+0x1e>
 80069e8:	4635      	mov	r5, r6
 80069ea:	e7df      	b.n	80069ac <_realloc_r+0x1e>

080069ec <__sfputc_r>:
 80069ec:	6893      	ldr	r3, [r2, #8]
 80069ee:	b410      	push	{r4}
 80069f0:	3b01      	subs	r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	6093      	str	r3, [r2, #8]
 80069f6:	da07      	bge.n	8006a08 <__sfputc_r+0x1c>
 80069f8:	6994      	ldr	r4, [r2, #24]
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	db01      	blt.n	8006a02 <__sfputc_r+0x16>
 80069fe:	290a      	cmp	r1, #10
 8006a00:	d102      	bne.n	8006a08 <__sfputc_r+0x1c>
 8006a02:	bc10      	pop	{r4}
 8006a04:	f000 b94a 	b.w	8006c9c <__swbuf_r>
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	1c58      	adds	r0, r3, #1
 8006a0c:	6010      	str	r0, [r2, #0]
 8006a0e:	7019      	strb	r1, [r3, #0]
 8006a10:	4608      	mov	r0, r1
 8006a12:	bc10      	pop	{r4}
 8006a14:	4770      	bx	lr

08006a16 <__sfputs_r>:
 8006a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460f      	mov	r7, r1
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	18d5      	adds	r5, r2, r3
 8006a20:	42ac      	cmp	r4, r5
 8006a22:	d101      	bne.n	8006a28 <__sfputs_r+0x12>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e007      	b.n	8006a38 <__sfputs_r+0x22>
 8006a28:	463a      	mov	r2, r7
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a30:	f7ff ffdc 	bl	80069ec <__sfputc_r>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d1f3      	bne.n	8006a20 <__sfputs_r+0xa>
 8006a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a3c <_vfiprintf_r>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	460d      	mov	r5, r1
 8006a42:	4614      	mov	r4, r2
 8006a44:	4698      	mov	r8, r3
 8006a46:	4606      	mov	r6, r0
 8006a48:	b09d      	sub	sp, #116	; 0x74
 8006a4a:	b118      	cbz	r0, 8006a54 <_vfiprintf_r+0x18>
 8006a4c:	6983      	ldr	r3, [r0, #24]
 8006a4e:	b90b      	cbnz	r3, 8006a54 <_vfiprintf_r+0x18>
 8006a50:	f000 fb10 	bl	8007074 <__sinit>
 8006a54:	4b89      	ldr	r3, [pc, #548]	; (8006c7c <_vfiprintf_r+0x240>)
 8006a56:	429d      	cmp	r5, r3
 8006a58:	d11b      	bne.n	8006a92 <_vfiprintf_r+0x56>
 8006a5a:	6875      	ldr	r5, [r6, #4]
 8006a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	d405      	bmi.n	8006a6e <_vfiprintf_r+0x32>
 8006a62:	89ab      	ldrh	r3, [r5, #12]
 8006a64:	059a      	lsls	r2, r3, #22
 8006a66:	d402      	bmi.n	8006a6e <_vfiprintf_r+0x32>
 8006a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a6a:	f7ff ff62 	bl	8006932 <__retarget_lock_acquire_recursive>
 8006a6e:	89ab      	ldrh	r3, [r5, #12]
 8006a70:	071b      	lsls	r3, r3, #28
 8006a72:	d501      	bpl.n	8006a78 <_vfiprintf_r+0x3c>
 8006a74:	692b      	ldr	r3, [r5, #16]
 8006a76:	b9eb      	cbnz	r3, 8006ab4 <_vfiprintf_r+0x78>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f000 f96e 	bl	8006d5c <__swsetup_r>
 8006a80:	b1c0      	cbz	r0, 8006ab4 <_vfiprintf_r+0x78>
 8006a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a84:	07dc      	lsls	r4, r3, #31
 8006a86:	d50e      	bpl.n	8006aa6 <_vfiprintf_r+0x6a>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	b01d      	add	sp, #116	; 0x74
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <_vfiprintf_r+0x244>)
 8006a94:	429d      	cmp	r5, r3
 8006a96:	d101      	bne.n	8006a9c <_vfiprintf_r+0x60>
 8006a98:	68b5      	ldr	r5, [r6, #8]
 8006a9a:	e7df      	b.n	8006a5c <_vfiprintf_r+0x20>
 8006a9c:	4b79      	ldr	r3, [pc, #484]	; (8006c84 <_vfiprintf_r+0x248>)
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	bf08      	it	eq
 8006aa2:	68f5      	ldreq	r5, [r6, #12]
 8006aa4:	e7da      	b.n	8006a5c <_vfiprintf_r+0x20>
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	0598      	lsls	r0, r3, #22
 8006aaa:	d4ed      	bmi.n	8006a88 <_vfiprintf_r+0x4c>
 8006aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aae:	f7ff ff41 	bl	8006934 <__retarget_lock_release_recursive>
 8006ab2:	e7e9      	b.n	8006a88 <_vfiprintf_r+0x4c>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab8:	2320      	movs	r3, #32
 8006aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006abe:	2330      	movs	r3, #48	; 0x30
 8006ac0:	f04f 0901 	mov.w	r9, #1
 8006ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ac8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c88 <_vfiprintf_r+0x24c>
 8006acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	469a      	mov	sl, r3
 8006ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad8:	b10a      	cbz	r2, 8006ade <_vfiprintf_r+0xa2>
 8006ada:	2a25      	cmp	r2, #37	; 0x25
 8006adc:	d1f9      	bne.n	8006ad2 <_vfiprintf_r+0x96>
 8006ade:	ebba 0b04 	subs.w	fp, sl, r4
 8006ae2:	d00b      	beq.n	8006afc <_vfiprintf_r+0xc0>
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7ff ff93 	bl	8006a16 <__sfputs_r>
 8006af0:	3001      	adds	r0, #1
 8006af2:	f000 80aa 	beq.w	8006c4a <_vfiprintf_r+0x20e>
 8006af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af8:	445a      	add	r2, fp
 8006afa:	9209      	str	r2, [sp, #36]	; 0x24
 8006afc:	f89a 3000 	ldrb.w	r3, [sl]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80a2 	beq.w	8006c4a <_vfiprintf_r+0x20e>
 8006b06:	2300      	movs	r3, #0
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b10:	f10a 0a01 	add.w	sl, sl, #1
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	9307      	str	r3, [sp, #28]
 8006b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b1e:	4654      	mov	r4, sl
 8006b20:	2205      	movs	r2, #5
 8006b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b26:	4858      	ldr	r0, [pc, #352]	; (8006c88 <_vfiprintf_r+0x24c>)
 8006b28:	f7ff f9b8 	bl	8005e9c <memchr>
 8006b2c:	9a04      	ldr	r2, [sp, #16]
 8006b2e:	b9d8      	cbnz	r0, 8006b68 <_vfiprintf_r+0x12c>
 8006b30:	06d1      	lsls	r1, r2, #27
 8006b32:	bf44      	itt	mi
 8006b34:	2320      	movmi	r3, #32
 8006b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3a:	0713      	lsls	r3, r2, #28
 8006b3c:	bf44      	itt	mi
 8006b3e:	232b      	movmi	r3, #43	; 0x2b
 8006b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b44:	f89a 3000 	ldrb.w	r3, [sl]
 8006b48:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4a:	d015      	beq.n	8006b78 <_vfiprintf_r+0x13c>
 8006b4c:	4654      	mov	r4, sl
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f04f 0c0a 	mov.w	ip, #10
 8006b54:	9a07      	ldr	r2, [sp, #28]
 8006b56:	4621      	mov	r1, r4
 8006b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b5c:	3b30      	subs	r3, #48	; 0x30
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d94e      	bls.n	8006c00 <_vfiprintf_r+0x1c4>
 8006b62:	b1b0      	cbz	r0, 8006b92 <_vfiprintf_r+0x156>
 8006b64:	9207      	str	r2, [sp, #28]
 8006b66:	e014      	b.n	8006b92 <_vfiprintf_r+0x156>
 8006b68:	eba0 0308 	sub.w	r3, r0, r8
 8006b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	46a2      	mov	sl, r4
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	e7d2      	b.n	8006b1e <_vfiprintf_r+0xe2>
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	1d19      	adds	r1, r3, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	9103      	str	r1, [sp, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bfbb      	ittet	lt
 8006b84:	425b      	neglt	r3, r3
 8006b86:	f042 0202 	orrlt.w	r2, r2, #2
 8006b8a:	9307      	strge	r3, [sp, #28]
 8006b8c:	9307      	strlt	r3, [sp, #28]
 8006b8e:	bfb8      	it	lt
 8006b90:	9204      	strlt	r2, [sp, #16]
 8006b92:	7823      	ldrb	r3, [r4, #0]
 8006b94:	2b2e      	cmp	r3, #46	; 0x2e
 8006b96:	d10c      	bne.n	8006bb2 <_vfiprintf_r+0x176>
 8006b98:	7863      	ldrb	r3, [r4, #1]
 8006b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9c:	d135      	bne.n	8006c0a <_vfiprintf_r+0x1ce>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	3402      	adds	r4, #2
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	9203      	str	r2, [sp, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfb8      	it	lt
 8006bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006c8c <_vfiprintf_r+0x250>
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	4650      	mov	r0, sl
 8006bba:	7821      	ldrb	r1, [r4, #0]
 8006bbc:	f7ff f96e 	bl	8005e9c <memchr>
 8006bc0:	b140      	cbz	r0, 8006bd4 <_vfiprintf_r+0x198>
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	eba0 000a 	sub.w	r0, r0, sl
 8006bc8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	3401      	adds	r4, #1
 8006bd0:	4303      	orrs	r3, r0
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd8:	2206      	movs	r2, #6
 8006bda:	482d      	ldr	r0, [pc, #180]	; (8006c90 <_vfiprintf_r+0x254>)
 8006bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006be0:	f7ff f95c 	bl	8005e9c <memchr>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d03f      	beq.n	8006c68 <_vfiprintf_r+0x22c>
 8006be8:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <_vfiprintf_r+0x258>)
 8006bea:	bb1b      	cbnz	r3, 8006c34 <_vfiprintf_r+0x1f8>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	3307      	adds	r3, #7
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfa:	443b      	add	r3, r7
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfe:	e767      	b.n	8006ad0 <_vfiprintf_r+0x94>
 8006c00:	460c      	mov	r4, r1
 8006c02:	2001      	movs	r0, #1
 8006c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c08:	e7a5      	b.n	8006b56 <_vfiprintf_r+0x11a>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f04f 0c0a 	mov.w	ip, #10
 8006c10:	4619      	mov	r1, r3
 8006c12:	3401      	adds	r4, #1
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c1c:	3a30      	subs	r2, #48	; 0x30
 8006c1e:	2a09      	cmp	r2, #9
 8006c20:	d903      	bls.n	8006c2a <_vfiprintf_r+0x1ee>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0c5      	beq.n	8006bb2 <_vfiprintf_r+0x176>
 8006c26:	9105      	str	r1, [sp, #20]
 8006c28:	e7c3      	b.n	8006bb2 <_vfiprintf_r+0x176>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c32:	e7f0      	b.n	8006c16 <_vfiprintf_r+0x1da>
 8006c34:	ab03      	add	r3, sp, #12
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <_vfiprintf_r+0x25c>)
 8006c3e:	a904      	add	r1, sp, #16
 8006c40:	f7fd feba 	bl	80049b8 <_printf_float>
 8006c44:	4607      	mov	r7, r0
 8006c46:	1c78      	adds	r0, r7, #1
 8006c48:	d1d6      	bne.n	8006bf8 <_vfiprintf_r+0x1bc>
 8006c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c4c:	07d9      	lsls	r1, r3, #31
 8006c4e:	d405      	bmi.n	8006c5c <_vfiprintf_r+0x220>
 8006c50:	89ab      	ldrh	r3, [r5, #12]
 8006c52:	059a      	lsls	r2, r3, #22
 8006c54:	d402      	bmi.n	8006c5c <_vfiprintf_r+0x220>
 8006c56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c58:	f7ff fe6c 	bl	8006934 <__retarget_lock_release_recursive>
 8006c5c:	89ab      	ldrh	r3, [r5, #12]
 8006c5e:	065b      	lsls	r3, r3, #25
 8006c60:	f53f af12 	bmi.w	8006a88 <_vfiprintf_r+0x4c>
 8006c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c66:	e711      	b.n	8006a8c <_vfiprintf_r+0x50>
 8006c68:	ab03      	add	r3, sp, #12
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <_vfiprintf_r+0x25c>)
 8006c72:	a904      	add	r1, sp, #16
 8006c74:	f7fe f93c 	bl	8004ef0 <_printf_i>
 8006c78:	e7e4      	b.n	8006c44 <_vfiprintf_r+0x208>
 8006c7a:	bf00      	nop
 8006c7c:	080081a4 	.word	0x080081a4
 8006c80:	080081c4 	.word	0x080081c4
 8006c84:	08008184 	.word	0x08008184
 8006c88:	0800802c 	.word	0x0800802c
 8006c8c:	08008032 	.word	0x08008032
 8006c90:	08008036 	.word	0x08008036
 8006c94:	080049b9 	.word	0x080049b9
 8006c98:	08006a17 	.word	0x08006a17

08006c9c <__swbuf_r>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	b118      	cbz	r0, 8006cae <__swbuf_r+0x12>
 8006ca6:	6983      	ldr	r3, [r0, #24]
 8006ca8:	b90b      	cbnz	r3, 8006cae <__swbuf_r+0x12>
 8006caa:	f000 f9e3 	bl	8007074 <__sinit>
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <__swbuf_r+0x98>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d12b      	bne.n	8006d0c <__swbuf_r+0x70>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	69a3      	ldr	r3, [r4, #24]
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	071a      	lsls	r2, r3, #28
 8006cbe:	d52f      	bpl.n	8006d20 <__swbuf_r+0x84>
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	b36b      	cbz	r3, 8006d20 <__swbuf_r+0x84>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	b2f6      	uxtb	r6, r6
 8006cca:	1ac0      	subs	r0, r0, r3
 8006ccc:	6963      	ldr	r3, [r4, #20]
 8006cce:	4637      	mov	r7, r6
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	dc04      	bgt.n	8006cde <__swbuf_r+0x42>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 f938 	bl	8006f4c <_fflush_r>
 8006cdc:	bb30      	cbnz	r0, 8006d2c <__swbuf_r+0x90>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	701e      	strb	r6, [r3, #0]
 8006cee:	6963      	ldr	r3, [r4, #20]
 8006cf0:	4283      	cmp	r3, r0
 8006cf2:	d004      	beq.n	8006cfe <__swbuf_r+0x62>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	07db      	lsls	r3, r3, #31
 8006cf8:	d506      	bpl.n	8006d08 <__swbuf_r+0x6c>
 8006cfa:	2e0a      	cmp	r6, #10
 8006cfc:	d104      	bne.n	8006d08 <__swbuf_r+0x6c>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f923 	bl	8006f4c <_fflush_r>
 8006d06:	b988      	cbnz	r0, 8006d2c <__swbuf_r+0x90>
 8006d08:	4638      	mov	r0, r7
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <__swbuf_r+0x9c>)
 8006d0e:	429c      	cmp	r4, r3
 8006d10:	d101      	bne.n	8006d16 <__swbuf_r+0x7a>
 8006d12:	68ac      	ldr	r4, [r5, #8]
 8006d14:	e7cf      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <__swbuf_r+0xa0>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	bf08      	it	eq
 8006d1c:	68ec      	ldreq	r4, [r5, #12]
 8006d1e:	e7ca      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f81a 	bl	8006d5c <__swsetup_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d0cb      	beq.n	8006cc4 <__swbuf_r+0x28>
 8006d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d30:	e7ea      	b.n	8006d08 <__swbuf_r+0x6c>
 8006d32:	bf00      	nop
 8006d34:	080081a4 	.word	0x080081a4
 8006d38:	080081c4 	.word	0x080081c4
 8006d3c:	08008184 	.word	0x08008184

08006d40 <__ascii_wctomb>:
 8006d40:	4603      	mov	r3, r0
 8006d42:	4608      	mov	r0, r1
 8006d44:	b141      	cbz	r1, 8006d58 <__ascii_wctomb+0x18>
 8006d46:	2aff      	cmp	r2, #255	; 0xff
 8006d48:	d904      	bls.n	8006d54 <__ascii_wctomb+0x14>
 8006d4a:	228a      	movs	r2, #138	; 0x8a
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	4770      	bx	lr
 8006d54:	2001      	movs	r0, #1
 8006d56:	700a      	strb	r2, [r1, #0]
 8006d58:	4770      	bx	lr
	...

08006d5c <__swsetup_r>:
 8006d5c:	4b32      	ldr	r3, [pc, #200]	; (8006e28 <__swsetup_r+0xcc>)
 8006d5e:	b570      	push	{r4, r5, r6, lr}
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	4606      	mov	r6, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	b125      	cbz	r5, 8006d72 <__swsetup_r+0x16>
 8006d68:	69ab      	ldr	r3, [r5, #24]
 8006d6a:	b913      	cbnz	r3, 8006d72 <__swsetup_r+0x16>
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f981 	bl	8007074 <__sinit>
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <__swsetup_r+0xd0>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d10f      	bne.n	8006d98 <__swsetup_r+0x3c>
 8006d78:	686c      	ldr	r4, [r5, #4]
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d80:	0719      	lsls	r1, r3, #28
 8006d82:	d42c      	bmi.n	8006dde <__swsetup_r+0x82>
 8006d84:	06dd      	lsls	r5, r3, #27
 8006d86:	d411      	bmi.n	8006dac <__swsetup_r+0x50>
 8006d88:	2309      	movs	r3, #9
 8006d8a:	6033      	str	r3, [r6, #0]
 8006d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	e03e      	b.n	8006e16 <__swsetup_r+0xba>
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <__swsetup_r+0xd4>)
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	d101      	bne.n	8006da2 <__swsetup_r+0x46>
 8006d9e:	68ac      	ldr	r4, [r5, #8]
 8006da0:	e7eb      	b.n	8006d7a <__swsetup_r+0x1e>
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <__swsetup_r+0xd8>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	bf08      	it	eq
 8006da8:	68ec      	ldreq	r4, [r5, #12]
 8006daa:	e7e6      	b.n	8006d7a <__swsetup_r+0x1e>
 8006dac:	0758      	lsls	r0, r3, #29
 8006dae:	d512      	bpl.n	8006dd6 <__swsetup_r+0x7a>
 8006db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db2:	b141      	cbz	r1, 8006dc6 <__swsetup_r+0x6a>
 8006db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006db8:	4299      	cmp	r1, r3
 8006dba:	d002      	beq.n	8006dc2 <__swsetup_r+0x66>
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7fd fc81 	bl	80046c4 <_free_r>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	f043 0308 	orr.w	r3, r3, #8
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	b94b      	cbnz	r3, 8006df6 <__swsetup_r+0x9a>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d003      	beq.n	8006df6 <__swsetup_r+0x9a>
 8006dee:	4621      	mov	r1, r4
 8006df0:	4630      	mov	r0, r6
 8006df2:	f000 fa01 	bl	80071f8 <__smakebuf_r>
 8006df6:	89a0      	ldrh	r0, [r4, #12]
 8006df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dfc:	f010 0301 	ands.w	r3, r0, #1
 8006e00:	d00a      	beq.n	8006e18 <__swsetup_r+0xbc>
 8006e02:	2300      	movs	r3, #0
 8006e04:	60a3      	str	r3, [r4, #8]
 8006e06:	6963      	ldr	r3, [r4, #20]
 8006e08:	425b      	negs	r3, r3
 8006e0a:	61a3      	str	r3, [r4, #24]
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	b943      	cbnz	r3, 8006e22 <__swsetup_r+0xc6>
 8006e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e14:	d1ba      	bne.n	8006d8c <__swsetup_r+0x30>
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	0781      	lsls	r1, r0, #30
 8006e1a:	bf58      	it	pl
 8006e1c:	6963      	ldrpl	r3, [r4, #20]
 8006e1e:	60a3      	str	r3, [r4, #8]
 8006e20:	e7f4      	b.n	8006e0c <__swsetup_r+0xb0>
 8006e22:	2000      	movs	r0, #0
 8006e24:	e7f7      	b.n	8006e16 <__swsetup_r+0xba>
 8006e26:	bf00      	nop
 8006e28:	20000040 	.word	0x20000040
 8006e2c:	080081a4 	.word	0x080081a4
 8006e30:	080081c4 	.word	0x080081c4
 8006e34:	08008184 	.word	0x08008184

08006e38 <abort>:
 8006e38:	2006      	movs	r0, #6
 8006e3a:	b508      	push	{r3, lr}
 8006e3c:	f000 fa4c 	bl	80072d8 <raise>
 8006e40:	2001      	movs	r0, #1
 8006e42:	f7fb f959 	bl	80020f8 <_exit>
	...

08006e48 <__sflush_r>:
 8006e48:	898a      	ldrh	r2, [r1, #12]
 8006e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	0710      	lsls	r0, r2, #28
 8006e50:	460c      	mov	r4, r1
 8006e52:	d457      	bmi.n	8006f04 <__sflush_r+0xbc>
 8006e54:	684b      	ldr	r3, [r1, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dc04      	bgt.n	8006e64 <__sflush_r+0x1c>
 8006e5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc01      	bgt.n	8006e64 <__sflush_r+0x1c>
 8006e60:	2000      	movs	r0, #0
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	d0fa      	beq.n	8006e60 <__sflush_r+0x18>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e70:	682f      	ldr	r7, [r5, #0]
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	d032      	beq.n	8006edc <__sflush_r+0x94>
 8006e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	075a      	lsls	r2, r3, #29
 8006e7c:	d505      	bpl.n	8006e8a <__sflush_r+0x42>
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	1ac0      	subs	r0, r0, r3
 8006e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e84:	b10b      	cbz	r3, 8006e8a <__sflush_r+0x42>
 8006e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e88:	1ac0      	subs	r0, r0, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e90:	4628      	mov	r0, r5
 8006e92:	6a21      	ldr	r1, [r4, #32]
 8006e94:	47b0      	blx	r6
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	d106      	bne.n	8006eaa <__sflush_r+0x62>
 8006e9c:	6829      	ldr	r1, [r5, #0]
 8006e9e:	291d      	cmp	r1, #29
 8006ea0:	d82c      	bhi.n	8006efc <__sflush_r+0xb4>
 8006ea2:	4a29      	ldr	r2, [pc, #164]	; (8006f48 <__sflush_r+0x100>)
 8006ea4:	40ca      	lsrs	r2, r1
 8006ea6:	07d6      	lsls	r6, r2, #31
 8006ea8:	d528      	bpl.n	8006efc <__sflush_r+0xb4>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	6062      	str	r2, [r4, #4]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	04d9      	lsls	r1, r3, #19
 8006eb2:	6022      	str	r2, [r4, #0]
 8006eb4:	d504      	bpl.n	8006ec0 <__sflush_r+0x78>
 8006eb6:	1c42      	adds	r2, r0, #1
 8006eb8:	d101      	bne.n	8006ebe <__sflush_r+0x76>
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	b903      	cbnz	r3, 8006ec0 <__sflush_r+0x78>
 8006ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8006ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec2:	602f      	str	r7, [r5, #0]
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	d0cb      	beq.n	8006e60 <__sflush_r+0x18>
 8006ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	d002      	beq.n	8006ed6 <__sflush_r+0x8e>
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7fd fbf7 	bl	80046c4 <_free_r>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8006eda:	e7c2      	b.n	8006e62 <__sflush_r+0x1a>
 8006edc:	6a21      	ldr	r1, [r4, #32]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b0      	blx	r6
 8006ee4:	1c41      	adds	r1, r0, #1
 8006ee6:	d1c7      	bne.n	8006e78 <__sflush_r+0x30>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0c4      	beq.n	8006e78 <__sflush_r+0x30>
 8006eee:	2b1d      	cmp	r3, #29
 8006ef0:	d001      	beq.n	8006ef6 <__sflush_r+0xae>
 8006ef2:	2b16      	cmp	r3, #22
 8006ef4:	d101      	bne.n	8006efa <__sflush_r+0xb2>
 8006ef6:	602f      	str	r7, [r5, #0]
 8006ef8:	e7b2      	b.n	8006e60 <__sflush_r+0x18>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	e7ae      	b.n	8006e62 <__sflush_r+0x1a>
 8006f04:	690f      	ldr	r7, [r1, #16]
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	d0aa      	beq.n	8006e60 <__sflush_r+0x18>
 8006f0a:	0793      	lsls	r3, r2, #30
 8006f0c:	bf18      	it	ne
 8006f0e:	2300      	movne	r3, #0
 8006f10:	680e      	ldr	r6, [r1, #0]
 8006f12:	bf08      	it	eq
 8006f14:	694b      	ldreq	r3, [r1, #20]
 8006f16:	1bf6      	subs	r6, r6, r7
 8006f18:	600f      	str	r7, [r1, #0]
 8006f1a:	608b      	str	r3, [r1, #8]
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	dd9f      	ble.n	8006e60 <__sflush_r+0x18>
 8006f20:	4633      	mov	r3, r6
 8006f22:	463a      	mov	r2, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	6a21      	ldr	r1, [r4, #32]
 8006f28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006f2c:	47e0      	blx	ip
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	dc06      	bgt.n	8006f40 <__sflush_r+0xf8>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	e790      	b.n	8006e62 <__sflush_r+0x1a>
 8006f40:	4407      	add	r7, r0
 8006f42:	1a36      	subs	r6, r6, r0
 8006f44:	e7ea      	b.n	8006f1c <__sflush_r+0xd4>
 8006f46:	bf00      	nop
 8006f48:	20400001 	.word	0x20400001

08006f4c <_fflush_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	690b      	ldr	r3, [r1, #16]
 8006f50:	4605      	mov	r5, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b913      	cbnz	r3, 8006f5c <_fflush_r+0x10>
 8006f56:	2500      	movs	r5, #0
 8006f58:	4628      	mov	r0, r5
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	b118      	cbz	r0, 8006f66 <_fflush_r+0x1a>
 8006f5e:	6983      	ldr	r3, [r0, #24]
 8006f60:	b90b      	cbnz	r3, 8006f66 <_fflush_r+0x1a>
 8006f62:	f000 f887 	bl	8007074 <__sinit>
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <_fflush_r+0x6c>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	d11b      	bne.n	8006fa4 <_fflush_r+0x58>
 8006f6c:	686c      	ldr	r4, [r5, #4]
 8006f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0ef      	beq.n	8006f56 <_fflush_r+0xa>
 8006f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f78:	07d0      	lsls	r0, r2, #31
 8006f7a:	d404      	bmi.n	8006f86 <_fflush_r+0x3a>
 8006f7c:	0599      	lsls	r1, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_fflush_r+0x3a>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f7ff fcd6 	bl	8006932 <__retarget_lock_acquire_recursive>
 8006f86:	4628      	mov	r0, r5
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7ff ff5d 	bl	8006e48 <__sflush_r>
 8006f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f90:	4605      	mov	r5, r0
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d4e0      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d4dd      	bmi.n	8006f58 <_fflush_r+0xc>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f7ff fcc9 	bl	8006934 <__retarget_lock_release_recursive>
 8006fa2:	e7d9      	b.n	8006f58 <_fflush_r+0xc>
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <_fflush_r+0x70>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d101      	bne.n	8006fae <_fflush_r+0x62>
 8006faa:	68ac      	ldr	r4, [r5, #8]
 8006fac:	e7df      	b.n	8006f6e <_fflush_r+0x22>
 8006fae:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <_fflush_r+0x74>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	bf08      	it	eq
 8006fb4:	68ec      	ldreq	r4, [r5, #12]
 8006fb6:	e7da      	b.n	8006f6e <_fflush_r+0x22>
 8006fb8:	080081a4 	.word	0x080081a4
 8006fbc:	080081c4 	.word	0x080081c4
 8006fc0:	08008184 	.word	0x08008184

08006fc4 <std>:
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e9c0 3300 	strd	r3, r3, [r0]
 8006fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd2:	6083      	str	r3, [r0, #8]
 8006fd4:	8181      	strh	r1, [r0, #12]
 8006fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8006fd8:	81c2      	strh	r2, [r0, #14]
 8006fda:	6183      	str	r3, [r0, #24]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	2208      	movs	r2, #8
 8006fe0:	305c      	adds	r0, #92	; 0x5c
 8006fe2:	f7fd fb67 	bl	80046b4 <memset>
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x38>)
 8006fe8:	6224      	str	r4, [r4, #32]
 8006fea:	6263      	str	r3, [r4, #36]	; 0x24
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <std+0x3c>)
 8006fee:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <std+0x40>)
 8006ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <std+0x44>)
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08007311 	.word	0x08007311
 8007000:	08007333 	.word	0x08007333
 8007004:	0800736b 	.word	0x0800736b
 8007008:	0800738f 	.word	0x0800738f

0800700c <_cleanup_r>:
 800700c:	4901      	ldr	r1, [pc, #4]	; (8007014 <_cleanup_r+0x8>)
 800700e:	f000 b8af 	b.w	8007170 <_fwalk_reent>
 8007012:	bf00      	nop
 8007014:	08006f4d 	.word	0x08006f4d

08007018 <__sfmoreglue>:
 8007018:	2268      	movs	r2, #104	; 0x68
 800701a:	b570      	push	{r4, r5, r6, lr}
 800701c:	1e4d      	subs	r5, r1, #1
 800701e:	4355      	muls	r5, r2
 8007020:	460e      	mov	r6, r1
 8007022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007026:	f7fd fbb5 	bl	8004794 <_malloc_r>
 800702a:	4604      	mov	r4, r0
 800702c:	b140      	cbz	r0, 8007040 <__sfmoreglue+0x28>
 800702e:	2100      	movs	r1, #0
 8007030:	e9c0 1600 	strd	r1, r6, [r0]
 8007034:	300c      	adds	r0, #12
 8007036:	60a0      	str	r0, [r4, #8]
 8007038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800703c:	f7fd fb3a 	bl	80046b4 <memset>
 8007040:	4620      	mov	r0, r4
 8007042:	bd70      	pop	{r4, r5, r6, pc}

08007044 <__sfp_lock_acquire>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sfp_lock_acquire+0x8>)
 8007046:	f7ff bc74 	b.w	8006932 <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	200003d5 	.word	0x200003d5

08007050 <__sfp_lock_release>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sfp_lock_release+0x8>)
 8007052:	f7ff bc6f 	b.w	8006934 <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	200003d5 	.word	0x200003d5

0800705c <__sinit_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sinit_lock_acquire+0x8>)
 800705e:	f7ff bc68 	b.w	8006932 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	200003d6 	.word	0x200003d6

08007068 <__sinit_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sinit_lock_release+0x8>)
 800706a:	f7ff bc63 	b.w	8006934 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	200003d6 	.word	0x200003d6

08007074 <__sinit>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	f7ff fff0 	bl	800705c <__sinit_lock_acquire>
 800707c:	69a3      	ldr	r3, [r4, #24]
 800707e:	b11b      	cbz	r3, 8007088 <__sinit+0x14>
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f7ff bff0 	b.w	8007068 <__sinit_lock_release>
 8007088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800708c:	6523      	str	r3, [r4, #80]	; 0x50
 800708e:	4b13      	ldr	r3, [pc, #76]	; (80070dc <__sinit+0x68>)
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <__sinit+0x6c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	62a2      	str	r2, [r4, #40]	; 0x28
 8007096:	42a3      	cmp	r3, r4
 8007098:	bf08      	it	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	4620      	mov	r0, r4
 800709e:	bf08      	it	eq
 80070a0:	61a3      	streq	r3, [r4, #24]
 80070a2:	f000 f81f 	bl	80070e4 <__sfp>
 80070a6:	6060      	str	r0, [r4, #4]
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 f81b 	bl	80070e4 <__sfp>
 80070ae:	60a0      	str	r0, [r4, #8]
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 f817 	bl	80070e4 <__sfp>
 80070b6:	2200      	movs	r2, #0
 80070b8:	2104      	movs	r1, #4
 80070ba:	60e0      	str	r0, [r4, #12]
 80070bc:	6860      	ldr	r0, [r4, #4]
 80070be:	f7ff ff81 	bl	8006fc4 <std>
 80070c2:	2201      	movs	r2, #1
 80070c4:	2109      	movs	r1, #9
 80070c6:	68a0      	ldr	r0, [r4, #8]
 80070c8:	f7ff ff7c 	bl	8006fc4 <std>
 80070cc:	2202      	movs	r2, #2
 80070ce:	2112      	movs	r1, #18
 80070d0:	68e0      	ldr	r0, [r4, #12]
 80070d2:	f7ff ff77 	bl	8006fc4 <std>
 80070d6:	2301      	movs	r3, #1
 80070d8:	61a3      	str	r3, [r4, #24]
 80070da:	e7d1      	b.n	8007080 <__sinit+0xc>
 80070dc:	08007e08 	.word	0x08007e08
 80070e0:	0800700d 	.word	0x0800700d

080070e4 <__sfp>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	4607      	mov	r7, r0
 80070e8:	f7ff ffac 	bl	8007044 <__sfp_lock_acquire>
 80070ec:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <__sfp+0x84>)
 80070ee:	681e      	ldr	r6, [r3, #0]
 80070f0:	69b3      	ldr	r3, [r6, #24]
 80070f2:	b913      	cbnz	r3, 80070fa <__sfp+0x16>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff ffbd 	bl	8007074 <__sinit>
 80070fa:	3648      	adds	r6, #72	; 0x48
 80070fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007100:	3b01      	subs	r3, #1
 8007102:	d503      	bpl.n	800710c <__sfp+0x28>
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	b30b      	cbz	r3, 800714c <__sfp+0x68>
 8007108:	6836      	ldr	r6, [r6, #0]
 800710a:	e7f7      	b.n	80070fc <__sfp+0x18>
 800710c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007110:	b9d5      	cbnz	r5, 8007148 <__sfp+0x64>
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <__sfp+0x88>)
 8007114:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007118:	60e3      	str	r3, [r4, #12]
 800711a:	6665      	str	r5, [r4, #100]	; 0x64
 800711c:	f7ff fc08 	bl	8006930 <__retarget_lock_init_recursive>
 8007120:	f7ff ff96 	bl	8007050 <__sfp_lock_release>
 8007124:	2208      	movs	r2, #8
 8007126:	4629      	mov	r1, r5
 8007128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800712c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007130:	6025      	str	r5, [r4, #0]
 8007132:	61a5      	str	r5, [r4, #24]
 8007134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007138:	f7fd fabc 	bl	80046b4 <memset>
 800713c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007144:	4620      	mov	r0, r4
 8007146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007148:	3468      	adds	r4, #104	; 0x68
 800714a:	e7d9      	b.n	8007100 <__sfp+0x1c>
 800714c:	2104      	movs	r1, #4
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ff62 	bl	8007018 <__sfmoreglue>
 8007154:	4604      	mov	r4, r0
 8007156:	6030      	str	r0, [r6, #0]
 8007158:	2800      	cmp	r0, #0
 800715a:	d1d5      	bne.n	8007108 <__sfp+0x24>
 800715c:	f7ff ff78 	bl	8007050 <__sfp_lock_release>
 8007160:	230c      	movs	r3, #12
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	e7ee      	b.n	8007144 <__sfp+0x60>
 8007166:	bf00      	nop
 8007168:	08007e08 	.word	0x08007e08
 800716c:	ffff0001 	.word	0xffff0001

08007170 <_fwalk_reent>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4606      	mov	r6, r0
 8007176:	4688      	mov	r8, r1
 8007178:	2700      	movs	r7, #0
 800717a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800717e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007182:	f1b9 0901 	subs.w	r9, r9, #1
 8007186:	d505      	bpl.n	8007194 <_fwalk_reent+0x24>
 8007188:	6824      	ldr	r4, [r4, #0]
 800718a:	2c00      	cmp	r4, #0
 800718c:	d1f7      	bne.n	800717e <_fwalk_reent+0xe>
 800718e:	4638      	mov	r0, r7
 8007190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007194:	89ab      	ldrh	r3, [r5, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d907      	bls.n	80071aa <_fwalk_reent+0x3a>
 800719a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719e:	3301      	adds	r3, #1
 80071a0:	d003      	beq.n	80071aa <_fwalk_reent+0x3a>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	47c0      	blx	r8
 80071a8:	4307      	orrs	r7, r0
 80071aa:	3568      	adds	r5, #104	; 0x68
 80071ac:	e7e9      	b.n	8007182 <_fwalk_reent+0x12>

080071ae <__swhatbuf_r>:
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	460e      	mov	r6, r1
 80071b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b6:	4614      	mov	r4, r2
 80071b8:	2900      	cmp	r1, #0
 80071ba:	461d      	mov	r5, r3
 80071bc:	b096      	sub	sp, #88	; 0x58
 80071be:	da08      	bge.n	80071d2 <__swhatbuf_r+0x24>
 80071c0:	2200      	movs	r2, #0
 80071c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071c6:	602a      	str	r2, [r5, #0]
 80071c8:	061a      	lsls	r2, r3, #24
 80071ca:	d410      	bmi.n	80071ee <__swhatbuf_r+0x40>
 80071cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d0:	e00e      	b.n	80071f0 <__swhatbuf_r+0x42>
 80071d2:	466a      	mov	r2, sp
 80071d4:	f000 f902 	bl	80073dc <_fstat_r>
 80071d8:	2800      	cmp	r0, #0
 80071da:	dbf1      	blt.n	80071c0 <__swhatbuf_r+0x12>
 80071dc:	9a01      	ldr	r2, [sp, #4]
 80071de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071e6:	425a      	negs	r2, r3
 80071e8:	415a      	adcs	r2, r3
 80071ea:	602a      	str	r2, [r5, #0]
 80071ec:	e7ee      	b.n	80071cc <__swhatbuf_r+0x1e>
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	2000      	movs	r0, #0
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	b016      	add	sp, #88	; 0x58
 80071f6:	bd70      	pop	{r4, r5, r6, pc}

080071f8 <__smakebuf_r>:
 80071f8:	898b      	ldrh	r3, [r1, #12]
 80071fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071fc:	079d      	lsls	r5, r3, #30
 80071fe:	4606      	mov	r6, r0
 8007200:	460c      	mov	r4, r1
 8007202:	d507      	bpl.n	8007214 <__smakebuf_r+0x1c>
 8007204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	2301      	movs	r3, #1
 800720e:	6163      	str	r3, [r4, #20]
 8007210:	b002      	add	sp, #8
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	466a      	mov	r2, sp
 8007216:	ab01      	add	r3, sp, #4
 8007218:	f7ff ffc9 	bl	80071ae <__swhatbuf_r>
 800721c:	9900      	ldr	r1, [sp, #0]
 800721e:	4605      	mov	r5, r0
 8007220:	4630      	mov	r0, r6
 8007222:	f7fd fab7 	bl	8004794 <_malloc_r>
 8007226:	b948      	cbnz	r0, 800723c <__smakebuf_r+0x44>
 8007228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722c:	059a      	lsls	r2, r3, #22
 800722e:	d4ef      	bmi.n	8007210 <__smakebuf_r+0x18>
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	f043 0302 	orr.w	r3, r3, #2
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	e7e3      	b.n	8007204 <__smakebuf_r+0xc>
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <__smakebuf_r+0x7c>)
 800723e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	6020      	str	r0, [r4, #0]
 8007244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	6120      	str	r0, [r4, #16]
 800724e:	6163      	str	r3, [r4, #20]
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	b15b      	cbz	r3, 800726c <__smakebuf_r+0x74>
 8007254:	4630      	mov	r0, r6
 8007256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725a:	f000 f8d1 	bl	8007400 <_isatty_r>
 800725e:	b128      	cbz	r0, 800726c <__smakebuf_r+0x74>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	89a0      	ldrh	r0, [r4, #12]
 800726e:	4305      	orrs	r5, r0
 8007270:	81a5      	strh	r5, [r4, #12]
 8007272:	e7cd      	b.n	8007210 <__smakebuf_r+0x18>
 8007274:	0800700d 	.word	0x0800700d

08007278 <_malloc_usable_size_r>:
 8007278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800727c:	1f18      	subs	r0, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	bfbc      	itt	lt
 8007282:	580b      	ldrlt	r3, [r1, r0]
 8007284:	18c0      	addlt	r0, r0, r3
 8007286:	4770      	bx	lr

08007288 <_raise_r>:
 8007288:	291f      	cmp	r1, #31
 800728a:	b538      	push	{r3, r4, r5, lr}
 800728c:	4604      	mov	r4, r0
 800728e:	460d      	mov	r5, r1
 8007290:	d904      	bls.n	800729c <_raise_r+0x14>
 8007292:	2316      	movs	r3, #22
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800729e:	b112      	cbz	r2, 80072a6 <_raise_r+0x1e>
 80072a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072a4:	b94b      	cbnz	r3, 80072ba <_raise_r+0x32>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f830 	bl	800730c <_getpid_r>
 80072ac:	462a      	mov	r2, r5
 80072ae:	4601      	mov	r1, r0
 80072b0:	4620      	mov	r0, r4
 80072b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b6:	f000 b817 	b.w	80072e8 <_kill_r>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d00a      	beq.n	80072d4 <_raise_r+0x4c>
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	d103      	bne.n	80072ca <_raise_r+0x42>
 80072c2:	2316      	movs	r3, #22
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7e7      	b.n	800729a <_raise_r+0x12>
 80072ca:	2400      	movs	r4, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072d2:	4798      	blx	r3
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7e0      	b.n	800729a <_raise_r+0x12>

080072d8 <raise>:
 80072d8:	4b02      	ldr	r3, [pc, #8]	; (80072e4 <raise+0xc>)
 80072da:	4601      	mov	r1, r0
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	f7ff bfd3 	b.w	8007288 <_raise_r>
 80072e2:	bf00      	nop
 80072e4:	20000040 	.word	0x20000040

080072e8 <_kill_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	2300      	movs	r3, #0
 80072ec:	4d06      	ldr	r5, [pc, #24]	; (8007308 <_kill_r+0x20>)
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f7fa fef5 	bl	80020e4 <_kill>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d102      	bne.n	8007304 <_kill_r+0x1c>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	b103      	cbz	r3, 8007304 <_kill_r+0x1c>
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	bd38      	pop	{r3, r4, r5, pc}
 8007306:	bf00      	nop
 8007308:	200003d0 	.word	0x200003d0

0800730c <_getpid_r>:
 800730c:	f7fa bee8 	b.w	80020e0 <_getpid>

08007310 <__sread>:
 8007310:	b510      	push	{r4, lr}
 8007312:	460c      	mov	r4, r1
 8007314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007318:	f000 f894 	bl	8007444 <_read_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	bfab      	itete	ge
 8007320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007322:	89a3      	ldrhlt	r3, [r4, #12]
 8007324:	181b      	addge	r3, r3, r0
 8007326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800732a:	bfac      	ite	ge
 800732c:	6563      	strge	r3, [r4, #84]	; 0x54
 800732e:	81a3      	strhlt	r3, [r4, #12]
 8007330:	bd10      	pop	{r4, pc}

08007332 <__swrite>:
 8007332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007336:	461f      	mov	r7, r3
 8007338:	898b      	ldrh	r3, [r1, #12]
 800733a:	4605      	mov	r5, r0
 800733c:	05db      	lsls	r3, r3, #23
 800733e:	460c      	mov	r4, r1
 8007340:	4616      	mov	r6, r2
 8007342:	d505      	bpl.n	8007350 <__swrite+0x1e>
 8007344:	2302      	movs	r3, #2
 8007346:	2200      	movs	r2, #0
 8007348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734c:	f000 f868 	bl	8007420 <_lseek_r>
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	4632      	mov	r2, r6
 8007354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	4628      	mov	r0, r5
 800735c:	463b      	mov	r3, r7
 800735e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	f000 b817 	b.w	8007398 <_write_r>

0800736a <__sseek>:
 800736a:	b510      	push	{r4, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007372:	f000 f855 	bl	8007420 <_lseek_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	bf15      	itete	ne
 800737c:	6560      	strne	r0, [r4, #84]	; 0x54
 800737e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007386:	81a3      	strheq	r3, [r4, #12]
 8007388:	bf18      	it	ne
 800738a:	81a3      	strhne	r3, [r4, #12]
 800738c:	bd10      	pop	{r4, pc}

0800738e <__sclose>:
 800738e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007392:	f000 b813 	b.w	80073bc <_close_r>
	...

08007398 <_write_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	2200      	movs	r2, #0
 80073a2:	4d05      	ldr	r5, [pc, #20]	; (80073b8 <_write_r+0x20>)
 80073a4:	602a      	str	r2, [r5, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f7fa feba 	bl	8002120 <_write>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_write_r+0x1e>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_write_r+0x1e>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	200003d0 	.word	0x200003d0

080073bc <_close_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	2300      	movs	r3, #0
 80073c0:	4d05      	ldr	r5, [pc, #20]	; (80073d8 <_close_r+0x1c>)
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa feb8 	bl	800213c <_close>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_close_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_close_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	200003d0 	.word	0x200003d0

080073dc <_fstat_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	2300      	movs	r3, #0
 80073e0:	4d06      	ldr	r5, [pc, #24]	; (80073fc <_fstat_r+0x20>)
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	f7fa feab 	bl	8002144 <_fstat>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d102      	bne.n	80073f8 <_fstat_r+0x1c>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	b103      	cbz	r3, 80073f8 <_fstat_r+0x1c>
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	bf00      	nop
 80073fc:	200003d0 	.word	0x200003d0

08007400 <_isatty_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	2300      	movs	r3, #0
 8007404:	4d05      	ldr	r5, [pc, #20]	; (800741c <_isatty_r+0x1c>)
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7fa fea0 	bl	8002150 <_isatty>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_isatty_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_isatty_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	200003d0 	.word	0x200003d0

08007420 <_lseek_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	2200      	movs	r2, #0
 800742a:	4d05      	ldr	r5, [pc, #20]	; (8007440 <_lseek_r+0x20>)
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f7fa fe90 	bl	8002154 <_lseek>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_lseek_r+0x1e>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_lseek_r+0x1e>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	200003d0 	.word	0x200003d0

08007444 <_read_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	2200      	movs	r2, #0
 800744e:	4d05      	ldr	r5, [pc, #20]	; (8007464 <_read_r+0x20>)
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f7fa fe56 	bl	8002104 <_read>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_read_r+0x1e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_read_r+0x1e>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200003d0 	.word	0x200003d0

08007468 <sqrt>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	f000 f81f 	bl	80074b0 <__ieee754_sqrt>
 8007472:	4632      	mov	r2, r6
 8007474:	4604      	mov	r4, r0
 8007476:	460d      	mov	r5, r1
 8007478:	463b      	mov	r3, r7
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f9 fb31 	bl	8000ae4 <__aeabi_dcmpun>
 8007482:	b990      	cbnz	r0, 80074aa <sqrt+0x42>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 fb02 	bl	8000a94 <__aeabi_dcmplt>
 8007490:	b158      	cbz	r0, 80074aa <sqrt+0x42>
 8007492:	f7fd f8dd 	bl	8004650 <__errno>
 8007496:	2321      	movs	r3, #33	; 0x21
 8007498:	2200      	movs	r2, #0
 800749a:	6003      	str	r3, [r0, #0]
 800749c:	2300      	movs	r3, #0
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	f7f9 f9af 	bl	8000804 <__aeabi_ddiv>
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074b0 <__ieee754_sqrt>:
 80074b0:	f8df c158 	ldr.w	ip, [pc, #344]	; 800760c <__ieee754_sqrt+0x15c>
 80074b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b8:	ea3c 0c01 	bics.w	ip, ip, r1
 80074bc:	4606      	mov	r6, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	460c      	mov	r4, r1
 80074c2:	460a      	mov	r2, r1
 80074c4:	4607      	mov	r7, r0
 80074c6:	4603      	mov	r3, r0
 80074c8:	d10f      	bne.n	80074ea <__ieee754_sqrt+0x3a>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	f7f9 f86f 	bl	80005b0 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4630      	mov	r0, r6
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f8 feb3 	bl	8000244 <__adddf3>
 80074de:	4606      	mov	r6, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	4630      	mov	r0, r6
 80074e4:	4629      	mov	r1, r5
 80074e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ea:	2900      	cmp	r1, #0
 80074ec:	dc0e      	bgt.n	800750c <__ieee754_sqrt+0x5c>
 80074ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80074f2:	ea5c 0707 	orrs.w	r7, ip, r7
 80074f6:	d0f4      	beq.n	80074e2 <__ieee754_sqrt+0x32>
 80074f8:	b141      	cbz	r1, 800750c <__ieee754_sqrt+0x5c>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	f7f8 fe9f 	bl	8000240 <__aeabi_dsub>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	f7f9 f97d 	bl	8000804 <__aeabi_ddiv>
 800750a:	e7e8      	b.n	80074de <__ieee754_sqrt+0x2e>
 800750c:	1521      	asrs	r1, r4, #20
 800750e:	d075      	beq.n	80075fc <__ieee754_sqrt+0x14c>
 8007510:	07cc      	lsls	r4, r1, #31
 8007512:	f04f 0400 	mov.w	r4, #0
 8007516:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800751a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800751e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007522:	bf5e      	ittt	pl
 8007524:	0fd9      	lsrpl	r1, r3, #31
 8007526:	005b      	lslpl	r3, r3, #1
 8007528:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800752c:	0fd9      	lsrs	r1, r3, #31
 800752e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007532:	2516      	movs	r5, #22
 8007534:	4620      	mov	r0, r4
 8007536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800753a:	107f      	asrs	r7, r7, #1
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	1846      	adds	r6, r0, r1
 8007540:	4296      	cmp	r6, r2
 8007542:	bfde      	ittt	le
 8007544:	1b92      	suble	r2, r2, r6
 8007546:	1870      	addle	r0, r6, r1
 8007548:	1864      	addle	r4, r4, r1
 800754a:	0052      	lsls	r2, r2, #1
 800754c:	3d01      	subs	r5, #1
 800754e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007552:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800755a:	d1f0      	bne.n	800753e <__ieee754_sqrt+0x8e>
 800755c:	4629      	mov	r1, r5
 800755e:	f04f 0e20 	mov.w	lr, #32
 8007562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007566:	4282      	cmp	r2, r0
 8007568:	eb06 0c05 	add.w	ip, r6, r5
 800756c:	dc02      	bgt.n	8007574 <__ieee754_sqrt+0xc4>
 800756e:	d113      	bne.n	8007598 <__ieee754_sqrt+0xe8>
 8007570:	459c      	cmp	ip, r3
 8007572:	d811      	bhi.n	8007598 <__ieee754_sqrt+0xe8>
 8007574:	f1bc 0f00 	cmp.w	ip, #0
 8007578:	eb0c 0506 	add.w	r5, ip, r6
 800757c:	da43      	bge.n	8007606 <__ieee754_sqrt+0x156>
 800757e:	2d00      	cmp	r5, #0
 8007580:	db41      	blt.n	8007606 <__ieee754_sqrt+0x156>
 8007582:	f100 0801 	add.w	r8, r0, #1
 8007586:	1a12      	subs	r2, r2, r0
 8007588:	4640      	mov	r0, r8
 800758a:	459c      	cmp	ip, r3
 800758c:	bf88      	it	hi
 800758e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007592:	eba3 030c 	sub.w	r3, r3, ip
 8007596:	4431      	add	r1, r6
 8007598:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800759c:	f1be 0e01 	subs.w	lr, lr, #1
 80075a0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80075a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80075ac:	d1db      	bne.n	8007566 <__ieee754_sqrt+0xb6>
 80075ae:	4313      	orrs	r3, r2
 80075b0:	d006      	beq.n	80075c0 <__ieee754_sqrt+0x110>
 80075b2:	1c48      	adds	r0, r1, #1
 80075b4:	bf0b      	itete	eq
 80075b6:	4671      	moveq	r1, lr
 80075b8:	3101      	addne	r1, #1
 80075ba:	3401      	addeq	r4, #1
 80075bc:	f021 0101 	bicne.w	r1, r1, #1
 80075c0:	1063      	asrs	r3, r4, #1
 80075c2:	0849      	lsrs	r1, r1, #1
 80075c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80075c8:	07e2      	lsls	r2, r4, #31
 80075ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80075ce:	bf48      	it	mi
 80075d0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80075d4:	460e      	mov	r6, r1
 80075d6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80075da:	e782      	b.n	80074e2 <__ieee754_sqrt+0x32>
 80075dc:	0ada      	lsrs	r2, r3, #11
 80075de:	3815      	subs	r0, #21
 80075e0:	055b      	lsls	r3, r3, #21
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d0fa      	beq.n	80075dc <__ieee754_sqrt+0x12c>
 80075e6:	02d5      	lsls	r5, r2, #11
 80075e8:	d50a      	bpl.n	8007600 <__ieee754_sqrt+0x150>
 80075ea:	f1c1 0420 	rsb	r4, r1, #32
 80075ee:	fa23 f404 	lsr.w	r4, r3, r4
 80075f2:	1e4d      	subs	r5, r1, #1
 80075f4:	408b      	lsls	r3, r1
 80075f6:	4322      	orrs	r2, r4
 80075f8:	1b41      	subs	r1, r0, r5
 80075fa:	e789      	b.n	8007510 <__ieee754_sqrt+0x60>
 80075fc:	4608      	mov	r0, r1
 80075fe:	e7f0      	b.n	80075e2 <__ieee754_sqrt+0x132>
 8007600:	0052      	lsls	r2, r2, #1
 8007602:	3101      	adds	r1, #1
 8007604:	e7ef      	b.n	80075e6 <__ieee754_sqrt+0x136>
 8007606:	4680      	mov	r8, r0
 8007608:	e7bd      	b.n	8007586 <__ieee754_sqrt+0xd6>
 800760a:	bf00      	nop
 800760c:	7ff00000 	.word	0x7ff00000

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
