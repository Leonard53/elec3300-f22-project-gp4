
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008274  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08008460  08008460  00018460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e8  080090e8  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  080090e8  080090e8  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090e8  080090e8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080090f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000210  08009300  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08009300  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142c4  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003103  00000000  00000000  000344fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c95b  00000000  00000000  00037600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00043f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a28  00000000  00000000  000449d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5aa  00000000  00000000  00047400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016101  00000000  00000000  000629aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c0a3  00000000  00000000  00078aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114b4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035e0  00000000  00000000  00114ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	08008444 	.word	0x08008444

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	08008444 	.word	0x08008444

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <HueToRGB565>:
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);

uint16_t HueToRGB565(uint8_t hue) {
    uint16_t portion = hue * 6;
 8000ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000ba4:	0040      	lsls	r0, r0, #1

    if (portion < 256) { // 0 <= degree < 60
 8000ba6:	28ff      	cmp	r0, #255	; 0xff
uint16_t HueToRGB565(uint8_t hue) {
 8000ba8:	b508      	push	{r3, lr}
    if (portion < 256) { // 0 <= degree < 60
 8000baa:	d932      	bls.n	8000c12 <HueToRGB565+0x72>
        return RED + ((int) (portion / 256.0 * 64) << 5);
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8000bac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000bb0:	d31a      	bcc.n	8000be8 <HueToRGB565+0x48>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8000bb2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8000bb6:	d351      	bcc.n	8000c5c <HueToRGB565+0xbc>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8000bb8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000bbc:	d33a      	bcc.n	8000c34 <HueToRGB565+0x94>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8000bbe:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8000bc2:	d25d      	bcs.n	8000c80 <HueToRGB565+0xe0>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8000bc4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000bc8:	f7ff fc88 	bl	80004dc <__aeabi_i2d>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HueToRGB565+0x110>)
 8000bd0:	f7ff fcee 	bl	80005b0 <__aeabi_dmul>
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <HueToRGB565+0x114>)
 8000bd8:	f7ff fcea 	bl	80005b0 <__aeabi_dmul>
 8000bdc:	f7ff ff98 	bl	8000b10 <__aeabi_d2iz>
 8000be0:	02c0      	lsls	r0, r0, #11
 8000be2:	301f      	adds	r0, #31
 8000be4:	b280      	uxth	r0, r0
    } else if (portion < 256 * 6) { // 300 <= degree < 360
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
    }
}
 8000be6:	bd08      	pop	{r3, pc}
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8000be8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000bec:	f7ff fc76 	bl	80004dc <__aeabi_i2d>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HueToRGB565+0x110>)
 8000bf4:	f7ff fcdc 	bl	80005b0 <__aeabi_dmul>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HueToRGB565+0x114>)
 8000bfc:	f7ff fcd8 	bl	80005b0 <__aeabi_dmul>
 8000c00:	f7ff ff86 	bl	8000b10 <__aeabi_d2iz>
 8000c04:	f1c0 001f 	rsb	r0, r0, #31
 8000c08:	02c0      	lsls	r0, r0, #11
 8000c0a:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c0e:	b280      	uxth	r0, r0
}
 8000c10:	bd08      	pop	{r3, pc}
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8000c12:	f7ff fc63 	bl	80004dc <__aeabi_i2d>
 8000c16:	2200      	movs	r2, #0
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HueToRGB565+0x110>)
 8000c1a:	f7ff fcc9 	bl	80005b0 <__aeabi_dmul>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HueToRGB565+0x118>)
 8000c22:	f7ff fcc5 	bl	80005b0 <__aeabi_dmul>
 8000c26:	f7ff ff73 	bl	8000b10 <__aeabi_d2iz>
 8000c2a:	0140      	lsls	r0, r0, #5
 8000c2c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000c30:	b280      	uxth	r0, r0
}
 8000c32:	bd08      	pop	{r3, pc}
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8000c34:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8000c38:	f7ff fc50 	bl	80004dc <__aeabi_i2d>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HueToRGB565+0x110>)
 8000c40:	f7ff fcb6 	bl	80005b0 <__aeabi_dmul>
 8000c44:	2200      	movs	r2, #0
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HueToRGB565+0x118>)
 8000c48:	f7ff fcb2 	bl	80005b0 <__aeabi_dmul>
 8000c4c:	f7ff ff60 	bl	8000b10 <__aeabi_d2iz>
 8000c50:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8000c54:	0140      	lsls	r0, r0, #5
 8000c56:	301f      	adds	r0, #31
 8000c58:	b280      	uxth	r0, r0
}
 8000c5a:	bd08      	pop	{r3, pc}
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8000c5c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8000c60:	f7ff fc3c 	bl	80004dc <__aeabi_i2d>
 8000c64:	2200      	movs	r2, #0
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HueToRGB565+0x110>)
 8000c68:	f7ff fca2 	bl	80005b0 <__aeabi_dmul>
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HueToRGB565+0x114>)
 8000c70:	f7ff fc9e 	bl	80005b0 <__aeabi_dmul>
 8000c74:	f7ff ff4c 	bl	8000b10 <__aeabi_d2iz>
 8000c78:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8000c7c:	b280      	uxth	r0, r0
}
 8000c7e:	bd08      	pop	{r3, pc}
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8000c80:	f5a0 60a0 	sub.w	r0, r0, #1280	; 0x500
 8000c84:	f7ff fc2a 	bl	80004dc <__aeabi_i2d>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HueToRGB565+0x110>)
 8000c8c:	f7ff fc90 	bl	80005b0 <__aeabi_dmul>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HueToRGB565+0x114>)
 8000c94:	f7ff fc8c 	bl	80005b0 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4907      	ldr	r1, [pc, #28]	; (8000cbc <HueToRGB565+0x11c>)
 8000ca0:	f7ff face 	bl	8000240 <__aeabi_dsub>
 8000ca4:	f7ff ff34 	bl	8000b10 <__aeabi_d2iz>
 8000ca8:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8000cac:	b280      	uxth	r0, r0
}
 8000cae:	bd08      	pop	{r3, pc}
 8000cb0:	3f700000 	.word	0x3f700000
 8000cb4:	40400000 	.word	0x40400000
 8000cb8:	40500000 	.word	0x40500000
 8000cbc:	403f0000 	.word	0x403f0000

08000cc0 <LCD_Rst>:
    LCD_REG_Config();
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
}


void LCD_Rst(void) {
 8000cc0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <LCD_Rst+0x24>)
 8000cc8:	f002 ff22 	bl	8003b10 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	d1fd      	bne.n	8000cce <LCD_Rst+0xe>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <LCD_Rst+0x24>)
 8000cd8:	f002 ff1a 	bl	8003b10 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	d1fd      	bne.n	8000cde <LCD_Rst+0x1e>
}
 8000ce2:	bd08      	pop	{r3, pc}
 8000ce4:	40011800 	.word	0x40011800
 8000ce8:	0002bffc 	.word	0x0002bffc

08000cec <LCD_REG_Config>:
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}


void LCD_Write_Cmd(uint16_t usCmd) {
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cf0:	23cf      	movs	r3, #207	; 0xcf
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 8000cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2081      	movs	r0, #129	; 0x81
 8000cfa:	f04f 0c30 	mov.w	ip, #48	; 0x30
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000cfe:	f04f 04ed 	mov.w	r4, #237	; 0xed
 8000d02:	8013      	strh	r3, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <LCD_REG_Config+0x1dc>)
 8000d06:	f04f 0803 	mov.w	r8, #3
 8000d0a:	8019      	strh	r1, [r3, #0]
 8000d0c:	8018      	strh	r0, [r3, #0]
 8000d0e:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d12:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d14:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000d18:	801c      	strh	r4, [r3, #0]
 8000d1a:	f04f 0412 	mov.w	r4, #18
 8000d1e:	f8a3 8000 	strh.w	r8, [r3]
 8000d22:	801c      	strh	r4, [r3, #0]
 8000d24:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d26:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000d2a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d2c:	f04f 0085 	mov.w	r0, #133	; 0x85
 8000d30:	f04f 0b10 	mov.w	fp, #16
 8000d34:	8018      	strh	r0, [r3, #0]
 8000d36:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000d3a:	f8a3 b000 	strh.w	fp, [r3]
 8000d3e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d40:	f04f 00cb 	mov.w	r0, #203	; 0xcb
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d44:	f04f 0939 	mov.w	r9, #57	; 0x39
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d48:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d4a:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000d4e:	f8a3 9000 	strh.w	r9, [r3]
 8000d52:	8018      	strh	r0, [r3, #0]
 8000d54:	f04f 0034 	mov.w	r0, #52	; 0x34
 8000d58:	8019      	strh	r1, [r3, #0]
 8000d5a:	8018      	strh	r0, [r3, #0]
 8000d5c:	f04f 0002 	mov.w	r0, #2
 8000d60:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d62:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 8000d66:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d68:	f04f 0020 	mov.w	r0, #32
 8000d6c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d6e:	f04f 00ea 	mov.w	r0, #234	; 0xea
 8000d72:	8010      	strh	r0, [r2, #0]
 8000d74:	f04f 00b1 	mov.w	r0, #177	; 0xb1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d78:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d7a:	f04f 04b6 	mov.w	r4, #182	; 0xb6
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d7e:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d80:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d82:	f04f 001b 	mov.w	r0, #27
 8000d86:	8019      	strh	r1, [r3, #0]
 8000d88:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d8a:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000d8c:	f04f 040a 	mov.w	r4, #10
 8000d90:	801c      	strh	r4, [r3, #0]
 8000d92:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 8000d96:	801c      	strh	r4, [r3, #0]
 8000d98:	4620      	mov	r0, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000d9a:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 8000d9e:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000da0:	f04f 0435 	mov.w	r4, #53	; 0x35
 8000da4:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000da6:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 8000daa:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dac:	f04f 0411 	mov.w	r4, #17
 8000db0:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000db2:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 8000db6:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000db8:	f04f 0445 	mov.w	r4, #69	; 0x45
 8000dbc:	801c      	strh	r4, [r3, #0]
 8000dbe:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dc0:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 8000dc4:	8014      	strh	r4, [r2, #0]
 8000dc6:	f04f 04f2 	mov.w	r4, #242	; 0xf2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dca:	8018      	strh	r0, [r3, #0]
 8000dcc:	2501      	movs	r5, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000dce:	8014      	strh	r4, [r2, #0]
 8000dd0:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 8000dd4:	f04f 0426 	mov.w	r4, #38	; 0x26
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dd8:	8019      	strh	r1, [r3, #0]
 8000dda:	270f      	movs	r7, #15
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ddc:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000dde:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000de0:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000de2:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000de6:	801f      	strh	r7, [r3, #0]
 8000de8:	801c      	strh	r4, [r3, #0]
 8000dea:	8018      	strh	r0, [r3, #0]
 8000dec:	f04f 000b 	mov.w	r0, #11
 8000df0:	8018      	strh	r0, [r3, #0]
 8000df2:	f04f 000e 	mov.w	r0, #14
 8000df6:	f04f 0409 	mov.w	r4, #9
 8000dfa:	8018      	strh	r0, [r3, #0]
 8000dfc:	f04f 0054 	mov.w	r0, #84	; 0x54
 8000e00:	801c      	strh	r4, [r3, #0]
 8000e02:	8018      	strh	r0, [r3, #0]
 8000e04:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000e08:	8018      	strh	r0, [r3, #0]
 8000e0a:	f04f 0046 	mov.w	r0, #70	; 0x46
 8000e0e:	8018      	strh	r0, [r3, #0]
 8000e10:	f04f 000c 	mov.w	r0, #12
 8000e14:	8018      	strh	r0, [r3, #0]
 8000e16:	f04f 0017 	mov.w	r0, #23
 8000e1a:	f04f 0a07 	mov.w	sl, #7
 8000e1e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e20:	f04f 00e1 	mov.w	r0, #225	; 0xe1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e24:	801c      	strh	r4, [r3, #0]
 8000e26:	801f      	strh	r7, [r3, #0]
 8000e28:	f8a3 a000 	strh.w	sl, [r3]
 8000e2c:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e2e:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e30:	f04f 0019 	mov.w	r0, #25
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	8018      	strh	r0, [r3, #0]
 8000e38:	f04f 001b 	mov.w	r0, #27
 8000e3c:	8018      	strh	r0, [r3, #0]
 8000e3e:	f04f 0004 	mov.w	r0, #4
 8000e42:	262a      	movs	r6, #42	; 0x2a
 8000e44:	8018      	strh	r0, [r3, #0]
 8000e46:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000e4a:	f8a3 b000 	strh.w	fp, [r3]
 8000e4e:	f04f 0e06 	mov.w	lr, #6
 8000e52:	f8a3 a000 	strh.w	sl, [r3]
 8000e56:	801e      	strh	r6, [r3, #0]
 8000e58:	8018      	strh	r0, [r3, #0]
 8000e5a:	f04f 0038 	mov.w	r0, #56	; 0x38
 8000e5e:	f8a3 9000 	strh.w	r9, [r3]
 8000e62:	f8a3 8000 	strh.w	r8, [r3]
 8000e66:	f8a3 e000 	strh.w	lr, [r3]
 8000e6a:	f8a3 e000 	strh.w	lr, [r3]
 8000e6e:	f8a3 c000 	strh.w	ip, [r3]
 8000e72:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e74:	f04f 0036 	mov.w	r0, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e78:	801f      	strh	r7, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e7a:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e7c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8000e80:	8018      	strh	r0, [r3, #0]
 8000e82:	f04f 00ef 	mov.w	r0, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e86:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e88:	8019      	strh	r1, [r3, #0]
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	8019      	strh	r1, [r3, #0]
 8000e8e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000e90:	f04f 002b 	mov.w	r0, #43	; 0x2b
 8000e94:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	8019      	strh	r1, [r3, #0]
 8000e9a:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8000e9e:	801d      	strh	r5, [r3, #0]
 8000ea0:	f04f 0055 	mov.w	r0, #85	; 0x55
 8000ea4:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ea6:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8000eaa:	8011      	strh	r1, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eac:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eae:	f04f 0311 	mov.w	r3, #17
 8000eb2:	4906      	ldr	r1, [pc, #24]	; (8000ecc <LCD_REG_Config+0x1e0>)
 8000eb4:	8013      	strh	r3, [r2, #0]
    for (; nCount != 0; nCount--);
 8000eb6:	3901      	subs	r1, #1
 8000eb8:	d1fd      	bne.n	8000eb6 <LCD_REG_Config+0x1ca>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eba:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ebe:	2229      	movs	r2, #41	; 0x29
 8000ec0:	801a      	strh	r2, [r3, #0]
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);

}
 8000ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec6:	bf00      	nop
 8000ec8:	60020000 	.word	0x60020000
 8000ecc:	0002bffc 	.word	0x0002bffc

08000ed0 <LCD_INIT>:
void LCD_INIT(void) {
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <LCD_INIT+0x54>)
 8000eda:	f002 fe19 	bl	8003b10 <HAL_GPIO_WritePin>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ede:	272a      	movs	r7, #42	; 0x2a
    LCD_Rst();
 8000ee0:	f7ff feee 	bl	8000cc0 <LCD_Rst>
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ee4:	26ef      	movs	r6, #239	; 0xef
    LCD_REG_Config();
 8000ee6:	f7ff ff01 	bl	8000cec <LCD_REG_Config>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eea:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000eec:	2100      	movs	r1, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000eee:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000ef2:	2401      	movs	r4, #1
 8000ef4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000ef8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000efc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <LCD_INIT+0x58>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f02:	8007      	strh	r7, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f04:	8011      	strh	r1, [r2, #0]
 8000f06:	8011      	strh	r1, [r2, #0]
 8000f08:	8011      	strh	r1, [r2, #0]
 8000f0a:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f0c:	8005      	strh	r5, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f0e:	8011      	strh	r1, [r2, #0]
 8000f10:	8011      	strh	r1, [r2, #0]
 8000f12:	8014      	strh	r4, [r2, #0]
 8000f14:	f8a2 e000 	strh.w	lr, [r2]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f18:	f8a0 c000 	strh.w	ip, [r0]
    uint32_t i = 0;

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);

    for (i = 0; i < usPoint; i++)
 8000f1c:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f1e:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8000f20:	d1fc      	bne.n	8000f1c <LCD_INIT+0x4c>
}
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	40011400 	.word	0x40011400
 8000f28:	60020000 	.word	0x60020000

08000f2c <LCD_OpenWindow>:
void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 8000f2c:	b530      	push	{r4, r5, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f2e:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 8000f32:	242a      	movs	r4, #42	; 0x2a
 8000f34:	252b      	movs	r5, #43	; 0x2b
 8000f36:	f8ae 4000 	strh.w	r4, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f3a:	4c11      	ldr	r4, [pc, #68]	; (8000f80 <LCD_OpenWindow+0x54>)
    LCD_Write_Data(usCOLUMN >> 8);
 8000f3c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f40:	f8a4 c000 	strh.w	ip, [r4]
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f44:	eb00 0c02 	add.w	ip, r0, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	4402      	add	r2, r0
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    LCD_Write_Data(usCOLUMN & 0xff);
 8000f50:	b2c0      	uxtb	r0, r0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f52:	8020      	strh	r0, [r4, #0]
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8000f54:	b2d2      	uxtb	r2, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8000f56:	f3cc 200f 	ubfx	r0, ip, #8, #16
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f5a:	8020      	strh	r0, [r4, #0]
 8000f5c:	8022      	strh	r2, [r4, #0]
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f5e:	18ca      	adds	r2, r1, r3
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f60:	3b01      	subs	r3, #1
 8000f62:	440b      	add	r3, r1
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f64:	3a01      	subs	r2, #1
    LCD_Write_Data(usPAGE >> 8);
 8000f66:	0a08      	lsrs	r0, r1, #8
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8000f68:	f3c2 220f 	ubfx	r2, r2, #8, #16
    LCD_Write_Data(usPAGE & 0xff);
 8000f6c:	b2c9      	uxtb	r1, r1
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8000f6e:	b2db      	uxtb	r3, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f70:	f8ae 5000 	strh.w	r5, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000f74:	8020      	strh	r0, [r4, #0]
 8000f76:	8021      	strh	r1, [r4, #0]
 8000f78:	8022      	strh	r2, [r4, #0]
 8000f7a:	8023      	strh	r3, [r4, #0]
}
 8000f7c:	bd30      	pop	{r4, r5, pc}
 8000f7e:	bf00      	nop
 8000f80:	60020000 	.word	0x60020000

08000f84 <LCD_Clear>:
        LCD_Write_Data(usColor);

}


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	461e      	mov	r6, r3
 8000f88:	4614      	mov	r4, r2
 8000f8a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8000f8e:	f7ff ffcd 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f92:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f96:	212c      	movs	r1, #44	; 0x2c

    LCD_FillColor(usWidth * usHeight, usColor);
 8000f98:	fb06 f404 	mul.w	r4, r6, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8000f9c:	8019      	strh	r1, [r3, #0]
    for (i = 0; i < usPoint; i++)
 8000f9e:	b12c      	cbz	r4, 8000fac <LCD_Clear+0x28>
 8000fa0:	2300      	movs	r3, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa2:	4903      	ldr	r1, [pc, #12]	; (8000fb0 <LCD_Clear+0x2c>)
    for (i = 0; i < usPoint; i++)
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	429c      	cmp	r4, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8000fa8:	800d      	strh	r5, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8000faa:	d1fb      	bne.n	8000fa4 <LCD_Clear+0x20>

}
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	bf00      	nop
 8000fb0:	60020000 	.word	0x60020000

08000fb4 <LCD_SetPinColor>:
			data[i].x = 70;
			data[i].y = 120 + (i - 4) * 40;
		}
}
void LCD_SetPinColor(struct YPinData *data, uint16_t color) {
	data->color = color;
 8000fb4:	7101      	strb	r1, [r0, #4]
}
 8000fb6:	4770      	bx	lr

08000fb8 <LCD_PrintHeatMap>:
	return pow(data->x - x, 2) + pow(data->y - y, 2);
}

void LCD_PrintHeatMap(struct YPinData *data) {
	// Loop all pixels inside the rectangular heat map
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000fb8:	8a43      	ldrh	r3, [r0, #18]
void LCD_PrintHeatMap(struct YPinData *data) {
 8000fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000fbe:	3b14      	subs	r3, #20
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4619      	mov	r1, r3
void LCD_PrintHeatMap(struct YPinData *data) {
 8000fc4:	b08b      	sub	sp, #44	; 0x2c
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	9004      	str	r0, [sp, #16]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8000fca:	8b00      	ldrh	r0, [r0, #24]
 8000fcc:	9305      	str	r3, [sp, #20]
 8000fce:	f100 0314 	add.w	r3, r0, #20
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	f300 80c8 	bgt.w	8001168 <LCD_PrintHeatMap+0x1b0>
 8000fd8:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8000fda:	9a04      	ldr	r2, [sp, #16]
 8000fdc:	8a91      	ldrh	r1, [r2, #20]
 8000fde:	f103 0214 	add.w	r2, r3, #20
 8000fe2:	3914      	subs	r1, #20
 8000fe4:	b289      	uxth	r1, r1
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	9101      	str	r1, [sp, #4]
 8000fea:	f300 80b3 	bgt.w	8001154 <LCD_PrintHeatMap+0x19c>
			// Check if in safe circle and altered circle, -1 means not exist
			int8_t inSafeCircle = -1;
			int16_t distSqrInAlteredCircle[8] = {-1};
 8000fee:	2500      	movs	r5, #0
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	9c04      	ldr	r4, [sp, #16]
 8000ff6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8000ffa:	f8dd b014 	ldr.w	fp, [sp, #20]
 8000ffe:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8001002:	f10d 0a18 	add.w	sl, sp, #24
 8001006:	f8ad 3018 	strh.w	r3, [sp, #24]
 800100a:	9402      	str	r4, [sp, #8]
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 800100c:	8820      	ldrh	r0, [r4, #0]

			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800100e:	3406      	adds	r4, #6
	return pow(data->x - x, 2) + pow(data->y - y, 2);
 8001010:	eba0 000b 	sub.w	r0, r0, fp
 8001014:	f7ff fa62 	bl	80004dc <__aeabi_i2d>
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	4680      	mov	r8, r0
 800101c:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 8001020:	4689      	mov	r9, r1
 8001022:	1ac0      	subs	r0, r0, r3
 8001024:	f7ff fa5a 	bl	80004dc <__aeabi_i2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	f7ff fac0 	bl	80005b0 <__aeabi_dmul>
 8001030:	4642      	mov	r2, r8
 8001032:	4606      	mov	r6, r0
 8001034:	460f      	mov	r7, r1
 8001036:	464b      	mov	r3, r9
 8001038:	4640      	mov	r0, r8
 800103a:	4649      	mov	r1, r9
 800103c:	f7ff fab8 	bl	80005b0 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4630      	mov	r0, r6
 8001046:	4639      	mov	r1, r7
 8001048:	f7ff f8fc 	bl	8000244 <__adddf3>
 800104c:	f7ff fd88 	bl	8000b60 <__aeabi_d2uiz>
 8001050:	b280      	uxth	r0, r0
				uint16_t dist_sqr = LCD_DistSqr(&data[sensor], col, pag);
				if (dist_sqr <= 100) {
 8001052:	2864      	cmp	r0, #100	; 0x64
 8001054:	f240 808b 	bls.w	800116e <LCD_PrintHeatMap+0x1b6>
					inSafeCircle = sensor;
					break;
				} else if (dist_sqr <= 900) {
 8001058:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 800105c:	f105 0501 	add.w	r5, r5, #1
					distSqrInAlteredCircle[sensor] = dist_sqr;
 8001060:	bf98      	it	ls
 8001062:	f8aa 0000 	strhls.w	r0, [sl]
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001066:	2d08      	cmp	r5, #8
 8001068:	f10a 0a02 	add.w	sl, sl, #2
 800106c:	d1ce      	bne.n	800100c <LCD_PrintHeatMap+0x54>
 800106e:	2500      	movs	r5, #0
 8001070:	46a8      	mov	r8, r5
 8001072:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001076:	f10d 0416 	add.w	r4, sp, #22
 800107a:	f10d 0926 	add.w	r9, sp, #38	; 0x26
			}

			uint16_t distSqrSum = 0;
			uint16_t weightedHue = 0;
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
				if (distSqrInAlteredCircle[sensor] != -1) {
 800107e:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	d040      	beq.n	8001108 <LCD_PrintHeatMap+0x150>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 8001086:	f7ff fa29 	bl	80004dc <__aeabi_i2d>
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4606      	mov	r6, r0
 8001090:	460f      	mov	r7, r1
 8001092:	f7ff fd27 	bl	8000ae4 <__aeabi_dcmpun>
 8001096:	b938      	cbnz	r0, 80010a8 <LCD_PrintHeatMap+0xf0>
 8001098:	2200      	movs	r2, #0
 800109a:	2300      	movs	r3, #0
 800109c:	4630      	mov	r0, r6
 800109e:	4639      	mov	r1, r7
 80010a0:	f7ff fd0c 	bl	8000abc <__aeabi_dcmpge>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d070      	beq.n	800118a <LCD_PrintHeatMap+0x1d2>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 80010a8:	4630      	mov	r0, r6
 80010aa:	4639      	mov	r1, r7
 80010ac:	f006 fe92 	bl	8007dd4 <sqrt>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4640      	mov	r0, r8
 80010b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010ba:	f7ff fa0f 	bl	80004dc <__aeabi_i2d>
 80010be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c2:	f7ff f8bf 	bl	8000244 <__adddf3>
 80010c6:	f7ff fd4b 	bl	8000b60 <__aeabi_d2uiz>
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 80010ca:	4639      	mov	r1, r7
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 80010cc:	4680      	mov	r8, r0
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 80010ce:	4630      	mov	r0, r6
 80010d0:	f006 fe80 	bl	8007dd4 <sqrt>
 80010d4:	4606      	mov	r6, r0
 80010d6:	460f      	mov	r7, r1
 80010d8:	f89b 0004 	ldrb.w	r0, [fp, #4]
 80010dc:	f7ff f9fe 	bl	80004dc <__aeabi_i2d>
 80010e0:	4632      	mov	r2, r6
 80010e2:	463b      	mov	r3, r7
 80010e4:	f7ff fa64 	bl	80005b0 <__aeabi_dmul>
 80010e8:	4606      	mov	r6, r0
 80010ea:	4628      	mov	r0, r5
 80010ec:	460f      	mov	r7, r1
 80010ee:	f7ff f9f5 	bl	80004dc <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4630      	mov	r0, r6
 80010f8:	4639      	mov	r1, r7
 80010fa:	f7ff f8a3 	bl	8000244 <__adddf3>
 80010fe:	f7ff fd2f 	bl	8000b60 <__aeabi_d2uiz>
					distSqrSum += sqrt(distSqrInAlteredCircle[sensor]);
 8001102:	fa1f f888 	uxth.w	r8, r8
					weightedHue += sqrt(distSqrInAlteredCircle[sensor]) * data[sensor].color;
 8001106:	b285      	uxth	r5, r0
			for (uint8_t sensor = 0; sensor < 8; sensor++) {
 8001108:	45a1      	cmp	r9, r4
 800110a:	f10b 0b06 	add.w	fp, fp, #6
 800110e:	d1b6      	bne.n	800107e <LCD_PrintHeatMap+0xc6>
				}
			}

			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 8001110:	fbb5 f0f8 	udiv	r0, r5, r8
 8001114:	b2c0      	uxtb	r0, r0
 8001116:	f7ff fd43 	bl	8000ba0 <HueToRGB565>
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800111a:	9b05      	ldr	r3, [sp, #20]
			LCD_DrawDot(col, pag, HueToRGB565(weightedHue/distSqrSum));
 800111c:	4604      	mov	r4, r0
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 800111e:	2bef      	cmp	r3, #239	; 0xef
 8001120:	d803      	bhi.n	800112a <LCD_PrintHeatMap+0x172>
 8001122:	9b01      	ldr	r3, [sp, #4]
 8001124:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001128:	d328      	bcc.n	800117c <LCD_PrintHeatMap+0x1c4>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800112a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800112e:	222c      	movs	r2, #44	; 0x2c
 8001130:	801a      	strh	r2, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001132:	9a01      	ldr	r2, [sp, #4]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001134:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001138:	3201      	adds	r2, #1
 800113a:	b292      	uxth	r2, r2
 800113c:	4611      	mov	r1, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800113e:	801c      	strh	r4, [r3, #0]
		for (uint16_t pag = data[3].y - 20; pag <= data[7].y + 20; pag++) {
 8001140:	9b04      	ldr	r3, [sp, #16]
 8001142:	9201      	str	r2, [sp, #4]
 8001144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001146:	f103 0214 	add.w	r2, r3, #20
 800114a:	4291      	cmp	r1, r2
 800114c:	f77f af4f 	ble.w	8000fee <LCD_PrintHeatMap+0x36>
 8001150:	9a04      	ldr	r2, [sp, #16]
 8001152:	8b10      	ldrh	r0, [r2, #24]
	for (uint16_t col = data[3].x - 20; col <= data[4].x + 20; col++) {
 8001154:	9a05      	ldr	r2, [sp, #20]
 8001156:	3201      	adds	r2, #1
 8001158:	b292      	uxth	r2, r2
 800115a:	4611      	mov	r1, r2
 800115c:	9205      	str	r2, [sp, #20]
 800115e:	f100 0214 	add.w	r2, r0, #20
 8001162:	4291      	cmp	r1, r2
 8001164:	f77f af39 	ble.w	8000fda <LCD_PrintHeatMap+0x22>
		}
	}
}
 8001168:	b00b      	add	sp, #44	; 0x2c
 800116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LCD_DrawDot(col, pag, HueToRGB565(data[inSafeCircle].color));
 800116e:	9b04      	ldr	r3, [sp, #16]
 8001170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001174:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8001178:	7928      	ldrb	r0, [r5, #4]
 800117a:	e7cc      	b.n	8001116 <LCD_PrintHeatMap+0x15e>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 800117c:	2301      	movs	r3, #1
 800117e:	9901      	ldr	r1, [sp, #4]
 8001180:	461a      	mov	r2, r3
 8001182:	9805      	ldr	r0, [sp, #20]
 8001184:	f7ff fed2 	bl	8000f2c <LCD_OpenWindow>
 8001188:	e7cf      	b.n	800112a <LCD_PrintHeatMap+0x172>
					uint8_t hue = (255 - data[sensor].color) * (sqrt(distSqrInAlteredCircle[sensor]) - 10) / 20 + data[sensor].color;
 800118a:	4630      	mov	r0, r6
 800118c:	4639      	mov	r1, r7
 800118e:	f006 fe21 	bl	8007dd4 <sqrt>
 8001192:	e789      	b.n	80010a8 <LCD_PrintHeatMap+0xf0>

08001194 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	4616      	mov	r6, r2
 8001198:	461c      	mov	r4, r3
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 800119a:	2208      	movs	r2, #8
 800119c:	2310      	movs	r3, #16
                        uint16_t usColor_Foreground) {
 800119e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80011a2:	f7ff fec3 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011a6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80011aa:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <LCD_DrawChar_Color+0x58>)
    ucRelativePositon = cChar - ' ';
 80011b0:	f1a6 0220 	sub.w	r2, r6, #32
 80011b4:	f103 0c10 	add.w	ip, r3, #16
 80011b8:	b2d2      	uxtb	r2, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LCD_DrawChar_Color+0x5c>)
 80011bc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80011c0:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011c4:	f8a1 e000 	strh.w	lr, [r1]

    LCD_Write_Cmd(CMD_SetPixel);

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 80011c8:	2208      	movs	r2, #8
 80011ca:	f813 1b01 	ldrb.w	r1, [r3], #1

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
            if (ucTemp & 0x01)
 80011ce:	07ce      	lsls	r6, r1, #31
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80011d0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011d4:	bf4c      	ite	mi
 80011d6:	8005      	strhmi	r5, [r0, #0]
 80011d8:	8004      	strhpl	r4, [r0, #0]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80011da:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                LCD_Write_Data(usColor_Foreground);

            else
                LCD_Write_Data(usColor_Background);

            ucTemp >>= 1;
 80011de:	ea4f 0151 	mov.w	r1, r1, lsr #1
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80011e2:	d1f4      	bne.n	80011ce <LCD_DrawChar_Color+0x3a>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 80011e4:	4563      	cmp	r3, ip
 80011e6:	d1ef      	bne.n	80011c8 <LCD_DrawChar_Color+0x34>

        }

    }

}
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
 80011ea:	bf00      	nop
 80011ec:	08008460 	.word	0x08008460
 80011f0:	60020000 	.word	0x60020000

080011f4 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4605      	mov	r5, r0
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 80011f8:	380a      	subs	r0, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80011fa:	2301      	movs	r3, #1
 80011fc:	2214      	movs	r2, #20
 80011fe:	b280      	uxth	r0, r0
void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001200:	460c      	mov	r4, r1
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001202:	f7ff fe93 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001206:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800120a:	202c      	movs	r0, #44	; 0x2c
 800120c:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800120e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001212:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001214:	8008      	strh	r0, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8001216:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001218:	f8a2 c000 	strh.w	ip, [r2]
    for (i = 0; i < usPoint; i++)
 800121c:	d1fb      	bne.n	8001216 <LCD_DrawCross+0x22>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 800121e:	f1a4 010a 	sub.w	r1, r4, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001222:	2314      	movs	r3, #20
 8001224:	2201      	movs	r2, #1
 8001226:	4628      	mov	r0, r5
 8001228:	b289      	uxth	r1, r1
 800122a:	f7ff fe7f 	bl	8000f2c <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800122e:	242c      	movs	r4, #44	; 0x2c
 8001230:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8001234:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001236:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800123c:	8004      	strh	r4, [r0, #0]
    for (i = 0; i < usPoint; i++)
 800123e:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001240:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 8001242:	d1fc      	bne.n	800123e <LCD_DrawCross+0x4a>

}
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	60020000 	.word	0x60020000

0800124c <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 800124c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001250:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 8001252:	7812      	ldrb	r2, [r2, #0]
                          uint16_t usColor_Foreground) {
 8001254:	b082      	sub	sp, #8
 8001256:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    while (*pStr != '\0') {
 800125a:	b1da      	cbz	r2, 8001294 <LCD_DrawString_Color+0x48>
 800125c:	4605      	mov	r5, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4698      	mov	r8, r3
 8001262:	e00b      	b.n	800127c <LCD_DrawString_Color+0x30>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001264:	f105 0308 	add.w	r3, r5, #8
 8001268:	4628      	mov	r0, r5
 800126a:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 800126c:	4643      	mov	r3, r8
 800126e:	4621      	mov	r1, r4
 8001270:	9700      	str	r7, [sp, #0]
 8001272:	f7ff ff8f 	bl	8001194 <LCD_DrawChar_Color>
    while (*pStr != '\0') {
 8001276:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800127a:	b15a      	cbz	r2, 8001294 <LCD_DrawString_Color+0x48>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 800127c:	2de8      	cmp	r5, #232	; 0xe8
 800127e:	d902      	bls.n	8001286 <LCD_DrawString_Color+0x3a>
            usC = LCD_DispWindow_Start_COLUMN;
 8001280:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 8001282:	3410      	adds	r4, #16
 8001284:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001286:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 800128a:	d9eb      	bls.n	8001264 <LCD_DrawString_Color+0x18>
            usP = LCD_DispWindow_Start_PAGE;
 800128c:	2400      	movs	r4, #0
 800128e:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 8001290:	4620      	mov	r0, r4
 8001292:	e7eb      	b.n	800126c <LCD_DrawString_Color+0x20>

    }

}
 8001294:	b002      	add	sp, #8
 8001296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129a:	bf00      	nop

0800129c <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 80012a2:	7812      	ldrb	r2, [r2, #0]
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 80012a4:	b083      	sub	sp, #12
 80012a6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 80012aa:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    while (*pStr != '\0') {
 80012ae:	b1fa      	cbz	r2, 80012f0 <LCD_DrawString_Color_With_Delay+0x54>
 80012b0:	4605      	mov	r5, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	461f      	mov	r7, r3
 80012b6:	e00f      	b.n	80012d8 <LCD_DrawString_Color_With_Delay+0x3c>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 80012b8:	f105 0308 	add.w	r3, r5, #8
 80012bc:	4628      	mov	r0, r5
 80012be:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 80012c0:	463b      	mov	r3, r7
 80012c2:	4621      	mov	r1, r4
 80012c4:	f8cd 9000 	str.w	r9, [sp]
 80012c8:	f7ff ff64 	bl	8001194 <LCD_DrawChar_Color>
        HAL_Delay(delayEachChar);
 80012cc:	4640      	mov	r0, r8
 80012ce:	f001 ff1d 	bl	800310c <HAL_Delay>
    while (*pStr != '\0') {
 80012d2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80012d6:	b15a      	cbz	r2, 80012f0 <LCD_DrawString_Color_With_Delay+0x54>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 80012d8:	2de8      	cmp	r5, #232	; 0xe8
 80012da:	d902      	bls.n	80012e2 <LCD_DrawString_Color_With_Delay+0x46>
            usC = LCD_DispWindow_Start_COLUMN;
 80012dc:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 80012de:	3410      	adds	r4, #16
 80012e0:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 80012e2:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 80012e6:	d9e7      	bls.n	80012b8 <LCD_DrawString_Color_With_Delay+0x1c>
            usP = LCD_DispWindow_Start_PAGE;
 80012e8:	2400      	movs	r4, #0
 80012ea:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 80012ec:	4620      	mov	r0, r4
 80012ee:	e7e7      	b.n	80012c0 <LCD_DrawString_Color_With_Delay+0x24>
    }

}
 80012f0:	b003      	add	sp, #12
 80012f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f6:	bf00      	nop

080012f8 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
    switch (ucOption) {
 80012f8:	3801      	subs	r0, #1
void LCD_GramScan(uint8_t ucOption) {
 80012fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (ucOption) {
 80012fc:	2803      	cmp	r0, #3
 80012fe:	d81e      	bhi.n	800133e <LCD_GramScan+0x46>
 8001300:	e8df f000 	tbb	[pc, r0]
 8001304:	2202424a 	.word	0x2202424a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001308:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800130a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800130e:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001312:	f04f 0c28 	mov.w	ip, #40	; 0x28
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001316:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001318:	2601      	movs	r6, #1
 800131a:	253f      	movs	r5, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800131c:	242b      	movs	r4, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800131e:	20ef      	movs	r0, #239	; 0xef
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001322:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001326:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800132a:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	801e      	strh	r6, [r3, #0]
 8001332:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001334:	800c      	strh	r4, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001336:	801a      	strh	r2, [r3, #0]
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800133e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001342:	222c      	movs	r2, #44	; 0x2c
 8001344:	801a      	strh	r2, [r3, #0]

    /* write gram start */
    LCD_Write_Cmd(0x2C);


}
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001348:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800134a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800134e:	2736      	movs	r7, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001350:	2648      	movs	r6, #72	; 0x48
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001352:	252a      	movs	r5, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001354:	24ef      	movs	r4, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001356:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800135a:	f04f 0c01 	mov.w	ip, #1
 800135e:	203f      	movs	r0, #63	; 0x3f
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001362:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001364:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001366:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001370:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800137c:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800137e:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001380:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001384:	801a      	strh	r2, [r3, #0]
}
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001388:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800138a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800138e:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001392:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001396:	e7be      	b.n	8001316 <LCD_GramScan+0x1e>
 8001398:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800139a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800139e:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013a2:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013a6:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013a8:	26ef      	movs	r6, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013aa:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013ac:	2401      	movs	r4, #1
 80013ae:	203f      	movs	r0, #63	; 0x3f
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013b2:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013b6:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013ba:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	801a      	strh	r2, [r3, #0]
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013c4:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013c6:	801a      	strh	r2, [r3, #0]
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013cc:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013ce:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013d0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80013d4:	801a      	strh	r2, [r3, #0]
}
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d8:	60020000 	.word	0x60020000

080013dc <mainPage.part.0>:
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
    initValue = 0xA0;
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
}

void mainPage(void) {
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (changingPage) {
        changingPage = 0;
 80013e0:	2400      	movs	r4, #0
 80013e2:	4828      	ldr	r0, [pc, #160]	; (8001484 <mainPage.part.0+0xa8>)
        currentPage = home;
 80013e4:	4928      	ldr	r1, [pc, #160]	; (8001488 <mainPage.part.0+0xac>)
void mainPage(void) {
 80013e6:	b082      	sub	sp, #8
        LCD_Clear(0, 0, 240, 320, BLACK);
 80013e8:	9400      	str	r4, [sp, #0]
 80013ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
        changingPage = 0;
 80013ee:	6004      	str	r4, [r0, #0]
        currentPage = home;
 80013f0:	700c      	strb	r4, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80013f2:	4620      	mov	r0, r4
 80013f4:	4621      	mov	r1, r4
 80013f6:	22f0      	movs	r2, #240	; 0xf0
 80013f8:	f7ff fdc4 	bl	8000f84 <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80013fc:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8001400:	230a      	movs	r3, #10
        HAL_Delay(100);
        output_text = "Please choose an option below.";
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
        HAL_Delay(200);
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8001402:	f647 77ff 	movw	r7, #32767	; 0x7fff
        output_text = "WEIGHT";
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001406:	250f      	movs	r5, #15
        HAL_Delay(200);
        output_text = "ACCEL.";
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 8001408:	f64f 76e0 	movw	r6, #65504	; 0xffe0
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 800140c:	2128      	movs	r1, #40	; 0x28
 800140e:	4620      	mov	r0, r4
 8001410:	4a1e      	ldr	r2, [pc, #120]	; (800148c <mainPage.part.0+0xb0>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f8cd 8000 	str.w	r8, [sp]
 8001418:	231f      	movs	r3, #31
 800141a:	f7ff ff3f 	bl	800129c <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 800141e:	2064      	movs	r0, #100	; 0x64
 8001420:	f001 fe74 	bl	800310c <HAL_Delay>
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 8001424:	4623      	mov	r3, r4
 8001426:	2164      	movs	r1, #100	; 0x64
 8001428:	4620      	mov	r0, r4
 800142a:	4a19      	ldr	r2, [pc, #100]	; (8001490 <mainPage.part.0+0xb4>)
 800142c:	f8cd 8000 	str.w	r8, [sp]
 8001430:	f7ff ff0c 	bl	800124c <LCD_DrawString_Color>
        HAL_Delay(200);
 8001434:	20c8      	movs	r0, #200	; 0xc8
 8001436:	f001 fe69 	bl	800310c <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 800143a:	2328      	movs	r3, #40	; 0x28
 800143c:	2250      	movs	r2, #80	; 0x50
 800143e:	21e6      	movs	r1, #230	; 0xe6
 8001440:	2014      	movs	r0, #20
 8001442:	9700      	str	r7, [sp, #0]
 8001444:	f7ff fd9e 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001448:	463b      	mov	r3, r7
 800144a:	21f2      	movs	r1, #242	; 0xf2
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <mainPage.part.0+0xb8>)
 800144e:	2023      	movs	r0, #35	; 0x23
 8001450:	e9cd 4500 	strd	r4, r5, [sp]
 8001454:	f7ff ff22 	bl	800129c <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 8001458:	20c8      	movs	r0, #200	; 0xc8
 800145a:	f001 fe57 	bl	800310c <HAL_Delay>
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 800145e:	2328      	movs	r3, #40	; 0x28
 8001460:	2250      	movs	r2, #80	; 0x50
 8001462:	21e6      	movs	r1, #230	; 0xe6
 8001464:	2082      	movs	r0, #130	; 0x82
 8001466:	9600      	str	r6, [sp, #0]
 8001468:	f7ff fd8c 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 800146c:	4633      	mov	r3, r6
 800146e:	21f2      	movs	r1, #242	; 0xf2
 8001470:	2096      	movs	r0, #150	; 0x96
 8001472:	e9cd 4500 	strd	r4, r5, [sp]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <mainPage.part.0+0xbc>)
 8001478:	f7ff ff10 	bl	800129c <LCD_DrawString_Color_With_Delay>
    }
}
 800147c:	b002      	add	sp, #8
 800147e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000
 8001488:	2000055a 	.word	0x2000055a
 800148c:	08008a50 	.word	0x08008a50
 8001490:	08008a78 	.word	0x08008a78
 8001494:	08008a98 	.word	0x08008a98
 8001498:	08008aa0 	.word	0x08008aa0

0800149c <Check_touchkey>:
void Check_touchkey() {
 800149c:	b500      	push	{lr}
 800149e:	b083      	sub	sp, #12
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 80014a0:	491b      	ldr	r1, [pc, #108]	; (8001510 <Check_touchkey+0x74>)
 80014a2:	a801      	add	r0, sp, #4
 80014a4:	f001 fd6e 	bl	8002f84 <XPT2046_Get_TouchedPoint>
 80014a8:	b190      	cbz	r0, 80014d0 <Check_touchkey+0x34>
        if (currentPage == home) {
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <Check_touchkey+0x78>)
 80014ac:	7813      	ldrb	r3, [r2, #0]
 80014ae:	b993      	cbnz	r3, 80014d6 <Check_touchkey+0x3a>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 80014b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80014b4:	3bd3      	subs	r3, #211	; 0xd3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b26      	cmp	r3, #38	; 0x26
 80014ba:	d809      	bhi.n	80014d0 <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 80014bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80014c0:	f1a3 0115 	sub.w	r1, r3, #21
 80014c4:	294e      	cmp	r1, #78	; 0x4e
 80014c6:	d819      	bhi.n	80014fc <Check_touchkey+0x60>
                    currentPage = weight;
 80014c8:	2301      	movs	r3, #1
                    changingPage = 1;
 80014ca:	4913      	ldr	r1, [pc, #76]	; (8001518 <Check_touchkey+0x7c>)
                    currentPage = weight;
 80014cc:	7013      	strb	r3, [r2, #0]
                    changingPage = 1;
 80014ce:	600b      	str	r3, [r1, #0]
}
 80014d0:	b003      	add	sp, #12
 80014d2:	f85d fb04 	ldr.w	pc, [sp], #4
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 80014d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80014da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2b18      	cmp	r3, #24
 80014e2:	d8f5      	bhi.n	80014d0 <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 80014e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80014e8:	3b15      	subs	r3, #21
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	2b80      	cmp	r3, #128	; 0x80
 80014ee:	d8ef      	bhi.n	80014d0 <Check_touchkey+0x34>
                    currentPage = home;
 80014f0:	2000      	movs	r0, #0
                    changingPage = 1;
 80014f2:	2101      	movs	r1, #1
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <Check_touchkey+0x7c>)
                    currentPage = home;
 80014f6:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 80014f8:	6019      	str	r1, [r3, #0]
}
 80014fa:	e7e9      	b.n	80014d0 <Check_touchkey+0x34>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 80014fc:	3b83      	subs	r3, #131	; 0x83
 80014fe:	2b4e      	cmp	r3, #78	; 0x4e
 8001500:	d8e6      	bhi.n	80014d0 <Check_touchkey+0x34>
                    currentPage = accelerometer;
 8001502:	2002      	movs	r0, #2
                    changingPage = 1;
 8001504:	2101      	movs	r1, #1
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <Check_touchkey+0x7c>)
                    currentPage = accelerometer;
 8001508:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 800150a:	6019      	str	r1, [r3, #0]
 800150c:	e7e0      	b.n	80014d0 <Check_touchkey+0x34>
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	2000055a 	.word	0x2000055a
 8001518:	20000000 	.word	0x20000000

0800151c <shiftAcceleRecord>:
void shiftAcceleRecord() {
 800151c:	b510      	push	{r4, lr}
    if (acceleRecordSize < RECORD_MAX_SIZE) {
 800151e:	4c0b      	ldr	r4, [pc, #44]	; (800154c <shiftAcceleRecord+0x30>)
 8001520:	f9b4 e000 	ldrsh.w	lr, [r4]
 8001524:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8001528:	dd0f      	ble.n	800154a <shiftAcceleRecord+0x2e>
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <shiftAcceleRecord+0x34>)
 800152c:	f203 2c52 	addw	ip, r3, #594	; 0x252
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 8001530:	88d8      	ldrh	r0, [r3, #6]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 8001532:	8919      	ldrh	r1, [r3, #8]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 8001534:	895a      	ldrh	r2, [r3, #10]
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 8001536:	8018      	strh	r0, [r3, #0]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 8001538:	8059      	strh	r1, [r3, #2]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 800153a:	809a      	strh	r2, [r3, #4]
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 800153c:	3306      	adds	r3, #6
 800153e:	4563      	cmp	r3, ip
 8001540:	d1f6      	bne.n	8001530 <shiftAcceleRecord+0x14>
    --acceleRecordSize;
 8001542:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8001546:	f8a4 e000 	strh.w	lr, [r4]
}
 800154a:	bd10      	pop	{r4, pc}
 800154c:	2000022c 	.word	0x2000022c
 8001550:	20000230 	.word	0x20000230

08001554 <insertAngleRecord>:
void insertAngleRecord(uint8_t newAngle) {
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001556:	4f10      	ldr	r7, [pc, #64]	; (8001598 <insertAngleRecord+0x44>)
void insertAngleRecord(uint8_t newAngle) {
 8001558:	4606      	mov	r6, r0
    while (angleRecordSize > RECORD_MAX_SIZE) {
 800155a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	dd12      	ble.n	8001588 <insertAngleRecord+0x34>
 8001562:	3b01      	subs	r3, #1
        angleRecord[i - 1] = angleRecord[i];
 8001564:	4d0d      	ldr	r5, [pc, #52]	; (800159c <insertAngleRecord+0x48>)
 8001566:	b29c      	uxth	r4, r3
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001568:	3c01      	subs	r4, #1
        angleRecord[i - 1] = angleRecord[i];
 800156a:	22c6      	movs	r2, #198	; 0xc6
 800156c:	4629      	mov	r1, r5
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <insertAngleRecord+0x4c>)
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001570:	b2a4      	uxth	r4, r4
        angleRecord[i - 1] = angleRecord[i];
 8001572:	f003 fcd3 	bl	8004f1c <memmove>
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001576:	2c63      	cmp	r4, #99	; 0x63
 8001578:	d1f6      	bne.n	8001568 <insertAngleRecord+0x14>
 800157a:	2265      	movs	r2, #101	; 0x65
    --angleRecordSize;
 800157c:	2364      	movs	r3, #100	; 0x64
    angleRecord[angleRecordSize++] = newAngle;
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <insertAngleRecord+0x4c>)
 8001580:	803a      	strh	r2, [r7, #0]
 8001582:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 8001586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    angleRecord[angleRecordSize++] = newAngle;
 8001588:	4905      	ldr	r1, [pc, #20]	; (80015a0 <insertAngleRecord+0x4c>)
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	b212      	sxth	r2, r2
 800158e:	803a      	strh	r2, [r7, #0]
 8001590:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 8001594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000558 	.word	0x20000558
 800159c:	20000492 	.word	0x20000492
 80015a0:	20000490 	.word	0x20000490
 80015a4:	00000000 	.word	0x00000000

080015a8 <updateDistance>:
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (short i = 0; i < acceleRecordSize; ++i) {
 80015ac:	4b82      	ldr	r3, [pc, #520]	; (80017b8 <updateDistance+0x210>)
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80015ae:	b087      	sub	sp, #28
    for (short i = 0; i < acceleRecordSize; ++i) {
 80015b0:	f9b3 b000 	ldrsh.w	fp, [r3]
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80015b4:	e9cd 0103 	strd	r0, r1, [sp, #12]
    for (short i = 0; i < acceleRecordSize; ++i) {
 80015b8:	f1bb 0f00 	cmp.w	fp, #0
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 80015bc:	9205      	str	r2, [sp, #20]
    for (short i = 0; i < acceleRecordSize; ++i) {
 80015be:	f340 80e4 	ble.w	800178a <updateDistance+0x1e2>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 80015c2:	4658      	mov	r0, fp
 80015c4:	2500      	movs	r5, #0
 80015c6:	f7fe ff89 	bl	80004dc <__aeabi_i2d>
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 80015ca:	46a8      	mov	r8, r5
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 80015cc:	e9cd 0100 	strd	r0, r1, [sp]
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46aa      	mov	sl, r5
 80015d4:	4628      	mov	r0, r5
 80015d6:	4c79      	ldr	r4, [pc, #484]	; (80017bc <updateDistance+0x214>)
 80015d8:	e044      	b.n	8001664 <updateDistance+0xbc>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 80015da:	2200      	movs	r2, #0
 80015dc:	4630      	mov	r0, r6
 80015de:	4639      	mov	r1, r7
 80015e0:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <updateDistance+0x218>)
 80015e2:	f7ff fa57 	bl	8000a94 <__aeabi_dcmplt>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d14e      	bne.n	8001688 <updateDistance+0xe0>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 80015ea:	4630      	mov	r0, r6
 80015ec:	4639      	mov	r1, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <updateDistance+0x21c>)
 80015f2:	f7ff fa4f 	bl	8000a94 <__aeabi_dcmplt>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d14a      	bne.n	8001690 <updateDistance+0xe8>
        else ratioDelay = 0.5;
 80015fa:	2600      	movs	r6, #0
 80015fc:	4f70      	ldr	r7, [pc, #448]	; (80017c0 <updateDistance+0x218>)
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 80015fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001602:	f7fe ff6b 	bl	80004dc <__aeabi_i2d>
 8001606:	4632      	mov	r2, r6
 8001608:	463b      	mov	r3, r7
 800160a:	f7fe ffd1 	bl	80005b0 <__aeabi_dmul>
 800160e:	f006 fb5f 	bl	8007cd0 <floor>
 8001612:	f7ff fa7d 	bl	8000b10 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 8001618:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 800161c:	b21b      	sxth	r3, r3
 800161e:	449a      	add	sl, r3
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 8001620:	f7fe ff5c 	bl	80004dc <__aeabi_i2d>
 8001624:	4632      	mov	r2, r6
 8001626:	463b      	mov	r3, r7
 8001628:	f7fe ffc2 	bl	80005b0 <__aeabi_dmul>
 800162c:	f006 fb50 	bl	8007cd0 <floor>
 8001630:	f7ff fa6e 	bl	8000b10 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001636:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 800163a:	b21b      	sxth	r3, r3
 800163c:	4499      	add	r9, r3
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 800163e:	f7fe ff4d 	bl	80004dc <__aeabi_i2d>
 8001642:	463b      	mov	r3, r7
 8001644:	4632      	mov	r2, r6
 8001646:	f7fe ffb3 	bl	80005b0 <__aeabi_dmul>
 800164a:	f006 fb41 	bl	8007cd0 <floor>
 800164e:	f7ff fa5f 	bl	8000b10 <__aeabi_d2iz>
 8001652:	4603      	mov	r3, r0
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001654:	3501      	adds	r5, #1
 8001656:	b228      	sxth	r0, r5
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001658:	b21b      	sxth	r3, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 800165a:	4583      	cmp	fp, r0
 800165c:	f104 0406 	add.w	r4, r4, #6
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 8001660:	4498      	add	r8, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001662:	dd19      	ble.n	8001698 <updateDistance+0xf0>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 8001664:	f7fe ff3a 	bl	80004dc <__aeabi_i2d>
 8001668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800166c:	f7ff f8ca 	bl	8000804 <__aeabi_ddiv>
 8001670:	2200      	movs	r2, #0
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <updateDistance+0x220>)
 8001674:	4606      	mov	r6, r0
 8001676:	460f      	mov	r7, r1
 8001678:	f7ff fa0c 	bl	8000a94 <__aeabi_dcmplt>
 800167c:	2800      	cmp	r0, #0
 800167e:	d0ac      	beq.n	80015da <updateDistance+0x32>
 8001680:	a747      	add	r7, pc, #284	; (adr r7, 80017a0 <updateDistance+0x1f8>)
 8001682:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001686:	e7ba      	b.n	80015fe <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 8001688:	a747      	add	r7, pc, #284	; (adr r7, 80017a8 <updateDistance+0x200>)
 800168a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800168e:	e7b6      	b.n	80015fe <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 8001690:	a747      	add	r7, pc, #284	; (adr r7, 80017b0 <updateDistance+0x208>)
 8001692:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001696:	e7b2      	b.n	80015fe <updateDistance+0x56>
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001698:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <updateDistance+0x224>)
 800169a:	ea4f 70ea 	mov.w	r0, sl, asr #31
 800169e:	fb83 120a 	smull	r1, r2, r3, sl
 80016a2:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 80016a6:	fb83 1209 	smull	r1, r2, r3, r9
            accum_z / RECORD_MAX_SIZE;
 80016aa:	fb83 1308 	smull	r1, r3, r3, r8
 80016ae:	ea4f 7be8 	mov.w	fp, r8, asr #31
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 80016b2:	ea4f 76e9 	mov.w	r6, r9, asr #31
 80016b6:	ebc6 1662 	rsb	r6, r6, r2, asr #5
            accum_z / RECORD_MAX_SIZE;
 80016ba:	ebcb 1363 	rsb	r3, fp, r3, asr #5
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 80016be:	b200      	sxth	r0, r0
 80016c0:	b236      	sxth	r6, r6
 80016c2:	fa0f fb83 	sxth.w	fp, r3
    (newX <= avg_x) ? (accum_x = 0) : (accum_x -= avg_x);
 80016c6:	9b03      	ldr	r3, [sp, #12]
 80016c8:	4283      	cmp	r3, r0
 80016ca:	dd4d      	ble.n	8001768 <updateDistance+0x1c0>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016cc:	ebaa 0000 	sub.w	r0, sl, r0
 80016d0:	f7fe ff04 	bl	80004dc <__aeabi_i2d>
 80016d4:	460b      	mov	r3, r1
 80016d6:	4602      	mov	r2, r0
 80016d8:	f7fe ff6a 	bl	80005b0 <__aeabi_dmul>
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80016dc:	9b04      	ldr	r3, [sp, #16]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016de:	4604      	mov	r4, r0
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80016e0:	42b3      	cmp	r3, r6
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016e2:	460d      	mov	r5, r1
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 80016e4:	dd46      	ble.n	8001774 <updateDistance+0x1cc>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016e6:	eba9 0006 	sub.w	r0, r9, r6
 80016ea:	f7fe fef7 	bl	80004dc <__aeabi_i2d>
 80016ee:	460b      	mov	r3, r1
 80016f0:	4602      	mov	r2, r0
 80016f2:	f7fe ff5d 	bl	80005b0 <__aeabi_dmul>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 80016f6:	9b05      	ldr	r3, [sp, #20]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016f8:	4606      	mov	r6, r0
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 80016fa:	455b      	cmp	r3, fp
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 80016fc:	460f      	mov	r7, r1
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 80016fe:	dd3f      	ble.n	8001780 <updateDistance+0x1d8>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001700:	eba8 000b 	sub.w	r0, r8, fp
 8001704:	f7fe feea 	bl	80004dc <__aeabi_i2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	f7fe ff50 	bl	80005b0 <__aeabi_dmul>
 8001710:	4680      	mov	r8, r0
 8001712:	4689      	mov	r9, r1
 8001714:	4632      	mov	r2, r6
 8001716:	463b      	mov	r3, r7
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe fd92 	bl	8000244 <__adddf3>
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	f7fe fd8e 	bl	8000244 <__adddf3>
 8001728:	f006 fb54 	bl	8007dd4 <sqrt>
 800172c:	4604      	mov	r4, r0
 800172e:	460d      	mov	r5, r1
    distanceTraveled += (uint16_t) floor(calDis);
 8001730:	f006 face 	bl	8007cd0 <floor>
 8001734:	f7ff fa14 	bl	8000b60 <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	4f25      	ldr	r7, [pc, #148]	; (80017d0 <updateDistance+0x228>)
 800173c:	b29b      	uxth	r3, r3
 800173e:	683a      	ldr	r2, [r7, #0]
    actualDistance += (calDis / 1000);
 8001740:	4620      	mov	r0, r4
    distanceTraveled += (uint16_t) floor(calDis);
 8001742:	4413      	add	r3, r2
 8001744:	603b      	str	r3, [r7, #0]
    actualDistance += (calDis / 1000);
 8001746:	4629      	mov	r1, r5
 8001748:	2200      	movs	r2, #0
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <updateDistance+0x22c>)
 800174c:	f7ff f85a 	bl	8000804 <__aeabi_ddiv>
 8001750:	4e21      	ldr	r6, [pc, #132]	; (80017d8 <updateDistance+0x230>)
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9d6 0100 	ldrd	r0, r1, [r6]
 800175a:	f7fe fd73 	bl	8000244 <__adddf3>
 800175e:	e9c6 0100 	strd	r0, r1, [r6]
}
 8001762:	b007      	add	sp, #28
 8001764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001768:	9b04      	ldr	r3, [sp, #16]
 800176a:	2400      	movs	r4, #0
 800176c:	42b3      	cmp	r3, r6
 800176e:	f04f 0500 	mov.w	r5, #0
 8001772:	dcb8      	bgt.n	80016e6 <updateDistance+0x13e>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001774:	9b05      	ldr	r3, [sp, #20]
 8001776:	2600      	movs	r6, #0
 8001778:	455b      	cmp	r3, fp
 800177a:	f04f 0700 	mov.w	r7, #0
 800177e:	dcbf      	bgt.n	8001700 <updateDistance+0x158>
 8001780:	f04f 0800 	mov.w	r8, #0
 8001784:	f04f 0900 	mov.w	r9, #0
 8001788:	e7c4      	b.n	8001714 <updateDistance+0x16c>
    for (short i = 0; i < acceleRecordSize; ++i) {
 800178a:	f04f 0b00 	mov.w	fp, #0
 800178e:	465e      	mov	r6, fp
 8001790:	4658      	mov	r0, fp
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 8001792:	46d8      	mov	r8, fp
 8001794:	46d9      	mov	r9, fp
 8001796:	46da      	mov	sl, fp
 8001798:	e795      	b.n	80016c6 <updateDistance+0x11e>
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	9999999a 	.word	0x9999999a
 80017a4:	3fa99999 	.word	0x3fa99999
 80017a8:	33333333 	.word	0x33333333
 80017ac:	3fc33333 	.word	0x3fc33333
 80017b0:	33333333 	.word	0x33333333
 80017b4:	3fd33333 	.word	0x3fd33333
 80017b8:	2000022c 	.word	0x2000022c
 80017bc:	20000230 	.word	0x20000230
 80017c0:	3fe00000 	.word	0x3fe00000
 80017c4:	3fe80000 	.word	0x3fe80000
 80017c8:	3fd00000 	.word	0x3fd00000
 80017cc:	51eb851f 	.word	0x51eb851f
 80017d0:	2000055c 	.word	0x2000055c
 80017d4:	408f4000 	.word	0x408f4000
 80017d8:	20000488 	.word	0x20000488

080017dc <getY>:
void getY(uint8_t index, uint8_t delay) {
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4604      	mov	r4, r0
 80017e0:	460d      	mov	r5, r1
    if ((index & 0x01) == 0) {
 80017e2:	f010 0201 	ands.w	r2, r0, #1
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80017e6:	bf18      	it	ne
 80017e8:	2201      	movne	r2, #1
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <getY+0x48>)
 80017f0:	f002 f98e 	bl	8003b10 <HAL_GPIO_WritePin>
    if ((index & 0x02) == 0) {
 80017f4:	f014 0202 	ands.w	r2, r4, #2
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80017f8:	bf18      	it	ne
 80017fa:	2201      	movne	r2, #1
 80017fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <getY+0x48>)
 8001802:	f002 f985 	bl	8003b10 <HAL_GPIO_WritePin>
    if ((index & 0x04) == 0) {
 8001806:	f014 0204 	ands.w	r2, r4, #4
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <getY+0x48>)
 800180c:	bf18      	it	ne
 800180e:	2201      	movne	r2, #1
 8001810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001814:	f002 f97c 	bl	8003b10 <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001818:	4628      	mov	r0, r5
}
 800181a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(delay);
 800181e:	f001 bc75 	b.w	800310c <HAL_Delay>
 8001822:	bf00      	nop
 8001824:	40011000 	.word	0x40011000

08001828 <initWeightSensors>:
void initWeightSensors(struct YPin *pins) {
 8001828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pins[2].weightAtSampledWeight = 300;
 800182c:	f44f 7396 	mov.w	r3, #300	; 0x12c
void initWeightSensors(struct YPin *pins) {
 8001830:	4604      	mov	r4, r0
    pins[0].weightAtSampledWeight = 270;
 8001832:	f44f 7087 	mov.w	r0, #270	; 0x10e
    pins[4].voltageAtZeroWeight = 1000;
 8001836:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80018c0 <initWeightSensors+0x98>
    pins[0].voltageAtZeroWeight = 1200;
 800183a:	4922      	ldr	r1, [pc, #136]	; (80018c4 <initWeightSensors+0x9c>)
    pins[1].voltageAtZeroWeight = 1300;
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <initWeightSensors+0xa0>)
    pins[2].voltageAtZeroWeight = 1800;
 800183e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80018cc <initWeightSensors+0xa4>
    pins[3].voltageAtZeroWeight = 2800;
 8001842:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80018d0 <initWeightSensors+0xa8>
    pins[5].voltageAtZeroWeight = 1800;
 8001846:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80018d4 <initWeightSensors+0xac>
    pins[6].voltageAtZeroWeight = 1800;
 800184a:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80018d8 <initWeightSensors+0xb0>
    pins[7].voltageAtZeroWeight = 1000;
 800184e:	4e23      	ldr	r6, [pc, #140]	; (80018dc <initWeightSensors+0xb4>)
    pins[4].voltageAtZeroWeight = 1000;
 8001850:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    pins[7].weightAtSampledWeight = 300;
 8001854:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 8001858:	f240 57dc 	movw	r7, #1500	; 0x5dc
    pins[2].voltageAtZeroWeight = 1800;
 800185c:	f8c4 a020 	str.w	sl, [r4, #32]
    pins[3].voltageAtZeroWeight = 2800;
 8001860:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    pins[5].voltageAtZeroWeight = 1800;
 8001864:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
    pins[6].voltageAtZeroWeight = 1800;
 8001868:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    pins[7].voltageAtZeroWeight = 1000;
 800186c:	6726      	str	r6, [r4, #112]	; 0x70
    pins[0].voltageAtZeroWeight = 1200;
 800186e:	6021      	str	r1, [r4, #0]
    pins[1].voltageAtZeroWeight = 1300;
 8001870:	6122      	str	r2, [r4, #16]
    pins[0].weightAtSampledWeight = 270;
 8001872:	80a0      	strh	r0, [r4, #4]
    pins[1].weightAtSampledWeight = 270;
 8001874:	82a0      	strh	r0, [r4, #20]
    pins[2].weightAtSampledWeight = 300;
 8001876:	84a3      	strh	r3, [r4, #36]	; 0x24
    pins[3].weightAtSampledWeight = 300;
 8001878:	86a3      	strh	r3, [r4, #52]	; 0x34
    pins[4].weightAtSampledWeight = 300;
 800187a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pins[5].weightAtSampledWeight = 300;
 800187e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    pins[6].weightAtSampledWeight = 300;
 8001882:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pins[7].weightAtSampledWeight = 300;
 8001886:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    for (uint8_t i = 0; i < 8; i++)
 800188a:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800188e:	e003      	b.n	8001898 <initWeightSensors+0x70>
                pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 8001890:	8aa0      	ldrh	r0, [r4, #20]
 8001892:	8a67      	ldrh	r7, [r4, #18]
 8001894:	f834 5f10 	ldrh.w	r5, [r4, #16]!
 8001898:	f7fe fe20 	bl	80004dc <__aeabi_i2d>
 800189c:	4602      	mov	r2, r0
 800189e:	1b78      	subs	r0, r7, r5
 80018a0:	4616      	mov	r6, r2
 80018a2:	460f      	mov	r7, r1
 80018a4:	f7fe fe1a 	bl	80004dc <__aeabi_i2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4630      	mov	r0, r6
 80018ae:	4639      	mov	r1, r7
 80018b0:	f7fe ffa8 	bl	8000804 <__aeabi_ddiv>
    for (uint8_t i = 0; i < 8; i++)
 80018b4:	45a0      	cmp	r8, r4
        pins[i].weightCoef =
 80018b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    for (uint8_t i = 0; i < 8; i++)
 80018ba:	d1e9      	bne.n	8001890 <initWeightSensors+0x68>
}
 80018bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c0:	070803e8 	.word	0x070803e8
 80018c4:	05dc04b0 	.word	0x05dc04b0
 80018c8:	05dc0514 	.word	0x05dc0514
 80018cc:	0a280708 	.word	0x0a280708
 80018d0:	0c800af0 	.word	0x0c800af0
 80018d4:	07d00708 	.word	0x07d00708
 80018d8:	08340708 	.word	0x08340708
 80018dc:	53fc03e8 	.word	0x53fc03e8

080018e0 <initializeHMC5883L>:
void initializeHMC5883L() {
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t initValue = 0x70;
 80018e2:	2370      	movs	r3, #112	; 0x70
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80018e4:	2401      	movs	r4, #1
 80018e6:	2664      	movs	r6, #100	; 0x64
void initializeHMC5883L() {
 80018e8:	b087      	sub	sp, #28
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80018ea:	4f0e      	ldr	r7, [pc, #56]	; (8001924 <initializeHMC5883L+0x44>)
 80018ec:	f10d 0517 	add.w	r5, sp, #23
    uint8_t initValue = 0x70;
 80018f0:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 80018f4:	2200      	movs	r2, #0
 80018f6:	4623      	mov	r3, r4
 80018f8:	213c      	movs	r1, #60	; 0x3c
 80018fa:	4638      	mov	r0, r7
 80018fc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001900:	9500      	str	r5, [sp, #0]
 8001902:	f002 fbef 	bl	80040e4 <HAL_I2C_Mem_Write>
    initValue = 0xA0;
 8001906:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 800190a:	4638      	mov	r0, r7
 800190c:	4623      	mov	r3, r4
 800190e:	4622      	mov	r2, r4
 8001910:	213c      	movs	r1, #60	; 0x3c
 8001912:	9602      	str	r6, [sp, #8]
 8001914:	9401      	str	r4, [sp, #4]
 8001916:	9500      	str	r5, [sp, #0]
    initValue = 0xA0;
 8001918:	f88d c017 	strb.w	ip, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 800191c:	f002 fbe2 	bl	80040e4 <HAL_I2C_Mem_Write>
}
 8001920:	b007      	add	sp, #28
 8001922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001924:	20000590 	.word	0x20000590

08001928 <weightPage>:
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
    HAL_Delay(20);
}

void weightPage(void) {
 8001928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 800192c:	4961      	ldr	r1, [pc, #388]	; (8001ab4 <weightPage+0x18c>)
void weightPage(void) {
 800192e:	b08b      	sub	sp, #44	; 0x2c
    if (changingPage) {
 8001930:	680b      	ldr	r3, [r1, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <weightPage+0xe0>
 8001936:	f10d 0918 	add.w	r9, sp, #24
 800193a:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(20);
 800193e:	2500      	movs	r5, #0
 8001940:	462f      	mov	r7, r5
 8001942:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001ab8 <weightPage+0x190>
 8001946:	f8df a174 	ldr.w	sl, [pc, #372]	; 8001abc <weightPage+0x194>
        initWeightSensors(weightSensors);
    }

    uint16_t sum = 0;
    for (uint8_t counter = 0; counter < 8; counter++) {
        getY(counter, 20);
 800194a:	2114      	movs	r1, #20
 800194c:	b2e8      	uxtb	r0, r5
 800194e:	f7ff ff45 	bl	80017dc <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001952:	485b      	ldr	r0, [pc, #364]	; (8001ac0 <weightPage+0x198>)
 8001954:	f001 fc9e 	bl	8003294 <HAL_ADC_GetValue>
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001958:	f8b8 3000 	ldrh.w	r3, [r8]
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 800195c:	4604      	mov	r4, r0
    for (uint8_t counter = 0; counter < 8; counter++) {
 800195e:	f108 0810 	add.w	r8, r8, #16
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001962:	1ac0      	subs	r0, r0, r3
 8001964:	f7fe fdaa 	bl	80004bc <__aeabi_ui2d>
 8001968:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 800196c:	f7fe fe20 	bl	80005b0 <__aeabi_dmul>
 8001970:	f7ff f8ce 	bl	8000b10 <__aeabi_d2iz>
 8001974:	4603      	mov	r3, r0
//        if (counter < 4)
//        	LCD_DrawHeatCircle(30, 240 - counter * 40, 30, 85 - val * 85 / 4096, 85);
//		else
//			LCD_DrawHeatCircle(70, 120 + (counter - 4) * 40, 30, 85 - val * 85 / 4096, 85);

        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001976:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800197a:	eb01 1101 	add.w	r1, r1, r1, lsl #4

        char dec[10] = "";
 800197e:	2600      	movs	r6, #0
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001980:	0b09      	lsrs	r1, r1, #12
 8001982:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001986:	b21b      	sxth	r3, r3
        if (weightPin < 0) weightPin = 0;
 8001988:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 800198c:	4650      	mov	r0, sl
 800198e:	b289      	uxth	r1, r1
        sum += weightPin;
 8001990:	441f      	add	r7, r3
 8001992:	9303      	str	r3, [sp, #12]
        LCD_SetPinColor(&weightSensorsData[counter], 85 - val * 85 / 4096);
 8001994:	f7ff fb0e 	bl	8000fb4 <LCD_SetPinColor>
        sprintf(dec, "%4d %5d", val, weightPin);
 8001998:	4622      	mov	r2, r4
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 800199a:	f64f 74ff 	movw	r4, #65535	; 0xffff
        sprintf(dec, "%4d %5d", val, weightPin);
 800199e:	9b03      	ldr	r3, [sp, #12]
 80019a0:	4948      	ldr	r1, [pc, #288]	; (8001ac4 <weightPage+0x19c>)
 80019a2:	4658      	mov	r0, fp
        char dec[10] = "";
 80019a4:	9605      	str	r6, [sp, #20]
 80019a6:	f8c9 6000 	str.w	r6, [r9]
 80019aa:	f8a9 6004 	strh.w	r6, [r9, #4]
        sprintf(dec, "%4d %5d", val, weightPin);
 80019ae:	f004 f823 	bl	80059f8 <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80019b2:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80019b6:	0049      	lsls	r1, r1, #1
 80019b8:	3164      	adds	r1, #100	; 0x64
 80019ba:	4633      	mov	r3, r6
 80019bc:	465a      	mov	r2, fp
 80019be:	208c      	movs	r0, #140	; 0x8c
 80019c0:	b289      	uxth	r1, r1
 80019c2:	9400      	str	r4, [sp, #0]
    for (uint8_t counter = 0; counter < 8; counter++) {
 80019c4:	3501      	adds	r5, #1
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 80019c6:	f7ff fc41 	bl	800124c <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 80019ca:	2d08      	cmp	r5, #8
 80019cc:	f10a 0a06 	add.w	sl, sl, #6
        sum += weightPin;
 80019d0:	b2bf      	uxth	r7, r7
    for (uint8_t counter = 0; counter < 8; counter++) {
 80019d2:	d1ba      	bne.n	800194a <weightPage+0x22>
    }
	LCD_PrintHeatMap(weightSensorsData);
 80019d4:	4839      	ldr	r0, [pc, #228]	; (8001abc <weightPage+0x194>)
 80019d6:	f7ff faef 	bl	8000fb8 <LCD_PrintHeatMap>

    char output_gram[20] = "";
    sprintf(output_gram, "%6d Gram", sum);
 80019da:	463a      	mov	r2, r7
 80019dc:	4658      	mov	r0, fp
 80019de:	493a      	ldr	r1, [pc, #232]	; (8001ac8 <weightPage+0x1a0>)
    char output_gram[20] = "";
 80019e0:	9605      	str	r6, [sp, #20]
 80019e2:	e9c9 6600 	strd	r6, r6, [r9]
 80019e6:	e9c9 6602 	strd	r6, r6, [r9, #8]
    sprintf(output_gram, "%6d Gram", sum);
 80019ea:	f004 f805 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, WHITE);
 80019ee:	231f      	movs	r3, #31
 80019f0:	465a      	mov	r2, fp
 80019f2:	2150      	movs	r1, #80	; 0x50
 80019f4:	2078      	movs	r0, #120	; 0x78
 80019f6:	9400      	str	r4, [sp, #0]
 80019f8:	f7ff fc28 	bl	800124c <LCD_DrawString_Color>

    HAL_Delay(20);
 80019fc:	2014      	movs	r0, #20
 80019fe:	f001 fb85 	bl	800310c <HAL_Delay>
}
 8001a02:	b00b      	add	sp, #44	; 0x2c
 8001a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        changingPage = 0;
 8001a08:	f04f 0800 	mov.w	r8, #0
        currentPage = weight;
 8001a0c:	2501      	movs	r5, #1
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001a0e:	f04f 0a0a 	mov.w	sl, #10
 8001a12:	f64f 76ff 	movw	r6, #65535	; 0xffff
        currentPage = weight;
 8001a16:	482d      	ldr	r0, [pc, #180]	; (8001acc <weightPage+0x1a4>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a18:	f8cd 8000 	str.w	r8, [sp]
 8001a1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
        currentPage = weight;
 8001a20:	7005      	strb	r5, [r0, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a22:	22f0      	movs	r2, #240	; 0xf0
 8001a24:	4640      	mov	r0, r8
        changingPage = 0;
 8001a26:	f8c1 8000 	str.w	r8, [r1]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	f7ff faaa 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001a30:	231f      	movs	r3, #31
 8001a32:	2128      	movs	r1, #40	; 0x28
 8001a34:	4650      	mov	r0, sl
 8001a36:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <weightPage+0x1a8>)
 8001a38:	e9cd 6a00 	strd	r6, sl, [sp]
 8001a3c:	f7ff fc2e 	bl	800129c <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001a40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a44:	2282      	movs	r2, #130	; 0x82
 8001a46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a4a:	2014      	movs	r0, #20
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2319      	movs	r3, #25
 8001a50:	f7ff fa98 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001a54:	201e      	movs	r0, #30
 8001a56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a5a:	f240 111d 	movw	r1, #285	; 0x11d
 8001a5e:	e9cd 8a00 	strd	r8, sl, [sp]
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <weightPage+0x1ac>)
 8001a64:	f7ff fc1a 	bl	800129c <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 8001a68:	2014      	movs	r0, #20
 8001a6a:	2464      	movs	r4, #100	; 0x64
 8001a6c:	4645      	mov	r5, r8
            sprintf(temp, "Y%d: ", i);
 8001a6e:	4f1a      	ldr	r7, [pc, #104]	; (8001ad8 <weightPage+0x1b0>)
 8001a70:	f10d 0918 	add.w	r9, sp, #24
 8001a74:	f10d 0b14 	add.w	fp, sp, #20
    HAL_Delay(20);
 8001a78:	f001 fb48 	bl	800310c <HAL_Delay>
            sprintf(temp, "Y%d: ", i);
 8001a7c:	462a      	mov	r2, r5
 8001a7e:	4639      	mov	r1, r7
 8001a80:	4658      	mov	r0, fp
            char temp[10] = "";
 8001a82:	f8cd 8014 	str.w	r8, [sp, #20]
        for (uint8_t i = 0; i < 8; i++) {
 8001a86:	3501      	adds	r5, #1
            char temp[10] = "";
 8001a88:	f8c9 8000 	str.w	r8, [r9]
 8001a8c:	f8a9 8004 	strh.w	r8, [r9, #4]
            sprintf(temp, "Y%d: ", i);
 8001a90:	f003 ffb2 	bl	80059f8 <siprintf>
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 8001a94:	4621      	mov	r1, r4
 8001a96:	2300      	movs	r3, #0
 8001a98:	465a      	mov	r2, fp
 8001a9a:	206e      	movs	r0, #110	; 0x6e
 8001a9c:	9600      	str	r6, [sp, #0]
 8001a9e:	f7ff fbd5 	bl	800124c <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 8001aa2:	3412      	adds	r4, #18
 8001aa4:	2d08      	cmp	r5, #8
 8001aa6:	b2a4      	uxth	r4, r4
 8001aa8:	d1e8      	bne.n	8001a7c <weightPage+0x154>
        initWeightSensors(weightSensors);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <weightPage+0x190>)
 8001aac:	f7ff febc 	bl	8001828 <initWeightSensors>
 8001ab0:	e745      	b.n	800193e <weightPage+0x16>
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000638 	.word	0x20000638
 8001abc:	200006b8 	.word	0x200006b8
 8001ac0:	20000560 	.word	0x20000560
 8001ac4:	08008ae0 	.word	0x08008ae0
 8001ac8:	08008ae8 	.word	0x08008ae8
 8001acc:	2000055a 	.word	0x2000055a
 8001ad0:	08008ab8 	.word	0x08008ab8
 8001ad4:	08008aa8 	.word	0x08008aa8
 8001ad8:	08008ad8 	.word	0x08008ad8
 8001adc:	00000000 	.word	0x00000000

08001ae0 <accelerometerPage>:

void accelerometerPage() {
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8001ae4:	4bca      	ldr	r3, [pc, #808]	; (8001e10 <accelerometerPage+0x330>)
void accelerometerPage() {
 8001ae6:	b0ab      	sub	sp, #172	; 0xac
    if (changingPage) {
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8242 	bne.w	8001f74 <accelerometerPage+0x494>
 8001af0:	4bc8      	ldr	r3, [pc, #800]	; (8001e14 <accelerometerPage+0x334>)
 8001af2:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
 8001af6:	9304      	str	r3, [sp, #16]
 8001af8:	4bc7      	ldr	r3, [pc, #796]	; (8001e18 <accelerometerPage+0x338>)
 8001afa:	af1b      	add	r7, sp, #108	; 0x6c
 8001afc:	9309      	str	r3, [sp, #36]	; 0x24
 8001afe:	4bc7      	ldr	r3, [pc, #796]	; (8001e1c <accelerometerPage+0x33c>)
 8001b00:	ae20      	add	r6, sp, #128	; 0x80
 8001b02:	930e      	str	r3, [sp, #56]	; 0x38
 8001b04:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8001b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b0a:	ab16      	add	r3, sp, #88	; 0x58
 8001b0c:	9310      	str	r3, [sp, #64]	; 0x40
 8001b0e:	4bc4      	ldr	r3, [pc, #784]	; (8001e20 <accelerometerPage+0x340>)
 8001b10:	ad25      	add	r5, sp, #148	; 0x94
 8001b12:	930a      	str	r3, [sp, #40]	; 0x28
 8001b14:	4bc3      	ldr	r3, [pc, #780]	; (8001e24 <accelerometerPage+0x344>)
 8001b16:	930c      	str	r3, [sp, #48]	; 0x30
 8001b18:	4bc3      	ldr	r3, [pc, #780]	; (8001e28 <accelerometerPage+0x348>)
 8001b1a:	9306      	str	r3, [sp, #24]
 8001b1c:	ab18      	add	r3, sp, #96	; 0x60
 8001b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8001b20:	ab1c      	add	r3, sp, #112	; 0x70
 8001b22:	9305      	str	r3, [sp, #20]
 8001b24:	ab21      	add	r3, sp, #132	; 0x84
 8001b26:	9308      	str	r3, [sp, #32]
            output_text = "SENSOR NP";
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
        }
        /* DEBUG MESSAGE ABOVE */
    }
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001b28:	2006      	movs	r0, #6
 8001b2a:	f003 f9e7 	bl	8004efc <malloc>
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001b2e:	235a      	movs	r3, #90	; 0x5a
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	2306      	movs	r3, #6
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001b34:	4682      	mov	sl, r0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2301      	movs	r3, #1
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001b3a:	2400      	movs	r4, #0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001b3c:	213a      	movs	r1, #58	; 0x3a
 8001b3e:	2232      	movs	r2, #50	; 0x32
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8001b40:	9012      	str	r0, [sp, #72]	; 0x48
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001b42:	f8cd a000 	str.w	sl, [sp]
 8001b46:	48b9      	ldr	r0, [pc, #740]	; (8001e2c <accelerometerPage+0x34c>)
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
    uint8_t writeMode = 0x01;
 8001b48:	4699      	mov	r9, r3
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8001b4a:	f002 fb7f 	bl	800424c <HAL_I2C_Mem_Read>
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001b4e:	4652      	mov	r2, sl
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001b50:	9b05      	ldr	r3, [sp, #20]
 8001b52:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8001b56:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8001b5a:	60dc      	str	r4, [r3, #12]
 8001b5c:	9b08      	ldr	r3, [sp, #32]
 8001b5e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8001b62:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8001b66:	60dc      	str	r4, [r3, #12]
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 8001b68:	f9ba 3000 	ldrsh.w	r3, [sl]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001b6c:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 8001b70:	115b      	asrs	r3, r3, #5
 8001b72:	9305      	str	r3, [sp, #20]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001b74:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001b78:	e9cb 4401 	strd	r4, r4, [fp, #4]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 8001b7c:	ea4f 1a63 	mov.w	sl, r3, asr #5
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001b80:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8001b84:	f8cb 400c 	str.w	r4, [fp, #12]
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001b88:	115a      	asrs	r2, r3, #5
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001b8a:	2006      	movs	r0, #6
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 8001b8c:	9208      	str	r2, [sp, #32]
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001b8e:	f003 f9b5 	bl	8004efc <malloc>
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001b92:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 8001b96:	4683      	mov	fp, r0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001b98:	f8cd c000 	str.w	ip, [sp]
 8001b9c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	e9cd 9c01 	strd	r9, ip, [sp, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	213c      	movs	r1, #60	; 0x3c
 8001baa:	48a0      	ldr	r0, [pc, #640]	; (8001e2c <accelerometerPage+0x34c>)
    uint8_t writeMode = 0x01;
 8001bac:	f88d 9057 	strb.w	r9, [sp, #87]	; 0x57
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 8001bb0:	f002 fa98 	bl	80040e4 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 8001bb4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001bb8:	2106      	movs	r1, #6
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
    /* DEBUG MESSAGE BELOW */
    sprintf(x_print, "%+06d", combined_aX);
    sprintf(y_print, "%+06d", combined_aY);
    sprintf(z_print, "%+06d", combined_aZ);
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8001bba:	f64f 78ff 	movw	r8, #65535	; 0xffff
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 8001bbe:	e9cd 1c01 	strd	r1, ip, [sp, #4]
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	213c      	movs	r1, #60	; 0x3c
 8001bc8:	4898      	ldr	r0, [pc, #608]	; (8001e2c <accelerometerPage+0x34c>)
 8001bca:	f8cd b000 	str.w	fp, [sp]
 8001bce:	f002 fb3d 	bl	800424c <HAL_I2C_Mem_Read>
    const int16_t thetaX = combineUint_8ts(compassData[0], compassData[1]);
 8001bd2:	f8bb 3000 	ldrh.w	r3, [fp]
    sprintf(x_print, "%+06d", combined_aX);
 8001bd6:	9a05      	ldr	r2, [sp, #20]
 8001bd8:	bad9      	revsh	r1, r3
 8001bda:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8001bde:	9113      	str	r1, [sp, #76]	; 0x4c
    const int16_t thetaY = combineUint_8ts(compassData[2], compassData[3]);
 8001be0:	fa93 f9b3 	revsh.w	r9, r3
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
 8001be4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    sprintf(x_print, "%+06d", combined_aX);
 8001be8:	4638      	mov	r0, r7
 8001bea:	bad9      	revsh	r1, r3
 8001bec:	910f      	str	r1, [sp, #60]	; 0x3c
 8001bee:	4990      	ldr	r1, [pc, #576]	; (8001e30 <accelerometerPage+0x350>)
 8001bf0:	f003 ff02 	bl	80059f8 <siprintf>
    sprintf(y_print, "%+06d", combined_aY);
 8001bf4:	4652      	mov	r2, sl
 8001bf6:	498e      	ldr	r1, [pc, #568]	; (8001e30 <accelerometerPage+0x350>)
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f003 fefd 	bl	80059f8 <siprintf>
    sprintf(z_print, "%+06d", combined_aZ);
 8001bfe:	9a08      	ldr	r2, [sp, #32]
 8001c00:	498b      	ldr	r1, [pc, #556]	; (8001e30 <accelerometerPage+0x350>)
 8001c02:	4628      	mov	r0, r5
 8001c04:	f003 fef8 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8001c08:	4623      	mov	r3, r4
 8001c0a:	463a      	mov	r2, r7
 8001c0c:	21d2      	movs	r1, #210	; 0xd2
 8001c0e:	2014      	movs	r0, #20
 8001c10:	f8cd 8000 	str.w	r8, [sp]
 8001c14:	f7ff fb1a 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 210, y_print, BLACK, WHITE);
 8001c18:	4623      	mov	r3, r4
 8001c1a:	4632      	mov	r2, r6
 8001c1c:	21d2      	movs	r1, #210	; 0xd2
 8001c1e:	2050      	movs	r0, #80	; 0x50
 8001c20:	f8cd 8000 	str.w	r8, [sp]
 8001c24:	f7ff fb12 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 210, z_print, BLACK, WHITE);
 8001c28:	4623      	mov	r3, r4
 8001c2a:	462a      	mov	r2, r5
 8001c2c:	21d2      	movs	r1, #210	; 0xd2
 8001c2e:	208c      	movs	r0, #140	; 0x8c
 8001c30:	f8cd 8000 	str.w	r8, [sp]
 8001c34:	f7ff fb0a 	bl	800124c <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", initX_Acc_Reading);
 8001c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c3a:	497d      	ldr	r1, [pc, #500]	; (8001e30 <accelerometerPage+0x350>)
 8001c3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c40:	4638      	mov	r0, r7
 8001c42:	f003 fed9 	bl	80059f8 <siprintf>
    sprintf(y_print, "%+06d", initY_Acc_Reading);
 8001c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f9b1 2000 	ldrsh.w	r2, [r1]
 8001c4e:	4978      	ldr	r1, [pc, #480]	; (8001e30 <accelerometerPage+0x350>)
 8001c50:	f003 fed2 	bl	80059f8 <siprintf>
    sprintf(z_print, "%+06d", initZ_Acc_Reading);
 8001c54:	9906      	ldr	r1, [sp, #24]
 8001c56:	4628      	mov	r0, r5
 8001c58:	f9b1 2000 	ldrsh.w	r2, [r1]
 8001c5c:	4974      	ldr	r1, [pc, #464]	; (8001e30 <accelerometerPage+0x350>)
 8001c5e:	f003 fecb 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(20, 230, x_print, BLACK, WHITE);
 8001c62:	4623      	mov	r3, r4
 8001c64:	463a      	mov	r2, r7
 8001c66:	21e6      	movs	r1, #230	; 0xe6
 8001c68:	2014      	movs	r0, #20
 8001c6a:	f8cd 8000 	str.w	r8, [sp]
 8001c6e:	f7ff faed 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 230, y_print, BLACK, WHITE);
 8001c72:	4623      	mov	r3, r4
 8001c74:	4632      	mov	r2, r6
 8001c76:	21e6      	movs	r1, #230	; 0xe6
 8001c78:	2050      	movs	r0, #80	; 0x50
 8001c7a:	f8cd 8000 	str.w	r8, [sp]
 8001c7e:	f7ff fae5 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 230, z_print, BLACK, WHITE);
 8001c82:	4623      	mov	r3, r4
 8001c84:	462a      	mov	r2, r5
 8001c86:	21e6      	movs	r1, #230	; 0xe6
 8001c88:	208c      	movs	r0, #140	; 0x8c
 8001c8a:	f8cd 8000 	str.w	r8, [sp]
 8001c8e:	f7ff fadd 	bl	800124c <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawX);
 8001c92:	9904      	ldr	r1, [sp, #16]
 8001c94:	4638      	mov	r0, r7
 8001c96:	f9b1 212c 	ldrsh.w	r2, [r1, #300]	; 0x12c
 8001c9a:	4965      	ldr	r1, [pc, #404]	; (8001e30 <accelerometerPage+0x350>)
 8001c9c:	f003 feac 	bl	80059f8 <siprintf>
    sprintf(y_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawY);
 8001ca0:	9904      	ldr	r1, [sp, #16]
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f9b1 212e 	ldrsh.w	r2, [r1, #302]	; 0x12e
 8001ca8:	4961      	ldr	r1, [pc, #388]	; (8001e30 <accelerometerPage+0x350>)
 8001caa:	f003 fea5 	bl	80059f8 <siprintf>
    sprintf(z_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawZ);
 8001cae:	9904      	ldr	r1, [sp, #16]
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f9b1 2130 	ldrsh.w	r2, [r1, #304]	; 0x130
 8001cb6:	495e      	ldr	r1, [pc, #376]	; (8001e30 <accelerometerPage+0x350>)
 8001cb8:	f003 fe9e 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(20, 270, x_print, BLACK, WHITE);
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	463a      	mov	r2, r7
 8001cc0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f8cd 8000 	str.w	r8, [sp]
 8001cca:	f7ff fabf 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 270, y_print, BLACK, WHITE);
 8001cce:	4623      	mov	r3, r4
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001cd6:	2050      	movs	r0, #80	; 0x50
 8001cd8:	f8cd 8000 	str.w	r8, [sp]
 8001cdc:	f7ff fab6 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 270, z_print, BLACK, WHITE);
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	462a      	mov	r2, r5
 8001ce4:	208c      	movs	r0, #140	; 0x8c
 8001ce6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001cea:	f8cd 8000 	str.w	r8, [sp]
 8001cee:	f7ff faad 	bl	800124c <LCD_DrawString_Color>
    /* DEBUG MESSAGE ABOVE */

    // All axes have a scale factor of 7.8
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8001cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cf4:	9805      	ldr	r0, [sp, #20]
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bfb8      	it	lt
 8001d02:	425b      	neglt	r3, r3
 8001d04:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	f0c0 8324 	bcc.w	800235c <accelerometerPage+0x87c>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2400      	movs	r4, #0
 8001d18:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8001d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d1e:	ea8a 72ea 	eor.w	r2, sl, sl, asr #31
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	eba2 72ea 	sub.w	r2, r2, sl, asr #31
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfb8      	it	lt
 8001d2e:	425b      	neglt	r3, r3
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b292      	uxth	r2, r2
 8001d36:	4293      	cmp	r3, r2
 8001d38:	f080 833a 	bcs.w	80023b0 <accelerometerPage+0x8d0>
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 8001d3c:	4650      	mov	r0, sl
 8001d3e:	f7fe fbcd 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8001d42:	a331      	add	r3, pc, #196	; (adr r3, 8001e08 <accelerometerPage+0x328>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc32 	bl	80005b0 <__aeabi_dmul>
 8001d4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8001d50:	9b06      	ldr	r3, [sp, #24]
 8001d52:	9808      	ldr	r0, [sp, #32]
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bfb8      	it	lt
 8001d60:	425b      	neglt	r3, r3
 8001d62:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8001d66:	3301      	adds	r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	f080 8324 	bcs.w	80023ba <accelerometerPage+0x8da>
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8001d72:	f7fe fbb3 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8001d76:	a324      	add	r3, pc, #144	; (adr r3, 8001e08 <accelerometerPage+0x328>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc18 	bl	80005b0 <__aeabi_dmul>
 8001d80:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sprintf(x_print, "%+0.2f", finalizedX);
 8001d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001d88:	492a      	ldr	r1, [pc, #168]	; (8001e34 <accelerometerPage+0x354>)
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	f003 fe34 	bl	80059f8 <siprintf>
    sprintf(y_print, "%+0.2f", finalizedY);
 8001d90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001d94:	4927      	ldr	r1, [pc, #156]	; (8001e34 <accelerometerPage+0x354>)
 8001d96:	4630      	mov	r0, r6
 8001d98:	f003 fe2e 	bl	80059f8 <siprintf>
    sprintf(z_print, "%+0.2f", finalizedZ);
 8001d9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001da0:	4628      	mov	r0, r5
 8001da2:	4924      	ldr	r1, [pc, #144]	; (8001e34 <accelerometerPage+0x354>)
 8001da4:	f003 fe28 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(100, 100, x_print, CYAN, BLACK);
 8001da8:	2400      	movs	r4, #0
 8001daa:	2164      	movs	r1, #100	; 0x64
 8001dac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001db0:	4608      	mov	r0, r1
 8001db2:	463a      	mov	r2, r7
 8001db4:	9400      	str	r4, [sp, #0]
 8001db6:	f7ff fa49 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 130, y_print, YELLOW, BLACK);
 8001dba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	2182      	movs	r1, #130	; 0x82
 8001dc2:	2064      	movs	r0, #100	; 0x64
 8001dc4:	9400      	str	r4, [sp, #0]
 8001dc6:	f7ff fa41 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 160, z_print, BLUE, BLACK);
 8001dca:	231f      	movs	r3, #31
 8001dcc:	462a      	mov	r2, r5
 8001dce:	21a0      	movs	r1, #160	; 0xa0
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	9400      	str	r4, [sp, #0]
 8001dd4:	f7ff fa3a 	bl	800124c <LCD_DrawString_Color>
    sprintf(x_print, "%+05d", thetaX);
 8001dd8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8001ddc:	4916      	ldr	r1, [pc, #88]	; (8001e38 <accelerometerPage+0x358>)
 8001dde:	4642      	mov	r2, r8
 8001de0:	4638      	mov	r0, r7
 8001de2:	f003 fe09 	bl	80059f8 <siprintf>
    sprintf(y_print, "%+05d", thetaY);
 8001de6:	464a      	mov	r2, r9
 8001de8:	4913      	ldr	r1, [pc, #76]	; (8001e38 <accelerometerPage+0x358>)
 8001dea:	4630      	mov	r0, r6
 8001dec:	f003 fe04 	bl	80059f8 <siprintf>
    sprintf(z_print, "%+05d", thetaZ);
 8001df0:	4628      	mov	r0, r5
 8001df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001df4:	4910      	ldr	r1, [pc, #64]	; (8001e38 <accelerometerPage+0x358>)
 8001df6:	f003 fdff 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(160, 100, x_print, CYAN, BLACK);
 8001dfa:	463a      	mov	r2, r7
 8001dfc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e00:	2164      	movs	r1, #100	; 0x64
 8001e02:	20a0      	movs	r0, #160	; 0xa0
 8001e04:	9400      	str	r4, [sp, #0]
 8001e06:	e019      	b.n	8001e3c <accelerometerPage+0x35c>
 8001e08:	8e8a71de 	.word	0x8e8a71de
 8001e0c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000230 	.word	0x20000230
 8001e18:	2000022c 	.word	0x2000022c
 8001e1c:	2000055c 	.word	0x2000055c
 8001e20:	2000062c 	.word	0x2000062c
 8001e24:	2000062e 	.word	0x2000062e
 8001e28:	20000630 	.word	0x20000630
 8001e2c:	20000590 	.word	0x20000590
 8001e30:	08008bec 	.word	0x08008bec
 8001e34:	08008bf4 	.word	0x08008bf4
 8001e38:	08008bfc 	.word	0x08008bfc
 8001e3c:	f7ff fa06 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 130, y_print, YELLOW, BLACK);
 8001e40:	4632      	mov	r2, r6
 8001e42:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e46:	2182      	movs	r1, #130	; 0x82
 8001e48:	20a0      	movs	r0, #160	; 0xa0
 8001e4a:	9400      	str	r4, [sp, #0]
 8001e4c:	f7ff f9fe 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 160, z_print, BLUE, BLACK);
 8001e50:	21a0      	movs	r1, #160	; 0xa0
 8001e52:	462a      	mov	r2, r5
 8001e54:	231f      	movs	r3, #31
 8001e56:	4608      	mov	r0, r1
 8001e58:	9400      	str	r4, [sp, #0]
 8001e5a:	f7ff f9f7 	bl	800124c <LCD_DrawString_Color>
    const double angle = atan2(thetaY, thetaX) * 180 / M_PI;
 8001e5e:	4640      	mov	r0, r8
 8001e60:	f7fe fb3c 	bl	80004dc <__aeabi_i2d>
 8001e64:	4604      	mov	r4, r0
 8001e66:	460d      	mov	r5, r1
 8001e68:	4648      	mov	r0, r9
 8001e6a:	f7fe fb37 	bl	80004dc <__aeabi_i2d>
 8001e6e:	4622      	mov	r2, r4
 8001e70:	462b      	mov	r3, r5
 8001e72:	f005 ffad 	bl	8007dd0 <atan2>
 8001e76:	2200      	movs	r2, #0
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <accelerometerPage+0x480>)
 8001e7a:	f7fe fb99 	bl	80005b0 <__aeabi_dmul>
 8001e7e:	a336      	add	r3, pc, #216	; (adr r3, 8001f58 <accelerometerPage+0x478>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fcbe 	bl	8000804 <__aeabi_ddiv>
 8001e88:	4605      	mov	r5, r0
 8001e8a:	460c      	mov	r4, r1
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 8001e8c:	f7fe fe40 	bl	8000b10 <__aeabi_d2iz>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f2c0 8297 	blt.w	80023c4 <accelerometerPage+0x8e4>
 8001e96:	b284      	uxth	r4, r0
    char angle_print[8];
    sprintf(angle_print, "%03d deg", polishedAngle);
 8001e98:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	4931      	ldr	r1, [pc, #196]	; (8001f64 <accelerometerPage+0x484>)
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f003 fdaa 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(170, 20, angle_print, BLACK, WHITE);
 8001ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea8:	462a      	mov	r2, r5
 8001eaa:	2114      	movs	r1, #20
 8001eac:	20aa      	movs	r0, #170	; 0xaa
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f7ff f9cb 	bl	800124c <LCD_DrawString_Color>
    insertAngleRecord(polishedAngle);
 8001eb6:	b2e0      	uxtb	r0, r4
 8001eb8:	f7ff fb4c 	bl	8001554 <insertAngleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001ebc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001ebe:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	dd05      	ble.n	8001ed2 <accelerometerPage+0x3f2>
        shiftAcceleRecord();
 8001ec6:	f7ff fb29 	bl	800151c <shiftAcceleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 8001eca:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	dcf9      	bgt.n	8001ec6 <accelerometerPage+0x3e6>
    insertAcceleRecord(combined_aX, combined_aY, combined_aZ);
    //if(isRotating() == 1)
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
    char dis_print[10] = "";
 8001ed2:	2400      	movs	r4, #0
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
    accleRecord[acceleRecordSize].rawX = rawX;
 8001ed6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001eda:	3301      	adds	r3, #1
 8001edc:	800b      	strh	r3, [r1, #0]
    accleRecord[acceleRecordSize].rawX = rawX;
 8001ede:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8001ee2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
 8001ee6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001eea:	9a08      	ldr	r2, [sp, #32]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 8001eec:	4651      	mov	r1, sl
    accleRecord[acceleRecordSize].rawY = rawY;
 8001eee:	f8a3 a002 	strh.w	sl, [r3, #2]
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8001ef2:	809a      	strh	r2, [r3, #4]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 8001ef4:	f7ff fb58 	bl	80015a8 <updateDistance>
    sprintf(dis_print, "%05lu", distanceTraveled);
 8001ef8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8001efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001efc:	4628      	mov	r0, r5
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4919      	ldr	r1, [pc, #100]	; (8001f68 <accelerometerPage+0x488>)
    char dis_print[10] = "";
 8001f02:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8001f06:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
    sprintf(dis_print, "%05lu", distanceTraveled);
 8001f0a:	f003 fd75 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(100, 190, dis_print, WHITE, BLACK);
 8001f0e:	462a      	mov	r2, r5
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	21be      	movs	r1, #190	; 0xbe
 8001f16:	2064      	movs	r0, #100	; 0x64
 8001f18:	9400      	str	r4, [sp, #0]
 8001f1a:	f7ff f997 	bl	800124c <LCD_DrawString_Color>
    sprintf(dis_print, "%0.3f", actualDistance);
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <accelerometerPage+0x48c>)
 8001f20:	4628      	mov	r0, r5
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	4912      	ldr	r1, [pc, #72]	; (8001f70 <accelerometerPage+0x490>)
 8001f28:	f003 fd66 	bl	80059f8 <siprintf>
    LCD_DrawString_Color(160, 190, dis_print, WHITE, BLACK);
 8001f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f30:	462a      	mov	r2, r5
 8001f32:	21be      	movs	r1, #190	; 0xbe
 8001f34:	20a0      	movs	r0, #160	; 0xa0
 8001f36:	9400      	str	r4, [sp, #0]
 8001f38:	f7ff f988 	bl	800124c <LCD_DrawString_Color>
    HAL_Delay(10);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f001 f8e5 	bl	800310c <HAL_Delay>
    free(acceleromterData);
 8001f42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f44:	f002 ffe2 	bl	8004f0c <free>
    free(compassData);
 8001f48:	4658      	mov	r0, fp
}
 8001f4a:	b02b      	add	sp, #172	; 0xac
 8001f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    free(compassData);
 8001f50:	f002 bfdc 	b.w	8004f0c <free>
 8001f54:	f3af 8000 	nop.w
 8001f58:	54442d18 	.word	0x54442d18
 8001f5c:	400921fb 	.word	0x400921fb
 8001f60:	40668000 	.word	0x40668000
 8001f64:	08008c04 	.word	0x08008c04
 8001f68:	08008c10 	.word	0x08008c10
 8001f6c:	20000488 	.word	0x20000488
 8001f70:	08008c18 	.word	0x08008c18
        accleRecord[i].rawX = 0;
 8001f74:	2400      	movs	r4, #0
 8001f76:	4bd5      	ldr	r3, [pc, #852]	; (80022cc <accelerometerPage+0x7ec>)
 8001f78:	9304      	str	r3, [sp, #16]
 8001f7a:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8001f7e:	801c      	strh	r4, [r3, #0]
        accleRecord[i].rawY = 0;
 8001f80:	805c      	strh	r4, [r3, #2]
        accleRecord[i].rawZ = 0;
 8001f82:	809c      	strh	r4, [r3, #4]
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001f84:	3306      	adds	r3, #6
 8001f86:	429a      	cmp	r2, r3
        accleRecord[i].rawX = 0;
 8001f88:	f04f 0500 	mov.w	r5, #0
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 8001f8c:	d1f7      	bne.n	8001f7e <accelerometerPage+0x49e>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001f8e:	2701      	movs	r7, #1
 8001f90:	2664      	movs	r6, #100	; 0x64
    acceleRecordSize = 0;
 8001f92:	4bcf      	ldr	r3, [pc, #828]	; (80022d0 <accelerometerPage+0x7f0>)
        angleRecord[i] = 0;
 8001f94:	22c8      	movs	r2, #200	; 0xc8
    acceleRecordSize = 0;
 8001f96:	801c      	strh	r4, [r3, #0]
 8001f98:	9309      	str	r3, [sp, #36]	; 0x24
    distanceTraveled = 0;
 8001f9a:	4bce      	ldr	r3, [pc, #824]	; (80022d4 <accelerometerPage+0x7f4>)
        angleRecord[i] = 0;
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	48ce      	ldr	r0, [pc, #824]	; (80022d8 <accelerometerPage+0x7f8>)
    distanceTraveled = 0;
 8001fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8001fa2:	601c      	str	r4, [r3, #0]
        angleRecord[i] = 0;
 8001fa4:	f002 ffd4 	bl	8004f50 <memset>
    angleRecordSize = 0;
 8001fa8:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <accelerometerPage+0x7fc>)
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001faa:	f10d 0857 	add.w	r8, sp, #87	; 0x57
 8001fae:	222d      	movs	r2, #45	; 0x2d
 8001fb0:	213a      	movs	r1, #58	; 0x3a
 8001fb2:	f8cd 8000 	str.w	r8, [sp]
 8001fb6:	48ca      	ldr	r0, [pc, #808]	; (80022e0 <accelerometerPage+0x800>)
    angleRecordSize = 0;
 8001fb8:	801c      	strh	r4, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001fba:	463b      	mov	r3, r7
 8001fbc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8001fc0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        uint8_t setPWLMode = 0x00; //reset accelerometer
 8001fc4:	f88d 5057 	strb.w	r5, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001fc8:	f002 f88c 	bl	80040e4 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8001fcc:	4630      	mov	r0, r6
 8001fce:	f001 f89d 	bl	800310c <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 8001fd2:	2308      	movs	r3, #8
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001fd4:	f8cd 8000 	str.w	r8, [sp]
        uint8_t formatting = 0x05; // full res +-4g
 8001fd8:	f04f 0805 	mov.w	r8, #5
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001fdc:	222d      	movs	r2, #45	; 0x2d
 8001fde:	213a      	movs	r1, #58	; 0x3a
        setPWLMode = 0x08; //disable auto sleep, always measure
 8001fe0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8001fe4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8001fe8:	463b      	mov	r3, r7
 8001fea:	48bd      	ldr	r0, [pc, #756]	; (80022e0 <accelerometerPage+0x800>)
 8001fec:	f002 f87a 	bl	80040e4 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 8001ff0:	ab16      	add	r3, sp, #88	; 0x58
 8001ff2:	2231      	movs	r2, #49	; 0x31
 8001ff4:	213a      	movs	r1, #58	; 0x3a
 8001ff6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8001ffe:	463b      	mov	r3, r7
 8002000:	48b7      	ldr	r0, [pc, #732]	; (80022e0 <accelerometerPage+0x800>)
        uint8_t formatting = 0x05; // full res +-4g
 8002002:	f88d 8058 	strb.w	r8, [sp, #88]	; 0x58
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 8002006:	f002 f86d 	bl	80040e4 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 800200a:	ab18      	add	r3, sp, #96	; 0x60
 800200c:	2200      	movs	r2, #0
 800200e:	213a      	movs	r1, #58	; 0x3a
 8002010:	9311      	str	r3, [sp, #68]	; 0x44
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002018:	463b      	mov	r3, r7
 800201a:	48b1      	ldr	r0, [pc, #708]	; (80022e0 <accelerometerPage+0x800>)
        uint8_t debug = 0x00;
 800201c:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 8002020:	f002 f914 	bl	800424c <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002024:	2100      	movs	r1, #0
 8002026:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800202a:	4608      	mov	r0, r1
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	9400      	str	r4, [sp, #0]
 8002030:	f7fe ffa8 	bl	8000f84 <LCD_Clear>
        HAL_Delay(100);
 8002034:	4630      	mov	r0, r6
 8002036:	f001 f869 	bl	800310c <HAL_Delay>
        if (debug != 0xE5) {
 800203a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800203e:	2be5      	cmp	r3, #229	; 0xe5
 8002040:	f040 8196 	bne.w	8002370 <accelerometerPage+0x890>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8002044:	230a      	movs	r3, #10
 8002046:	4631      	mov	r1, r6
 8002048:	4aa6      	ldr	r2, [pc, #664]	; (80022e4 <accelerometerPage+0x804>)
 800204a:	2000      	movs	r0, #0
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	9400      	str	r4, [sp, #0]
 8002050:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002054:	f7ff f922 	bl	800129c <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8002058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800205c:	f001 f856 	bl	800310c <HAL_Delay>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002060:	2100      	movs	r1, #0
 8002062:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002066:	4608      	mov	r0, r1
 8002068:	22f0      	movs	r2, #240	; 0xf0
 800206a:	9400      	str	r4, [sp, #0]
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 800206c:	4689      	mov	r9, r1
        LCD_Clear(0, 0, 240, 320, BLACK);
 800206e:	f7fe ff89 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color(80, 100, output_text, RED, WHITE);
 8002072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002076:	f04f 0832 	mov.w	r8, #50	; 0x32
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4631      	mov	r1, r6
 800207e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002082:	2050      	movs	r0, #80	; 0x50
 8002084:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <accelerometerPage+0x808>)
 8002086:	f7ff f8e1 	bl	800124c <LCD_DrawString_Color>
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 800208a:	4643      	mov	r3, r8
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 800208c:	f04f 0b06 	mov.w	fp, #6
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 8002090:	46ca      	mov	sl, r9
 8002092:	46c8      	mov	r8, r9
 8002094:	461d      	mov	r5, r3
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 8002096:	4f92      	ldr	r7, [pc, #584]	; (80022e0 <accelerometerPage+0x800>)
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 8002098:	2006      	movs	r0, #6
 800209a:	f002 ff2f 	bl	8004efc <malloc>
 800209e:	4604      	mov	r4, r0
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 80020a0:	2232      	movs	r2, #50	; 0x32
 80020a2:	213a      	movs	r1, #58	; 0x3a
 80020a4:	2301      	movs	r3, #1
 80020a6:	4638      	mov	r0, r7
 80020a8:	e9cd b601 	strd	fp, r6, [sp, #4]
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	f002 f8cd 	bl	800424c <HAL_I2C_Mem_Read>
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80020b2:	f9b4 3000 	ldrsh.w	r3, [r4]
            free(arrayOfData);
 80020b6:	4620      	mov	r0, r4
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80020b8:	eb08 1863 	add.w	r8, r8, r3, asr #5
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 80020bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        for (short i = 0; i < 50; ++i) {
 80020c0:	3d01      	subs	r5, #1
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 80020c2:	eb0a 1a63 	add.w	sl, sl, r3, asr #5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 80020c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        for (short i = 0; i < 50; ++i) {
 80020ca:	b2ad      	uxth	r5, r5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 80020cc:	eb09 1963 	add.w	r9, r9, r3, asr #5
            free(arrayOfData);
 80020d0:	f002 ff1c 	bl	8004f0c <free>
            HAL_Delay(10);
 80020d4:	200a      	movs	r0, #10
 80020d6:	f001 f819 	bl	800310c <HAL_Delay>
        for (short i = 0; i < 50; ++i) {
 80020da:	2d00      	cmp	r5, #0
 80020dc:	d1dc      	bne.n	8002098 <accelerometerPage+0x5b8>
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80020de:	462b      	mov	r3, r5
 80020e0:	4645      	mov	r5, r8
 80020e2:	4628      	mov	r0, r5
 80020e4:	4698      	mov	r8, r3
 80020e6:	f7fe f9f9 	bl	80004dc <__aeabi_i2d>
 80020ea:	4b80      	ldr	r3, [pc, #512]	; (80022ec <accelerometerPage+0x80c>)
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 80020ec:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <accelerometerPage+0x810>)
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 80020ee:	4c81      	ldr	r4, [pc, #516]	; (80022f4 <accelerometerPage+0x814>)
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80020f0:	930a      	str	r3, [sp, #40]	; 0x28
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 80020f2:	920c      	str	r2, [sp, #48]	; 0x30
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80020f4:	ab1c      	add	r3, sp, #112	; 0x70
 80020f6:	aa21      	add	r2, sp, #132	; 0x84
 80020f8:	9305      	str	r3, [sp, #20]
 80020fa:	9208      	str	r2, [sp, #32]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <accelerometerPage+0x818>)
 80020fe:	2200      	movs	r2, #0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002100:	9406      	str	r4, [sp, #24]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002102:	f7fe fb7f 	bl	8000804 <__aeabi_ddiv>
 8002106:	f005 fde3 	bl	8007cd0 <floor>
 800210a:	f7fe fd01 	bl	8000b10 <__aeabi_d2iz>
 800210e:	4603      	mov	r3, r0
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002110:	4650      	mov	r0, sl
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002112:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80022ec <accelerometerPage+0x80c>
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 8002116:	af1b      	add	r7, sp, #108	; 0x6c
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002118:	f8aa 3000 	strh.w	r3, [sl]
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800211c:	f7fe f9de 	bl	80004dc <__aeabi_i2d>
 8002120:	2200      	movs	r2, #0
 8002122:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <accelerometerPage+0x818>)
 8002124:	f7fe fb6e 	bl	8000804 <__aeabi_ddiv>
 8002128:	f005 fdd2 	bl	8007cd0 <floor>
 800212c:	f7fe fcf0 	bl	8000b10 <__aeabi_d2iz>
 8002130:	4603      	mov	r3, r0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002132:	4648      	mov	r0, r9
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002134:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80022f0 <accelerometerPage+0x810>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002138:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800213c:	f8a9 3000 	strh.w	r3, [r9]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002140:	f7fe f9cc 	bl	80004dc <__aeabi_i2d>
 8002144:	2200      	movs	r2, #0
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <accelerometerPage+0x818>)
 8002148:	f7fe fb5c 	bl	8000804 <__aeabi_ddiv>
 800214c:	f005 fdc0 	bl	8007cd0 <floor>
 8002150:	f7fe fcde 	bl	8000b10 <__aeabi_d2iz>
 8002154:	4967      	ldr	r1, [pc, #412]	; (80022f4 <accelerometerPage+0x814>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002156:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800215a:	22f0      	movs	r2, #240	; 0xf0
 800215c:	f8cd 8000 	str.w	r8, [sp]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002160:	8008      	strh	r0, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002162:	4641      	mov	r1, r8
 8002164:	4640      	mov	r0, r8
 8002166:	f7fe ff0d 	bl	8000f84 <LCD_Clear>
        initializeHMC5883L();
 800216a:	f7ff fbb9 	bl	80018e0 <initializeHMC5883L>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 800216e:	200a      	movs	r0, #10
 8002170:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002174:	2164      	movs	r1, #100	; 0x64
 8002176:	e9cd 8000 	strd	r8, r0, [sp]
 800217a:	4a60      	ldr	r2, [pc, #384]	; (80022fc <accelerometerPage+0x81c>)
 800217c:	4640      	mov	r0, r8
 800217e:	f7ff f88d 	bl	800129c <LCD_DrawString_Color_With_Delay>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002182:	9b05      	ldr	r3, [sp, #20]
 8002184:	9a08      	ldr	r2, [sp, #32]
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 8002186:	ae20      	add	r6, sp, #128	; 0x80
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002188:	e9cd 881b 	strd	r8, r8, [sp, #108]	; 0x6c
 800218c:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
 8002190:	e9c3 8801 	strd	r8, r8, [r3, #4]
 8002194:	f8c3 800c 	str.w	r8, [r3, #12]
 8002198:	e9cd 8825 	strd	r8, r8, [sp, #148]	; 0x94
 800219c:	e9c2 8801 	strd	r8, r8, [r2, #4]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80021a0:	4957      	ldr	r1, [pc, #348]	; (8002300 <accelerometerPage+0x820>)
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80021a2:	f8c2 800c 	str.w	r8, [r2, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80021a6:	4638      	mov	r0, r7
 80021a8:	f9ba 2000 	ldrsh.w	r2, [sl]
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80021ac:	e9cb 8801 	strd	r8, r8, [fp, #4]
 80021b0:	f8cb 800c 	str.w	r8, [fp, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80021b4:	f003 fc20 	bl	80059f8 <siprintf>
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 80021b8:	f9b9 2000 	ldrsh.w	r2, [r9]
 80021bc:	4950      	ldr	r1, [pc, #320]	; (8002300 <accelerometerPage+0x820>)
 80021be:	4630      	mov	r0, r6
 80021c0:	f003 fc1a 	bl	80059f8 <siprintf>
        sprintf(z_debug, "%05d", initZ_Acc_Reading);
 80021c4:	9906      	ldr	r1, [sp, #24]
 80021c6:	ad25      	add	r5, sp, #148	; 0x94
 80021c8:	f9b1 2000 	ldrsh.w	r2, [r1]
 80021cc:	4628      	mov	r0, r5
 80021ce:	494c      	ldr	r1, [pc, #304]	; (8002300 <accelerometerPage+0x820>)
 80021d0:	f003 fc12 	bl	80059f8 <siprintf>
        strcat(x_debug, "  x");
 80021d4:	4638      	mov	r0, r7
 80021d6:	f7fe f827 	bl	8000228 <strlen>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <accelerometerPage+0x824>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 80021de:	f64f 74ff 	movw	r4, #65535	; 0xffff
        strcat(x_debug, "  x");
 80021e2:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 80021e4:	f04f 090a 	mov.w	r9, #10
        strcat(x_debug, "  x");
 80021e8:	50f8      	str	r0, [r7, r3]
        strcat(y_debug, "  y");
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7fe f81c 	bl	8000228 <strlen>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a45      	ldr	r2, [pc, #276]	; (8002308 <accelerometerPage+0x828>)
 80021f4:	6810      	ldr	r0, [r2, #0]
 80021f6:	50f0      	str	r0, [r6, r3]
        strcat(z_debug, "  z");
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7fe f815 	bl	8000228 <strlen>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a42      	ldr	r2, [pc, #264]	; (800230c <accelerometerPage+0x82c>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002202:	218c      	movs	r1, #140	; 0x8c
        strcat(z_debug, "  z");
 8002204:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002206:	9400      	str	r4, [sp, #0]
 8002208:	463a      	mov	r2, r7
        strcat(z_debug, "  z");
 800220a:	50e8      	str	r0, [r5, r3]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 800220c:	4643      	mov	r3, r8
 800220e:	203c      	movs	r0, #60	; 0x3c
 8002210:	f7ff f81c 	bl	800124c <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 160, y_debug, BLACK, WHITE);
 8002214:	4643      	mov	r3, r8
 8002216:	4632      	mov	r2, r6
 8002218:	21a0      	movs	r1, #160	; 0xa0
 800221a:	203c      	movs	r0, #60	; 0x3c
 800221c:	9400      	str	r4, [sp, #0]
 800221e:	f7ff f815 	bl	800124c <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 180, z_debug, BLACK, WHITE);
 8002222:	4643      	mov	r3, r8
 8002224:	462a      	mov	r2, r5
 8002226:	21b4      	movs	r1, #180	; 0xb4
 8002228:	203c      	movs	r0, #60	; 0x3c
 800222a:	9400      	str	r4, [sp, #0]
 800222c:	f7ff f80e 	bl	800124c <LCD_DrawString_Color>
        HAL_Delay(1500);
 8002230:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002234:	f000 ff6a 	bl	800310c <HAL_Delay>
        currentPage = accelerometer;
 8002238:	2202      	movs	r2, #2
        changingPage = 0;
 800223a:	4b35      	ldr	r3, [pc, #212]	; (8002310 <accelerometerPage+0x830>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 800223c:	4641      	mov	r1, r8
        changingPage = 0;
 800223e:	f8c3 8000 	str.w	r8, [r3]
        currentPage = accelerometer;
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <accelerometerPage+0x834>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002244:	4640      	mov	r0, r8
 8002246:	f8cd 8000 	str.w	r8, [sp]
        currentPage = accelerometer;
 800224a:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800224c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002250:	22f0      	movs	r2, #240	; 0xf0
 8002252:	f7fe fe97 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8002256:	231f      	movs	r3, #31
 8002258:	2128      	movs	r1, #40	; 0x28
 800225a:	4648      	mov	r0, r9
 800225c:	4a2e      	ldr	r2, [pc, #184]	; (8002318 <accelerometerPage+0x838>)
 800225e:	e9cd 4900 	strd	r4, r9, [sp]
 8002262:	f7ff f81b 	bl	800129c <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8002266:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800226a:	2282      	movs	r2, #130	; 0x82
 800226c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002270:	2014      	movs	r0, #20
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	f7fe fe85 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 800227a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800227e:	f240 111d 	movw	r1, #285	; 0x11d
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <accelerometerPage+0x83c>)
 8002284:	201e      	movs	r0, #30
 8002286:	e9cd 8900 	strd	r8, r9, [sp]
 800228a:	f7ff f807 	bl	800129c <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 800228e:	2014      	movs	r0, #20
 8002290:	f000 ff3c 	bl	800310c <HAL_Delay>
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 8002294:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002298:	2164      	movs	r1, #100	; 0x64
 800229a:	2028      	movs	r0, #40	; 0x28
 800229c:	4a20      	ldr	r2, [pc, #128]	; (8002320 <accelerometerPage+0x840>)
 800229e:	f8cd 8000 	str.w	r8, [sp]
 80022a2:	f7fe ffd3 	bl	800124c <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 80022a6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022aa:	2182      	movs	r1, #130	; 0x82
 80022ac:	2028      	movs	r0, #40	; 0x28
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <accelerometerPage+0x844>)
 80022b0:	f8cd 8000 	str.w	r8, [sp]
 80022b4:	f7fe ffca 	bl	800124c <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 80022b8:	231f      	movs	r3, #31
 80022ba:	21a0      	movs	r1, #160	; 0xa0
 80022bc:	2028      	movs	r0, #40	; 0x28
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <accelerometerPage+0x848>)
 80022c0:	f8cd 8000 	str.w	r8, [sp]
 80022c4:	f7fe ffc2 	bl	800124c <LCD_DrawString_Color>
 80022c8:	e030      	b.n	800232c <accelerometerPage+0x84c>
 80022ca:	bf00      	nop
 80022cc:	20000230 	.word	0x20000230
 80022d0:	2000022c 	.word	0x2000022c
 80022d4:	2000055c 	.word	0x2000055c
 80022d8:	20000490 	.word	0x20000490
 80022dc:	20000558 	.word	0x20000558
 80022e0:	20000590 	.word	0x20000590
 80022e4:	08008b38 	.word	0x08008b38
 80022e8:	08008b68 	.word	0x08008b68
 80022ec:	2000062c 	.word	0x2000062c
 80022f0:	2000062e 	.word	0x2000062e
 80022f4:	20000630 	.word	0x20000630
 80022f8:	40490000 	.word	0x40490000
 80022fc:	08008b78 	.word	0x08008b78
 8002300:	08008b9c 	.word	0x08008b9c
 8002304:	08008ba4 	.word	0x08008ba4
 8002308:	08008ba8 	.word	0x08008ba8
 800230c:	08008bac 	.word	0x08008bac
 8002310:	20000000 	.word	0x20000000
 8002314:	2000055a 	.word	0x2000055a
 8002318:	08008bb0 	.word	0x08008bb0
 800231c:	08008aa8 	.word	0x08008aa8
 8002320:	08008bcc 	.word	0x08008bcc
 8002324:	08008bd0 	.word	0x08008bd0
 8002328:	08008bd4 	.word	0x08008bd4
        LCD_DrawString_Color(25, 190, output_text, WHITE, BLACK);
 800232c:	4623      	mov	r3, r4
 800232e:	21be      	movs	r1, #190	; 0xbe
 8002330:	2019      	movs	r0, #25
 8002332:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <accelerometerPage+0x900>)
 8002334:	f8cd 8000 	str.w	r8, [sp]
 8002338:	f7fe ff88 	bl	800124c <LCD_DrawString_Color>
        if (debug != 0xE5) {
 800233c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002340:	2be5      	cmp	r3, #229	; 0xe5
 8002342:	f43f abf1 	beq.w	8001b28 <accelerometerPage+0x48>
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 8002346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800234a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800234e:	208c      	movs	r0, #140	; 0x8c
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <accelerometerPage+0x904>)
 8002352:	9400      	str	r4, [sp, #0]
 8002354:	f7fe ff7a 	bl	800124c <LCD_DrawString_Color>
 8002358:	f7ff bbe6 	b.w	8001b28 <accelerometerPage+0x48>
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 800235c:	f7fe f8be 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002360:	a31d      	add	r3, pc, #116	; (adr r3, 80023d8 <accelerometerPage+0x8f8>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe f923 	bl	80005b0 <__aeabi_dmul>
 800236a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800236e:	e4d5      	b.n	8001d1c <accelerometerPage+0x23c>
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 8002370:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002374:	4631      	mov	r1, r6
 8002376:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800237a:	2032      	movs	r0, #50	; 0x32
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <accelerometerPage+0x908>)
 800237e:	f8cd 8004 	str.w	r8, [sp, #4]
 8002382:	9400      	str	r4, [sp, #0]
 8002384:	f7fe ff8a 	bl	800129c <LCD_DrawString_Color_With_Delay>
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 8002388:	2300      	movs	r3, #0
 800238a:	2003      	movs	r0, #3
 800238c:	2196      	movs	r1, #150	; 0x96
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <accelerometerPage+0x90c>)
 8002390:	9001      	str	r0, [sp, #4]
 8002392:	9400      	str	r4, [sp, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe ff81 	bl	800129c <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 800239a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800239e:	f000 feb5 	bl	800310c <HAL_Delay>
            currentPage = home;
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <accelerometerPage+0x910>)
            changingPage = 1;
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <accelerometerPage+0x914>)
            currentPage = home;
 80023a6:	701d      	strb	r5, [r3, #0]
            changingPage = 1;
 80023a8:	6017      	str	r7, [r2, #0]
}
 80023aa:	b02b      	add	sp, #172	; 0xac
 80023ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                                                                                     : 0.0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	2400      	movs	r4, #0
 80023b4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80023b8:	e4ca      	b.n	8001d50 <accelerometerPage+0x270>
                                                                                                     : 0.0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	2400      	movs	r4, #0
 80023be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80023c2:	e4df      	b.n	8001d84 <accelerometerPage+0x2a4>
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 80023c4:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 80023c8:	4628      	mov	r0, r5
 80023ca:	f7fe fba1 	bl	8000b10 <__aeabi_d2iz>
 80023ce:	f5c0 74b4 	rsb	r4, r0, #360	; 0x168
 80023d2:	b2a4      	uxth	r4, r4
 80023d4:	e560      	b.n	8001e98 <accelerometerPage+0x3b8>
 80023d6:	bf00      	nop
 80023d8:	8e8a71de 	.word	0x8e8a71de
 80023dc:	3f6ff2e4 	.word	0x3f6ff2e4
 80023e0:	08008bd8 	.word	0x08008bd8
 80023e4:	08008be0 	.word	0x08008be0
 80023e8:	08008af4 	.word	0x08008af4
 80023ec:	08008b08 	.word	0x08008b08
 80023f0:	2000055a 	.word	0x2000055a
 80023f4:	20000000 	.word	0x20000000

080023f8 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f8:	2001      	movs	r0, #1
{
 80023fa:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fc:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002402:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002404:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002408:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240a:	900c      	str	r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240c:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002410:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002414:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800241c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002420:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002424:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002428:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800242e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002430:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002434:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002436:	f002 f895 	bl	8004564 <HAL_RCC_OscConfig>
 800243a:	b108      	cbz	r0, 8002440 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800243c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800243e:	e7fe      	b.n	800243e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002440:	4603      	mov	r3, r0
 8002442:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002444:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002448:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800244a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800244e:	4621      	mov	r1, r4
 8002450:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002452:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002456:	f002 fab1 	bl	80049bc <HAL_RCC_ClockConfig>
 800245a:	b108      	cbz	r0, 8002460 <SystemClock_Config+0x68>
 800245c:	b672      	cpsid	i
    while (1) {
 800245e:	e7fe      	b.n	800245e <SystemClock_Config+0x66>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002464:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002466:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002468:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246a:	f002 fb67 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 800246e:	b108      	cbz	r0, 8002474 <SystemClock_Config+0x7c>
 8002470:	b672      	cpsid	i
    while (1) {
 8002472:	e7fe      	b.n	8002472 <SystemClock_Config+0x7a>
}
 8002474:	b016      	add	sp, #88	; 0x58
 8002476:	bd10      	pop	{r4, pc}

08002478 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	2400      	movs	r4, #0
{
 800247a:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800247c:	2710      	movs	r7, #16
{
 800247e:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8002480:	f000 fe20 	bl	80030c4 <HAL_Init>
  SystemClock_Config();
 8002484:	f7ff ffb8 	bl	80023f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800248c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002490:	4ba4      	ldr	r3, [pc, #656]	; (8002724 <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002494:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002496:	2107      	movs	r1, #7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249c:	619a      	str	r2, [r3, #24]
 800249e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80024a0:	48a1      	ldr	r0, [pc, #644]	; (8002728 <main+0x2b0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80024a6:	9202      	str	r2, [sp, #8]
 80024a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ac:	2603      	movs	r6, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	433a      	orrs	r2, r7
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	403a      	ands	r2, r7
 80024b6:	9203      	str	r2, [sp, #12]
 80024b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	f042 0204 	orr.w	r2, r2, #4
 80024c0:	619a      	str	r2, [r3, #24]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	f002 0204 	and.w	r2, r2, #4
 80024c8:	9204      	str	r2, [sp, #16]
 80024ca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	619a      	str	r2, [r3, #24]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	f002 0208 	and.w	r2, r2, #8
 80024da:	9205      	str	r2, [sp, #20]
 80024dc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	f042 0220 	orr.w	r2, r2, #32
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80024e8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	9306      	str	r3, [sp, #24]
 80024f0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80024f2:	f001 fb0d 	bl	8003b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024f6:	4622      	mov	r2, r4
 80024f8:	4639      	mov	r1, r7
 80024fa:	488c      	ldr	r0, [pc, #560]	; (800272c <main+0x2b4>)
 80024fc:	f001 fb08 	bl	8003b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002500:	2123      	movs	r1, #35	; 0x23
 8002502:	462a      	mov	r2, r5
 8002504:	488a      	ldr	r0, [pc, #552]	; (8002730 <main+0x2b8>)
 8002506:	f001 fb03 	bl	8003b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800250a:	4622      	mov	r2, r4
 800250c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002510:	4888      	ldr	r0, [pc, #544]	; (8002734 <main+0x2bc>)
 8002512:	f001 fafd 	bl	8003b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002516:	4622      	mov	r2, r4
 8002518:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800251c:	4886      	ldr	r0, [pc, #536]	; (8002738 <main+0x2c0>)
 800251e:	f001 faf7 	bl	8003b10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8002522:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002524:	4880      	ldr	r0, [pc, #512]	; (8002728 <main+0x2b0>)
 8002526:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8002528:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252e:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002530:	f001 f9c0 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002534:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002536:	487c      	ldr	r0, [pc, #496]	; (8002728 <main+0x2b0>)
 8002538:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800253a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002540:	f001 f9b8 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002544:	4b7d      	ldr	r3, [pc, #500]	; (800273c <main+0x2c4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002546:	4878      	ldr	r0, [pc, #480]	; (8002728 <main+0x2b0>)
 8002548:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800254a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800254c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f001 f9b0 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002558:	4877      	ldr	r0, [pc, #476]	; (8002738 <main+0x2c0>)
 800255a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800255c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f001 f9a7 	bl	80038b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	4871      	ldr	r0, [pc, #452]	; (800272c <main+0x2b4>)
 8002568:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256a:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f001 f9a0 	bl	80038b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	486d      	ldr	r0, [pc, #436]	; (800272c <main+0x2b4>)
 8002576:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	e9cd 7507 	strd	r7, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f001 f998 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002584:	2323      	movs	r3, #35	; 0x23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	486a      	ldr	r0, [pc, #424]	; (8002730 <main+0x2b8>)
 8002588:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800258a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002590:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f001 f98f 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259a:	4866      	ldr	r0, [pc, #408]	; (8002734 <main+0x2bc>)
 800259c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800259e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a4:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a6:	f001 f985 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80025aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025ae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	4861      	ldr	r0, [pc, #388]	; (8002738 <main+0x2c0>)
 80025b4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f001 f97a 	bl	80038b4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80025c0:	4622      	mov	r2, r4
 80025c2:	4621      	mov	r1, r4
 80025c4:	200a      	movs	r0, #10
 80025c6:	f001 f911 	bl	80037ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025ca:	200a      	movs	r0, #10
 80025cc:	f001 f94c 	bl	8003868 <HAL_NVIC_EnableIRQ>
  Timing.AddressSetupTime = 15;
 80025d0:	230f      	movs	r3, #15
  Timing.DataSetupTime = 255;
 80025d2:	20ff      	movs	r0, #255	; 0xff
  Timing.AddressHoldTime = 15;
 80025d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Timing.BusTurnAroundDuration = 15;
 80025d8:	930a      	str	r3, [sp, #40]	; 0x28
  Timing.DataLatency = 17;
 80025da:	2311      	movs	r3, #17
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025dc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.DataSetupTime = 255;
 80025e4:	9009      	str	r0, [sp, #36]	; 0x24
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025e6:	4856      	ldr	r0, [pc, #344]	; (8002740 <main+0x2c8>)
  Timing.DataLatency = 17;
 80025e8:	930c      	str	r3, [sp, #48]	; 0x30
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <main+0x2cc>)
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025ec:	6001      	str	r1, [r0, #0]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025ee:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025f0:	a907      	add	r1, sp, #28
 80025f2:	4622      	mov	r2, r4
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80025f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80025f8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80025fc:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002600:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002604:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002608:	940d      	str	r4, [sp, #52]	; 0x34
  Timing.CLKDivision = 16;
 800260a:	970b      	str	r7, [sp, #44]	; 0x2c
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800260c:	6147      	str	r7, [r0, #20]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800260e:	6104      	str	r4, [r0, #16]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002610:	6043      	str	r3, [r0, #4]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002612:	f002 fb9b 	bl	8004d4c <HAL_SRAM_Init>
 8002616:	b108      	cbz	r0, 800261c <main+0x1a4>
 8002618:	b672      	cpsid	i
    while (1) {
 800261a:	e7fe      	b.n	800261a <main+0x1a2>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800261c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002620:	4a49      	ldr	r2, [pc, #292]	; (8002748 <main+0x2d0>)
  hadc2.Instance = ADC2;
 8002622:	4c4a      	ldr	r4, [pc, #296]	; (800274c <main+0x2d4>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002624:	69d3      	ldr	r3, [r2, #28]
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	61d3      	str	r3, [r2, #28]
  hadc2.Instance = ADC2;
 800262c:	4b48      	ldr	r3, [pc, #288]	; (8002750 <main+0x2d8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800262e:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8002632:	9009      	str	r0, [sp, #36]	; 0x24
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002634:	60a0      	str	r0, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002636:	7520      	strb	r0, [r4, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002638:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800263a:	4620      	mov	r0, r4
  hadc2.Init.ContinuousConvMode = ENABLE;
 800263c:	7325      	strb	r5, [r4, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800263e:	61e1      	str	r1, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 8002640:	6125      	str	r5, [r4, #16]
  hadc2.Instance = ADC2;
 8002642:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002644:	f000 ff98 	bl	8003578 <HAL_ADC_Init>
 8002648:	b108      	cbz	r0, 800264e <main+0x1d6>
 800264a:	b672      	cpsid	i
    while (1) {
 800264c:	e7fe      	b.n	800264c <main+0x1d4>
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800264e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002650:	4620      	mov	r0, r4
 8002652:	a907      	add	r1, sp, #28
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002654:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002656:	e9cd 6507 	strd	r6, r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800265a:	f000 fe1f 	bl	800329c <HAL_ADC_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	b108      	cbz	r0, 8002666 <main+0x1ee>
 8002662:	b672      	cpsid	i
    while (1) {
 8002664:	e7fe      	b.n	8002664 <main+0x1ec>
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c2.Instance = I2C2;
 800266a:	483a      	ldr	r0, [pc, #232]	; (8002754 <main+0x2dc>)
 800266c:	493a      	ldr	r1, [pc, #232]	; (8002758 <main+0x2e0>)
    hi2c2.Init.OwnAddress2 = 0;
 800266e:	e9c0 3305 	strd	r3, r3, [r0, #20]
    hi2c2.Instance = I2C2;
 8002672:	6001      	str	r1, [r0, #0]
    hi2c2.Init.ClockSpeed = 400000;
 8002674:	4939      	ldr	r1, [pc, #228]	; (800275c <main+0x2e4>)
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002676:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800267a:	6083      	str	r3, [r0, #8]
    hi2c2.Init.OwnAddress1 = 0;
 800267c:	60c3      	str	r3, [r0, #12]
    hi2c2.Init.ClockSpeed = 400000;
 800267e:	6041      	str	r1, [r0, #4]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002680:	6102      	str	r2, [r0, #16]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002682:	f001 fc67 	bl	8003f54 <HAL_I2C_Init>
 8002686:	4606      	mov	r6, r0
 8002688:	2800      	cmp	r0, #0
 800268a:	d13f      	bne.n	800270c <main+0x294>
    HAL_ADCEx_Calibration_Start(&hadc2);
 800268c:	4620      	mov	r0, r4
 800268e:	f001 f81f 	bl	80036d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 8002692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002696:	4620      	mov	r0, r4
 8002698:	f000 fd4a 	bl	8003130 <HAL_ADC_PollForConversion>
    currentPage = home;
 800269c:	4d30      	ldr	r5, [pc, #192]	; (8002760 <main+0x2e8>)
    HAL_ADC_Start(&hadc2);
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 feda 	bl	8003458 <HAL_ADC_Start>
    LCD_INIT();
 80026a4:	f7fe fc14 	bl	8000ed0 <LCD_INIT>
    HAL_Delay(50);
 80026a8:	2032      	movs	r0, #50	; 0x32
    currentPage = home;
 80026aa:	702e      	strb	r6, [r5, #0]
    HAL_Delay(50);
 80026ac:	f000 fd2e 	bl	800310c <HAL_Delay>
    while (!XPT2046_Touch_Calibrate());
 80026b0:	f000 faac 	bl	8002c0c <XPT2046_Touch_Calibrate>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d0fb      	beq.n	80026b0 <main+0x238>
    LCD_GramScan(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fe1d 	bl	80012f8 <LCD_GramScan>
    LCD_Clear(0, 0, 240, 320, BLACK);
 80026be:	2100      	movs	r1, #0
    if (changingPage) {
 80026c0:	4e28      	ldr	r6, [pc, #160]	; (8002764 <main+0x2ec>)
    LCD_Clear(0, 0, 240, 320, BLACK);
 80026c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026c6:	22f0      	movs	r2, #240	; 0xf0
 80026c8:	4608      	mov	r0, r1
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	f7fe fc5a 	bl	8000f84 <LCD_Clear>
    if (changingPage) {
 80026d0:	6833      	ldr	r3, [r6, #0]
 80026d2:	bb1b      	cbnz	r3, 800271c <main+0x2a4>
    HAL_Delay(500);
 80026d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d8:	f000 fd18 	bl	800310c <HAL_Delay>
            ucXPT2046_TouchFlag = 0;
 80026dc:	2700      	movs	r7, #0
 80026de:	4c22      	ldr	r4, [pc, #136]	; (8002768 <main+0x2f0>)
 80026e0:	e008      	b.n	80026f4 <main+0x27c>
        if (ucXPT2046_TouchFlag == 1) {
 80026e2:	7823      	ldrb	r3, [r4, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <main+0x276>
            Check_touchkey();
 80026e8:	f7fe fed8 	bl	800149c <Check_touchkey>
            ucXPT2046_TouchFlag = 0;
 80026ec:	7027      	strb	r7, [r4, #0]
        HAL_Delay(50);
 80026ee:	2032      	movs	r0, #50	; 0x32
 80026f0:	f000 fd0c 	bl	800310c <HAL_Delay>
        if (currentPage == home) mainPage();
 80026f4:	782b      	ldrb	r3, [r5, #0]
 80026f6:	b11b      	cbz	r3, 8002700 <main+0x288>
        else if (currentPage == weight) weightPage();
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d009      	beq.n	8002710 <main+0x298>
        else if (currentPage == accelerometer) accelerometerPage();
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d00a      	beq.n	8002716 <main+0x29e>
    if (changingPage) {
 8002700:	6833      	ldr	r3, [r6, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ed      	beq.n	80026e2 <main+0x26a>
 8002706:	f7fe fe69 	bl	80013dc <mainPage.part.0>
 800270a:	e7ea      	b.n	80026e2 <main+0x26a>
 800270c:	b672      	cpsid	i
    while (1) {
 800270e:	e7fe      	b.n	800270e <main+0x296>
        else if (currentPage == weight) weightPage();
 8002710:	f7ff f90a 	bl	8001928 <weightPage>
 8002714:	e7e5      	b.n	80026e2 <main+0x26a>
        else if (currentPage == accelerometer) accelerometerPage();
 8002716:	f7ff f9e3 	bl	8001ae0 <accelerometerPage>
 800271a:	e7e2      	b.n	80026e2 <main+0x26a>
 800271c:	f7fe fe5e 	bl	80013dc <mainPage.part.0>
 8002720:	e7d8      	b.n	80026d4 <main+0x25c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40011800 	.word	0x40011800
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011400 	.word	0x40011400
 8002738:	40011000 	.word	0x40011000
 800273c:	10210000 	.word	0x10210000
 8002740:	200005e4 	.word	0x200005e4
 8002744:	a0000104 	.word	0xa0000104
 8002748:	40010000 	.word	0x40010000
 800274c:	20000560 	.word	0x20000560
 8002750:	40012800 	.word	0x40012800
 8002754:	20000590 	.word	0x20000590
 8002758:	40005800 	.word	0x40005800
 800275c:	00061a80 	.word	0x00061a80
 8002760:	2000055a 	.word	0x2000055a
 8002764:	20000000 	.word	0x20000000
 8002768:	200006f0 	.word	0x200006f0

0800276c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_MspInit+0x3c>)
{
 800276e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002770:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	f002 0201 	and.w	r2, r2, #1
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800278a:	61da      	str	r2, [r3, #28]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002796:	684b      	ldr	r3, [r1, #4]
 8002798:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	b002      	add	sp, #8
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000

080027b0 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	2300      	movs	r3, #0
{
 80027b2:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC2)
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_ADC_MspInit+0x5c>)
 80027b6:	6801      	ldr	r1, [r0, #0]
{
 80027b8:	b087      	sub	sp, #28
  if(hadc->Instance==ADC2)
 80027ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC2)
 80027c4:	d001      	beq.n	80027ca <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80027c6:	b007      	add	sp, #28
 80027c8:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027ca:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027cc:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027de:	619a      	str	r2, [r3, #24]
 80027e0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027e6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	f042 0204 	orr.w	r2, r2, #4
 80027f4:	619a      	str	r2, [r3, #24]
 80027f6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f8:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f001 f856 	bl	80038b4 <HAL_GPIO_Init>
}
 8002808:	b007      	add	sp, #28
 800280a:	bd30      	pop	{r4, r5, pc}
 800280c:	40012800 	.word	0x40012800
 8002810:	40010800 	.word	0x40010800

08002814 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	2300      	movs	r3, #0
{
 8002816:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_I2C_MspInit+0x5c>)
 800281a:	6801      	ldr	r1, [r0, #0]
{
 800281c:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 800281e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002824:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8002828:	d001      	beq.n	800282e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800282a:	b007      	add	sp, #28
 800282c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800282e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002832:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002834:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	4c0f      	ldr	r4, [pc, #60]	; (8002874 <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	61a3      	str	r3, [r4, #24]
 8002842:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002844:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002852:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002854:	f001 f82e 	bl	80038b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002858:	69e3      	ldr	r3, [r4, #28]
 800285a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800285e:	61e3      	str	r3, [r4, #28]
 8002860:	69e3      	ldr	r3, [r4, #28]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	9b01      	ldr	r3, [sp, #4]
}
 800286a:	b007      	add	sp, #28
 800286c:	bd30      	pop	{r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	40005800 	.word	0x40005800
 8002874:	40021000 	.word	0x40021000
 8002878:	40010c00 	.word	0x40010c00

0800287c <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800287c:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002882:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8002884:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002886:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8002888:	bb12      	cbnz	r2, 80028d0 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 800288a:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288e:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002890:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002894:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002898:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 800289c:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800289e:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6153      	str	r3, [r2, #20]
 80028a8:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028aa:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80028b4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ba:	f000 fffb 	bl	80038b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80028be:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <HAL_SRAM_MspInit+0x60>)
 80028c4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80028ca:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028cc:	f000 fff2 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80028d0:	b007      	add	sp, #28
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d4:	200006e8 	.word	0x200006e8
 80028d8:	40011800 	.word	0x40011800
 80028dc:	40011400 	.word	0x40011400

080028e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <HardFault_Handler>
 80028e6:	bf00      	nop

080028e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler>
 80028ea:	bf00      	nop

080028ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <BusFault_Handler>
 80028ee:	bf00      	nop

080028f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler>
 80028f2:	bf00      	nop

080028f4 <SVC_Handler>:
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <DebugMon_Handler>:
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <PendSV_Handler>:
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002900:	f000 bbf2 	b.w	80030e8 <HAL_IncTick>

08002904 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002904:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <EXTI4_IRQHandler+0x2c>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	06d2      	lsls	r2, r2, #27
 800290c:	d404      	bmi.n	8002918 <EXTI4_IRQHandler+0x14>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800290e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002912:	2010      	movs	r0, #16
 8002914:	f001 b902 	b.w	8003b1c <HAL_GPIO_EXTI_IRQHandler>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002918:	2010      	movs	r0, #16
        ucXPT2046_TouchFlag = 1;
 800291a:	2101      	movs	r1, #1
 800291c:	4a05      	ldr	r2, [pc, #20]	; (8002934 <EXTI4_IRQHandler+0x30>)
 800291e:	7011      	strb	r1, [r2, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002920:	6158      	str	r0, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002922:	f001 f8f9 	bl	8003b18 <HAL_GPIO_EXTI_Callback>
}
 8002926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800292a:	2010      	movs	r0, #16
 800292c:	f001 b8f6 	b.w	8003b1c <HAL_GPIO_EXTI_IRQHandler>
 8002930:	40010400 	.word	0x40010400
 8002934:	200006f0 	.word	0x200006f0

08002938 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
    return 1;
}
 8002938:	2001      	movs	r0, #1
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig) {
 800293c:	b508      	push	{r3, lr}
    errno = EINVAL;
 800293e:	f002 fab3 	bl	8004ea8 <__errno>
 8002942:	2216      	movs	r2, #22
 8002944:	4603      	mov	r3, r0
    return -1;
}
 8002946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = EINVAL;
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	bd08      	pop	{r3, pc}
 800294e:	bf00      	nop

08002950 <_exit>:

void _exit(int status) {
 8002950:	b508      	push	{r3, lr}
    errno = EINVAL;
 8002952:	f002 faa9 	bl	8004ea8 <__errno>
 8002956:	2316      	movs	r3, #22
 8002958:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
 800295a:	e7fe      	b.n	800295a <_exit+0xa>

0800295c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800295c:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800295e:	1e16      	subs	r6, r2, #0
 8002960:	dd07      	ble.n	8002972 <_read+0x16>
 8002962:	460c      	mov	r4, r1
 8002964:	198d      	adds	r5, r1, r6
        *ptr++ = __io_getchar();
 8002966:	f3af 8000 	nop.w
 800296a:	f804 0b01 	strb.w	r0, [r4], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800296e:	42a5      	cmp	r5, r4
 8002970:	d1f9      	bne.n	8002966 <_read+0xa>
    }

    return len;
}
 8002972:	4630      	mov	r0, r6
 8002974:	bd70      	pop	{r4, r5, r6, pc}
 8002976:	bf00      	nop

08002978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002978:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800297a:	1e16      	subs	r6, r2, #0
 800297c:	dd07      	ble.n	800298e <_write+0x16>
 800297e:	460c      	mov	r4, r1
 8002980:	198d      	adds	r5, r1, r6
        __io_putchar(*ptr++);
 8002982:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002986:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800298a:	42a5      	cmp	r5, r4
 800298c:	d1f9      	bne.n	8002982 <_write+0xa>
    }
    return len;
}
 800298e:	4630      	mov	r0, r6
 8002990:	bd70      	pop	{r4, r5, r6, pc}
 8002992:	bf00      	nop

08002994 <_close>:

int _close(int file) {
    return -1;
}
 8002994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <_fstat>:


int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    return 0;
}
 80029a0:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 80029a2:	604b      	str	r3, [r1, #4]
}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop

080029a8 <_isatty>:

int _isatty(int file) {
    return 1;
}
 80029a8:	2001      	movs	r0, #1
 80029aa:	4770      	bx	lr

080029ac <_lseek>:

int _lseek(int file, int ptr, int dir) {
    return 0;
}
 80029ac:	2000      	movs	r0, #0
 80029ae:	4770      	bx	lr

080029b0 <_sbrk>:
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *) stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80029b0:	490d      	ldr	r1, [pc, #52]	; (80029e8 <_sbrk+0x38>)
void *_sbrk(ptrdiff_t incr) {
 80029b2:	4603      	mov	r3, r0
 80029b4:	b510      	push	{r4, lr}
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80029b6:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <_sbrk+0x3c>)
 80029b8:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <_sbrk+0x40>)
    if (NULL == __sbrk_heap_end) {
 80029ba:	6808      	ldr	r0, [r1, #0]
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80029bc:	1b12      	subs	r2, r2, r4
    if (NULL == __sbrk_heap_end) {
 80029be:	b120      	cbz	r0, 80029ca <_sbrk+0x1a>
        __sbrk_heap_end = &_end;
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80029c0:	4403      	add	r3, r0
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d807      	bhi.n	80029d6 <_sbrk+0x26>
        errno = ENOMEM;
        return (void *) -1;
    }

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;
 80029c6:	600b      	str	r3, [r1, #0]

    return (void *) prev_heap_end;
}
 80029c8:	bd10      	pop	{r4, pc}
        __sbrk_heap_end = &_end;
 80029ca:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <_sbrk+0x44>)
 80029cc:	4620      	mov	r0, r4
    if (__sbrk_heap_end + incr > max_heap) {
 80029ce:	4403      	add	r3, r0
 80029d0:	4293      	cmp	r3, r2
        __sbrk_heap_end = &_end;
 80029d2:	600c      	str	r4, [r1, #0]
    if (__sbrk_heap_end + incr > max_heap) {
 80029d4:	d9f7      	bls.n	80029c6 <_sbrk+0x16>
        errno = ENOMEM;
 80029d6:	f002 fa67 	bl	8004ea8 <__errno>
 80029da:	220c      	movs	r2, #12
 80029dc:	4603      	mov	r3, r0
        return (void *) -1;
 80029de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        errno = ENOMEM;
 80029e2:	601a      	str	r2, [r3, #0]
}
 80029e4:	bd10      	pop	{r4, pc}
 80029e6:	bf00      	nop
 80029e8:	200006ec 	.word	0x200006ec
 80029ec:	20010000 	.word	0x20010000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	20000708 	.word	0x20000708

080029f8 <SystemInit>:

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <XPT2046_WriteCMD>:
    }

}


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	4606      	mov	r6, r0
    uint8_t i;


    macXPT2046_MOSI_0();
 8002a00:	4815      	ldr	r0, [pc, #84]	; (8002a58 <XPT2046_WriteCMD+0x5c>)
 8002a02:	2200      	movs	r2, #0

    macXPT2046_CLK_LOW();

    for (i = 0; i < 8; i++) {
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002a04:	4605      	mov	r5, r0
    macXPT2046_MOSI_0();
 8002a06:	2104      	movs	r1, #4
 8002a08:	f001 f882 	bl	8003b10 <HAL_GPIO_WritePin>
    macXPT2046_CLK_LOW();
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4628      	mov	r0, r5
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002a12:	2407      	movs	r4, #7
    macXPT2046_CLK_LOW();
 8002a14:	f001 f87c 	bl	8003b10 <HAL_GPIO_WritePin>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002a18:	fa46 f204 	asr.w	r2, r6, r4
 8002a1c:	f012 0201 	ands.w	r2, r2, #1
 8002a20:	bf18      	it	ne
 8002a22:	2201      	movne	r2, #1
 8002a24:	2104      	movs	r1, #4
 8002a26:	4628      	mov	r0, r5
 8002a28:	f001 f872 	bl	8003b10 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	3301      	adds	r3, #1
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d3fc      	bcc.n	8002a2e <XPT2046_WriteCMD+0x32>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_HIGH();
 8002a34:	2201      	movs	r2, #1
 8002a36:	4628      	mov	r0, r5
 8002a38:	4611      	mov	r1, r2
 8002a3a:	f001 f869 	bl	8003b10 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002a3e:	2300      	movs	r3, #0
 8002a40:	3301      	adds	r3, #1
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d3fc      	bcc.n	8002a40 <XPT2046_WriteCMD+0x44>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_LOW();
 8002a46:	2200      	movs	r2, #0
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4628      	mov	r0, r5
    for (i = 0; i < 8; i++) {
 8002a4c:	3c01      	subs	r4, #1
        macXPT2046_CLK_LOW();
 8002a4e:	f001 f85f 	bl	8003b10 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 8002a52:	1c63      	adds	r3, r4, #1
 8002a54:	d1e0      	bne.n	8002a18 <XPT2046_WriteCMD+0x1c>
    }

}
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	40011800 	.word	0x40011800

08002a5c <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002a5c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    uint16_t usBuf = 0, usTemp;


    macXPT2046_MOSI_0();
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2104      	movs	r1, #4
 8002a62:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <XPT2046_ReadCMD+0x4c>)
 8002a64:	f001 f854 	bl	8003b10 <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002a68:	2201      	movs	r2, #1
 8002a6a:	480f      	ldr	r0, [pc, #60]	; (8002aa8 <XPT2046_ReadCMD+0x4c>)
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	250b      	movs	r5, #11
    uint16_t usBuf = 0, usTemp;
 8002a70:	2400      	movs	r4, #0

    for (i = 0; i < 12; i++) {
        macXPT2046_CLK_LOW();
 8002a72:	4606      	mov	r6, r0
    macXPT2046_CLK_HIGH();
 8002a74:	f001 f84c 	bl	8003b10 <HAL_GPIO_WritePin>
        macXPT2046_CLK_LOW();
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f001 f847 	bl	8003b10 <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 8002a82:	2108      	movs	r1, #8
 8002a84:	4630      	mov	r0, r6
 8002a86:	f001 f83d 	bl	8003b04 <HAL_GPIO_ReadPin>

        usBuf |= usTemp << (11 - i);

        macXPT2046_CLK_HIGH();
 8002a8a:	2201      	movs	r2, #1
        usTemp = macXPT2046_MISO();
 8002a8c:	4603      	mov	r3, r0
        macXPT2046_CLK_HIGH();
 8002a8e:	4611      	mov	r1, r2
        usBuf |= usTemp << (11 - i);
 8002a90:	40ab      	lsls	r3, r5
        macXPT2046_CLK_HIGH();
 8002a92:	4630      	mov	r0, r6
    for (i = 0; i < 12; i++) {
 8002a94:	3d01      	subs	r5, #1
        usBuf |= usTemp << (11 - i);
 8002a96:	431c      	orrs	r4, r3
        macXPT2046_CLK_HIGH();
 8002a98:	f001 f83a 	bl	8003b10 <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8002a9c:	1c6b      	adds	r3, r5, #1
        usBuf |= usTemp << (11 - i);
 8002a9e:	b2a4      	uxth	r4, r4
    for (i = 0; i < 12; i++) {
 8002aa0:	d1ea      	bne.n	8002a78 <XPT2046_ReadCMD+0x1c>

    }

    return usBuf;

}
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40011800 	.word	0x40011800

08002aac <XPT2046_ReadAdc_Smooth_XY>:

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
    uint8_t ucCount = 0, i;

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8002aac:	2100      	movs	r1, #0
static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	4680      	mov	r8, r0
    int16_t sBufferArray[2][10] = {{0},
 8002ab6:	2228      	movs	r2, #40	; 0x28
 8002ab8:	4668      	mov	r0, sp
 8002aba:	466e      	mov	r6, sp
    uint8_t ucCount = 0, i;
 8002abc:	460c      	mov	r4, r1
        sBufferArray[0][ucCount] = sAD_X;
        sBufferArray[1][ucCount] = sAD_Y;

        ucCount++;

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002abe:	4f51      	ldr	r7, [pc, #324]	; (8002c04 <XPT2046_ReadAdc_Smooth_XY+0x158>)
    int16_t sBufferArray[2][10] = {{0},
 8002ac0:	f002 fa46 	bl	8004f50 <memset>
    XPT2046_WriteCMD(ucChannel);
 8002ac4:	2090      	movs	r0, #144	; 0x90
 8002ac6:	f7ff ff99 	bl	80029fc <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002aca:	f7ff ffc7 	bl	8002a5c <XPT2046_ReadCMD>
    for (i = 0; i < ulCount; i++) {
 8002ace:	2300      	movs	r3, #0
    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 8002ad0:	b205      	sxth	r5, r0
    for (i = 0; i < ulCount; i++) {
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	d0fd      	beq.n	8002ad2 <XPT2046_ReadAdc_Smooth_XY+0x26>
    XPT2046_WriteCMD(ucChannel);
 8002ad6:	20d0      	movs	r0, #208	; 0xd0
 8002ad8:	f7ff ff90 	bl	80029fc <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 8002adc:	f7ff ffbe 	bl	8002a5c <XPT2046_ReadCMD>
 8002ae0:	4603      	mov	r3, r0
        sBufferArray[0][ucCount] = sAD_X;
 8002ae2:	f826 5b02 	strh.w	r5, [r6], #2
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	4638      	mov	r0, r7
        sBufferArray[1][ucCount] = sAD_Y;
 8002aea:	8273      	strh	r3, [r6, #18]
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002aec:	f001 f80a 	bl	8003b04 <HAL_GPIO_ReadPin>
        ucCount++;
 8002af0:	3401      	adds	r4, #1
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002af2:	4605      	mov	r5, r0
        ucCount++;
 8002af4:	b2e4      	uxtb	r4, r4
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d174      	bne.n	8002be4 <XPT2046_ReadAdc_Smooth_XY+0x138>
 8002afa:	2c0a      	cmp	r4, #10
 8002afc:	d1e2      	bne.n	8002ac4 <XPT2046_ReadAdc_Smooth_XY+0x18>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002afe:	2110      	movs	r1, #16
 8002b00:	4840      	ldr	r0, [pc, #256]	; (8002c04 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002b02:	f000 ffff 	bl	8003b04 <HAL_GPIO_ReadPin>
 8002b06:	b108      	cbz	r0, 8002b0c <XPT2046_ReadAdc_Smooth_XY+0x60>
        ucXPT2046_TouchFlag = 0;
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002b0a:	701d      	strb	r5, [r3, #0]


    if (ucCount == 10) {
        lX_Max = lX_Min = sBufferArray[0][0];
 8002b0c:	f9bd c000 	ldrsh.w	ip, [sp]
        lY_Max = lY_Min = sBufferArray[1][0];
 8002b10:	466b      	mov	r3, sp
        lX_Max = lX_Min = sBufferArray[0][0];
 8002b12:	4664      	mov	r4, ip
 8002b14:	4661      	mov	r1, ip
        lY_Max = lY_Min = sBufferArray[1][0];
 8002b16:	f9bd 7014 	ldrsh.w	r7, [sp, #20]

        for (i = 1; i < 10; i++) {
 8002b1a:	f10d 0012 	add.w	r0, sp, #18
 8002b1e:	e004      	b.n	8002b2a <XPT2046_ReadAdc_Smooth_XY+0x7e>
 8002b20:	4294      	cmp	r4, r2
 8002b22:	bfb8      	it	lt
 8002b24:	4614      	movlt	r4, r2
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d006      	beq.n	8002b38 <XPT2046_ReadAdc_Smooth_XY+0x8c>
            if (sBufferArray[0][i] < lX_Min)
 8002b2a:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002b2e:	428a      	cmp	r2, r1
 8002b30:	daf6      	bge.n	8002b20 <XPT2046_ReadAdc_Smooth_XY+0x74>
        for (i = 1; i < 10; i++) {
 8002b32:	4298      	cmp	r0, r3
 8002b34:	4611      	mov	r1, r2
 8002b36:	d1f8      	bne.n	8002b2a <XPT2046_ReadAdc_Smooth_XY+0x7e>
        lY_Max = lY_Min = sBufferArray[1][0];
 8002b38:	4638      	mov	r0, r7
 8002b3a:	463d      	mov	r5, r7
 8002b3c:	f10d 0626 	add.w	r6, sp, #38	; 0x26
 8002b40:	ab05      	add	r3, sp, #20
 8002b42:	e004      	b.n	8002b4e <XPT2046_ReadAdc_Smooth_XY+0xa2>
 8002b44:	4290      	cmp	r0, r2
 8002b46:	bfb8      	it	lt
 8002b48:	4610      	movlt	r0, r2
            else if (sBufferArray[0][i] > lX_Max)
                lX_Max = sBufferArray[0][i];

        }

        for (i = 1; i < 10; i++) {
 8002b4a:	42b3      	cmp	r3, r6
 8002b4c:	d006      	beq.n	8002b5c <XPT2046_ReadAdc_Smooth_XY+0xb0>
            if (sBufferArray[1][i] < lY_Min)
 8002b4e:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002b52:	42aa      	cmp	r2, r5
 8002b54:	daf6      	bge.n	8002b44 <XPT2046_ReadAdc_Smooth_XY+0x98>
        for (i = 1; i < 10; i++) {
 8002b56:	42b3      	cmp	r3, r6
 8002b58:	4615      	mov	r5, r2
 8002b5a:	d1f8      	bne.n	8002b4e <XPT2046_ReadAdc_Smooth_XY+0xa2>
                lY_Max = sBufferArray[1][i];

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002b5c:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002b60:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
                                sBufferArray[0][4] +
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002b64:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002b68:	4462      	add	r2, ip
 8002b6a:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002b6c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8002b70:	443b      	add	r3, r7
 8002b72:	4433      	add	r3, r6
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002b74:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8002b78:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002b7a:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8002b7e:	4433      	add	r3, r6
                                sBufferArray[0][4] +
 8002b80:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002b84:	4432      	add	r2, r6
                                sBufferArray[1][4] +
 8002b86:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002b8a:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002b8c:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
                                sBufferArray[0][4] +
 8002b90:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002b92:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
                                sBufferArray[1][4] +
 8002b96:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002b98:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8002b9c:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002b9e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8002ba2:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002ba4:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8002ba8:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002baa:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8002bae:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002bb0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8002bb4:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002bb6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8002bba:	4433      	add	r3, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8002bbc:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8002bc0:	4432      	add	r2, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8002bc2:	1a52      	subs	r2, r2, r1
 8002bc4:	1b12      	subs	r2, r2, r4
 8002bc6:	10d2      	asrs	r2, r2, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8002bc8:	f8a8 2000 	strh.w	r2, [r8]
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002bcc:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8002bd0:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002bd2:	1b5b      	subs	r3, r3, r5
 8002bd4:	1a1b      	subs	r3, r3, r0


        return 1;
 8002bd6:	2001      	movs	r0, #1
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8002bd8:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8002bda:	f8a8 3002 	strh.w	r3, [r8, #2]


    return 0;


}
 8002bde:	b00a      	add	sp, #40	; 0x28
 8002be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002be4:	2110      	movs	r1, #16
 8002be6:	4807      	ldr	r0, [pc, #28]	; (8002c04 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8002be8:	f000 ff8c 	bl	8003b04 <HAL_GPIO_ReadPin>
 8002bec:	b930      	cbnz	r0, 8002bfc <XPT2046_ReadAdc_Smooth_XY+0x150>
    if (ucCount == 10) {
 8002bee:	2c0a      	cmp	r4, #10
    return 0;
 8002bf0:	bf18      	it	ne
 8002bf2:	2000      	movne	r0, #0
    if (ucCount == 10) {
 8002bf4:	d08a      	beq.n	8002b0c <XPT2046_ReadAdc_Smooth_XY+0x60>
}
 8002bf6:	b00a      	add	sp, #40	; 0x28
 8002bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ucXPT2046_TouchFlag = 0;
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e7f4      	b.n	8002bee <XPT2046_ReadAdc_Smooth_XY+0x142>
 8002c04:	40011800 	.word	0x40011800
 8002c08:	200006f0 	.word	0x200006f0

08002c0c <XPT2046_Touch_Calibrate>:


}


uint8_t XPT2046_Touch_Calibrate(void) {
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002c10:	213c      	movs	r1, #60	; 0x3c
    strCrossCoordinate[0].y = usScreenHeigth >> 2;

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002c12:	22f0      	movs	r2, #240	; 0xf0

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002c14:	23b4      	movs	r3, #180	; 0xb4
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002c16:	f04f 0a50 	mov.w	sl, #80	; 0x50


    LCD_GramScan(1);
 8002c1a:	2001      	movs	r0, #1
uint8_t XPT2046_Touch_Calibrate(void) {
 8002c1c:	b09b      	sub	sp, #108	; 0x6c
    LCD_GramScan(1);
 8002c1e:	4607      	mov	r7, r0

    for (i = 0; i < 4; i++) {
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);

        pStr = "Touch Calibrate ......";
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002c20:	f8df b340 	ldr.w	fp, [pc, #832]	; 8002f64 <XPT2046_Touch_Calibrate+0x358>
 8002c24:	4ed0      	ldr	r6, [pc, #832]	; (8002f68 <XPT2046_Touch_Calibrate+0x35c>)
 8002c26:	ad16      	add	r5, sp, #88	; 0x58
 8002c28:	f10d 084e 	add.w	r8, sp, #78	; 0x4e
    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002c2c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002c30:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002c34:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002c38:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002c3c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8002c40:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002c44:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    LCD_GramScan(1);
 8002c48:	f7fe fb56 	bl	80012f8 <LCD_GramScan>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002c4c:	2400      	movs	r4, #0
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002c4e:	f44f 4978 	mov.w	r9, #63488	; 0xf800
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002c52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c56:	22f0      	movs	r2, #240	; 0xf0
 8002c58:	4621      	mov	r1, r4
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	9400      	str	r4, [sp, #0]
 8002c5e:	f7fe f991 	bl	8000f84 <LCD_Clear>
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8002c62:	4623      	mov	r3, r4
 8002c64:	465a      	mov	r2, fp
 8002c66:	21a0      	movs	r1, #160	; 0xa0
 8002c68:	203c      	movs	r0, #60	; 0x3c
 8002c6a:	f8cd 9000 	str.w	r9, [sp]
 8002c6e:	f7fe faed 	bl	800124c <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 8002c72:	463a      	mov	r2, r7
 8002c74:	49bd      	ldr	r1, [pc, #756]	; (8002f6c <XPT2046_Touch_Calibrate+0x360>)
 8002c76:	a80f      	add	r0, sp, #60	; 0x3c
 8002c78:	f002 febe 	bl	80059f8 <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	2190      	movs	r1, #144	; 0x90
 8002c80:	2078      	movs	r0, #120	; 0x78
 8002c82:	f8cd 9000 	str.w	r9, [sp]
 8002c86:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c88:	f7fe fae0 	bl	800124c <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	3301      	adds	r3, #1
 8002c90:	42b3      	cmp	r3, r6
 8002c92:	d3fc      	bcc.n	8002c8e <XPT2046_Touch_Calibrate+0x82>

        XPT2046_DelayUS(100000);

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002c94:	4651      	mov	r1, sl
 8002c96:	f838 0c06 	ldrh.w	r0, [r8, #-6]
 8002c9a:	f7fe faab 	bl	80011f4 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f7ff ff04 	bl	8002aac <XPT2046_ReadAdc_Smooth_XY>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d0fa      	beq.n	8002c9e <XPT2046_Touch_Calibrate+0x92>
    for (i = 0; i < 4; i++) {
 8002ca8:	3701      	adds	r7, #1
 8002caa:	2f05      	cmp	r7, #5
 8002cac:	f105 0504 	add.w	r5, r5, #4
 8002cb0:	f108 0804 	add.w	r8, r8, #4
 8002cb4:	d002      	beq.n	8002cbc <XPT2046_Touch_Calibrate+0xb0>
        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002cb6:	f838 ac04 	ldrh.w	sl, [r8, #-4]
 8002cba:	e7c7      	b.n	8002c4c <XPT2046_Touch_Calibrate+0x40>
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8002cbc:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8002cc0:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
 8002cc4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8002cc8:	f8bd 805e 	ldrh.w	r8, [sp, #94]	; 0x5e
 8002ccc:	1b32      	subs	r2, r6, r4
 8002cce:	eba8 0307 	sub.w	r3, r8, r7
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	4613      	mov	r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8002cda:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002cde:	f8bd 905a 	ldrh.w	r9, [sp, #90]	; 0x5a
 8002ce2:	eba5 0a04 	sub.w	sl, r5, r4
 8002ce6:	eba9 0207 	sub.w	r2, r9, r7
 8002cea:	fb0a fb02 	mul.w	fp, sl, r2
    if (pCalibrationFactor->Divider == 0)
 8002cee:	455b      	cmp	r3, fp
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	f000 8115 	beq.w	8002f20 <XPT2046_Touch_Calibrate+0x314>
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8002cf6:	eba8 0009 	sub.w	r0, r8, r9
 8002cfa:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->An =
 8002cfe:	00c0      	lsls	r0, r0, #3
 8002d00:	f7fd fbec 	bl	80004dc <__aeabi_i2d>
 8002d04:	460a      	mov	r2, r1
 8002d06:	4601      	mov	r1, r0
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8002d08:	1b70      	subs	r0, r6, r5
 8002d0a:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->Bn =
 8002d0e:	00c0      	lsls	r0, r0, #3
        pCalibrationFactor->An =
 8002d10:	e9cd 1206 	strd	r1, r2, [sp, #24]
        pCalibrationFactor->Bn =
 8002d14:	f7fd fbe2 	bl	80004dc <__aeabi_i2d>
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002d18:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
        pCalibrationFactor->Bn =
 8002d1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002d20:	fb0c f006 	mul.w	r0, ip, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002d24:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002d28:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002d2c:	fb0c fc05 	mul.w	ip, ip, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8002d30:	fb08 f000 	mul.w	r0, r8, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002d34:	1baa      	subs	r2, r5, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8002d36:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002d3a:	fb07 f202 	mul.w	r2, r7, r2
                pScreenSample[0].y +
 8002d3e:	fb09 000c 	mla	r0, r9, ip, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8002d42:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
        pCalibrationFactor->Cn =
 8002d46:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002d4a:	f7fd fbc7 	bl	80004dc <__aeabi_i2d>
        pCalibrationFactor->Dn =
 8002d4e:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Cn =
 8002d52:	460a      	mov	r2, r1
 8002d54:	4601      	mov	r1, r0
        pCalibrationFactor->Dn =
 8002d56:	9b04      	ldr	r3, [sp, #16]
        pCalibrationFactor->Cn =
 8002d58:	e9cd 1204 	strd	r1, r2, [sp, #16]
        pCalibrationFactor->Dn =
 8002d5c:	fb0c f003 	mul.w	r0, ip, r3
 8002d60:	f7fd fbbc 	bl	80004dc <__aeabi_i2d>
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002d64:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Dn =
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8002d6c:	fb0c f00a 	mul.w	r0, ip, sl
        pCalibrationFactor->En =
 8002d70:	4240      	negs	r0, r0
        pCalibrationFactor->Dn =
 8002d72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        pCalibrationFactor->En =
 8002d76:	f7fd fbb1 	bl	80004dc <__aeabi_i2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002d7e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002d82:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002d86:	1b64      	subs	r4, r4, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002d88:	0109      	lsls	r1, r1, #4
 8002d8a:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002d8e:	fb09 f404 	mul.w	r4, r9, r4
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8002d92:	fb08 f801 	mul.w	r8, r8, r1
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002d96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8002d9a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002d9e:	012d      	lsls	r5, r5, #4
                pScreenSample[0].y +
 8002da0:	eb08 1404 	add.w	r4, r8, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8002da4:	eba5 1506 	sub.w	r5, r5, r6, lsl #4
        pCalibrationFactor->Fn =
 8002da8:	fb07 4005 	mla	r0, r7, r5, r4
        pCalibrationFactor->En =
 8002dac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        pCalibrationFactor->Fn =
 8002db0:	f7fd fb94 	bl	80004dc <__aeabi_i2d>
    pCalibrationFactor->Divider =
 8002db4:	9b02      	ldr	r3, [sp, #8]
        pCalibrationFactor->Fn =
 8002db6:	4680      	mov	r8, r0
    pCalibrationFactor->Divider =
 8002db8:	eba3 000b 	sub.w	r0, r3, fp
        pCalibrationFactor->Fn =
 8002dbc:	4689      	mov	r9, r1
    pCalibrationFactor->Divider =
 8002dbe:	f7fd fb8d 	bl	80004dc <__aeabi_i2d>
 8002dc2:	4682      	mov	sl, r0
    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);

    if (CalibrationFactor.Divider == 0) goto Failure;


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002dc4:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    pCalibrationFactor->Divider =
 8002dc8:	468b      	mov	fp, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002dca:	f7fd fb87 	bl	80004dc <__aeabi_i2d>
 8002dce:	4606      	mov	r6, r0
 8002dd0:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
 8002dd4:	460f      	mov	r7, r1
 8002dd6:	f7fd fb81 	bl	80004dc <__aeabi_i2d>
 8002dda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002dde:	4604      	mov	r4, r0
 8002de0:	460d      	mov	r5, r1
 8002de2:	4630      	mov	r0, r6
 8002de4:	4639      	mov	r1, r7
 8002de6:	f7fd fbe3 	bl	80005b0 <__aeabi_dmul>
 8002dea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	f7fd fbdb 	bl	80005b0 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e02:	f7fd fa1f 	bl	8000244 <__adddf3>
 8002e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e0a:	f7fd fa1b 	bl	8000244 <__adddf3>
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8002e0e:	4652      	mov	r2, sl
 8002e10:	465b      	mov	r3, fp
 8002e12:	f7fd fcf7 	bl	8000804 <__aeabi_ddiv>
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002e16:	f7fd fea3 	bl	8000b60 <__aeabi_d2uiz>
 8002e1a:	4603      	mov	r3, r0
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002e1c:	4639      	mov	r1, r7
 8002e1e:	4630      	mov	r0, r6
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8002e20:	b29e      	uxth	r6, r3
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002e22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e26:	f7fd fbc3 	bl	80005b0 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	4614      	mov	r4, r2
 8002e34:	461d      	mov	r5, r3
 8002e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002e3a:	f7fd fbb9 	bl	80005b0 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd f9fd 	bl	8000244 <__adddf3>
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	f7fd f9f9 	bl	8000244 <__adddf3>
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8002e52:	4652      	mov	r2, sl
 8002e54:	465b      	mov	r3, fp
 8002e56:	f7fd fcd5 	bl	8000804 <__aeabi_ddiv>
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002e5a:	f7fd fe81 	bl	8000b60 <__aeabi_d2uiz>

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002e5e:	2eb4      	cmp	r6, #180	; 0xb4
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8002e60:	b280      	uxth	r0, r0
    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8002e62:	bf8c      	ite	hi
 8002e64:	f1a6 02b4 	subhi.w	r2, r6, #180	; 0xb4
 8002e68:	f1c6 02b4 	rsbls	r2, r6, #180	; 0xb4
 8002e6c:	b292      	uxth	r2, r2
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002e6e:	2850      	cmp	r0, #80	; 0x50
 8002e70:	bf8c      	ite	hi
 8002e72:	f1a0 0350 	subhi.w	r3, r0, #80	; 0x50
 8002e76:	f1c0 0350 	rsbls	r3, r0, #80	; 0x50
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002e7a:	2a0a      	cmp	r2, #10
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8002e7c:	b29b      	uxth	r3, r3
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8002e7e:	d84f      	bhi.n	8002f20 <XPT2046_Touch_Calibrate+0x314>
 8002e80:	2b0a      	cmp	r3, #10
 8002e82:	d84d      	bhi.n	8002f20 <XPT2046_Touch_Calibrate+0x314>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8002e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e88:	4652      	mov	r2, sl
 8002e8a:	465b      	mov	r3, fp
 8002e8c:	f7fd fcba 	bl	8000804 <__aeabi_ddiv>
 8002e90:	4d37      	ldr	r5, [pc, #220]	; (8002f70 <XPT2046_Touch_Calibrate+0x364>)
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002e92:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8002e94:	e9c5 0100 	strd	r0, r1, [r5]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002e98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e9c:	465b      	mov	r3, fp
 8002e9e:	f7fd fcb1 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002ea2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8002ea4:	e9c5 0102 	strd	r0, r1, [r5, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002eac:	465b      	mov	r3, fp
 8002eae:	f7fd fca9 	bl	8000804 <__aeabi_ddiv>

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002eb2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8002eb4:	e9c5 0104 	strd	r0, r1, [r5, #16]
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ebc:	465b      	mov	r3, fp
 8002ebe:	f7fd fca1 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002ec2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8002ec4:	e9c5 0106 	strd	r0, r1, [r5, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002ecc:	465b      	mov	r3, fp
 8002ece:	f7fd fc99 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002ed2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8002ed4:	e9c5 0108 	strd	r0, r1, [r5, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002ed8:	465b      	mov	r3, fp
 8002eda:	4640      	mov	r0, r8
 8002edc:	4649      	mov	r1, r9
 8002ede:	f7fd fc91 	bl	8000804 <__aeabi_ddiv>


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002ee2:	2400      	movs	r4, #0
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	460f      	mov	r7, r1
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002ee8:	9400      	str	r4, [sp, #0]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8002eea:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

    pStr = "Calibrate Succeed";
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002eee:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002ef2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ef6:	22f0      	movs	r2, #240	; 0xf0
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fe f842 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002f00:	4623      	mov	r3, r4
 8002f02:	21a0      	movs	r1, #160	; 0xa0
 8002f04:	2034      	movs	r0, #52	; 0x34
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <XPT2046_Touch_Calibrate+0x368>)
 8002f08:	9500      	str	r5, [sp, #0]
 8002f0a:	f7fe f99f 	bl	800124c <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 8002f0e:	f24c 3350 	movw	r3, #50000	; 0xc350
    for (i = 0; i < ulCount; i++) {
 8002f12:	3401      	adds	r4, #1
 8002f14:	429c      	cmp	r4, r3
 8002f16:	d3fc      	bcc.n	8002f12 <XPT2046_Touch_Calibrate+0x306>

    return 1;
 8002f18:	2001      	movs	r0, #1
    XPT2046_DelayUS(300000);

    return 0;


}
 8002f1a:	b01b      	add	sp, #108	; 0x6c
 8002f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002f20:	2400      	movs	r4, #0
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002f22:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8002f26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f2a:	22f0      	movs	r2, #240	; 0xf0
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4620      	mov	r0, r4
 8002f30:	9400      	str	r4, [sp, #0]
 8002f32:	f7fe f827 	bl	8000f84 <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8002f36:	4623      	mov	r3, r4
 8002f38:	21a0      	movs	r1, #160	; 0xa0
 8002f3a:	2040      	movs	r0, #64	; 0x40
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <XPT2046_Touch_Calibrate+0x36c>)
 8002f3e:	9500      	str	r5, [sp, #0]
 8002f40:	f7fe f984 	bl	800124c <LCD_DrawString_Color>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 8002f44:	4623      	mov	r3, r4
 8002f46:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <XPT2046_Touch_Calibrate+0x370>)
 8002f48:	21b0      	movs	r1, #176	; 0xb0
 8002f4a:	2054      	movs	r0, #84	; 0x54
 8002f4c:	9500      	str	r5, [sp, #0]
 8002f4e:	f7fe f97d 	bl	800124c <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 8002f52:	4623      	mov	r3, r4
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <XPT2046_Touch_Calibrate+0x374>)
 8002f56:	3301      	adds	r3, #1
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d3fc      	bcc.n	8002f56 <XPT2046_Touch_Calibrate+0x34a>
    return 0;
 8002f5c:	2000      	movs	r0, #0
}
 8002f5e:	b01b      	add	sp, #108	; 0x6c
 8002f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f64:	08008c38 	.word	0x08008c38
 8002f68:	000186a0 	.word	0x000186a0
 8002f6c:	08008c50 	.word	0x08008c50
 8002f70:	20000008 	.word	0x20000008
 8002f74:	08008c54 	.word	0x08008c54
 8002f78:	08008c68 	.word	0x08008c68
 8002f7c:	08008c78 	.word	0x08008c78
 8002f80:	000493e0 	.word	0x000493e0

08002f84 <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	4683      	mov	fp, r0
    uint8_t ucRet = 1;

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8002f8c:	a801      	add	r0, sp, #4
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 8002f8e:	468a      	mov	sl, r1
    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8002f90:	f7ff fd8c 	bl	8002aac <XPT2046_ReadAdc_Smooth_XY>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d048      	beq.n	800302a <XPT2046_Get_TouchedPoint+0xa6>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002f98:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002f9c:	f7fd fa9e 	bl	80004dc <__aeabi_i2d>
 8002fa0:	4606      	mov	r6, r0
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fa2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fa6:	460f      	mov	r7, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fa8:	f7fd fa98 	bl	80004dc <__aeabi_i2d>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fac:	e9da 2300 	ldrd	r2, r3, [sl]
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	f7fd fafa 	bl	80005b0 <__aeabi_dmul>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fbc:	e9da 2302 	ldrd	r2, r3, [sl, #8]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fc0:	4680      	mov	r8, r0
 8002fc2:	4689      	mov	r9, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd faf2 	bl	80005b0 <__aeabi_dmul>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	f7fd f936 	bl	8000244 <__adddf3>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8002fd8:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8002fdc:	f7fd f932 	bl	8000244 <__adddf3>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fe0:	f7fd fdbe 	bl	8000b60 <__aeabi_d2uiz>
 8002fe4:	4603      	mov	r3, r0
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002fe6:	4639      	mov	r1, r7
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8002fe8:	f8ab 3000 	strh.w	r3, [fp]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002fec:	4630      	mov	r0, r6
 8002fee:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8002ff2:	f7fd fadd 	bl	80005b0 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4629      	mov	r1, r5
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8002ffe:	4614      	mov	r4, r2
 8003000:	461d      	mov	r5, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003002:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8003006:	f7fd fad3 	bl	80005b0 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f7fd f917 	bl	8000244 <__adddf3>
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003016:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800301a:	f7fd f913 	bl	8000244 <__adddf3>
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800301e:	f7fd fd9f 	bl	8000b60 <__aeabi_d2uiz>
 8003022:	4603      	mov	r3, r0
    uint8_t ucRet = 1;
 8003024:	2001      	movs	r0, #1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003026:	f8ab 3002 	strh.w	r3, [fp, #2]
    } else ucRet = 0;

    return ucRet;


}
 800302a:	b003      	add	sp, #12
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003032:	490d      	ldr	r1, [pc, #52]	; (8003068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003048:	4c0a      	ldr	r4, [pc, #40]	; (8003074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003056:	f7ff fccf 	bl	80029f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305a:	f001 ff2b 	bl	8004eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800305e:	f7ff fa0b 	bl	8002478 <main>
  bx lr
 8003062:	4770      	bx	lr
  ldr r0, =_sdata
 8003064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003068:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800306c:	080090f0 	.word	0x080090f0
  ldr r2, =_sbss
 8003070:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003074:	20000708 	.word	0x20000708

08003078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003078:	e7fe      	b.n	8003078 <ADC1_2_IRQHandler>
	...

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800307e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_InitTick+0x3c>)
{
 8003084:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003086:	7811      	ldrb	r1, [r2, #0]
 8003088:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_InitTick+0x40>)
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fbb2 f0f3 	udiv	r0, r2, r3
 8003094:	f000 fbf6 	bl	8003884 <HAL_SYSTICK_Config>
 8003098:	b908      	cbnz	r0, 800309e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309a:	2d0f      	cmp	r5, #15
 800309c:	d901      	bls.n	80030a2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800309e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80030a0:	bd38      	pop	{r3, r4, r5, pc}
 80030a2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a4:	4602      	mov	r2, r0
 80030a6:	4629      	mov	r1, r5
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ac:	f000 fb9e 	bl	80037ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_InitTick+0x44>)
 80030b2:	4620      	mov	r0, r4
 80030b4:	601d      	str	r5, [r3, #0]
}
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000038 	.word	0x20000038
 80030bc:	20000004 	.word	0x20000004
 80030c0:	2000003c 	.word	0x2000003c

080030c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x20>)
{
 80030c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d2:	f000 fb79 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d6:	200f      	movs	r0, #15
 80030d8:	f7ff ffd0 	bl	800307c <HAL_InitTick>
  HAL_MspInit();
 80030dc:	f7ff fb46 	bl	800276c <HAL_MspInit>
}
 80030e0:	2000      	movs	r0, #0
 80030e2:	bd08      	pop	{r3, pc}
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030e8:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <HAL_IncTick+0x10>)
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_IncTick+0x14>)
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	440b      	add	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	200006f4 	.word	0x200006f4
 80030fc:	20000038 	.word	0x20000038

08003100 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003100:	4b01      	ldr	r3, [pc, #4]	; (8003108 <HAL_GetTick+0x8>)
 8003102:	6818      	ldr	r0, [r3, #0]
}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200006f4 	.word	0x200006f4

0800310c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff fff6 	bl	8003100 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003114:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003116:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003118:	d002      	beq.n	8003120 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_Delay+0x20>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	1b40      	subs	r0, r0, r5
 8003126:	42a0      	cmp	r0, r4
 8003128:	d3fa      	bcc.n	8003120 <HAL_Delay+0x14>
  {
  }
}
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	20000038 	.word	0x20000038

08003130 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003134:	2500      	movs	r5, #0
{
 8003136:	b083      	sub	sp, #12
 8003138:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800313a:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800313c:	f7ff ffe0 	bl	8003100 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003140:	6833      	ldr	r3, [r6, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	05d7      	lsls	r7, r2, #23
 8003146:	d472      	bmi.n	800322e <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4607      	mov	r7, r0
 800314c:	05d5      	lsls	r5, r2, #23
 800314e:	d403      	bmi.n	8003158 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003152:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003156:	d01e      	beq.n	8003196 <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_ADC_PollForConversion+0x154>)
 800315a:	2002      	movs	r0, #2
 800315c:	681d      	ldr	r5, [r3, #0]
 800315e:	f001 fd6f 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_ADC_PollForConversion+0x158>)
 8003166:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003168:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800316c:	4211      	tst	r1, r2
 800316e:	d125      	bne.n	80031bc <HAL_ADC_PollForConversion+0x8c>
 8003170:	68d9      	ldr	r1, [r3, #12]
 8003172:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8003176:	4211      	tst	r1, r2
 8003178:	d120      	bne.n	80031bc <HAL_ADC_PollForConversion+0x8c>
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	4a43      	ldr	r2, [pc, #268]	; (800328c <HAL_ADC_PollForConversion+0x15c>)
 800317e:	4211      	tst	r1, r2
 8003180:	d17e      	bne.n	8003280 <HAL_ADC_PollForConversion+0x150>
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8003188:	4211      	tst	r1, r2
 800318a:	bf14      	ite	ne
 800318c:	2029      	movne	r0, #41	; 0x29
 800318e:	2014      	moveq	r0, #20
 8003190:	e01e      	b.n	80031d0 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 8003192:	1c60      	adds	r0, r4, #1
 8003194:	d154      	bne.n	8003240 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	0791      	lsls	r1, r2, #30
 800319a:	d5fa      	bpl.n	8003192 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800319c:	f06f 0212 	mvn.w	r2, #18
 80031a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031b4:	d055      	beq.n	8003262 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031b6:	2000      	movs	r0, #0
}
 80031b8:	b003      	add	sp, #12
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031bc:	6919      	ldr	r1, [r3, #16]
 80031be:	4a33      	ldr	r2, [pc, #204]	; (800328c <HAL_ADC_PollForConversion+0x15c>)
 80031c0:	4211      	tst	r1, r2
 80031c2:	d12a      	bne.n	800321a <HAL_ADC_PollForConversion+0xea>
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80031ca:	4211      	tst	r1, r2
 80031cc:	d125      	bne.n	800321a <HAL_ADC_PollForConversion+0xea>
 80031ce:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80031d0:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031d4:	9a01      	ldr	r2, [sp, #4]
 80031d6:	4295      	cmp	r5, r2
 80031d8:	d809      	bhi.n	80031ee <HAL_ADC_PollForConversion+0xbe>
 80031da:	e7df      	b.n	800319c <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031dc:	9b01      	ldr	r3, [sp, #4]
 80031de:	42ab      	cmp	r3, r5
 80031e0:	d311      	bcc.n	8003206 <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 80031e2:	9b01      	ldr	r3, [sp, #4]
 80031e4:	3301      	adds	r3, #1
 80031e6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031e8:	9b01      	ldr	r3, [sp, #4]
 80031ea:	42ab      	cmp	r3, r5
 80031ec:	d237      	bcs.n	800325e <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 80031ee:	1c62      	adds	r2, r4, #1
 80031f0:	d0f7      	beq.n	80031e2 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031f2:	2c00      	cmp	r4, #0
 80031f4:	d0f2      	beq.n	80031dc <HAL_ADC_PollForConversion+0xac>
 80031f6:	f7ff ff83 	bl	8003100 <HAL_GetTick>
 80031fa:	1bc0      	subs	r0, r0, r7
 80031fc:	42a0      	cmp	r0, r4
 80031fe:	d9f0      	bls.n	80031e2 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003200:	9b01      	ldr	r3, [sp, #4]
 8003202:	42ab      	cmp	r3, r5
 8003204:	d2ed      	bcs.n	80031e2 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 8003206:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8003208:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800320a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800320c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8003216:	b003      	add	sp, #12
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800321a:	6919      	ldr	r1, [r3, #16]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_ADC_PollForConversion+0x160>)
 800321e:	4211      	tst	r1, r2
 8003220:	d114      	bne.n	800324c <HAL_ADC_PollForConversion+0x11c>
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	4211      	tst	r1, r2
 8003226:	bf14      	ite	ne
 8003228:	20fc      	movne	r0, #252	; 0xfc
 800322a:	2054      	moveq	r0, #84	; 0x54
 800322c:	e7d0      	b.n	80031d0 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 800322e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8003232:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	f043 0320 	orr.w	r3, r3, #32
 800323a:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800323c:	b003      	add	sp, #12
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003240:	b934      	cbnz	r4, 8003250 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	f012 0202 	ands.w	r2, r2, #2
 8003248:	d1a5      	bne.n	8003196 <HAL_ADC_PollForConversion+0x66>
 800324a:	e7dd      	b.n	8003208 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800324c:	20fc      	movs	r0, #252	; 0xfc
 800324e:	e7bf      	b.n	80031d0 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003250:	f7ff ff56 	bl	8003100 <HAL_GetTick>
 8003254:	1bc3      	subs	r3, r0, r7
 8003256:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003258:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800325a:	d99c      	bls.n	8003196 <HAL_ADC_PollForConversion+0x66>
 800325c:	e7f1      	b.n	8003242 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800325e:	6833      	ldr	r3, [r6, #0]
 8003260:	e79c      	b.n	800319c <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003262:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003264:	2800      	cmp	r0, #0
 8003266:	d1a6      	bne.n	80031b6 <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003268:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800326a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003270:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003272:	04db      	lsls	r3, r3, #19
 8003274:	d49f      	bmi.n	80031b6 <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003276:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	62b3      	str	r3, [r6, #40]	; 0x28
 800327e:	e79b      	b.n	80031b8 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003280:	2029      	movs	r0, #41	; 0x29
 8003282:	e7a5      	b.n	80031d0 <HAL_ADC_PollForConversion+0xa0>
 8003284:	20000004 	.word	0x20000004
 8003288:	24924924 	.word	0x24924924
 800328c:	12492492 	.word	0x12492492
 8003290:	00249249 	.word	0x00249249

08003294 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800329c:	2300      	movs	r3, #0
{ 
 800329e:	b530      	push	{r4, r5, lr}
 80032a0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80032a2:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032a4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d074      	beq.n	8003396 <HAL_ADC_ConfigChannel+0xfa>
 80032ac:	2301      	movs	r3, #1
 80032ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032b2:	684b      	ldr	r3, [r1, #4]
 80032b4:	4602      	mov	r2, r0
 80032b6:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032b8:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80032ba:	d932      	bls.n	8003322 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032bc:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80032c2:	d84e      	bhi.n	8003362 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032c4:	f04f 0c1f 	mov.w	ip, #31
 80032c8:	6808      	ldr	r0, [r1, #0]
 80032ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80032cc:	3b23      	subs	r3, #35	; 0x23
 80032ce:	fa00 fe03 	lsl.w	lr, r0, r3
 80032d2:	fa0c f303 	lsl.w	r3, ip, r3
 80032d6:	ea25 0303 	bic.w	r3, r5, r3
 80032da:	ea43 030e 	orr.w	r3, r3, lr
 80032de:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032e0:	2809      	cmp	r0, #9
 80032e2:	d930      	bls.n	8003346 <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032e4:	f04f 0c07 	mov.w	ip, #7
 80032e8:	688d      	ldr	r5, [r1, #8]
 80032ea:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	391e      	subs	r1, #30
 80032f2:	408d      	lsls	r5, r1
 80032f4:	fa0c f101 	lsl.w	r1, ip, r1
 80032f8:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032fc:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003300:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003302:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003304:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003306:	d844      	bhi.n	8003392 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_ADC_ConfigChannel+0x128>)
 800330a:	429c      	cmp	r4, r3
 800330c:	d038      	beq.n	8003380 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 800330e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003312:	f043 0320 	orr.w	r3, r3, #32
 8003316:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003318:	2300      	movs	r3, #0
 800331a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800331e:	b003      	add	sp, #12
 8003320:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003322:	f04f 0c1f 	mov.w	ip, #31
 8003326:	6808      	ldr	r0, [r1, #0]
 8003328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800332c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800332e:	3b05      	subs	r3, #5
 8003330:	fa00 fe03 	lsl.w	lr, r0, r3
 8003334:	fa0c f303 	lsl.w	r3, ip, r3
 8003338:	ea25 0303 	bic.w	r3, r5, r3
 800333c:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003340:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003342:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003344:	d8ce      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003346:	2507      	movs	r5, #7
 8003348:	6889      	ldr	r1, [r1, #8]
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003350:	4081      	lsls	r1, r0
 8003352:	fa05 f000 	lsl.w	r0, r5, r0
 8003356:	ea23 0300 	bic.w	r3, r3, r0
 800335a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800335e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003360:	e7da      	b.n	8003318 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003362:	f04f 0c1f 	mov.w	ip, #31
 8003366:	6808      	ldr	r0, [r1, #0]
 8003368:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800336a:	3b41      	subs	r3, #65	; 0x41
 800336c:	fa00 fe03 	lsl.w	lr, r0, r3
 8003370:	fa0c f303 	lsl.w	r3, ip, r3
 8003374:	ea25 0303 	bic.w	r3, r5, r3
 8003378:	ea43 030e 	orr.w	r3, r3, lr
 800337c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800337e:	e7af      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003380:	68a3      	ldr	r3, [r4, #8]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	d405      	bmi.n	8003392 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003386:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003388:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800338a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800338e:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003390:	d004      	beq.n	800339c <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003392:	2000      	movs	r0, #0
 8003394:	e7c0      	b.n	8003318 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8003396:	2002      	movs	r0, #2
}
 8003398:	b003      	add	sp, #12
 800339a:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_ADC_ConfigChannel+0x12c>)
 800339e:	490b      	ldr	r1, [pc, #44]	; (80033cc <HAL_ADC_ConfigChannel+0x130>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fba1 1303 	umull	r1, r3, r1, r3
 80033a6:	0c9b      	lsrs	r3, r3, #18
 80033a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ed      	beq.n	8003392 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80033b6:	9b01      	ldr	r3, [sp, #4]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80033bc:	9b01      	ldr	r3, [sp, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f9      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x11a>
 80033c2:	e7e6      	b.n	8003392 <HAL_ADC_ConfigChannel+0xf6>
 80033c4:	40012400 	.word	0x40012400
 80033c8:	20000004 	.word	0x20000004
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80033d0:	2300      	movs	r3, #0
{
 80033d2:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033d4:	6802      	ldr	r2, [r0, #0]
{
 80033d6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80033d8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033da:	6893      	ldr	r3, [r2, #8]
 80033dc:	07d9      	lsls	r1, r3, #31
 80033de:	d427      	bmi.n	8003430 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <ADC_Enable+0x80>)
 80033e2:	4604      	mov	r4, r0
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	481b      	ldr	r0, [pc, #108]	; (8003454 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80033e8:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ea:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80033ee:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033f2:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80033f4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033f6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80033f8:	9b01      	ldr	r3, [sp, #4]
 80033fa:	b12b      	cbz	r3, 8003408 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003402:	9b01      	ldr	r3, [sp, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003408:	f7ff fe7a 	bl	8003100 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800340c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800340e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	07da      	lsls	r2, r3, #31
 8003414:	d40c      	bmi.n	8003430 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003416:	f7ff fe73 	bl	8003100 <HAL_GetTick>
 800341a:	1b43      	subs	r3, r0, r5
 800341c:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800341e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003420:	d903      	bls.n	800342a <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	f012 0201 	ands.w	r2, r2, #1
 8003428:	d005      	beq.n	8003436 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	07db      	lsls	r3, r3, #31
 800342e:	d5f2      	bpl.n	8003416 <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003430:	2000      	movs	r0, #0
}
 8003432:	b003      	add	sp, #12
 8003434:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8003436:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800343a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	f043 0310 	orr.w	r3, r3, #16
 8003442:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003446:	4303      	orrs	r3, r0
 8003448:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800344a:	b003      	add	sp, #12
 800344c:	bd30      	pop	{r4, r5, pc}
 800344e:	bf00      	nop
 8003450:	20000004 	.word	0x20000004
 8003454:	431bde83 	.word	0x431bde83

08003458 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003458:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800345c:	2b01      	cmp	r3, #1
 800345e:	d038      	beq.n	80034d2 <HAL_ADC_Start+0x7a>
 8003460:	2301      	movs	r3, #1
{
 8003462:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003464:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003468:	4604      	mov	r4, r0
 800346a:	f7ff ffb1 	bl	80033d0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800346e:	bb60      	cbnz	r0, 80034ca <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8003470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	4929      	ldr	r1, [pc, #164]	; (800351c <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003482:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8003484:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003486:	d026      	beq.n	80034d6 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003488:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800348a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800348e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003490:	6853      	ldr	r3, [r2, #4]
 8003492:	0559      	lsls	r1, r3, #21
 8003494:	d42b      	bmi.n	80034ee <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8003498:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800349e:	bf18      	it	ne
 80034a0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80034a2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034a6:	bf18      	it	ne
 80034a8:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80034ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80034ae:	f06f 0302 	mvn.w	r3, #2
 80034b2:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034b4:	6893      	ldr	r3, [r2, #8]
 80034b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034be:	d01d      	beq.n	80034fc <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034c0:	6893      	ldr	r3, [r2, #8]
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	6093      	str	r3, [r2, #8]
}
 80034c8:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80034ca:	2300      	movs	r3, #0
 80034cc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80034d0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80034d2:	2002      	movs	r0, #2
}
 80034d4:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_ADC_Start+0xc8>)
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80034de:	d0d3      	beq.n	8003488 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80034e6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	055b      	lsls	r3, r3, #21
 80034ec:	d5d3      	bpl.n	8003496 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034fa:	e7cc      	b.n	8003496 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_ADC_Start+0xc4>)
 80034fe:	429a      	cmp	r2, r3
 8003500:	d004      	beq.n	800350c <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003502:	6893      	ldr	r3, [r2, #8]
 8003504:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8003508:	6093      	str	r3, [r2, #8]
}
 800350a:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800350c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003510:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003512:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003516:	d1d3      	bne.n	80034c0 <HAL_ADC_Start+0x68>
 8003518:	e7f3      	b.n	8003502 <HAL_ADC_Start+0xaa>
 800351a:	bf00      	nop
 800351c:	40012800 	.word	0x40012800
 8003520:	40012400 	.word	0x40012400

08003524 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003524:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	07d4      	lsls	r4, r2, #31
 800352c:	d401      	bmi.n	8003532 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800352e:	2000      	movs	r0, #0
}
 8003530:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003532:	4604      	mov	r4, r0
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800353c:	f7ff fde0 	bl	8003100 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003540:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003542:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	07d9      	lsls	r1, r3, #31
 8003548:	d5f1      	bpl.n	800352e <ADC_ConversionStop_Disable+0xa>
 800354a:	e002      	b.n	8003552 <ADC_ConversionStop_Disable+0x2e>
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	07db      	lsls	r3, r3, #31
 8003550:	d5ed      	bpl.n	800352e <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003552:	f7ff fdd5 	bl	8003100 <HAL_GetTick>
 8003556:	1b43      	subs	r3, r0, r5
 8003558:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 800355a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800355c:	d9f6      	bls.n	800354c <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	07d2      	lsls	r2, r2, #31
 8003562:	d5f3      	bpl.n	800354c <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003568:	f043 0310 	orr.w	r3, r3, #16
 800356c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003570:	4303      	orrs	r3, r0
 8003572:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop

08003578 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003578:	2800      	cmp	r0, #0
 800357a:	d075      	beq.n	8003668 <HAL_ADC_Init+0xf0>
{
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 800357e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003580:	4604      	mov	r4, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d052      	beq.n	800362c <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003586:	4620      	mov	r0, r4
 8003588:	f7ff ffcc 	bl	8003524 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800358c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800358e:	f013 0310 	ands.w	r3, r3, #16
 8003592:	d145      	bne.n	8003620 <HAL_ADC_Init+0xa8>
 8003594:	2800      	cmp	r0, #0
 8003596:	d143      	bne.n	8003620 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8003598:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800359a:	4d4a      	ldr	r5, [pc, #296]	; (80036c4 <HAL_ADC_Init+0x14c>)
 800359c:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800359e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80035a2:	f021 0102 	bic.w	r1, r1, #2
 80035a6:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035aa:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 80035ac:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035ae:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035b0:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035b2:	d053      	beq.n	800365c <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035b4:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035b6:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80035ba:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035bc:	68a5      	ldr	r5, [r4, #8]
 80035be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80035c2:	d039      	beq.n	8003638 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c4:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035c8:	2d01      	cmp	r5, #1
 80035ca:	bf0c      	ite	eq
 80035cc:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 80035d0:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d4:	f1be 0f01 	cmp.w	lr, #1
 80035d8:	d052      	beq.n	8003680 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 80035da:	6856      	ldr	r6, [r2, #4]
 80035dc:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80035e0:	ea46 060c 	orr.w	r6, r6, ip
 80035e4:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80035e6:	6897      	ldr	r7, [r2, #8]
 80035e8:	4e37      	ldr	r6, [pc, #220]	; (80036c8 <HAL_ADC_Init+0x150>)
 80035ea:	403e      	ands	r6, r7
 80035ec:	430e      	orrs	r6, r1
 80035ee:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035f0:	2d01      	cmp	r5, #1
 80035f2:	d02f      	beq.n	8003654 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 80035f4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80035f6:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 80035fa:	ea4c 0303 	orr.w	r3, ip, r3
 80035fe:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_ADC_Init+0x154>)
 8003604:	4013      	ands	r3, r2
 8003606:	4299      	cmp	r1, r3
 8003608:	d030      	beq.n	800366c <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 800360a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800360c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800360e:	f023 0312 	bic.w	r3, r3, #18
 8003612:	f043 0310 	orr.w	r3, r3, #16
 8003616:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800361a:	4303      	orrs	r3, r0
 800361c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003622:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800362c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800362e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003632:	f7ff f8bd 	bl	80027b0 <HAL_ADC_MspInit>
 8003636:	e7a6      	b.n	8003586 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003638:	7d27      	ldrb	r7, [r4, #20]
 800363a:	2f01      	cmp	r7, #1
 800363c:	d01f      	beq.n	800367e <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 800363e:	6853      	ldr	r3, [r2, #4]
 8003640:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800364a:	6895      	ldr	r5, [r2, #8]
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_ADC_Init+0x150>)
 800364e:	402b      	ands	r3, r5
 8003650:	430b      	orrs	r3, r1
 8003652:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	3b01      	subs	r3, #1
 8003658:	051b      	lsls	r3, r3, #20
 800365a:	e7cb      	b.n	80035f4 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800365c:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8003660:	bf08      	it	eq
 8003662:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8003666:	e7a5      	b.n	80035b4 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8003668:	2001      	movs	r0, #1
}
 800366a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800366c:	2300      	movs	r3, #0
 800366e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800367e:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003680:	b1c6      	cbz	r6, 80036b4 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003684:	f046 0620 	orr.w	r6, r6, #32
 8003688:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800368c:	f046 0601 	orr.w	r6, r6, #1
 8003690:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8003692:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003694:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003698:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800369c:	ea46 060c 	orr.w	r6, r6, ip
 80036a0:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80036a2:	6897      	ldr	r7, [r2, #8]
 80036a4:	4e08      	ldr	r6, [pc, #32]	; (80036c8 <HAL_ADC_Init+0x150>)
 80036a6:	ea06 0607 	and.w	r6, r6, r7
 80036aa:	ea46 0601 	orr.w	r6, r6, r1
 80036ae:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036b0:	d19e      	bne.n	80035f0 <HAL_ADC_Init+0x78>
 80036b2:	e7cf      	b.n	8003654 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80036b4:	69a6      	ldr	r6, [r4, #24]
 80036b6:	3e01      	subs	r6, #1
 80036b8:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 80036bc:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 80036c0:	e7e7      	b.n	8003692 <HAL_ADC_Init+0x11a>
 80036c2:	bf00      	nop
 80036c4:	40013c00 	.word	0x40013c00
 80036c8:	ffe1f7fd 	.word	0xffe1f7fd
 80036cc:	ff1f0efe 	.word	0xff1f0efe

080036d0 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80036d0:	2300      	movs	r3, #0
{
 80036d2:	b570      	push	{r4, r5, r6, lr}
 80036d4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80036d6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d05f      	beq.n	80037a0 <HAL_ADCEx_Calibration_Start+0xd0>
 80036e0:	2301      	movs	r3, #1
 80036e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036e6:	4604      	mov	r4, r0
 80036e8:	f7ff ff1c 	bl	8003524 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036ec:	4605      	mov	r5, r0
 80036ee:	b128      	cbz	r0, 80036fc <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f0:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 80036f2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 80036f4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80036f8:	b002      	add	sp, #8
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80036fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003704:	f023 0302 	bic.w	r3, r3, #2
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800370e:	2002      	movs	r0, #2
 8003710:	6816      	ldr	r6, [r2, #0]
 8003712:	f001 fa95 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003716:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800371a:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 800371c:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 800371e:	9b01      	ldr	r3, [sp, #4]
 8003720:	b12b      	cbz	r3, 800372e <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	3b01      	subs	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff fe4e 	bl	80033d0 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6893      	ldr	r3, [r2, #8]
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800373e:	f7ff fcdf 	bl	8003100 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003742:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8003744:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	0711      	lsls	r1, r2, #28
 800374a:	d50b      	bpl.n	8003764 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800374c:	f7ff fcd8 	bl	8003100 <HAL_GetTick>
 8003750:	1b83      	subs	r3, r0, r6
 8003752:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003754:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003756:	d902      	bls.n	800375e <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	0712      	lsls	r2, r2, #28
 800375c:	d424      	bmi.n	80037a8 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	0710      	lsls	r0, r2, #28
 8003762:	d4f3      	bmi.n	800374c <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	f042 0204 	orr.w	r2, r2, #4
 800376a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800376c:	f7ff fcc8 	bl	8003100 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003770:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8003772:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0759      	lsls	r1, r3, #29
 8003778:	d50b      	bpl.n	8003792 <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800377a:	f7ff fcc1 	bl	8003100 <HAL_GetTick>
 800377e:	1b83      	subs	r3, r0, r6
 8003780:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003782:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003784:	d902      	bls.n	800378c <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	0752      	lsls	r2, r2, #29
 800378a:	d40d      	bmi.n	80037a8 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	075b      	lsls	r3, r3, #29
 8003790:	d4f3      	bmi.n	800377a <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8003792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	62a3      	str	r3, [r4, #40]	; 0x28
 800379e:	e7a7      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80037a0:	2502      	movs	r5, #2
}
 80037a2:	4628      	mov	r0, r5
 80037a4:	b002      	add	sp, #8
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 80037a8:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 80037aa:	2200      	movs	r2, #0
}
 80037ac:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 80037ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80037b0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 80037b4:	f023 0312 	bic.w	r3, r3, #18
 80037b8:	f043 0310 	orr.w	r3, r3, #16
 80037bc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80037be:	b002      	add	sp, #8
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	bf00      	nop
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4906      	ldr	r1, [pc, #24]	; (80037e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037ce:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80037e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ee:	b500      	push	{lr}
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f6:	f1c3 0e07 	rsb	lr, r3, #7
 80037fa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003802:	bf28      	it	cs
 8003804:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003808:	f1bc 0f06 	cmp.w	ip, #6
 800380c:	d91b      	bls.n	8003846 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800380e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003812:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	fa0c fc03 	lsl.w	ip, ip, r3
 8003818:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003820:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003824:	ea21 010c 	bic.w	r1, r1, ip
 8003828:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800382a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003830:	db0c      	blt.n	800384c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	0109      	lsls	r1, r1, #4
 8003834:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003838:	b2c9      	uxtb	r1, r1
 800383a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800383e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003842:	f85d fb04 	ldr.w	pc, [sp], #4
 8003846:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003848:	4613      	mov	r3, r2
 800384a:	e7e7      	b.n	800381c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_NVIC_SetPriority+0x78>)
 800384e:	f000 000f 	and.w	r0, r0, #15
 8003852:	0109      	lsls	r1, r1, #4
 8003854:	b2c9      	uxtb	r1, r1
 8003856:	4403      	add	r3, r0
 8003858:	7619      	strb	r1, [r3, #24]
 800385a:	f85d fb04 	ldr.w	pc, [sp], #4
 800385e:	bf00      	nop
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	e000ecfc 	.word	0xe000ecfc

08003868 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003868:	2800      	cmp	r0, #0
 800386a:	db07      	blt.n	800387c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386c:	2301      	movs	r3, #1
 800386e:	f000 011f 	and.w	r1, r0, #31
 8003872:	4a03      	ldr	r2, [pc, #12]	; (8003880 <HAL_NVIC_EnableIRQ+0x18>)
 8003874:	0940      	lsrs	r0, r0, #5
 8003876:	408b      	lsls	r3, r1
 8003878:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	3801      	subs	r0, #1
 8003886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800388a:	d20f      	bcs.n	80038ac <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003890:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003896:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003898:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	4c05      	ldr	r4, [pc, #20]	; (80038b0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80038a6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a8:	6119      	str	r1, [r3, #16]
 80038aa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038ac:	2001      	movs	r0, #1
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b8:	680e      	ldr	r6, [r1, #0]
{
 80038ba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038bc:	2e00      	cmp	r6, #0
 80038be:	f000 80be 	beq.w	8003a3e <HAL_GPIO_Init+0x18a>
 80038c2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038c4:	4f85      	ldr	r7, [pc, #532]	; (8003adc <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 80038c6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80038c8:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038ca:	4d85      	ldr	r5, [pc, #532]	; (8003ae0 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 80038cc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8003ae4 <HAL_GPIO_Init+0x230>
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80038d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80038d8:	f102 0204 	add.w	r2, r2, #4
 80038dc:	f000 80af 	beq.w	8003a3e <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 80038e0:	2401      	movs	r4, #1
 80038e2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80038e4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80038ec:	d1f1      	bne.n	80038d2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80038ee:	684e      	ldr	r6, [r1, #4]
 80038f0:	2e12      	cmp	r6, #18
 80038f2:	f200 80a7 	bhi.w	8003a44 <HAL_GPIO_Init+0x190>
 80038f6:	2e12      	cmp	r6, #18
 80038f8:	d81a      	bhi.n	8003930 <HAL_GPIO_Init+0x7c>
 80038fa:	e8df f006 	tbb	[pc, r6]
 80038fe:	c2b0      	.short	0xc2b0
 8003900:	1919d7be 	.word	0x1919d7be
 8003904:	19191919 	.word	0x19191919
 8003908:	19191919 	.word	0x19191919
 800390c:	ba191919 	.word	0xba191919
 8003910:	c5          	.byte	0xc5
 8003911:	00          	.byte	0x00
 8003912:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003ae8 <HAL_GPIO_Init+0x234>
 8003916:	4576      	cmp	r6, lr
 8003918:	f000 80a1 	beq.w	8003a5e <HAL_GPIO_Init+0x1aa>
 800391c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003920:	4576      	cmp	r6, lr
 8003922:	f000 809c 	beq.w	8003a5e <HAL_GPIO_Init+0x1aa>
 8003926:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800392a:	4576      	cmp	r6, lr
 800392c:	f000 8097 	beq.w	8003a5e <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003930:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003934:	bf9c      	itt	ls
 8003936:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003938:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800393a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800393e:	bf84      	itt	hi
 8003940:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003944:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003948:	f8de 4000 	ldr.w	r4, [lr]
 800394c:	fa0a f90b 	lsl.w	r9, sl, fp
 8003950:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003954:	ea24 040b 	bic.w	r4, r4, fp
 8003958:	ea44 0409 	orr.w	r4, r4, r9
 800395c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003960:	684c      	ldr	r4, [r1, #4]
 8003962:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003966:	f000 8082 	beq.w	8003a6e <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800396a:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800396e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003972:	f04e 0e01 	orr.w	lr, lr, #1
 8003976:	f8c7 e018 	str.w	lr, [r7, #24]
 800397a:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800397e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003982:	f00e 0e01 	and.w	lr, lr, #1
 8003986:	f8cd e004 	str.w	lr, [sp, #4]
 800398a:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800398e:	f023 0e03 	bic.w	lr, r3, #3
 8003992:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003996:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800399a:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800399e:	fa06 f609 	lsl.w	r6, r6, r9
 80039a2:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039a6:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003aec <HAL_GPIO_Init+0x238>
 80039aa:	4558      	cmp	r0, fp
 80039ac:	d01b      	beq.n	80039e6 <HAL_GPIO_Init+0x132>
 80039ae:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80039b2:	4558      	cmp	r0, fp
 80039b4:	d073      	beq.n	8003a9e <HAL_GPIO_Init+0x1ea>
 80039b6:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003af0 <HAL_GPIO_Init+0x23c>
 80039ba:	4558      	cmp	r0, fp
 80039bc:	d068      	beq.n	8003a90 <HAL_GPIO_Init+0x1dc>
 80039be:	f8df b134 	ldr.w	fp, [pc, #308]	; 8003af4 <HAL_GPIO_Init+0x240>
 80039c2:	4558      	cmp	r0, fp
 80039c4:	d07c      	beq.n	8003ac0 <HAL_GPIO_Init+0x20c>
 80039c6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003af8 <HAL_GPIO_Init+0x244>
 80039ca:	4558      	cmp	r0, fp
 80039cc:	d07f      	beq.n	8003ace <HAL_GPIO_Init+0x21a>
 80039ce:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003afc <HAL_GPIO_Init+0x248>
 80039d2:	4558      	cmp	r0, fp
 80039d4:	bf0c      	ite	eq
 80039d6:	f04f 0b05 	moveq.w	fp, #5
 80039da:	f04f 0b06 	movne.w	fp, #6
 80039de:	fa0b f909 	lsl.w	r9, fp, r9
 80039e2:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80039e6:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80039ea:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80039f0:	bf14      	ite	ne
 80039f2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039f6:	ea26 060c 	biceq.w	r6, r6, ip
 80039fa:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80039fc:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003a02:	bf14      	ite	ne
 8003a04:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a08:	ea26 060c 	biceq.w	r6, r6, ip
 8003a0c:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a0e:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a10:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a14:	bf14      	ite	ne
 8003a16:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a1a:	ea26 060c 	biceq.w	r6, r6, ip
 8003a1e:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a20:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a24:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a26:	d01f      	beq.n	8003a68 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a28:	ea44 040c 	orr.w	r4, r4, ip
 8003a2c:	60ec      	str	r4, [r5, #12]
 8003a2e:	680e      	ldr	r6, [r1, #0]
	position++;
 8003a30:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a32:	fa36 f403 	lsrs.w	r4, r6, r3
 8003a36:	f102 0204 	add.w	r2, r2, #4
 8003a3a:	f47f af51 	bne.w	80038e0 <HAL_GPIO_Init+0x2c>
  }
}
 8003a3e:	b003      	add	sp, #12
 8003a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003a44:	4546      	cmp	r6, r8
 8003a46:	d00a      	beq.n	8003a5e <HAL_GPIO_Init+0x1aa>
 8003a48:	f67f af63 	bls.w	8003912 <HAL_GPIO_Init+0x5e>
 8003a4c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003b00 <HAL_GPIO_Init+0x24c>
 8003a50:	4576      	cmp	r6, lr
 8003a52:	d004      	beq.n	8003a5e <HAL_GPIO_Init+0x1aa>
 8003a54:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003a58:	4576      	cmp	r6, lr
 8003a5a:	f47f af69 	bne.w	8003930 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a5e:	688e      	ldr	r6, [r1, #8]
 8003a60:	bb3e      	cbnz	r6, 8003ab2 <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a62:	f04f 0a04 	mov.w	sl, #4
 8003a66:	e763      	b.n	8003930 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a68:	ea24 040c 	bic.w	r4, r4, ip
 8003a6c:	60ec      	str	r4, [r5, #12]
 8003a6e:	680e      	ldr	r6, [r1, #0]
 8003a70:	e72f      	b.n	80038d2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a72:	68cc      	ldr	r4, [r1, #12]
 8003a74:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003a78:	e75a      	b.n	8003930 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a7a:	68cc      	ldr	r4, [r1, #12]
 8003a7c:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003a80:	e756      	b.n	8003930 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a82:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003a86:	e753      	b.n	8003930 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a88:	68cc      	ldr	r4, [r1, #12]
 8003a8a:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003a8e:	e74f      	b.n	8003930 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a90:	f04f 0b02 	mov.w	fp, #2
 8003a94:	fa0b f909 	lsl.w	r9, fp, r9
 8003a98:	ea46 0609 	orr.w	r6, r6, r9
 8003a9c:	e7a3      	b.n	80039e6 <HAL_GPIO_Init+0x132>
 8003a9e:	f04f 0b01 	mov.w	fp, #1
 8003aa2:	fa0b f909 	lsl.w	r9, fp, r9
 8003aa6:	ea46 0609 	orr.w	r6, r6, r9
 8003aaa:	e79c      	b.n	80039e6 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8003aac:	f04f 0a00 	mov.w	sl, #0
 8003ab0:	e73e      	b.n	8003930 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ab2:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ab4:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003ab8:	bf0c      	ite	eq
 8003aba:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003abc:	6144      	strne	r4, [r0, #20]
 8003abe:	e737      	b.n	8003930 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ac0:	f04f 0b03 	mov.w	fp, #3
 8003ac4:	fa0b f909 	lsl.w	r9, fp, r9
 8003ac8:	ea46 0609 	orr.w	r6, r6, r9
 8003acc:	e78b      	b.n	80039e6 <HAL_GPIO_Init+0x132>
 8003ace:	f04f 0b04 	mov.w	fp, #4
 8003ad2:	fa0b f909 	lsl.w	r9, fp, r9
 8003ad6:	ea46 0609 	orr.w	r6, r6, r9
 8003ada:	e784      	b.n	80039e6 <HAL_GPIO_Init+0x132>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40010400 	.word	0x40010400
 8003ae4:	10220000 	.word	0x10220000
 8003ae8:	10120000 	.word	0x10120000
 8003aec:	40010800 	.word	0x40010800
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	40011800 	.word	0x40011800
 8003afc:	40011c00 	.word	0x40011c00
 8003b00:	10310000 	.word	0x10310000

08003b04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b04:	6883      	ldr	r3, [r0, #8]
 8003b06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003b08:	bf14      	ite	ne
 8003b0a:	2001      	movne	r0, #1
 8003b0c:	2000      	moveq	r0, #0
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b10:	b902      	cbnz	r2, 8003b14 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b12:	0409      	lsls	r1, r1, #16
 8003b14:	6101      	str	r1, [r0, #16]
  }
}
 8003b16:	4770      	bx	lr

08003b18 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003b1e:	6951      	ldr	r1, [r2, #20]
 8003b20:	4201      	tst	r1, r0
 8003b22:	d100      	bne.n	8003b26 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003b24:	4770      	bx	lr
{
 8003b26:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b28:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b2a:	f7ff fff5 	bl	8003b18 <HAL_GPIO_EXTI_Callback>
}
 8003b2e:	bd08      	pop	{r3, pc}
 8003b30:	40010400 	.word	0x40010400

08003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b38:	4680      	mov	r8, r0
 8003b3a:	460e      	mov	r6, r1
 8003b3c:	4617      	mov	r7, r2
 8003b3e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b40:	f8d8 4000 	ldr.w	r4, [r8]
 8003b44:	e004      	b.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b46:	6965      	ldr	r5, [r4, #20]
 8003b48:	056a      	lsls	r2, r5, #21
 8003b4a:	d409      	bmi.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	1c7b      	adds	r3, r7, #1
 8003b4e:	d121      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b50:	6960      	ldr	r0, [r4, #20]
 8003b52:	ea26 0000 	bic.w	r0, r6, r0
 8003b56:	b280      	uxth	r0, r0
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1f4      	bne.n	8003b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b60:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b66:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8003b6a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b70:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b72:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b80:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003b84:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 8003b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7ff fab4 	bl	8003100 <HAL_GetTick>
 8003b98:	eba0 0009 	sub.w	r0, r0, r9
 8003b9c:	42b8      	cmp	r0, r7
 8003b9e:	d801      	bhi.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8003ba0:	2f00      	cmp	r7, #0
 8003ba2:	d1cd      	bne.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003bbe:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003bc6:	e7c9      	b.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	4606      	mov	r6, r0
 8003bcc:	460d      	mov	r5, r1
 8003bce:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd0:	e008      	b.n	8003be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd2:	6962      	ldr	r2, [r4, #20]
 8003bd4:	06d2      	lsls	r2, r2, #27
 8003bd6:	d41b      	bmi.n	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7ff fa92 	bl	8003100 <HAL_GetTick>
 8003bdc:	1bc0      	subs	r0, r0, r7
 8003bde:	42a8      	cmp	r0, r5
 8003be0:	d807      	bhi.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8003be2:	b135      	cbz	r5, 8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	6834      	ldr	r4, [r6, #0]
 8003be6:	6963      	ldr	r3, [r4, #20]
 8003be8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003bec:	d0f1      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003bee:	2000      	movs	r0, #0
}
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c02:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 8003c0a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c10:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c16:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c22:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c24:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c2a:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2e:	bf00      	nop

08003c30 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	4605      	mov	r5, r0
 8003c34:	460e      	mov	r6, r1
 8003c36:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c38:	682c      	ldr	r4, [r5, #0]
 8003c3a:	e001      	b.n	8003c40 <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003c3c:	1c73      	adds	r3, r6, #1
 8003c3e:	d119      	bne.n	8003c74 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c40:	6963      	ldr	r3, [r4, #20]
 8003c42:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003c46:	d113      	bne.n	8003c70 <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c48:	6960      	ldr	r0, [r4, #20]
 8003c4a:	0542      	lsls	r2, r0, #21
 8003c4c:	d5f6      	bpl.n	8003c3c <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c54:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c60:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c62:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c66:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003c70:	2000      	movs	r0, #0
}
 8003c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7ff fa44 	bl	8003100 <HAL_GetTick>
 8003c78:	1bc0      	subs	r0, r0, r7
 8003c7a:	42b0      	cmp	r0, r6
 8003c7c:	d801      	bhi.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	d1da      	bne.n	8003c38 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c92:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c96:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003c9a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	460e      	mov	r6, r1
 8003ca6:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca8:	682c      	ldr	r4, [r5, #0]
 8003caa:	e001      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	1c73      	adds	r3, r6, #1
 8003cae:	d119      	bne.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb0:	6963      	ldr	r3, [r4, #20]
 8003cb2:	f013 0304 	ands.w	r3, r3, #4
 8003cb6:	d113      	bne.n	8003ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb8:	6960      	ldr	r0, [r4, #20]
 8003cba:	0542      	lsls	r2, r0, #21
 8003cbc:	d5f6      	bpl.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbe:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003cd2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd6:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cdc:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003ce0:	2000      	movs	r0, #0
}
 8003ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7ff fa0c 	bl	8003100 <HAL_GetTick>
 8003ce8:	1bc0      	subs	r0, r0, r7
 8003cea:	42b0      	cmp	r0, r6
 8003cec:	d801      	bhi.n	8003cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d1da      	bne.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d02:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d06:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003d0a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d10 <I2C_RequestMemoryWrite>:
{
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d14:	6805      	ldr	r5, [r0, #0]
{
 8003d16:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d18:	682b      	ldr	r3, [r5, #0]
{
 8003d1a:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003d20:	4607      	mov	r7, r0
 8003d22:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 8003d26:	4688      	mov	r8, r1
 8003d28:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2a:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	e001      	b.n	8003d32 <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	1c71      	adds	r1, r6, #1
 8003d30:	d110      	bne.n	8003d54 <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d32:	696c      	ldr	r4, [r5, #20]
 8003d34:	07e3      	lsls	r3, r4, #31
 8003d36:	d5fa      	bpl.n	8003d2e <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d38:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8003d3c:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3e:	4653      	mov	r3, sl
 8003d40:	4632      	mov	r2, r6
 8003d42:	4638      	mov	r0, r7
 8003d44:	492e      	ldr	r1, [pc, #184]	; (8003e00 <I2C_RequestMemoryWrite+0xf0>)
 8003d46:	f7ff fef5 	bl	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4a:	b160      	cbz	r0, 8003d66 <I2C_RequestMemoryWrite+0x56>
    return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
}
 8003d4e:	b003      	add	sp, #12
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d54:	f7ff f9d4 	bl	8003100 <HAL_GetTick>
 8003d58:	eba0 000a 	sub.w	r0, r0, sl
 8003d5c:	4286      	cmp	r6, r0
 8003d5e:	d31a      	bcc.n	8003d96 <I2C_RequestMemoryWrite+0x86>
 8003d60:	b1ce      	cbz	r6, 8003d96 <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d62:	683d      	ldr	r5, [r7, #0]
 8003d64:	e7e5      	b.n	8003d32 <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9001      	str	r0, [sp, #4]
 8003d6a:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6c:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	9101      	str	r1, [sp, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d74:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d76:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d78:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	f7ff ff59 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d133      	bne.n	8003dea <I2C_RequestMemoryWrite+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d82:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d86:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d88:	d121      	bne.n	8003dce <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	fa5f f289 	uxtb.w	r2, r9
 8003d8e:	611a      	str	r2, [r3, #16]
}
 8003d90:	b003      	add	sp, #12
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d96:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d98:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d9a:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003da0:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da6:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003dac:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db2:	680b      	ldr	r3, [r1, #0]
 8003db4:	05da      	lsls	r2, r3, #23
 8003db6:	d506      	bpl.n	8003dc6 <I2C_RequestMemoryWrite+0xb6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db8:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003dbc:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbe:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003dc0:	b003      	add	sp, #12
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003dc6:	2003      	movs	r0, #3
}
 8003dc8:	b003      	add	sp, #12
 8003dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dce:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8003dd2:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	4652      	mov	r2, sl
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4638      	mov	r0, r7
 8003dda:	f7ff ff29 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dde:	b920      	cbnz	r0, 8003dea <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	fa5f f389 	uxtb.w	r3, r9
 8003de6:	6113      	str	r3, [r2, #16]
 8003de8:	e7b1      	b.n	8003d4e <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d1ad      	bne.n	8003d4c <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 8003df2:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e7a7      	b.n	8003d4e <I2C_RequestMemoryWrite+0x3e>
 8003dfe:	bf00      	nop
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_RequestMemoryRead>:
{
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e08:	6805      	ldr	r5, [r0, #0]
{
 8003e0a:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0c:	682b      	ldr	r3, [r5, #0]
{
 8003e0e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e14:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	682b      	ldr	r3, [r5, #0]
{
 8003e18:	4607      	mov	r7, r0
 8003e1a:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003e22:	4688      	mov	r8, r1
 8003e24:	4692      	mov	sl, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e28:	e001      	b.n	8003e2e <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	1c74      	adds	r4, r6, #1
 8003e2c:	d112      	bne.n	8003e54 <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2e:	696c      	ldr	r4, [r5, #20]
 8003e30:	07e1      	lsls	r1, r4, #31
 8003e32:	d5fa      	bpl.n	8003e2a <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e34:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8003e38:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3a:	4632      	mov	r2, r6
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	4638      	mov	r0, r7
 8003e40:	4943      	ldr	r1, [pc, #268]	; (8003f50 <I2C_RequestMemoryRead+0x14c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e46:	f7ff fe75 	bl	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4a:	b168      	cbz	r0, 8003e68 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 8003e4c:	2001      	movs	r0, #1
}
 8003e4e:	b003      	add	sp, #12
 8003e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7ff f954 	bl	8003100 <HAL_GetTick>
 8003e58:	eba0 0009 	sub.w	r0, r0, r9
 8003e5c:	4286      	cmp	r6, r0
 8003e5e:	d337      	bcc.n	8003ed0 <I2C_RequestMemoryRead+0xcc>
 8003e60:	2e00      	cmp	r6, #0
 8003e62:	d035      	beq.n	8003ed0 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e64:	683d      	ldr	r5, [r7, #0]
 8003e66:	e7e2      	b.n	8003e2e <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	9001      	str	r0, [sp, #4]
 8003e6c:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6e:	464a      	mov	r2, r9
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	9101      	str	r1, [sp, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e74:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7c:	f7ff fed8 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d13d      	bne.n	8003f00 <I2C_RequestMemoryRead+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e84:	f1bb 0f01 	cmp.w	fp, #1
 8003e88:	d148      	bne.n	8003f1c <I2C_RequestMemoryRead+0x118>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	fa5f f28a 	uxtb.w	r2, sl
 8003e90:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	464a      	mov	r2, r9
 8003e94:	4631      	mov	r1, r6
 8003e96:	4638      	mov	r0, r7
 8003e98:	f7ff feca 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d12f      	bne.n	8003f00 <I2C_RequestMemoryRead+0xfc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	680b      	ldr	r3, [r1, #0]
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eaa:	e001      	b.n	8003eb0 <I2C_RequestMemoryRead+0xac>
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	1c72      	adds	r2, r6, #1
 8003eae:	d145      	bne.n	8003f3c <I2C_RequestMemoryRead+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	694b      	ldr	r3, [r1, #20]
 8003eb2:	07db      	lsls	r3, r3, #31
 8003eb4:	d5fa      	bpl.n	8003eac <I2C_RequestMemoryRead+0xa8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eb6:	f048 0401 	orr.w	r4, r8, #1
 8003eba:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	4923      	ldr	r1, [pc, #140]	; (8003f50 <I2C_RequestMemoryRead+0x14c>)
 8003ec4:	f7ff fe36 	bl	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003ec8:	3800      	subs	r0, #0
 8003eca:	bf18      	it	ne
 8003ecc:	2001      	movne	r0, #1
 8003ece:	e7be      	b.n	8003e4e <I2C_RequestMemoryRead+0x4a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ed2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ed4:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ed6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eda:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee0:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003ee6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eec:	680b      	ldr	r3, [r1, #0]
 8003eee:	05d8      	lsls	r0, r3, #23
 8003ef0:	d510      	bpl.n	8003f14 <I2C_RequestMemoryRead+0x110>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003efa:	b003      	add	sp, #12
 8003efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1a2      	bne.n	8003e4c <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	6813      	ldr	r3, [r2, #0]
 8003f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e79c      	b.n	8003e4e <I2C_RequestMemoryRead+0x4a>
    return HAL_TIMEOUT;
 8003f14:	2003      	movs	r0, #3
}
 8003f16:	b003      	add	sp, #12
 8003f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8003f22:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f24:	4631      	mov	r1, r6
 8003f26:	464a      	mov	r2, r9
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f7ff fe81 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1e6      	bne.n	8003f00 <I2C_RequestMemoryRead+0xfc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	fa5f f38a 	uxtb.w	r3, sl
 8003f38:	6113      	str	r3, [r2, #16]
 8003f3a:	e7aa      	b.n	8003e92 <I2C_RequestMemoryRead+0x8e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7ff f8e0 	bl	8003100 <HAL_GetTick>
 8003f40:	eba0 0309 	sub.w	r3, r0, r9
 8003f44:	429e      	cmp	r6, r3
 8003f46:	d3c3      	bcc.n	8003ed0 <I2C_RequestMemoryRead+0xcc>
 8003f48:	2e00      	cmp	r6, #0
 8003f4a:	d0c1      	beq.n	8003ed0 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	e7af      	b.n	8003eb0 <I2C_RequestMemoryRead+0xac>
 8003f50:	00010002 	.word	0x00010002

08003f54 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003f54:	2800      	cmp	r0, #0
 8003f56:	f000 80b9 	beq.w	80040cc <HAL_I2C_Init+0x178>
{
 8003f5a:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f60:	4604      	mov	r4, r0
 8003f62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8098 	beq.w	800409c <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6c:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003f6e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f8a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f000 fdb6 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	494f      	ldr	r1, [pc, #316]	; (80040d0 <HAL_I2C_Init+0x17c>)
 8003f94:	428b      	cmp	r3, r1
 8003f96:	d84f      	bhi.n	8004038 <HAL_I2C_Init+0xe4>
 8003f98:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <HAL_I2C_Init+0x180>)
 8003f9a:	4290      	cmp	r0, r2
 8003f9c:	d97c      	bls.n	8004098 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9e:	4d4e      	ldr	r5, [pc, #312]	; (80040d8 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8003fa2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa6:	1e43      	subs	r3, r0, #1
 8003fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fac:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fb0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003fb2:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fb4:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fb6:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fba:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003fbe:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003fc2:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fc4:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc6:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fc8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003fcc:	ea41 010c 	orr.w	r1, r1, ip
 8003fd0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd2:	69d1      	ldr	r1, [r2, #28]
 8003fd4:	ea13 0f0e 	tst.w	r3, lr
 8003fd8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003fdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fe0:	d161      	bne.n	80040a6 <HAL_I2C_Init+0x152>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003fee:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003ff2:	4303      	orrs	r3, r0
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff8:	6891      	ldr	r1, [r2, #8]
 8003ffa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003ffe:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004002:	4303      	orrs	r3, r0
 8004004:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004008:	430b      	orrs	r3, r1
 800400a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800400c:	68d0      	ldr	r0, [r2, #12]
 800400e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8004012:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004016:	430b      	orrs	r3, r1
 8004018:	4303      	orrs	r3, r0
 800401a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800401c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401e:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004028:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004034:	4608      	mov	r0, r1
}
 8004036:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_I2C_Init+0x188>)
 800403a:	4290      	cmp	r0, r2
 800403c:	d92c      	bls.n	8004098 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800403e:	4d26      	ldr	r5, [pc, #152]	; (80040d8 <HAL_I2C_Init+0x184>)
 8004040:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004044:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004048:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404c:	fb02 f101 	mul.w	r1, r2, r1
 8004050:	4d23      	ldr	r5, [pc, #140]	; (80040e0 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004052:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004054:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004058:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800405a:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800405c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004060:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004064:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004066:	6a15      	ldr	r5, [r2, #32]
 8004068:	3101      	adds	r1, #1
 800406a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800406e:	4329      	orrs	r1, r5
 8004070:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004072:	69d1      	ldr	r1, [r2, #28]
 8004074:	68a5      	ldr	r5, [r4, #8]
 8004076:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800407a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800407e:	b9ad      	cbnz	r5, 80040ac <HAL_I2C_Init+0x158>
 8004080:	3801      	subs	r0, #1
 8004082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	b1d3      	cbz	r3, 80040c8 <HAL_I2C_Init+0x174>
 8004092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004096:	e7a5      	b.n	8003fe4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004098:	2001      	movs	r0, #1
}
 800409a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800409c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80040a0:	f7fe fbb8 	bl	8002814 <HAL_I2C_MspInit>
 80040a4:	e762      	b.n	8003f6c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	e79b      	b.n	8003fe4 <HAL_I2C_Init+0x90>
 80040ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040b0:	3801      	subs	r0, #1
 80040b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	b113      	cbz	r3, 80040c8 <HAL_I2C_Init+0x174>
 80040c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c6:	e78d      	b.n	8003fe4 <HAL_I2C_Init+0x90>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e78b      	b.n	8003fe4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80040cc:	2001      	movs	r0, #1
}
 80040ce:	4770      	bx	lr
 80040d0:	000186a0 	.word	0x000186a0
 80040d4:	001e847f 	.word	0x001e847f
 80040d8:	431bde83 	.word	0x431bde83
 80040dc:	003d08ff 	.word	0x003d08ff
 80040e0:	10624dd3 	.word	0x10624dd3

080040e4 <HAL_I2C_Mem_Write>:
{
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	4604      	mov	r4, r0
 80040ea:	b083      	sub	sp, #12
 80040ec:	4699      	mov	r9, r3
 80040ee:	460f      	mov	r7, r1
 80040f0:	4690      	mov	r8, r2
 80040f2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80040f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff f802 	bl	8003100 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004100:	2b20      	cmp	r3, #32
 8004102:	d003      	beq.n	800410c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004104:	2002      	movs	r0, #2
}
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	4605      	mov	r5, r0
 800410e:	e004      	b.n	800411a <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fe fff6 	bl	8003100 <HAL_GetTick>
 8004114:	1b40      	subs	r0, r0, r5
 8004116:	2819      	cmp	r0, #25
 8004118:	d87b      	bhi.n	8004212 <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	6983      	ldr	r3, [r0, #24]
 800411e:	ea6f 0c03 	mvn.w	ip, r3
 8004122:	f01c 0b02 	ands.w	fp, ip, #2
 8004126:	d0f3      	beq.n	8004110 <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8004128:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d0e9      	beq.n	8004104 <HAL_I2C_Mem_Write+0x20>
 8004130:	2301      	movs	r3, #1
 8004132:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004136:	6803      	ldr	r3, [r0, #0]
 8004138:	07da      	lsls	r2, r3, #31
 800413a:	d565      	bpl.n	8004208 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413c:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413e:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004142:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004146:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800414a:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414c:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800414e:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004150:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004154:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004156:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004158:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415a:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800415e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004162:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004166:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800416a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004170:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004172:	4835      	ldr	r0, [pc, #212]	; (8004248 <HAL_I2C_Mem_Write+0x164>)
 8004174:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff fdca 	bl	8003d10 <I2C_RequestMemoryWrite>
 800417c:	2800      	cmp	r0, #0
 800417e:	d13f      	bne.n	8004200 <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 8004180:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d029      	beq.n	80041da <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	462a      	mov	r2, r5
 8004188:	4631      	mov	r1, r6
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff fd50 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	2800      	cmp	r0, #0
 8004192:	d14f      	bne.n	8004234 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004194:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	4639      	mov	r1, r7
 800419a:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800419e:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a2:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80041a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041a6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->XferCount--;
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b0:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 80041b2:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b4:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80041b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80041b8:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ba:	d50c      	bpl.n	80041d6 <HAL_I2C_Mem_Write+0xf2>
 80041bc:	b16a      	cbz	r2, 80041da <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041be:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 80041c0:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c4:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80041c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80041c8:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80041ca:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80041cc:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80041ce:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80041d0:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80041d2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80041d4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	d1d5      	bne.n	8004186 <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	462a      	mov	r2, r5
 80041dc:	4631      	mov	r1, r6
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff fd5e 	bl	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout>
 80041e4:	bb30      	cbnz	r0, 8004234 <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80041f6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80041fe:	e782      	b.n	8004106 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004200:	2001      	movs	r0, #1
}
 8004202:	b003      	add	sp, #12
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6003      	str	r3, [r0, #0]
 8004210:	e794      	b.n	800413c <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004212:	2320      	movs	r3, #32
      return HAL_BUSY;
 8004214:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004216:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800421a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800421e:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004224:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800422e:	b003      	add	sp, #12
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d1e2      	bne.n	8004200 <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e75e      	b.n	8004106 <HAL_I2C_Mem_Write+0x22>
 8004248:	ffff0000 	.word	0xffff0000

0800424c <HAL_I2C_Mem_Read>:
{
 800424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8004250:	2400      	movs	r4, #0
{
 8004252:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004254:	9403      	str	r4, [sp, #12]
{
 8004256:	4604      	mov	r4, r0
 8004258:	4699      	mov	r9, r3
 800425a:	460f      	mov	r7, r1
 800425c:	4690      	mov	r8, r2
 800425e:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8004262:	9d14      	ldr	r5, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7fe ff4c 	bl	8003100 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004268:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800426c:	2b20      	cmp	r3, #32
 800426e:	d004      	beq.n	800427a <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004270:	2702      	movs	r7, #2
}
 8004272:	4638      	mov	r0, r7
 8004274:	b009      	add	sp, #36	; 0x24
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	4606      	mov	r6, r0
 800427c:	e005      	b.n	800428a <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe ff3f 	bl	8003100 <HAL_GetTick>
 8004282:	1b80      	subs	r0, r0, r6
 8004284:	2819      	cmp	r0, #25
 8004286:	f200 80b9 	bhi.w	80043fc <HAL_I2C_Mem_Read+0x1b0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	6983      	ldr	r3, [r0, #24]
 800428e:	ea6f 0c03 	mvn.w	ip, r3
 8004292:	f01c 0b02 	ands.w	fp, ip, #2
 8004296:	d0f2      	beq.n	800427e <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8004298:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d0e7      	beq.n	8004270 <HAL_I2C_Mem_Read+0x24>
 80042a0:	2301      	movs	r3, #1
 80042a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a6:	6803      	ldr	r3, [r0, #0]
 80042a8:	07db      	lsls	r3, r3, #31
 80042aa:	d539      	bpl.n	8004320 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ac:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ae:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b2:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042b6:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ba:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042bc:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042be:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c0:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80042c4:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80042c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80042c8:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ca:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042ce:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d2:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d6:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80042da:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042de:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80042e0:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e2:	489d      	ldr	r0, [pc, #628]	; (8004558 <HAL_I2C_Mem_Read+0x30c>)
 80042e4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7ff fd8c 	bl	8003e04 <I2C_RequestMemoryRead>
 80042ec:	4607      	mov	r7, r0
 80042ee:	2800      	cmp	r0, #0
 80042f0:	f040 809d 	bne.w	800442e <HAL_I2C_Mem_Read+0x1e2>
    if (hi2c->XferSize == 0U)
 80042f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042f6:	b9c3      	cbnz	r3, 800432a <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	9004      	str	r0, [sp, #16]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	9204      	str	r2, [sp, #16]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	9204      	str	r2, [sp, #16]
 8004304:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8004312:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004316:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800431e:	e7a8      	b.n	8004272 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8004320:	6803      	ldr	r3, [r0, #0]
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6003      	str	r3, [r0, #0]
 8004328:	e7c0      	b.n	80042ac <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800432a:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432c:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 800432e:	f000 8100 	beq.w	8004532 <HAL_I2C_Mem_Read+0x2e6>
    else if (hi2c->XferSize == 2U)
 8004332:	2b02      	cmp	r3, #2
 8004334:	f000 80c9 	beq.w	80044ca <HAL_I2C_Mem_Read+0x27e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	6811      	ldr	r1, [r2, #0]
 800433a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800433e:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004340:	9007      	str	r0, [sp, #28]
 8004342:	6951      	ldr	r1, [r2, #20]
 8004344:	9107      	str	r1, [sp, #28]
 8004346:	6992      	ldr	r2, [r2, #24]
 8004348:	9207      	str	r2, [sp, #28]
 800434a:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 800434c:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800434e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800455c <HAL_I2C_Mem_Read+0x310>
 8004352:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004560 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8004356:	d832      	bhi.n	80043be <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8004358:	2b01      	cmp	r3, #1
 800435a:	d061      	beq.n	8004420 <HAL_I2C_Mem_Read+0x1d4>
        else if (hi2c->XferSize == 2U)
 800435c:	2b02      	cmp	r3, #2
 800435e:	d172      	bne.n	8004446 <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	e002      	b.n	800436a <HAL_I2C_Mem_Read+0x11e>
    if (Timeout != HAL_MAX_DELAY)
 8004364:	1c69      	adds	r1, r5, #1
 8004366:	f040 80c6 	bne.w	80044f6 <HAL_I2C_Mem_Read+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800436a:	6953      	ldr	r3, [r2, #20]
 800436c:	075b      	lsls	r3, r3, #29
 800436e:	d5f9      	bpl.n	8004364 <HAL_I2C_Mem_Read+0x118>
 8004370:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004384:	3b01      	subs	r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800438a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800438c:	3301      	adds	r3, #1
 800438e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004390:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004396:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80043a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80043a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80043a4:	3a01      	subs	r2, #1
 80043a6:	b292      	uxth	r2, r2
 80043a8:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80043aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80043b0:	3201      	adds	r2, #1
          hi2c->XferSize--;
 80043b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80043b4:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0a9      	beq.n	800430e <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d9cc      	bls.n	8004358 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043be:	4632      	mov	r2, r6
 80043c0:	4629      	mov	r1, r5
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fc00 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d130      	bne.n	800442e <HAL_I2C_Mem_Read+0x1e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d2:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80043d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043d6:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80043de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80043e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e2:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80043e8:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043ec:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80043ee:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80043f0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f4:	d5df      	bpl.n	80043b6 <HAL_I2C_Mem_Read+0x16a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	7053      	strb	r3, [r2, #1]
 80043fa:	e7d1      	b.n	80043a0 <HAL_I2C_Mem_Read+0x154>
      return HAL_BUSY;
 80043fc:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 80043fe:	2320      	movs	r3, #32
}
 8004400:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800440a:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800440e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004410:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004414:	f043 0320 	orr.w	r3, r3, #32
 8004418:	6423      	str	r3, [r4, #64]	; 0x40
}
 800441a:	b009      	add	sp, #36	; 0x24
 800441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004420:	4632      	mov	r2, r6
 8004422:	4629      	mov	r1, r5
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff fbcf 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800442a:	2800      	cmp	r0, #0
 800442c:	d0b4      	beq.n	8004398 <HAL_I2C_Mem_Read+0x14c>
      return HAL_ERROR;
 800442e:	2701      	movs	r7, #1
}
 8004430:	4638      	mov	r0, r7
 8004432:	b009      	add	sp, #36	; 0x24
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004438:	f7fe fe62 	bl	8003100 <HAL_GetTick>
 800443c:	1b80      	subs	r0, r0, r6
 800443e:	4285      	cmp	r5, r0
 8004440:	d361      	bcc.n	8004506 <HAL_I2C_Mem_Read+0x2ba>
 8004442:	2d00      	cmp	r5, #0
 8004444:	d05f      	beq.n	8004506 <HAL_I2C_Mem_Read+0x2ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	e001      	b.n	800444e <HAL_I2C_Mem_Read+0x202>
    if (Timeout != HAL_MAX_DELAY)
 800444a:	1c68      	adds	r0, r5, #1
 800444c:	d1f4      	bne.n	8004438 <HAL_I2C_Mem_Read+0x1ec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444e:	6953      	ldr	r3, [r2, #20]
 8004450:	0759      	lsls	r1, r3, #29
 8004452:	d5fa      	bpl.n	800444a <HAL_I2C_Mem_Read+0x1fe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004454:	6813      	ldr	r3, [r2, #0]
 8004456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800445a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800445c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004464:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004466:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 800446a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8004472:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800447a:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800447c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004480:	b292      	uxth	r2, r2
 8004482:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004484:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8004486:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800448c:	1c4b      	adds	r3, r1, #1
 800448e:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004490:	e003      	b.n	800449a <HAL_I2C_Mem_Read+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	0752      	lsls	r2, r2, #29
 8004498:	d444      	bmi.n	8004524 <HAL_I2C_Mem_Read+0x2d8>
            count--;
 800449a:	9b03      	ldr	r3, [sp, #12]
 800449c:	3b01      	subs	r3, #1
 800449e:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f5      	bne.n	8004492 <HAL_I2C_Mem_Read+0x246>
              hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80044ba:	b662      	cpsie	i
              return HAL_ERROR;
 80044bc:	2701      	movs	r7, #1
}
 80044be:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 80044c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80044c4:	b009      	add	sp, #36	; 0x24
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044d0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044d2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	9006      	str	r0, [sp, #24]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	9206      	str	r2, [sp, #24]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	9206      	str	r2, [sp, #24]
 80044e0:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ea:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80044ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f47f af2c 	bne.w	800434c <HAL_I2C_Mem_Read+0x100>
 80044f4:	e70b      	b.n	800430e <HAL_I2C_Mem_Read+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fe fe03 	bl	8003100 <HAL_GetTick>
 80044fa:	1b80      	subs	r0, r0, r6
 80044fc:	4285      	cmp	r5, r0
 80044fe:	d302      	bcc.n	8004506 <HAL_I2C_Mem_Read+0x2ba>
 8004500:	2d00      	cmp	r5, #0
 8004502:	f47f af2d 	bne.w	8004360 <HAL_I2C_Mem_Read+0x114>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004506:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004508:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800450a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800450c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004510:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	6c23      	ldr	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8004516:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800451c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004522:	e6a6      	b.n	8004272 <HAL_I2C_Mem_Read+0x26>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	704b      	strb	r3, [r1, #1]
 8004530:	e727      	b.n	8004382 <HAL_I2C_Mem_Read+0x136>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004538:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800453a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	9005      	str	r0, [sp, #20]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	9205      	str	r2, [sp, #20]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	9205      	str	r2, [sp, #20]
 8004548:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004550:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004552:	b662      	cpsie	i
}
 8004554:	e7ca      	b.n	80044ec <HAL_I2C_Mem_Read+0x2a0>
 8004556:	bf00      	nop
 8004558:	ffff0000 	.word	0xffff0000
 800455c:	20000004 	.word	0x20000004
 8004560:	14f8b589 	.word	0x14f8b589

08004564 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004564:	2800      	cmp	r0, #0
 8004566:	f000 81b6 	beq.w	80048d6 <HAL_RCC_OscConfig+0x372>
{
 800456a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456e:	6803      	ldr	r3, [r0, #0]
 8004570:	4604      	mov	r4, r0
 8004572:	07dd      	lsls	r5, r3, #31
{
 8004574:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	d535      	bpl.n	80045e4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004578:	499a      	ldr	r1, [pc, #616]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 800457a:	684a      	ldr	r2, [r1, #4]
 800457c:	f002 020c 	and.w	r2, r2, #12
 8004580:	2a04      	cmp	r2, #4
 8004582:	f000 80ef 	beq.w	8004764 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004586:	684a      	ldr	r2, [r1, #4]
 8004588:	f002 020c 	and.w	r2, r2, #12
 800458c:	2a08      	cmp	r2, #8
 800458e:	f000 80e5 	beq.w	800475c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d010      	beq.n	80045bc <HAL_RCC_OscConfig+0x58>
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 810c 	beq.w	80047b8 <HAL_RCC_OscConfig+0x254>
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	f000 8182 	beq.w	80048ac <HAL_RCC_OscConfig+0x348>
 80045a8:	4b8e      	ldr	r3, [pc, #568]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e004      	b.n	80045c6 <HAL_RCC_OscConfig+0x62>
 80045bc:	4a89      	ldr	r2, [pc, #548]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c6:	f7fe fd9b 	bl	8003100 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4e86      	ldr	r6, [pc, #536]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80045cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	e005      	b.n	80045dc <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fd96 	bl	8003100 <HAL_GetTick>
 80045d4:	1b40      	subs	r0, r0, r5
 80045d6:	2864      	cmp	r0, #100	; 0x64
 80045d8:	f200 80ea 	bhi.w	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	039a      	lsls	r2, r3, #14
 80045e0:	d5f6      	bpl.n	80045d0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	079f      	lsls	r7, r3, #30
 80045e6:	d528      	bpl.n	800463a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e8:	4a7e      	ldr	r2, [pc, #504]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80045ea:	6851      	ldr	r1, [r2, #4]
 80045ec:	f011 0f0c 	tst.w	r1, #12
 80045f0:	f000 808d 	beq.w	800470e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045f4:	6851      	ldr	r1, [r2, #4]
 80045f6:	f001 010c 	and.w	r1, r1, #12
 80045fa:	2908      	cmp	r1, #8
 80045fc:	f000 8083 	beq.w	8004706 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8118 	beq.w	8004838 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	2201      	movs	r2, #1
 800460a:	4b77      	ldr	r3, [pc, #476]	; (80047e8 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	4e75      	ldr	r6, [pc, #468]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800460e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004610:	f7fe fd76 	bl	8003100 <HAL_GetTick>
 8004614:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	e005      	b.n	8004624 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004618:	f7fe fd72 	bl	8003100 <HAL_GetTick>
 800461c:	1b40      	subs	r0, r0, r5
 800461e:	2802      	cmp	r0, #2
 8004620:	f200 80c6 	bhi.w	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	0798      	lsls	r0, r3, #30
 8004628:	d5f6      	bpl.n	8004618 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	6962      	ldr	r2, [r4, #20]
 800462e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004632:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004636:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	071a      	lsls	r2, r3, #28
 800463c:	d41f      	bmi.n	800467e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463e:	075d      	lsls	r5, r3, #29
 8004640:	d542      	bpl.n	80046c8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	00d0      	lsls	r0, r2, #3
 8004648:	d57d      	bpl.n	8004746 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	4e67      	ldr	r6, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x288>)
 800464e:	6833      	ldr	r3, [r6, #0]
 8004650:	05d9      	lsls	r1, r3, #23
 8004652:	f140 809d 	bpl.w	8004790 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	2b01      	cmp	r3, #1
 800465a:	f000 80fe 	beq.w	800485a <HAL_RCC_OscConfig+0x2f6>
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80ca 	beq.w	80047f8 <HAL_RCC_OscConfig+0x294>
 8004664:	2b05      	cmp	r3, #5
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	f000 812c 	beq.w	80048c6 <HAL_RCC_OscConfig+0x362>
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	621a      	str	r2, [r3, #32]
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	f022 0204 	bic.w	r2, r2, #4
 800467a:	621a      	str	r2, [r3, #32]
 800467c:	e0f2      	b.n	8004864 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467e:	69a3      	ldr	r3, [r4, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d04f      	beq.n	8004724 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8004684:	2201      	movs	r2, #1
 8004686:	4b58      	ldr	r3, [pc, #352]	; (80047e8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004688:	4e56      	ldr	r6, [pc, #344]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800468a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800468e:	f7fe fd37 	bl	8003100 <HAL_GetTick>
 8004692:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004694:	e005      	b.n	80046a2 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004696:	f7fe fd33 	bl	8003100 <HAL_GetTick>
 800469a:	1b40      	subs	r0, r0, r5
 800469c:	2802      	cmp	r0, #2
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80046a4:	079b      	lsls	r3, r3, #30
 80046a6:	d5f6      	bpl.n	8004696 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046a8:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <HAL_RCC_OscConfig+0x28c>)
 80046aa:	4a52      	ldr	r2, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x290>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a5b      	lsrs	r3, r3, #9
 80046b4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80046b6:	bf00      	nop
  }
  while (Delay --);
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	9201      	str	r2, [sp, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	075d      	lsls	r5, r3, #29
 80046c6:	d4bc      	bmi.n	8004642 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c8:	69e0      	ldr	r0, [r4, #28]
 80046ca:	b1c0      	cbz	r0, 80046fe <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4d45      	ldr	r5, [pc, #276]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80046ce:	686b      	ldr	r3, [r5, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	f000 80d8 	beq.w	800488a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80046da:	2200      	movs	r2, #0
 80046dc:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e2:	f000 80fa 	beq.w	80048da <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80046e6:	f7fe fd0b 	bl	8003100 <HAL_GetTick>
 80046ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ec:	e004      	b.n	80046f8 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fe fd07 	bl	8003100 <HAL_GetTick>
 80046f2:	1b00      	subs	r0, r0, r4
 80046f4:	2802      	cmp	r0, #2
 80046f6:	d85b      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	019b      	lsls	r3, r3, #6
 80046fc:	d4f7      	bmi.n	80046ee <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80046fe:	2000      	movs	r0, #0
}
 8004700:	b002      	add	sp, #8
 8004702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004706:	6852      	ldr	r2, [r2, #4]
 8004708:	03d6      	lsls	r6, r2, #15
 800470a:	f53f af79 	bmi.w	8004600 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470e:	4a35      	ldr	r2, [pc, #212]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	0795      	lsls	r5, r2, #30
 8004714:	d530      	bpl.n	8004778 <HAL_RCC_OscConfig+0x214>
 8004716:	6922      	ldr	r2, [r4, #16]
 8004718:	2a01      	cmp	r2, #1
 800471a:	d02d      	beq.n	8004778 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800471c:	2001      	movs	r0, #1
}
 800471e:	b002      	add	sp, #8
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004724:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004726:	4e2f      	ldr	r6, [pc, #188]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004728:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800472c:	f7fe fce8 	bl	8003100 <HAL_GetTick>
 8004730:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004732:	e004      	b.n	800473e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fe fce4 	bl	8003100 <HAL_GetTick>
 8004738:	1b40      	subs	r0, r0, r5
 800473a:	2802      	cmp	r0, #2
 800473c:	d838      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004740:	079f      	lsls	r7, r3, #30
 8004742:	d4f7      	bmi.n	8004734 <HAL_RCC_OscConfig+0x1d0>
 8004744:	e7bd      	b.n	80046c2 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004748:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800475a:	e777      	b.n	800464c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800475c:	684a      	ldr	r2, [r1, #4]
 800475e:	03d0      	lsls	r0, r2, #15
 8004760:	f57f af17 	bpl.w	8004592 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004764:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	0391      	lsls	r1, r2, #14
 800476a:	f57f af3b 	bpl.w	80045e4 <HAL_RCC_OscConfig+0x80>
 800476e:	6862      	ldr	r2, [r4, #4]
 8004770:	2a00      	cmp	r2, #0
 8004772:	f47f af37 	bne.w	80045e4 <HAL_RCC_OscConfig+0x80>
 8004776:	e7d1      	b.n	800471c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004778:	491a      	ldr	r1, [pc, #104]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 800477a:	6960      	ldr	r0, [r4, #20]
 800477c:	680a      	ldr	r2, [r1, #0]
 800477e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004782:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004786:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004788:	071a      	lsls	r2, r3, #28
 800478a:	f57f af58 	bpl.w	800463e <HAL_RCC_OscConfig+0xda>
 800478e:	e776      	b.n	800467e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004790:	6833      	ldr	r3, [r6, #0]
 8004792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004796:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004798:	f7fe fcb2 	bl	8003100 <HAL_GetTick>
 800479c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	6833      	ldr	r3, [r6, #0]
 80047a0:	05da      	lsls	r2, r3, #23
 80047a2:	f53f af58 	bmi.w	8004656 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fe fcab 	bl	8003100 <HAL_GetTick>
 80047aa:	1bc0      	subs	r0, r0, r7
 80047ac:	2864      	cmp	r0, #100	; 0x64
 80047ae:	d9f6      	bls.n	800479e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 80047b0:	2003      	movs	r0, #3
}
 80047b2:	b002      	add	sp, #8
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b8:	4d0a      	ldr	r5, [pc, #40]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	682b      	ldr	r3, [r5, #0]
 80047c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047ca:	f7fe fc99 	bl	8003100 <HAL_GetTick>
 80047ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d0:	e004      	b.n	80047dc <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d2:	f7fe fc95 	bl	8003100 <HAL_GetTick>
 80047d6:	1b80      	subs	r0, r0, r6
 80047d8:	2864      	cmp	r0, #100	; 0x64
 80047da:	d8e9      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	039b      	lsls	r3, r3, #14
 80047e0:	d4f7      	bmi.n	80047d2 <HAL_RCC_OscConfig+0x26e>
 80047e2:	e6fe      	b.n	80045e2 <HAL_RCC_OscConfig+0x7e>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	42420000 	.word	0x42420000
 80047ec:	40007000 	.word	0x40007000
 80047f0:	20000004 	.word	0x20000004
 80047f4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	4e50      	ldr	r6, [pc, #320]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	6a33      	ldr	r3, [r6, #32]
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	6233      	str	r3, [r6, #32]
 8004806:	6a33      	ldr	r3, [r6, #32]
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800480e:	f7fe fc77 	bl	8003100 <HAL_GetTick>
 8004812:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e004      	b.n	8004820 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe fc73 	bl	8003100 <HAL_GetTick>
 800481a:	1bc0      	subs	r0, r0, r7
 800481c:	4540      	cmp	r0, r8
 800481e:	d8c7      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004820:	6a33      	ldr	r3, [r6, #32]
 8004822:	0798      	lsls	r0, r3, #30
 8004824:	d4f7      	bmi.n	8004816 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004826:	2d00      	cmp	r5, #0
 8004828:	f43f af4e 	beq.w	80046c8 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4a43      	ldr	r2, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
 800482e:	69d3      	ldr	r3, [r2, #28]
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	e747      	b.n	80046c8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004838:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483a:	4e40      	ldr	r6, [pc, #256]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800483c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800483e:	f7fe fc5f 	bl	8003100 <HAL_GetTick>
 8004842:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004844:	e004      	b.n	8004850 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004846:	f7fe fc5b 	bl	8003100 <HAL_GetTick>
 800484a:	1b40      	subs	r0, r0, r5
 800484c:	2802      	cmp	r0, #2
 800484e:	d8af      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	0799      	lsls	r1, r3, #30
 8004854:	d4f7      	bmi.n	8004846 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	e6ef      	b.n	800463a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485a:	4a38      	ldr	r2, [pc, #224]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
 800485c:	6a13      	ldr	r3, [r2, #32]
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004864:	f7fe fc4c 	bl	8003100 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004868:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800486c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	4f33      	ldr	r7, [pc, #204]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
 8004870:	e004      	b.n	800487c <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe fc45 	bl	8003100 <HAL_GetTick>
 8004876:	1b80      	subs	r0, r0, r6
 8004878:	4540      	cmp	r0, r8
 800487a:	d899      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	d5f7      	bpl.n	8004872 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8004882:	2d00      	cmp	r5, #0
 8004884:	f43f af20 	beq.w	80046c8 <HAL_RCC_OscConfig+0x164>
 8004888:	e7d0      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800488a:	2801      	cmp	r0, #1
 800488c:	f43f af38 	beq.w	8004700 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8004890:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	6a22      	ldr	r2, [r4, #32]
 8004894:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004898:	4291      	cmp	r1, r2
 800489a:	f47f af3f 	bne.w	800471c <HAL_RCC_OscConfig+0x1b8>
 800489e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80048a4:	1a18      	subs	r0, r3, r0
 80048a6:	bf18      	it	ne
 80048a8:	2001      	movne	r0, #1
 80048aa:	e729      	b.n	8004700 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048b0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e67f      	b.n	80045c6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c6:	f042 0204 	orr.w	r2, r2, #4
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	e7c6      	b.n	8004864 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
}
 80048d8:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80048da:	f7fe fc11 	bl	8003100 <HAL_GetTick>
 80048de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e0:	e005      	b.n	80048ee <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fe fc0d 	bl	8003100 <HAL_GetTick>
 80048e6:	1b80      	subs	r0, r0, r6
 80048e8:	2802      	cmp	r0, #2
 80048ea:	f63f af61 	bhi.w	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	0199      	lsls	r1, r3, #6
 80048f2:	d4f6      	bmi.n	80048e2 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048f4:	6a23      	ldr	r3, [r4, #32]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048fc:	686a      	ldr	r2, [r5, #4]
 80048fe:	68a1      	ldr	r1, [r4, #8]
 8004900:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004904:	430a      	orrs	r2, r1
 8004906:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004908:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800490a:	4d0c      	ldr	r5, [pc, #48]	; (800493c <HAL_RCC_OscConfig+0x3d8>)
 800490c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800490e:	686a      	ldr	r2, [r5, #4]
 8004910:	430b      	orrs	r3, r1
 8004912:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004916:	490a      	ldr	r1, [pc, #40]	; (8004940 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004918:	4313      	orrs	r3, r2
 800491a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800491c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800491e:	f7fe fbef 	bl	8003100 <HAL_GetTick>
 8004922:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004924:	e005      	b.n	8004932 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fe fbeb 	bl	8003100 <HAL_GetTick>
 800492a:	1b00      	subs	r0, r0, r4
 800492c:	2802      	cmp	r0, #2
 800492e:	f63f af3f 	bhi.w	80047b0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004932:	682b      	ldr	r3, [r5, #0]
 8004934:	019a      	lsls	r2, r3, #6
 8004936:	d5f6      	bpl.n	8004926 <HAL_RCC_OscConfig+0x3c2>
 8004938:	e6e1      	b.n	80046fe <HAL_RCC_OscConfig+0x19a>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	42420000 	.word	0x42420000

08004944 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004944:	f240 2c01 	movw	ip, #513	; 0x201
{
 8004948:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_RCC_GetSysClockFreq+0x68>)
{
 800494c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800494e:	f10d 0e18 	add.w	lr, sp, #24
 8004952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004954:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800495a:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 800495e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004960:	f003 010c 	and.w	r1, r3, #12
 8004964:	2908      	cmp	r1, #8
 8004966:	d003      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8004968:	4812      	ldr	r0, [pc, #72]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x70>)
}
 800496a:	b007      	add	sp, #28
 800496c:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004970:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8004974:	3118      	adds	r1, #24
 8004976:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004978:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800497e:	d50e      	bpl.n	800499e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004980:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004982:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004984:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004988:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498c:	3318      	adds	r3, #24
 800498e:	446b      	add	r3, sp
 8004990:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004994:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004998:	b007      	add	sp, #28
 800499a:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x74>)
 80049a0:	fb03 f000 	mul.w	r0, r3, r0
}
 80049a4:	b007      	add	sp, #28
 80049a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049aa:	bf00      	nop
 80049ac:	08008c84 	.word	0x08008c84
 80049b0:	40021000 	.word	0x40021000
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	003d0900 	.word	0x003d0900

080049bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049bc:	2800      	cmp	r0, #0
 80049be:	f000 808c 	beq.w	8004ada <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c2:	4a49      	ldr	r2, [pc, #292]	; (8004ae8 <HAL_RCC_ClockConfig+0x12c>)
{
 80049c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	4604      	mov	r4, r0
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	428b      	cmp	r3, r1
 80049d2:	460d      	mov	r5, r1
 80049d4:	d20c      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	430b      	orrs	r3, r1
 80049de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e0:	6813      	ldr	r3, [r2, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	428b      	cmp	r3, r1
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
}
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	0798      	lsls	r0, r3, #30
 80049f4:	d514      	bpl.n	8004a20 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f6:	0759      	lsls	r1, r3, #29
 80049f8:	d504      	bpl.n	8004a04 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fa:	493c      	ldr	r1, [pc, #240]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 80049fc:	684a      	ldr	r2, [r1, #4]
 80049fe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a02:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	071a      	lsls	r2, r3, #28
 8004a06:	d504      	bpl.n	8004a12 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a08:	4938      	ldr	r1, [pc, #224]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 8004a0a:	684a      	ldr	r2, [r1, #4]
 8004a0c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004a10:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a12:	4936      	ldr	r1, [pc, #216]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 8004a14:	68a0      	ldr	r0, [r4, #8]
 8004a16:	684a      	ldr	r2, [r1, #4]
 8004a18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a1c:	4302      	orrs	r2, r0
 8004a1e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a20:	07df      	lsls	r7, r3, #31
 8004a22:	d520      	bpl.n	8004a66 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a24:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b31      	ldr	r3, [pc, #196]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a28:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2c:	d057      	beq.n	8004ade <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2e:	2a02      	cmp	r2, #2
 8004a30:	d050      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	0799      	lsls	r1, r3, #30
 8004a34:	d5d9      	bpl.n	80049ea <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4e2d      	ldr	r6, [pc, #180]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3c:	6873      	ldr	r3, [r6, #4]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004a46:	f7fe fb5b 	bl	8003100 <HAL_GetTick>
 8004a4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	e004      	b.n	8004a58 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4e:	f7fe fb57 	bl	8003100 <HAL_GetTick>
 8004a52:	1bc0      	subs	r0, r0, r7
 8004a54:	4540      	cmp	r0, r8
 8004a56:	d845      	bhi.n	8004ae4 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a58:	6873      	ldr	r3, [r6, #4]
 8004a5a:	6862      	ldr	r2, [r4, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a64:	d1f3      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x12c>)
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	42ab      	cmp	r3, r5
 8004a70:	d909      	bls.n	8004a86 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	432b      	orrs	r3, r5
 8004a7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	d1b1      	bne.n	80049ea <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	075a      	lsls	r2, r3, #29
 8004a8a:	d506      	bpl.n	8004a9a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	684a      	ldr	r2, [r1, #4]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a96:	4302      	orrs	r2, r0
 8004a98:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	071b      	lsls	r3, r3, #28
 8004a9c:	d507      	bpl.n	8004aae <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a9e:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 8004aa0:	6921      	ldr	r1, [r4, #16]
 8004aa2:	6853      	ldr	r3, [r2, #4]
 8004aa4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004aa8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004aac:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aae:	f7ff ff49 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <HAL_RCC_ClockConfig+0x130>)
 8004ab6:	490e      	ldr	r1, [pc, #56]	; (8004af0 <HAL_RCC_ClockConfig+0x134>)
 8004ab8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004aba:	480e      	ldr	r0, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004abc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004ac0:	5c89      	ldrb	r1, [r1, r2]
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <HAL_RCC_ClockConfig+0x13c>)
 8004ac4:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8004ac6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ac8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004aca:	f7fe fad7 	bl	800307c <HAL_InitTick>
  return HAL_OK;
 8004ace:	2000      	movs	r0, #0
}
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	0198      	lsls	r0, r3, #6
 8004ad6:	d4ae      	bmi.n	8004a36 <HAL_RCC_ClockConfig+0x7a>
 8004ad8:	e787      	b.n	80049ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004ada:	2001      	movs	r0, #1
}
 8004adc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	039e      	lsls	r6, r3, #14
 8004ae0:	d4a9      	bmi.n	8004a36 <HAL_RCC_ClockConfig+0x7a>
 8004ae2:	e782      	b.n	80049ea <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	e781      	b.n	80049ec <HAL_RCC_ClockConfig+0x30>
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40021000 	.word	0x40021000
 8004af0:	08008c20 	.word	0x08008c20
 8004af4:	2000003c 	.word	0x2000003c
 8004af8:	20000004 	.word	0x20000004

08004afc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4905      	ldr	r1, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b04:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	6810      	ldr	r0, [r2, #0]
}
 8004b0c:	40d8      	lsrs	r0, r3
 8004b0e:	4770      	bx	lr
 8004b10:	40021000 	.word	0x40021000
 8004b14:	20000004 	.word	0x20000004
 8004b18:	08008c30 	.word	0x08008c30

08004b1c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4905      	ldr	r1, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b24:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	6810      	ldr	r0, [r2, #0]
}
 8004b2c:	40d8      	lsrs	r0, r3
 8004b2e:	4770      	bx	lr
 8004b30:	40021000 	.word	0x40021000
 8004b34:	20000004 	.word	0x20000004
 8004b38:	08008c30 	.word	0x08008c30

08004b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b42:	6800      	ldr	r0, [r0, #0]
{
 8004b44:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b46:	07c1      	lsls	r1, r0, #31
 8004b48:	d52c      	bpl.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	d53f      	bpl.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b52:	4d39      	ldr	r5, [pc, #228]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8004b54:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	05df      	lsls	r7, r3, #23
 8004b5a:	d548      	bpl.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5c:	4d35      	ldr	r5, [pc, #212]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b5e:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b60:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b64:	d011      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b66:	6861      	ldr	r1, [r4, #4]
 8004b68:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d00d      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b70:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b72:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b74:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b76:	4a31      	ldr	r2, [pc, #196]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b7c:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b80:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b84:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b86:	07d9      	lsls	r1, r3, #31
 8004b88:	d444      	bmi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8a:	6861      	ldr	r1, [r4, #4]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b8e:	6a13      	ldr	r3, [r2, #32]
 8004b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b98:	b11e      	cbz	r6, 8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b9a:	69d3      	ldr	r3, [r2, #28]
 8004b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	0783      	lsls	r3, r0, #30
 8004ba6:	d506      	bpl.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba8:	4922      	ldr	r1, [pc, #136]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	684a      	ldr	r2, [r1, #4]
 8004bae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bb6:	f010 0010 	ands.w	r0, r0, #16
 8004bba:	d007      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bbc:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004bc0:	6961      	ldr	r1, [r4, #20]
 8004bc2:	6853      	ldr	r3, [r2, #4]
 8004bc4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6053      	str	r3, [r2, #4]
}
 8004bcc:	b002      	add	sp, #8
 8004bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4d18      	ldr	r5, [pc, #96]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bda:	61da      	str	r2, [r3, #28]
 8004bdc:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004bde:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	05df      	lsls	r7, r3, #23
 8004bec:	d4b6      	bmi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004bf6:	f7fe fa83 	bl	8003100 <HAL_GetTick>
 8004bfa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	05d8      	lsls	r0, r3, #23
 8004c00:	d4ac      	bmi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fe fa7d 	bl	8003100 <HAL_GetTick>
 8004c06:	1bc3      	subs	r3, r0, r7
 8004c08:	2b64      	cmp	r3, #100	; 0x64
 8004c0a:	d9f7      	bls.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004c0c:	2003      	movs	r0, #3
}
 8004c0e:	b002      	add	sp, #8
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004c14:	f7fe fa74 	bl	8003100 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c18:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004c1c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	e004      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fe fa6e 	bl	8003100 <HAL_GetTick>
 8004c24:	1bc0      	subs	r0, r0, r7
 8004c26:	4540      	cmp	r0, r8
 8004c28:	d8f0      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2a:	6a2b      	ldr	r3, [r5, #32]
 8004c2c:	079a      	lsls	r2, r3, #30
 8004c2e:	d5f7      	bpl.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004c30:	e7ab      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	42420000 	.word	0x42420000

08004c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c40:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 8004c44:	b087      	sub	sp, #28
 8004c46:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c4a:	f10d 0e18 	add.w	lr, sp, #24
 8004c4e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c52:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c5a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8004c5e:	280f      	cmp	r0, #15
 8004c60:	d819      	bhi.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004c62:	e8df f000 	tbb	[pc, r0]
 8004c66:	2108      	.short	0x2108
 8004c68:	18181c18 	.word	0x18181c18
 8004c6c:	18181c18 	.word	0x18181c18
 8004c70:	18181818 	.word	0x18181818
 8004c74:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c76:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004c7a:	4930      	ldr	r1, [pc, #192]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004c7c:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c7e:	401a      	ands	r2, r3
 8004c80:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004c84:	d055      	beq.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8e:	d048      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c94:	d03d      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c96:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004c98:	b007      	add	sp, #28
 8004c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c9e:	b007      	add	sp, #28
 8004ca0:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 8004ca4:	f7ff be4e 	b.w	8004944 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ca8:	f7ff ff38 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8004cac:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004cbc:	b007      	add	sp, #28
 8004cbe:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004cc4:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004ccc:	d0e4      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cce:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8004cd2:	3118      	adds	r1, #24
 8004cd4:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cd6:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cd8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cdc:	d40c      	bmi.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8004ce0:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	d4d5      	bmi.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8004cee:	0040      	lsls	r0, r0, #1
 8004cf0:	fba3 3000 	umull	r3, r0, r3, r0
 8004cf4:	0840      	lsrs	r0, r0, #1
 8004cf6:	e7cf      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cf8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cfc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004d00:	3318      	adds	r3, #24
 8004d02:	446b      	add	r3, sp
 8004d04:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	fb03 f000 	mul.w	r0, r3, r0
 8004d10:	e7e8      	b.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 8004d12:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d16:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004d18:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004d1c:	bf18      	it	ne
 8004d1e:	4618      	movne	r0, r3
 8004d20:	e7ba      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 8004d22:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d26:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004d28:	f010 0002 	ands.w	r0, r0, #2
 8004d2c:	bf18      	it	ne
 8004d2e:	4618      	movne	r0, r3
 8004d30:	e7b2      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 8004d32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d36:	e7af      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004d38:	08008c84 	.word	0x08008c84
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	003d0900 	.word	0x003d0900
 8004d44:	aaaaaaab 	.word	0xaaaaaaab
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004d4c:	b368      	cbz	r0, 8004daa <HAL_SRAM_Init+0x5e>
 8004d4e:	6983      	ldr	r3, [r0, #24]
{
 8004d50:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	4604      	mov	r4, r0
 8004d58:	d029      	beq.n	8004dae <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004d5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d5e:	4615      	mov	r5, r2
 8004d60:	460e      	mov	r6, r1
 8004d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d66:	b1db      	cbz	r3, 8004da0 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f851 0b08 	ldr.w	r0, [r1], #8
 8004d6e:	f000 f821 	bl	8004db4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004d72:	4631      	mov	r1, r6
 8004d74:	68a2      	ldr	r2, [r4, #8]
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	f000 f852 	bl	8004e20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004d7c:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8004d80:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004d82:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004d84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d86:	f000 f86d 	bl	8004e64 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8004d8e:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d94:	432b      	orrs	r3, r5
 8004d96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8004d9a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8004da0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8004da4:	f7fd fd6a 	bl	800287c <HAL_SRAM_MspInit>
 8004da8:	e7de      	b.n	8004d68 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8004daa:	2001      	movs	r0, #1
}
 8004dac:	4770      	bx	lr
    return HAL_ERROR;
 8004dae:	2001      	movs	r0, #1
}
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	bf00      	nop

08004db4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004db4:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8004db6:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004db8:	688b      	ldr	r3, [r1, #8]
{
 8004dba:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	bf0c      	ite	eq
 8004dc0:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8004dc4:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004dc6:	684e      	ldr	r6, [r1, #4]
 8004dc8:	680c      	ldr	r4, [r1, #0]
 8004dca:	4333      	orrs	r3, r6
 8004dcc:	68ce      	ldr	r6, [r1, #12]
 8004dce:	4d13      	ldr	r5, [pc, #76]	; (8004e1c <FSMC_NORSRAM_Init+0x68>)
 8004dd0:	4333      	orrs	r3, r6
 8004dd2:	690e      	ldr	r6, [r1, #16]
 8004dd4:	4333      	orrs	r3, r6
 8004dd6:	694e      	ldr	r6, [r1, #20]
 8004dd8:	4333      	orrs	r3, r6
 8004dda:	69ce      	ldr	r6, [r1, #28]
 8004ddc:	4333      	orrs	r3, r6
 8004dde:	6a0e      	ldr	r6, [r1, #32]
 8004de0:	4333      	orrs	r3, r6
 8004de2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004de4:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004de6:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8004dea:	f026 0601 	bic.w	r6, r6, #1
 8004dee:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004df2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004df4:	4333      	orrs	r3, r6
 8004df6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004df8:	4333      	orrs	r3, r6
 8004dfa:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8004dfc:	4333      	orrs	r3, r6
 8004dfe:	698e      	ldr	r6, [r1, #24]
 8004e00:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e02:	4333      	orrs	r3, r6
 8004e04:	430b      	orrs	r3, r1
 8004e06:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8004e0a:	400d      	ands	r5, r1
 8004e0c:	432b      	orrs	r3, r5
 8004e0e:	ea43 030c 	orr.w	r3, r3, ip
 8004e12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8004e16:	bc70      	pop	{r4, r5, r6}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	fff00080 	.word	0xfff00080

08004e20 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004e20:	4603      	mov	r3, r0
 8004e22:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004e26:	6853      	ldr	r3, [r2, #4]
{
 8004e28:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004e2a:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8004e2e:	698c      	ldr	r4, [r1, #24]
 8004e30:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8004e32:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004e34:	4323      	orrs	r3, r4
 8004e36:	684c      	ldr	r4, [r1, #4]
 8004e38:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004e3c:	688c      	ldr	r4, [r1, #8]
 8004e3e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004e42:	68cc      	ldr	r4, [r1, #12]
 8004e44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e48:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8004e4c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8004e50:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8004e54:	3902      	subs	r1, #2
 8004e56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004e5a:	ea43 030c 	orr.w	r3, r3, ip
 8004e5e:	6053      	str	r3, [r2, #4]
}
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop

08004e64 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e68:	d005      	beq.n	8004e76 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e6a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004e6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	4770      	bx	lr
{
 8004e76:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004e78:	680b      	ldr	r3, [r1, #0]
 8004e7a:	698d      	ldr	r5, [r1, #24]
 8004e7c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004e80:	432b      	orrs	r3, r5
 8004e82:	684d      	ldr	r5, [r1, #4]
 8004e84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004e88:	688d      	ldr	r5, [r1, #8]
 8004e8a:	68c9      	ldr	r1, [r1, #12]
 8004e8c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8004e96:	4021      	ands	r1, r4
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004e9e:	bc30      	pop	{r4, r5}
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	4770      	bx	lr
 8004ea4:	cff00000 	.word	0xcff00000

08004ea8 <__errno>:
 8004ea8:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <__errno+0x8>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000040 	.word	0x20000040

08004eb4 <__libc_init_array>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	4d0c      	ldr	r5, [pc, #48]	; (8004eec <__libc_init_array+0x38>)
 8004eba:	4c0d      	ldr	r4, [pc, #52]	; (8004ef0 <__libc_init_array+0x3c>)
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	42a6      	cmp	r6, r4
 8004ec2:	d109      	bne.n	8004ed8 <__libc_init_array+0x24>
 8004ec4:	f003 fabe 	bl	8008444 <_init>
 8004ec8:	2600      	movs	r6, #0
 8004eca:	4d0a      	ldr	r5, [pc, #40]	; (8004ef4 <__libc_init_array+0x40>)
 8004ecc:	4c0a      	ldr	r4, [pc, #40]	; (8004ef8 <__libc_init_array+0x44>)
 8004ece:	1b64      	subs	r4, r4, r5
 8004ed0:	10a4      	asrs	r4, r4, #2
 8004ed2:	42a6      	cmp	r6, r4
 8004ed4:	d105      	bne.n	8004ee2 <__libc_init_array+0x2e>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004edc:	4798      	blx	r3
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__libc_init_array+0xc>
 8004ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee6:	4798      	blx	r3
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7f2      	b.n	8004ed2 <__libc_init_array+0x1e>
 8004eec:	080090e8 	.word	0x080090e8
 8004ef0:	080090e8 	.word	0x080090e8
 8004ef4:	080090e8 	.word	0x080090e8
 8004ef8:	080090ec 	.word	0x080090ec

08004efc <malloc>:
 8004efc:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <malloc+0xc>)
 8004efe:	4601      	mov	r1, r0
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f000 b895 	b.w	8005030 <_malloc_r>
 8004f06:	bf00      	nop
 8004f08:	20000040 	.word	0x20000040

08004f0c <free>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <free+0xc>)
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 b825 	b.w	8004f60 <_free_r>
 8004f16:	bf00      	nop
 8004f18:	20000040 	.word	0x20000040

08004f1c <memmove>:
 8004f1c:	4288      	cmp	r0, r1
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	eb01 0402 	add.w	r4, r1, r2
 8004f24:	d902      	bls.n	8004f2c <memmove+0x10>
 8004f26:	4284      	cmp	r4, r0
 8004f28:	4623      	mov	r3, r4
 8004f2a:	d807      	bhi.n	8004f3c <memmove+0x20>
 8004f2c:	1e43      	subs	r3, r0, #1
 8004f2e:	42a1      	cmp	r1, r4
 8004f30:	d008      	beq.n	8004f44 <memmove+0x28>
 8004f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f3a:	e7f8      	b.n	8004f2e <memmove+0x12>
 8004f3c:	4601      	mov	r1, r0
 8004f3e:	4402      	add	r2, r0
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d100      	bne.n	8004f46 <memmove+0x2a>
 8004f44:	bd10      	pop	{r4, pc}
 8004f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f4e:	e7f7      	b.n	8004f40 <memmove+0x24>

08004f50 <memset>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	4402      	add	r2, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d100      	bne.n	8004f5a <memset+0xa>
 8004f58:	4770      	bx	lr
 8004f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5e:	e7f9      	b.n	8004f54 <memset+0x4>

08004f60 <_free_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4605      	mov	r5, r0
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d040      	beq.n	8004fea <_free_r+0x8a>
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f0c      	subs	r4, r1, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfb8      	it	lt
 8004f72:	18e4      	addlt	r4, r4, r3
 8004f74:	f001 fbfa 	bl	800676c <__malloc_lock>
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <_free_r+0x8c>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	b933      	cbnz	r3, 8004f8c <_free_r+0x2c>
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	6014      	str	r4, [r2, #0]
 8004f82:	4628      	mov	r0, r5
 8004f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f88:	f001 bbf6 	b.w	8006778 <__malloc_unlock>
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d908      	bls.n	8004fa2 <_free_r+0x42>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	1821      	adds	r1, r4, r0
 8004f94:	428b      	cmp	r3, r1
 8004f96:	bf01      	itttt	eq
 8004f98:	6819      	ldreq	r1, [r3, #0]
 8004f9a:	685b      	ldreq	r3, [r3, #4]
 8004f9c:	1809      	addeq	r1, r1, r0
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	e7ed      	b.n	8004f7e <_free_r+0x1e>
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b10b      	cbz	r3, 8004fac <_free_r+0x4c>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d9fa      	bls.n	8004fa2 <_free_r+0x42>
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	1850      	adds	r0, r2, r1
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d10b      	bne.n	8004fcc <_free_r+0x6c>
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	1850      	adds	r0, r2, r1
 8004fba:	4283      	cmp	r3, r0
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	d1e0      	bne.n	8004f82 <_free_r+0x22>
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4401      	add	r1, r0
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	6053      	str	r3, [r2, #4]
 8004fca:	e7da      	b.n	8004f82 <_free_r+0x22>
 8004fcc:	d902      	bls.n	8004fd4 <_free_r+0x74>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	e7d6      	b.n	8004f82 <_free_r+0x22>
 8004fd4:	6820      	ldr	r0, [r4, #0]
 8004fd6:	1821      	adds	r1, r4, r0
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf01      	itttt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1809      	addeq	r1, r1, r0
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	6063      	str	r3, [r4, #4]
 8004fe6:	6054      	str	r4, [r2, #4]
 8004fe8:	e7cb      	b.n	8004f82 <_free_r+0x22>
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	200006f8 	.word	0x200006f8

08004ff0 <sbrk_aligned>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4e0e      	ldr	r6, [pc, #56]	; (800502c <sbrk_aligned+0x3c>)
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	6831      	ldr	r1, [r6, #0]
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b911      	cbnz	r1, 8005002 <sbrk_aligned+0x12>
 8004ffc:	f000 fcec 	bl	80059d8 <_sbrk_r>
 8005000:	6030      	str	r0, [r6, #0]
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f000 fce7 	bl	80059d8 <_sbrk_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d00a      	beq.n	8005024 <sbrk_aligned+0x34>
 800500e:	1cc4      	adds	r4, r0, #3
 8005010:	f024 0403 	bic.w	r4, r4, #3
 8005014:	42a0      	cmp	r0, r4
 8005016:	d007      	beq.n	8005028 <sbrk_aligned+0x38>
 8005018:	1a21      	subs	r1, r4, r0
 800501a:	4628      	mov	r0, r5
 800501c:	f000 fcdc 	bl	80059d8 <_sbrk_r>
 8005020:	3001      	adds	r0, #1
 8005022:	d101      	bne.n	8005028 <sbrk_aligned+0x38>
 8005024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005028:	4620      	mov	r0, r4
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	200006fc 	.word	0x200006fc

08005030 <_malloc_r>:
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	1ccd      	adds	r5, r1, #3
 8005036:	f025 0503 	bic.w	r5, r5, #3
 800503a:	3508      	adds	r5, #8
 800503c:	2d0c      	cmp	r5, #12
 800503e:	bf38      	it	cc
 8005040:	250c      	movcc	r5, #12
 8005042:	2d00      	cmp	r5, #0
 8005044:	4607      	mov	r7, r0
 8005046:	db01      	blt.n	800504c <_malloc_r+0x1c>
 8005048:	42a9      	cmp	r1, r5
 800504a:	d905      	bls.n	8005058 <_malloc_r+0x28>
 800504c:	230c      	movs	r3, #12
 800504e:	2600      	movs	r6, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4630      	mov	r0, r6
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	4e2e      	ldr	r6, [pc, #184]	; (8005114 <_malloc_r+0xe4>)
 800505a:	f001 fb87 	bl	800676c <__malloc_lock>
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	461c      	mov	r4, r3
 8005062:	bb34      	cbnz	r4, 80050b2 <_malloc_r+0x82>
 8005064:	4629      	mov	r1, r5
 8005066:	4638      	mov	r0, r7
 8005068:	f7ff ffc2 	bl	8004ff0 <sbrk_aligned>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	4604      	mov	r4, r0
 8005070:	d14d      	bne.n	800510e <_malloc_r+0xde>
 8005072:	6834      	ldr	r4, [r6, #0]
 8005074:	4626      	mov	r6, r4
 8005076:	2e00      	cmp	r6, #0
 8005078:	d140      	bne.n	80050fc <_malloc_r+0xcc>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	4631      	mov	r1, r6
 800507e:	4638      	mov	r0, r7
 8005080:	eb04 0803 	add.w	r8, r4, r3
 8005084:	f000 fca8 	bl	80059d8 <_sbrk_r>
 8005088:	4580      	cmp	r8, r0
 800508a:	d13a      	bne.n	8005102 <_malloc_r+0xd2>
 800508c:	6821      	ldr	r1, [r4, #0]
 800508e:	3503      	adds	r5, #3
 8005090:	1a6d      	subs	r5, r5, r1
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	4638      	mov	r0, r7
 80050a0:	4629      	mov	r1, r5
 80050a2:	f7ff ffa5 	bl	8004ff0 <sbrk_aligned>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d02b      	beq.n	8005102 <_malloc_r+0xd2>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	442b      	add	r3, r5
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	e00e      	b.n	80050d0 <_malloc_r+0xa0>
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	1b52      	subs	r2, r2, r5
 80050b6:	d41e      	bmi.n	80050f6 <_malloc_r+0xc6>
 80050b8:	2a0b      	cmp	r2, #11
 80050ba:	d916      	bls.n	80050ea <_malloc_r+0xba>
 80050bc:	1961      	adds	r1, r4, r5
 80050be:	42a3      	cmp	r3, r4
 80050c0:	6025      	str	r5, [r4, #0]
 80050c2:	bf18      	it	ne
 80050c4:	6059      	strne	r1, [r3, #4]
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	bf08      	it	eq
 80050ca:	6031      	streq	r1, [r6, #0]
 80050cc:	5162      	str	r2, [r4, r5]
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	4638      	mov	r0, r7
 80050d2:	f104 060b 	add.w	r6, r4, #11
 80050d6:	f001 fb4f 	bl	8006778 <__malloc_unlock>
 80050da:	f026 0607 	bic.w	r6, r6, #7
 80050de:	1d23      	adds	r3, r4, #4
 80050e0:	1af2      	subs	r2, r6, r3
 80050e2:	d0b6      	beq.n	8005052 <_malloc_r+0x22>
 80050e4:	1b9b      	subs	r3, r3, r6
 80050e6:	50a3      	str	r3, [r4, r2]
 80050e8:	e7b3      	b.n	8005052 <_malloc_r+0x22>
 80050ea:	6862      	ldr	r2, [r4, #4]
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	bf0c      	ite	eq
 80050f0:	6032      	streq	r2, [r6, #0]
 80050f2:	605a      	strne	r2, [r3, #4]
 80050f4:	e7ec      	b.n	80050d0 <_malloc_r+0xa0>
 80050f6:	4623      	mov	r3, r4
 80050f8:	6864      	ldr	r4, [r4, #4]
 80050fa:	e7b2      	b.n	8005062 <_malloc_r+0x32>
 80050fc:	4634      	mov	r4, r6
 80050fe:	6876      	ldr	r6, [r6, #4]
 8005100:	e7b9      	b.n	8005076 <_malloc_r+0x46>
 8005102:	230c      	movs	r3, #12
 8005104:	4638      	mov	r0, r7
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	f001 fb36 	bl	8006778 <__malloc_unlock>
 800510c:	e7a1      	b.n	8005052 <_malloc_r+0x22>
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	e7de      	b.n	80050d0 <_malloc_r+0xa0>
 8005112:	bf00      	nop
 8005114:	200006f8 	.word	0x200006f8

08005118 <__cvt>:
 8005118:	2b00      	cmp	r3, #0
 800511a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511e:	461f      	mov	r7, r3
 8005120:	bfbb      	ittet	lt
 8005122:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005126:	461f      	movlt	r7, r3
 8005128:	2300      	movge	r3, #0
 800512a:	232d      	movlt	r3, #45	; 0x2d
 800512c:	b088      	sub	sp, #32
 800512e:	4614      	mov	r4, r2
 8005130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005132:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005134:	7013      	strb	r3, [r2, #0]
 8005136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005138:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800513c:	f023 0820 	bic.w	r8, r3, #32
 8005140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005144:	d005      	beq.n	8005152 <__cvt+0x3a>
 8005146:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800514a:	d100      	bne.n	800514e <__cvt+0x36>
 800514c:	3501      	adds	r5, #1
 800514e:	2302      	movs	r3, #2
 8005150:	e000      	b.n	8005154 <__cvt+0x3c>
 8005152:	2303      	movs	r3, #3
 8005154:	aa07      	add	r2, sp, #28
 8005156:	9204      	str	r2, [sp, #16]
 8005158:	aa06      	add	r2, sp, #24
 800515a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800515e:	e9cd 3500 	strd	r3, r5, [sp]
 8005162:	4622      	mov	r2, r4
 8005164:	463b      	mov	r3, r7
 8005166:	f000 fcf3 	bl	8005b50 <_dtoa_r>
 800516a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800516e:	4606      	mov	r6, r0
 8005170:	d102      	bne.n	8005178 <__cvt+0x60>
 8005172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005174:	07db      	lsls	r3, r3, #31
 8005176:	d522      	bpl.n	80051be <__cvt+0xa6>
 8005178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800517c:	eb06 0905 	add.w	r9, r6, r5
 8005180:	d110      	bne.n	80051a4 <__cvt+0x8c>
 8005182:	7833      	ldrb	r3, [r6, #0]
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d10a      	bne.n	800519e <__cvt+0x86>
 8005188:	2200      	movs	r2, #0
 800518a:	2300      	movs	r3, #0
 800518c:	4620      	mov	r0, r4
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb fc76 	bl	8000a80 <__aeabi_dcmpeq>
 8005194:	b918      	cbnz	r0, 800519e <__cvt+0x86>
 8005196:	f1c5 0501 	rsb	r5, r5, #1
 800519a:	f8ca 5000 	str.w	r5, [sl]
 800519e:	f8da 3000 	ldr.w	r3, [sl]
 80051a2:	4499      	add	r9, r3
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4620      	mov	r0, r4
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb fc68 	bl	8000a80 <__aeabi_dcmpeq>
 80051b0:	b108      	cbz	r0, 80051b6 <__cvt+0x9e>
 80051b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80051b6:	2230      	movs	r2, #48	; 0x30
 80051b8:	9b07      	ldr	r3, [sp, #28]
 80051ba:	454b      	cmp	r3, r9
 80051bc:	d307      	bcc.n	80051ce <__cvt+0xb6>
 80051be:	4630      	mov	r0, r6
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051c4:	1b9b      	subs	r3, r3, r6
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	b008      	add	sp, #32
 80051ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	9107      	str	r1, [sp, #28]
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e7f0      	b.n	80051b8 <__cvt+0xa0>

080051d6 <__exponent>:
 80051d6:	4603      	mov	r3, r0
 80051d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051da:	2900      	cmp	r1, #0
 80051dc:	f803 2b02 	strb.w	r2, [r3], #2
 80051e0:	bfb6      	itet	lt
 80051e2:	222d      	movlt	r2, #45	; 0x2d
 80051e4:	222b      	movge	r2, #43	; 0x2b
 80051e6:	4249      	neglt	r1, r1
 80051e8:	2909      	cmp	r1, #9
 80051ea:	7042      	strb	r2, [r0, #1]
 80051ec:	dd2b      	ble.n	8005246 <__exponent+0x70>
 80051ee:	f10d 0407 	add.w	r4, sp, #7
 80051f2:	46a4      	mov	ip, r4
 80051f4:	270a      	movs	r7, #10
 80051f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80051fa:	460a      	mov	r2, r1
 80051fc:	46a6      	mov	lr, r4
 80051fe:	fb07 1516 	mls	r5, r7, r6, r1
 8005202:	2a63      	cmp	r2, #99	; 0x63
 8005204:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005208:	4631      	mov	r1, r6
 800520a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800520e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005212:	dcf0      	bgt.n	80051f6 <__exponent+0x20>
 8005214:	3130      	adds	r1, #48	; 0x30
 8005216:	f1ae 0502 	sub.w	r5, lr, #2
 800521a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800521e:	4629      	mov	r1, r5
 8005220:	1c44      	adds	r4, r0, #1
 8005222:	4561      	cmp	r1, ip
 8005224:	d30a      	bcc.n	800523c <__exponent+0x66>
 8005226:	f10d 0209 	add.w	r2, sp, #9
 800522a:	eba2 020e 	sub.w	r2, r2, lr
 800522e:	4565      	cmp	r5, ip
 8005230:	bf88      	it	hi
 8005232:	2200      	movhi	r2, #0
 8005234:	4413      	add	r3, r2
 8005236:	1a18      	subs	r0, r3, r0
 8005238:	b003      	add	sp, #12
 800523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005240:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005244:	e7ed      	b.n	8005222 <__exponent+0x4c>
 8005246:	2330      	movs	r3, #48	; 0x30
 8005248:	3130      	adds	r1, #48	; 0x30
 800524a:	7083      	strb	r3, [r0, #2]
 800524c:	70c1      	strb	r1, [r0, #3]
 800524e:	1d03      	adds	r3, r0, #4
 8005250:	e7f1      	b.n	8005236 <__exponent+0x60>
	...

08005254 <_printf_float>:
 8005254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005258:	b091      	sub	sp, #68	; 0x44
 800525a:	460c      	mov	r4, r1
 800525c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005260:	4616      	mov	r6, r2
 8005262:	461f      	mov	r7, r3
 8005264:	4605      	mov	r5, r0
 8005266:	f001 fa61 	bl	800672c <_localeconv_r>
 800526a:	6803      	ldr	r3, [r0, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	9309      	str	r3, [sp, #36]	; 0x24
 8005270:	f7fa ffda 	bl	8000228 <strlen>
 8005274:	2300      	movs	r3, #0
 8005276:	930e      	str	r3, [sp, #56]	; 0x38
 8005278:	f8d8 3000 	ldr.w	r3, [r8]
 800527c:	900a      	str	r0, [sp, #40]	; 0x28
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	f103 0208 	add.w	r2, r3, #8
 8005288:	f894 9018 	ldrb.w	r9, [r4, #24]
 800528c:	f8d4 b000 	ldr.w	fp, [r4]
 8005290:	f8c8 2000 	str.w	r2, [r8]
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800529c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80052a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80052a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052aa:	4640      	mov	r0, r8
 80052ac:	4b9c      	ldr	r3, [pc, #624]	; (8005520 <_printf_float+0x2cc>)
 80052ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052b0:	f7fb fc18 	bl	8000ae4 <__aeabi_dcmpun>
 80052b4:	bb70      	cbnz	r0, 8005314 <_printf_float+0xc0>
 80052b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ba:	4640      	mov	r0, r8
 80052bc:	4b98      	ldr	r3, [pc, #608]	; (8005520 <_printf_float+0x2cc>)
 80052be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052c0:	f7fb fbf2 	bl	8000aa8 <__aeabi_dcmple>
 80052c4:	bb30      	cbnz	r0, 8005314 <_printf_float+0xc0>
 80052c6:	2200      	movs	r2, #0
 80052c8:	2300      	movs	r3, #0
 80052ca:	4640      	mov	r0, r8
 80052cc:	4651      	mov	r1, sl
 80052ce:	f7fb fbe1 	bl	8000a94 <__aeabi_dcmplt>
 80052d2:	b110      	cbz	r0, 80052da <_printf_float+0x86>
 80052d4:	232d      	movs	r3, #45	; 0x2d
 80052d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052da:	4b92      	ldr	r3, [pc, #584]	; (8005524 <_printf_float+0x2d0>)
 80052dc:	4892      	ldr	r0, [pc, #584]	; (8005528 <_printf_float+0x2d4>)
 80052de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052e2:	bf94      	ite	ls
 80052e4:	4698      	movls	r8, r3
 80052e6:	4680      	movhi	r8, r0
 80052e8:	2303      	movs	r3, #3
 80052ea:	f04f 0a00 	mov.w	sl, #0
 80052ee:	6123      	str	r3, [r4, #16]
 80052f0:	f02b 0304 	bic.w	r3, fp, #4
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	4633      	mov	r3, r6
 80052f8:	4621      	mov	r1, r4
 80052fa:	4628      	mov	r0, r5
 80052fc:	9700      	str	r7, [sp, #0]
 80052fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005300:	f000 f9d4 	bl	80056ac <_printf_common>
 8005304:	3001      	adds	r0, #1
 8005306:	f040 8090 	bne.w	800542a <_printf_float+0x1d6>
 800530a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800530e:	b011      	add	sp, #68	; 0x44
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	4642      	mov	r2, r8
 8005316:	4653      	mov	r3, sl
 8005318:	4640      	mov	r0, r8
 800531a:	4651      	mov	r1, sl
 800531c:	f7fb fbe2 	bl	8000ae4 <__aeabi_dcmpun>
 8005320:	b148      	cbz	r0, 8005336 <_printf_float+0xe2>
 8005322:	f1ba 0f00 	cmp.w	sl, #0
 8005326:	bfb8      	it	lt
 8005328:	232d      	movlt	r3, #45	; 0x2d
 800532a:	4880      	ldr	r0, [pc, #512]	; (800552c <_printf_float+0x2d8>)
 800532c:	bfb8      	it	lt
 800532e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005332:	4b7f      	ldr	r3, [pc, #508]	; (8005530 <_printf_float+0x2dc>)
 8005334:	e7d3      	b.n	80052de <_printf_float+0x8a>
 8005336:	6863      	ldr	r3, [r4, #4]
 8005338:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	d142      	bne.n	80053c6 <_printf_float+0x172>
 8005340:	2306      	movs	r3, #6
 8005342:	6063      	str	r3, [r4, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	9206      	str	r2, [sp, #24]
 8005348:	aa0e      	add	r2, sp, #56	; 0x38
 800534a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800534e:	aa0d      	add	r2, sp, #52	; 0x34
 8005350:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005354:	9203      	str	r2, [sp, #12]
 8005356:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800535a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	4642      	mov	r2, r8
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4628      	mov	r0, r5
 8005368:	4653      	mov	r3, sl
 800536a:	910b      	str	r1, [sp, #44]	; 0x2c
 800536c:	f7ff fed4 	bl	8005118 <__cvt>
 8005370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005372:	4680      	mov	r8, r0
 8005374:	2947      	cmp	r1, #71	; 0x47
 8005376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005378:	d108      	bne.n	800538c <_printf_float+0x138>
 800537a:	1cc8      	adds	r0, r1, #3
 800537c:	db02      	blt.n	8005384 <_printf_float+0x130>
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	4299      	cmp	r1, r3
 8005382:	dd40      	ble.n	8005406 <_printf_float+0x1b2>
 8005384:	f1a9 0902 	sub.w	r9, r9, #2
 8005388:	fa5f f989 	uxtb.w	r9, r9
 800538c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005390:	d81f      	bhi.n	80053d2 <_printf_float+0x17e>
 8005392:	464a      	mov	r2, r9
 8005394:	3901      	subs	r1, #1
 8005396:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800539a:	910d      	str	r1, [sp, #52]	; 0x34
 800539c:	f7ff ff1b 	bl	80051d6 <__exponent>
 80053a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053a2:	4682      	mov	sl, r0
 80053a4:	1813      	adds	r3, r2, r0
 80053a6:	2a01      	cmp	r2, #1
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	dc02      	bgt.n	80053b2 <_printf_float+0x15e>
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	07d2      	lsls	r2, r2, #31
 80053b0:	d501      	bpl.n	80053b6 <_printf_float+0x162>
 80053b2:	3301      	adds	r3, #1
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d09b      	beq.n	80052f6 <_printf_float+0xa2>
 80053be:	232d      	movs	r3, #45	; 0x2d
 80053c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c4:	e797      	b.n	80052f6 <_printf_float+0xa2>
 80053c6:	2947      	cmp	r1, #71	; 0x47
 80053c8:	d1bc      	bne.n	8005344 <_printf_float+0xf0>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ba      	bne.n	8005344 <_printf_float+0xf0>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e7b7      	b.n	8005342 <_printf_float+0xee>
 80053d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053d6:	d118      	bne.n	800540a <_printf_float+0x1b6>
 80053d8:	2900      	cmp	r1, #0
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	dd0b      	ble.n	80053f6 <_printf_float+0x1a2>
 80053de:	6121      	str	r1, [r4, #16]
 80053e0:	b913      	cbnz	r3, 80053e8 <_printf_float+0x194>
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d502      	bpl.n	80053ee <_printf_float+0x19a>
 80053e8:	3301      	adds	r3, #1
 80053ea:	440b      	add	r3, r1
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	f04f 0a00 	mov.w	sl, #0
 80053f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80053f4:	e7df      	b.n	80053b6 <_printf_float+0x162>
 80053f6:	b913      	cbnz	r3, 80053fe <_printf_float+0x1aa>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	07d2      	lsls	r2, r2, #31
 80053fc:	d501      	bpl.n	8005402 <_printf_float+0x1ae>
 80053fe:	3302      	adds	r3, #2
 8005400:	e7f4      	b.n	80053ec <_printf_float+0x198>
 8005402:	2301      	movs	r3, #1
 8005404:	e7f2      	b.n	80053ec <_printf_float+0x198>
 8005406:	f04f 0967 	mov.w	r9, #103	; 0x67
 800540a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800540c:	4299      	cmp	r1, r3
 800540e:	db05      	blt.n	800541c <_printf_float+0x1c8>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	6121      	str	r1, [r4, #16]
 8005414:	07d8      	lsls	r0, r3, #31
 8005416:	d5ea      	bpl.n	80053ee <_printf_float+0x19a>
 8005418:	1c4b      	adds	r3, r1, #1
 800541a:	e7e7      	b.n	80053ec <_printf_float+0x198>
 800541c:	2900      	cmp	r1, #0
 800541e:	bfcc      	ite	gt
 8005420:	2201      	movgt	r2, #1
 8005422:	f1c1 0202 	rsble	r2, r1, #2
 8005426:	4413      	add	r3, r2
 8005428:	e7e0      	b.n	80053ec <_printf_float+0x198>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	055a      	lsls	r2, r3, #21
 800542e:	d407      	bmi.n	8005440 <_printf_float+0x1ec>
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	4642      	mov	r2, r8
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	d12b      	bne.n	8005496 <_printf_float+0x242>
 800543e:	e764      	b.n	800530a <_printf_float+0xb6>
 8005440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005444:	f240 80dd 	bls.w	8005602 <_printf_float+0x3ae>
 8005448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	f7fb fb16 	bl	8000a80 <__aeabi_dcmpeq>
 8005454:	2800      	cmp	r0, #0
 8005456:	d033      	beq.n	80054c0 <_printf_float+0x26c>
 8005458:	2301      	movs	r3, #1
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	4a35      	ldr	r2, [pc, #212]	; (8005534 <_printf_float+0x2e0>)
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f af51 	beq.w	800530a <_printf_float+0xb6>
 8005468:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800546c:	429a      	cmp	r2, r3
 800546e:	db02      	blt.n	8005476 <_printf_float+0x222>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	07d8      	lsls	r0, r3, #31
 8005474:	d50f      	bpl.n	8005496 <_printf_float+0x242>
 8005476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f af42 	beq.w	800530a <_printf_float+0xb6>
 8005486:	f04f 0800 	mov.w	r8, #0
 800548a:	f104 091a 	add.w	r9, r4, #26
 800548e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005490:	3b01      	subs	r3, #1
 8005492:	4543      	cmp	r3, r8
 8005494:	dc09      	bgt.n	80054aa <_printf_float+0x256>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	079b      	lsls	r3, r3, #30
 800549a:	f100 8102 	bmi.w	80056a2 <_printf_float+0x44e>
 800549e:	68e0      	ldr	r0, [r4, #12]
 80054a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054a2:	4298      	cmp	r0, r3
 80054a4:	bfb8      	it	lt
 80054a6:	4618      	movlt	r0, r3
 80054a8:	e731      	b.n	800530e <_printf_float+0xba>
 80054aa:	2301      	movs	r3, #1
 80054ac:	464a      	mov	r2, r9
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f af28 	beq.w	800530a <_printf_float+0xb6>
 80054ba:	f108 0801 	add.w	r8, r8, #1
 80054be:	e7e6      	b.n	800548e <_printf_float+0x23a>
 80054c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dc38      	bgt.n	8005538 <_printf_float+0x2e4>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <_printf_float+0x2e0>)
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f af1a 	beq.w	800530a <_printf_float+0xb6>
 80054d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054da:	4313      	orrs	r3, r2
 80054dc:	d102      	bne.n	80054e4 <_printf_float+0x290>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	07d9      	lsls	r1, r3, #31
 80054e2:	d5d8      	bpl.n	8005496 <_printf_float+0x242>
 80054e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f af0b 	beq.w	800530a <_printf_float+0xb6>
 80054f4:	f04f 0900 	mov.w	r9, #0
 80054f8:	f104 0a1a 	add.w	sl, r4, #26
 80054fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fe:	425b      	negs	r3, r3
 8005500:	454b      	cmp	r3, r9
 8005502:	dc01      	bgt.n	8005508 <_printf_float+0x2b4>
 8005504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005506:	e794      	b.n	8005432 <_printf_float+0x1de>
 8005508:	2301      	movs	r3, #1
 800550a:	4652      	mov	r2, sl
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f aef9 	beq.w	800530a <_printf_float+0xb6>
 8005518:	f109 0901 	add.w	r9, r9, #1
 800551c:	e7ee      	b.n	80054fc <_printf_float+0x2a8>
 800551e:	bf00      	nop
 8005520:	7fefffff 	.word	0x7fefffff
 8005524:	08008c9c 	.word	0x08008c9c
 8005528:	08008ca0 	.word	0x08008ca0
 800552c:	08008ca8 	.word	0x08008ca8
 8005530:	08008ca4 	.word	0x08008ca4
 8005534:	08008cac 	.word	0x08008cac
 8005538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800553a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800553c:	429a      	cmp	r2, r3
 800553e:	bfa8      	it	ge
 8005540:	461a      	movge	r2, r3
 8005542:	2a00      	cmp	r2, #0
 8005544:	4691      	mov	r9, r2
 8005546:	dc37      	bgt.n	80055b8 <_printf_float+0x364>
 8005548:	f04f 0b00 	mov.w	fp, #0
 800554c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005550:	f104 021a 	add.w	r2, r4, #26
 8005554:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005558:	ebaa 0309 	sub.w	r3, sl, r9
 800555c:	455b      	cmp	r3, fp
 800555e:	dc33      	bgt.n	80055c8 <_printf_float+0x374>
 8005560:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005564:	429a      	cmp	r2, r3
 8005566:	db3b      	blt.n	80055e0 <_printf_float+0x38c>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	07da      	lsls	r2, r3, #31
 800556c:	d438      	bmi.n	80055e0 <_printf_float+0x38c>
 800556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005570:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005572:	eba3 020a 	sub.w	r2, r3, sl
 8005576:	eba3 0901 	sub.w	r9, r3, r1
 800557a:	4591      	cmp	r9, r2
 800557c:	bfa8      	it	ge
 800557e:	4691      	movge	r9, r2
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	dc34      	bgt.n	80055f0 <_printf_float+0x39c>
 8005586:	f04f 0800 	mov.w	r8, #0
 800558a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800558e:	f104 0a1a 	add.w	sl, r4, #26
 8005592:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	eba3 0309 	sub.w	r3, r3, r9
 800559c:	4543      	cmp	r3, r8
 800559e:	f77f af7a 	ble.w	8005496 <_printf_float+0x242>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4652      	mov	r2, sl
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f aeac 	beq.w	800530a <_printf_float+0xb6>
 80055b2:	f108 0801 	add.w	r8, r8, #1
 80055b6:	e7ec      	b.n	8005592 <_printf_float+0x33e>
 80055b8:	4613      	mov	r3, r2
 80055ba:	4631      	mov	r1, r6
 80055bc:	4642      	mov	r2, r8
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	d1c0      	bne.n	8005548 <_printf_float+0x2f4>
 80055c6:	e6a0      	b.n	800530a <_printf_float+0xb6>
 80055c8:	2301      	movs	r3, #1
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f ae99 	beq.w	800530a <_printf_float+0xb6>
 80055d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055da:	f10b 0b01 	add.w	fp, fp, #1
 80055de:	e7b9      	b.n	8005554 <_printf_float+0x300>
 80055e0:	4631      	mov	r1, r6
 80055e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	d1bf      	bne.n	800556e <_printf_float+0x31a>
 80055ee:	e68c      	b.n	800530a <_printf_float+0xb6>
 80055f0:	464b      	mov	r3, r9
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	eb08 020a 	add.w	r2, r8, sl
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	d1c2      	bne.n	8005586 <_printf_float+0x332>
 8005600:	e683      	b.n	800530a <_printf_float+0xb6>
 8005602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005604:	2a01      	cmp	r2, #1
 8005606:	dc01      	bgt.n	800560c <_printf_float+0x3b8>
 8005608:	07db      	lsls	r3, r3, #31
 800560a:	d537      	bpl.n	800567c <_printf_float+0x428>
 800560c:	2301      	movs	r3, #1
 800560e:	4642      	mov	r2, r8
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f ae77 	beq.w	800530a <_printf_float+0xb6>
 800561c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f ae6f 	beq.w	800530a <_printf_float+0xb6>
 800562c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	f7fb fa24 	bl	8000a80 <__aeabi_dcmpeq>
 8005638:	b9d8      	cbnz	r0, 8005672 <_printf_float+0x41e>
 800563a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800563c:	f108 0201 	add.w	r2, r8, #1
 8005640:	3b01      	subs	r3, #1
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	d10e      	bne.n	800566a <_printf_float+0x416>
 800564c:	e65d      	b.n	800530a <_printf_float+0xb6>
 800564e:	2301      	movs	r3, #1
 8005650:	464a      	mov	r2, r9
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f ae56 	beq.w	800530a <_printf_float+0xb6>
 800565e:	f108 0801 	add.w	r8, r8, #1
 8005662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005664:	3b01      	subs	r3, #1
 8005666:	4543      	cmp	r3, r8
 8005668:	dcf1      	bgt.n	800564e <_printf_float+0x3fa>
 800566a:	4653      	mov	r3, sl
 800566c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005670:	e6e0      	b.n	8005434 <_printf_float+0x1e0>
 8005672:	f04f 0800 	mov.w	r8, #0
 8005676:	f104 091a 	add.w	r9, r4, #26
 800567a:	e7f2      	b.n	8005662 <_printf_float+0x40e>
 800567c:	2301      	movs	r3, #1
 800567e:	4642      	mov	r2, r8
 8005680:	e7df      	b.n	8005642 <_printf_float+0x3ee>
 8005682:	2301      	movs	r3, #1
 8005684:	464a      	mov	r2, r9
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f ae3c 	beq.w	800530a <_printf_float+0xb6>
 8005692:	f108 0801 	add.w	r8, r8, #1
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800569a:	1a5b      	subs	r3, r3, r1
 800569c:	4543      	cmp	r3, r8
 800569e:	dcf0      	bgt.n	8005682 <_printf_float+0x42e>
 80056a0:	e6fd      	b.n	800549e <_printf_float+0x24a>
 80056a2:	f04f 0800 	mov.w	r8, #0
 80056a6:	f104 0919 	add.w	r9, r4, #25
 80056aa:	e7f4      	b.n	8005696 <_printf_float+0x442>

080056ac <_printf_common>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	4616      	mov	r6, r2
 80056b2:	4699      	mov	r9, r3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	4607      	mov	r7, r0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bfb8      	it	lt
 80056be:	4613      	movlt	r3, r2
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c6:	460c      	mov	r4, r1
 80056c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056cc:	b10a      	cbz	r2, 80056d2 <_printf_common+0x26>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0699      	lsls	r1, r3, #26
 80056d6:	bf42      	ittt	mi
 80056d8:	6833      	ldrmi	r3, [r6, #0]
 80056da:	3302      	addmi	r3, #2
 80056dc:	6033      	strmi	r3, [r6, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	f015 0506 	ands.w	r5, r5, #6
 80056e4:	d106      	bne.n	80056f4 <_printf_common+0x48>
 80056e6:	f104 0a19 	add.w	sl, r4, #25
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	6832      	ldr	r2, [r6, #0]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc28      	bgt.n	8005746 <_printf_common+0x9a>
 80056f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f8:	1e13      	subs	r3, r2, #0
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	bf18      	it	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	0692      	lsls	r2, r2, #26
 8005702:	d42d      	bmi.n	8005760 <_printf_common+0xb4>
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	47c0      	blx	r8
 800570e:	3001      	adds	r0, #1
 8005710:	d020      	beq.n	8005754 <_printf_common+0xa8>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	68e5      	ldr	r5, [r4, #12]
 8005716:	f003 0306 	and.w	r3, r3, #6
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf18      	it	ne
 800571e:	2500      	movne	r5, #0
 8005720:	6832      	ldr	r2, [r6, #0]
 8005722:	f04f 0600 	mov.w	r6, #0
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	bf08      	it	eq
 800572a:	1aad      	subeq	r5, r5, r2
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	bf08      	it	eq
 8005730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005734:	4293      	cmp	r3, r2
 8005736:	bfc4      	itt	gt
 8005738:	1a9b      	subgt	r3, r3, r2
 800573a:	18ed      	addgt	r5, r5, r3
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xcc>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xac>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4649      	mov	r1, r9
 800574c:	4638      	mov	r0, r7
 800574e:	47c0      	blx	r8
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xb0>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c4      	b.n	80056ea <_printf_common+0x3e>
 8005760:	2030      	movs	r0, #48	; 0x30
 8005762:	18e1      	adds	r1, r4, r3
 8005764:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800576e:	4422      	add	r2, r4
 8005770:	3302      	adds	r3, #2
 8005772:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005776:	e7c5      	b.n	8005704 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa8>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x92>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	4691      	mov	r9, r2
 8005794:	2f78      	cmp	r7, #120	; 0x78
 8005796:	4680      	mov	r8, r0
 8005798:	460c      	mov	r4, r1
 800579a:	469a      	mov	sl, r3
 800579c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800579e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	; 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d9 	beq.w	8005960 <_printf_i+0x1d4>
 80057ae:	2f58      	cmp	r7, #88	; 0x58
 80057b0:	f000 80a4 	beq.w	80058fc <_printf_i+0x170>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005947 	.word	0x08005947
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005929 	.word	0x08005929
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	08005969 	.word	0x08005969
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	08005931 	.word	0x08005931
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e0a4      	b.n	8005982 <_printf_i+0x1f6>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	f101 0304 	add.w	r3, r1, #4
 8005842:	d50a      	bpl.n	800585a <_printf_i+0xce>
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	2e00      	cmp	r6, #0
 800584a:	da03      	bge.n	8005854 <_printf_i+0xc8>
 800584c:	232d      	movs	r3, #45	; 0x2d
 800584e:	4276      	negs	r6, r6
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	230a      	movs	r3, #10
 8005856:	485e      	ldr	r0, [pc, #376]	; (80059d0 <_printf_i+0x244>)
 8005858:	e019      	b.n	800588e <_printf_i+0x102>
 800585a:	680e      	ldr	r6, [r1, #0]
 800585c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	bf18      	it	ne
 8005864:	b236      	sxthne	r6, r6
 8005866:	e7ef      	b.n	8005848 <_printf_i+0xbc>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6029      	str	r1, [r5, #0]
 8005870:	0601      	lsls	r1, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xec>
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0xf2>
 8005878:	0646      	lsls	r6, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xe8>
 800587c:	881e      	ldrh	r6, [r3, #0]
 800587e:	2f6f      	cmp	r7, #111	; 0x6f
 8005880:	bf0c      	ite	eq
 8005882:	2308      	moveq	r3, #8
 8005884:	230a      	movne	r3, #10
 8005886:	4852      	ldr	r0, [pc, #328]	; (80059d0 <_printf_i+0x244>)
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588e:	6865      	ldr	r5, [r4, #4]
 8005890:	2d00      	cmp	r5, #0
 8005892:	bfa8      	it	ge
 8005894:	6821      	ldrge	r1, [r4, #0]
 8005896:	60a5      	str	r5, [r4, #8]
 8005898:	bfa4      	itt	ge
 800589a:	f021 0104 	bicge.w	r1, r1, #4
 800589e:	6021      	strge	r1, [r4, #0]
 80058a0:	b90e      	cbnz	r6, 80058a6 <_printf_i+0x11a>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d04d      	beq.n	8005942 <_printf_i+0x1b6>
 80058a6:	4615      	mov	r5, r2
 80058a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ac:	fb03 6711 	mls	r7, r3, r1, r6
 80058b0:	5dc7      	ldrb	r7, [r0, r7]
 80058b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b6:	4637      	mov	r7, r6
 80058b8:	42bb      	cmp	r3, r7
 80058ba:	460e      	mov	r6, r1
 80058bc:	d9f4      	bls.n	80058a8 <_printf_i+0x11c>
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d10b      	bne.n	80058da <_printf_i+0x14e>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	07de      	lsls	r6, r3, #31
 80058c6:	d508      	bpl.n	80058da <_printf_i+0x14e>
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	6861      	ldr	r1, [r4, #4]
 80058cc:	4299      	cmp	r1, r3
 80058ce:	bfde      	ittt	le
 80058d0:	2330      	movle	r3, #48	; 0x30
 80058d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058da:	1b52      	subs	r2, r2, r5
 80058dc:	6122      	str	r2, [r4, #16]
 80058de:	464b      	mov	r3, r9
 80058e0:	4621      	mov	r1, r4
 80058e2:	4640      	mov	r0, r8
 80058e4:	f8cd a000 	str.w	sl, [sp]
 80058e8:	aa03      	add	r2, sp, #12
 80058ea:	f7ff fedf 	bl	80056ac <_printf_common>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d14c      	bne.n	800598c <_printf_i+0x200>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f6:	b004      	add	sp, #16
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	4834      	ldr	r0, [pc, #208]	; (80059d0 <_printf_i+0x244>)
 80058fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005902:	6829      	ldr	r1, [r5, #0]
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f851 6b04 	ldr.w	r6, [r1], #4
 800590a:	6029      	str	r1, [r5, #0]
 800590c:	061d      	lsls	r5, r3, #24
 800590e:	d514      	bpl.n	800593a <_printf_i+0x1ae>
 8005910:	07df      	lsls	r7, r3, #31
 8005912:	bf44      	itt	mi
 8005914:	f043 0320 	orrmi.w	r3, r3, #32
 8005918:	6023      	strmi	r3, [r4, #0]
 800591a:	b91e      	cbnz	r6, 8005924 <_printf_i+0x198>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f023 0320 	bic.w	r3, r3, #32
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	2310      	movs	r3, #16
 8005926:	e7af      	b.n	8005888 <_printf_i+0xfc>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	f043 0320 	orr.w	r3, r3, #32
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	2378      	movs	r3, #120	; 0x78
 8005932:	4828      	ldr	r0, [pc, #160]	; (80059d4 <_printf_i+0x248>)
 8005934:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005938:	e7e3      	b.n	8005902 <_printf_i+0x176>
 800593a:	0659      	lsls	r1, r3, #25
 800593c:	bf48      	it	mi
 800593e:	b2b6      	uxthmi	r6, r6
 8005940:	e7e6      	b.n	8005910 <_printf_i+0x184>
 8005942:	4615      	mov	r5, r2
 8005944:	e7bb      	b.n	80058be <_printf_i+0x132>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	6826      	ldr	r6, [r4, #0]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6961      	ldr	r1, [r4, #20]
 800594e:	6028      	str	r0, [r5, #0]
 8005950:	0635      	lsls	r5, r6, #24
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	d501      	bpl.n	800595a <_printf_i+0x1ce>
 8005956:	6019      	str	r1, [r3, #0]
 8005958:	e002      	b.n	8005960 <_printf_i+0x1d4>
 800595a:	0670      	lsls	r0, r6, #25
 800595c:	d5fb      	bpl.n	8005956 <_printf_i+0x1ca>
 800595e:	8019      	strh	r1, [r3, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	4615      	mov	r5, r2
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	e7ba      	b.n	80058de <_printf_i+0x152>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	2100      	movs	r1, #0
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	681d      	ldr	r5, [r3, #0]
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	4628      	mov	r0, r5
 8005976:	f000 fedd 	bl	8006734 <memchr>
 800597a:	b108      	cbz	r0, 8005980 <_printf_i+0x1f4>
 800597c:	1b40      	subs	r0, r0, r5
 800597e:	6060      	str	r0, [r4, #4]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2300      	movs	r3, #0
 8005986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598a:	e7a8      	b.n	80058de <_printf_i+0x152>
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	47d0      	blx	sl
 8005996:	3001      	adds	r0, #1
 8005998:	d0ab      	beq.n	80058f2 <_printf_i+0x166>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	079b      	lsls	r3, r3, #30
 800599e:	d413      	bmi.n	80059c8 <_printf_i+0x23c>
 80059a0:	68e0      	ldr	r0, [r4, #12]
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	4298      	cmp	r0, r3
 80059a6:	bfb8      	it	lt
 80059a8:	4618      	movlt	r0, r3
 80059aa:	e7a4      	b.n	80058f6 <_printf_i+0x16a>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4632      	mov	r2, r6
 80059b0:	4649      	mov	r1, r9
 80059b2:	4640      	mov	r0, r8
 80059b4:	47d0      	blx	sl
 80059b6:	3001      	adds	r0, #1
 80059b8:	d09b      	beq.n	80058f2 <_printf_i+0x166>
 80059ba:	3501      	adds	r5, #1
 80059bc:	68e3      	ldr	r3, [r4, #12]
 80059be:	9903      	ldr	r1, [sp, #12]
 80059c0:	1a5b      	subs	r3, r3, r1
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	dcf2      	bgt.n	80059ac <_printf_i+0x220>
 80059c6:	e7eb      	b.n	80059a0 <_printf_i+0x214>
 80059c8:	2500      	movs	r5, #0
 80059ca:	f104 0619 	add.w	r6, r4, #25
 80059ce:	e7f5      	b.n	80059bc <_printf_i+0x230>
 80059d0:	08008cae 	.word	0x08008cae
 80059d4:	08008cbf 	.word	0x08008cbf

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	2300      	movs	r3, #0
 80059dc:	4d05      	ldr	r5, [pc, #20]	; (80059f4 <_sbrk_r+0x1c>)
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fc ffe4 	bl	80029b0 <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000700 	.word	0x20000700

080059f8 <siprintf>:
 80059f8:	b40e      	push	{r1, r2, r3}
 80059fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059fe:	b500      	push	{lr}
 8005a00:	b09c      	sub	sp, #112	; 0x70
 8005a02:	ab1d      	add	r3, sp, #116	; 0x74
 8005a04:	9002      	str	r0, [sp, #8]
 8005a06:	9006      	str	r0, [sp, #24]
 8005a08:	9107      	str	r1, [sp, #28]
 8005a0a:	9104      	str	r1, [sp, #16]
 8005a0c:	4808      	ldr	r0, [pc, #32]	; (8005a30 <siprintf+0x38>)
 8005a0e:	4909      	ldr	r1, [pc, #36]	; (8005a34 <siprintf+0x3c>)
 8005a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a14:	9105      	str	r1, [sp, #20]
 8005a16:	6800      	ldr	r0, [r0, #0]
 8005a18:	a902      	add	r1, sp, #8
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	f001 faa4 	bl	8006f68 <_svfiprintf_r>
 8005a20:	2200      	movs	r2, #0
 8005a22:	9b02      	ldr	r3, [sp, #8]
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	b01c      	add	sp, #112	; 0x70
 8005a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a2c:	b003      	add	sp, #12
 8005a2e:	4770      	bx	lr
 8005a30:	20000040 	.word	0x20000040
 8005a34:	ffff0208 	.word	0xffff0208

08005a38 <quorem>:
 8005a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	6903      	ldr	r3, [r0, #16]
 8005a3e:	690c      	ldr	r4, [r1, #16]
 8005a40:	4607      	mov	r7, r0
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	f2c0 8082 	blt.w	8005b4c <quorem+0x114>
 8005a48:	3c01      	subs	r4, #1
 8005a4a:	f100 0514 	add.w	r5, r0, #20
 8005a4e:	f101 0814 	add.w	r8, r1, #20
 8005a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a60:	3301      	adds	r3, #1
 8005a62:	429a      	cmp	r2, r3
 8005a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a70:	d331      	bcc.n	8005ad6 <quorem+0x9e>
 8005a72:	f04f 0e00 	mov.w	lr, #0
 8005a76:	4640      	mov	r0, r8
 8005a78:	46ac      	mov	ip, r5
 8005a7a:	46f2      	mov	sl, lr
 8005a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a80:	b293      	uxth	r3, r2
 8005a82:	fb06 e303 	mla	r3, r6, r3, lr
 8005a86:	0c12      	lsrs	r2, r2, #16
 8005a88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	fb06 e202 	mla	r2, r6, r2, lr
 8005a92:	ebaa 0303 	sub.w	r3, sl, r3
 8005a96:	f8dc a000 	ldr.w	sl, [ip]
 8005a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a9e:	fa1f fa8a 	uxth.w	sl, sl
 8005aa2:	4453      	add	r3, sl
 8005aa4:	f8dc a000 	ldr.w	sl, [ip]
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005aae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ab8:	4581      	cmp	r9, r0
 8005aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005abe:	f84c 3b04 	str.w	r3, [ip], #4
 8005ac2:	d2db      	bcs.n	8005a7c <quorem+0x44>
 8005ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ac8:	b92b      	cbnz	r3, 8005ad6 <quorem+0x9e>
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	429d      	cmp	r5, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	d32f      	bcc.n	8005b34 <quorem+0xfc>
 8005ad4:	613c      	str	r4, [r7, #16]
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f001 f8d2 	bl	8006c80 <__mcmp>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	db25      	blt.n	8005b2c <quorem+0xf4>
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f04f 0c00 	mov.w	ip, #0
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	f858 1b04 	ldr.w	r1, [r8], #4
 8005aec:	f8d0 e000 	ldr.w	lr, [r0]
 8005af0:	b28b      	uxth	r3, r1
 8005af2:	ebac 0303 	sub.w	r3, ip, r3
 8005af6:	fa1f f28e 	uxth.w	r2, lr
 8005afa:	4413      	add	r3, r2
 8005afc:	0c0a      	lsrs	r2, r1, #16
 8005afe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b0c:	45c1      	cmp	r9, r8
 8005b0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b12:	f840 3b04 	str.w	r3, [r0], #4
 8005b16:	d2e7      	bcs.n	8005ae8 <quorem+0xb0>
 8005b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b20:	b922      	cbnz	r2, 8005b2c <quorem+0xf4>
 8005b22:	3b04      	subs	r3, #4
 8005b24:	429d      	cmp	r5, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	d30a      	bcc.n	8005b40 <quorem+0x108>
 8005b2a:	613c      	str	r4, [r7, #16]
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	b003      	add	sp, #12
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	3b04      	subs	r3, #4
 8005b38:	2a00      	cmp	r2, #0
 8005b3a:	d1cb      	bne.n	8005ad4 <quorem+0x9c>
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	e7c6      	b.n	8005ace <quorem+0x96>
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	3b04      	subs	r3, #4
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d1f0      	bne.n	8005b2a <quorem+0xf2>
 8005b48:	3c01      	subs	r4, #1
 8005b4a:	e7eb      	b.n	8005b24 <quorem+0xec>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7ee      	b.n	8005b2e <quorem+0xf6>

08005b50 <_dtoa_r>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	4616      	mov	r6, r2
 8005b56:	461f      	mov	r7, r3
 8005b58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b5a:	b099      	sub	sp, #100	; 0x64
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005b62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005b66:	b974      	cbnz	r4, 8005b86 <_dtoa_r+0x36>
 8005b68:	2010      	movs	r0, #16
 8005b6a:	f7ff f9c7 	bl	8004efc <malloc>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6268      	str	r0, [r5, #36]	; 0x24
 8005b72:	b920      	cbnz	r0, 8005b7e <_dtoa_r+0x2e>
 8005b74:	21ea      	movs	r1, #234	; 0xea
 8005b76:	4ba8      	ldr	r3, [pc, #672]	; (8005e18 <_dtoa_r+0x2c8>)
 8005b78:	48a8      	ldr	r0, [pc, #672]	; (8005e1c <_dtoa_r+0x2cc>)
 8005b7a:	f001 faf5 	bl	8007168 <__assert_func>
 8005b7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b82:	6004      	str	r4, [r0, #0]
 8005b84:	60c4      	str	r4, [r0, #12]
 8005b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	b151      	cbz	r1, 8005ba2 <_dtoa_r+0x52>
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4093      	lsls	r3, r2
 8005b92:	604a      	str	r2, [r1, #4]
 8005b94:	608b      	str	r3, [r1, #8]
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 fe34 	bl	8006804 <_Bfree>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	1e3b      	subs	r3, r7, #0
 8005ba4:	bfaf      	iteee	ge
 8005ba6:	2300      	movge	r3, #0
 8005ba8:	2201      	movlt	r2, #1
 8005baa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	9305      	strlt	r3, [sp, #20]
 8005bb0:	bfa8      	it	ge
 8005bb2:	f8c8 3000 	strge.w	r3, [r8]
 8005bb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005bba:	4b99      	ldr	r3, [pc, #612]	; (8005e20 <_dtoa_r+0x2d0>)
 8005bbc:	bfb8      	it	lt
 8005bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8005bc2:	ea33 0309 	bics.w	r3, r3, r9
 8005bc6:	d119      	bne.n	8005bfc <_dtoa_r+0xac>
 8005bc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bd4:	4333      	orrs	r3, r6
 8005bd6:	f000 857f 	beq.w	80066d8 <_dtoa_r+0xb88>
 8005bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bdc:	b953      	cbnz	r3, 8005bf4 <_dtoa_r+0xa4>
 8005bde:	4b91      	ldr	r3, [pc, #580]	; (8005e24 <_dtoa_r+0x2d4>)
 8005be0:	e022      	b.n	8005c28 <_dtoa_r+0xd8>
 8005be2:	4b91      	ldr	r3, [pc, #580]	; (8005e28 <_dtoa_r+0x2d8>)
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	3308      	adds	r3, #8
 8005be8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	9803      	ldr	r0, [sp, #12]
 8005bee:	b019      	add	sp, #100	; 0x64
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <_dtoa_r+0x2d4>)
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	3303      	adds	r3, #3
 8005bfa:	e7f5      	b.n	8005be8 <_dtoa_r+0x98>
 8005bfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f7fa ff38 	bl	8000a80 <__aeabi_dcmpeq>
 8005c10:	4680      	mov	r8, r0
 8005c12:	b158      	cbz	r0, 8005c2c <_dtoa_r+0xdc>
 8005c14:	2301      	movs	r3, #1
 8005c16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8558 	beq.w	80066d2 <_dtoa_r+0xb82>
 8005c22:	4882      	ldr	r0, [pc, #520]	; (8005e2c <_dtoa_r+0x2dc>)
 8005c24:	6018      	str	r0, [r3, #0]
 8005c26:	1e43      	subs	r3, r0, #1
 8005c28:	9303      	str	r3, [sp, #12]
 8005c2a:	e7df      	b.n	8005bec <_dtoa_r+0x9c>
 8005c2c:	ab16      	add	r3, sp, #88	; 0x58
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	ab17      	add	r3, sp, #92	; 0x5c
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4628      	mov	r0, r5
 8005c36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c3a:	f001 f8c9 	bl	8006dd0 <__d2b>
 8005c3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c42:	4683      	mov	fp, r0
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d07f      	beq.n	8005d48 <_dtoa_r+0x1f8>
 8005c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005c5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005c5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005c62:	2200      	movs	r2, #0
 8005c64:	4b72      	ldr	r3, [pc, #456]	; (8005e30 <_dtoa_r+0x2e0>)
 8005c66:	f7fa faeb 	bl	8000240 <__aeabi_dsub>
 8005c6a:	a365      	add	r3, pc, #404	; (adr r3, 8005e00 <_dtoa_r+0x2b0>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fc9e 	bl	80005b0 <__aeabi_dmul>
 8005c74:	a364      	add	r3, pc, #400	; (adr r3, 8005e08 <_dtoa_r+0x2b8>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fae3 	bl	8000244 <__adddf3>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	4620      	mov	r0, r4
 8005c82:	460f      	mov	r7, r1
 8005c84:	f7fa fc2a 	bl	80004dc <__aeabi_i2d>
 8005c88:	a361      	add	r3, pc, #388	; (adr r3, 8005e10 <_dtoa_r+0x2c0>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fc8f 	bl	80005b0 <__aeabi_dmul>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa fad3 	bl	8000244 <__adddf3>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	f7fa ff35 	bl	8000b10 <__aeabi_d2iz>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4682      	mov	sl, r0
 8005caa:	2300      	movs	r3, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa fef0 	bl	8000a94 <__aeabi_dcmplt>
 8005cb4:	b148      	cbz	r0, 8005cca <_dtoa_r+0x17a>
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	f7fa fc10 	bl	80004dc <__aeabi_i2d>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f7fa fede 	bl	8000a80 <__aeabi_dcmpeq>
 8005cc4:	b908      	cbnz	r0, 8005cca <_dtoa_r+0x17a>
 8005cc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cca:	f1ba 0f16 	cmp.w	sl, #22
 8005cce:	d858      	bhi.n	8005d82 <_dtoa_r+0x232>
 8005cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cd4:	4b57      	ldr	r3, [pc, #348]	; (8005e34 <_dtoa_r+0x2e4>)
 8005cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fed9 	bl	8000a94 <__aeabi_dcmplt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d04f      	beq.n	8005d86 <_dtoa_r+0x236>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cf0:	1b1c      	subs	r4, r3, r4
 8005cf2:	1e63      	subs	r3, r4, #1
 8005cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf6:	bf49      	itett	mi
 8005cf8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005cfc:	2300      	movpl	r3, #0
 8005cfe:	9306      	strmi	r3, [sp, #24]
 8005d00:	2300      	movmi	r3, #0
 8005d02:	bf54      	ite	pl
 8005d04:	9306      	strpl	r3, [sp, #24]
 8005d06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	db3d      	blt.n	8005d8a <_dtoa_r+0x23a>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d14:	4453      	add	r3, sl
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	2300      	movs	r3, #0
 8005d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	f200 808c 	bhi.w	8005e3c <_dtoa_r+0x2ec>
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	bfc4      	itt	gt
 8005d28:	3b04      	subgt	r3, #4
 8005d2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d2e:	bfc8      	it	gt
 8005d30:	2400      	movgt	r4, #0
 8005d32:	f1a3 0302 	sub.w	r3, r3, #2
 8005d36:	bfd8      	it	le
 8005d38:	2401      	movle	r4, #1
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	f200 808a 	bhi.w	8005e54 <_dtoa_r+0x304>
 8005d40:	e8df f003 	tbb	[pc, r3]
 8005d44:	5b4d4f2d 	.word	0x5b4d4f2d
 8005d48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005d4c:	441c      	add	r4, r3
 8005d4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	bfc3      	ittte	gt
 8005d56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005d5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005d62:	f1c3 0320 	rsble	r3, r3, #32
 8005d66:	bfc6      	itte	gt
 8005d68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d6c:	4318      	orrgt	r0, r3
 8005d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8005d72:	f7fa fba3 	bl	80004bc <__aeabi_ui2d>
 8005d76:	2301      	movs	r3, #1
 8005d78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005d7c:	3c01      	subs	r4, #1
 8005d7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d80:	e76f      	b.n	8005c62 <_dtoa_r+0x112>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e7b2      	b.n	8005cec <_dtoa_r+0x19c>
 8005d86:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d88:	e7b1      	b.n	8005cee <_dtoa_r+0x19e>
 8005d8a:	9b06      	ldr	r3, [sp, #24]
 8005d8c:	eba3 030a 	sub.w	r3, r3, sl
 8005d90:	9306      	str	r3, [sp, #24]
 8005d92:	f1ca 0300 	rsb	r3, sl, #0
 8005d96:	930a      	str	r3, [sp, #40]	; 0x28
 8005d98:	2300      	movs	r3, #0
 8005d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d9c:	e7be      	b.n	8005d1c <_dtoa_r+0x1cc>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dc58      	bgt.n	8005e5a <_dtoa_r+0x30a>
 8005da8:	f04f 0901 	mov.w	r9, #1
 8005dac:	464b      	mov	r3, r9
 8005dae:	f8cd 9020 	str.w	r9, [sp, #32]
 8005db2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005db6:	2200      	movs	r2, #0
 8005db8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005dba:	6042      	str	r2, [r0, #4]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	f102 0614 	add.w	r6, r2, #20
 8005dc2:	429e      	cmp	r6, r3
 8005dc4:	6841      	ldr	r1, [r0, #4]
 8005dc6:	d94e      	bls.n	8005e66 <_dtoa_r+0x316>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 fcdb 	bl	8006784 <_Balloc>
 8005dce:	9003      	str	r0, [sp, #12]
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d14c      	bne.n	8005e6e <_dtoa_r+0x31e>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <_dtoa_r+0x2e8>)
 8005ddc:	e6cc      	b.n	8005b78 <_dtoa_r+0x28>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e7de      	b.n	8005da0 <_dtoa_r+0x250>
 8005de2:	2300      	movs	r3, #0
 8005de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005de8:	eb0a 0903 	add.w	r9, sl, r3
 8005dec:	f109 0301 	add.w	r3, r9, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	9308      	str	r3, [sp, #32]
 8005df4:	bfb8      	it	lt
 8005df6:	2301      	movlt	r3, #1
 8005df8:	e7dd      	b.n	8005db6 <_dtoa_r+0x266>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7f2      	b.n	8005de4 <_dtoa_r+0x294>
 8005dfe:	bf00      	nop
 8005e00:	636f4361 	.word	0x636f4361
 8005e04:	3fd287a7 	.word	0x3fd287a7
 8005e08:	8b60c8b3 	.word	0x8b60c8b3
 8005e0c:	3fc68a28 	.word	0x3fc68a28
 8005e10:	509f79fb 	.word	0x509f79fb
 8005e14:	3fd34413 	.word	0x3fd34413
 8005e18:	08008cdd 	.word	0x08008cdd
 8005e1c:	08008cf4 	.word	0x08008cf4
 8005e20:	7ff00000 	.word	0x7ff00000
 8005e24:	08008cd9 	.word	0x08008cd9
 8005e28:	08008cd0 	.word	0x08008cd0
 8005e2c:	08008cad 	.word	0x08008cad
 8005e30:	3ff80000 	.word	0x3ff80000
 8005e34:	08008de8 	.word	0x08008de8
 8005e38:	08008d4f 	.word	0x08008d4f
 8005e3c:	2401      	movs	r4, #1
 8005e3e:	2300      	movs	r3, #0
 8005e40:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e42:	9322      	str	r3, [sp, #136]	; 0x88
 8005e44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2312      	movs	r3, #18
 8005e4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005e50:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e52:	e7b0      	b.n	8005db6 <_dtoa_r+0x266>
 8005e54:	2301      	movs	r3, #1
 8005e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e58:	e7f4      	b.n	8005e44 <_dtoa_r+0x2f4>
 8005e5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005e5e:	464b      	mov	r3, r9
 8005e60:	f8cd 9020 	str.w	r9, [sp, #32]
 8005e64:	e7a7      	b.n	8005db6 <_dtoa_r+0x266>
 8005e66:	3101      	adds	r1, #1
 8005e68:	6041      	str	r1, [r0, #4]
 8005e6a:	0052      	lsls	r2, r2, #1
 8005e6c:	e7a7      	b.n	8005dbe <_dtoa_r+0x26e>
 8005e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e70:	9a03      	ldr	r2, [sp, #12]
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	9b08      	ldr	r3, [sp, #32]
 8005e76:	2b0e      	cmp	r3, #14
 8005e78:	f200 80a8 	bhi.w	8005fcc <_dtoa_r+0x47c>
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	f000 80a5 	beq.w	8005fcc <_dtoa_r+0x47c>
 8005e82:	f1ba 0f00 	cmp.w	sl, #0
 8005e86:	dd34      	ble.n	8005ef2 <_dtoa_r+0x3a2>
 8005e88:	4a9a      	ldr	r2, [pc, #616]	; (80060f4 <_dtoa_r+0x5a4>)
 8005e8a:	f00a 030f 	and.w	r3, sl, #15
 8005e8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005e96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005ea2:	d016      	beq.n	8005ed2 <_dtoa_r+0x382>
 8005ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ea8:	4b93      	ldr	r3, [pc, #588]	; (80060f8 <_dtoa_r+0x5a8>)
 8005eaa:	2703      	movs	r7, #3
 8005eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eb0:	f7fa fca8 	bl	8000804 <__aeabi_ddiv>
 8005eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eb8:	f004 040f 	and.w	r4, r4, #15
 8005ebc:	4e8e      	ldr	r6, [pc, #568]	; (80060f8 <_dtoa_r+0x5a8>)
 8005ebe:	b954      	cbnz	r4, 8005ed6 <_dtoa_r+0x386>
 8005ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ec8:	f7fa fc9c 	bl	8000804 <__aeabi_ddiv>
 8005ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ed0:	e029      	b.n	8005f26 <_dtoa_r+0x3d6>
 8005ed2:	2702      	movs	r7, #2
 8005ed4:	e7f2      	b.n	8005ebc <_dtoa_r+0x36c>
 8005ed6:	07e1      	lsls	r1, r4, #31
 8005ed8:	d508      	bpl.n	8005eec <_dtoa_r+0x39c>
 8005eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ede:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ee2:	f7fa fb65 	bl	80005b0 <__aeabi_dmul>
 8005ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eea:	3701      	adds	r7, #1
 8005eec:	1064      	asrs	r4, r4, #1
 8005eee:	3608      	adds	r6, #8
 8005ef0:	e7e5      	b.n	8005ebe <_dtoa_r+0x36e>
 8005ef2:	f000 80a5 	beq.w	8006040 <_dtoa_r+0x4f0>
 8005ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005efa:	f1ca 0400 	rsb	r4, sl, #0
 8005efe:	4b7d      	ldr	r3, [pc, #500]	; (80060f4 <_dtoa_r+0x5a4>)
 8005f00:	f004 020f 	and.w	r2, r4, #15
 8005f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fb50 	bl	80005b0 <__aeabi_dmul>
 8005f10:	2702      	movs	r7, #2
 8005f12:	2300      	movs	r3, #0
 8005f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f18:	4e77      	ldr	r6, [pc, #476]	; (80060f8 <_dtoa_r+0x5a8>)
 8005f1a:	1124      	asrs	r4, r4, #4
 8005f1c:	2c00      	cmp	r4, #0
 8005f1e:	f040 8084 	bne.w	800602a <_dtoa_r+0x4da>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d2      	bne.n	8005ecc <_dtoa_r+0x37c>
 8005f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 808b 	beq.w	8006044 <_dtoa_r+0x4f4>
 8005f2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4b6f      	ldr	r3, [pc, #444]	; (80060fc <_dtoa_r+0x5ac>)
 8005f3e:	f7fa fda9 	bl	8000a94 <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d07e      	beq.n	8006044 <_dtoa_r+0x4f4>
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d07b      	beq.n	8006044 <_dtoa_r+0x4f4>
 8005f4c:	f1b9 0f00 	cmp.w	r9, #0
 8005f50:	dd38      	ble.n	8005fc4 <_dtoa_r+0x474>
 8005f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b69      	ldr	r3, [pc, #420]	; (8006100 <_dtoa_r+0x5b0>)
 8005f5a:	f7fa fb29 	bl	80005b0 <__aeabi_dmul>
 8005f5e:	464c      	mov	r4, r9
 8005f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f64:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005f68:	3701      	adds	r7, #1
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f7fa fab6 	bl	80004dc <__aeabi_i2d>
 8005f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f74:	f7fa fb1c 	bl	80005b0 <__aeabi_dmul>
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b62      	ldr	r3, [pc, #392]	; (8006104 <_dtoa_r+0x5b4>)
 8005f7c:	f7fa f962 	bl	8000244 <__adddf3>
 8005f80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f88:	9611      	str	r6, [sp, #68]	; 0x44
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	d15d      	bne.n	800604a <_dtoa_r+0x4fa>
 8005f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b5c      	ldr	r3, [pc, #368]	; (8006108 <_dtoa_r+0x5b8>)
 8005f96:	f7fa f953 	bl	8000240 <__aeabi_dsub>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fa2:	4633      	mov	r3, r6
 8005fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fa6:	f7fa fd93 	bl	8000ad0 <__aeabi_dcmpgt>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f040 829c 	bne.w	80064e8 <_dtoa_r+0x998>
 8005fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fba:	f7fa fd6b 	bl	8000a94 <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f040 8290 	bne.w	80064e4 <_dtoa_r+0x994>
 8005fc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005fc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f2c0 8152 	blt.w	8006278 <_dtoa_r+0x728>
 8005fd4:	f1ba 0f0e 	cmp.w	sl, #14
 8005fd8:	f300 814e 	bgt.w	8006278 <_dtoa_r+0x728>
 8005fdc:	4b45      	ldr	r3, [pc, #276]	; (80060f4 <_dtoa_r+0x5a4>)
 8005fde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005fe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f280 80db 	bge.w	80061a8 <_dtoa_r+0x658>
 8005ff2:	9b08      	ldr	r3, [sp, #32]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f300 80d7 	bgt.w	80061a8 <_dtoa_r+0x658>
 8005ffa:	f040 8272 	bne.w	80064e2 <_dtoa_r+0x992>
 8005ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006002:	2200      	movs	r2, #0
 8006004:	4b40      	ldr	r3, [pc, #256]	; (8006108 <_dtoa_r+0x5b8>)
 8006006:	f7fa fad3 	bl	80005b0 <__aeabi_dmul>
 800600a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800600e:	f7fa fd55 	bl	8000abc <__aeabi_dcmpge>
 8006012:	9c08      	ldr	r4, [sp, #32]
 8006014:	4626      	mov	r6, r4
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 8248 	bne.w	80064ac <_dtoa_r+0x95c>
 800601c:	2331      	movs	r3, #49	; 0x31
 800601e:	9f03      	ldr	r7, [sp, #12]
 8006020:	f10a 0a01 	add.w	sl, sl, #1
 8006024:	f807 3b01 	strb.w	r3, [r7], #1
 8006028:	e244      	b.n	80064b4 <_dtoa_r+0x964>
 800602a:	07e2      	lsls	r2, r4, #31
 800602c:	d505      	bpl.n	800603a <_dtoa_r+0x4ea>
 800602e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006032:	f7fa fabd 	bl	80005b0 <__aeabi_dmul>
 8006036:	2301      	movs	r3, #1
 8006038:	3701      	adds	r7, #1
 800603a:	1064      	asrs	r4, r4, #1
 800603c:	3608      	adds	r6, #8
 800603e:	e76d      	b.n	8005f1c <_dtoa_r+0x3cc>
 8006040:	2702      	movs	r7, #2
 8006042:	e770      	b.n	8005f26 <_dtoa_r+0x3d6>
 8006044:	46d0      	mov	r8, sl
 8006046:	9c08      	ldr	r4, [sp, #32]
 8006048:	e78f      	b.n	8005f6a <_dtoa_r+0x41a>
 800604a:	9903      	ldr	r1, [sp, #12]
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <_dtoa_r+0x5a4>)
 800604e:	4421      	add	r1, r4
 8006050:	9112      	str	r1, [sp, #72]	; 0x48
 8006052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006058:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800605c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006060:	2900      	cmp	r1, #0
 8006062:	d055      	beq.n	8006110 <_dtoa_r+0x5c0>
 8006064:	2000      	movs	r0, #0
 8006066:	4929      	ldr	r1, [pc, #164]	; (800610c <_dtoa_r+0x5bc>)
 8006068:	f7fa fbcc 	bl	8000804 <__aeabi_ddiv>
 800606c:	463b      	mov	r3, r7
 800606e:	4632      	mov	r2, r6
 8006070:	f7fa f8e6 	bl	8000240 <__aeabi_dsub>
 8006074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006078:	9f03      	ldr	r7, [sp, #12]
 800607a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607e:	f7fa fd47 	bl	8000b10 <__aeabi_d2iz>
 8006082:	4604      	mov	r4, r0
 8006084:	f7fa fa2a 	bl	80004dc <__aeabi_i2d>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006090:	f7fa f8d6 	bl	8000240 <__aeabi_dsub>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	3430      	adds	r4, #48	; 0x30
 800609a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800609e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060a2:	f807 4b01 	strb.w	r4, [r7], #1
 80060a6:	f7fa fcf5 	bl	8000a94 <__aeabi_dcmplt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d174      	bne.n	8006198 <_dtoa_r+0x648>
 80060ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b2:	2000      	movs	r0, #0
 80060b4:	4911      	ldr	r1, [pc, #68]	; (80060fc <_dtoa_r+0x5ac>)
 80060b6:	f7fa f8c3 	bl	8000240 <__aeabi_dsub>
 80060ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060be:	f7fa fce9 	bl	8000a94 <__aeabi_dcmplt>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f040 80b7 	bne.w	8006236 <_dtoa_r+0x6e6>
 80060c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ca:	429f      	cmp	r7, r3
 80060cc:	f43f af7a 	beq.w	8005fc4 <_dtoa_r+0x474>
 80060d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <_dtoa_r+0x5b0>)
 80060d8:	f7fa fa6a 	bl	80005b0 <__aeabi_dmul>
 80060dc:	2200      	movs	r2, #0
 80060de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <_dtoa_r+0x5b0>)
 80060e8:	f7fa fa62 	bl	80005b0 <__aeabi_dmul>
 80060ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060f0:	e7c3      	b.n	800607a <_dtoa_r+0x52a>
 80060f2:	bf00      	nop
 80060f4:	08008de8 	.word	0x08008de8
 80060f8:	08008dc0 	.word	0x08008dc0
 80060fc:	3ff00000 	.word	0x3ff00000
 8006100:	40240000 	.word	0x40240000
 8006104:	401c0000 	.word	0x401c0000
 8006108:	40140000 	.word	0x40140000
 800610c:	3fe00000 	.word	0x3fe00000
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa fa4c 	bl	80005b0 <__aeabi_dmul>
 8006118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800611a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800611e:	9c03      	ldr	r4, [sp, #12]
 8006120:	9314      	str	r3, [sp, #80]	; 0x50
 8006122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006126:	f7fa fcf3 	bl	8000b10 <__aeabi_d2iz>
 800612a:	9015      	str	r0, [sp, #84]	; 0x54
 800612c:	f7fa f9d6 	bl	80004dc <__aeabi_i2d>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006138:	f7fa f882 	bl	8000240 <__aeabi_dsub>
 800613c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800613e:	4606      	mov	r6, r0
 8006140:	3330      	adds	r3, #48	; 0x30
 8006142:	f804 3b01 	strb.w	r3, [r4], #1
 8006146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006148:	460f      	mov	r7, r1
 800614a:	429c      	cmp	r4, r3
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	d124      	bne.n	800619c <_dtoa_r+0x64c>
 8006152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006156:	4bb0      	ldr	r3, [pc, #704]	; (8006418 <_dtoa_r+0x8c8>)
 8006158:	f7fa f874 	bl	8000244 <__adddf3>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa fcb4 	bl	8000ad0 <__aeabi_dcmpgt>
 8006168:	2800      	cmp	r0, #0
 800616a:	d163      	bne.n	8006234 <_dtoa_r+0x6e4>
 800616c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006170:	2000      	movs	r0, #0
 8006172:	49a9      	ldr	r1, [pc, #676]	; (8006418 <_dtoa_r+0x8c8>)
 8006174:	f7fa f864 	bl	8000240 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4630      	mov	r0, r6
 800617e:	4639      	mov	r1, r7
 8006180:	f7fa fc88 	bl	8000a94 <__aeabi_dcmplt>
 8006184:	2800      	cmp	r0, #0
 8006186:	f43f af1d 	beq.w	8005fc4 <_dtoa_r+0x474>
 800618a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800618c:	1e7b      	subs	r3, r7, #1
 800618e:	9314      	str	r3, [sp, #80]	; 0x50
 8006190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d0f8      	beq.n	800618a <_dtoa_r+0x63a>
 8006198:	46c2      	mov	sl, r8
 800619a:	e03b      	b.n	8006214 <_dtoa_r+0x6c4>
 800619c:	4b9f      	ldr	r3, [pc, #636]	; (800641c <_dtoa_r+0x8cc>)
 800619e:	f7fa fa07 	bl	80005b0 <__aeabi_dmul>
 80061a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a6:	e7bc      	b.n	8006122 <_dtoa_r+0x5d2>
 80061a8:	9f03      	ldr	r7, [sp, #12]
 80061aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80061ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061b2:	4640      	mov	r0, r8
 80061b4:	4649      	mov	r1, r9
 80061b6:	f7fa fb25 	bl	8000804 <__aeabi_ddiv>
 80061ba:	f7fa fca9 	bl	8000b10 <__aeabi_d2iz>
 80061be:	4604      	mov	r4, r0
 80061c0:	f7fa f98c 	bl	80004dc <__aeabi_i2d>
 80061c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061c8:	f7fa f9f2 	bl	80005b0 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7fa f834 	bl	8000240 <__aeabi_dsub>
 80061d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80061dc:	f807 6b01 	strb.w	r6, [r7], #1
 80061e0:	9e03      	ldr	r6, [sp, #12]
 80061e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80061e6:	1bbe      	subs	r6, r7, r6
 80061e8:	45b4      	cmp	ip, r6
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	d136      	bne.n	800625e <_dtoa_r+0x70e>
 80061f0:	f7fa f828 	bl	8000244 <__adddf3>
 80061f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f8:	4680      	mov	r8, r0
 80061fa:	4689      	mov	r9, r1
 80061fc:	f7fa fc68 	bl	8000ad0 <__aeabi_dcmpgt>
 8006200:	bb58      	cbnz	r0, 800625a <_dtoa_r+0x70a>
 8006202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa fc39 	bl	8000a80 <__aeabi_dcmpeq>
 800620e:	b108      	cbz	r0, 8006214 <_dtoa_r+0x6c4>
 8006210:	07e1      	lsls	r1, r4, #31
 8006212:	d422      	bmi.n	800625a <_dtoa_r+0x70a>
 8006214:	4628      	mov	r0, r5
 8006216:	4659      	mov	r1, fp
 8006218:	f000 faf4 	bl	8006804 <_Bfree>
 800621c:	2300      	movs	r3, #0
 800621e:	703b      	strb	r3, [r7, #0]
 8006220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006222:	f10a 0001 	add.w	r0, sl, #1
 8006226:	6018      	str	r0, [r3, #0]
 8006228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800622a:	2b00      	cmp	r3, #0
 800622c:	f43f acde 	beq.w	8005bec <_dtoa_r+0x9c>
 8006230:	601f      	str	r7, [r3, #0]
 8006232:	e4db      	b.n	8005bec <_dtoa_r+0x9c>
 8006234:	4627      	mov	r7, r4
 8006236:	463b      	mov	r3, r7
 8006238:	461f      	mov	r7, r3
 800623a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800623e:	2a39      	cmp	r2, #57	; 0x39
 8006240:	d107      	bne.n	8006252 <_dtoa_r+0x702>
 8006242:	9a03      	ldr	r2, [sp, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d1f7      	bne.n	8006238 <_dtoa_r+0x6e8>
 8006248:	2230      	movs	r2, #48	; 0x30
 800624a:	9903      	ldr	r1, [sp, #12]
 800624c:	f108 0801 	add.w	r8, r8, #1
 8006250:	700a      	strb	r2, [r1, #0]
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	3201      	adds	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e79e      	b.n	8006198 <_dtoa_r+0x648>
 800625a:	46d0      	mov	r8, sl
 800625c:	e7eb      	b.n	8006236 <_dtoa_r+0x6e6>
 800625e:	2200      	movs	r2, #0
 8006260:	4b6e      	ldr	r3, [pc, #440]	; (800641c <_dtoa_r+0x8cc>)
 8006262:	f7fa f9a5 	bl	80005b0 <__aeabi_dmul>
 8006266:	2200      	movs	r2, #0
 8006268:	2300      	movs	r3, #0
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	f7fa fc07 	bl	8000a80 <__aeabi_dcmpeq>
 8006272:	2800      	cmp	r0, #0
 8006274:	d09b      	beq.n	80061ae <_dtoa_r+0x65e>
 8006276:	e7cd      	b.n	8006214 <_dtoa_r+0x6c4>
 8006278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800627a:	2a00      	cmp	r2, #0
 800627c:	f000 80d0 	beq.w	8006420 <_dtoa_r+0x8d0>
 8006280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006282:	2a01      	cmp	r2, #1
 8006284:	f300 80ae 	bgt.w	80063e4 <_dtoa_r+0x894>
 8006288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800628a:	2a00      	cmp	r2, #0
 800628c:	f000 80a6 	beq.w	80063dc <_dtoa_r+0x88c>
 8006290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006294:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006296:	9f06      	ldr	r7, [sp, #24]
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	2101      	movs	r1, #1
 800629c:	441a      	add	r2, r3
 800629e:	9206      	str	r2, [sp, #24]
 80062a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a2:	4628      	mov	r0, r5
 80062a4:	441a      	add	r2, r3
 80062a6:	9209      	str	r2, [sp, #36]	; 0x24
 80062a8:	f000 fb62 	bl	8006970 <__i2b>
 80062ac:	4606      	mov	r6, r0
 80062ae:	2f00      	cmp	r7, #0
 80062b0:	dd0c      	ble.n	80062cc <_dtoa_r+0x77c>
 80062b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dd09      	ble.n	80062cc <_dtoa_r+0x77c>
 80062b8:	42bb      	cmp	r3, r7
 80062ba:	bfa8      	it	ge
 80062bc:	463b      	movge	r3, r7
 80062be:	9a06      	ldr	r2, [sp, #24]
 80062c0:	1aff      	subs	r7, r7, r3
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	9206      	str	r2, [sp, #24]
 80062c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	9309      	str	r3, [sp, #36]	; 0x24
 80062cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ce:	b1f3      	cbz	r3, 800630e <_dtoa_r+0x7be>
 80062d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80a8 	beq.w	8006428 <_dtoa_r+0x8d8>
 80062d8:	2c00      	cmp	r4, #0
 80062da:	dd10      	ble.n	80062fe <_dtoa_r+0x7ae>
 80062dc:	4631      	mov	r1, r6
 80062de:	4622      	mov	r2, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fc03 	bl	8006aec <__pow5mult>
 80062e6:	465a      	mov	r2, fp
 80062e8:	4601      	mov	r1, r0
 80062ea:	4606      	mov	r6, r0
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 fb55 	bl	800699c <__multiply>
 80062f2:	4680      	mov	r8, r0
 80062f4:	4659      	mov	r1, fp
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fa84 	bl	8006804 <_Bfree>
 80062fc:	46c3      	mov	fp, r8
 80062fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006300:	1b1a      	subs	r2, r3, r4
 8006302:	d004      	beq.n	800630e <_dtoa_r+0x7be>
 8006304:	4659      	mov	r1, fp
 8006306:	4628      	mov	r0, r5
 8006308:	f000 fbf0 	bl	8006aec <__pow5mult>
 800630c:	4683      	mov	fp, r0
 800630e:	2101      	movs	r1, #1
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fb2d 	bl	8006970 <__i2b>
 8006316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006318:	4604      	mov	r4, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	f340 8086 	ble.w	800642c <_dtoa_r+0x8dc>
 8006320:	461a      	mov	r2, r3
 8006322:	4601      	mov	r1, r0
 8006324:	4628      	mov	r0, r5
 8006326:	f000 fbe1 	bl	8006aec <__pow5mult>
 800632a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800632c:	4604      	mov	r4, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	dd7f      	ble.n	8006432 <_dtoa_r+0x8e2>
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800633c:	6918      	ldr	r0, [r3, #16]
 800633e:	f000 fac9 	bl	80068d4 <__hi0bits>
 8006342:	f1c0 0020 	rsb	r0, r0, #32
 8006346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006348:	4418      	add	r0, r3
 800634a:	f010 001f 	ands.w	r0, r0, #31
 800634e:	f000 8092 	beq.w	8006476 <_dtoa_r+0x926>
 8006352:	f1c0 0320 	rsb	r3, r0, #32
 8006356:	2b04      	cmp	r3, #4
 8006358:	f340 808a 	ble.w	8006470 <_dtoa_r+0x920>
 800635c:	f1c0 001c 	rsb	r0, r0, #28
 8006360:	9b06      	ldr	r3, [sp, #24]
 8006362:	4407      	add	r7, r0
 8006364:	4403      	add	r3, r0
 8006366:	9306      	str	r3, [sp, #24]
 8006368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636a:	4403      	add	r3, r0
 800636c:	9309      	str	r3, [sp, #36]	; 0x24
 800636e:	9b06      	ldr	r3, [sp, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	dd05      	ble.n	8006380 <_dtoa_r+0x830>
 8006374:	4659      	mov	r1, fp
 8006376:	461a      	mov	r2, r3
 8006378:	4628      	mov	r0, r5
 800637a:	f000 fc11 	bl	8006ba0 <__lshift>
 800637e:	4683      	mov	fp, r0
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	dd05      	ble.n	8006392 <_dtoa_r+0x842>
 8006386:	4621      	mov	r1, r4
 8006388:	461a      	mov	r2, r3
 800638a:	4628      	mov	r0, r5
 800638c:	f000 fc08 	bl	8006ba0 <__lshift>
 8006390:	4604      	mov	r4, r0
 8006392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d070      	beq.n	800647a <_dtoa_r+0x92a>
 8006398:	4621      	mov	r1, r4
 800639a:	4658      	mov	r0, fp
 800639c:	f000 fc70 	bl	8006c80 <__mcmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	da6a      	bge.n	800647a <_dtoa_r+0x92a>
 80063a4:	2300      	movs	r3, #0
 80063a6:	4659      	mov	r1, fp
 80063a8:	220a      	movs	r2, #10
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fa4c 	bl	8006848 <__multadd>
 80063b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b2:	4683      	mov	fp, r0
 80063b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8194 	beq.w	80066e6 <_dtoa_r+0xb96>
 80063be:	4631      	mov	r1, r6
 80063c0:	2300      	movs	r3, #0
 80063c2:	220a      	movs	r2, #10
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 fa3f 	bl	8006848 <__multadd>
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	4606      	mov	r6, r0
 80063d0:	f300 8093 	bgt.w	80064fa <_dtoa_r+0x9aa>
 80063d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	dc57      	bgt.n	800648a <_dtoa_r+0x93a>
 80063da:	e08e      	b.n	80064fa <_dtoa_r+0x9aa>
 80063dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063e2:	e757      	b.n	8006294 <_dtoa_r+0x744>
 80063e4:	9b08      	ldr	r3, [sp, #32]
 80063e6:	1e5c      	subs	r4, r3, #1
 80063e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	bfb7      	itett	lt
 80063ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063f0:	1b1c      	subge	r4, r3, r4
 80063f2:	1ae2      	sublt	r2, r4, r3
 80063f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80063f6:	bfbe      	ittt	lt
 80063f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80063fa:	189b      	addlt	r3, r3, r2
 80063fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	bfb8      	it	lt
 8006402:	2400      	movlt	r4, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfbb      	ittet	lt
 8006408:	9b06      	ldrlt	r3, [sp, #24]
 800640a:	9a08      	ldrlt	r2, [sp, #32]
 800640c:	9f06      	ldrge	r7, [sp, #24]
 800640e:	1a9f      	sublt	r7, r3, r2
 8006410:	bfac      	ite	ge
 8006412:	9b08      	ldrge	r3, [sp, #32]
 8006414:	2300      	movlt	r3, #0
 8006416:	e73f      	b.n	8006298 <_dtoa_r+0x748>
 8006418:	3fe00000 	.word	0x3fe00000
 800641c:	40240000 	.word	0x40240000
 8006420:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006422:	9f06      	ldr	r7, [sp, #24]
 8006424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006426:	e742      	b.n	80062ae <_dtoa_r+0x75e>
 8006428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642a:	e76b      	b.n	8006304 <_dtoa_r+0x7b4>
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	2b01      	cmp	r3, #1
 8006430:	dc19      	bgt.n	8006466 <_dtoa_r+0x916>
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	b9bb      	cbnz	r3, 8006466 <_dtoa_r+0x916>
 8006436:	9b05      	ldr	r3, [sp, #20]
 8006438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800643c:	b99b      	cbnz	r3, 8006466 <_dtoa_r+0x916>
 800643e:	9b05      	ldr	r3, [sp, #20]
 8006440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006444:	0d1b      	lsrs	r3, r3, #20
 8006446:	051b      	lsls	r3, r3, #20
 8006448:	b183      	cbz	r3, 800646c <_dtoa_r+0x91c>
 800644a:	f04f 0801 	mov.w	r8, #1
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	3301      	adds	r3, #1
 8006452:	9306      	str	r3, [sp, #24]
 8006454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006456:	3301      	adds	r3, #1
 8006458:	9309      	str	r3, [sp, #36]	; 0x24
 800645a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f af6a 	bne.w	8006336 <_dtoa_r+0x7e6>
 8006462:	2001      	movs	r0, #1
 8006464:	e76f      	b.n	8006346 <_dtoa_r+0x7f6>
 8006466:	f04f 0800 	mov.w	r8, #0
 800646a:	e7f6      	b.n	800645a <_dtoa_r+0x90a>
 800646c:	4698      	mov	r8, r3
 800646e:	e7f4      	b.n	800645a <_dtoa_r+0x90a>
 8006470:	f43f af7d 	beq.w	800636e <_dtoa_r+0x81e>
 8006474:	4618      	mov	r0, r3
 8006476:	301c      	adds	r0, #28
 8006478:	e772      	b.n	8006360 <_dtoa_r+0x810>
 800647a:	9b08      	ldr	r3, [sp, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dc36      	bgt.n	80064ee <_dtoa_r+0x99e>
 8006480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006482:	2b02      	cmp	r3, #2
 8006484:	dd33      	ble.n	80064ee <_dtoa_r+0x99e>
 8006486:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	d10d      	bne.n	80064ac <_dtoa_r+0x95c>
 8006490:	4621      	mov	r1, r4
 8006492:	464b      	mov	r3, r9
 8006494:	2205      	movs	r2, #5
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f9d6 	bl	8006848 <__multadd>
 800649c:	4601      	mov	r1, r0
 800649e:	4604      	mov	r4, r0
 80064a0:	4658      	mov	r0, fp
 80064a2:	f000 fbed 	bl	8006c80 <__mcmp>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f73f adb8 	bgt.w	800601c <_dtoa_r+0x4cc>
 80064ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064ae:	9f03      	ldr	r7, [sp, #12]
 80064b0:	ea6f 0a03 	mvn.w	sl, r3
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f9a2 	bl	8006804 <_Bfree>
 80064c0:	2e00      	cmp	r6, #0
 80064c2:	f43f aea7 	beq.w	8006214 <_dtoa_r+0x6c4>
 80064c6:	f1b8 0f00 	cmp.w	r8, #0
 80064ca:	d005      	beq.n	80064d8 <_dtoa_r+0x988>
 80064cc:	45b0      	cmp	r8, r6
 80064ce:	d003      	beq.n	80064d8 <_dtoa_r+0x988>
 80064d0:	4641      	mov	r1, r8
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f996 	bl	8006804 <_Bfree>
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 f992 	bl	8006804 <_Bfree>
 80064e0:	e698      	b.n	8006214 <_dtoa_r+0x6c4>
 80064e2:	2400      	movs	r4, #0
 80064e4:	4626      	mov	r6, r4
 80064e6:	e7e1      	b.n	80064ac <_dtoa_r+0x95c>
 80064e8:	46c2      	mov	sl, r8
 80064ea:	4626      	mov	r6, r4
 80064ec:	e596      	b.n	800601c <_dtoa_r+0x4cc>
 80064ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80fd 	beq.w	80066f4 <_dtoa_r+0xba4>
 80064fa:	2f00      	cmp	r7, #0
 80064fc:	dd05      	ble.n	800650a <_dtoa_r+0x9ba>
 80064fe:	4631      	mov	r1, r6
 8006500:	463a      	mov	r2, r7
 8006502:	4628      	mov	r0, r5
 8006504:	f000 fb4c 	bl	8006ba0 <__lshift>
 8006508:	4606      	mov	r6, r0
 800650a:	f1b8 0f00 	cmp.w	r8, #0
 800650e:	d05c      	beq.n	80065ca <_dtoa_r+0xa7a>
 8006510:	4628      	mov	r0, r5
 8006512:	6871      	ldr	r1, [r6, #4]
 8006514:	f000 f936 	bl	8006784 <_Balloc>
 8006518:	4607      	mov	r7, r0
 800651a:	b928      	cbnz	r0, 8006528 <_dtoa_r+0x9d8>
 800651c:	4602      	mov	r2, r0
 800651e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006522:	4b7f      	ldr	r3, [pc, #508]	; (8006720 <_dtoa_r+0xbd0>)
 8006524:	f7ff bb28 	b.w	8005b78 <_dtoa_r+0x28>
 8006528:	6932      	ldr	r2, [r6, #16]
 800652a:	f106 010c 	add.w	r1, r6, #12
 800652e:	3202      	adds	r2, #2
 8006530:	0092      	lsls	r2, r2, #2
 8006532:	300c      	adds	r0, #12
 8006534:	f000 f90c 	bl	8006750 <memcpy>
 8006538:	2201      	movs	r2, #1
 800653a:	4639      	mov	r1, r7
 800653c:	4628      	mov	r0, r5
 800653e:	f000 fb2f 	bl	8006ba0 <__lshift>
 8006542:	46b0      	mov	r8, r6
 8006544:	4606      	mov	r6, r0
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	9308      	str	r3, [sp, #32]
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	444b      	add	r3, r9
 8006550:	930a      	str	r3, [sp, #40]	; 0x28
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	9309      	str	r3, [sp, #36]	; 0x24
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	4621      	mov	r1, r4
 800655e:	3b01      	subs	r3, #1
 8006560:	4658      	mov	r0, fp
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	f7ff fa68 	bl	8005a38 <quorem>
 8006568:	4603      	mov	r3, r0
 800656a:	4641      	mov	r1, r8
 800656c:	3330      	adds	r3, #48	; 0x30
 800656e:	9006      	str	r0, [sp, #24]
 8006570:	4658      	mov	r0, fp
 8006572:	930b      	str	r3, [sp, #44]	; 0x2c
 8006574:	f000 fb84 	bl	8006c80 <__mcmp>
 8006578:	4632      	mov	r2, r6
 800657a:	4681      	mov	r9, r0
 800657c:	4621      	mov	r1, r4
 800657e:	4628      	mov	r0, r5
 8006580:	f000 fb9a 	bl	8006cb8 <__mdiff>
 8006584:	68c2      	ldr	r2, [r0, #12]
 8006586:	4607      	mov	r7, r0
 8006588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658a:	bb02      	cbnz	r2, 80065ce <_dtoa_r+0xa7e>
 800658c:	4601      	mov	r1, r0
 800658e:	4658      	mov	r0, fp
 8006590:	f000 fb76 	bl	8006c80 <__mcmp>
 8006594:	4602      	mov	r2, r0
 8006596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006598:	4639      	mov	r1, r7
 800659a:	4628      	mov	r0, r5
 800659c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80065a0:	f000 f930 	bl	8006804 <_Bfree>
 80065a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a8:	9f08      	ldr	r7, [sp, #32]
 80065aa:	ea43 0102 	orr.w	r1, r3, r2
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	430b      	orrs	r3, r1
 80065b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b4:	d10d      	bne.n	80065d2 <_dtoa_r+0xa82>
 80065b6:	2b39      	cmp	r3, #57	; 0x39
 80065b8:	d029      	beq.n	800660e <_dtoa_r+0xabe>
 80065ba:	f1b9 0f00 	cmp.w	r9, #0
 80065be:	dd01      	ble.n	80065c4 <_dtoa_r+0xa74>
 80065c0:	9b06      	ldr	r3, [sp, #24]
 80065c2:	3331      	adds	r3, #49	; 0x31
 80065c4:	9a04      	ldr	r2, [sp, #16]
 80065c6:	7013      	strb	r3, [r2, #0]
 80065c8:	e776      	b.n	80064b8 <_dtoa_r+0x968>
 80065ca:	4630      	mov	r0, r6
 80065cc:	e7b9      	b.n	8006542 <_dtoa_r+0x9f2>
 80065ce:	2201      	movs	r2, #1
 80065d0:	e7e2      	b.n	8006598 <_dtoa_r+0xa48>
 80065d2:	f1b9 0f00 	cmp.w	r9, #0
 80065d6:	db06      	blt.n	80065e6 <_dtoa_r+0xa96>
 80065d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80065da:	ea41 0909 	orr.w	r9, r1, r9
 80065de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065e0:	ea59 0101 	orrs.w	r1, r9, r1
 80065e4:	d120      	bne.n	8006628 <_dtoa_r+0xad8>
 80065e6:	2a00      	cmp	r2, #0
 80065e8:	ddec      	ble.n	80065c4 <_dtoa_r+0xa74>
 80065ea:	4659      	mov	r1, fp
 80065ec:	2201      	movs	r2, #1
 80065ee:	4628      	mov	r0, r5
 80065f0:	9308      	str	r3, [sp, #32]
 80065f2:	f000 fad5 	bl	8006ba0 <__lshift>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4683      	mov	fp, r0
 80065fa:	f000 fb41 	bl	8006c80 <__mcmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	dc02      	bgt.n	800660a <_dtoa_r+0xaba>
 8006604:	d1de      	bne.n	80065c4 <_dtoa_r+0xa74>
 8006606:	07da      	lsls	r2, r3, #31
 8006608:	d5dc      	bpl.n	80065c4 <_dtoa_r+0xa74>
 800660a:	2b39      	cmp	r3, #57	; 0x39
 800660c:	d1d8      	bne.n	80065c0 <_dtoa_r+0xa70>
 800660e:	2339      	movs	r3, #57	; 0x39
 8006610:	9a04      	ldr	r2, [sp, #16]
 8006612:	7013      	strb	r3, [r2, #0]
 8006614:	463b      	mov	r3, r7
 8006616:	461f      	mov	r7, r3
 8006618:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800661c:	3b01      	subs	r3, #1
 800661e:	2a39      	cmp	r2, #57	; 0x39
 8006620:	d050      	beq.n	80066c4 <_dtoa_r+0xb74>
 8006622:	3201      	adds	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	e747      	b.n	80064b8 <_dtoa_r+0x968>
 8006628:	2a00      	cmp	r2, #0
 800662a:	dd03      	ble.n	8006634 <_dtoa_r+0xae4>
 800662c:	2b39      	cmp	r3, #57	; 0x39
 800662e:	d0ee      	beq.n	800660e <_dtoa_r+0xabe>
 8006630:	3301      	adds	r3, #1
 8006632:	e7c7      	b.n	80065c4 <_dtoa_r+0xa74>
 8006634:	9a08      	ldr	r2, [sp, #32]
 8006636:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006638:	f802 3c01 	strb.w	r3, [r2, #-1]
 800663c:	428a      	cmp	r2, r1
 800663e:	d02a      	beq.n	8006696 <_dtoa_r+0xb46>
 8006640:	4659      	mov	r1, fp
 8006642:	2300      	movs	r3, #0
 8006644:	220a      	movs	r2, #10
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f8fe 	bl	8006848 <__multadd>
 800664c:	45b0      	cmp	r8, r6
 800664e:	4683      	mov	fp, r0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	f04f 020a 	mov.w	r2, #10
 8006658:	4641      	mov	r1, r8
 800665a:	4628      	mov	r0, r5
 800665c:	d107      	bne.n	800666e <_dtoa_r+0xb1e>
 800665e:	f000 f8f3 	bl	8006848 <__multadd>
 8006662:	4680      	mov	r8, r0
 8006664:	4606      	mov	r6, r0
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	3301      	adds	r3, #1
 800666a:	9308      	str	r3, [sp, #32]
 800666c:	e775      	b.n	800655a <_dtoa_r+0xa0a>
 800666e:	f000 f8eb 	bl	8006848 <__multadd>
 8006672:	4631      	mov	r1, r6
 8006674:	4680      	mov	r8, r0
 8006676:	2300      	movs	r3, #0
 8006678:	220a      	movs	r2, #10
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f8e4 	bl	8006848 <__multadd>
 8006680:	4606      	mov	r6, r0
 8006682:	e7f0      	b.n	8006666 <_dtoa_r+0xb16>
 8006684:	f1b9 0f00 	cmp.w	r9, #0
 8006688:	bfcc      	ite	gt
 800668a:	464f      	movgt	r7, r9
 800668c:	2701      	movle	r7, #1
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	9a03      	ldr	r2, [sp, #12]
 8006694:	4417      	add	r7, r2
 8006696:	4659      	mov	r1, fp
 8006698:	2201      	movs	r2, #1
 800669a:	4628      	mov	r0, r5
 800669c:	9308      	str	r3, [sp, #32]
 800669e:	f000 fa7f 	bl	8006ba0 <__lshift>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4683      	mov	fp, r0
 80066a6:	f000 faeb 	bl	8006c80 <__mcmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	dcb2      	bgt.n	8006614 <_dtoa_r+0xac4>
 80066ae:	d102      	bne.n	80066b6 <_dtoa_r+0xb66>
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	07db      	lsls	r3, r3, #31
 80066b4:	d4ae      	bmi.n	8006614 <_dtoa_r+0xac4>
 80066b6:	463b      	mov	r3, r7
 80066b8:	461f      	mov	r7, r3
 80066ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066be:	2a30      	cmp	r2, #48	; 0x30
 80066c0:	d0fa      	beq.n	80066b8 <_dtoa_r+0xb68>
 80066c2:	e6f9      	b.n	80064b8 <_dtoa_r+0x968>
 80066c4:	9a03      	ldr	r2, [sp, #12]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d1a5      	bne.n	8006616 <_dtoa_r+0xac6>
 80066ca:	2331      	movs	r3, #49	; 0x31
 80066cc:	f10a 0a01 	add.w	sl, sl, #1
 80066d0:	e779      	b.n	80065c6 <_dtoa_r+0xa76>
 80066d2:	4b14      	ldr	r3, [pc, #80]	; (8006724 <_dtoa_r+0xbd4>)
 80066d4:	f7ff baa8 	b.w	8005c28 <_dtoa_r+0xd8>
 80066d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f aa81 	bne.w	8005be2 <_dtoa_r+0x92>
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <_dtoa_r+0xbd8>)
 80066e2:	f7ff baa1 	b.w	8005c28 <_dtoa_r+0xd8>
 80066e6:	f1b9 0f00 	cmp.w	r9, #0
 80066ea:	dc03      	bgt.n	80066f4 <_dtoa_r+0xba4>
 80066ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f73f aecb 	bgt.w	800648a <_dtoa_r+0x93a>
 80066f4:	9f03      	ldr	r7, [sp, #12]
 80066f6:	4621      	mov	r1, r4
 80066f8:	4658      	mov	r0, fp
 80066fa:	f7ff f99d 	bl	8005a38 <quorem>
 80066fe:	9a03      	ldr	r2, [sp, #12]
 8006700:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006704:	f807 3b01 	strb.w	r3, [r7], #1
 8006708:	1aba      	subs	r2, r7, r2
 800670a:	4591      	cmp	r9, r2
 800670c:	ddba      	ble.n	8006684 <_dtoa_r+0xb34>
 800670e:	4659      	mov	r1, fp
 8006710:	2300      	movs	r3, #0
 8006712:	220a      	movs	r2, #10
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f897 	bl	8006848 <__multadd>
 800671a:	4683      	mov	fp, r0
 800671c:	e7eb      	b.n	80066f6 <_dtoa_r+0xba6>
 800671e:	bf00      	nop
 8006720:	08008d4f 	.word	0x08008d4f
 8006724:	08008cac 	.word	0x08008cac
 8006728:	08008cd0 	.word	0x08008cd0

0800672c <_localeconv_r>:
 800672c:	4800      	ldr	r0, [pc, #0]	; (8006730 <_localeconv_r+0x4>)
 800672e:	4770      	bx	lr
 8006730:	20000194 	.word	0x20000194

08006734 <memchr>:
 8006734:	4603      	mov	r3, r0
 8006736:	b510      	push	{r4, lr}
 8006738:	b2c9      	uxtb	r1, r1
 800673a:	4402      	add	r2, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	4618      	mov	r0, r3
 8006740:	d101      	bne.n	8006746 <memchr+0x12>
 8006742:	2000      	movs	r0, #0
 8006744:	e003      	b.n	800674e <memchr+0x1a>
 8006746:	7804      	ldrb	r4, [r0, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	428c      	cmp	r4, r1
 800674c:	d1f6      	bne.n	800673c <memchr+0x8>
 800674e:	bd10      	pop	{r4, pc}

08006750 <memcpy>:
 8006750:	440a      	add	r2, r1
 8006752:	4291      	cmp	r1, r2
 8006754:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006758:	d100      	bne.n	800675c <memcpy+0xc>
 800675a:	4770      	bx	lr
 800675c:	b510      	push	{r4, lr}
 800675e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006762:	4291      	cmp	r1, r2
 8006764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006768:	d1f9      	bne.n	800675e <memcpy+0xe>
 800676a:	bd10      	pop	{r4, pc}

0800676c <__malloc_lock>:
 800676c:	4801      	ldr	r0, [pc, #4]	; (8006774 <__malloc_lock+0x8>)
 800676e:	f000 bd2c 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006772:	bf00      	nop
 8006774:	20000704 	.word	0x20000704

08006778 <__malloc_unlock>:
 8006778:	4801      	ldr	r0, [pc, #4]	; (8006780 <__malloc_unlock+0x8>)
 800677a:	f000 bd27 	b.w	80071cc <__retarget_lock_release_recursive>
 800677e:	bf00      	nop
 8006780:	20000704 	.word	0x20000704

08006784 <_Balloc>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	b976      	cbnz	r6, 80067ac <_Balloc+0x28>
 800678e:	2010      	movs	r0, #16
 8006790:	f7fe fbb4 	bl	8004efc <malloc>
 8006794:	4602      	mov	r2, r0
 8006796:	6260      	str	r0, [r4, #36]	; 0x24
 8006798:	b920      	cbnz	r0, 80067a4 <_Balloc+0x20>
 800679a:	2166      	movs	r1, #102	; 0x66
 800679c:	4b17      	ldr	r3, [pc, #92]	; (80067fc <_Balloc+0x78>)
 800679e:	4818      	ldr	r0, [pc, #96]	; (8006800 <_Balloc+0x7c>)
 80067a0:	f000 fce2 	bl	8007168 <__assert_func>
 80067a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a8:	6006      	str	r6, [r0, #0]
 80067aa:	60c6      	str	r6, [r0, #12]
 80067ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067ae:	68f3      	ldr	r3, [r6, #12]
 80067b0:	b183      	cbz	r3, 80067d4 <_Balloc+0x50>
 80067b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067ba:	b9b8      	cbnz	r0, 80067ec <_Balloc+0x68>
 80067bc:	2101      	movs	r1, #1
 80067be:	fa01 f605 	lsl.w	r6, r1, r5
 80067c2:	1d72      	adds	r2, r6, #5
 80067c4:	4620      	mov	r0, r4
 80067c6:	0092      	lsls	r2, r2, #2
 80067c8:	f000 fb5e 	bl	8006e88 <_calloc_r>
 80067cc:	b160      	cbz	r0, 80067e8 <_Balloc+0x64>
 80067ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067d2:	e00e      	b.n	80067f2 <_Balloc+0x6e>
 80067d4:	2221      	movs	r2, #33	; 0x21
 80067d6:	2104      	movs	r1, #4
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fb55 	bl	8006e88 <_calloc_r>
 80067de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e0:	60f0      	str	r0, [r6, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e4      	bne.n	80067b2 <_Balloc+0x2e>
 80067e8:	2000      	movs	r0, #0
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	6802      	ldr	r2, [r0, #0]
 80067ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067f8:	e7f7      	b.n	80067ea <_Balloc+0x66>
 80067fa:	bf00      	nop
 80067fc:	08008cdd 	.word	0x08008cdd
 8006800:	08008d60 	.word	0x08008d60

08006804 <_Bfree>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006808:	4605      	mov	r5, r0
 800680a:	460c      	mov	r4, r1
 800680c:	b976      	cbnz	r6, 800682c <_Bfree+0x28>
 800680e:	2010      	movs	r0, #16
 8006810:	f7fe fb74 	bl	8004efc <malloc>
 8006814:	4602      	mov	r2, r0
 8006816:	6268      	str	r0, [r5, #36]	; 0x24
 8006818:	b920      	cbnz	r0, 8006824 <_Bfree+0x20>
 800681a:	218a      	movs	r1, #138	; 0x8a
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <_Bfree+0x3c>)
 800681e:	4809      	ldr	r0, [pc, #36]	; (8006844 <_Bfree+0x40>)
 8006820:	f000 fca2 	bl	8007168 <__assert_func>
 8006824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006828:	6006      	str	r6, [r0, #0]
 800682a:	60c6      	str	r6, [r0, #12]
 800682c:	b13c      	cbz	r4, 800683e <_Bfree+0x3a>
 800682e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006838:	6021      	str	r1, [r4, #0]
 800683a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	08008cdd 	.word	0x08008cdd
 8006844:	08008d60 	.word	0x08008d60

08006848 <__multadd>:
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	461e      	mov	r6, r3
 8006852:	2000      	movs	r0, #0
 8006854:	690d      	ldr	r5, [r1, #16]
 8006856:	f101 0c14 	add.w	ip, r1, #20
 800685a:	f8dc 3000 	ldr.w	r3, [ip]
 800685e:	3001      	adds	r0, #1
 8006860:	b299      	uxth	r1, r3
 8006862:	fb02 6101 	mla	r1, r2, r1, r6
 8006866:	0c1e      	lsrs	r6, r3, #16
 8006868:	0c0b      	lsrs	r3, r1, #16
 800686a:	fb02 3306 	mla	r3, r2, r6, r3
 800686e:	b289      	uxth	r1, r1
 8006870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006874:	4285      	cmp	r5, r0
 8006876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800687a:	f84c 1b04 	str.w	r1, [ip], #4
 800687e:	dcec      	bgt.n	800685a <__multadd+0x12>
 8006880:	b30e      	cbz	r6, 80068c6 <__multadd+0x7e>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	42ab      	cmp	r3, r5
 8006886:	dc19      	bgt.n	80068bc <__multadd+0x74>
 8006888:	6861      	ldr	r1, [r4, #4]
 800688a:	4638      	mov	r0, r7
 800688c:	3101      	adds	r1, #1
 800688e:	f7ff ff79 	bl	8006784 <_Balloc>
 8006892:	4680      	mov	r8, r0
 8006894:	b928      	cbnz	r0, 80068a2 <__multadd+0x5a>
 8006896:	4602      	mov	r2, r0
 8006898:	21b5      	movs	r1, #181	; 0xb5
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <__multadd+0x84>)
 800689c:	480c      	ldr	r0, [pc, #48]	; (80068d0 <__multadd+0x88>)
 800689e:	f000 fc63 	bl	8007168 <__assert_func>
 80068a2:	6922      	ldr	r2, [r4, #16]
 80068a4:	f104 010c 	add.w	r1, r4, #12
 80068a8:	3202      	adds	r2, #2
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	300c      	adds	r0, #12
 80068ae:	f7ff ff4f 	bl	8006750 <memcpy>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ffa5 	bl	8006804 <_Bfree>
 80068ba:	4644      	mov	r4, r8
 80068bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068c0:	3501      	adds	r5, #1
 80068c2:	615e      	str	r6, [r3, #20]
 80068c4:	6125      	str	r5, [r4, #16]
 80068c6:	4620      	mov	r0, r4
 80068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068cc:	08008d4f 	.word	0x08008d4f
 80068d0:	08008d60 	.word	0x08008d60

080068d4 <__hi0bits>:
 80068d4:	0c02      	lsrs	r2, r0, #16
 80068d6:	0412      	lsls	r2, r2, #16
 80068d8:	4603      	mov	r3, r0
 80068da:	b9ca      	cbnz	r2, 8006910 <__hi0bits+0x3c>
 80068dc:	0403      	lsls	r3, r0, #16
 80068de:	2010      	movs	r0, #16
 80068e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068e4:	bf04      	itt	eq
 80068e6:	021b      	lsleq	r3, r3, #8
 80068e8:	3008      	addeq	r0, #8
 80068ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80068ee:	bf04      	itt	eq
 80068f0:	011b      	lsleq	r3, r3, #4
 80068f2:	3004      	addeq	r0, #4
 80068f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068f8:	bf04      	itt	eq
 80068fa:	009b      	lsleq	r3, r3, #2
 80068fc:	3002      	addeq	r0, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	db05      	blt.n	800690e <__hi0bits+0x3a>
 8006902:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006906:	f100 0001 	add.w	r0, r0, #1
 800690a:	bf08      	it	eq
 800690c:	2020      	moveq	r0, #32
 800690e:	4770      	bx	lr
 8006910:	2000      	movs	r0, #0
 8006912:	e7e5      	b.n	80068e0 <__hi0bits+0xc>

08006914 <__lo0bits>:
 8006914:	6803      	ldr	r3, [r0, #0]
 8006916:	4602      	mov	r2, r0
 8006918:	f013 0007 	ands.w	r0, r3, #7
 800691c:	d00b      	beq.n	8006936 <__lo0bits+0x22>
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	d421      	bmi.n	8006966 <__lo0bits+0x52>
 8006922:	0798      	lsls	r0, r3, #30
 8006924:	bf49      	itett	mi
 8006926:	085b      	lsrmi	r3, r3, #1
 8006928:	089b      	lsrpl	r3, r3, #2
 800692a:	2001      	movmi	r0, #1
 800692c:	6013      	strmi	r3, [r2, #0]
 800692e:	bf5c      	itt	pl
 8006930:	2002      	movpl	r0, #2
 8006932:	6013      	strpl	r3, [r2, #0]
 8006934:	4770      	bx	lr
 8006936:	b299      	uxth	r1, r3
 8006938:	b909      	cbnz	r1, 800693e <__lo0bits+0x2a>
 800693a:	2010      	movs	r0, #16
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	b2d9      	uxtb	r1, r3
 8006940:	b909      	cbnz	r1, 8006946 <__lo0bits+0x32>
 8006942:	3008      	adds	r0, #8
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	0719      	lsls	r1, r3, #28
 8006948:	bf04      	itt	eq
 800694a:	091b      	lsreq	r3, r3, #4
 800694c:	3004      	addeq	r0, #4
 800694e:	0799      	lsls	r1, r3, #30
 8006950:	bf04      	itt	eq
 8006952:	089b      	lsreq	r3, r3, #2
 8006954:	3002      	addeq	r0, #2
 8006956:	07d9      	lsls	r1, r3, #31
 8006958:	d403      	bmi.n	8006962 <__lo0bits+0x4e>
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	f100 0001 	add.w	r0, r0, #1
 8006960:	d003      	beq.n	800696a <__lo0bits+0x56>
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4770      	bx	lr
 8006966:	2000      	movs	r0, #0
 8006968:	4770      	bx	lr
 800696a:	2020      	movs	r0, #32
 800696c:	4770      	bx	lr
	...

08006970 <__i2b>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	2101      	movs	r1, #1
 8006976:	f7ff ff05 	bl	8006784 <_Balloc>
 800697a:	4602      	mov	r2, r0
 800697c:	b928      	cbnz	r0, 800698a <__i2b+0x1a>
 800697e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <__i2b+0x24>)
 8006984:	4804      	ldr	r0, [pc, #16]	; (8006998 <__i2b+0x28>)
 8006986:	f000 fbef 	bl	8007168 <__assert_func>
 800698a:	2301      	movs	r3, #1
 800698c:	6144      	str	r4, [r0, #20]
 800698e:	6103      	str	r3, [r0, #16]
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08008d4f 	.word	0x08008d4f
 8006998:	08008d60 	.word	0x08008d60

0800699c <__multiply>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	4691      	mov	r9, r2
 80069a2:	690a      	ldr	r2, [r1, #16]
 80069a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069a8:	460c      	mov	r4, r1
 80069aa:	429a      	cmp	r2, r3
 80069ac:	bfbe      	ittt	lt
 80069ae:	460b      	movlt	r3, r1
 80069b0:	464c      	movlt	r4, r9
 80069b2:	4699      	movlt	r9, r3
 80069b4:	6927      	ldr	r7, [r4, #16]
 80069b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069ba:	68a3      	ldr	r3, [r4, #8]
 80069bc:	6861      	ldr	r1, [r4, #4]
 80069be:	eb07 060a 	add.w	r6, r7, sl
 80069c2:	42b3      	cmp	r3, r6
 80069c4:	b085      	sub	sp, #20
 80069c6:	bfb8      	it	lt
 80069c8:	3101      	addlt	r1, #1
 80069ca:	f7ff fedb 	bl	8006784 <_Balloc>
 80069ce:	b930      	cbnz	r0, 80069de <__multiply+0x42>
 80069d0:	4602      	mov	r2, r0
 80069d2:	f240 115d 	movw	r1, #349	; 0x15d
 80069d6:	4b43      	ldr	r3, [pc, #268]	; (8006ae4 <__multiply+0x148>)
 80069d8:	4843      	ldr	r0, [pc, #268]	; (8006ae8 <__multiply+0x14c>)
 80069da:	f000 fbc5 	bl	8007168 <__assert_func>
 80069de:	f100 0514 	add.w	r5, r0, #20
 80069e2:	462b      	mov	r3, r5
 80069e4:	2200      	movs	r2, #0
 80069e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069ea:	4543      	cmp	r3, r8
 80069ec:	d321      	bcc.n	8006a32 <__multiply+0x96>
 80069ee:	f104 0314 	add.w	r3, r4, #20
 80069f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069f6:	f109 0314 	add.w	r3, r9, #20
 80069fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069fe:	9202      	str	r2, [sp, #8]
 8006a00:	1b3a      	subs	r2, r7, r4
 8006a02:	3a15      	subs	r2, #21
 8006a04:	f022 0203 	bic.w	r2, r2, #3
 8006a08:	3204      	adds	r2, #4
 8006a0a:	f104 0115 	add.w	r1, r4, #21
 8006a0e:	428f      	cmp	r7, r1
 8006a10:	bf38      	it	cc
 8006a12:	2204      	movcc	r2, #4
 8006a14:	9201      	str	r2, [sp, #4]
 8006a16:	9a02      	ldr	r2, [sp, #8]
 8006a18:	9303      	str	r3, [sp, #12]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d80c      	bhi.n	8006a38 <__multiply+0x9c>
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	dd03      	ble.n	8006a2a <__multiply+0x8e>
 8006a22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d059      	beq.n	8006ade <__multiply+0x142>
 8006a2a:	6106      	str	r6, [r0, #16]
 8006a2c:	b005      	add	sp, #20
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	f843 2b04 	str.w	r2, [r3], #4
 8006a36:	e7d8      	b.n	80069ea <__multiply+0x4e>
 8006a38:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a3c:	f1ba 0f00 	cmp.w	sl, #0
 8006a40:	d023      	beq.n	8006a8a <__multiply+0xee>
 8006a42:	46a9      	mov	r9, r5
 8006a44:	f04f 0c00 	mov.w	ip, #0
 8006a48:	f104 0e14 	add.w	lr, r4, #20
 8006a4c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a50:	f8d9 1000 	ldr.w	r1, [r9]
 8006a54:	fa1f fb82 	uxth.w	fp, r2
 8006a58:	b289      	uxth	r1, r1
 8006a5a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a5e:	4461      	add	r1, ip
 8006a60:	f8d9 c000 	ldr.w	ip, [r9]
 8006a64:	0c12      	lsrs	r2, r2, #16
 8006a66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a6a:	fb0a c202 	mla	r2, sl, r2, ip
 8006a6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a72:	b289      	uxth	r1, r1
 8006a74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a78:	4577      	cmp	r7, lr
 8006a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a7e:	f849 1b04 	str.w	r1, [r9], #4
 8006a82:	d8e3      	bhi.n	8006a4c <__multiply+0xb0>
 8006a84:	9a01      	ldr	r2, [sp, #4]
 8006a86:	f845 c002 	str.w	ip, [r5, r2]
 8006a8a:	9a03      	ldr	r2, [sp, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	d020      	beq.n	8006ada <__multiply+0x13e>
 8006a98:	46ae      	mov	lr, r5
 8006a9a:	f04f 0a00 	mov.w	sl, #0
 8006a9e:	6829      	ldr	r1, [r5, #0]
 8006aa0:	f104 0c14 	add.w	ip, r4, #20
 8006aa4:	f8bc b000 	ldrh.w	fp, [ip]
 8006aa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006aac:	b289      	uxth	r1, r1
 8006aae:	fb09 220b 	mla	r2, r9, fp, r2
 8006ab2:	4492      	add	sl, r2
 8006ab4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ab8:	f84e 1b04 	str.w	r1, [lr], #4
 8006abc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ac0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ac4:	0c12      	lsrs	r2, r2, #16
 8006ac6:	fb09 1102 	mla	r1, r9, r2, r1
 8006aca:	4567      	cmp	r7, ip
 8006acc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ad0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ad4:	d8e6      	bhi.n	8006aa4 <__multiply+0x108>
 8006ad6:	9a01      	ldr	r2, [sp, #4]
 8006ad8:	50a9      	str	r1, [r5, r2]
 8006ada:	3504      	adds	r5, #4
 8006adc:	e79b      	b.n	8006a16 <__multiply+0x7a>
 8006ade:	3e01      	subs	r6, #1
 8006ae0:	e79d      	b.n	8006a1e <__multiply+0x82>
 8006ae2:	bf00      	nop
 8006ae4:	08008d4f 	.word	0x08008d4f
 8006ae8:	08008d60 	.word	0x08008d60

08006aec <__pow5mult>:
 8006aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af0:	4615      	mov	r5, r2
 8006af2:	f012 0203 	ands.w	r2, r2, #3
 8006af6:	4606      	mov	r6, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	d007      	beq.n	8006b0c <__pow5mult+0x20>
 8006afc:	4c25      	ldr	r4, [pc, #148]	; (8006b94 <__pow5mult+0xa8>)
 8006afe:	3a01      	subs	r2, #1
 8006b00:	2300      	movs	r3, #0
 8006b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b06:	f7ff fe9f 	bl	8006848 <__multadd>
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	10ad      	asrs	r5, r5, #2
 8006b0e:	d03d      	beq.n	8006b8c <__pow5mult+0xa0>
 8006b10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b12:	b97c      	cbnz	r4, 8006b34 <__pow5mult+0x48>
 8006b14:	2010      	movs	r0, #16
 8006b16:	f7fe f9f1 	bl	8004efc <malloc>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6270      	str	r0, [r6, #36]	; 0x24
 8006b1e:	b928      	cbnz	r0, 8006b2c <__pow5mult+0x40>
 8006b20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b24:	4b1c      	ldr	r3, [pc, #112]	; (8006b98 <__pow5mult+0xac>)
 8006b26:	481d      	ldr	r0, [pc, #116]	; (8006b9c <__pow5mult+0xb0>)
 8006b28:	f000 fb1e 	bl	8007168 <__assert_func>
 8006b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b30:	6004      	str	r4, [r0, #0]
 8006b32:	60c4      	str	r4, [r0, #12]
 8006b34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b3c:	b94c      	cbnz	r4, 8006b52 <__pow5mult+0x66>
 8006b3e:	f240 2171 	movw	r1, #625	; 0x271
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7ff ff14 	bl	8006970 <__i2b>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b50:	6003      	str	r3, [r0, #0]
 8006b52:	f04f 0900 	mov.w	r9, #0
 8006b56:	07eb      	lsls	r3, r5, #31
 8006b58:	d50a      	bpl.n	8006b70 <__pow5mult+0x84>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ff1c 	bl	800699c <__multiply>
 8006b64:	4680      	mov	r8, r0
 8006b66:	4639      	mov	r1, r7
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff fe4b 	bl	8006804 <_Bfree>
 8006b6e:	4647      	mov	r7, r8
 8006b70:	106d      	asrs	r5, r5, #1
 8006b72:	d00b      	beq.n	8006b8c <__pow5mult+0xa0>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	b938      	cbnz	r0, 8006b88 <__pow5mult+0x9c>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ff0d 	bl	800699c <__multiply>
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	f8c0 9000 	str.w	r9, [r0]
 8006b88:	4604      	mov	r4, r0
 8006b8a:	e7e4      	b.n	8006b56 <__pow5mult+0x6a>
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b92:	bf00      	nop
 8006b94:	08008eb0 	.word	0x08008eb0
 8006b98:	08008cdd 	.word	0x08008cdd
 8006b9c:	08008d60 	.word	0x08008d60

08006ba0 <__lshift>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	4607      	mov	r7, r0
 8006ba8:	4691      	mov	r9, r2
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6849      	ldr	r1, [r1, #4]
 8006bae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bb8:	f108 0601 	add.w	r6, r8, #1
 8006bbc:	42b3      	cmp	r3, r6
 8006bbe:	db0b      	blt.n	8006bd8 <__lshift+0x38>
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff fddf 	bl	8006784 <_Balloc>
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	b948      	cbnz	r0, 8006bde <__lshift+0x3e>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006bd0:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <__lshift+0xd8>)
 8006bd2:	482a      	ldr	r0, [pc, #168]	; (8006c7c <__lshift+0xdc>)
 8006bd4:	f000 fac8 	bl	8007168 <__assert_func>
 8006bd8:	3101      	adds	r1, #1
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	e7ee      	b.n	8006bbc <__lshift+0x1c>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f100 0114 	add.w	r1, r0, #20
 8006be4:	f100 0210 	add.w	r2, r0, #16
 8006be8:	4618      	mov	r0, r3
 8006bea:	4553      	cmp	r3, sl
 8006bec:	db37      	blt.n	8006c5e <__lshift+0xbe>
 8006bee:	6920      	ldr	r0, [r4, #16]
 8006bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bf4:	f104 0314 	add.w	r3, r4, #20
 8006bf8:	f019 091f 	ands.w	r9, r9, #31
 8006bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c04:	d02f      	beq.n	8006c66 <__lshift+0xc6>
 8006c06:	468a      	mov	sl, r1
 8006c08:	f04f 0c00 	mov.w	ip, #0
 8006c0c:	f1c9 0e20 	rsb	lr, r9, #32
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	fa02 f209 	lsl.w	r2, r2, r9
 8006c16:	ea42 020c 	orr.w	r2, r2, ip
 8006c1a:	f84a 2b04 	str.w	r2, [sl], #4
 8006c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c22:	4298      	cmp	r0, r3
 8006c24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006c28:	d8f2      	bhi.n	8006c10 <__lshift+0x70>
 8006c2a:	1b03      	subs	r3, r0, r4
 8006c2c:	3b15      	subs	r3, #21
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	3304      	adds	r3, #4
 8006c34:	f104 0215 	add.w	r2, r4, #21
 8006c38:	4290      	cmp	r0, r2
 8006c3a:	bf38      	it	cc
 8006c3c:	2304      	movcc	r3, #4
 8006c3e:	f841 c003 	str.w	ip, [r1, r3]
 8006c42:	f1bc 0f00 	cmp.w	ip, #0
 8006c46:	d001      	beq.n	8006c4c <__lshift+0xac>
 8006c48:	f108 0602 	add.w	r6, r8, #2
 8006c4c:	3e01      	subs	r6, #1
 8006c4e:	4638      	mov	r0, r7
 8006c50:	4621      	mov	r1, r4
 8006c52:	612e      	str	r6, [r5, #16]
 8006c54:	f7ff fdd6 	bl	8006804 <_Bfree>
 8006c58:	4628      	mov	r0, r5
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c62:	3301      	adds	r3, #1
 8006c64:	e7c1      	b.n	8006bea <__lshift+0x4a>
 8006c66:	3904      	subs	r1, #4
 8006c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6c:	4298      	cmp	r0, r3
 8006c6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c72:	d8f9      	bhi.n	8006c68 <__lshift+0xc8>
 8006c74:	e7ea      	b.n	8006c4c <__lshift+0xac>
 8006c76:	bf00      	nop
 8006c78:	08008d4f 	.word	0x08008d4f
 8006c7c:	08008d60 	.word	0x08008d60

08006c80 <__mcmp>:
 8006c80:	4603      	mov	r3, r0
 8006c82:	690a      	ldr	r2, [r1, #16]
 8006c84:	6900      	ldr	r0, [r0, #16]
 8006c86:	b530      	push	{r4, r5, lr}
 8006c88:	1a80      	subs	r0, r0, r2
 8006c8a:	d10d      	bne.n	8006ca8 <__mcmp+0x28>
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	3114      	adds	r1, #20
 8006c90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ca0:	4295      	cmp	r5, r2
 8006ca2:	d002      	beq.n	8006caa <__mcmp+0x2a>
 8006ca4:	d304      	bcc.n	8006cb0 <__mcmp+0x30>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	bd30      	pop	{r4, r5, pc}
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	d3f4      	bcc.n	8006c98 <__mcmp+0x18>
 8006cae:	e7fb      	b.n	8006ca8 <__mcmp+0x28>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb4:	e7f8      	b.n	8006ca8 <__mcmp+0x28>
	...

08006cb8 <__mdiff>:
 8006cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	f7ff ffdb 	bl	8006c80 <__mcmp>
 8006cca:	1e06      	subs	r6, r0, #0
 8006ccc:	d111      	bne.n	8006cf2 <__mdiff+0x3a>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff fd57 	bl	8006784 <_Balloc>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	b928      	cbnz	r0, 8006ce6 <__mdiff+0x2e>
 8006cda:	f240 2132 	movw	r1, #562	; 0x232
 8006cde:	4b3a      	ldr	r3, [pc, #232]	; (8006dc8 <__mdiff+0x110>)
 8006ce0:	483a      	ldr	r0, [pc, #232]	; (8006dcc <__mdiff+0x114>)
 8006ce2:	f000 fa41 	bl	8007168 <__assert_func>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006cec:	4610      	mov	r0, r2
 8006cee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	bfa4      	itt	ge
 8006cf4:	4623      	movge	r3, r4
 8006cf6:	462c      	movge	r4, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	6861      	ldr	r1, [r4, #4]
 8006cfc:	bfa6      	itte	ge
 8006cfe:	461d      	movge	r5, r3
 8006d00:	2600      	movge	r6, #0
 8006d02:	2601      	movlt	r6, #1
 8006d04:	f7ff fd3e 	bl	8006784 <_Balloc>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	b918      	cbnz	r0, 8006d14 <__mdiff+0x5c>
 8006d0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d10:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <__mdiff+0x110>)
 8006d12:	e7e5      	b.n	8006ce0 <__mdiff+0x28>
 8006d14:	f102 0814 	add.w	r8, r2, #20
 8006d18:	46c2      	mov	sl, r8
 8006d1a:	f04f 0c00 	mov.w	ip, #0
 8006d1e:	6927      	ldr	r7, [r4, #16]
 8006d20:	60c6      	str	r6, [r0, #12]
 8006d22:	692e      	ldr	r6, [r5, #16]
 8006d24:	f104 0014 	add.w	r0, r4, #20
 8006d28:	f105 0914 	add.w	r9, r5, #20
 8006d2c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006d30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d34:	3410      	adds	r4, #16
 8006d36:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006d3a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d3e:	fa1f f18b 	uxth.w	r1, fp
 8006d42:	448c      	add	ip, r1
 8006d44:	b299      	uxth	r1, r3
 8006d46:	0c1b      	lsrs	r3, r3, #16
 8006d48:	ebac 0101 	sub.w	r1, ip, r1
 8006d4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d54:	b289      	uxth	r1, r1
 8006d56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006d5a:	454e      	cmp	r6, r9
 8006d5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d60:	f84a 3b04 	str.w	r3, [sl], #4
 8006d64:	d8e7      	bhi.n	8006d36 <__mdiff+0x7e>
 8006d66:	1b73      	subs	r3, r6, r5
 8006d68:	3b15      	subs	r3, #21
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	3515      	adds	r5, #21
 8006d70:	3304      	adds	r3, #4
 8006d72:	42ae      	cmp	r6, r5
 8006d74:	bf38      	it	cc
 8006d76:	2304      	movcc	r3, #4
 8006d78:	4418      	add	r0, r3
 8006d7a:	4443      	add	r3, r8
 8006d7c:	461e      	mov	r6, r3
 8006d7e:	4605      	mov	r5, r0
 8006d80:	4575      	cmp	r5, lr
 8006d82:	d30e      	bcc.n	8006da2 <__mdiff+0xea>
 8006d84:	f10e 0103 	add.w	r1, lr, #3
 8006d88:	1a09      	subs	r1, r1, r0
 8006d8a:	f021 0103 	bic.w	r1, r1, #3
 8006d8e:	3803      	subs	r0, #3
 8006d90:	4586      	cmp	lr, r0
 8006d92:	bf38      	it	cc
 8006d94:	2100      	movcc	r1, #0
 8006d96:	4419      	add	r1, r3
 8006d98:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006d9c:	b18b      	cbz	r3, 8006dc2 <__mdiff+0x10a>
 8006d9e:	6117      	str	r7, [r2, #16]
 8006da0:	e7a4      	b.n	8006cec <__mdiff+0x34>
 8006da2:	f855 8b04 	ldr.w	r8, [r5], #4
 8006da6:	fa1f f188 	uxth.w	r1, r8
 8006daa:	4461      	add	r1, ip
 8006dac:	140c      	asrs	r4, r1, #16
 8006dae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006db2:	b289      	uxth	r1, r1
 8006db4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006db8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006dbc:	f846 1b04 	str.w	r1, [r6], #4
 8006dc0:	e7de      	b.n	8006d80 <__mdiff+0xc8>
 8006dc2:	3f01      	subs	r7, #1
 8006dc4:	e7e8      	b.n	8006d98 <__mdiff+0xe0>
 8006dc6:	bf00      	nop
 8006dc8:	08008d4f 	.word	0x08008d4f
 8006dcc:	08008d60 	.word	0x08008d60

08006dd0 <__d2b>:
 8006dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006dda:	4690      	mov	r8, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	f7ff fcd1 	bl	8006784 <_Balloc>
 8006de2:	4604      	mov	r4, r0
 8006de4:	b930      	cbnz	r0, 8006df4 <__d2b+0x24>
 8006de6:	4602      	mov	r2, r0
 8006de8:	f240 310a 	movw	r1, #778	; 0x30a
 8006dec:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <__d2b+0xb0>)
 8006dee:	4825      	ldr	r0, [pc, #148]	; (8006e84 <__d2b+0xb4>)
 8006df0:	f000 f9ba 	bl	8007168 <__assert_func>
 8006df4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006df8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006dfc:	bb2d      	cbnz	r5, 8006e4a <__d2b+0x7a>
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	f1b8 0300 	subs.w	r3, r8, #0
 8006e04:	d026      	beq.n	8006e54 <__d2b+0x84>
 8006e06:	4668      	mov	r0, sp
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	f7ff fd83 	bl	8006914 <__lo0bits>
 8006e0e:	9900      	ldr	r1, [sp, #0]
 8006e10:	b1f0      	cbz	r0, 8006e50 <__d2b+0x80>
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	f1c0 0320 	rsb	r3, r0, #32
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	40c2      	lsrs	r2, r0
 8006e20:	6163      	str	r3, [r4, #20]
 8006e22:	9201      	str	r2, [sp, #4]
 8006e24:	9b01      	ldr	r3, [sp, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf14      	ite	ne
 8006e2a:	2102      	movne	r1, #2
 8006e2c:	2101      	moveq	r1, #1
 8006e2e:	61a3      	str	r3, [r4, #24]
 8006e30:	6121      	str	r1, [r4, #16]
 8006e32:	b1c5      	cbz	r5, 8006e66 <__d2b+0x96>
 8006e34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e38:	4405      	add	r5, r0
 8006e3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e3e:	603d      	str	r5, [r7, #0]
 8006e40:	6030      	str	r0, [r6, #0]
 8006e42:	4620      	mov	r0, r4
 8006e44:	b002      	add	sp, #8
 8006e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e4e:	e7d6      	b.n	8006dfe <__d2b+0x2e>
 8006e50:	6161      	str	r1, [r4, #20]
 8006e52:	e7e7      	b.n	8006e24 <__d2b+0x54>
 8006e54:	a801      	add	r0, sp, #4
 8006e56:	f7ff fd5d 	bl	8006914 <__lo0bits>
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	6121      	str	r1, [r4, #16]
 8006e60:	6163      	str	r3, [r4, #20]
 8006e62:	3020      	adds	r0, #32
 8006e64:	e7e5      	b.n	8006e32 <__d2b+0x62>
 8006e66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e6e:	6038      	str	r0, [r7, #0]
 8006e70:	6918      	ldr	r0, [r3, #16]
 8006e72:	f7ff fd2f 	bl	80068d4 <__hi0bits>
 8006e76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e7a:	6031      	str	r1, [r6, #0]
 8006e7c:	e7e1      	b.n	8006e42 <__d2b+0x72>
 8006e7e:	bf00      	nop
 8006e80:	08008d4f 	.word	0x08008d4f
 8006e84:	08008d60 	.word	0x08008d60

08006e88 <_calloc_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	fba1 5402 	umull	r5, r4, r1, r2
 8006e8e:	b934      	cbnz	r4, 8006e9e <_calloc_r+0x16>
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7fe f8cd 	bl	8005030 <_malloc_r>
 8006e96:	4606      	mov	r6, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <_calloc_r+0x1e>
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	bd70      	pop	{r4, r5, r6, pc}
 8006e9e:	220c      	movs	r2, #12
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	6002      	str	r2, [r0, #0]
 8006ea4:	e7f9      	b.n	8006e9a <_calloc_r+0x12>
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f7fe f851 	bl	8004f50 <memset>
 8006eae:	e7f4      	b.n	8006e9a <_calloc_r+0x12>

08006eb0 <__ssputs_r>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	688e      	ldr	r6, [r1, #8]
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	460c      	mov	r4, r1
 8006ebc:	4690      	mov	r8, r2
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	d838      	bhi.n	8006f34 <__ssputs_r+0x84>
 8006ec2:	898a      	ldrh	r2, [r1, #12]
 8006ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ec8:	d032      	beq.n	8006f30 <__ssputs_r+0x80>
 8006eca:	6825      	ldr	r5, [r4, #0]
 8006ecc:	6909      	ldr	r1, [r1, #16]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	eba5 0901 	sub.w	r9, r5, r1
 8006ed4:	6965      	ldr	r5, [r4, #20]
 8006ed6:	444b      	add	r3, r9
 8006ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ee0:	106d      	asrs	r5, r5, #1
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	bf38      	it	cc
 8006ee6:	461d      	movcc	r5, r3
 8006ee8:	0553      	lsls	r3, r2, #21
 8006eea:	d531      	bpl.n	8006f50 <__ssputs_r+0xa0>
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7fe f89f 	bl	8005030 <_malloc_r>
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	b950      	cbnz	r0, 8006f0c <__ssputs_r+0x5c>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efc:	f8ca 3000 	str.w	r3, [sl]
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	464a      	mov	r2, r9
 8006f0e:	6921      	ldr	r1, [r4, #16]
 8006f10:	f7ff fc1e 	bl	8006750 <memcpy>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	6126      	str	r6, [r4, #16]
 8006f22:	444e      	add	r6, r9
 8006f24:	6026      	str	r6, [r4, #0]
 8006f26:	463e      	mov	r6, r7
 8006f28:	6165      	str	r5, [r4, #20]
 8006f2a:	eba5 0509 	sub.w	r5, r5, r9
 8006f2e:	60a5      	str	r5, [r4, #8]
 8006f30:	42be      	cmp	r6, r7
 8006f32:	d900      	bls.n	8006f36 <__ssputs_r+0x86>
 8006f34:	463e      	mov	r6, r7
 8006f36:	4632      	mov	r2, r6
 8006f38:	4641      	mov	r1, r8
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	f7fd ffee 	bl	8004f1c <memmove>
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	2000      	movs	r0, #0
 8006f44:	1b9b      	subs	r3, r3, r6
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	4433      	add	r3, r6
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	e7db      	b.n	8006f08 <__ssputs_r+0x58>
 8006f50:	462a      	mov	r2, r5
 8006f52:	f000 f94e 	bl	80071f2 <_realloc_r>
 8006f56:	4606      	mov	r6, r0
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1e1      	bne.n	8006f20 <__ssputs_r+0x70>
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	f7fd fffe 	bl	8004f60 <_free_r>
 8006f64:	e7c7      	b.n	8006ef6 <__ssputs_r+0x46>
	...

08006f68 <_svfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	4698      	mov	r8, r3
 8006f6e:	898b      	ldrh	r3, [r1, #12]
 8006f70:	4607      	mov	r7, r0
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	460d      	mov	r5, r1
 8006f76:	4614      	mov	r4, r2
 8006f78:	b09d      	sub	sp, #116	; 0x74
 8006f7a:	d50e      	bpl.n	8006f9a <_svfiprintf_r+0x32>
 8006f7c:	690b      	ldr	r3, [r1, #16]
 8006f7e:	b963      	cbnz	r3, 8006f9a <_svfiprintf_r+0x32>
 8006f80:	2140      	movs	r1, #64	; 0x40
 8006f82:	f7fe f855 	bl	8005030 <_malloc_r>
 8006f86:	6028      	str	r0, [r5, #0]
 8006f88:	6128      	str	r0, [r5, #16]
 8006f8a:	b920      	cbnz	r0, 8006f96 <_svfiprintf_r+0x2e>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f94:	e0d1      	b.n	800713a <_svfiprintf_r+0x1d2>
 8006f96:	2340      	movs	r3, #64	; 0x40
 8006f98:	616b      	str	r3, [r5, #20]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9e:	2320      	movs	r3, #32
 8006fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	f04f 0901 	mov.w	r9, #1
 8006faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007154 <_svfiprintf_r+0x1ec>
 8006fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	469a      	mov	sl, r3
 8006fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fbe:	b10a      	cbz	r2, 8006fc4 <_svfiprintf_r+0x5c>
 8006fc0:	2a25      	cmp	r2, #37	; 0x25
 8006fc2:	d1f9      	bne.n	8006fb8 <_svfiprintf_r+0x50>
 8006fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc8:	d00b      	beq.n	8006fe2 <_svfiprintf_r+0x7a>
 8006fca:	465b      	mov	r3, fp
 8006fcc:	4622      	mov	r2, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ff6d 	bl	8006eb0 <__ssputs_r>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f000 80aa 	beq.w	8007130 <_svfiprintf_r+0x1c8>
 8006fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fde:	445a      	add	r2, fp
 8006fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80a2 	beq.w	8007130 <_svfiprintf_r+0x1c8>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff6:	f10a 0a01 	add.w	sl, sl, #1
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	9307      	str	r3, [sp, #28]
 8006ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007002:	931a      	str	r3, [sp, #104]	; 0x68
 8007004:	4654      	mov	r4, sl
 8007006:	2205      	movs	r2, #5
 8007008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700c:	4851      	ldr	r0, [pc, #324]	; (8007154 <_svfiprintf_r+0x1ec>)
 800700e:	f7ff fb91 	bl	8006734 <memchr>
 8007012:	9a04      	ldr	r2, [sp, #16]
 8007014:	b9d8      	cbnz	r0, 800704e <_svfiprintf_r+0xe6>
 8007016:	06d0      	lsls	r0, r2, #27
 8007018:	bf44      	itt	mi
 800701a:	2320      	movmi	r3, #32
 800701c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007020:	0711      	lsls	r1, r2, #28
 8007022:	bf44      	itt	mi
 8007024:	232b      	movmi	r3, #43	; 0x2b
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702a:	f89a 3000 	ldrb.w	r3, [sl]
 800702e:	2b2a      	cmp	r3, #42	; 0x2a
 8007030:	d015      	beq.n	800705e <_svfiprintf_r+0xf6>
 8007032:	4654      	mov	r4, sl
 8007034:	2000      	movs	r0, #0
 8007036:	f04f 0c0a 	mov.w	ip, #10
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	4621      	mov	r1, r4
 800703e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007042:	3b30      	subs	r3, #48	; 0x30
 8007044:	2b09      	cmp	r3, #9
 8007046:	d94e      	bls.n	80070e6 <_svfiprintf_r+0x17e>
 8007048:	b1b0      	cbz	r0, 8007078 <_svfiprintf_r+0x110>
 800704a:	9207      	str	r2, [sp, #28]
 800704c:	e014      	b.n	8007078 <_svfiprintf_r+0x110>
 800704e:	eba0 0308 	sub.w	r3, r0, r8
 8007052:	fa09 f303 	lsl.w	r3, r9, r3
 8007056:	4313      	orrs	r3, r2
 8007058:	46a2      	mov	sl, r4
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	e7d2      	b.n	8007004 <_svfiprintf_r+0x9c>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	1d19      	adds	r1, r3, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	9103      	str	r1, [sp, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfbb      	ittet	lt
 800706a:	425b      	neglt	r3, r3
 800706c:	f042 0202 	orrlt.w	r2, r2, #2
 8007070:	9307      	strge	r3, [sp, #28]
 8007072:	9307      	strlt	r3, [sp, #28]
 8007074:	bfb8      	it	lt
 8007076:	9204      	strlt	r2, [sp, #16]
 8007078:	7823      	ldrb	r3, [r4, #0]
 800707a:	2b2e      	cmp	r3, #46	; 0x2e
 800707c:	d10c      	bne.n	8007098 <_svfiprintf_r+0x130>
 800707e:	7863      	ldrb	r3, [r4, #1]
 8007080:	2b2a      	cmp	r3, #42	; 0x2a
 8007082:	d135      	bne.n	80070f0 <_svfiprintf_r+0x188>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	3402      	adds	r4, #2
 8007088:	1d1a      	adds	r2, r3, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	9203      	str	r2, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007096:	9305      	str	r3, [sp, #20]
 8007098:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007158 <_svfiprintf_r+0x1f0>
 800709c:	2203      	movs	r2, #3
 800709e:	4650      	mov	r0, sl
 80070a0:	7821      	ldrb	r1, [r4, #0]
 80070a2:	f7ff fb47 	bl	8006734 <memchr>
 80070a6:	b140      	cbz	r0, 80070ba <_svfiprintf_r+0x152>
 80070a8:	2340      	movs	r3, #64	; 0x40
 80070aa:	eba0 000a 	sub.w	r0, r0, sl
 80070ae:	fa03 f000 	lsl.w	r0, r3, r0
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	3401      	adds	r4, #1
 80070b6:	4303      	orrs	r3, r0
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070be:	2206      	movs	r2, #6
 80070c0:	4826      	ldr	r0, [pc, #152]	; (800715c <_svfiprintf_r+0x1f4>)
 80070c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070c6:	f7ff fb35 	bl	8006734 <memchr>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d038      	beq.n	8007140 <_svfiprintf_r+0x1d8>
 80070ce:	4b24      	ldr	r3, [pc, #144]	; (8007160 <_svfiprintf_r+0x1f8>)
 80070d0:	bb1b      	cbnz	r3, 800711a <_svfiprintf_r+0x1b2>
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	3307      	adds	r3, #7
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	3308      	adds	r3, #8
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e0:	4433      	add	r3, r6
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24
 80070e4:	e767      	b.n	8006fb6 <_svfiprintf_r+0x4e>
 80070e6:	460c      	mov	r4, r1
 80070e8:	2001      	movs	r0, #1
 80070ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ee:	e7a5      	b.n	800703c <_svfiprintf_r+0xd4>
 80070f0:	2300      	movs	r3, #0
 80070f2:	f04f 0c0a 	mov.w	ip, #10
 80070f6:	4619      	mov	r1, r3
 80070f8:	3401      	adds	r4, #1
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	4620      	mov	r0, r4
 80070fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007102:	3a30      	subs	r2, #48	; 0x30
 8007104:	2a09      	cmp	r2, #9
 8007106:	d903      	bls.n	8007110 <_svfiprintf_r+0x1a8>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0c5      	beq.n	8007098 <_svfiprintf_r+0x130>
 800710c:	9105      	str	r1, [sp, #20]
 800710e:	e7c3      	b.n	8007098 <_svfiprintf_r+0x130>
 8007110:	4604      	mov	r4, r0
 8007112:	2301      	movs	r3, #1
 8007114:	fb0c 2101 	mla	r1, ip, r1, r2
 8007118:	e7f0      	b.n	80070fc <_svfiprintf_r+0x194>
 800711a:	ab03      	add	r3, sp, #12
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	462a      	mov	r2, r5
 8007120:	4638      	mov	r0, r7
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <_svfiprintf_r+0x1fc>)
 8007124:	a904      	add	r1, sp, #16
 8007126:	f7fe f895 	bl	8005254 <_printf_float>
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	4606      	mov	r6, r0
 800712e:	d1d6      	bne.n	80070de <_svfiprintf_r+0x176>
 8007130:	89ab      	ldrh	r3, [r5, #12]
 8007132:	065b      	lsls	r3, r3, #25
 8007134:	f53f af2c 	bmi.w	8006f90 <_svfiprintf_r+0x28>
 8007138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800713a:	b01d      	add	sp, #116	; 0x74
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	ab03      	add	r3, sp, #12
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	462a      	mov	r2, r5
 8007146:	4638      	mov	r0, r7
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <_svfiprintf_r+0x1fc>)
 800714a:	a904      	add	r1, sp, #16
 800714c:	f7fe fb1e 	bl	800578c <_printf_i>
 8007150:	e7eb      	b.n	800712a <_svfiprintf_r+0x1c2>
 8007152:	bf00      	nop
 8007154:	08008ebc 	.word	0x08008ebc
 8007158:	08008ec2 	.word	0x08008ec2
 800715c:	08008ec6 	.word	0x08008ec6
 8007160:	08005255 	.word	0x08005255
 8007164:	08006eb1 	.word	0x08006eb1

08007168 <__assert_func>:
 8007168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800716a:	4614      	mov	r4, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <__assert_func+0x2c>)
 8007170:	4605      	mov	r5, r0
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68d8      	ldr	r0, [r3, #12]
 8007176:	b14c      	cbz	r4, 800718c <__assert_func+0x24>
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <__assert_func+0x30>)
 800717a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800717e:	9100      	str	r1, [sp, #0]
 8007180:	462b      	mov	r3, r5
 8007182:	4906      	ldr	r1, [pc, #24]	; (800719c <__assert_func+0x34>)
 8007184:	f000 f80e 	bl	80071a4 <fiprintf>
 8007188:	f000 fa88 	bl	800769c <abort>
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <__assert_func+0x38>)
 800718e:	461c      	mov	r4, r3
 8007190:	e7f3      	b.n	800717a <__assert_func+0x12>
 8007192:	bf00      	nop
 8007194:	20000040 	.word	0x20000040
 8007198:	08008ecd 	.word	0x08008ecd
 800719c:	08008eda 	.word	0x08008eda
 80071a0:	08008f08 	.word	0x08008f08

080071a4 <fiprintf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	b503      	push	{r0, r1, lr}
 80071a8:	4601      	mov	r1, r0
 80071aa:	ab03      	add	r3, sp, #12
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <fiprintf+0x20>)
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 f873 	bl	80072a0 <_vfiprintf_r>
 80071ba:	b002      	add	sp, #8
 80071bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c0:	b003      	add	sp, #12
 80071c2:	4770      	bx	lr
 80071c4:	20000040 	.word	0x20000040

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr

080071ce <__ascii_mbtowc>:
 80071ce:	b082      	sub	sp, #8
 80071d0:	b901      	cbnz	r1, 80071d4 <__ascii_mbtowc+0x6>
 80071d2:	a901      	add	r1, sp, #4
 80071d4:	b142      	cbz	r2, 80071e8 <__ascii_mbtowc+0x1a>
 80071d6:	b14b      	cbz	r3, 80071ec <__ascii_mbtowc+0x1e>
 80071d8:	7813      	ldrb	r3, [r2, #0]
 80071da:	600b      	str	r3, [r1, #0]
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	1e10      	subs	r0, r2, #0
 80071e0:	bf18      	it	ne
 80071e2:	2001      	movne	r0, #1
 80071e4:	b002      	add	sp, #8
 80071e6:	4770      	bx	lr
 80071e8:	4610      	mov	r0, r2
 80071ea:	e7fb      	b.n	80071e4 <__ascii_mbtowc+0x16>
 80071ec:	f06f 0001 	mvn.w	r0, #1
 80071f0:	e7f8      	b.n	80071e4 <__ascii_mbtowc+0x16>

080071f2 <_realloc_r>:
 80071f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f6:	4680      	mov	r8, r0
 80071f8:	4614      	mov	r4, r2
 80071fa:	460e      	mov	r6, r1
 80071fc:	b921      	cbnz	r1, 8007208 <_realloc_r+0x16>
 80071fe:	4611      	mov	r1, r2
 8007200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	f7fd bf14 	b.w	8005030 <_malloc_r>
 8007208:	b92a      	cbnz	r2, 8007216 <_realloc_r+0x24>
 800720a:	f7fd fea9 	bl	8004f60 <_free_r>
 800720e:	4625      	mov	r5, r4
 8007210:	4628      	mov	r0, r5
 8007212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007216:	f000 fc61 	bl	8007adc <_malloc_usable_size_r>
 800721a:	4284      	cmp	r4, r0
 800721c:	4607      	mov	r7, r0
 800721e:	d802      	bhi.n	8007226 <_realloc_r+0x34>
 8007220:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007224:	d812      	bhi.n	800724c <_realloc_r+0x5a>
 8007226:	4621      	mov	r1, r4
 8007228:	4640      	mov	r0, r8
 800722a:	f7fd ff01 	bl	8005030 <_malloc_r>
 800722e:	4605      	mov	r5, r0
 8007230:	2800      	cmp	r0, #0
 8007232:	d0ed      	beq.n	8007210 <_realloc_r+0x1e>
 8007234:	42bc      	cmp	r4, r7
 8007236:	4622      	mov	r2, r4
 8007238:	4631      	mov	r1, r6
 800723a:	bf28      	it	cs
 800723c:	463a      	movcs	r2, r7
 800723e:	f7ff fa87 	bl	8006750 <memcpy>
 8007242:	4631      	mov	r1, r6
 8007244:	4640      	mov	r0, r8
 8007246:	f7fd fe8b 	bl	8004f60 <_free_r>
 800724a:	e7e1      	b.n	8007210 <_realloc_r+0x1e>
 800724c:	4635      	mov	r5, r6
 800724e:	e7df      	b.n	8007210 <_realloc_r+0x1e>

08007250 <__sfputc_r>:
 8007250:	6893      	ldr	r3, [r2, #8]
 8007252:	b410      	push	{r4}
 8007254:	3b01      	subs	r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	6093      	str	r3, [r2, #8]
 800725a:	da07      	bge.n	800726c <__sfputc_r+0x1c>
 800725c:	6994      	ldr	r4, [r2, #24]
 800725e:	42a3      	cmp	r3, r4
 8007260:	db01      	blt.n	8007266 <__sfputc_r+0x16>
 8007262:	290a      	cmp	r1, #10
 8007264:	d102      	bne.n	800726c <__sfputc_r+0x1c>
 8007266:	bc10      	pop	{r4}
 8007268:	f000 b94a 	b.w	8007500 <__swbuf_r>
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	1c58      	adds	r0, r3, #1
 8007270:	6010      	str	r0, [r2, #0]
 8007272:	7019      	strb	r1, [r3, #0]
 8007274:	4608      	mov	r0, r1
 8007276:	bc10      	pop	{r4}
 8007278:	4770      	bx	lr

0800727a <__sfputs_r>:
 800727a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727c:	4606      	mov	r6, r0
 800727e:	460f      	mov	r7, r1
 8007280:	4614      	mov	r4, r2
 8007282:	18d5      	adds	r5, r2, r3
 8007284:	42ac      	cmp	r4, r5
 8007286:	d101      	bne.n	800728c <__sfputs_r+0x12>
 8007288:	2000      	movs	r0, #0
 800728a:	e007      	b.n	800729c <__sfputs_r+0x22>
 800728c:	463a      	mov	r2, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007294:	f7ff ffdc 	bl	8007250 <__sfputc_r>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d1f3      	bne.n	8007284 <__sfputs_r+0xa>
 800729c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072a0 <_vfiprintf_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	460d      	mov	r5, r1
 80072a6:	4614      	mov	r4, r2
 80072a8:	4698      	mov	r8, r3
 80072aa:	4606      	mov	r6, r0
 80072ac:	b09d      	sub	sp, #116	; 0x74
 80072ae:	b118      	cbz	r0, 80072b8 <_vfiprintf_r+0x18>
 80072b0:	6983      	ldr	r3, [r0, #24]
 80072b2:	b90b      	cbnz	r3, 80072b8 <_vfiprintf_r+0x18>
 80072b4:	f000 fb10 	bl	80078d8 <__sinit>
 80072b8:	4b89      	ldr	r3, [pc, #548]	; (80074e0 <_vfiprintf_r+0x240>)
 80072ba:	429d      	cmp	r5, r3
 80072bc:	d11b      	bne.n	80072f6 <_vfiprintf_r+0x56>
 80072be:	6875      	ldr	r5, [r6, #4]
 80072c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c2:	07d9      	lsls	r1, r3, #31
 80072c4:	d405      	bmi.n	80072d2 <_vfiprintf_r+0x32>
 80072c6:	89ab      	ldrh	r3, [r5, #12]
 80072c8:	059a      	lsls	r2, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <_vfiprintf_r+0x32>
 80072cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ce:	f7ff ff7c 	bl	80071ca <__retarget_lock_acquire_recursive>
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	071b      	lsls	r3, r3, #28
 80072d6:	d501      	bpl.n	80072dc <_vfiprintf_r+0x3c>
 80072d8:	692b      	ldr	r3, [r5, #16]
 80072da:	b9eb      	cbnz	r3, 8007318 <_vfiprintf_r+0x78>
 80072dc:	4629      	mov	r1, r5
 80072de:	4630      	mov	r0, r6
 80072e0:	f000 f96e 	bl	80075c0 <__swsetup_r>
 80072e4:	b1c0      	cbz	r0, 8007318 <_vfiprintf_r+0x78>
 80072e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e8:	07dc      	lsls	r4, r3, #31
 80072ea:	d50e      	bpl.n	800730a <_vfiprintf_r+0x6a>
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f0:	b01d      	add	sp, #116	; 0x74
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	4b7b      	ldr	r3, [pc, #492]	; (80074e4 <_vfiprintf_r+0x244>)
 80072f8:	429d      	cmp	r5, r3
 80072fa:	d101      	bne.n	8007300 <_vfiprintf_r+0x60>
 80072fc:	68b5      	ldr	r5, [r6, #8]
 80072fe:	e7df      	b.n	80072c0 <_vfiprintf_r+0x20>
 8007300:	4b79      	ldr	r3, [pc, #484]	; (80074e8 <_vfiprintf_r+0x248>)
 8007302:	429d      	cmp	r5, r3
 8007304:	bf08      	it	eq
 8007306:	68f5      	ldreq	r5, [r6, #12]
 8007308:	e7da      	b.n	80072c0 <_vfiprintf_r+0x20>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	0598      	lsls	r0, r3, #22
 800730e:	d4ed      	bmi.n	80072ec <_vfiprintf_r+0x4c>
 8007310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007312:	f7ff ff5b 	bl	80071cc <__retarget_lock_release_recursive>
 8007316:	e7e9      	b.n	80072ec <_vfiprintf_r+0x4c>
 8007318:	2300      	movs	r3, #0
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	2320      	movs	r3, #32
 800731e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007322:	2330      	movs	r3, #48	; 0x30
 8007324:	f04f 0901 	mov.w	r9, #1
 8007328:	f8cd 800c 	str.w	r8, [sp, #12]
 800732c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80074ec <_vfiprintf_r+0x24c>
 8007330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007334:	4623      	mov	r3, r4
 8007336:	469a      	mov	sl, r3
 8007338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733c:	b10a      	cbz	r2, 8007342 <_vfiprintf_r+0xa2>
 800733e:	2a25      	cmp	r2, #37	; 0x25
 8007340:	d1f9      	bne.n	8007336 <_vfiprintf_r+0x96>
 8007342:	ebba 0b04 	subs.w	fp, sl, r4
 8007346:	d00b      	beq.n	8007360 <_vfiprintf_r+0xc0>
 8007348:	465b      	mov	r3, fp
 800734a:	4622      	mov	r2, r4
 800734c:	4629      	mov	r1, r5
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff ff93 	bl	800727a <__sfputs_r>
 8007354:	3001      	adds	r0, #1
 8007356:	f000 80aa 	beq.w	80074ae <_vfiprintf_r+0x20e>
 800735a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735c:	445a      	add	r2, fp
 800735e:	9209      	str	r2, [sp, #36]	; 0x24
 8007360:	f89a 3000 	ldrb.w	r3, [sl]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80a2 	beq.w	80074ae <_vfiprintf_r+0x20e>
 800736a:	2300      	movs	r3, #0
 800736c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007374:	f10a 0a01 	add.w	sl, sl, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007380:	931a      	str	r3, [sp, #104]	; 0x68
 8007382:	4654      	mov	r4, sl
 8007384:	2205      	movs	r2, #5
 8007386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738a:	4858      	ldr	r0, [pc, #352]	; (80074ec <_vfiprintf_r+0x24c>)
 800738c:	f7ff f9d2 	bl	8006734 <memchr>
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	b9d8      	cbnz	r0, 80073cc <_vfiprintf_r+0x12c>
 8007394:	06d1      	lsls	r1, r2, #27
 8007396:	bf44      	itt	mi
 8007398:	2320      	movmi	r3, #32
 800739a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739e:	0713      	lsls	r3, r2, #28
 80073a0:	bf44      	itt	mi
 80073a2:	232b      	movmi	r3, #43	; 0x2b
 80073a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ac:	2b2a      	cmp	r3, #42	; 0x2a
 80073ae:	d015      	beq.n	80073dc <_vfiprintf_r+0x13c>
 80073b0:	4654      	mov	r4, sl
 80073b2:	2000      	movs	r0, #0
 80073b4:	f04f 0c0a 	mov.w	ip, #10
 80073b8:	9a07      	ldr	r2, [sp, #28]
 80073ba:	4621      	mov	r1, r4
 80073bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c0:	3b30      	subs	r3, #48	; 0x30
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d94e      	bls.n	8007464 <_vfiprintf_r+0x1c4>
 80073c6:	b1b0      	cbz	r0, 80073f6 <_vfiprintf_r+0x156>
 80073c8:	9207      	str	r2, [sp, #28]
 80073ca:	e014      	b.n	80073f6 <_vfiprintf_r+0x156>
 80073cc:	eba0 0308 	sub.w	r3, r0, r8
 80073d0:	fa09 f303 	lsl.w	r3, r9, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	46a2      	mov	sl, r4
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	e7d2      	b.n	8007382 <_vfiprintf_r+0xe2>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	1d19      	adds	r1, r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	9103      	str	r1, [sp, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfbb      	ittet	lt
 80073e8:	425b      	neglt	r3, r3
 80073ea:	f042 0202 	orrlt.w	r2, r2, #2
 80073ee:	9307      	strge	r3, [sp, #28]
 80073f0:	9307      	strlt	r3, [sp, #28]
 80073f2:	bfb8      	it	lt
 80073f4:	9204      	strlt	r2, [sp, #16]
 80073f6:	7823      	ldrb	r3, [r4, #0]
 80073f8:	2b2e      	cmp	r3, #46	; 0x2e
 80073fa:	d10c      	bne.n	8007416 <_vfiprintf_r+0x176>
 80073fc:	7863      	ldrb	r3, [r4, #1]
 80073fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007400:	d135      	bne.n	800746e <_vfiprintf_r+0x1ce>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	3402      	adds	r4, #2
 8007406:	1d1a      	adds	r2, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	9203      	str	r2, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfb8      	it	lt
 8007410:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80074f0 <_vfiprintf_r+0x250>
 800741a:	2203      	movs	r2, #3
 800741c:	4650      	mov	r0, sl
 800741e:	7821      	ldrb	r1, [r4, #0]
 8007420:	f7ff f988 	bl	8006734 <memchr>
 8007424:	b140      	cbz	r0, 8007438 <_vfiprintf_r+0x198>
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	eba0 000a 	sub.w	r0, r0, sl
 800742c:	fa03 f000 	lsl.w	r0, r3, r0
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	3401      	adds	r4, #1
 8007434:	4303      	orrs	r3, r0
 8007436:	9304      	str	r3, [sp, #16]
 8007438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743c:	2206      	movs	r2, #6
 800743e:	482d      	ldr	r0, [pc, #180]	; (80074f4 <_vfiprintf_r+0x254>)
 8007440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007444:	f7ff f976 	bl	8006734 <memchr>
 8007448:	2800      	cmp	r0, #0
 800744a:	d03f      	beq.n	80074cc <_vfiprintf_r+0x22c>
 800744c:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <_vfiprintf_r+0x258>)
 800744e:	bb1b      	cbnz	r3, 8007498 <_vfiprintf_r+0x1f8>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	3307      	adds	r3, #7
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	3308      	adds	r3, #8
 800745a:	9303      	str	r3, [sp, #12]
 800745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745e:	443b      	add	r3, r7
 8007460:	9309      	str	r3, [sp, #36]	; 0x24
 8007462:	e767      	b.n	8007334 <_vfiprintf_r+0x94>
 8007464:	460c      	mov	r4, r1
 8007466:	2001      	movs	r0, #1
 8007468:	fb0c 3202 	mla	r2, ip, r2, r3
 800746c:	e7a5      	b.n	80073ba <_vfiprintf_r+0x11a>
 800746e:	2300      	movs	r3, #0
 8007470:	f04f 0c0a 	mov.w	ip, #10
 8007474:	4619      	mov	r1, r3
 8007476:	3401      	adds	r4, #1
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	4620      	mov	r0, r4
 800747c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007480:	3a30      	subs	r2, #48	; 0x30
 8007482:	2a09      	cmp	r2, #9
 8007484:	d903      	bls.n	800748e <_vfiprintf_r+0x1ee>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0c5      	beq.n	8007416 <_vfiprintf_r+0x176>
 800748a:	9105      	str	r1, [sp, #20]
 800748c:	e7c3      	b.n	8007416 <_vfiprintf_r+0x176>
 800748e:	4604      	mov	r4, r0
 8007490:	2301      	movs	r3, #1
 8007492:	fb0c 2101 	mla	r1, ip, r1, r2
 8007496:	e7f0      	b.n	800747a <_vfiprintf_r+0x1da>
 8007498:	ab03      	add	r3, sp, #12
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	462a      	mov	r2, r5
 800749e:	4630      	mov	r0, r6
 80074a0:	4b16      	ldr	r3, [pc, #88]	; (80074fc <_vfiprintf_r+0x25c>)
 80074a2:	a904      	add	r1, sp, #16
 80074a4:	f7fd fed6 	bl	8005254 <_printf_float>
 80074a8:	4607      	mov	r7, r0
 80074aa:	1c78      	adds	r0, r7, #1
 80074ac:	d1d6      	bne.n	800745c <_vfiprintf_r+0x1bc>
 80074ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074b0:	07d9      	lsls	r1, r3, #31
 80074b2:	d405      	bmi.n	80074c0 <_vfiprintf_r+0x220>
 80074b4:	89ab      	ldrh	r3, [r5, #12]
 80074b6:	059a      	lsls	r2, r3, #22
 80074b8:	d402      	bmi.n	80074c0 <_vfiprintf_r+0x220>
 80074ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074bc:	f7ff fe86 	bl	80071cc <__retarget_lock_release_recursive>
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	065b      	lsls	r3, r3, #25
 80074c4:	f53f af12 	bmi.w	80072ec <_vfiprintf_r+0x4c>
 80074c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ca:	e711      	b.n	80072f0 <_vfiprintf_r+0x50>
 80074cc:	ab03      	add	r3, sp, #12
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	462a      	mov	r2, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <_vfiprintf_r+0x25c>)
 80074d6:	a904      	add	r1, sp, #16
 80074d8:	f7fe f958 	bl	800578c <_printf_i>
 80074dc:	e7e4      	b.n	80074a8 <_vfiprintf_r+0x208>
 80074de:	bf00      	nop
 80074e0:	08009034 	.word	0x08009034
 80074e4:	08009054 	.word	0x08009054
 80074e8:	08009014 	.word	0x08009014
 80074ec:	08008ebc 	.word	0x08008ebc
 80074f0:	08008ec2 	.word	0x08008ec2
 80074f4:	08008ec6 	.word	0x08008ec6
 80074f8:	08005255 	.word	0x08005255
 80074fc:	0800727b 	.word	0x0800727b

08007500 <__swbuf_r>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	460e      	mov	r6, r1
 8007504:	4614      	mov	r4, r2
 8007506:	4605      	mov	r5, r0
 8007508:	b118      	cbz	r0, 8007512 <__swbuf_r+0x12>
 800750a:	6983      	ldr	r3, [r0, #24]
 800750c:	b90b      	cbnz	r3, 8007512 <__swbuf_r+0x12>
 800750e:	f000 f9e3 	bl	80078d8 <__sinit>
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <__swbuf_r+0x98>)
 8007514:	429c      	cmp	r4, r3
 8007516:	d12b      	bne.n	8007570 <__swbuf_r+0x70>
 8007518:	686c      	ldr	r4, [r5, #4]
 800751a:	69a3      	ldr	r3, [r4, #24]
 800751c:	60a3      	str	r3, [r4, #8]
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	071a      	lsls	r2, r3, #28
 8007522:	d52f      	bpl.n	8007584 <__swbuf_r+0x84>
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	b36b      	cbz	r3, 8007584 <__swbuf_r+0x84>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	b2f6      	uxtb	r6, r6
 800752e:	1ac0      	subs	r0, r0, r3
 8007530:	6963      	ldr	r3, [r4, #20]
 8007532:	4637      	mov	r7, r6
 8007534:	4283      	cmp	r3, r0
 8007536:	dc04      	bgt.n	8007542 <__swbuf_r+0x42>
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f000 f938 	bl	80077b0 <_fflush_r>
 8007540:	bb30      	cbnz	r0, 8007590 <__swbuf_r+0x90>
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	3001      	adds	r0, #1
 8007546:	3b01      	subs	r3, #1
 8007548:	60a3      	str	r3, [r4, #8]
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	701e      	strb	r6, [r3, #0]
 8007552:	6963      	ldr	r3, [r4, #20]
 8007554:	4283      	cmp	r3, r0
 8007556:	d004      	beq.n	8007562 <__swbuf_r+0x62>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	d506      	bpl.n	800756c <__swbuf_r+0x6c>
 800755e:	2e0a      	cmp	r6, #10
 8007560:	d104      	bne.n	800756c <__swbuf_r+0x6c>
 8007562:	4621      	mov	r1, r4
 8007564:	4628      	mov	r0, r5
 8007566:	f000 f923 	bl	80077b0 <_fflush_r>
 800756a:	b988      	cbnz	r0, 8007590 <__swbuf_r+0x90>
 800756c:	4638      	mov	r0, r7
 800756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <__swbuf_r+0x9c>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <__swbuf_r+0x7a>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7cf      	b.n	800751a <__swbuf_r+0x1a>
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <__swbuf_r+0xa0>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7ca      	b.n	800751a <__swbuf_r+0x1a>
 8007584:	4621      	mov	r1, r4
 8007586:	4628      	mov	r0, r5
 8007588:	f000 f81a 	bl	80075c0 <__swsetup_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0cb      	beq.n	8007528 <__swbuf_r+0x28>
 8007590:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007594:	e7ea      	b.n	800756c <__swbuf_r+0x6c>
 8007596:	bf00      	nop
 8007598:	08009034 	.word	0x08009034
 800759c:	08009054 	.word	0x08009054
 80075a0:	08009014 	.word	0x08009014

080075a4 <__ascii_wctomb>:
 80075a4:	4603      	mov	r3, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	b141      	cbz	r1, 80075bc <__ascii_wctomb+0x18>
 80075aa:	2aff      	cmp	r2, #255	; 0xff
 80075ac:	d904      	bls.n	80075b8 <__ascii_wctomb+0x14>
 80075ae:	228a      	movs	r2, #138	; 0x8a
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	4770      	bx	lr
 80075b8:	2001      	movs	r0, #1
 80075ba:	700a      	strb	r2, [r1, #0]
 80075bc:	4770      	bx	lr
	...

080075c0 <__swsetup_r>:
 80075c0:	4b32      	ldr	r3, [pc, #200]	; (800768c <__swsetup_r+0xcc>)
 80075c2:	b570      	push	{r4, r5, r6, lr}
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	4606      	mov	r6, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	b125      	cbz	r5, 80075d6 <__swsetup_r+0x16>
 80075cc:	69ab      	ldr	r3, [r5, #24]
 80075ce:	b913      	cbnz	r3, 80075d6 <__swsetup_r+0x16>
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f981 	bl	80078d8 <__sinit>
 80075d6:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <__swsetup_r+0xd0>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	d10f      	bne.n	80075fc <__swsetup_r+0x3c>
 80075dc:	686c      	ldr	r4, [r5, #4]
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075e4:	0719      	lsls	r1, r3, #28
 80075e6:	d42c      	bmi.n	8007642 <__swsetup_r+0x82>
 80075e8:	06dd      	lsls	r5, r3, #27
 80075ea:	d411      	bmi.n	8007610 <__swsetup_r+0x50>
 80075ec:	2309      	movs	r3, #9
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e03e      	b.n	800767a <__swsetup_r+0xba>
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <__swsetup_r+0xd4>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d101      	bne.n	8007606 <__swsetup_r+0x46>
 8007602:	68ac      	ldr	r4, [r5, #8]
 8007604:	e7eb      	b.n	80075de <__swsetup_r+0x1e>
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <__swsetup_r+0xd8>)
 8007608:	429c      	cmp	r4, r3
 800760a:	bf08      	it	eq
 800760c:	68ec      	ldreq	r4, [r5, #12]
 800760e:	e7e6      	b.n	80075de <__swsetup_r+0x1e>
 8007610:	0758      	lsls	r0, r3, #29
 8007612:	d512      	bpl.n	800763a <__swsetup_r+0x7a>
 8007614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007616:	b141      	cbz	r1, 800762a <__swsetup_r+0x6a>
 8007618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800761c:	4299      	cmp	r1, r3
 800761e:	d002      	beq.n	8007626 <__swsetup_r+0x66>
 8007620:	4630      	mov	r0, r6
 8007622:	f7fd fc9d 	bl	8004f60 <_free_r>
 8007626:	2300      	movs	r3, #0
 8007628:	6363      	str	r3, [r4, #52]	; 0x34
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	2300      	movs	r3, #0
 8007634:	6063      	str	r3, [r4, #4]
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f043 0308 	orr.w	r3, r3, #8
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	b94b      	cbnz	r3, 800765a <__swsetup_r+0x9a>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800764c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007650:	d003      	beq.n	800765a <__swsetup_r+0x9a>
 8007652:	4621      	mov	r1, r4
 8007654:	4630      	mov	r0, r6
 8007656:	f000 fa01 	bl	8007a5c <__smakebuf_r>
 800765a:	89a0      	ldrh	r0, [r4, #12]
 800765c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007660:	f010 0301 	ands.w	r3, r0, #1
 8007664:	d00a      	beq.n	800767c <__swsetup_r+0xbc>
 8007666:	2300      	movs	r3, #0
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	6963      	ldr	r3, [r4, #20]
 800766c:	425b      	negs	r3, r3
 800766e:	61a3      	str	r3, [r4, #24]
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	b943      	cbnz	r3, 8007686 <__swsetup_r+0xc6>
 8007674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007678:	d1ba      	bne.n	80075f0 <__swsetup_r+0x30>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	0781      	lsls	r1, r0, #30
 800767e:	bf58      	it	pl
 8007680:	6963      	ldrpl	r3, [r4, #20]
 8007682:	60a3      	str	r3, [r4, #8]
 8007684:	e7f4      	b.n	8007670 <__swsetup_r+0xb0>
 8007686:	2000      	movs	r0, #0
 8007688:	e7f7      	b.n	800767a <__swsetup_r+0xba>
 800768a:	bf00      	nop
 800768c:	20000040 	.word	0x20000040
 8007690:	08009034 	.word	0x08009034
 8007694:	08009054 	.word	0x08009054
 8007698:	08009014 	.word	0x08009014

0800769c <abort>:
 800769c:	2006      	movs	r0, #6
 800769e:	b508      	push	{r3, lr}
 80076a0:	f000 fa4c 	bl	8007b3c <raise>
 80076a4:	2001      	movs	r0, #1
 80076a6:	f7fb f953 	bl	8002950 <_exit>
	...

080076ac <__sflush_r>:
 80076ac:	898a      	ldrh	r2, [r1, #12]
 80076ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b0:	4605      	mov	r5, r0
 80076b2:	0710      	lsls	r0, r2, #28
 80076b4:	460c      	mov	r4, r1
 80076b6:	d457      	bmi.n	8007768 <__sflush_r+0xbc>
 80076b8:	684b      	ldr	r3, [r1, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dc04      	bgt.n	80076c8 <__sflush_r+0x1c>
 80076be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dc01      	bgt.n	80076c8 <__sflush_r+0x1c>
 80076c4:	2000      	movs	r0, #0
 80076c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d0fa      	beq.n	80076c4 <__sflush_r+0x18>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d4:	682f      	ldr	r7, [r5, #0]
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	d032      	beq.n	8007740 <__sflush_r+0x94>
 80076da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	075a      	lsls	r2, r3, #29
 80076e0:	d505      	bpl.n	80076ee <__sflush_r+0x42>
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	1ac0      	subs	r0, r0, r3
 80076e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e8:	b10b      	cbz	r3, 80076ee <__sflush_r+0x42>
 80076ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ec:	1ac0      	subs	r0, r0, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	4602      	mov	r2, r0
 80076f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f4:	4628      	mov	r0, r5
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	d106      	bne.n	800770e <__sflush_r+0x62>
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	291d      	cmp	r1, #29
 8007704:	d82c      	bhi.n	8007760 <__sflush_r+0xb4>
 8007706:	4a29      	ldr	r2, [pc, #164]	; (80077ac <__sflush_r+0x100>)
 8007708:	40ca      	lsrs	r2, r1
 800770a:	07d6      	lsls	r6, r2, #31
 800770c:	d528      	bpl.n	8007760 <__sflush_r+0xb4>
 800770e:	2200      	movs	r2, #0
 8007710:	6062      	str	r2, [r4, #4]
 8007712:	6922      	ldr	r2, [r4, #16]
 8007714:	04d9      	lsls	r1, r3, #19
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	d504      	bpl.n	8007724 <__sflush_r+0x78>
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	d101      	bne.n	8007722 <__sflush_r+0x76>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b903      	cbnz	r3, 8007724 <__sflush_r+0x78>
 8007722:	6560      	str	r0, [r4, #84]	; 0x54
 8007724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	2900      	cmp	r1, #0
 800772a:	d0cb      	beq.n	80076c4 <__sflush_r+0x18>
 800772c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007730:	4299      	cmp	r1, r3
 8007732:	d002      	beq.n	800773a <__sflush_r+0x8e>
 8007734:	4628      	mov	r0, r5
 8007736:	f7fd fc13 	bl	8004f60 <_free_r>
 800773a:	2000      	movs	r0, #0
 800773c:	6360      	str	r0, [r4, #52]	; 0x34
 800773e:	e7c2      	b.n	80076c6 <__sflush_r+0x1a>
 8007740:	6a21      	ldr	r1, [r4, #32]
 8007742:	2301      	movs	r3, #1
 8007744:	4628      	mov	r0, r5
 8007746:	47b0      	blx	r6
 8007748:	1c41      	adds	r1, r0, #1
 800774a:	d1c7      	bne.n	80076dc <__sflush_r+0x30>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0c4      	beq.n	80076dc <__sflush_r+0x30>
 8007752:	2b1d      	cmp	r3, #29
 8007754:	d001      	beq.n	800775a <__sflush_r+0xae>
 8007756:	2b16      	cmp	r3, #22
 8007758:	d101      	bne.n	800775e <__sflush_r+0xb2>
 800775a:	602f      	str	r7, [r5, #0]
 800775c:	e7b2      	b.n	80076c4 <__sflush_r+0x18>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7ae      	b.n	80076c6 <__sflush_r+0x1a>
 8007768:	690f      	ldr	r7, [r1, #16]
 800776a:	2f00      	cmp	r7, #0
 800776c:	d0aa      	beq.n	80076c4 <__sflush_r+0x18>
 800776e:	0793      	lsls	r3, r2, #30
 8007770:	bf18      	it	ne
 8007772:	2300      	movne	r3, #0
 8007774:	680e      	ldr	r6, [r1, #0]
 8007776:	bf08      	it	eq
 8007778:	694b      	ldreq	r3, [r1, #20]
 800777a:	1bf6      	subs	r6, r6, r7
 800777c:	600f      	str	r7, [r1, #0]
 800777e:	608b      	str	r3, [r1, #8]
 8007780:	2e00      	cmp	r6, #0
 8007782:	dd9f      	ble.n	80076c4 <__sflush_r+0x18>
 8007784:	4633      	mov	r3, r6
 8007786:	463a      	mov	r2, r7
 8007788:	4628      	mov	r0, r5
 800778a:	6a21      	ldr	r1, [r4, #32]
 800778c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007790:	47e0      	blx	ip
 8007792:	2800      	cmp	r0, #0
 8007794:	dc06      	bgt.n	80077a4 <__sflush_r+0xf8>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	e790      	b.n	80076c6 <__sflush_r+0x1a>
 80077a4:	4407      	add	r7, r0
 80077a6:	1a36      	subs	r6, r6, r0
 80077a8:	e7ea      	b.n	8007780 <__sflush_r+0xd4>
 80077aa:	bf00      	nop
 80077ac:	20400001 	.word	0x20400001

080077b0 <_fflush_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	690b      	ldr	r3, [r1, #16]
 80077b4:	4605      	mov	r5, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	b913      	cbnz	r3, 80077c0 <_fflush_r+0x10>
 80077ba:	2500      	movs	r5, #0
 80077bc:	4628      	mov	r0, r5
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	b118      	cbz	r0, 80077ca <_fflush_r+0x1a>
 80077c2:	6983      	ldr	r3, [r0, #24]
 80077c4:	b90b      	cbnz	r3, 80077ca <_fflush_r+0x1a>
 80077c6:	f000 f887 	bl	80078d8 <__sinit>
 80077ca:	4b14      	ldr	r3, [pc, #80]	; (800781c <_fflush_r+0x6c>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d11b      	bne.n	8007808 <_fflush_r+0x58>
 80077d0:	686c      	ldr	r4, [r5, #4]
 80077d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ef      	beq.n	80077ba <_fflush_r+0xa>
 80077da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077dc:	07d0      	lsls	r0, r2, #31
 80077de:	d404      	bmi.n	80077ea <_fflush_r+0x3a>
 80077e0:	0599      	lsls	r1, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_fflush_r+0x3a>
 80077e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e6:	f7ff fcf0 	bl	80071ca <__retarget_lock_acquire_recursive>
 80077ea:	4628      	mov	r0, r5
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7ff ff5d 	bl	80076ac <__sflush_r>
 80077f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f4:	4605      	mov	r5, r0
 80077f6:	07da      	lsls	r2, r3, #31
 80077f8:	d4e0      	bmi.n	80077bc <_fflush_r+0xc>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	d4dd      	bmi.n	80077bc <_fflush_r+0xc>
 8007800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007802:	f7ff fce3 	bl	80071cc <__retarget_lock_release_recursive>
 8007806:	e7d9      	b.n	80077bc <_fflush_r+0xc>
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_fflush_r+0x70>)
 800780a:	429c      	cmp	r4, r3
 800780c:	d101      	bne.n	8007812 <_fflush_r+0x62>
 800780e:	68ac      	ldr	r4, [r5, #8]
 8007810:	e7df      	b.n	80077d2 <_fflush_r+0x22>
 8007812:	4b04      	ldr	r3, [pc, #16]	; (8007824 <_fflush_r+0x74>)
 8007814:	429c      	cmp	r4, r3
 8007816:	bf08      	it	eq
 8007818:	68ec      	ldreq	r4, [r5, #12]
 800781a:	e7da      	b.n	80077d2 <_fflush_r+0x22>
 800781c:	08009034 	.word	0x08009034
 8007820:	08009054 	.word	0x08009054
 8007824:	08009014 	.word	0x08009014

08007828 <std>:
 8007828:	2300      	movs	r3, #0
 800782a:	b510      	push	{r4, lr}
 800782c:	4604      	mov	r4, r0
 800782e:	e9c0 3300 	strd	r3, r3, [r0]
 8007832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007836:	6083      	str	r3, [r0, #8]
 8007838:	8181      	strh	r1, [r0, #12]
 800783a:	6643      	str	r3, [r0, #100]	; 0x64
 800783c:	81c2      	strh	r2, [r0, #14]
 800783e:	6183      	str	r3, [r0, #24]
 8007840:	4619      	mov	r1, r3
 8007842:	2208      	movs	r2, #8
 8007844:	305c      	adds	r0, #92	; 0x5c
 8007846:	f7fd fb83 	bl	8004f50 <memset>
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <std+0x38>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	6263      	str	r3, [r4, #36]	; 0x24
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <std+0x3c>)
 8007852:	62a3      	str	r3, [r4, #40]	; 0x28
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <std+0x40>)
 8007856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <std+0x44>)
 800785a:	6323      	str	r3, [r4, #48]	; 0x30
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	08007b75 	.word	0x08007b75
 8007864:	08007b97 	.word	0x08007b97
 8007868:	08007bcf 	.word	0x08007bcf
 800786c:	08007bf3 	.word	0x08007bf3

08007870 <_cleanup_r>:
 8007870:	4901      	ldr	r1, [pc, #4]	; (8007878 <_cleanup_r+0x8>)
 8007872:	f000 b8af 	b.w	80079d4 <_fwalk_reent>
 8007876:	bf00      	nop
 8007878:	080077b1 	.word	0x080077b1

0800787c <__sfmoreglue>:
 800787c:	2268      	movs	r2, #104	; 0x68
 800787e:	b570      	push	{r4, r5, r6, lr}
 8007880:	1e4d      	subs	r5, r1, #1
 8007882:	4355      	muls	r5, r2
 8007884:	460e      	mov	r6, r1
 8007886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800788a:	f7fd fbd1 	bl	8005030 <_malloc_r>
 800788e:	4604      	mov	r4, r0
 8007890:	b140      	cbz	r0, 80078a4 <__sfmoreglue+0x28>
 8007892:	2100      	movs	r1, #0
 8007894:	e9c0 1600 	strd	r1, r6, [r0]
 8007898:	300c      	adds	r0, #12
 800789a:	60a0      	str	r0, [r4, #8]
 800789c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a0:	f7fd fb56 	bl	8004f50 <memset>
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}

080078a8 <__sfp_lock_acquire>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_acquire+0x8>)
 80078aa:	f7ff bc8e 	b.w	80071ca <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000705 	.word	0x20000705

080078b4 <__sfp_lock_release>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_release+0x8>)
 80078b6:	f7ff bc89 	b.w	80071cc <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000705 	.word	0x20000705

080078c0 <__sinit_lock_acquire>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sinit_lock_acquire+0x8>)
 80078c2:	f7ff bc82 	b.w	80071ca <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000706 	.word	0x20000706

080078cc <__sinit_lock_release>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sinit_lock_release+0x8>)
 80078ce:	f7ff bc7d 	b.w	80071cc <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	20000706 	.word	0x20000706

080078d8 <__sinit>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	f7ff fff0 	bl	80078c0 <__sinit_lock_acquire>
 80078e0:	69a3      	ldr	r3, [r4, #24]
 80078e2:	b11b      	cbz	r3, 80078ec <__sinit+0x14>
 80078e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e8:	f7ff bff0 	b.w	80078cc <__sinit_lock_release>
 80078ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f0:	6523      	str	r3, [r4, #80]	; 0x50
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <__sinit+0x68>)
 80078f4:	4a13      	ldr	r2, [pc, #76]	; (8007944 <__sinit+0x6c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	bf08      	it	eq
 80078fe:	2301      	moveq	r3, #1
 8007900:	4620      	mov	r0, r4
 8007902:	bf08      	it	eq
 8007904:	61a3      	streq	r3, [r4, #24]
 8007906:	f000 f81f 	bl	8007948 <__sfp>
 800790a:	6060      	str	r0, [r4, #4]
 800790c:	4620      	mov	r0, r4
 800790e:	f000 f81b 	bl	8007948 <__sfp>
 8007912:	60a0      	str	r0, [r4, #8]
 8007914:	4620      	mov	r0, r4
 8007916:	f000 f817 	bl	8007948 <__sfp>
 800791a:	2200      	movs	r2, #0
 800791c:	2104      	movs	r1, #4
 800791e:	60e0      	str	r0, [r4, #12]
 8007920:	6860      	ldr	r0, [r4, #4]
 8007922:	f7ff ff81 	bl	8007828 <std>
 8007926:	2201      	movs	r2, #1
 8007928:	2109      	movs	r1, #9
 800792a:	68a0      	ldr	r0, [r4, #8]
 800792c:	f7ff ff7c 	bl	8007828 <std>
 8007930:	2202      	movs	r2, #2
 8007932:	2112      	movs	r1, #18
 8007934:	68e0      	ldr	r0, [r4, #12]
 8007936:	f7ff ff77 	bl	8007828 <std>
 800793a:	2301      	movs	r3, #1
 800793c:	61a3      	str	r3, [r4, #24]
 800793e:	e7d1      	b.n	80078e4 <__sinit+0xc>
 8007940:	08008c98 	.word	0x08008c98
 8007944:	08007871 	.word	0x08007871

08007948 <__sfp>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	4607      	mov	r7, r0
 800794c:	f7ff ffac 	bl	80078a8 <__sfp_lock_acquire>
 8007950:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <__sfp+0x84>)
 8007952:	681e      	ldr	r6, [r3, #0]
 8007954:	69b3      	ldr	r3, [r6, #24]
 8007956:	b913      	cbnz	r3, 800795e <__sfp+0x16>
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff ffbd 	bl	80078d8 <__sinit>
 800795e:	3648      	adds	r6, #72	; 0x48
 8007960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007964:	3b01      	subs	r3, #1
 8007966:	d503      	bpl.n	8007970 <__sfp+0x28>
 8007968:	6833      	ldr	r3, [r6, #0]
 800796a:	b30b      	cbz	r3, 80079b0 <__sfp+0x68>
 800796c:	6836      	ldr	r6, [r6, #0]
 800796e:	e7f7      	b.n	8007960 <__sfp+0x18>
 8007970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007974:	b9d5      	cbnz	r5, 80079ac <__sfp+0x64>
 8007976:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <__sfp+0x88>)
 8007978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800797c:	60e3      	str	r3, [r4, #12]
 800797e:	6665      	str	r5, [r4, #100]	; 0x64
 8007980:	f7ff fc22 	bl	80071c8 <__retarget_lock_init_recursive>
 8007984:	f7ff ff96 	bl	80078b4 <__sfp_lock_release>
 8007988:	2208      	movs	r2, #8
 800798a:	4629      	mov	r1, r5
 800798c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007994:	6025      	str	r5, [r4, #0]
 8007996:	61a5      	str	r5, [r4, #24]
 8007998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800799c:	f7fd fad8 	bl	8004f50 <memset>
 80079a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079a8:	4620      	mov	r0, r4
 80079aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ac:	3468      	adds	r4, #104	; 0x68
 80079ae:	e7d9      	b.n	8007964 <__sfp+0x1c>
 80079b0:	2104      	movs	r1, #4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff ff62 	bl	800787c <__sfmoreglue>
 80079b8:	4604      	mov	r4, r0
 80079ba:	6030      	str	r0, [r6, #0]
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1d5      	bne.n	800796c <__sfp+0x24>
 80079c0:	f7ff ff78 	bl	80078b4 <__sfp_lock_release>
 80079c4:	230c      	movs	r3, #12
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	e7ee      	b.n	80079a8 <__sfp+0x60>
 80079ca:	bf00      	nop
 80079cc:	08008c98 	.word	0x08008c98
 80079d0:	ffff0001 	.word	0xffff0001

080079d4 <_fwalk_reent>:
 80079d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d8:	4606      	mov	r6, r0
 80079da:	4688      	mov	r8, r1
 80079dc:	2700      	movs	r7, #0
 80079de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079e6:	f1b9 0901 	subs.w	r9, r9, #1
 80079ea:	d505      	bpl.n	80079f8 <_fwalk_reent+0x24>
 80079ec:	6824      	ldr	r4, [r4, #0]
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d1f7      	bne.n	80079e2 <_fwalk_reent+0xe>
 80079f2:	4638      	mov	r0, r7
 80079f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f8:	89ab      	ldrh	r3, [r5, #12]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d907      	bls.n	8007a0e <_fwalk_reent+0x3a>
 80079fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a02:	3301      	adds	r3, #1
 8007a04:	d003      	beq.n	8007a0e <_fwalk_reent+0x3a>
 8007a06:	4629      	mov	r1, r5
 8007a08:	4630      	mov	r0, r6
 8007a0a:	47c0      	blx	r8
 8007a0c:	4307      	orrs	r7, r0
 8007a0e:	3568      	adds	r5, #104	; 0x68
 8007a10:	e7e9      	b.n	80079e6 <_fwalk_reent+0x12>

08007a12 <__swhatbuf_r>:
 8007a12:	b570      	push	{r4, r5, r6, lr}
 8007a14:	460e      	mov	r6, r1
 8007a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	461d      	mov	r5, r3
 8007a20:	b096      	sub	sp, #88	; 0x58
 8007a22:	da08      	bge.n	8007a36 <__swhatbuf_r+0x24>
 8007a24:	2200      	movs	r2, #0
 8007a26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a2a:	602a      	str	r2, [r5, #0]
 8007a2c:	061a      	lsls	r2, r3, #24
 8007a2e:	d410      	bmi.n	8007a52 <__swhatbuf_r+0x40>
 8007a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a34:	e00e      	b.n	8007a54 <__swhatbuf_r+0x42>
 8007a36:	466a      	mov	r2, sp
 8007a38:	f000 f902 	bl	8007c40 <_fstat_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	dbf1      	blt.n	8007a24 <__swhatbuf_r+0x12>
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a4a:	425a      	negs	r2, r3
 8007a4c:	415a      	adcs	r2, r3
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	e7ee      	b.n	8007a30 <__swhatbuf_r+0x1e>
 8007a52:	2340      	movs	r3, #64	; 0x40
 8007a54:	2000      	movs	r0, #0
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	b016      	add	sp, #88	; 0x58
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}

08007a5c <__smakebuf_r>:
 8007a5c:	898b      	ldrh	r3, [r1, #12]
 8007a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a60:	079d      	lsls	r5, r3, #30
 8007a62:	4606      	mov	r6, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	d507      	bpl.n	8007a78 <__smakebuf_r+0x1c>
 8007a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2301      	movs	r3, #1
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	b002      	add	sp, #8
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	466a      	mov	r2, sp
 8007a7a:	ab01      	add	r3, sp, #4
 8007a7c:	f7ff ffc9 	bl	8007a12 <__swhatbuf_r>
 8007a80:	9900      	ldr	r1, [sp, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7fd fad3 	bl	8005030 <_malloc_r>
 8007a8a:	b948      	cbnz	r0, 8007aa0 <__smakebuf_r+0x44>
 8007a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a90:	059a      	lsls	r2, r3, #22
 8007a92:	d4ef      	bmi.n	8007a74 <__smakebuf_r+0x18>
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7e3      	b.n	8007a68 <__smakebuf_r+0xc>
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <__smakebuf_r+0x7c>)
 8007aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	6120      	str	r0, [r4, #16]
 8007ab2:	6163      	str	r3, [r4, #20]
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	b15b      	cbz	r3, 8007ad0 <__smakebuf_r+0x74>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007abe:	f000 f8d1 	bl	8007c64 <_isatty_r>
 8007ac2:	b128      	cbz	r0, 8007ad0 <__smakebuf_r+0x74>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	89a0      	ldrh	r0, [r4, #12]
 8007ad2:	4305      	orrs	r5, r0
 8007ad4:	81a5      	strh	r5, [r4, #12]
 8007ad6:	e7cd      	b.n	8007a74 <__smakebuf_r+0x18>
 8007ad8:	08007871 	.word	0x08007871

08007adc <_malloc_usable_size_r>:
 8007adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae0:	1f18      	subs	r0, r3, #4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bfbc      	itt	lt
 8007ae6:	580b      	ldrlt	r3, [r1, r0]
 8007ae8:	18c0      	addlt	r0, r0, r3
 8007aea:	4770      	bx	lr

08007aec <_raise_r>:
 8007aec:	291f      	cmp	r1, #31
 8007aee:	b538      	push	{r3, r4, r5, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	460d      	mov	r5, r1
 8007af4:	d904      	bls.n	8007b00 <_raise_r+0x14>
 8007af6:	2316      	movs	r3, #22
 8007af8:	6003      	str	r3, [r0, #0]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b02:	b112      	cbz	r2, 8007b0a <_raise_r+0x1e>
 8007b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b08:	b94b      	cbnz	r3, 8007b1e <_raise_r+0x32>
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 f830 	bl	8007b70 <_getpid_r>
 8007b10:	462a      	mov	r2, r5
 8007b12:	4601      	mov	r1, r0
 8007b14:	4620      	mov	r0, r4
 8007b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b1a:	f000 b817 	b.w	8007b4c <_kill_r>
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d00a      	beq.n	8007b38 <_raise_r+0x4c>
 8007b22:	1c59      	adds	r1, r3, #1
 8007b24:	d103      	bne.n	8007b2e <_raise_r+0x42>
 8007b26:	2316      	movs	r3, #22
 8007b28:	6003      	str	r3, [r0, #0]
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	e7e7      	b.n	8007afe <_raise_r+0x12>
 8007b2e:	2400      	movs	r4, #0
 8007b30:	4628      	mov	r0, r5
 8007b32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b36:	4798      	blx	r3
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e7e0      	b.n	8007afe <_raise_r+0x12>

08007b3c <raise>:
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <raise+0xc>)
 8007b3e:	4601      	mov	r1, r0
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f7ff bfd3 	b.w	8007aec <_raise_r>
 8007b46:	bf00      	nop
 8007b48:	20000040 	.word	0x20000040

08007b4c <_kill_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_kill_r+0x20>)
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	4611      	mov	r1, r2
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	f7fa feef 	bl	800293c <_kill>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d102      	bne.n	8007b68 <_kill_r+0x1c>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	b103      	cbz	r3, 8007b68 <_kill_r+0x1c>
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000700 	.word	0x20000700

08007b70 <_getpid_r>:
 8007b70:	f7fa bee2 	b.w	8002938 <_getpid>

08007b74 <__sread>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	460c      	mov	r4, r1
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	f000 f894 	bl	8007ca8 <_read_r>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	bfab      	itete	ge
 8007b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b86:	89a3      	ldrhlt	r3, [r4, #12]
 8007b88:	181b      	addge	r3, r3, r0
 8007b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b8e:	bfac      	ite	ge
 8007b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b92:	81a3      	strhlt	r3, [r4, #12]
 8007b94:	bd10      	pop	{r4, pc}

08007b96 <__swrite>:
 8007b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9a:	461f      	mov	r7, r3
 8007b9c:	898b      	ldrh	r3, [r1, #12]
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	05db      	lsls	r3, r3, #23
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	d505      	bpl.n	8007bb4 <__swrite+0x1e>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	2200      	movs	r2, #0
 8007bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb0:	f000 f868 	bl	8007c84 <_lseek_r>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bca:	f000 b817 	b.w	8007bfc <_write_r>

08007bce <__sseek>:
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd6:	f000 f855 	bl	8007c84 <_lseek_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	bf15      	itete	ne
 8007be0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007be2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007be6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bea:	81a3      	strheq	r3, [r4, #12]
 8007bec:	bf18      	it	ne
 8007bee:	81a3      	strhne	r3, [r4, #12]
 8007bf0:	bd10      	pop	{r4, pc}

08007bf2 <__sclose>:
 8007bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf6:	f000 b813 	b.w	8007c20 <_close_r>
	...

08007bfc <_write_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	2200      	movs	r2, #0
 8007c06:	4d05      	ldr	r5, [pc, #20]	; (8007c1c <_write_r+0x20>)
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7fa feb4 	bl	8002978 <_write>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_write_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_write_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000700 	.word	0x20000700

08007c20 <_close_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	2300      	movs	r3, #0
 8007c24:	4d05      	ldr	r5, [pc, #20]	; (8007c3c <_close_r+0x1c>)
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	602b      	str	r3, [r5, #0]
 8007c2c:	f7fa feb2 	bl	8002994 <_close>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_close_r+0x1a>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_close_r+0x1a>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000700 	.word	0x20000700

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	2300      	movs	r3, #0
 8007c44:	4d06      	ldr	r5, [pc, #24]	; (8007c60 <_fstat_r+0x20>)
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7fa fea5 	bl	800299c <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000700 	.word	0x20000700

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	2300      	movs	r3, #0
 8007c68:	4d05      	ldr	r5, [pc, #20]	; (8007c80 <_isatty_r+0x1c>)
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7fa fe9a 	bl	80029a8 <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000700 	.word	0x20000700

08007c84 <_lseek_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4d05      	ldr	r5, [pc, #20]	; (8007ca4 <_lseek_r+0x20>)
 8007c90:	602a      	str	r2, [r5, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f7fa fe8a 	bl	80029ac <_lseek>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_lseek_r+0x1e>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_lseek_r+0x1e>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	20000700 	.word	0x20000700

08007ca8 <_read_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4d05      	ldr	r5, [pc, #20]	; (8007cc8 <_read_r+0x20>)
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7fa fe50 	bl	800295c <_read>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_read_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_read_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000700 	.word	0x20000700
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <floor>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007cd8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007cdc:	2e13      	cmp	r6, #19
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	dc33      	bgt.n	8007d52 <floor+0x82>
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	da14      	bge.n	8007d18 <floor+0x48>
 8007cee:	a334      	add	r3, pc, #208	; (adr r3, 8007dc0 <floor+0xf0>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 faa6 	bl	8000244 <__adddf3>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f7f8 fee8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d00:	b138      	cbz	r0, 8007d12 <floor+0x42>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	da58      	bge.n	8007db8 <floor+0xe8>
 8007d06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d0a:	431d      	orrs	r5, r3
 8007d0c:	d001      	beq.n	8007d12 <floor+0x42>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4c2d      	ldr	r4, [pc, #180]	; (8007dc8 <floor+0xf8>)
 8007d12:	4623      	mov	r3, r4
 8007d14:	462f      	mov	r7, r5
 8007d16:	e025      	b.n	8007d64 <floor+0x94>
 8007d18:	4a2c      	ldr	r2, [pc, #176]	; (8007dcc <floor+0xfc>)
 8007d1a:	fa42 f806 	asr.w	r8, r2, r6
 8007d1e:	ea01 0208 	and.w	r2, r1, r8
 8007d22:	4302      	orrs	r2, r0
 8007d24:	d01e      	beq.n	8007d64 <floor+0x94>
 8007d26:	a326      	add	r3, pc, #152	; (adr r3, 8007dc0 <floor+0xf0>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	f7f8 fa8a 	bl	8000244 <__adddf3>
 8007d30:	2200      	movs	r2, #0
 8007d32:	2300      	movs	r3, #0
 8007d34:	f7f8 fecc 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d0ea      	beq.n	8007d12 <floor+0x42>
 8007d3c:	2c00      	cmp	r4, #0
 8007d3e:	bfbe      	ittt	lt
 8007d40:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007d44:	fa43 f606 	asrlt.w	r6, r3, r6
 8007d48:	19a4      	addlt	r4, r4, r6
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	ea24 0408 	bic.w	r4, r4, r8
 8007d50:	e7df      	b.n	8007d12 <floor+0x42>
 8007d52:	2e33      	cmp	r6, #51	; 0x33
 8007d54:	dd0a      	ble.n	8007d6c <floor+0x9c>
 8007d56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d5a:	d103      	bne.n	8007d64 <floor+0x94>
 8007d5c:	f7f8 fa72 	bl	8000244 <__adddf3>
 8007d60:	4607      	mov	r7, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4638      	mov	r0, r7
 8007d66:	4619      	mov	r1, r3
 8007d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d70:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007d74:	fa22 f808 	lsr.w	r8, r2, r8
 8007d78:	ea18 0f00 	tst.w	r8, r0
 8007d7c:	d0f2      	beq.n	8007d64 <floor+0x94>
 8007d7e:	a310      	add	r3, pc, #64	; (adr r3, 8007dc0 <floor+0xf0>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fa5e 	bl	8000244 <__adddf3>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f7f8 fea0 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d0be      	beq.n	8007d12 <floor+0x42>
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	da02      	bge.n	8007d9e <floor+0xce>
 8007d98:	2e14      	cmp	r6, #20
 8007d9a:	d103      	bne.n	8007da4 <floor+0xd4>
 8007d9c:	3401      	adds	r4, #1
 8007d9e:	ea25 0508 	bic.w	r5, r5, r8
 8007da2:	e7b6      	b.n	8007d12 <floor+0x42>
 8007da4:	2301      	movs	r3, #1
 8007da6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007daa:	fa03 f606 	lsl.w	r6, r3, r6
 8007dae:	4435      	add	r5, r6
 8007db0:	42bd      	cmp	r5, r7
 8007db2:	bf38      	it	cc
 8007db4:	18e4      	addcc	r4, r4, r3
 8007db6:	e7f2      	b.n	8007d9e <floor+0xce>
 8007db8:	2500      	movs	r5, #0
 8007dba:	462c      	mov	r4, r5
 8007dbc:	e7a9      	b.n	8007d12 <floor+0x42>
 8007dbe:	bf00      	nop
 8007dc0:	8800759c 	.word	0x8800759c
 8007dc4:	7e37e43c 	.word	0x7e37e43c
 8007dc8:	bff00000 	.word	0xbff00000
 8007dcc:	000fffff 	.word	0x000fffff

08007dd0 <atan2>:
 8007dd0:	f000 b826 	b.w	8007e20 <__ieee754_atan2>

08007dd4 <sqrt>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	f000 f8f3 	bl	8007fc4 <__ieee754_sqrt>
 8007dde:	4632      	mov	r2, r6
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	463b      	mov	r3, r7
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fe7b 	bl	8000ae4 <__aeabi_dcmpun>
 8007dee:	b990      	cbnz	r0, 8007e16 <sqrt+0x42>
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fe4c 	bl	8000a94 <__aeabi_dcmplt>
 8007dfc:	b158      	cbz	r0, 8007e16 <sqrt+0x42>
 8007dfe:	f7fd f853 	bl	8004ea8 <__errno>
 8007e02:	2321      	movs	r3, #33	; 0x21
 8007e04:	2200      	movs	r2, #0
 8007e06:	6003      	str	r3, [r0, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f7f8 fcf9 	bl	8000804 <__aeabi_ddiv>
 8007e12:	4604      	mov	r4, r0
 8007e14:	460d      	mov	r5, r1
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1c:	0000      	movs	r0, r0
	...

08007e20 <__ieee754_atan2>:
 8007e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	4692      	mov	sl, r2
 8007e26:	4699      	mov	r9, r3
 8007e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e2c:	461f      	mov	r7, r3
 8007e2e:	f1ca 0300 	rsb	r3, sl, #0
 8007e32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007fb8 <__ieee754_atan2+0x198>
 8007e36:	ea43 030a 	orr.w	r3, r3, sl
 8007e3a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007e3e:	4573      	cmp	r3, lr
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	d808      	bhi.n	8007e58 <__ieee754_atan2+0x38>
 8007e46:	4246      	negs	r6, r0
 8007e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e4c:	4306      	orrs	r6, r0
 8007e4e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007e52:	4576      	cmp	r6, lr
 8007e54:	468c      	mov	ip, r1
 8007e56:	d908      	bls.n	8007e6a <__ieee754_atan2+0x4a>
 8007e58:	4652      	mov	r2, sl
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f7f8 f9f0 	bl	8000244 <__adddf3>
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	e019      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007e6a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007e6e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007e72:	ea56 060a 	orrs.w	r6, r6, sl
 8007e76:	d103      	bne.n	8007e80 <__ieee754_atan2+0x60>
 8007e78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	f000 b954 	b.w	8008128 <atan>
 8007e80:	17be      	asrs	r6, r7, #30
 8007e82:	f006 0602 	and.w	r6, r6, #2
 8007e86:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007e8a:	ea53 0100 	orrs.w	r1, r3, r0
 8007e8e:	d10a      	bne.n	8007ea6 <__ieee754_atan2+0x86>
 8007e90:	2e02      	cmp	r6, #2
 8007e92:	d067      	beq.n	8007f64 <__ieee754_atan2+0x144>
 8007e94:	2e03      	cmp	r6, #3
 8007e96:	d102      	bne.n	8007e9e <__ieee754_atan2+0x7e>
 8007e98:	a53b      	add	r5, pc, #236	; (adr r5, 8007f88 <__ieee754_atan2+0x168>)
 8007e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea6:	ea52 010a 	orrs.w	r1, r2, sl
 8007eaa:	d106      	bne.n	8007eba <__ieee754_atan2+0x9a>
 8007eac:	f1bc 0f00 	cmp.w	ip, #0
 8007eb0:	da63      	bge.n	8007f7a <__ieee754_atan2+0x15a>
 8007eb2:	a537      	add	r5, pc, #220	; (adr r5, 8007f90 <__ieee754_atan2+0x170>)
 8007eb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eb8:	e7f1      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007eba:	4572      	cmp	r2, lr
 8007ebc:	d10f      	bne.n	8007ede <__ieee754_atan2+0xbe>
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007ec4:	d107      	bne.n	8007ed6 <__ieee754_atan2+0xb6>
 8007ec6:	2e02      	cmp	r6, #2
 8007ec8:	d850      	bhi.n	8007f6c <__ieee754_atan2+0x14c>
 8007eca:	4b3c      	ldr	r3, [pc, #240]	; (8007fbc <__ieee754_atan2+0x19c>)
 8007ecc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007ed0:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007ed4:	e7e3      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007ed6:	2e02      	cmp	r6, #2
 8007ed8:	d84c      	bhi.n	8007f74 <__ieee754_atan2+0x154>
 8007eda:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <__ieee754_atan2+0x1a0>)
 8007edc:	e7f6      	b.n	8007ecc <__ieee754_atan2+0xac>
 8007ede:	4573      	cmp	r3, lr
 8007ee0:	d0e4      	beq.n	8007eac <__ieee754_atan2+0x8c>
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007ee8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007eec:	da20      	bge.n	8007f30 <__ieee754_atan2+0x110>
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	da01      	bge.n	8007ef6 <__ieee754_atan2+0xd6>
 8007ef2:	323c      	adds	r2, #60	; 0x3c
 8007ef4:	db20      	blt.n	8007f38 <__ieee754_atan2+0x118>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	464b      	mov	r3, r9
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fc81 	bl	8000804 <__aeabi_ddiv>
 8007f02:	f000 fa9b 	bl	800843c <fabs>
 8007f06:	f000 f90f 	bl	8008128 <atan>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	2e01      	cmp	r6, #1
 8007f10:	d015      	beq.n	8007f3e <__ieee754_atan2+0x11e>
 8007f12:	2e02      	cmp	r6, #2
 8007f14:	d017      	beq.n	8007f46 <__ieee754_atan2+0x126>
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	d0c1      	beq.n	8007e9e <__ieee754_atan2+0x7e>
 8007f1a:	a31f      	add	r3, pc, #124	; (adr r3, 8007f98 <__ieee754_atan2+0x178>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	4620      	mov	r0, r4
 8007f22:	4629      	mov	r1, r5
 8007f24:	f7f8 f98c 	bl	8000240 <__aeabi_dsub>
 8007f28:	a31d      	add	r3, pc, #116	; (adr r3, 8007fa0 <__ieee754_atan2+0x180>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e016      	b.n	8007f5e <__ieee754_atan2+0x13e>
 8007f30:	a51d      	add	r5, pc, #116	; (adr r5, 8007fa8 <__ieee754_atan2+0x188>)
 8007f32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f36:	e7ea      	b.n	8007f0e <__ieee754_atan2+0xee>
 8007f38:	2400      	movs	r4, #0
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	e7e7      	b.n	8007f0e <__ieee754_atan2+0xee>
 8007f3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f42:	461d      	mov	r5, r3
 8007f44:	e7ab      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007f46:	a314      	add	r3, pc, #80	; (adr r3, 8007f98 <__ieee754_atan2+0x178>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 f976 	bl	8000240 <__aeabi_dsub>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	a111      	add	r1, pc, #68	; (adr r1, 8007fa0 <__ieee754_atan2+0x180>)
 8007f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5e:	f7f8 f96f 	bl	8000240 <__aeabi_dsub>
 8007f62:	e77f      	b.n	8007e64 <__ieee754_atan2+0x44>
 8007f64:	a50e      	add	r5, pc, #56	; (adr r5, 8007fa0 <__ieee754_atan2+0x180>)
 8007f66:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f6a:	e798      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007f6c:	a510      	add	r5, pc, #64	; (adr r5, 8007fb0 <__ieee754_atan2+0x190>)
 8007f6e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f72:	e794      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007f74:	2400      	movs	r4, #0
 8007f76:	2500      	movs	r5, #0
 8007f78:	e791      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007f7a:	a50b      	add	r5, pc, #44	; (adr r5, 8007fa8 <__ieee754_atan2+0x188>)
 8007f7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f80:	e78d      	b.n	8007e9e <__ieee754_atan2+0x7e>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
 8007f88:	54442d18 	.word	0x54442d18
 8007f8c:	c00921fb 	.word	0xc00921fb
 8007f90:	54442d18 	.word	0x54442d18
 8007f94:	bff921fb 	.word	0xbff921fb
 8007f98:	33145c07 	.word	0x33145c07
 8007f9c:	3ca1a626 	.word	0x3ca1a626
 8007fa0:	54442d18 	.word	0x54442d18
 8007fa4:	400921fb 	.word	0x400921fb
 8007fa8:	54442d18 	.word	0x54442d18
 8007fac:	3ff921fb 	.word	0x3ff921fb
 8007fb0:	54442d18 	.word	0x54442d18
 8007fb4:	3fe921fb 	.word	0x3fe921fb
 8007fb8:	7ff00000 	.word	0x7ff00000
 8007fbc:	08009078 	.word	0x08009078
 8007fc0:	08009090 	.word	0x08009090

08007fc4 <__ieee754_sqrt>:
 8007fc4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008120 <__ieee754_sqrt+0x15c>
 8007fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fcc:	ea3c 0c01 	bics.w	ip, ip, r1
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	4607      	mov	r7, r0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	d10f      	bne.n	8007ffe <__ieee754_sqrt+0x3a>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	f7f8 fae5 	bl	80005b0 <__aeabi_dmul>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4630      	mov	r0, r6
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7f8 f929 	bl	8000244 <__adddf3>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffe:	2900      	cmp	r1, #0
 8008000:	dc0e      	bgt.n	8008020 <__ieee754_sqrt+0x5c>
 8008002:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008006:	ea5c 0707 	orrs.w	r7, ip, r7
 800800a:	d0f4      	beq.n	8007ff6 <__ieee754_sqrt+0x32>
 800800c:	b141      	cbz	r1, 8008020 <__ieee754_sqrt+0x5c>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	f7f8 f915 	bl	8000240 <__aeabi_dsub>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	f7f8 fbf3 	bl	8000804 <__aeabi_ddiv>
 800801e:	e7e8      	b.n	8007ff2 <__ieee754_sqrt+0x2e>
 8008020:	1521      	asrs	r1, r4, #20
 8008022:	d075      	beq.n	8008110 <__ieee754_sqrt+0x14c>
 8008024:	07cc      	lsls	r4, r1, #31
 8008026:	f04f 0400 	mov.w	r4, #0
 800802a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800802e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008032:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008036:	bf5e      	ittt	pl
 8008038:	0fd9      	lsrpl	r1, r3, #31
 800803a:	005b      	lslpl	r3, r3, #1
 800803c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008040:	0fd9      	lsrs	r1, r3, #31
 8008042:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008046:	2516      	movs	r5, #22
 8008048:	4620      	mov	r0, r4
 800804a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800804e:	107f      	asrs	r7, r7, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	1846      	adds	r6, r0, r1
 8008054:	4296      	cmp	r6, r2
 8008056:	bfde      	ittt	le
 8008058:	1b92      	suble	r2, r2, r6
 800805a:	1870      	addle	r0, r6, r1
 800805c:	1864      	addle	r4, r4, r1
 800805e:	0052      	lsls	r2, r2, #1
 8008060:	3d01      	subs	r5, #1
 8008062:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008066:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800806a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800806e:	d1f0      	bne.n	8008052 <__ieee754_sqrt+0x8e>
 8008070:	4629      	mov	r1, r5
 8008072:	f04f 0e20 	mov.w	lr, #32
 8008076:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800807a:	4282      	cmp	r2, r0
 800807c:	eb06 0c05 	add.w	ip, r6, r5
 8008080:	dc02      	bgt.n	8008088 <__ieee754_sqrt+0xc4>
 8008082:	d113      	bne.n	80080ac <__ieee754_sqrt+0xe8>
 8008084:	459c      	cmp	ip, r3
 8008086:	d811      	bhi.n	80080ac <__ieee754_sqrt+0xe8>
 8008088:	f1bc 0f00 	cmp.w	ip, #0
 800808c:	eb0c 0506 	add.w	r5, ip, r6
 8008090:	da43      	bge.n	800811a <__ieee754_sqrt+0x156>
 8008092:	2d00      	cmp	r5, #0
 8008094:	db41      	blt.n	800811a <__ieee754_sqrt+0x156>
 8008096:	f100 0801 	add.w	r8, r0, #1
 800809a:	1a12      	subs	r2, r2, r0
 800809c:	4640      	mov	r0, r8
 800809e:	459c      	cmp	ip, r3
 80080a0:	bf88      	it	hi
 80080a2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80080a6:	eba3 030c 	sub.w	r3, r3, ip
 80080aa:	4431      	add	r1, r6
 80080ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80080b0:	f1be 0e01 	subs.w	lr, lr, #1
 80080b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80080b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080c0:	d1db      	bne.n	800807a <__ieee754_sqrt+0xb6>
 80080c2:	4313      	orrs	r3, r2
 80080c4:	d006      	beq.n	80080d4 <__ieee754_sqrt+0x110>
 80080c6:	1c48      	adds	r0, r1, #1
 80080c8:	bf0b      	itete	eq
 80080ca:	4671      	moveq	r1, lr
 80080cc:	3101      	addne	r1, #1
 80080ce:	3401      	addeq	r4, #1
 80080d0:	f021 0101 	bicne.w	r1, r1, #1
 80080d4:	1063      	asrs	r3, r4, #1
 80080d6:	0849      	lsrs	r1, r1, #1
 80080d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080dc:	07e2      	lsls	r2, r4, #31
 80080de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080e2:	bf48      	it	mi
 80080e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80080e8:	460e      	mov	r6, r1
 80080ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80080ee:	e782      	b.n	8007ff6 <__ieee754_sqrt+0x32>
 80080f0:	0ada      	lsrs	r2, r3, #11
 80080f2:	3815      	subs	r0, #21
 80080f4:	055b      	lsls	r3, r3, #21
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	d0fa      	beq.n	80080f0 <__ieee754_sqrt+0x12c>
 80080fa:	02d5      	lsls	r5, r2, #11
 80080fc:	d50a      	bpl.n	8008114 <__ieee754_sqrt+0x150>
 80080fe:	f1c1 0420 	rsb	r4, r1, #32
 8008102:	fa23 f404 	lsr.w	r4, r3, r4
 8008106:	1e4d      	subs	r5, r1, #1
 8008108:	408b      	lsls	r3, r1
 800810a:	4322      	orrs	r2, r4
 800810c:	1b41      	subs	r1, r0, r5
 800810e:	e789      	b.n	8008024 <__ieee754_sqrt+0x60>
 8008110:	4608      	mov	r0, r1
 8008112:	e7f0      	b.n	80080f6 <__ieee754_sqrt+0x132>
 8008114:	0052      	lsls	r2, r2, #1
 8008116:	3101      	adds	r1, #1
 8008118:	e7ef      	b.n	80080fa <__ieee754_sqrt+0x136>
 800811a:	4680      	mov	r8, r0
 800811c:	e7bd      	b.n	800809a <__ieee754_sqrt+0xd6>
 800811e:	bf00      	nop
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	00000000 	.word	0x00000000

08008128 <atan>:
 8008128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	4bb6      	ldr	r3, [pc, #728]	; (8008408 <atan+0x2e0>)
 800812e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008132:	429e      	cmp	r6, r3
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	468b      	mov	fp, r1
 800813a:	dd17      	ble.n	800816c <atan+0x44>
 800813c:	4bb3      	ldr	r3, [pc, #716]	; (800840c <atan+0x2e4>)
 800813e:	429e      	cmp	r6, r3
 8008140:	dc01      	bgt.n	8008146 <atan+0x1e>
 8008142:	d109      	bne.n	8008158 <atan+0x30>
 8008144:	b140      	cbz	r0, 8008158 <atan+0x30>
 8008146:	4622      	mov	r2, r4
 8008148:	462b      	mov	r3, r5
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 f879 	bl	8000244 <__adddf3>
 8008152:	4604      	mov	r4, r0
 8008154:	460d      	mov	r5, r1
 8008156:	e005      	b.n	8008164 <atan+0x3c>
 8008158:	f1bb 0f00 	cmp.w	fp, #0
 800815c:	4cac      	ldr	r4, [pc, #688]	; (8008410 <atan+0x2e8>)
 800815e:	f300 8121 	bgt.w	80083a4 <atan+0x27c>
 8008162:	4dac      	ldr	r5, [pc, #688]	; (8008414 <atan+0x2ec>)
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	4baa      	ldr	r3, [pc, #680]	; (8008418 <atan+0x2f0>)
 800816e:	429e      	cmp	r6, r3
 8008170:	dc11      	bgt.n	8008196 <atan+0x6e>
 8008172:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008176:	429e      	cmp	r6, r3
 8008178:	dc0a      	bgt.n	8008190 <atan+0x68>
 800817a:	a38b      	add	r3, pc, #556	; (adr r3, 80083a8 <atan+0x280>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f860 	bl	8000244 <__adddf3>
 8008184:	2200      	movs	r2, #0
 8008186:	4ba5      	ldr	r3, [pc, #660]	; (800841c <atan+0x2f4>)
 8008188:	f7f8 fca2 	bl	8000ad0 <__aeabi_dcmpgt>
 800818c:	2800      	cmp	r0, #0
 800818e:	d1e9      	bne.n	8008164 <atan+0x3c>
 8008190:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008194:	e027      	b.n	80081e6 <atan+0xbe>
 8008196:	f000 f951 	bl	800843c <fabs>
 800819a:	4ba1      	ldr	r3, [pc, #644]	; (8008420 <atan+0x2f8>)
 800819c:	4604      	mov	r4, r0
 800819e:	429e      	cmp	r6, r3
 80081a0:	460d      	mov	r5, r1
 80081a2:	f300 80b8 	bgt.w	8008316 <atan+0x1ee>
 80081a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80081aa:	429e      	cmp	r6, r3
 80081ac:	f300 809c 	bgt.w	80082e8 <atan+0x1c0>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	f7f8 f846 	bl	8000244 <__adddf3>
 80081b8:	2200      	movs	r2, #0
 80081ba:	4b98      	ldr	r3, [pc, #608]	; (800841c <atan+0x2f4>)
 80081bc:	f7f8 f840 	bl	8000240 <__aeabi_dsub>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 f839 	bl	8000244 <__adddf3>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 fb13 	bl	8000804 <__aeabi_ddiv>
 80081de:	f04f 0a00 	mov.w	sl, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	460d      	mov	r5, r1
 80081e6:	4622      	mov	r2, r4
 80081e8:	462b      	mov	r3, r5
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 f9df 	bl	80005b0 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4680      	mov	r8, r0
 80081f8:	4689      	mov	r9, r1
 80081fa:	f7f8 f9d9 	bl	80005b0 <__aeabi_dmul>
 80081fe:	a36c      	add	r3, pc, #432	; (adr r3, 80083b0 <atan+0x288>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	4606      	mov	r6, r0
 8008206:	460f      	mov	r7, r1
 8008208:	f7f8 f9d2 	bl	80005b0 <__aeabi_dmul>
 800820c:	a36a      	add	r3, pc, #424	; (adr r3, 80083b8 <atan+0x290>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f817 	bl	8000244 <__adddf3>
 8008216:	4632      	mov	r2, r6
 8008218:	463b      	mov	r3, r7
 800821a:	f7f8 f9c9 	bl	80005b0 <__aeabi_dmul>
 800821e:	a368      	add	r3, pc, #416	; (adr r3, 80083c0 <atan+0x298>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f80e 	bl	8000244 <__adddf3>
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	f7f8 f9c0 	bl	80005b0 <__aeabi_dmul>
 8008230:	a365      	add	r3, pc, #404	; (adr r3, 80083c8 <atan+0x2a0>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f8 f805 	bl	8000244 <__adddf3>
 800823a:	4632      	mov	r2, r6
 800823c:	463b      	mov	r3, r7
 800823e:	f7f8 f9b7 	bl	80005b0 <__aeabi_dmul>
 8008242:	a363      	add	r3, pc, #396	; (adr r3, 80083d0 <atan+0x2a8>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f7 fffc 	bl	8000244 <__adddf3>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 f9ae 	bl	80005b0 <__aeabi_dmul>
 8008254:	a360      	add	r3, pc, #384	; (adr r3, 80083d8 <atan+0x2b0>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f7 fff3 	bl	8000244 <__adddf3>
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	f7f8 f9a5 	bl	80005b0 <__aeabi_dmul>
 8008266:	a35e      	add	r3, pc, #376	; (adr r3, 80083e0 <atan+0x2b8>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	4680      	mov	r8, r0
 800826e:	4689      	mov	r9, r1
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 f99c 	bl	80005b0 <__aeabi_dmul>
 8008278:	a35b      	add	r3, pc, #364	; (adr r3, 80083e8 <atan+0x2c0>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f7 ffdf 	bl	8000240 <__aeabi_dsub>
 8008282:	4632      	mov	r2, r6
 8008284:	463b      	mov	r3, r7
 8008286:	f7f8 f993 	bl	80005b0 <__aeabi_dmul>
 800828a:	a359      	add	r3, pc, #356	; (adr r3, 80083f0 <atan+0x2c8>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f7 ffd6 	bl	8000240 <__aeabi_dsub>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 f98a 	bl	80005b0 <__aeabi_dmul>
 800829c:	a356      	add	r3, pc, #344	; (adr r3, 80083f8 <atan+0x2d0>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f7 ffcd 	bl	8000240 <__aeabi_dsub>
 80082a6:	4632      	mov	r2, r6
 80082a8:	463b      	mov	r3, r7
 80082aa:	f7f8 f981 	bl	80005b0 <__aeabi_dmul>
 80082ae:	a354      	add	r3, pc, #336	; (adr r3, 8008400 <atan+0x2d8>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f7 ffc4 	bl	8000240 <__aeabi_dsub>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	f7f8 f978 	bl	80005b0 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f7 ffbc 	bl	8000244 <__adddf3>
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	f7f8 f96e 	bl	80005b0 <__aeabi_dmul>
 80082d4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	d144      	bne.n	8008368 <atan+0x240>
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f7 ffad 	bl	8000240 <__aeabi_dsub>
 80082e6:	e734      	b.n	8008152 <atan+0x2a>
 80082e8:	2200      	movs	r2, #0
 80082ea:	4b4c      	ldr	r3, [pc, #304]	; (800841c <atan+0x2f4>)
 80082ec:	f7f7 ffa8 	bl	8000240 <__aeabi_dsub>
 80082f0:	2200      	movs	r2, #0
 80082f2:	4606      	mov	r6, r0
 80082f4:	460f      	mov	r7, r1
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	4b48      	ldr	r3, [pc, #288]	; (800841c <atan+0x2f4>)
 80082fc:	f7f7 ffa2 	bl	8000244 <__adddf3>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f7f8 fa7c 	bl	8000804 <__aeabi_ddiv>
 800830c:	f04f 0a01 	mov.w	sl, #1
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	e767      	b.n	80081e6 <atan+0xbe>
 8008316:	4b43      	ldr	r3, [pc, #268]	; (8008424 <atan+0x2fc>)
 8008318:	429e      	cmp	r6, r3
 800831a:	da1a      	bge.n	8008352 <atan+0x22a>
 800831c:	2200      	movs	r2, #0
 800831e:	4b42      	ldr	r3, [pc, #264]	; (8008428 <atan+0x300>)
 8008320:	f7f7 ff8e 	bl	8000240 <__aeabi_dsub>
 8008324:	2200      	movs	r2, #0
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	4620      	mov	r0, r4
 800832c:	4629      	mov	r1, r5
 800832e:	4b3e      	ldr	r3, [pc, #248]	; (8008428 <atan+0x300>)
 8008330:	f7f8 f93e 	bl	80005b0 <__aeabi_dmul>
 8008334:	2200      	movs	r2, #0
 8008336:	4b39      	ldr	r3, [pc, #228]	; (800841c <atan+0x2f4>)
 8008338:	f7f7 ff84 	bl	8000244 <__adddf3>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fa5e 	bl	8000804 <__aeabi_ddiv>
 8008348:	f04f 0a02 	mov.w	sl, #2
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	e749      	b.n	80081e6 <atan+0xbe>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	2000      	movs	r0, #0
 8008358:	4934      	ldr	r1, [pc, #208]	; (800842c <atan+0x304>)
 800835a:	f7f8 fa53 	bl	8000804 <__aeabi_ddiv>
 800835e:	f04f 0a03 	mov.w	sl, #3
 8008362:	4604      	mov	r4, r0
 8008364:	460d      	mov	r5, r1
 8008366:	e73e      	b.n	80081e6 <atan+0xbe>
 8008368:	4b31      	ldr	r3, [pc, #196]	; (8008430 <atan+0x308>)
 800836a:	4e32      	ldr	r6, [pc, #200]	; (8008434 <atan+0x30c>)
 800836c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008370:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008374:	e9da 2300 	ldrd	r2, r3, [sl]
 8008378:	f7f7 ff62 	bl	8000240 <__aeabi_dsub>
 800837c:	4622      	mov	r2, r4
 800837e:	462b      	mov	r3, r5
 8008380:	f7f7 ff5e 	bl	8000240 <__aeabi_dsub>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	e9d6 0100 	ldrd	r0, r1, [r6]
 800838c:	f7f7 ff58 	bl	8000240 <__aeabi_dsub>
 8008390:	f1bb 0f00 	cmp.w	fp, #0
 8008394:	4604      	mov	r4, r0
 8008396:	460d      	mov	r5, r1
 8008398:	f6bf aee4 	bge.w	8008164 <atan+0x3c>
 800839c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a0:	461d      	mov	r5, r3
 80083a2:	e6df      	b.n	8008164 <atan+0x3c>
 80083a4:	4d24      	ldr	r5, [pc, #144]	; (8008438 <atan+0x310>)
 80083a6:	e6dd      	b.n	8008164 <atan+0x3c>
 80083a8:	8800759c 	.word	0x8800759c
 80083ac:	7e37e43c 	.word	0x7e37e43c
 80083b0:	e322da11 	.word	0xe322da11
 80083b4:	3f90ad3a 	.word	0x3f90ad3a
 80083b8:	24760deb 	.word	0x24760deb
 80083bc:	3fa97b4b 	.word	0x3fa97b4b
 80083c0:	a0d03d51 	.word	0xa0d03d51
 80083c4:	3fb10d66 	.word	0x3fb10d66
 80083c8:	c54c206e 	.word	0xc54c206e
 80083cc:	3fb745cd 	.word	0x3fb745cd
 80083d0:	920083ff 	.word	0x920083ff
 80083d4:	3fc24924 	.word	0x3fc24924
 80083d8:	5555550d 	.word	0x5555550d
 80083dc:	3fd55555 	.word	0x3fd55555
 80083e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80083e4:	bfa2b444 	.word	0xbfa2b444
 80083e8:	52defd9a 	.word	0x52defd9a
 80083ec:	3fadde2d 	.word	0x3fadde2d
 80083f0:	af749a6d 	.word	0xaf749a6d
 80083f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80083f8:	fe231671 	.word	0xfe231671
 80083fc:	3fbc71c6 	.word	0x3fbc71c6
 8008400:	9998ebc4 	.word	0x9998ebc4
 8008404:	3fc99999 	.word	0x3fc99999
 8008408:	440fffff 	.word	0x440fffff
 800840c:	7ff00000 	.word	0x7ff00000
 8008410:	54442d18 	.word	0x54442d18
 8008414:	bff921fb 	.word	0xbff921fb
 8008418:	3fdbffff 	.word	0x3fdbffff
 800841c:	3ff00000 	.word	0x3ff00000
 8008420:	3ff2ffff 	.word	0x3ff2ffff
 8008424:	40038000 	.word	0x40038000
 8008428:	3ff80000 	.word	0x3ff80000
 800842c:	bff00000 	.word	0xbff00000
 8008430:	080090c8 	.word	0x080090c8
 8008434:	080090a8 	.word	0x080090a8
 8008438:	3ff921fb 	.word	0x3ff921fb

0800843c <fabs>:
 800843c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008440:	4770      	bx	lr
	...

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
