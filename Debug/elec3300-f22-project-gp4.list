
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  080089a0  080089a0  000189a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009628  08009628  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08009628  08009628  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009628  08009628  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000210  08009840  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08009840  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac1  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003046  00000000  00000000  00033cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c2ef  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00043030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027f8  00000000  00000000  00043a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5aa  00000000  00000000  00046278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bfd  00000000  00000000  00061822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bf8f  00000000  00000000  0007741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001133ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003684  00000000  00000000  00113400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	08008984 	.word	0x08008984

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	08008984 	.word	0x08008984

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <LCD_Rst>:
    LCD_REG_Config();
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
}


void LCD_Rst(void) {
 8001148:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <LCD_Rst+0x24>)
 8001150:	f002 ff7e 	bl	8004050 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8001156:	3b01      	subs	r3, #1
 8001158:	d1fd      	bne.n	8001156 <LCD_Rst+0xe>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2102      	movs	r1, #2
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <LCD_Rst+0x24>)
 8001160:	f002 ff76 	bl	8004050 <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <LCD_Rst+0x28>)
    for (; nCount != 0; nCount--);
 8001166:	3b01      	subs	r3, #1
 8001168:	d1fd      	bne.n	8001166 <LCD_Rst+0x1e>
}
 800116a:	bd08      	pop	{r3, pc}
 800116c:	40011800 	.word	0x40011800
 8001170:	0002bffc 	.word	0x0002bffc

08001174 <LCD_REG_Config>:
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}


void LCD_Write_Cmd(uint16_t usCmd) {
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001174:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001178:	23cf      	movs	r3, #207	; 0xcf
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 800117a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800117e:	2100      	movs	r1, #0
 8001180:	2081      	movs	r0, #129	; 0x81
 8001182:	f04f 0c30 	mov.w	ip, #48	; 0x30
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001186:	f04f 04ed 	mov.w	r4, #237	; 0xed
 800118a:	8013      	strh	r3, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <LCD_REG_Config+0x1dc>)
 800118e:	f04f 0803 	mov.w	r8, #3
 8001192:	8019      	strh	r1, [r3, #0]
 8001194:	8018      	strh	r0, [r3, #0]
 8001196:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800119a:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800119c:	f04f 0464 	mov.w	r4, #100	; 0x64
 80011a0:	801c      	strh	r4, [r3, #0]
 80011a2:	f04f 0412 	mov.w	r4, #18
 80011a6:	f8a3 8000 	strh.w	r8, [r3]
 80011aa:	801c      	strh	r4, [r3, #0]
 80011ac:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011ae:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 80011b2:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011b4:	f04f 0085 	mov.w	r0, #133	; 0x85
 80011b8:	f04f 0b10 	mov.w	fp, #16
 80011bc:	8018      	strh	r0, [r3, #0]
 80011be:	f04f 0078 	mov.w	r0, #120	; 0x78
 80011c2:	f8a3 b000 	strh.w	fp, [r3]
 80011c6:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011c8:	f04f 00cb 	mov.w	r0, #203	; 0xcb
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011cc:	f04f 0939 	mov.w	r9, #57	; 0x39
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011d0:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011d2:	f04f 002c 	mov.w	r0, #44	; 0x2c
 80011d6:	f8a3 9000 	strh.w	r9, [r3]
 80011da:	8018      	strh	r0, [r3, #0]
 80011dc:	f04f 0034 	mov.w	r0, #52	; 0x34
 80011e0:	8019      	strh	r1, [r3, #0]
 80011e2:	8018      	strh	r0, [r3, #0]
 80011e4:	f04f 0002 	mov.w	r0, #2
 80011e8:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011ea:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 80011ee:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80011f0:	f04f 0020 	mov.w	r0, #32
 80011f4:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80011f6:	f04f 00ea 	mov.w	r0, #234	; 0xea
 80011fa:	8010      	strh	r0, [r2, #0]
 80011fc:	f04f 00b1 	mov.w	r0, #177	; 0xb1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001200:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001202:	f04f 04b6 	mov.w	r4, #182	; 0xb6
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001206:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001208:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800120a:	f04f 001b 	mov.w	r0, #27
 800120e:	8019      	strh	r1, [r3, #0]
 8001210:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001212:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001214:	f04f 040a 	mov.w	r4, #10
 8001218:	801c      	strh	r4, [r3, #0]
 800121a:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 800121e:	801c      	strh	r4, [r3, #0]
 8001220:	4620      	mov	r0, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001222:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 8001226:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001228:	f04f 0435 	mov.w	r4, #53	; 0x35
 800122c:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800122e:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 8001232:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001234:	f04f 0411 	mov.w	r4, #17
 8001238:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800123a:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 800123e:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001240:	f04f 0445 	mov.w	r4, #69	; 0x45
 8001244:	801c      	strh	r4, [r3, #0]
 8001246:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001248:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 800124c:	8014      	strh	r4, [r2, #0]
 800124e:	f04f 04f2 	mov.w	r4, #242	; 0xf2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001252:	8018      	strh	r0, [r3, #0]
 8001254:	2501      	movs	r5, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001256:	8014      	strh	r4, [r2, #0]
 8001258:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 800125c:	f04f 0426 	mov.w	r4, #38	; 0x26
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001260:	8019      	strh	r1, [r3, #0]
 8001262:	270f      	movs	r7, #15
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001264:	8014      	strh	r4, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001266:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001268:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800126a:	f04f 0024 	mov.w	r0, #36	; 0x24
 800126e:	801f      	strh	r7, [r3, #0]
 8001270:	801c      	strh	r4, [r3, #0]
 8001272:	8018      	strh	r0, [r3, #0]
 8001274:	f04f 000b 	mov.w	r0, #11
 8001278:	8018      	strh	r0, [r3, #0]
 800127a:	f04f 000e 	mov.w	r0, #14
 800127e:	f04f 0409 	mov.w	r4, #9
 8001282:	8018      	strh	r0, [r3, #0]
 8001284:	f04f 0054 	mov.w	r0, #84	; 0x54
 8001288:	801c      	strh	r4, [r3, #0]
 800128a:	8018      	strh	r0, [r3, #0]
 800128c:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8001290:	8018      	strh	r0, [r3, #0]
 8001292:	f04f 0046 	mov.w	r0, #70	; 0x46
 8001296:	8018      	strh	r0, [r3, #0]
 8001298:	f04f 000c 	mov.w	r0, #12
 800129c:	8018      	strh	r0, [r3, #0]
 800129e:	f04f 0017 	mov.w	r0, #23
 80012a2:	f04f 0a07 	mov.w	sl, #7
 80012a6:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012a8:	f04f 00e1 	mov.w	r0, #225	; 0xe1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012ac:	801c      	strh	r4, [r3, #0]
 80012ae:	801f      	strh	r7, [r3, #0]
 80012b0:	f8a3 a000 	strh.w	sl, [r3]
 80012b4:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012b6:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80012b8:	f04f 0019 	mov.w	r0, #25
 80012bc:	8019      	strh	r1, [r3, #0]
 80012be:	8018      	strh	r0, [r3, #0]
 80012c0:	f04f 001b 	mov.w	r0, #27
 80012c4:	8018      	strh	r0, [r3, #0]
 80012c6:	f04f 0004 	mov.w	r0, #4
 80012ca:	262a      	movs	r6, #42	; 0x2a
 80012cc:	8018      	strh	r0, [r3, #0]
 80012ce:	f04f 0047 	mov.w	r0, #71	; 0x47
 80012d2:	f8a3 b000 	strh.w	fp, [r3]
 80012d6:	f04f 0e06 	mov.w	lr, #6
 80012da:	f8a3 a000 	strh.w	sl, [r3]
 80012de:	801e      	strh	r6, [r3, #0]
 80012e0:	8018      	strh	r0, [r3, #0]
 80012e2:	f04f 0038 	mov.w	r0, #56	; 0x38
 80012e6:	f8a3 9000 	strh.w	r9, [r3]
 80012ea:	f8a3 8000 	strh.w	r8, [r3]
 80012ee:	f8a3 e000 	strh.w	lr, [r3]
 80012f2:	f8a3 e000 	strh.w	lr, [r3]
 80012f6:	f8a3 c000 	strh.w	ip, [r3]
 80012fa:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80012fc:	f04f 0036 	mov.w	r0, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001300:	801f      	strh	r7, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001302:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001304:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8001308:	8018      	strh	r0, [r3, #0]
 800130a:	f04f 00ef 	mov.w	r0, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800130e:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001310:	8019      	strh	r1, [r3, #0]
 8001312:	8019      	strh	r1, [r3, #0]
 8001314:	8019      	strh	r1, [r3, #0]
 8001316:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001318:	f04f 002b 	mov.w	r0, #43	; 0x2b
 800131c:	8010      	strh	r0, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800131e:	8019      	strh	r1, [r3, #0]
 8001320:	8019      	strh	r1, [r3, #0]
 8001322:	f04f 013f 	mov.w	r1, #63	; 0x3f
 8001326:	801d      	strh	r5, [r3, #0]
 8001328:	f04f 0055 	mov.w	r0, #85	; 0x55
 800132c:	8019      	strh	r1, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800132e:	f04f 013a 	mov.w	r1, #58	; 0x3a
 8001332:	8011      	strh	r1, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001334:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001336:	f04f 0311 	mov.w	r3, #17
 800133a:	4906      	ldr	r1, [pc, #24]	; (8001354 <LCD_REG_Config+0x1e0>)
 800133c:	8013      	strh	r3, [r2, #0]
    for (; nCount != 0; nCount--);
 800133e:	3901      	subs	r1, #1
 8001340:	d1fd      	bne.n	800133e <LCD_REG_Config+0x1ca>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001342:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001346:	2229      	movs	r2, #41	; 0x29
 8001348:	801a      	strh	r2, [r3, #0]
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);

}
 800134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134e:	bf00      	nop
 8001350:	60020000 	.word	0x60020000
 8001354:	0002bffc 	.word	0x0002bffc

08001358 <LCD_INIT>:
void LCD_INIT(void) {
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <LCD_INIT+0x54>)
 8001362:	f002 fe75 	bl	8004050 <HAL_GPIO_WritePin>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001366:	272a      	movs	r7, #42	; 0x2a
    LCD_Rst();
 8001368:	f7ff feee 	bl	8001148 <LCD_Rst>
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800136c:	26ef      	movs	r6, #239	; 0xef
    LCD_REG_Config();
 800136e:	f7ff ff01 	bl	8001174 <LCD_REG_Config>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001372:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001374:	2100      	movs	r1, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001376:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800137a:	2401      	movs	r4, #1
 800137c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001380:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8001384:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001388:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <LCD_INIT+0x58>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800138a:	8007      	strh	r7, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800138c:	8011      	strh	r1, [r2, #0]
 800138e:	8011      	strh	r1, [r2, #0]
 8001390:	8011      	strh	r1, [r2, #0]
 8001392:	8016      	strh	r6, [r2, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001394:	8005      	strh	r5, [r0, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001396:	8011      	strh	r1, [r2, #0]
 8001398:	8011      	strh	r1, [r2, #0]
 800139a:	8014      	strh	r4, [r2, #0]
 800139c:	f8a2 e000 	strh.w	lr, [r2]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013a0:	f8a0 c000 	strh.w	ip, [r0]
    uint32_t i = 0;

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);

    for (i = 0; i < usPoint; i++)
 80013a4:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013a6:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 80013a8:	d1fc      	bne.n	80013a4 <LCD_INIT+0x4c>
}
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ac:	40011400 	.word	0x40011400
 80013b0:	60020000 	.word	0x60020000

080013b4 <LCD_OpenWindow>:
void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 80013b4:	b530      	push	{r4, r5, lr}
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013b6:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 80013ba:	242a      	movs	r4, #42	; 0x2a
 80013bc:	252b      	movs	r5, #43	; 0x2b
 80013be:	f8ae 4000 	strh.w	r4, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013c2:	4c11      	ldr	r4, [pc, #68]	; (8001408 <LCD_OpenWindow+0x54>)
    LCD_Write_Data(usCOLUMN >> 8);
 80013c4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013c8:	f8a4 c000 	strh.w	ip, [r4]
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 80013cc:	eb00 0c02 	add.w	ip, r0, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 80013d0:	3a01      	subs	r2, #1
 80013d2:	4402      	add	r2, r0
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 80013d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    LCD_Write_Data(usCOLUMN & 0xff);
 80013d8:	b2c0      	uxtb	r0, r0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013da:	8020      	strh	r0, [r4, #0]
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 80013dc:	b2d2      	uxtb	r2, r2
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 80013de:	f3cc 200f 	ubfx	r0, ip, #8, #16
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013e2:	8020      	strh	r0, [r4, #0]
 80013e4:	8022      	strh	r2, [r4, #0]
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 80013e6:	18ca      	adds	r2, r1, r3
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 80013e8:	3b01      	subs	r3, #1
 80013ea:	440b      	add	r3, r1
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 80013ec:	3a01      	subs	r2, #1
    LCD_Write_Data(usPAGE >> 8);
 80013ee:	0a08      	lsrs	r0, r1, #8
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 80013f0:	f3c2 220f 	ubfx	r2, r2, #8, #16
    LCD_Write_Data(usPAGE & 0xff);
 80013f4:	b2c9      	uxtb	r1, r1
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 80013f6:	b2db      	uxtb	r3, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80013f8:	f8ae 5000 	strh.w	r5, [lr]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80013fc:	8020      	strh	r0, [r4, #0]
 80013fe:	8021      	strh	r1, [r4, #0]
 8001400:	8022      	strh	r2, [r4, #0]
 8001402:	8023      	strh	r3, [r4, #0]
}
 8001404:	bd30      	pop	{r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	60020000 	.word	0x60020000

0800140c <LCD_Clear>:
        LCD_Write_Data(usColor);

}


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	461e      	mov	r6, r3
 8001410:	4614      	mov	r4, r2
 8001412:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001416:	f7ff ffcd 	bl	80013b4 <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800141a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800141e:	212c      	movs	r1, #44	; 0x2c

    LCD_FillColor(usWidth * usHeight, usColor);
 8001420:	fb06 f404 	mul.w	r4, r6, r4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001424:	8019      	strh	r1, [r3, #0]
    for (i = 0; i < usPoint; i++)
 8001426:	b12c      	cbz	r4, 8001434 <LCD_Clear+0x28>
 8001428:	2300      	movs	r3, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800142a:	4903      	ldr	r1, [pc, #12]	; (8001438 <LCD_Clear+0x2c>)
    for (i = 0; i < usPoint; i++)
 800142c:	3301      	adds	r3, #1
 800142e:	429c      	cmp	r4, r3
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001430:	800d      	strh	r5, [r1, #0]
    for (i = 0; i < usPoint; i++)
 8001432:	d1fb      	bne.n	800142c <LCD_Clear+0x20>

}
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	bf00      	nop
 8001438:	60020000 	.word	0x60020000

0800143c <LCD_DrawEllipse>:
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
    LCD_FillColor(1, usColor);

}

void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor) {
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4688      	mov	r8, r1
    float xda, ydb, result;

    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 8001442:	4601      	mov	r1, r0
void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor) {
 8001444:	b089      	sub	sp, #36	; 0x24
 8001446:	e9cd 0205 	strd	r0, r2, [sp, #20]
    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 800144a:	1a80      	subs	r0, r0, r2
void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor) {
 800144c:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 8001450:	440a      	add	r2, r1
 8001452:	b200      	sxth	r0, r0
 8001454:	4290      	cmp	r0, r2
void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor) {
 8001456:	9401      	str	r4, [sp, #4]
 8001458:	9307      	str	r3, [sp, #28]
    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 800145a:	9203      	str	r2, [sp, #12]
 800145c:	dc65      	bgt.n	800152a <LCD_DrawEllipse+0xee>

            xda = (col - usC) / (float) SR;
            ydb = (pag - usP) / (float) LR;
            result = xda * xda + ydb * ydb;

            if (result <= 1) {
 800145e:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 8001462:	eba8 0a03 	sub.w	sl, r8, r3
 8001466:	fa1f f28a 	uxth.w	r2, sl
 800146a:	9204      	str	r2, [sp, #16]
 800146c:	fa0f f28a 	sxth.w	r2, sl
 8001470:	9202      	str	r2, [sp, #8]
 8001472:	eb03 0708 	add.w	r7, r3, r8
 8001476:	9b02      	ldr	r3, [sp, #8]
 8001478:	b286      	uxth	r6, r0
 800147a:	42bb      	cmp	r3, r7
 800147c:	dc50      	bgt.n	8001520 <LCD_DrawEllipse+0xe4>
            if (col < 0 || col >= LCD_Default_Max_COLUMN || pag < 0 || pag >= LCD_Default_Max_PAGE) break;
 800147e:	2eef      	cmp	r6, #239	; 0xef
 8001480:	d84e      	bhi.n	8001520 <LCD_DrawEllipse+0xe4>
 8001482:	9b04      	ldr	r3, [sp, #16]
 8001484:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001488:	d24a      	bcs.n	8001520 <LCD_DrawEllipse+0xe4>
            xda = (col - usC) / (float) SR;
 800148a:	9b05      	ldr	r3, [sp, #20]
 800148c:	1ac0      	subs	r0, r0, r3
 800148e:	f7ff fc41 	bl	8000d14 <__aeabi_i2f>
 8001492:	4604      	mov	r4, r0
 8001494:	9806      	ldr	r0, [sp, #24]
 8001496:	f7ff fc39 	bl	8000d0c <__aeabi_ui2f>
 800149a:	4601      	mov	r1, r0
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fd41 	bl	8000f24 <__aeabi_fdiv>
 80014a2:	4601      	mov	r1, r0
            result = xda * xda + ydb * ydb;
 80014a4:	f7ff fc8a 	bl	8000dbc <__aeabi_fmul>
 80014a8:	4605      	mov	r5, r0
            ydb = (pag - usP) / (float) LR;
 80014aa:	9807      	ldr	r0, [sp, #28]
 80014ac:	f7ff fc2e 	bl	8000d0c <__aeabi_ui2f>
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80014b0:	f8dd a008 	ldr.w	sl, [sp, #8]
            ydb = (pag - usP) / (float) LR;
 80014b4:	4604      	mov	r4, r0
 80014b6:	4650      	mov	r0, sl
 80014b8:	e009      	b.n	80014ce <LCD_DrawEllipse+0x92>
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80014ba:	f10b 0101 	add.w	r1, fp, #1
 80014be:	b288      	uxth	r0, r1
 80014c0:	42b8      	cmp	r0, r7
 80014c2:	fa0f fa81 	sxth.w	sl, r1
 80014c6:	dc2b      	bgt.n	8001520 <LCD_DrawEllipse+0xe4>
            if (col < 0 || col >= LCD_Default_Max_COLUMN || pag < 0 || pag >= LCD_Default_Max_PAGE) break;
 80014c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 80014cc:	d028      	beq.n	8001520 <LCD_DrawEllipse+0xe4>
            ydb = (pag - usP) / (float) LR;
 80014ce:	eba0 0008 	sub.w	r0, r0, r8
 80014d2:	f7ff fc1f 	bl	8000d14 <__aeabi_i2f>
 80014d6:	4621      	mov	r1, r4
 80014d8:	f7ff fd24 	bl	8000f24 <__aeabi_fdiv>
 80014dc:	4601      	mov	r1, r0
            result = xda * xda + ydb * ydb;
 80014de:	f7ff fc6d 	bl	8000dbc <__aeabi_fmul>
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff fb62 	bl	8000bac <__addsf3>
            if (result <= 1) {
 80014e8:	4649      	mov	r1, r9
 80014ea:	f7ff fe0f 	bl	800110c <__aeabi_fcmple>
 80014ee:	fa1f fb8a 	uxth.w	fp, sl
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0e1      	beq.n	80014ba <LCD_DrawEllipse+0x7e>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 80014f6:	2301      	movs	r3, #1
 80014f8:	4659      	mov	r1, fp
 80014fa:	461a      	mov	r2, r3
 80014fc:	4630      	mov	r0, r6
 80014fe:	f7ff ff59 	bl	80013b4 <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001502:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001506:	222c      	movs	r2, #44	; 0x2c
 8001508:	f10b 0101 	add.w	r1, fp, #1
 800150c:	801a      	strh	r2, [r3, #0]
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 800150e:	b288      	uxth	r0, r1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001510:	9a01      	ldr	r2, [sp, #4]
 8001512:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 8001516:	42b8      	cmp	r0, r7
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001518:	801a      	strh	r2, [r3, #0]
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 800151a:	fa0f fa81 	sxth.w	sl, r1
 800151e:	ddd3      	ble.n	80014c8 <LCD_DrawEllipse+0x8c>
    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 8001520:	9b03      	ldr	r3, [sp, #12]
 8001522:	3601      	adds	r6, #1
 8001524:	b230      	sxth	r0, r6
 8001526:	4298      	cmp	r0, r3
 8001528:	dda5      	ble.n	8001476 <LCD_DrawEllipse+0x3a>
                LCD_DrawDot(col, pag, usColor);
            }
        }
    }
}
 800152a:	b009      	add	sp, #36	; 0x24
 800152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001530 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	4616      	mov	r6, r2
 8001534:	461c      	mov	r4, r3
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 8001536:	2208      	movs	r2, #8
 8001538:	2310      	movs	r3, #16
                        uint16_t usColor_Foreground) {
 800153a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 800153e:	f7ff ff39 	bl	80013b4 <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001542:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001546:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <LCD_DrawChar_Color+0x58>)
    ucRelativePositon = cChar - ' ';
 800154c:	f1a6 0220 	sub.w	r2, r6, #32
 8001550:	f103 0c10 	add.w	ip, r3, #16
 8001554:	b2d2      	uxtb	r2, r2
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <LCD_DrawChar_Color+0x5c>)
 8001558:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800155c:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001560:	f8a1 e000 	strh.w	lr, [r1]

    LCD_Write_Cmd(CMD_SetPixel);

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8001564:	2208      	movs	r2, #8
 8001566:	f813 1b01 	ldrb.w	r1, [r3], #1

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
            if (ucTemp & 0x01)
 800156a:	07ce      	lsls	r6, r1, #31
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800156c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001570:	bf4c      	ite	mi
 8001572:	8005      	strhmi	r5, [r0, #0]
 8001574:	8004      	strhpl	r4, [r0, #0]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001576:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                LCD_Write_Data(usColor_Foreground);

            else
                LCD_Write_Data(usColor_Background);

            ucTemp >>= 1;
 800157a:	ea4f 0151 	mov.w	r1, r1, lsr #1
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800157e:	d1f4      	bne.n	800156a <LCD_DrawChar_Color+0x3a>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 8001580:	4563      	cmp	r3, ip
 8001582:	d1ef      	bne.n	8001564 <LCD_DrawChar_Color+0x34>

        }

    }

}
 8001584:	bd70      	pop	{r4, r5, r6, pc}
 8001586:	bf00      	nop
 8001588:	080089a0 	.word	0x080089a0
 800158c:	60020000 	.word	0x60020000

08001590 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	4605      	mov	r5, r0
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 8001594:	380a      	subs	r0, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001596:	2301      	movs	r3, #1
 8001598:	2214      	movs	r2, #20
 800159a:	b280      	uxth	r0, r0
void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 800159c:	460c      	mov	r4, r1
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800159e:	f7ff ff09 	bl	80013b4 <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80015a2:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80015a6:	202c      	movs	r0, #44	; 0x2c
 80015a8:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80015aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80015b0:	8008      	strh	r0, [r1, #0]
    for (i = 0; i < usPoint; i++)
 80015b2:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80015b4:	f8a2 c000 	strh.w	ip, [r2]
    for (i = 0; i < usPoint; i++)
 80015b8:	d1fb      	bne.n	80015b2 <LCD_DrawCross+0x22>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 80015ba:	f1a4 010a 	sub.w	r1, r4, #10
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 80015be:	2314      	movs	r3, #20
 80015c0:	2201      	movs	r2, #1
 80015c2:	4628      	mov	r0, r5
 80015c4:	b289      	uxth	r1, r1
 80015c6:	f7ff fef5 	bl	80013b4 <LCD_OpenWindow>
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80015ca:	242c      	movs	r4, #44	; 0x2c
 80015cc:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80015d0:	2314      	movs	r3, #20
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80015d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d6:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <LCD_DrawCross+0x54>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80015d8:	8004      	strh	r4, [r0, #0]
    for (i = 0; i < usPoint; i++)
 80015da:	3b01      	subs	r3, #1
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80015dc:	8011      	strh	r1, [r2, #0]
    for (i = 0; i < usPoint; i++)
 80015de:	d1fc      	bne.n	80015da <LCD_DrawCross+0x4a>

}
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
 80015e2:	bf00      	nop
 80015e4:	60020000 	.word	0x60020000

080015e8 <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 80015e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ec:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 80015ee:	7812      	ldrb	r2, [r2, #0]
                          uint16_t usColor_Foreground) {
 80015f0:	b082      	sub	sp, #8
 80015f2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    while (*pStr != '\0') {
 80015f6:	b1da      	cbz	r2, 8001630 <LCD_DrawString_Color+0x48>
 80015f8:	4605      	mov	r5, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	4698      	mov	r8, r3
 80015fe:	e00b      	b.n	8001618 <LCD_DrawString_Color+0x30>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001600:	f105 0308 	add.w	r3, r5, #8
 8001604:	4628      	mov	r0, r5
 8001606:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 8001608:	4643      	mov	r3, r8
 800160a:	4621      	mov	r1, r4
 800160c:	9700      	str	r7, [sp, #0]
 800160e:	f7ff ff8f 	bl	8001530 <LCD_DrawChar_Color>
    while (*pStr != '\0') {
 8001612:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001616:	b15a      	cbz	r2, 8001630 <LCD_DrawString_Color+0x48>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001618:	2de8      	cmp	r5, #232	; 0xe8
 800161a:	d902      	bls.n	8001622 <LCD_DrawString_Color+0x3a>
            usC = LCD_DispWindow_Start_COLUMN;
 800161c:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 800161e:	3410      	adds	r4, #16
 8001620:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001622:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 8001626:	d9eb      	bls.n	8001600 <LCD_DrawString_Color+0x18>
            usP = LCD_DispWindow_Start_PAGE;
 8001628:	2400      	movs	r4, #0
 800162a:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 800162c:	4620      	mov	r0, r4
 800162e:	e7eb      	b.n	8001608 <LCD_DrawString_Color+0x20>

    }

}
 8001630:	b002      	add	sp, #8
 8001632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001636:	bf00      	nop

08001638 <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 8001638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800163c:	4616      	mov	r6, r2
    while (*pStr != '\0') {
 800163e:	7812      	ldrb	r2, [r2, #0]
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 8001640:	b083      	sub	sp, #12
 8001642:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8001646:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    while (*pStr != '\0') {
 800164a:	b1fa      	cbz	r2, 800168c <LCD_DrawString_Color_With_Delay+0x54>
 800164c:	4605      	mov	r5, r0
 800164e:	460c      	mov	r4, r1
 8001650:	461f      	mov	r7, r3
 8001652:	e00f      	b.n	8001674 <LCD_DrawString_Color_With_Delay+0x3c>

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);

        pStr++;

        usC += WIDTH_EN_CHAR;
 8001654:	f105 0308 	add.w	r3, r5, #8
 8001658:	4628      	mov	r0, r5
 800165a:	b29d      	uxth	r5, r3
        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 800165c:	463b      	mov	r3, r7
 800165e:	4621      	mov	r1, r4
 8001660:	f8cd 9000 	str.w	r9, [sp]
 8001664:	f7ff ff64 	bl	8001530 <LCD_DrawChar_Color>
        HAL_Delay(delayEachChar);
 8001668:	4640      	mov	r0, r8
 800166a:	f001 ffef 	bl	800364c <HAL_Delay>
    while (*pStr != '\0') {
 800166e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001672:	b15a      	cbz	r2, 800168c <LCD_DrawString_Color_With_Delay+0x54>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001674:	2de8      	cmp	r5, #232	; 0xe8
 8001676:	d902      	bls.n	800167e <LCD_DrawString_Color_With_Delay+0x46>
            usC = LCD_DispWindow_Start_COLUMN;
 8001678:	2500      	movs	r5, #0
            usP += HEIGHT_EN_CHAR;
 800167a:	3410      	adds	r4, #16
 800167c:	b2a4      	uxth	r4, r4
        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 800167e:	f5b4 7f98 	cmp.w	r4, #304	; 0x130
 8001682:	d9e7      	bls.n	8001654 <LCD_DrawString_Color_With_Delay+0x1c>
            usP = LCD_DispWindow_Start_PAGE;
 8001684:	2400      	movs	r4, #0
 8001686:	2508      	movs	r5, #8
            usC = LCD_DispWindow_Start_COLUMN;
 8001688:	4620      	mov	r0, r4
 800168a:	e7e7      	b.n	800165c <LCD_DrawString_Color_With_Delay+0x24>
    }

}
 800168c:	b003      	add	sp, #12
 800168e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001692:	bf00      	nop

08001694 <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
    switch (ucOption) {
 8001694:	3801      	subs	r0, #1
void LCD_GramScan(uint8_t ucOption) {
 8001696:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (ucOption) {
 8001698:	2803      	cmp	r0, #3
 800169a:	d81e      	bhi.n	80016da <LCD_GramScan+0x46>
 800169c:	e8df f000 	tbb	[pc, r0]
 80016a0:	2202424a 	.word	0x2202424a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016a4:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016a6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80016aa:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016ae:	f04f 0c28 	mov.w	ip, #40	; 0x28
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016b2:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016b4:	2601      	movs	r6, #1
 80016b6:	253f      	movs	r5, #63	; 0x3f
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016b8:	242b      	movs	r4, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016ba:	20ef      	movs	r0, #239	; 0xef
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016be:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016c2:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016c6:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	801a      	strh	r2, [r3, #0]
 80016cc:	801e      	strh	r6, [r3, #0]
 80016ce:	801d      	strh	r5, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016d0:	800c      	strh	r4, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016d2:	801a      	strh	r2, [r3, #0]
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016da:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016de:	222c      	movs	r2, #44	; 0x2c
 80016e0:	801a      	strh	r2, [r3, #0]

    /* write gram start */
    LCD_Write_Cmd(0x2C);


}
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016e4:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016e6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80016ea:	2736      	movs	r7, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016ec:	2648      	movs	r6, #72	; 0x48
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016ee:	252a      	movs	r5, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016f0:	24ef      	movs	r4, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016f2:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 80016f6:	f04f 0c01 	mov.w	ip, #1
 80016fa:	203f      	movs	r0, #63	; 0x3f
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 80016fe:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001700:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001702:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800170c:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001718:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800171a:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800171c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001720:	801a      	strh	r2, [r3, #0]
}
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001724:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001726:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800172a:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800172e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001732:	e7be      	b.n	80016b2 <LCD_GramScan+0x1e>
 8001734:	2200      	movs	r2, #0
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001736:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800173a:	f04f 0e36 	mov.w	lr, #54	; 0x36
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800173e:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001742:	272a      	movs	r7, #42	; 0x2a
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001744:	26ef      	movs	r6, #239	; 0xef
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001746:	252b      	movs	r5, #43	; 0x2b
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001748:	2401      	movs	r4, #1
 800174a:	203f      	movs	r0, #63	; 0x3f
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <LCD_GramScan+0xe0>)
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800174e:	f8a1 e000 	strh.w	lr, [r1]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001752:	f8a3 c000 	strh.w	ip, [r3]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001756:	800f      	strh	r7, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	801e      	strh	r6, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001760:	800d      	strh	r5, [r1, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	801c      	strh	r4, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 8001768:	222c      	movs	r2, #44	; 0x2c
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 800176a:	8018      	strh	r0, [r3, #0]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800176c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001770:	801a      	strh	r2, [r3, #0]
}
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001774:	60020000 	.word	0x60020000

08001778 <mainPage.part.0>:
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
    initValue = 0xA0;
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
}

void mainPage(void) {
 8001778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (changingPage) {
        changingPage = 0;
 800177c:	2400      	movs	r4, #0
 800177e:	4828      	ldr	r0, [pc, #160]	; (8001820 <mainPage.part.0+0xa8>)
        currentPage = home;
 8001780:	4928      	ldr	r1, [pc, #160]	; (8001824 <mainPage.part.0+0xac>)
void mainPage(void) {
 8001782:	b082      	sub	sp, #8
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001784:	9400      	str	r4, [sp, #0]
 8001786:	f44f 73a0 	mov.w	r3, #320	; 0x140
        changingPage = 0;
 800178a:	6004      	str	r4, [r0, #0]
        currentPage = home;
 800178c:	700c      	strb	r4, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800178e:	4620      	mov	r0, r4
 8001790:	4621      	mov	r1, r4
 8001792:	22f0      	movs	r2, #240	; 0xf0
 8001794:	f7ff fe3a 	bl	800140c <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001798:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800179c:	230a      	movs	r3, #10
        HAL_Delay(100);
        output_text = "Please choose an option below.";
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
        HAL_Delay(200);
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 800179e:	f647 77ff 	movw	r7, #32767	; 0x7fff
        output_text = "WEIGHT";
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 80017a2:	250f      	movs	r5, #15
        HAL_Delay(200);
        output_text = "ACCEL.";
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 80017a4:	f64f 76e0 	movw	r6, #65504	; 0xffe0
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 80017a8:	2128      	movs	r1, #40	; 0x28
 80017aa:	4620      	mov	r0, r4
 80017ac:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <mainPage.part.0+0xb0>)
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f8cd 8000 	str.w	r8, [sp]
 80017b4:	231f      	movs	r3, #31
 80017b6:	f7ff ff3f 	bl	8001638 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 80017ba:	2064      	movs	r0, #100	; 0x64
 80017bc:	f001 ff46 	bl	800364c <HAL_Delay>
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 80017c0:	4623      	mov	r3, r4
 80017c2:	2164      	movs	r1, #100	; 0x64
 80017c4:	4620      	mov	r0, r4
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <mainPage.part.0+0xb4>)
 80017c8:	f8cd 8000 	str.w	r8, [sp]
 80017cc:	f7ff ff0c 	bl	80015e8 <LCD_DrawString_Color>
        HAL_Delay(200);
 80017d0:	20c8      	movs	r0, #200	; 0xc8
 80017d2:	f001 ff3b 	bl	800364c <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 80017d6:	2328      	movs	r3, #40	; 0x28
 80017d8:	2250      	movs	r2, #80	; 0x50
 80017da:	21e6      	movs	r1, #230	; 0xe6
 80017dc:	2014      	movs	r0, #20
 80017de:	9700      	str	r7, [sp, #0]
 80017e0:	f7ff fe14 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 80017e4:	463b      	mov	r3, r7
 80017e6:	21f2      	movs	r1, #242	; 0xf2
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <mainPage.part.0+0xb8>)
 80017ea:	2023      	movs	r0, #35	; 0x23
 80017ec:	e9cd 4500 	strd	r4, r5, [sp]
 80017f0:	f7ff ff22 	bl	8001638 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 80017f4:	20c8      	movs	r0, #200	; 0xc8
 80017f6:	f001 ff29 	bl	800364c <HAL_Delay>
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 80017fa:	2328      	movs	r3, #40	; 0x28
 80017fc:	2250      	movs	r2, #80	; 0x50
 80017fe:	21e6      	movs	r1, #230	; 0xe6
 8001800:	2082      	movs	r0, #130	; 0x82
 8001802:	9600      	str	r6, [sp, #0]
 8001804:	f7ff fe02 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 8001808:	4633      	mov	r3, r6
 800180a:	21f2      	movs	r1, #242	; 0xf2
 800180c:	2096      	movs	r0, #150	; 0x96
 800180e:	e9cd 4500 	strd	r4, r5, [sp]
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <mainPage.part.0+0xbc>)
 8001814:	f7ff ff10 	bl	8001638 <LCD_DrawString_Color_With_Delay>
    }
}
 8001818:	b002      	add	sp, #8
 800181a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000
 8001824:	2000055a 	.word	0x2000055a
 8001828:	08008f90 	.word	0x08008f90
 800182c:	08008fb8 	.word	0x08008fb8
 8001830:	08008fd8 	.word	0x08008fd8
 8001834:	08008fe0 	.word	0x08008fe0

08001838 <Check_touchkey>:
void Check_touchkey() {
 8001838:	b500      	push	{lr}
 800183a:	b083      	sub	sp, #12
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 800183c:	491b      	ldr	r1, [pc, #108]	; (80018ac <Check_touchkey+0x74>)
 800183e:	a801      	add	r0, sp, #4
 8001840:	f001 fe40 	bl	80034c4 <XPT2046_Get_TouchedPoint>
 8001844:	b190      	cbz	r0, 800186c <Check_touchkey+0x34>
        if (currentPage == home) {
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <Check_touchkey+0x78>)
 8001848:	7813      	ldrb	r3, [r2, #0]
 800184a:	b993      	cbnz	r3, 8001872 <Check_touchkey+0x3a>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 800184c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001850:	3bd3      	subs	r3, #211	; 0xd3
 8001852:	b29b      	uxth	r3, r3
 8001854:	2b26      	cmp	r3, #38	; 0x26
 8001856:	d809      	bhi.n	800186c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 8001858:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800185c:	f1a3 0115 	sub.w	r1, r3, #21
 8001860:	294e      	cmp	r1, #78	; 0x4e
 8001862:	d819      	bhi.n	8001898 <Check_touchkey+0x60>
                    currentPage = weight;
 8001864:	2301      	movs	r3, #1
                    changingPage = 1;
 8001866:	4913      	ldr	r1, [pc, #76]	; (80018b4 <Check_touchkey+0x7c>)
                    currentPage = weight;
 8001868:	7013      	strb	r3, [r2, #0]
                    changingPage = 1;
 800186a:	600b      	str	r3, [r1, #0]
}
 800186c:	b003      	add	sp, #12
 800186e:	f85d fb04 	ldr.w	pc, [sp], #4
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b18      	cmp	r3, #24
 800187e:	d8f5      	bhi.n	800186c <Check_touchkey+0x34>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 8001880:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001884:	3b15      	subs	r3, #21
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d8ef      	bhi.n	800186c <Check_touchkey+0x34>
                    currentPage = home;
 800188c:	2000      	movs	r0, #0
                    changingPage = 1;
 800188e:	2101      	movs	r1, #1
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <Check_touchkey+0x7c>)
                    currentPage = home;
 8001892:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 8001894:	6019      	str	r1, [r3, #0]
}
 8001896:	e7e9      	b.n	800186c <Check_touchkey+0x34>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 8001898:	3b83      	subs	r3, #131	; 0x83
 800189a:	2b4e      	cmp	r3, #78	; 0x4e
 800189c:	d8e6      	bhi.n	800186c <Check_touchkey+0x34>
                    currentPage = accelerometer;
 800189e:	2002      	movs	r0, #2
                    changingPage = 1;
 80018a0:	2101      	movs	r1, #1
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <Check_touchkey+0x7c>)
                    currentPage = accelerometer;
 80018a4:	7010      	strb	r0, [r2, #0]
                    changingPage = 1;
 80018a6:	6019      	str	r1, [r3, #0]
 80018a8:	e7e0      	b.n	800186c <Check_touchkey+0x34>
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	2000055a 	.word	0x2000055a
 80018b4:	20000000 	.word	0x20000000

080018b8 <shiftAcceleRecord>:
void shiftAcceleRecord() {
 80018b8:	b510      	push	{r4, lr}
    if (acceleRecordSize < RECORD_MAX_SIZE) {
 80018ba:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <shiftAcceleRecord+0x30>)
 80018bc:	f9b4 e000 	ldrsh.w	lr, [r4]
 80018c0:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 80018c4:	dd0f      	ble.n	80018e6 <shiftAcceleRecord+0x2e>
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <shiftAcceleRecord+0x34>)
 80018c8:	f203 2c52 	addw	ip, r3, #594	; 0x252
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 80018cc:	88d8      	ldrh	r0, [r3, #6]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 80018ce:	8919      	ldrh	r1, [r3, #8]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 80018d0:	895a      	ldrh	r2, [r3, #10]
        accleRecord[i - 1].rawX = accleRecord[i].rawX;
 80018d2:	8018      	strh	r0, [r3, #0]
        accleRecord[i - 1].rawY = accleRecord[i].rawY;
 80018d4:	8059      	strh	r1, [r3, #2]
        accleRecord[i - 1].rawZ = accleRecord[i].rawZ;
 80018d6:	809a      	strh	r2, [r3, #4]
    for (short i = 1; i < RECORD_MAX_SIZE; ++i) {
 80018d8:	3306      	adds	r3, #6
 80018da:	4563      	cmp	r3, ip
 80018dc:	d1f6      	bne.n	80018cc <shiftAcceleRecord+0x14>
    --acceleRecordSize;
 80018de:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80018e2:	f8a4 e000 	strh.w	lr, [r4]
}
 80018e6:	bd10      	pop	{r4, pc}
 80018e8:	2000022c 	.word	0x2000022c
 80018ec:	20000230 	.word	0x20000230

080018f0 <insertAngleRecord>:
void insertAngleRecord(uint8_t newAngle) {
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (angleRecordSize > RECORD_MAX_SIZE) {
 80018f2:	4f10      	ldr	r7, [pc, #64]	; (8001934 <insertAngleRecord+0x44>)
void insertAngleRecord(uint8_t newAngle) {
 80018f4:	4606      	mov	r6, r0
    while (angleRecordSize > RECORD_MAX_SIZE) {
 80018f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	dd12      	ble.n	8001924 <insertAngleRecord+0x34>
 80018fe:	3b01      	subs	r3, #1
        angleRecord[i - 1] = angleRecord[i];
 8001900:	4d0d      	ldr	r5, [pc, #52]	; (8001938 <insertAngleRecord+0x48>)
 8001902:	b29c      	uxth	r4, r3
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001904:	3c01      	subs	r4, #1
        angleRecord[i - 1] = angleRecord[i];
 8001906:	22c6      	movs	r2, #198	; 0xc6
 8001908:	4629      	mov	r1, r5
 800190a:	480c      	ldr	r0, [pc, #48]	; (800193c <insertAngleRecord+0x4c>)
    while (angleRecordSize > RECORD_MAX_SIZE) {
 800190c:	b2a4      	uxth	r4, r4
        angleRecord[i - 1] = angleRecord[i];
 800190e:	f003 fda5 	bl	800545c <memmove>
    while (angleRecordSize > RECORD_MAX_SIZE) {
 8001912:	2c63      	cmp	r4, #99	; 0x63
 8001914:	d1f6      	bne.n	8001904 <insertAngleRecord+0x14>
 8001916:	2265      	movs	r2, #101	; 0x65
    --angleRecordSize;
 8001918:	2364      	movs	r3, #100	; 0x64
    angleRecord[angleRecordSize++] = newAngle;
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <insertAngleRecord+0x4c>)
 800191c:	803a      	strh	r2, [r7, #0]
 800191e:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    angleRecord[angleRecordSize++] = newAngle;
 8001924:	4905      	ldr	r1, [pc, #20]	; (800193c <insertAngleRecord+0x4c>)
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	b212      	sxth	r2, r2
 800192a:	803a      	strh	r2, [r7, #0]
 800192c:	f821 6013 	strh.w	r6, [r1, r3, lsl #1]
}
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001932:	bf00      	nop
 8001934:	20000558 	.word	0x20000558
 8001938:	20000492 	.word	0x20000492
 800193c:	20000490 	.word	0x20000490

08001940 <updateDistance>:
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 8001940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001944:	4b82      	ldr	r3, [pc, #520]	; (8001b50 <updateDistance+0x210>)
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 8001946:	b087      	sub	sp, #28
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001948:	f9b3 b000 	ldrsh.w	fp, [r3]
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 800194c:	e9cd 0103 	strd	r0, r1, [sp, #12]
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001950:	f1bb 0f00 	cmp.w	fp, #0
void updateDistance(int16_t newX, int16_t newY, int16_t newZ) {
 8001954:	9205      	str	r2, [sp, #20]
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001956:	f340 80e4 	ble.w	8001b22 <updateDistance+0x1e2>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 800195a:	4658      	mov	r0, fp
 800195c:	2500      	movs	r5, #0
 800195e:	f7fe fdbd 	bl	80004dc <__aeabi_i2d>
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 8001962:	46a8      	mov	r8, r5
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 8001964:	e9cd 0100 	strd	r0, r1, [sp]
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 8001968:	46a9      	mov	r9, r5
 800196a:	46aa      	mov	sl, r5
 800196c:	4628      	mov	r0, r5
 800196e:	4c79      	ldr	r4, [pc, #484]	; (8001b54 <updateDistance+0x214>)
 8001970:	e044      	b.n	80019fc <updateDistance+0xbc>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 8001972:	2200      	movs	r2, #0
 8001974:	4630      	mov	r0, r6
 8001976:	4639      	mov	r1, r7
 8001978:	4b77      	ldr	r3, [pc, #476]	; (8001b58 <updateDistance+0x218>)
 800197a:	f7ff f88b 	bl	8000a94 <__aeabi_dcmplt>
 800197e:	2800      	cmp	r0, #0
 8001980:	d14e      	bne.n	8001a20 <updateDistance+0xe0>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 8001982:	4630      	mov	r0, r6
 8001984:	4639      	mov	r1, r7
 8001986:	2200      	movs	r2, #0
 8001988:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <updateDistance+0x21c>)
 800198a:	f7ff f883 	bl	8000a94 <__aeabi_dcmplt>
 800198e:	2800      	cmp	r0, #0
 8001990:	d14a      	bne.n	8001a28 <updateDistance+0xe8>
        else ratioDelay = 0.5;
 8001992:	2600      	movs	r6, #0
 8001994:	4f70      	ldr	r7, [pc, #448]	; (8001b58 <updateDistance+0x218>)
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 8001996:	f9b4 0000 	ldrsh.w	r0, [r4]
 800199a:	f7fe fd9f 	bl	80004dc <__aeabi_i2d>
 800199e:	4632      	mov	r2, r6
 80019a0:	463b      	mov	r3, r7
 80019a2:	f7fe fe05 	bl	80005b0 <__aeabi_dmul>
 80019a6:	f006 fc33 	bl	8008210 <floor>
 80019aa:	f7ff f8b1 	bl	8000b10 <__aeabi_d2iz>
 80019ae:	4603      	mov	r3, r0
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 80019b0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
        accum_x += (int16_t) floor(accleRecord[i].rawX * ratioDelay);
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	449a      	add	sl, r3
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 80019b8:	f7fe fd90 	bl	80004dc <__aeabi_i2d>
 80019bc:	4632      	mov	r2, r6
 80019be:	463b      	mov	r3, r7
 80019c0:	f7fe fdf6 	bl	80005b0 <__aeabi_dmul>
 80019c4:	f006 fc24 	bl	8008210 <floor>
 80019c8:	f7ff f8a2 	bl	8000b10 <__aeabi_d2iz>
 80019cc:	4603      	mov	r3, r0
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 80019ce:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
        accum_y += (int16_t) floor(accleRecord[i].rawY * ratioDelay);
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4499      	add	r9, r3
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 80019d6:	f7fe fd81 	bl	80004dc <__aeabi_i2d>
 80019da:	463b      	mov	r3, r7
 80019dc:	4632      	mov	r2, r6
 80019de:	f7fe fde7 	bl	80005b0 <__aeabi_dmul>
 80019e2:	f006 fc15 	bl	8008210 <floor>
 80019e6:	f7ff f893 	bl	8000b10 <__aeabi_d2iz>
 80019ea:	4603      	mov	r3, r0
    for (short i = 0; i < acceleRecordSize; ++i) {
 80019ec:	3501      	adds	r5, #1
 80019ee:	b228      	sxth	r0, r5
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 80019f0:	b21b      	sxth	r3, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 80019f2:	4583      	cmp	fp, r0
 80019f4:	f104 0406 	add.w	r4, r4, #6
        accum_z += (int16_t) floor(accleRecord[i].rawZ * ratioDelay);
 80019f8:	4498      	add	r8, r3
    for (short i = 0; i < acceleRecordSize; ++i) {
 80019fa:	dd19      	ble.n	8001a30 <updateDistance+0xf0>
        if ((double) i / acceleRecordSize < 0.25) ratioDelay = 0.05;
 80019fc:	f7fe fd6e 	bl	80004dc <__aeabi_i2d>
 8001a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a04:	f7fe fefe 	bl	8000804 <__aeabi_ddiv>
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <updateDistance+0x220>)
 8001a0c:	4606      	mov	r6, r0
 8001a0e:	460f      	mov	r7, r1
 8001a10:	f7ff f840 	bl	8000a94 <__aeabi_dcmplt>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d0ac      	beq.n	8001972 <updateDistance+0x32>
 8001a18:	a747      	add	r7, pc, #284	; (adr r7, 8001b38 <updateDistance+0x1f8>)
 8001a1a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001a1e:	e7ba      	b.n	8001996 <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.50) ratioDelay = 0.15;
 8001a20:	a747      	add	r7, pc, #284	; (adr r7, 8001b40 <updateDistance+0x200>)
 8001a22:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001a26:	e7b6      	b.n	8001996 <updateDistance+0x56>
        else if ((double) i / acceleRecordSize < 0.75) ratioDelay = 0.3;
 8001a28:	a747      	add	r7, pc, #284	; (adr r7, 8001b48 <updateDistance+0x208>)
 8001a2a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8001a2e:	e7b2      	b.n	8001996 <updateDistance+0x56>
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <updateDistance+0x224>)
 8001a32:	ea4f 70ea 	mov.w	r0, sl, asr #31
 8001a36:	fb83 120a 	smull	r1, r2, r3, sl
 8001a3a:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 8001a3e:	fb83 1209 	smull	r1, r2, r3, r9
            accum_z / RECORD_MAX_SIZE;
 8001a42:	fb83 1308 	smull	r1, r3, r3, r8
 8001a46:	ea4f 7be8 	mov.w	fp, r8, asr #31
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001a4a:	ea4f 76e9 	mov.w	r6, r9, asr #31
 8001a4e:	ebc6 1662 	rsb	r6, r6, r2, asr #5
            accum_z / RECORD_MAX_SIZE;
 8001a52:	ebcb 1363 	rsb	r3, fp, r3, asr #5
    const int16_t avg_x = accum_x / RECORD_MAX_SIZE, avg_y = accum_y / RECORD_MAX_SIZE, avg_z =
 8001a56:	b200      	sxth	r0, r0
 8001a58:	b236      	sxth	r6, r6
 8001a5a:	fa0f fb83 	sxth.w	fp, r3
    (newX <= avg_x) ? (accum_x = 0) : (accum_x -= avg_x);
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	4283      	cmp	r3, r0
 8001a62:	dd4d      	ble.n	8001b00 <updateDistance+0x1c0>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a64:	ebaa 0000 	sub.w	r0, sl, r0
 8001a68:	f7fe fd38 	bl	80004dc <__aeabi_i2d>
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f7fe fd9e 	bl	80005b0 <__aeabi_dmul>
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001a74:	9b04      	ldr	r3, [sp, #16]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a76:	4604      	mov	r4, r0
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001a78:	42b3      	cmp	r3, r6
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a7a:	460d      	mov	r5, r1
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001a7c:	dd46      	ble.n	8001b0c <updateDistance+0x1cc>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a7e:	eba9 0006 	sub.w	r0, r9, r6
 8001a82:	f7fe fd2b 	bl	80004dc <__aeabi_i2d>
 8001a86:	460b      	mov	r3, r1
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f7fe fd91 	bl	80005b0 <__aeabi_dmul>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001a8e:	9b05      	ldr	r3, [sp, #20]
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a90:	4606      	mov	r6, r0
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001a92:	455b      	cmp	r3, fp
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a94:	460f      	mov	r7, r1
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001a96:	dd3f      	ble.n	8001b18 <updateDistance+0x1d8>
    const double calDis = sqrt(pow(accum_x, 2) + pow(accum_y, 2) + pow(accum_z, 2));
 8001a98:	eba8 000b 	sub.w	r0, r8, fp
 8001a9c:	f7fe fd1e 	bl	80004dc <__aeabi_i2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f7fe fd84 	bl	80005b0 <__aeabi_dmul>
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	4689      	mov	r9, r1
 8001aac:	4632      	mov	r2, r6
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fbc6 	bl	8000244 <__adddf3>
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	f7fe fbc2 	bl	8000244 <__adddf3>
 8001ac0:	f006 fc28 	bl	8008314 <sqrt>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
    distanceTraveled += (uint16_t) floor(calDis);
 8001ac8:	f006 fba2 	bl	8008210 <floor>
 8001acc:	f7ff f848 	bl	8000b60 <__aeabi_d2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4f25      	ldr	r7, [pc, #148]	; (8001b68 <updateDistance+0x228>)
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	683a      	ldr	r2, [r7, #0]
    actualDistance += (calDis / 1000);
 8001ad8:	4620      	mov	r0, r4
    distanceTraveled += (uint16_t) floor(calDis);
 8001ada:	4413      	add	r3, r2
 8001adc:	603b      	str	r3, [r7, #0]
    actualDistance += (calDis / 1000);
 8001ade:	4629      	mov	r1, r5
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <updateDistance+0x22c>)
 8001ae4:	f7fe fe8e 	bl	8000804 <__aeabi_ddiv>
 8001ae8:	4e21      	ldr	r6, [pc, #132]	; (8001b70 <updateDistance+0x230>)
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001af2:	f7fe fba7 	bl	8000244 <__adddf3>
 8001af6:	e9c6 0100 	strd	r0, r1, [r6]
}
 8001afa:	b007      	add	sp, #28
 8001afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (newY <= avg_y) ? (accum_y = 0) : (accum_y -= avg_y);
 8001b00:	9b04      	ldr	r3, [sp, #16]
 8001b02:	2400      	movs	r4, #0
 8001b04:	42b3      	cmp	r3, r6
 8001b06:	f04f 0500 	mov.w	r5, #0
 8001b0a:	dcb8      	bgt.n	8001a7e <updateDistance+0x13e>
    (newZ <= avg_z) ? (accum_z = 0) : (accum_z -= avg_z);
 8001b0c:	9b05      	ldr	r3, [sp, #20]
 8001b0e:	2600      	movs	r6, #0
 8001b10:	455b      	cmp	r3, fp
 8001b12:	f04f 0700 	mov.w	r7, #0
 8001b16:	dcbf      	bgt.n	8001a98 <updateDistance+0x158>
 8001b18:	f04f 0800 	mov.w	r8, #0
 8001b1c:	f04f 0900 	mov.w	r9, #0
 8001b20:	e7c4      	b.n	8001aac <updateDistance+0x16c>
    for (short i = 0; i < acceleRecordSize; ++i) {
 8001b22:	f04f 0b00 	mov.w	fp, #0
 8001b26:	465e      	mov	r6, fp
 8001b28:	4658      	mov	r0, fp
    int32_t accum_x = 0, accum_y = 0, accum_z = 0;
 8001b2a:	46d8      	mov	r8, fp
 8001b2c:	46d9      	mov	r9, fp
 8001b2e:	46da      	mov	sl, fp
 8001b30:	e795      	b.n	8001a5e <updateDistance+0x11e>
 8001b32:	bf00      	nop
 8001b34:	f3af 8000 	nop.w
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	3fa99999 	.word	0x3fa99999
 8001b40:	33333333 	.word	0x33333333
 8001b44:	3fc33333 	.word	0x3fc33333
 8001b48:	33333333 	.word	0x33333333
 8001b4c:	3fd33333 	.word	0x3fd33333
 8001b50:	2000022c 	.word	0x2000022c
 8001b54:	20000230 	.word	0x20000230
 8001b58:	3fe00000 	.word	0x3fe00000
 8001b5c:	3fe80000 	.word	0x3fe80000
 8001b60:	3fd00000 	.word	0x3fd00000
 8001b64:	51eb851f 	.word	0x51eb851f
 8001b68:	2000055c 	.word	0x2000055c
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000488 	.word	0x20000488

08001b74 <HueToRGB565>:
    uint16_t portion = hue * 6;
 8001b74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b78:	0040      	lsls	r0, r0, #1
    if (portion < 256) { // 0 <= degree < 60
 8001b7a:	28ff      	cmp	r0, #255	; 0xff
uint16_t HueToRGB565(uint8_t hue) {
 8001b7c:	b508      	push	{r3, lr}
    if (portion < 256) { // 0 <= degree < 60
 8001b7e:	d932      	bls.n	8001be6 <HueToRGB565+0x72>
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8001b80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001b84:	d31a      	bcc.n	8001bbc <HueToRGB565+0x48>
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8001b86:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8001b8a:	d351      	bcc.n	8001c30 <HueToRGB565+0xbc>
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8001b8c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001b90:	d33a      	bcc.n	8001c08 <HueToRGB565+0x94>
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8001b92:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8001b96:	d25d      	bcs.n	8001c54 <HueToRGB565+0xe0>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8001b98:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8001b9c:	f7fe fc9e 	bl	80004dc <__aeabi_i2d>
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HueToRGB565+0x110>)
 8001ba4:	f7fe fd04 	bl	80005b0 <__aeabi_dmul>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HueToRGB565+0x114>)
 8001bac:	f7fe fd00 	bl	80005b0 <__aeabi_dmul>
 8001bb0:	f7fe ffae 	bl	8000b10 <__aeabi_d2iz>
 8001bb4:	02c0      	lsls	r0, r0, #11
 8001bb6:	301f      	adds	r0, #31
 8001bb8:	b280      	uxth	r0, r0
}
 8001bba:	bd08      	pop	{r3, pc}
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8001bbc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8001bc0:	f7fe fc8c 	bl	80004dc <__aeabi_i2d>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HueToRGB565+0x110>)
 8001bc8:	f7fe fcf2 	bl	80005b0 <__aeabi_dmul>
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HueToRGB565+0x114>)
 8001bd0:	f7fe fcee 	bl	80005b0 <__aeabi_dmul>
 8001bd4:	f7fe ff9c 	bl	8000b10 <__aeabi_d2iz>
 8001bd8:	f1c0 001f 	rsb	r0, r0, #31
 8001bdc:	02c0      	lsls	r0, r0, #11
 8001bde:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8001be2:	b280      	uxth	r0, r0
}
 8001be4:	bd08      	pop	{r3, pc}
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8001be6:	f7fe fc79 	bl	80004dc <__aeabi_i2d>
 8001bea:	2200      	movs	r2, #0
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HueToRGB565+0x110>)
 8001bee:	f7fe fcdf 	bl	80005b0 <__aeabi_dmul>
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HueToRGB565+0x118>)
 8001bf6:	f7fe fcdb 	bl	80005b0 <__aeabi_dmul>
 8001bfa:	f7fe ff89 	bl	8000b10 <__aeabi_d2iz>
 8001bfe:	0140      	lsls	r0, r0, #5
 8001c00:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8001c04:	b280      	uxth	r0, r0
}
 8001c06:	bd08      	pop	{r3, pc}
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8001c08:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 8001c0c:	f7fe fc66 	bl	80004dc <__aeabi_i2d>
 8001c10:	2200      	movs	r2, #0
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HueToRGB565+0x110>)
 8001c14:	f7fe fccc 	bl	80005b0 <__aeabi_dmul>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HueToRGB565+0x118>)
 8001c1c:	f7fe fcc8 	bl	80005b0 <__aeabi_dmul>
 8001c20:	f7fe ff76 	bl	8000b10 <__aeabi_d2iz>
 8001c24:	f1c0 003f 	rsb	r0, r0, #63	; 0x3f
 8001c28:	0140      	lsls	r0, r0, #5
 8001c2a:	301f      	adds	r0, #31
 8001c2c:	b280      	uxth	r0, r0
}
 8001c2e:	bd08      	pop	{r3, pc}
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8001c30:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8001c34:	f7fe fc52 	bl	80004dc <__aeabi_i2d>
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HueToRGB565+0x110>)
 8001c3c:	f7fe fcb8 	bl	80005b0 <__aeabi_dmul>
 8001c40:	2200      	movs	r2, #0
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HueToRGB565+0x114>)
 8001c44:	f7fe fcb4 	bl	80005b0 <__aeabi_dmul>
 8001c48:	f7fe ff62 	bl	8000b10 <__aeabi_d2iz>
 8001c4c:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8001c50:	b280      	uxth	r0, r0
}
 8001c52:	bd08      	pop	{r3, pc}
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8001c54:	f5a0 60a0 	sub.w	r0, r0, #1280	; 0x500
 8001c58:	f7fe fc40 	bl	80004dc <__aeabi_i2d>
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HueToRGB565+0x110>)
 8001c60:	f7fe fca6 	bl	80005b0 <__aeabi_dmul>
 8001c64:	2200      	movs	r2, #0
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HueToRGB565+0x114>)
 8001c68:	f7fe fca2 	bl	80005b0 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	2000      	movs	r0, #0
 8001c72:	4907      	ldr	r1, [pc, #28]	; (8001c90 <HueToRGB565+0x11c>)
 8001c74:	f7fe fae4 	bl	8000240 <__aeabi_dsub>
 8001c78:	f7fe ff4a 	bl	8000b10 <__aeabi_d2iz>
 8001c7c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8001c80:	b280      	uxth	r0, r0
}
 8001c82:	bd08      	pop	{r3, pc}
 8001c84:	3f700000 	.word	0x3f700000
 8001c88:	40400000 	.word	0x40400000
 8001c8c:	40500000 	.word	0x40500000
 8001c90:	403f0000 	.word	0x403f0000

08001c94 <getY>:
void getY(uint8_t index, uint8_t delay) {
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4604      	mov	r4, r0
 8001c98:	460d      	mov	r5, r1
    if ((index & 0x01) == 0) {
 8001c9a:	f010 0201 	ands.w	r2, r0, #1
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001c9e:	bf18      	it	ne
 8001ca0:	2201      	movne	r2, #1
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <getY+0x48>)
 8001ca8:	f002 f9d2 	bl	8004050 <HAL_GPIO_WritePin>
    if ((index & 0x02) == 0) {
 8001cac:	f014 0202 	ands.w	r2, r4, #2
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001cb0:	bf18      	it	ne
 8001cb2:	2201      	movne	r2, #1
 8001cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <getY+0x48>)
 8001cba:	f002 f9c9 	bl	8004050 <HAL_GPIO_WritePin>
    if ((index & 0x04) == 0) {
 8001cbe:	f014 0204 	ands.w	r2, r4, #4
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <getY+0x48>)
 8001cc4:	bf18      	it	ne
 8001cc6:	2201      	movne	r2, #1
 8001cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ccc:	f002 f9c0 	bl	8004050 <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8001cd0:	4628      	mov	r0, r5
}
 8001cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(delay);
 8001cd6:	f001 bcb9 	b.w	800364c <HAL_Delay>
 8001cda:	bf00      	nop
 8001cdc:	40011000 	.word	0x40011000

08001ce0 <initWeightSensors>:
void initWeightSensors(struct YPin *pins) {
 8001ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pins[2].weightAtSampledWeight = 300;
 8001ce4:	f44f 7396 	mov.w	r3, #300	; 0x12c
void initWeightSensors(struct YPin *pins) {
 8001ce8:	4604      	mov	r4, r0
    pins[0].weightAtSampledWeight = 270;
 8001cea:	f44f 7087 	mov.w	r0, #270	; 0x10e
    pins[4].voltageAtZeroWeight = 1000;
 8001cee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001d78 <initWeightSensors+0x98>
    pins[0].voltageAtZeroWeight = 1200;
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <initWeightSensors+0x9c>)
    pins[1].voltageAtZeroWeight = 1300;
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <initWeightSensors+0xa0>)
    pins[2].voltageAtZeroWeight = 1800;
 8001cf6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001d84 <initWeightSensors+0xa4>
    pins[3].voltageAtZeroWeight = 2800;
 8001cfa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001d88 <initWeightSensors+0xa8>
    pins[5].voltageAtZeroWeight = 1800;
 8001cfe:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8001d8c <initWeightSensors+0xac>
    pins[6].voltageAtZeroWeight = 1800;
 8001d02:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8001d90 <initWeightSensors+0xb0>
    pins[7].voltageAtZeroWeight = 1000;
 8001d06:	4e23      	ldr	r6, [pc, #140]	; (8001d94 <initWeightSensors+0xb4>)
    pins[4].voltageAtZeroWeight = 1000;
 8001d08:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    pins[7].weightAtSampledWeight = 300;
 8001d0c:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 8001d10:	f240 57dc 	movw	r7, #1500	; 0x5dc
    pins[2].voltageAtZeroWeight = 1800;
 8001d14:	f8c4 a020 	str.w	sl, [r4, #32]
    pins[3].voltageAtZeroWeight = 2800;
 8001d18:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    pins[5].voltageAtZeroWeight = 1800;
 8001d1c:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
    pins[6].voltageAtZeroWeight = 1800;
 8001d20:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    pins[7].voltageAtZeroWeight = 1000;
 8001d24:	6726      	str	r6, [r4, #112]	; 0x70
    pins[0].voltageAtZeroWeight = 1200;
 8001d26:	6021      	str	r1, [r4, #0]
    pins[1].voltageAtZeroWeight = 1300;
 8001d28:	6122      	str	r2, [r4, #16]
    pins[0].weightAtSampledWeight = 270;
 8001d2a:	80a0      	strh	r0, [r4, #4]
    pins[1].weightAtSampledWeight = 270;
 8001d2c:	82a0      	strh	r0, [r4, #20]
    pins[2].weightAtSampledWeight = 300;
 8001d2e:	84a3      	strh	r3, [r4, #36]	; 0x24
    pins[3].weightAtSampledWeight = 300;
 8001d30:	86a3      	strh	r3, [r4, #52]	; 0x34
    pins[4].weightAtSampledWeight = 300;
 8001d32:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pins[5].weightAtSampledWeight = 300;
 8001d36:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    pins[6].weightAtSampledWeight = 300;
 8001d3a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pins[7].weightAtSampledWeight = 300;
 8001d3e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    for (uint8_t i = 0; i < 8; i++)
 8001d42:	f104 0870 	add.w	r8, r4, #112	; 0x70
 8001d46:	e003      	b.n	8001d50 <initWeightSensors+0x70>
                pins[i].weightAtSampledWeight * 1.0 / (pins[i].voltageAtSampledWeight - pins[i].voltageAtZeroWeight);
 8001d48:	8aa0      	ldrh	r0, [r4, #20]
 8001d4a:	8a67      	ldrh	r7, [r4, #18]
 8001d4c:	f834 5f10 	ldrh.w	r5, [r4, #16]!
 8001d50:	f7fe fbc4 	bl	80004dc <__aeabi_i2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	1b78      	subs	r0, r7, r5
 8001d58:	4616      	mov	r6, r2
 8001d5a:	460f      	mov	r7, r1
 8001d5c:	f7fe fbbe 	bl	80004dc <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4630      	mov	r0, r6
 8001d66:	4639      	mov	r1, r7
 8001d68:	f7fe fd4c 	bl	8000804 <__aeabi_ddiv>
    for (uint8_t i = 0; i < 8; i++)
 8001d6c:	45a0      	cmp	r8, r4
        pins[i].weightCoef =
 8001d6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    for (uint8_t i = 0; i < 8; i++)
 8001d72:	d1e9      	bne.n	8001d48 <initWeightSensors+0x68>
}
 8001d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d78:	070803e8 	.word	0x070803e8
 8001d7c:	05dc04b0 	.word	0x05dc04b0
 8001d80:	05dc0514 	.word	0x05dc0514
 8001d84:	0a280708 	.word	0x0a280708
 8001d88:	0c800af0 	.word	0x0c800af0
 8001d8c:	07d00708 	.word	0x07d00708
 8001d90:	08340708 	.word	0x08340708
 8001d94:	53fc03e8 	.word	0x53fc03e8

08001d98 <initializeHMC5883L>:
void initializeHMC5883L() {
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t initValue = 0x70;
 8001d9a:	2370      	movs	r3, #112	; 0x70
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 8001d9c:	2401      	movs	r4, #1
 8001d9e:	2664      	movs	r6, #100	; 0x64
void initializeHMC5883L() {
 8001da0:	b087      	sub	sp, #28
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 8001da2:	4f0e      	ldr	r7, [pc, #56]	; (8001ddc <initializeHMC5883L+0x44>)
 8001da4:	f10d 0517 	add.w	r5, sp, #23
    uint8_t initValue = 0x70;
 8001da8:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x00, 1, &initValue, 1, 100);
 8001dac:	2200      	movs	r2, #0
 8001dae:	4623      	mov	r3, r4
 8001db0:	213c      	movs	r1, #60	; 0x3c
 8001db2:	4638      	mov	r0, r7
 8001db4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001db8:	9500      	str	r5, [sp, #0]
 8001dba:	f002 fc33 	bl	8004624 <HAL_I2C_Mem_Write>
    initValue = 0xA0;
 8001dbe:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 8001dc2:	4638      	mov	r0, r7
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	213c      	movs	r1, #60	; 0x3c
 8001dca:	9602      	str	r6, [sp, #8]
 8001dcc:	9401      	str	r4, [sp, #4]
 8001dce:	9500      	str	r5, [sp, #0]
    initValue = 0xA0;
 8001dd0:	f88d c017 	strb.w	ip, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x01, 1, &initValue, 1, 100);
 8001dd4:	f002 fc26 	bl	8004624 <HAL_I2C_Mem_Write>
}
 8001dd8:	b007      	add	sp, #28
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	20000590 	.word	0x20000590

08001de0 <weightPage>:
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
    HAL_Delay(20);
}

void weightPage(void) {
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8001de4:	4983      	ldr	r1, [pc, #524]	; (8001ff4 <weightPage+0x214>)
void weightPage(void) {
 8001de6:	b08d      	sub	sp, #52	; 0x34
    if (changingPage) {
 8001de8:	680b      	ldr	r3, [r1, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80a9 	bne.w	8001f42 <weightPage+0x162>
 8001df0:	ab08      	add	r3, sp, #32
 8001df2:	9305      	str	r3, [sp, #20]
 8001df4:	f10d 0b1c 	add.w	fp, sp, #28
    HAL_Delay(20);
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f04f 0900 	mov.w	r9, #0
 8001dfe:	f64f 78d8 	movw	r8, #65496	; 0xffd8
 8001e02:	2764      	movs	r7, #100	; 0x64
 8001e04:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8001ff8 <weightPage+0x218>
 8001e08:	9303      	str	r3, [sp, #12]
 8001e0a:	f8cd 9010 	str.w	r9, [sp, #16]
 8001e0e:	e034      	b.n	8001e7a <weightPage+0x9a>
        sum += weightPin;

        char dec[10] = "";

        if (counter < 4)
            LCD_DrawEllipse(25, 240 - counter * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));
 8001e10:	f7fe fb54 	bl	80004bc <__aeabi_ui2d>
 8001e14:	2200      	movs	r2, #0
 8001e16:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <weightPage+0x21c>)
 8001e18:	f7fe fbca 	bl	80005b0 <__aeabi_dmul>
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4b78      	ldr	r3, [pc, #480]	; (8002000 <weightPage+0x220>)
 8001e20:	f7fe fbc6 	bl	80005b0 <__aeabi_dmul>
 8001e24:	f7fe fe9c 	bl	8000b60 <__aeabi_d2uiz>
 8001e28:	b2c0      	uxtb	r0, r0
 8001e2a:	f7ff fea3 	bl	8001b74 <HueToRGB565>
 8001e2e:	230a      	movs	r3, #10
 8001e30:	f1c8 01c8 	rsb	r1, r8, #200	; 0xc8
 8001e34:	461a      	mov	r2, r3
 8001e36:	9000      	str	r0, [sp, #0]
 8001e38:	b289      	uxth	r1, r1
 8001e3a:	2019      	movs	r0, #25
 8001e3c:	f7ff fafe 	bl	800143c <LCD_DrawEllipse>
        else
            LCD_DrawEllipse(75, 120 + (counter - 4) * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));

        sprintf(dec, "%4d %5d", val, weightPin);
 8001e40:	4623      	mov	r3, r4
 8001e42:	462a      	mov	r2, r5
 8001e44:	496f      	ldr	r1, [pc, #444]	; (8002004 <weightPage+0x224>)
 8001e46:	4658      	mov	r0, fp
 8001e48:	f004 f876 	bl	8005f38 <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e50:	4633      	mov	r3, r6
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	4639      	mov	r1, r7
 8001e56:	465a      	mov	r2, fp
 8001e58:	208c      	movs	r0, #140	; 0x8c
 8001e5a:	f7ff fbc5 	bl	80015e8 <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001e5e:	9b03      	ldr	r3, [sp, #12]
 8001e60:	3712      	adds	r7, #18
 8001e62:	3301      	adds	r3, #1
 8001e64:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f109 0901 	add.w	r9, r9, #1
 8001e6e:	f10a 0a10 	add.w	sl, sl, #16
 8001e72:	9303      	str	r3, [sp, #12]
 8001e74:	b2bf      	uxth	r7, r7
 8001e76:	fa1f f888 	uxth.w	r8, r8
        getY(counter, 20);
 8001e7a:	2114      	movs	r1, #20
 8001e7c:	fa5f f089 	uxtb.w	r0, r9
 8001e80:	f7ff ff08 	bl	8001c94 <getY>
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001e84:	4860      	ldr	r0, [pc, #384]	; (8002008 <weightPage+0x228>)
 8001e86:	f001 fca5 	bl	80037d4 <HAL_ADC_GetValue>
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001e8a:	f8ba 3000 	ldrh.w	r3, [sl]
        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8001e8e:	4605      	mov	r5, r0
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001e90:	1ac0      	subs	r0, r0, r3
 8001e92:	f7fe fb13 	bl	80004bc <__aeabi_ui2d>
 8001e96:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8001e9a:	f7fe fb89 	bl	80005b0 <__aeabi_dmul>
 8001e9e:	f7fe fe37 	bl	8000b10 <__aeabi_d2iz>
        char dec[10] = "";
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	9b05      	ldr	r3, [sp, #20]
 8001ea6:	9607      	str	r6, [sp, #28]
        int16_t weightPin = weightSensors[counter].weightCoef * (val - weightSensors[counter].voltageAtZeroWeight);
 8001ea8:	b204      	sxth	r4, r0
        char dec[10] = "";
 8001eaa:	601e      	str	r6, [r3, #0]
 8001eac:	809e      	strh	r6, [r3, #4]
        sum += weightPin;
 8001eae:	9b04      	ldr	r3, [sp, #16]
 8001eb0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8001eb4:	4423      	add	r3, r4
 8001eb6:	b29b      	uxth	r3, r3
        if (counter < 4)
 8001eb8:	f1b9 0f03 	cmp.w	r9, #3
            LCD_DrawEllipse(25, 240 - counter * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));
 8001ebc:	4628      	mov	r0, r5
        sum += weightPin;
 8001ebe:	9304      	str	r3, [sp, #16]
        if (counter < 4)
 8001ec0:	d9a6      	bls.n	8001e10 <weightPage+0x30>
            LCD_DrawEllipse(75, 120 + (counter - 4) * 40, 10, 10, HueToRGB565(val / 4096.0 * 256));
 8001ec2:	f7fe fafb 	bl	80004bc <__aeabi_ui2d>
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <weightPage+0x21c>)
 8001eca:	f7fe fb71 	bl	80005b0 <__aeabi_dmul>
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <weightPage+0x220>)
 8001ed2:	f7fe fb6d 	bl	80005b0 <__aeabi_dmul>
 8001ed6:	f7fe fe43 	bl	8000b60 <__aeabi_d2uiz>
 8001eda:	b2c0      	uxtb	r0, r0
 8001edc:	f7ff fe4a 	bl	8001b74 <HueToRGB565>
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	9000      	str	r0, [sp, #0]
 8001ee8:	204b      	movs	r0, #75	; 0x4b
 8001eea:	f7ff faa7 	bl	800143c <LCD_DrawEllipse>
        sprintf(dec, "%4d %5d", val, weightPin);
 8001eee:	4623      	mov	r3, r4
 8001ef0:	462a      	mov	r2, r5
 8001ef2:	4944      	ldr	r1, [pc, #272]	; (8002004 <weightPage+0x224>)
 8001ef4:	4658      	mov	r0, fp
 8001ef6:	f004 f81f 	bl	8005f38 <siprintf>
        LCD_DrawString_Color(140, 100 + 18 * counter, dec, BACKGROUND, WHITE);
 8001efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efe:	4639      	mov	r1, r7
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	465a      	mov	r2, fp
 8001f04:	4633      	mov	r3, r6
 8001f06:	208c      	movs	r0, #140	; 0x8c
 8001f08:	f7ff fb6e 	bl	80015e8 <LCD_DrawString_Color>
    for (uint8_t counter = 0; counter < 8; counter++) {
 8001f0c:	9b03      	ldr	r3, [sp, #12]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d1a5      	bne.n	8001e5e <weightPage+0x7e>
    }

    char output_gram[20] = "";
 8001f12:	9b05      	ldr	r3, [sp, #20]
 8001f14:	9607      	str	r6, [sp, #28]
    sprintf(output_gram, "%6d Gram", sum);
 8001f16:	9a04      	ldr	r2, [sp, #16]
    char output_gram[20] = "";
 8001f18:	e9c3 6600 	strd	r6, r6, [r3]
 8001f1c:	e9c3 6602 	strd	r6, r6, [r3, #8]
    sprintf(output_gram, "%6d Gram", sum);
 8001f20:	4658      	mov	r0, fp
 8001f22:	493a      	ldr	r1, [pc, #232]	; (800200c <weightPage+0x22c>)
 8001f24:	f004 f808 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(120, 80, output_gram, BLUE, BLACK);
 8001f28:	231f      	movs	r3, #31
 8001f2a:	465a      	mov	r2, fp
 8001f2c:	2150      	movs	r1, #80	; 0x50
 8001f2e:	2078      	movs	r0, #120	; 0x78
 8001f30:	9600      	str	r6, [sp, #0]
 8001f32:	f7ff fb59 	bl	80015e8 <LCD_DrawString_Color>

    HAL_Delay(20);
 8001f36:	2014      	movs	r0, #20
 8001f38:	f001 fb88 	bl	800364c <HAL_Delay>
}
 8001f3c:	b00d      	add	sp, #52	; 0x34
 8001f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        changingPage = 0;
 8001f42:	f04f 0800 	mov.w	r8, #0
        currentPage = weight;
 8001f46:	2501      	movs	r5, #1
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001f48:	f04f 090a 	mov.w	r9, #10
 8001f4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001f50:	f647 7aff 	movw	sl, #32767	; 0x7fff
        currentPage = weight;
 8001f54:	482e      	ldr	r0, [pc, #184]	; (8002010 <weightPage+0x230>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001f56:	f8cd 8000 	str.w	r8, [sp]
    HAL_Delay(20);
 8001f5a:	2464      	movs	r4, #100	; 0x64
        currentPage = weight;
 8001f5c:	7005      	strb	r5, [r0, #0]
    HAL_Delay(20);
 8001f5e:	4645      	mov	r5, r8
 8001f60:	f10d 0c20 	add.w	ip, sp, #32
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001f64:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f68:	22f0      	movs	r2, #240	; 0xf0
 8001f6a:	4640      	mov	r0, r8
        changingPage = 0;
 8001f6c:	f8c1 8000 	str.w	r8, [r1]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001f70:	4641      	mov	r1, r8
 8001f72:	f8cd c014 	str.w	ip, [sp, #20]
 8001f76:	f7ff fa49 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8001f7a:	4648      	mov	r0, r9
 8001f7c:	231f      	movs	r3, #31
 8001f7e:	2128      	movs	r1, #40	; 0x28
 8001f80:	e9cd 6900 	strd	r6, r9, [sp]
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <weightPage+0x234>)
 8001f86:	f7ff fb57 	bl	8001638 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001f8a:	2319      	movs	r3, #25
 8001f8c:	2282      	movs	r2, #130	; 0x82
 8001f8e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f92:	2014      	movs	r0, #20
 8001f94:	f8cd a000 	str.w	sl, [sp]
 8001f98:	f7ff fa38 	bl	800140c <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001f9c:	4653      	mov	r3, sl
 8001f9e:	f240 111d 	movw	r1, #285	; 0x11d
 8001fa2:	201e      	movs	r0, #30
 8001fa4:	e9cd 8900 	strd	r8, r9, [sp]
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <weightPage+0x238>)
 8001faa:	f7ff fb45 	bl	8001638 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f001 fb4c 	bl	800364c <HAL_Delay>
            sprintf(temp, "Y%d: ", i);
 8001fb4:	4f19      	ldr	r7, [pc, #100]	; (800201c <weightPage+0x23c>)
            char temp[10] = "";
 8001fb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001fba:	f10d 0b1c 	add.w	fp, sp, #28
            sprintf(temp, "Y%d: ", i);
 8001fbe:	462a      	mov	r2, r5
            char temp[10] = "";
 8001fc0:	f8cd 801c 	str.w	r8, [sp, #28]
            sprintf(temp, "Y%d: ", i);
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	4658      	mov	r0, fp
            char temp[10] = "";
 8001fc8:	f8c9 8000 	str.w	r8, [r9]
 8001fcc:	f8a9 8004 	strh.w	r8, [r9, #4]
            sprintf(temp, "Y%d: ", i);
 8001fd0:	f003 ffb2 	bl	8005f38 <siprintf>
        for (uint8_t i = 0; i < 8; i++) {
 8001fd4:	3501      	adds	r5, #1
            LCD_DrawString_Color(110, 100 + 18 * i, temp, BACKGROUND, WHITE);
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	2300      	movs	r3, #0
 8001fda:	465a      	mov	r2, fp
 8001fdc:	206e      	movs	r0, #110	; 0x6e
 8001fde:	9600      	str	r6, [sp, #0]
 8001fe0:	f7ff fb02 	bl	80015e8 <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 8001fe4:	3412      	adds	r4, #18
 8001fe6:	2d08      	cmp	r5, #8
 8001fe8:	b2a4      	uxth	r4, r4
 8001fea:	d1e8      	bne.n	8001fbe <weightPage+0x1de>
        initWeightSensors(weightSensors);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <weightPage+0x218>)
 8001fee:	f7ff fe77 	bl	8001ce0 <initWeightSensors>
 8001ff2:	e701      	b.n	8001df8 <weightPage+0x18>
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000638 	.word	0x20000638
 8001ffc:	3f300000 	.word	0x3f300000
 8002000:	40700000 	.word	0x40700000
 8002004:	08009020 	.word	0x08009020
 8002008:	20000560 	.word	0x20000560
 800200c:	08009028 	.word	0x08009028
 8002010:	2000055a 	.word	0x2000055a
 8002014:	08008ff8 	.word	0x08008ff8
 8002018:	08008fe8 	.word	0x08008fe8
 800201c:	08009018 	.word	0x08009018

08002020 <accelerometerPage>:

void accelerometerPage() {
 8002020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *output_text;
    if (changingPage) {
 8002024:	4bca      	ldr	r3, [pc, #808]	; (8002350 <accelerometerPage+0x330>)
void accelerometerPage() {
 8002026:	b0ab      	sub	sp, #172	; 0xac
    if (changingPage) {
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 8242 	bne.w	80024b4 <accelerometerPage+0x494>
 8002030:	4bc8      	ldr	r3, [pc, #800]	; (8002354 <accelerometerPage+0x334>)
 8002032:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	4bc7      	ldr	r3, [pc, #796]	; (8002358 <accelerometerPage+0x338>)
 800203a:	af1b      	add	r7, sp, #108	; 0x6c
 800203c:	9309      	str	r3, [sp, #36]	; 0x24
 800203e:	4bc7      	ldr	r3, [pc, #796]	; (800235c <accelerometerPage+0x33c>)
 8002040:	ae20      	add	r6, sp, #128	; 0x80
 8002042:	930e      	str	r3, [sp, #56]	; 0x38
 8002044:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8002048:	930f      	str	r3, [sp, #60]	; 0x3c
 800204a:	ab16      	add	r3, sp, #88	; 0x58
 800204c:	9310      	str	r3, [sp, #64]	; 0x40
 800204e:	4bc4      	ldr	r3, [pc, #784]	; (8002360 <accelerometerPage+0x340>)
 8002050:	ad25      	add	r5, sp, #148	; 0x94
 8002052:	930a      	str	r3, [sp, #40]	; 0x28
 8002054:	4bc3      	ldr	r3, [pc, #780]	; (8002364 <accelerometerPage+0x344>)
 8002056:	930c      	str	r3, [sp, #48]	; 0x30
 8002058:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <accelerometerPage+0x348>)
 800205a:	9306      	str	r3, [sp, #24]
 800205c:	ab18      	add	r3, sp, #96	; 0x60
 800205e:	9311      	str	r3, [sp, #68]	; 0x44
 8002060:	ab1c      	add	r3, sp, #112	; 0x70
 8002062:	9305      	str	r3, [sp, #20]
 8002064:	ab21      	add	r3, sp, #132	; 0x84
 8002066:	9308      	str	r3, [sp, #32]
            output_text = "SENSOR NP";
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
        }
        /* DEBUG MESSAGE ABOVE */
    }
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8002068:	2006      	movs	r0, #6
 800206a:	f003 f9e7 	bl	800543c <malloc>
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 800206e:	235a      	movs	r3, #90	; 0x5a
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	2306      	movs	r3, #6
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8002074:	4682      	mov	sl, r0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2301      	movs	r3, #1
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 800207a:	2400      	movs	r4, #0
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 800207c:	213a      	movs	r1, #58	; 0x3a
 800207e:	2232      	movs	r2, #50	; 0x32
    uint8_t *acceleromterData = malloc(6 * sizeof(uint8_t));
 8002080:	9012      	str	r0, [sp, #72]	; 0x48
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 8002082:	f8cd a000 	str.w	sl, [sp]
 8002086:	48b9      	ldr	r0, [pc, #740]	; (800236c <accelerometerPage+0x34c>)
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
    uint8_t writeMode = 0x01;
 8002088:	4699      	mov	r9, r3
    HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, acceleromterData, 6, 90);
 800208a:	f002 fb7f 	bl	800478c <HAL_I2C_Mem_Read>
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 800208e:	4652      	mov	r2, sl
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 8002090:	9b05      	ldr	r3, [sp, #20]
 8002092:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8002096:	e9c3 4401 	strd	r4, r4, [r3, #4]
 800209a:	60dc      	str	r4, [r3, #12]
 800209c:	9b08      	ldr	r3, [sp, #32]
 800209e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 80020a2:	e9c3 4401 	strd	r4, r4, [r3, #4]
 80020a6:	60dc      	str	r4, [r3, #12]
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 80020a8:	f9ba 3000 	ldrsh.w	r3, [sl]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 80020ac:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
    const int16_t combined_aX = combineUint_8ts(acceleromterData[1], acceleromterData[0]) >> 5;
 80020b0:	115b      	asrs	r3, r3, #5
 80020b2:	9305      	str	r3, [sp, #20]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 80020b4:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 80020b8:	e9cb 4401 	strd	r4, r4, [fp, #4]
    const int16_t combined_aY = combineUint_8ts(acceleromterData[3], acceleromterData[2]) >> 5;
 80020bc:	ea4f 1a63 	mov.w	sl, r3, asr #5
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 80020c0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    char x_print[20] = "", y_print[20] = "", z_print[20] = "";
 80020c4:	f8cb 400c 	str.w	r4, [fp, #12]
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 80020c8:	115a      	asrs	r2, r3, #5
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 80020ca:	2006      	movs	r0, #6
    const int16_t combined_aZ = combineUint_8ts(acceleromterData[5], acceleromterData[4]) >> 5;
 80020cc:	9208      	str	r2, [sp, #32]
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 80020ce:	f003 f9b5 	bl	800543c <malloc>
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 80020d2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    uint8_t *compassData = malloc(6 * sizeof(uint8_t));
 80020d6:	4683      	mov	fp, r0
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 80020d8:	f8cd c000 	str.w	ip, [sp]
 80020dc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80020e0:	464b      	mov	r3, r9
 80020e2:	e9cd 9c01 	strd	r9, ip, [sp, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	213c      	movs	r1, #60	; 0x3c
 80020ea:	48a0      	ldr	r0, [pc, #640]	; (800236c <accelerometerPage+0x34c>)
    uint8_t writeMode = 0x01;
 80020ec:	f88d 9057 	strb.w	r9, [sp, #87]	; 0x57
    HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDR << 1, 0x02, 1, &writeMode, 1, 100);
 80020f0:	f002 fa98 	bl	8004624 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 80020f4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80020f8:	2106      	movs	r1, #6
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
    /* DEBUG MESSAGE BELOW */
    sprintf(x_print, "%+06d", combined_aX);
    sprintf(y_print, "%+06d", combined_aY);
    sprintf(z_print, "%+06d", combined_aZ);
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 80020fa:	f64f 78ff 	movw	r8, #65535	; 0xffff
    HAL_I2C_Mem_Read(&hi2c2, HMC5883L_ADDR << 1, 0x03, 1, compassData, 6, 100);
 80020fe:	e9cd 1c01 	strd	r1, ip, [sp, #4]
 8002102:	464b      	mov	r3, r9
 8002104:	2203      	movs	r2, #3
 8002106:	213c      	movs	r1, #60	; 0x3c
 8002108:	4898      	ldr	r0, [pc, #608]	; (800236c <accelerometerPage+0x34c>)
 800210a:	f8cd b000 	str.w	fp, [sp]
 800210e:	f002 fb3d 	bl	800478c <HAL_I2C_Mem_Read>
    const int16_t thetaX = combineUint_8ts(compassData[0], compassData[1]);
 8002112:	f8bb 3000 	ldrh.w	r3, [fp]
    sprintf(x_print, "%+06d", combined_aX);
 8002116:	9a05      	ldr	r2, [sp, #20]
 8002118:	bad9      	revsh	r1, r3
 800211a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800211e:	9113      	str	r1, [sp, #76]	; 0x4c
    const int16_t thetaY = combineUint_8ts(compassData[2], compassData[3]);
 8002120:	fa93 f9b3 	revsh.w	r9, r3
    const int16_t thetaZ = combineUint_8ts(compassData[4], compassData[5]);
 8002124:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    sprintf(x_print, "%+06d", combined_aX);
 8002128:	4638      	mov	r0, r7
 800212a:	bad9      	revsh	r1, r3
 800212c:	910f      	str	r1, [sp, #60]	; 0x3c
 800212e:	4990      	ldr	r1, [pc, #576]	; (8002370 <accelerometerPage+0x350>)
 8002130:	f003 ff02 	bl	8005f38 <siprintf>
    sprintf(y_print, "%+06d", combined_aY);
 8002134:	4652      	mov	r2, sl
 8002136:	498e      	ldr	r1, [pc, #568]	; (8002370 <accelerometerPage+0x350>)
 8002138:	4630      	mov	r0, r6
 800213a:	f003 fefd 	bl	8005f38 <siprintf>
    sprintf(z_print, "%+06d", combined_aZ);
 800213e:	9a08      	ldr	r2, [sp, #32]
 8002140:	498b      	ldr	r1, [pc, #556]	; (8002370 <accelerometerPage+0x350>)
 8002142:	4628      	mov	r0, r5
 8002144:	f003 fef8 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(20, 210, x_print, BLACK, WHITE);
 8002148:	4623      	mov	r3, r4
 800214a:	463a      	mov	r2, r7
 800214c:	21d2      	movs	r1, #210	; 0xd2
 800214e:	2014      	movs	r0, #20
 8002150:	f8cd 8000 	str.w	r8, [sp]
 8002154:	f7ff fa48 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 210, y_print, BLACK, WHITE);
 8002158:	4623      	mov	r3, r4
 800215a:	4632      	mov	r2, r6
 800215c:	21d2      	movs	r1, #210	; 0xd2
 800215e:	2050      	movs	r0, #80	; 0x50
 8002160:	f8cd 8000 	str.w	r8, [sp]
 8002164:	f7ff fa40 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 210, z_print, BLACK, WHITE);
 8002168:	4623      	mov	r3, r4
 800216a:	462a      	mov	r2, r5
 800216c:	21d2      	movs	r1, #210	; 0xd2
 800216e:	208c      	movs	r0, #140	; 0x8c
 8002170:	f8cd 8000 	str.w	r8, [sp]
 8002174:	f7ff fa38 	bl	80015e8 <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", initX_Acc_Reading);
 8002178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800217a:	497d      	ldr	r1, [pc, #500]	; (8002370 <accelerometerPage+0x350>)
 800217c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002180:	4638      	mov	r0, r7
 8002182:	f003 fed9 	bl	8005f38 <siprintf>
    sprintf(y_print, "%+06d", initY_Acc_Reading);
 8002186:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002188:	4630      	mov	r0, r6
 800218a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800218e:	4978      	ldr	r1, [pc, #480]	; (8002370 <accelerometerPage+0x350>)
 8002190:	f003 fed2 	bl	8005f38 <siprintf>
    sprintf(z_print, "%+06d", initZ_Acc_Reading);
 8002194:	9906      	ldr	r1, [sp, #24]
 8002196:	4628      	mov	r0, r5
 8002198:	f9b1 2000 	ldrsh.w	r2, [r1]
 800219c:	4974      	ldr	r1, [pc, #464]	; (8002370 <accelerometerPage+0x350>)
 800219e:	f003 fecb 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(20, 230, x_print, BLACK, WHITE);
 80021a2:	4623      	mov	r3, r4
 80021a4:	463a      	mov	r2, r7
 80021a6:	21e6      	movs	r1, #230	; 0xe6
 80021a8:	2014      	movs	r0, #20
 80021aa:	f8cd 8000 	str.w	r8, [sp]
 80021ae:	f7ff fa1b 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 230, y_print, BLACK, WHITE);
 80021b2:	4623      	mov	r3, r4
 80021b4:	4632      	mov	r2, r6
 80021b6:	21e6      	movs	r1, #230	; 0xe6
 80021b8:	2050      	movs	r0, #80	; 0x50
 80021ba:	f8cd 8000 	str.w	r8, [sp]
 80021be:	f7ff fa13 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 230, z_print, BLACK, WHITE);
 80021c2:	4623      	mov	r3, r4
 80021c4:	462a      	mov	r2, r5
 80021c6:	21e6      	movs	r1, #230	; 0xe6
 80021c8:	208c      	movs	r0, #140	; 0x8c
 80021ca:	f8cd 8000 	str.w	r8, [sp]
 80021ce:	f7ff fa0b 	bl	80015e8 <LCD_DrawString_Color>
    sprintf(x_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawX);
 80021d2:	9904      	ldr	r1, [sp, #16]
 80021d4:	4638      	mov	r0, r7
 80021d6:	f9b1 212c 	ldrsh.w	r2, [r1, #300]	; 0x12c
 80021da:	4965      	ldr	r1, [pc, #404]	; (8002370 <accelerometerPage+0x350>)
 80021dc:	f003 feac 	bl	8005f38 <siprintf>
    sprintf(y_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawY);
 80021e0:	9904      	ldr	r1, [sp, #16]
 80021e2:	4630      	mov	r0, r6
 80021e4:	f9b1 212e 	ldrsh.w	r2, [r1, #302]	; 0x12e
 80021e8:	4961      	ldr	r1, [pc, #388]	; (8002370 <accelerometerPage+0x350>)
 80021ea:	f003 fea5 	bl	8005f38 <siprintf>
    sprintf(z_print, "%+06d", accleRecord[RECORD_MAX_SIZE / 2].rawZ);
 80021ee:	9904      	ldr	r1, [sp, #16]
 80021f0:	4628      	mov	r0, r5
 80021f2:	f9b1 2130 	ldrsh.w	r2, [r1, #304]	; 0x130
 80021f6:	495e      	ldr	r1, [pc, #376]	; (8002370 <accelerometerPage+0x350>)
 80021f8:	f003 fe9e 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(20, 270, x_print, BLACK, WHITE);
 80021fc:	4623      	mov	r3, r4
 80021fe:	463a      	mov	r2, r7
 8002200:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002204:	2014      	movs	r0, #20
 8002206:	f8cd 8000 	str.w	r8, [sp]
 800220a:	f7ff f9ed 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(80, 270, y_print, BLACK, WHITE);
 800220e:	4623      	mov	r3, r4
 8002210:	4632      	mov	r2, r6
 8002212:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002216:	2050      	movs	r0, #80	; 0x50
 8002218:	f8cd 8000 	str.w	r8, [sp]
 800221c:	f7ff f9e4 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(140, 270, z_print, BLACK, WHITE);
 8002220:	4623      	mov	r3, r4
 8002222:	462a      	mov	r2, r5
 8002224:	208c      	movs	r0, #140	; 0x8c
 8002226:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800222a:	f8cd 8000 	str.w	r8, [sp]
 800222e:	f7ff f9db 	bl	80015e8 <LCD_DrawString_Color>
    /* DEBUG MESSAGE ABOVE */

    // All axes have a scale factor of 7.8
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 8002232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002234:	9805      	ldr	r0, [sp, #20]
 8002236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800223e:	2b00      	cmp	r3, #0
 8002240:	bfb8      	it	lt
 8002242:	425b      	neglt	r3, r3
 8002244:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8002248:	3301      	adds	r3, #1
 800224a:	b29b      	uxth	r3, r3
 800224c:	b292      	uxth	r2, r2
 800224e:	4293      	cmp	r3, r2
 8002250:	f0c0 8324 	bcc.w	800289c <accelerometerPage+0x87c>
 8002254:	2300      	movs	r3, #0
 8002256:	2400      	movs	r4, #0
 8002258:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 800225c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800225e:	ea8a 72ea 	eor.w	r2, sl, sl, asr #31
 8002262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002266:	eba2 72ea 	sub.w	r2, r2, sl, asr #31
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfb8      	it	lt
 800226e:	425b      	neglt	r3, r3
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 8002270:	3301      	adds	r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	b292      	uxth	r2, r2
 8002276:	4293      	cmp	r3, r2
 8002278:	f080 833a 	bcs.w	80028f0 <accelerometerPage+0x8d0>
    const double finalizedY = (abs(combined_aY) >= abs(initY_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aY *
 800227c:	4650      	mov	r0, sl
 800227e:	f7fe f92d 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 8002282:	a331      	add	r3, pc, #196	; (adr r3, 8002348 <accelerometerPage+0x328>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f992 	bl	80005b0 <__aeabi_dmul>
 800228c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 8002290:	9b06      	ldr	r3, [sp, #24]
 8002292:	9808      	ldr	r0, [sp, #32]
 8002294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002298:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800229c:	2b00      	cmp	r3, #0
 800229e:	bfb8      	it	lt
 80022a0:	425b      	neglt	r3, r3
 80022a2:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
                                                                                                        ACCELE_FACTOR)
                                                                                                     : 0.0;
 80022a6:	3301      	adds	r3, #1
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b292      	uxth	r2, r2
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f080 8324 	bcs.w	80028fa <accelerometerPage+0x8da>
    const double finalizedZ = (abs(combined_aZ) >= abs(initZ_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aZ *
 80022b2:	f7fe f913 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 80022b6:	a324      	add	r3, pc, #144	; (adr r3, 8002348 <accelerometerPage+0x328>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f978 	bl	80005b0 <__aeabi_dmul>
 80022c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sprintf(x_print, "%+0.2f", finalizedX);
 80022c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80022c8:	492a      	ldr	r1, [pc, #168]	; (8002374 <accelerometerPage+0x354>)
 80022ca:	4638      	mov	r0, r7
 80022cc:	f003 fe34 	bl	8005f38 <siprintf>
    sprintf(y_print, "%+0.2f", finalizedY);
 80022d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80022d4:	4927      	ldr	r1, [pc, #156]	; (8002374 <accelerometerPage+0x354>)
 80022d6:	4630      	mov	r0, r6
 80022d8:	f003 fe2e 	bl	8005f38 <siprintf>
    sprintf(z_print, "%+0.2f", finalizedZ);
 80022dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80022e0:	4628      	mov	r0, r5
 80022e2:	4924      	ldr	r1, [pc, #144]	; (8002374 <accelerometerPage+0x354>)
 80022e4:	f003 fe28 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(100, 100, x_print, CYAN, BLACK);
 80022e8:	2400      	movs	r4, #0
 80022ea:	2164      	movs	r1, #100	; 0x64
 80022ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80022f0:	4608      	mov	r0, r1
 80022f2:	463a      	mov	r2, r7
 80022f4:	9400      	str	r4, [sp, #0]
 80022f6:	f7ff f977 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 130, y_print, YELLOW, BLACK);
 80022fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022fe:	4632      	mov	r2, r6
 8002300:	2182      	movs	r1, #130	; 0x82
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	9400      	str	r4, [sp, #0]
 8002306:	f7ff f96f 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(100, 160, z_print, BLUE, BLACK);
 800230a:	231f      	movs	r3, #31
 800230c:	462a      	mov	r2, r5
 800230e:	21a0      	movs	r1, #160	; 0xa0
 8002310:	2064      	movs	r0, #100	; 0x64
 8002312:	9400      	str	r4, [sp, #0]
 8002314:	f7ff f968 	bl	80015e8 <LCD_DrawString_Color>
    sprintf(x_print, "%+05d", thetaX);
 8002318:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800231c:	4916      	ldr	r1, [pc, #88]	; (8002378 <accelerometerPage+0x358>)
 800231e:	4642      	mov	r2, r8
 8002320:	4638      	mov	r0, r7
 8002322:	f003 fe09 	bl	8005f38 <siprintf>
    sprintf(y_print, "%+05d", thetaY);
 8002326:	464a      	mov	r2, r9
 8002328:	4913      	ldr	r1, [pc, #76]	; (8002378 <accelerometerPage+0x358>)
 800232a:	4630      	mov	r0, r6
 800232c:	f003 fe04 	bl	8005f38 <siprintf>
    sprintf(z_print, "%+05d", thetaZ);
 8002330:	4628      	mov	r0, r5
 8002332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002334:	4910      	ldr	r1, [pc, #64]	; (8002378 <accelerometerPage+0x358>)
 8002336:	f003 fdff 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(160, 100, x_print, CYAN, BLACK);
 800233a:	463a      	mov	r2, r7
 800233c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002340:	2164      	movs	r1, #100	; 0x64
 8002342:	20a0      	movs	r0, #160	; 0xa0
 8002344:	9400      	str	r4, [sp, #0]
 8002346:	e019      	b.n	800237c <accelerometerPage+0x35c>
 8002348:	8e8a71de 	.word	0x8e8a71de
 800234c:	3f6ff2e4 	.word	0x3f6ff2e4
 8002350:	20000000 	.word	0x20000000
 8002354:	20000230 	.word	0x20000230
 8002358:	2000022c 	.word	0x2000022c
 800235c:	2000055c 	.word	0x2000055c
 8002360:	2000062c 	.word	0x2000062c
 8002364:	2000062e 	.word	0x2000062e
 8002368:	20000630 	.word	0x20000630
 800236c:	20000590 	.word	0x20000590
 8002370:	0800912c 	.word	0x0800912c
 8002374:	08009134 	.word	0x08009134
 8002378:	0800913c 	.word	0x0800913c
 800237c:	f7ff f934 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 130, y_print, YELLOW, BLACK);
 8002380:	4632      	mov	r2, r6
 8002382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002386:	2182      	movs	r1, #130	; 0x82
 8002388:	20a0      	movs	r0, #160	; 0xa0
 800238a:	9400      	str	r4, [sp, #0]
 800238c:	f7ff f92c 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color(160, 160, z_print, BLUE, BLACK);
 8002390:	21a0      	movs	r1, #160	; 0xa0
 8002392:	462a      	mov	r2, r5
 8002394:	231f      	movs	r3, #31
 8002396:	4608      	mov	r0, r1
 8002398:	9400      	str	r4, [sp, #0]
 800239a:	f7ff f925 	bl	80015e8 <LCD_DrawString_Color>
    const double angle = atan2(thetaY, thetaX) * 180 / M_PI;
 800239e:	4640      	mov	r0, r8
 80023a0:	f7fe f89c 	bl	80004dc <__aeabi_i2d>
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
 80023a8:	4648      	mov	r0, r9
 80023aa:	f7fe f897 	bl	80004dc <__aeabi_i2d>
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	f005 ffad 	bl	8008310 <atan2>
 80023b6:	2200      	movs	r2, #0
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <accelerometerPage+0x480>)
 80023ba:	f7fe f8f9 	bl	80005b0 <__aeabi_dmul>
 80023be:	a336      	add	r3, pc, #216	; (adr r3, 8002498 <accelerometerPage+0x478>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe fa1e 	bl	8000804 <__aeabi_ddiv>
 80023c8:	4605      	mov	r5, r0
 80023ca:	460c      	mov	r4, r1
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 80023cc:	f7fe fba0 	bl	8000b10 <__aeabi_d2iz>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f2c0 8297 	blt.w	8002904 <accelerometerPage+0x8e4>
 80023d6:	b284      	uxth	r4, r0
    char angle_print[8];
    sprintf(angle_print, "%03d deg", polishedAngle);
 80023d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023da:	4622      	mov	r2, r4
 80023dc:	4931      	ldr	r1, [pc, #196]	; (80024a4 <accelerometerPage+0x484>)
 80023de:	4628      	mov	r0, r5
 80023e0:	f003 fdaa 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(170, 20, angle_print, BLACK, WHITE);
 80023e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e8:	462a      	mov	r2, r5
 80023ea:	2114      	movs	r1, #20
 80023ec:	20aa      	movs	r0, #170	; 0xaa
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	f7ff f8f9 	bl	80015e8 <LCD_DrawString_Color>
    insertAngleRecord(polishedAngle);
 80023f6:	b2e0      	uxtb	r0, r4
 80023f8:	f7ff fa7a 	bl	80018f0 <insertAngleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 80023fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80023fe:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	dd05      	ble.n	8002412 <accelerometerPage+0x3f2>
        shiftAcceleRecord();
 8002406:	f7ff fa57 	bl	80018b8 <shiftAcceleRecord>
    while (acceleRecordSize > RECORD_MAX_SIZE) {
 800240a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	dcf9      	bgt.n	8002406 <accelerometerPage+0x3e6>
    insertAcceleRecord(combined_aX, combined_aY, combined_aZ);
    //if(isRotating() == 1)
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
    char dis_print[10] = "";
 8002412:	2400      	movs	r4, #0
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8002414:	9909      	ldr	r1, [sp, #36]	; 0x24
    accleRecord[acceleRecordSize].rawX = rawX;
 8002416:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 800241a:	3301      	adds	r3, #1
 800241c:	800b      	strh	r3, [r1, #0]
    accleRecord[acceleRecordSize].rawX = rawX;
 800241e:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8002422:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
 8002426:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 800242a:	9a08      	ldr	r2, [sp, #32]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 800242c:	4651      	mov	r1, sl
    accleRecord[acceleRecordSize].rawY = rawY;
 800242e:	f8a3 a002 	strh.w	sl, [r3, #2]
    accleRecord[acceleRecordSize++].rawZ = rawZ;
 8002432:	809a      	strh	r2, [r3, #4]
    updateDistance(combined_aX, combined_aY, combined_aZ); //take in the most recent n entries for average calculation
 8002434:	f7ff fa84 	bl	8001940 <updateDistance>
    sprintf(dis_print, "%05lu", distanceTraveled);
 8002438:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800243a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800243c:	4628      	mov	r0, r5
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4919      	ldr	r1, [pc, #100]	; (80024a8 <accelerometerPage+0x488>)
    char dis_print[10] = "";
 8002442:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002446:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
    sprintf(dis_print, "%05lu", distanceTraveled);
 800244a:	f003 fd75 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(100, 190, dis_print, WHITE, BLACK);
 800244e:	462a      	mov	r2, r5
 8002450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002454:	21be      	movs	r1, #190	; 0xbe
 8002456:	2064      	movs	r0, #100	; 0x64
 8002458:	9400      	str	r4, [sp, #0]
 800245a:	f7ff f8c5 	bl	80015e8 <LCD_DrawString_Color>
    sprintf(dis_print, "%0.3f", actualDistance);
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <accelerometerPage+0x48c>)
 8002460:	4628      	mov	r0, r5
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	4912      	ldr	r1, [pc, #72]	; (80024b0 <accelerometerPage+0x490>)
 8002468:	f003 fd66 	bl	8005f38 <siprintf>
    LCD_DrawString_Color(160, 190, dis_print, WHITE, BLACK);
 800246c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002470:	462a      	mov	r2, r5
 8002472:	21be      	movs	r1, #190	; 0xbe
 8002474:	20a0      	movs	r0, #160	; 0xa0
 8002476:	9400      	str	r4, [sp, #0]
 8002478:	f7ff f8b6 	bl	80015e8 <LCD_DrawString_Color>
    HAL_Delay(10);
 800247c:	200a      	movs	r0, #10
 800247e:	f001 f8e5 	bl	800364c <HAL_Delay>
    free(acceleromterData);
 8002482:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002484:	f002 ffe2 	bl	800544c <free>
    free(compassData);
 8002488:	4658      	mov	r0, fp
}
 800248a:	b02b      	add	sp, #172	; 0xac
 800248c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    free(compassData);
 8002490:	f002 bfdc 	b.w	800544c <free>
 8002494:	f3af 8000 	nop.w
 8002498:	54442d18 	.word	0x54442d18
 800249c:	400921fb 	.word	0x400921fb
 80024a0:	40668000 	.word	0x40668000
 80024a4:	08009144 	.word	0x08009144
 80024a8:	08009150 	.word	0x08009150
 80024ac:	20000488 	.word	0x20000488
 80024b0:	08009158 	.word	0x08009158
        accleRecord[i].rawX = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4bd5      	ldr	r3, [pc, #852]	; (800280c <accelerometerPage+0x7ec>)
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80024be:	801c      	strh	r4, [r3, #0]
        accleRecord[i].rawY = 0;
 80024c0:	805c      	strh	r4, [r3, #2]
        accleRecord[i].rawZ = 0;
 80024c2:	809c      	strh	r4, [r3, #4]
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 80024c4:	3306      	adds	r3, #6
 80024c6:	429a      	cmp	r2, r3
        accleRecord[i].rawX = 0;
 80024c8:	f04f 0500 	mov.w	r5, #0
    for (short i = 0; i < RECORD_MAX_SIZE; ++i) {
 80024cc:	d1f7      	bne.n	80024be <accelerometerPage+0x49e>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80024ce:	2701      	movs	r7, #1
 80024d0:	2664      	movs	r6, #100	; 0x64
    acceleRecordSize = 0;
 80024d2:	4bcf      	ldr	r3, [pc, #828]	; (8002810 <accelerometerPage+0x7f0>)
        angleRecord[i] = 0;
 80024d4:	22c8      	movs	r2, #200	; 0xc8
    acceleRecordSize = 0;
 80024d6:	801c      	strh	r4, [r3, #0]
 80024d8:	9309      	str	r3, [sp, #36]	; 0x24
    distanceTraveled = 0;
 80024da:	4bce      	ldr	r3, [pc, #824]	; (8002814 <accelerometerPage+0x7f4>)
        angleRecord[i] = 0;
 80024dc:	2100      	movs	r1, #0
 80024de:	48ce      	ldr	r0, [pc, #824]	; (8002818 <accelerometerPage+0x7f8>)
    distanceTraveled = 0;
 80024e0:	930e      	str	r3, [sp, #56]	; 0x38
 80024e2:	601c      	str	r4, [r3, #0]
        angleRecord[i] = 0;
 80024e4:	f002 ffd4 	bl	8005490 <memset>
    angleRecordSize = 0;
 80024e8:	4bcc      	ldr	r3, [pc, #816]	; (800281c <accelerometerPage+0x7fc>)
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80024ea:	f10d 0857 	add.w	r8, sp, #87	; 0x57
 80024ee:	222d      	movs	r2, #45	; 0x2d
 80024f0:	213a      	movs	r1, #58	; 0x3a
 80024f2:	f8cd 8000 	str.w	r8, [sp]
 80024f6:	48ca      	ldr	r0, [pc, #808]	; (8002820 <accelerometerPage+0x800>)
    angleRecordSize = 0;
 80024f8:	801c      	strh	r4, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 80024fa:	463b      	mov	r3, r7
 80024fc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002500:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        uint8_t setPWLMode = 0x00; //reset accelerometer
 8002504:	f88d 5057 	strb.w	r5, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002508:	f002 f88c 	bl	8004624 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800250c:	4630      	mov	r0, r6
 800250e:	f001 f89d 	bl	800364c <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 8002512:	2308      	movs	r3, #8
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002514:	f8cd 8000 	str.w	r8, [sp]
        uint8_t formatting = 0x05; // full res +-4g
 8002518:	f04f 0805 	mov.w	r8, #5
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800251c:	222d      	movs	r2, #45	; 0x2d
 800251e:	213a      	movs	r1, #58	; 0x3a
        setPWLMode = 0x08; //disable auto sleep, always measure
 8002520:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x2D, 1, &setPWLMode, 1, 100);
 8002524:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002528:	463b      	mov	r3, r7
 800252a:	48bd      	ldr	r0, [pc, #756]	; (8002820 <accelerometerPage+0x800>)
 800252c:	f002 f87a 	bl	8004624 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 8002530:	ab16      	add	r3, sp, #88	; 0x58
 8002532:	2231      	movs	r2, #49	; 0x31
 8002534:	213a      	movs	r1, #58	; 0x3a
 8002536:	9310      	str	r3, [sp, #64]	; 0x40
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800253e:	463b      	mov	r3, r7
 8002540:	48b7      	ldr	r0, [pc, #732]	; (8002820 <accelerometerPage+0x800>)
        uint8_t formatting = 0x05; // full res +-4g
 8002542:	f88d 8058 	strb.w	r8, [sp, #88]	; 0x58
        HAL_I2C_Mem_Write(&hi2c2, ADXL_ADDR << 1, 0x31, 1, &formatting, 1, 100);
 8002546:	f002 f86d 	bl	8004624 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 800254a:	ab18      	add	r3, sp, #96	; 0x60
 800254c:	2200      	movs	r2, #0
 800254e:	213a      	movs	r1, #58	; 0x3a
 8002550:	9311      	str	r3, [sp, #68]	; 0x44
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002558:	463b      	mov	r3, r7
 800255a:	48b1      	ldr	r0, [pc, #708]	; (8002820 <accelerometerPage+0x800>)
        uint8_t debug = 0x00;
 800255c:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
        HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x00, 1, &debug, 1, 100);
 8002560:	f002 f914 	bl	800478c <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002564:	2100      	movs	r1, #0
 8002566:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800256a:	4608      	mov	r0, r1
 800256c:	22f0      	movs	r2, #240	; 0xf0
 800256e:	9400      	str	r4, [sp, #0]
 8002570:	f7fe ff4c 	bl	800140c <LCD_Clear>
        HAL_Delay(100);
 8002574:	4630      	mov	r0, r6
 8002576:	f001 f869 	bl	800364c <HAL_Delay>
        if (debug != 0xE5) {
 800257a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800257e:	2be5      	cmp	r3, #229	; 0xe5
 8002580:	f040 8196 	bne.w	80028b0 <accelerometerPage+0x890>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8002584:	230a      	movs	r3, #10
 8002586:	4631      	mov	r1, r6
 8002588:	4aa6      	ldr	r2, [pc, #664]	; (8002824 <accelerometerPage+0x804>)
 800258a:	2000      	movs	r0, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	9400      	str	r4, [sp, #0]
 8002590:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002594:	f7ff f850 	bl	8001638 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 8002598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800259c:	f001 f856 	bl	800364c <HAL_Delay>
        LCD_Clear(0, 0, 240, 320, BLACK);
 80025a0:	2100      	movs	r1, #0
 80025a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025a6:	4608      	mov	r0, r1
 80025a8:	22f0      	movs	r2, #240	; 0xf0
 80025aa:	9400      	str	r4, [sp, #0]
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 80025ac:	4689      	mov	r9, r1
        LCD_Clear(0, 0, 240, 320, BLACK);
 80025ae:	f7fe ff2d 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color(80, 100, output_text, RED, WHITE);
 80025b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b6:	f04f 0832 	mov.w	r8, #50	; 0x32
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4631      	mov	r1, r6
 80025be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025c2:	2050      	movs	r0, #80	; 0x50
 80025c4:	4a98      	ldr	r2, [pc, #608]	; (8002828 <accelerometerPage+0x808>)
 80025c6:	f7ff f80f 	bl	80015e8 <LCD_DrawString_Color>
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 80025ca:	4643      	mov	r3, r8
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80025cc:	f04f 0b06 	mov.w	fp, #6
        int32_t accumX = 0, accumY = 0, accumZ = 0;
 80025d0:	46ca      	mov	sl, r9
 80025d2:	46c8      	mov	r8, r9
 80025d4:	461d      	mov	r5, r3
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 80025d6:	4f92      	ldr	r7, [pc, #584]	; (8002820 <accelerometerPage+0x800>)
            uint8_t *arrayOfData = malloc(6 * sizeof(uint8_t));
 80025d8:	2006      	movs	r0, #6
 80025da:	f002 ff2f 	bl	800543c <malloc>
 80025de:	4604      	mov	r4, r0
            HAL_I2C_Mem_Read(&hi2c2, ADXL_ADDR << 1, 0x32, 1, arrayOfData, 6, 100);
 80025e0:	2232      	movs	r2, #50	; 0x32
 80025e2:	213a      	movs	r1, #58	; 0x3a
 80025e4:	2301      	movs	r3, #1
 80025e6:	4638      	mov	r0, r7
 80025e8:	e9cd b601 	strd	fp, r6, [sp, #4]
 80025ec:	9400      	str	r4, [sp, #0]
 80025ee:	f002 f8cd 	bl	800478c <HAL_I2C_Mem_Read>
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80025f2:	f9b4 3000 	ldrsh.w	r3, [r4]
            free(arrayOfData);
 80025f6:	4620      	mov	r0, r4
            accumX += combineUint_8ts(arrayOfData[1], arrayOfData[0]) >> 5;
 80025f8:	eb08 1863 	add.w	r8, r8, r3, asr #5
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 80025fc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        for (short i = 0; i < 50; ++i) {
 8002600:	3d01      	subs	r5, #1
            accumY += combineUint_8ts(arrayOfData[3], arrayOfData[2]) >> 5;
 8002602:	eb0a 1a63 	add.w	sl, sl, r3, asr #5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 8002606:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        for (short i = 0; i < 50; ++i) {
 800260a:	b2ad      	uxth	r5, r5
            accumZ += combineUint_8ts(arrayOfData[5], arrayOfData[4]) >> 5;
 800260c:	eb09 1963 	add.w	r9, r9, r3, asr #5
            free(arrayOfData);
 8002610:	f002 ff1c 	bl	800544c <free>
            HAL_Delay(10);
 8002614:	200a      	movs	r0, #10
 8002616:	f001 f819 	bl	800364c <HAL_Delay>
        for (short i = 0; i < 50; ++i) {
 800261a:	2d00      	cmp	r5, #0
 800261c:	d1dc      	bne.n	80025d8 <accelerometerPage+0x5b8>
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 800261e:	462b      	mov	r3, r5
 8002620:	4645      	mov	r5, r8
 8002622:	4628      	mov	r0, r5
 8002624:	4698      	mov	r8, r3
 8002626:	f7fd ff59 	bl	80004dc <__aeabi_i2d>
 800262a:	4b80      	ldr	r3, [pc, #512]	; (800282c <accelerometerPage+0x80c>)
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800262c:	4a80      	ldr	r2, [pc, #512]	; (8002830 <accelerometerPage+0x810>)
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 800262e:	4c81      	ldr	r4, [pc, #516]	; (8002834 <accelerometerPage+0x814>)
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002630:	930a      	str	r3, [sp, #40]	; 0x28
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002632:	920c      	str	r2, [sp, #48]	; 0x30
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002634:	ab1c      	add	r3, sp, #112	; 0x70
 8002636:	aa21      	add	r2, sp, #132	; 0x84
 8002638:	9305      	str	r3, [sp, #20]
 800263a:	9208      	str	r2, [sp, #32]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <accelerometerPage+0x818>)
 800263e:	2200      	movs	r2, #0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002640:	9406      	str	r4, [sp, #24]
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002642:	f7fe f8df 	bl	8000804 <__aeabi_ddiv>
 8002646:	f005 fde3 	bl	8008210 <floor>
 800264a:	f7fe fa61 	bl	8000b10 <__aeabi_d2iz>
 800264e:	4603      	mov	r3, r0
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002650:	4650      	mov	r0, sl
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002652:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800282c <accelerometerPage+0x80c>
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 8002656:	af1b      	add	r7, sp, #108	; 0x6c
        initX_Acc_Reading = (int16_t) floor((double) accumX / 50);
 8002658:	f8aa 3000 	strh.w	r3, [sl]
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800265c:	f7fd ff3e 	bl	80004dc <__aeabi_i2d>
 8002660:	2200      	movs	r2, #0
 8002662:	4b75      	ldr	r3, [pc, #468]	; (8002838 <accelerometerPage+0x818>)
 8002664:	f7fe f8ce 	bl	8000804 <__aeabi_ddiv>
 8002668:	f005 fdd2 	bl	8008210 <floor>
 800266c:	f7fe fa50 	bl	8000b10 <__aeabi_d2iz>
 8002670:	4603      	mov	r3, r0
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002672:	4648      	mov	r0, r9
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 8002674:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002830 <accelerometerPage+0x810>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 8002678:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
        initY_Acc_Reading = (int16_t) floor((double) accumY / 50);
 800267c:	f8a9 3000 	strh.w	r3, [r9]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 8002680:	f7fd ff2c 	bl	80004dc <__aeabi_i2d>
 8002684:	2200      	movs	r2, #0
 8002686:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <accelerometerPage+0x818>)
 8002688:	f7fe f8bc 	bl	8000804 <__aeabi_ddiv>
 800268c:	f005 fdc0 	bl	8008210 <floor>
 8002690:	f7fe fa3e 	bl	8000b10 <__aeabi_d2iz>
 8002694:	4967      	ldr	r1, [pc, #412]	; (8002834 <accelerometerPage+0x814>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002696:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800269a:	22f0      	movs	r2, #240	; 0xf0
 800269c:	f8cd 8000 	str.w	r8, [sp]
        initZ_Acc_Reading = (int16_t) floor((double) accumZ / 50);
 80026a0:	8008      	strh	r0, [r1, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80026a2:	4641      	mov	r1, r8
 80026a4:	4640      	mov	r0, r8
 80026a6:	f7fe feb1 	bl	800140c <LCD_Clear>
        initializeHMC5883L();
 80026aa:	f7ff fb75 	bl	8001d98 <initializeHMC5883L>
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 80026ae:	200a      	movs	r0, #10
 80026b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026b4:	2164      	movs	r1, #100	; 0x64
 80026b6:	e9cd 8000 	strd	r8, r0, [sp]
 80026ba:	4a60      	ldr	r2, [pc, #384]	; (800283c <accelerometerPage+0x81c>)
 80026bc:	4640      	mov	r0, r8
 80026be:	f7fe ffbb 	bl	8001638 <LCD_DrawString_Color_With_Delay>
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80026c2:	9b05      	ldr	r3, [sp, #20]
 80026c4:	9a08      	ldr	r2, [sp, #32]
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 80026c6:	ae20      	add	r6, sp, #128	; 0x80
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80026c8:	e9cd 881b 	strd	r8, r8, [sp, #108]	; 0x6c
 80026cc:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
 80026d0:	e9c3 8801 	strd	r8, r8, [r3, #4]
 80026d4:	f8c3 800c 	str.w	r8, [r3, #12]
 80026d8:	e9cd 8825 	strd	r8, r8, [sp, #148]	; 0x94
 80026dc:	e9c2 8801 	strd	r8, r8, [r2, #4]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80026e0:	4957      	ldr	r1, [pc, #348]	; (8002840 <accelerometerPage+0x820>)
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80026e2:	f8c2 800c 	str.w	r8, [r2, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80026e6:	4638      	mov	r0, r7
 80026e8:	f9ba 2000 	ldrsh.w	r2, [sl]
        char x_debug[20] = "", y_debug[20] = "", z_debug[20] = "";
 80026ec:	e9cb 8801 	strd	r8, r8, [fp, #4]
 80026f0:	f8cb 800c 	str.w	r8, [fp, #12]
        sprintf(x_debug, "%05d", initX_Acc_Reading);
 80026f4:	f003 fc20 	bl	8005f38 <siprintf>
        sprintf(y_debug, "%05d", initY_Acc_Reading);
 80026f8:	f9b9 2000 	ldrsh.w	r2, [r9]
 80026fc:	4950      	ldr	r1, [pc, #320]	; (8002840 <accelerometerPage+0x820>)
 80026fe:	4630      	mov	r0, r6
 8002700:	f003 fc1a 	bl	8005f38 <siprintf>
        sprintf(z_debug, "%05d", initZ_Acc_Reading);
 8002704:	9906      	ldr	r1, [sp, #24]
 8002706:	ad25      	add	r5, sp, #148	; 0x94
 8002708:	f9b1 2000 	ldrsh.w	r2, [r1]
 800270c:	4628      	mov	r0, r5
 800270e:	494c      	ldr	r1, [pc, #304]	; (8002840 <accelerometerPage+0x820>)
 8002710:	f003 fc12 	bl	8005f38 <siprintf>
        strcat(x_debug, "  x");
 8002714:	4638      	mov	r0, r7
 8002716:	f7fd fd87 	bl	8000228 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	4a49      	ldr	r2, [pc, #292]	; (8002844 <accelerometerPage+0x824>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 800271e:	f64f 74ff 	movw	r4, #65535	; 0xffff
        strcat(x_debug, "  x");
 8002722:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8002724:	f04f 090a 	mov.w	r9, #10
        strcat(x_debug, "  x");
 8002728:	50f8      	str	r0, [r7, r3]
        strcat(y_debug, "  y");
 800272a:	4630      	mov	r0, r6
 800272c:	f7fd fd7c 	bl	8000228 <strlen>
 8002730:	4603      	mov	r3, r0
 8002732:	4a45      	ldr	r2, [pc, #276]	; (8002848 <accelerometerPage+0x828>)
 8002734:	6810      	ldr	r0, [r2, #0]
 8002736:	50f0      	str	r0, [r6, r3]
        strcat(z_debug, "  z");
 8002738:	4628      	mov	r0, r5
 800273a:	f7fd fd75 	bl	8000228 <strlen>
 800273e:	4603      	mov	r3, r0
 8002740:	4a42      	ldr	r2, [pc, #264]	; (800284c <accelerometerPage+0x82c>)
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002742:	218c      	movs	r1, #140	; 0x8c
        strcat(z_debug, "  z");
 8002744:	6810      	ldr	r0, [r2, #0]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 8002746:	9400      	str	r4, [sp, #0]
 8002748:	463a      	mov	r2, r7
        strcat(z_debug, "  z");
 800274a:	50e8      	str	r0, [r5, r3]
        LCD_DrawString_Color(60, 140, x_debug, BLACK, WHITE);
 800274c:	4643      	mov	r3, r8
 800274e:	203c      	movs	r0, #60	; 0x3c
 8002750:	f7fe ff4a 	bl	80015e8 <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 160, y_debug, BLACK, WHITE);
 8002754:	4643      	mov	r3, r8
 8002756:	4632      	mov	r2, r6
 8002758:	21a0      	movs	r1, #160	; 0xa0
 800275a:	203c      	movs	r0, #60	; 0x3c
 800275c:	9400      	str	r4, [sp, #0]
 800275e:	f7fe ff43 	bl	80015e8 <LCD_DrawString_Color>
        LCD_DrawString_Color(60, 180, z_debug, BLACK, WHITE);
 8002762:	4643      	mov	r3, r8
 8002764:	462a      	mov	r2, r5
 8002766:	21b4      	movs	r1, #180	; 0xb4
 8002768:	203c      	movs	r0, #60	; 0x3c
 800276a:	9400      	str	r4, [sp, #0]
 800276c:	f7fe ff3c 	bl	80015e8 <LCD_DrawString_Color>
        HAL_Delay(1500);
 8002770:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002774:	f000 ff6a 	bl	800364c <HAL_Delay>
        currentPage = accelerometer;
 8002778:	2202      	movs	r2, #2
        changingPage = 0;
 800277a:	4b35      	ldr	r3, [pc, #212]	; (8002850 <accelerometerPage+0x830>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 800277c:	4641      	mov	r1, r8
        changingPage = 0;
 800277e:	f8c3 8000 	str.w	r8, [r3]
        currentPage = accelerometer;
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <accelerometerPage+0x834>)
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002784:	4640      	mov	r0, r8
 8002786:	f8cd 8000 	str.w	r8, [sp]
        currentPage = accelerometer;
 800278a:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 800278c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002790:	22f0      	movs	r2, #240	; 0xf0
 8002792:	f7fe fe3b 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8002796:	231f      	movs	r3, #31
 8002798:	2128      	movs	r1, #40	; 0x28
 800279a:	4648      	mov	r0, r9
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <accelerometerPage+0x838>)
 800279e:	e9cd 4900 	strd	r4, r9, [sp]
 80027a2:	f7fe ff49 	bl	8001638 <LCD_DrawString_Color_With_Delay>
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 80027a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80027aa:	2282      	movs	r2, #130	; 0x82
 80027ac:	f44f 718c 	mov.w	r1, #280	; 0x118
 80027b0:	2014      	movs	r0, #20
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2319      	movs	r3, #25
 80027b6:	f7fe fe29 	bl	800140c <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 80027ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80027be:	f240 111d 	movw	r1, #285	; 0x11d
 80027c2:	4a26      	ldr	r2, [pc, #152]	; (800285c <accelerometerPage+0x83c>)
 80027c4:	201e      	movs	r0, #30
 80027c6:	e9cd 8900 	strd	r8, r9, [sp]
 80027ca:	f7fe ff35 	bl	8001638 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(20);
 80027ce:	2014      	movs	r0, #20
 80027d0:	f000 ff3c 	bl	800364c <HAL_Delay>
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 80027d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	2028      	movs	r0, #40	; 0x28
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <accelerometerPage+0x840>)
 80027de:	f8cd 8000 	str.w	r8, [sp]
 80027e2:	f7fe ff01 	bl	80015e8 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 80027e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027ea:	2182      	movs	r1, #130	; 0x82
 80027ec:	2028      	movs	r0, #40	; 0x28
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <accelerometerPage+0x844>)
 80027f0:	f8cd 8000 	str.w	r8, [sp]
 80027f4:	f7fe fef8 	bl	80015e8 <LCD_DrawString_Color>
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 80027f8:	231f      	movs	r3, #31
 80027fa:	21a0      	movs	r1, #160	; 0xa0
 80027fc:	2028      	movs	r0, #40	; 0x28
 80027fe:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <accelerometerPage+0x848>)
 8002800:	f8cd 8000 	str.w	r8, [sp]
 8002804:	f7fe fef0 	bl	80015e8 <LCD_DrawString_Color>
 8002808:	e030      	b.n	800286c <accelerometerPage+0x84c>
 800280a:	bf00      	nop
 800280c:	20000230 	.word	0x20000230
 8002810:	2000022c 	.word	0x2000022c
 8002814:	2000055c 	.word	0x2000055c
 8002818:	20000490 	.word	0x20000490
 800281c:	20000558 	.word	0x20000558
 8002820:	20000590 	.word	0x20000590
 8002824:	08009078 	.word	0x08009078
 8002828:	080090a8 	.word	0x080090a8
 800282c:	2000062c 	.word	0x2000062c
 8002830:	2000062e 	.word	0x2000062e
 8002834:	20000630 	.word	0x20000630
 8002838:	40490000 	.word	0x40490000
 800283c:	080090b8 	.word	0x080090b8
 8002840:	080090dc 	.word	0x080090dc
 8002844:	080090e4 	.word	0x080090e4
 8002848:	080090e8 	.word	0x080090e8
 800284c:	080090ec 	.word	0x080090ec
 8002850:	20000000 	.word	0x20000000
 8002854:	2000055a 	.word	0x2000055a
 8002858:	080090f0 	.word	0x080090f0
 800285c:	08008fe8 	.word	0x08008fe8
 8002860:	0800910c 	.word	0x0800910c
 8002864:	08009110 	.word	0x08009110
 8002868:	08009114 	.word	0x08009114
        LCD_DrawString_Color(25, 190, output_text, WHITE, BLACK);
 800286c:	4623      	mov	r3, r4
 800286e:	21be      	movs	r1, #190	; 0xbe
 8002870:	2019      	movs	r0, #25
 8002872:	4a2b      	ldr	r2, [pc, #172]	; (8002920 <accelerometerPage+0x900>)
 8002874:	f8cd 8000 	str.w	r8, [sp]
 8002878:	f7fe feb6 	bl	80015e8 <LCD_DrawString_Color>
        if (debug != 0xE5) {
 800287c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002880:	2be5      	cmp	r3, #229	; 0xe5
 8002882:	f43f abf1 	beq.w	8002068 <accelerometerPage+0x48>
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 8002886:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800288a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800288e:	208c      	movs	r0, #140	; 0x8c
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <accelerometerPage+0x904>)
 8002892:	9400      	str	r4, [sp, #0]
 8002894:	f7fe fea8 	bl	80015e8 <LCD_DrawString_Color>
 8002898:	f7ff bbe6 	b.w	8002068 <accelerometerPage+0x48>
    const double finalizedX = (abs(combined_aX) >= abs(initX_Acc_Reading) + ACCELE_ACCEPTABLE_ERROR) ? (combined_aX *
 800289c:	f7fd fe1e 	bl	80004dc <__aeabi_i2d>
                                                                                                     : 0.0;
 80028a0:	a31d      	add	r3, pc, #116	; (adr r3, 8002918 <accelerometerPage+0x8f8>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fe83 	bl	80005b0 <__aeabi_dmul>
 80028aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80028ae:	e4d5      	b.n	800225c <accelerometerPage+0x23c>
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 80028b0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028b4:	4631      	mov	r1, r6
 80028b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028ba:	2032      	movs	r0, #50	; 0x32
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <accelerometerPage+0x908>)
 80028be:	f8cd 8004 	str.w	r8, [sp, #4]
 80028c2:	9400      	str	r4, [sp, #0]
 80028c4:	f7fe feb8 	bl	8001638 <LCD_DrawString_Color_With_Delay>
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 80028c8:	2300      	movs	r3, #0
 80028ca:	2003      	movs	r0, #3
 80028cc:	2196      	movs	r1, #150	; 0x96
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <accelerometerPage+0x90c>)
 80028d0:	9001      	str	r0, [sp, #4]
 80028d2:	9400      	str	r4, [sp, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe feaf 	bl	8001638 <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 80028da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028de:	f000 feb5 	bl	800364c <HAL_Delay>
            currentPage = home;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <accelerometerPage+0x910>)
            changingPage = 1;
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <accelerometerPage+0x914>)
            currentPage = home;
 80028e6:	701d      	strb	r5, [r3, #0]
            changingPage = 1;
 80028e8:	6017      	str	r7, [r2, #0]
}
 80028ea:	b02b      	add	sp, #172	; 0xac
 80028ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                                                                                     : 0.0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	2400      	movs	r4, #0
 80028f4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80028f8:	e4ca      	b.n	8002290 <accelerometerPage+0x270>
                                                                                                     : 0.0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	2400      	movs	r4, #0
 80028fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002902:	e4df      	b.n	80022c4 <accelerometerPage+0x2a4>
    const uint16_t polishedAngle = (int) angle < 0 ? 360 - (int) fabs(angle) : (int) angle;
 8002904:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 8002908:	4628      	mov	r0, r5
 800290a:	f7fe f901 	bl	8000b10 <__aeabi_d2iz>
 800290e:	f5c0 74b4 	rsb	r4, r0, #360	; 0x168
 8002912:	b2a4      	uxth	r4, r4
 8002914:	e560      	b.n	80023d8 <accelerometerPage+0x3b8>
 8002916:	bf00      	nop
 8002918:	8e8a71de 	.word	0x8e8a71de
 800291c:	3f6ff2e4 	.word	0x3f6ff2e4
 8002920:	08009118 	.word	0x08009118
 8002924:	08009120 	.word	0x08009120
 8002928:	08009034 	.word	0x08009034
 800292c:	08009048 	.word	0x08009048
 8002930:	2000055a 	.word	0x2000055a
 8002934:	20000000 	.word	0x20000000

08002938 <SystemClock_Config>:
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002938:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 800293a:	b510      	push	{r4, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293c:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800293e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002942:	2402      	movs	r4, #2
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002944:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 8002948:	b096      	sub	sp, #88	; 0x58
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800294a:	900c      	str	r0, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800294c:	9010      	str	r0, [sp, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800294e:	a80c      	add	r0, sp, #48	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002950:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002954:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002958:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800295c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002964:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002968:	9115      	str	r1, [sp, #84]	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296a:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800296c:	9301      	str	r3, [sp, #4]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296e:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002970:	920d      	str	r2, [sp, #52]	; 0x34
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002972:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002974:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002976:	f002 f895 	bl	8004aa4 <HAL_RCC_OscConfig>
 800297a:	b108      	cbz	r0, 8002980 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
  */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800297e:	e7fe      	b.n	800297e <SystemClock_Config+0x46>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002980:	4603      	mov	r3, r0
 8002982:	220f      	movs	r2, #15
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002984:	e9cd 4302 	strd	r4, r3, [sp, #8]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002988:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800298a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800298e:	4621      	mov	r1, r4
 8002990:	a801      	add	r0, sp, #4
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002992:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002994:	9201      	str	r2, [sp, #4]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002996:	f002 fab1 	bl	8004efc <HAL_RCC_ClockConfig>
 800299a:	b108      	cbz	r0, 80029a0 <SystemClock_Config+0x68>
 800299c:	b672      	cpsid	i
    while (1) {
 800299e:	e7fe      	b.n	800299e <SystemClock_Config+0x66>
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80029a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80029a4:	a806      	add	r0, sp, #24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029a6:	9406      	str	r4, [sp, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80029a8:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80029aa:	f002 fb67 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	b108      	cbz	r0, 80029b4 <SystemClock_Config+0x7c>
 80029b0:	b672      	cpsid	i
    while (1) {
 80029b2:	e7fe      	b.n	80029b2 <SystemClock_Config+0x7a>
}
 80029b4:	b016      	add	sp, #88	; 0x58
 80029b6:	bd10      	pop	{r4, pc}

080029b8 <main>:
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	2400      	movs	r4, #0
int main(void) {
 80029ba:	b580      	push	{r7, lr}
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029bc:	2710      	movs	r7, #16
int main(void) {
 80029be:	b08e      	sub	sp, #56	; 0x38
    HAL_Init();
 80029c0:	f000 fe20 	bl	8003604 <HAL_Init>
    SystemClock_Config();
 80029c4:	f7ff ffb8 	bl	8002938 <SystemClock_Config>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80029cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d0:	4ba4      	ldr	r3, [pc, #656]	; (8002c64 <main+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2501      	movs	r5, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80029d6:	2107      	movs	r1, #7
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029dc:	619a      	str	r2, [r3, #24]
 80029de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80029e0:	48a1      	ldr	r0, [pc, #644]	; (8002c68 <main+0x2b0>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80029e6:	9202      	str	r2, [sp, #8]
 80029e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ec:	2603      	movs	r6, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	433a      	orrs	r2, r7
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	403a      	ands	r2, r7
 80029f6:	9203      	str	r2, [sp, #12]
 80029f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	619a      	str	r2, [r3, #24]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	f002 0204 	and.w	r2, r2, #4
 8002a08:	9204      	str	r2, [sp, #16]
 8002a0a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	f002 0208 	and.w	r2, r2, #8
 8002a1a:	9205      	str	r2, [sp, #20]
 8002a1c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8002a28:	4622      	mov	r2, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	9306      	str	r3, [sp, #24]
 8002a30:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8002a32:	f001 fb0d 	bl	8004050 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a36:	4622      	mov	r2, r4
 8002a38:	4639      	mov	r1, r7
 8002a3a:	488c      	ldr	r0, [pc, #560]	; (8002c6c <main+0x2b4>)
 8002a3c:	f001 fb08 	bl	8004050 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 8002a40:	2123      	movs	r1, #35	; 0x23
 8002a42:	462a      	mov	r2, r5
 8002a44:	488a      	ldr	r0, [pc, #552]	; (8002c70 <main+0x2b8>)
 8002a46:	f001 fb03 	bl	8004050 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002a50:	4888      	ldr	r0, [pc, #544]	; (8002c74 <main+0x2bc>)
 8002a52:	f001 fafd 	bl	8004050 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8002a56:	4622      	mov	r2, r4
 8002a58:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a5c:	4886      	ldr	r0, [pc, #536]	; (8002c78 <main+0x2c0>)
 8002a5e:	f001 faf7 	bl	8004050 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8002a62:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a64:	4880      	ldr	r0, [pc, #512]	; (8002c68 <main+0x2b0>)
 8002a66:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1;
 8002a68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a6e:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a70:	f001 f9c0 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a74:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a76:	487c      	ldr	r0, [pc, #496]	; (8002c68 <main+0x2b0>)
 8002a78:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a7a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a80:	f001 f9b8 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a84:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <main+0x2c4>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a86:	4878      	ldr	r0, [pc, #480]	; (8002c68 <main+0x2b0>)
 8002a88:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a8a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a8c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a90:	f001 f9b0 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	4877      	ldr	r0, [pc, #476]	; (8002c78 <main+0x2c0>)
 8002a9a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a9c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f001 f9a7 	bl	8003df4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	4871      	ldr	r0, [pc, #452]	; (8002c6c <main+0x2b4>)
 8002aa8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aaa:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f001 f9a0 	bl	8003df4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	486d      	ldr	r0, [pc, #436]	; (8002c6c <main+0x2b4>)
 8002ab6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab8:	e9cd 7507 	strd	r7, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abc:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f001 f998 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8002ac4:	2323      	movs	r3, #35	; 0x23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac6:	486a      	ldr	r0, [pc, #424]	; (8002c70 <main+0x2b8>)
 8002ac8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5;
 8002aca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f001 f98f 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8002ad6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ada:	4866      	ldr	r0, [pc, #408]	; (8002c74 <main+0x2bc>)
 8002adc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8002ade:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	e9cd 5408 	strd	r5, r4, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae4:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae6:	f001 f985 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8002aea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002aee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af2:	4861      	ldr	r0, [pc, #388]	; (8002c78 <main+0x2c0>)
 8002af4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afc:	f001 f97a 	bl	8003df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b00:	4622      	mov	r2, r4
 8002b02:	4621      	mov	r1, r4
 8002b04:	200a      	movs	r0, #10
 8002b06:	f001 f911 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b0a:	200a      	movs	r0, #10
 8002b0c:	f001 f94c 	bl	8003da8 <HAL_NVIC_EnableIRQ>
    Timing.AddressSetupTime = 15;
 8002b10:	230f      	movs	r3, #15
    Timing.DataSetupTime = 255;
 8002b12:	20ff      	movs	r0, #255	; 0xff
    Timing.AddressHoldTime = 15;
 8002b14:	e9cd 3307 	strd	r3, r3, [sp, #28]
    Timing.BusTurnAroundDuration = 15;
 8002b18:	930a      	str	r3, [sp, #40]	; 0x28
    Timing.DataLatency = 17;
 8002b1a:	2311      	movs	r3, #17
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002b1c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    Timing.DataSetupTime = 255;
 8002b24:	9009      	str	r0, [sp, #36]	; 0x24
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002b26:	4856      	ldr	r0, [pc, #344]	; (8002c80 <main+0x2c8>)
    Timing.DataLatency = 17;
 8002b28:	930c      	str	r3, [sp, #48]	; 0x30
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002b2a:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <main+0x2cc>)
    hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002b2c:	6001      	str	r1, [r0, #0]
    hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002b2e:	6282      	str	r2, [r0, #40]	; 0x28
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8002b30:	a907      	add	r1, sp, #28
 8002b32:	4622      	mov	r2, r4
    hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002b34:	e9c0 4402 	strd	r4, r4, [r0, #8]
    hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002b38:	e9c0 4406 	strd	r4, r4, [r0, #24]
    hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002b3c:	e9c0 4408 	strd	r4, r4, [r0, #32]
    hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002b40:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
    hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002b44:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
    FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002b48:	940d      	str	r4, [sp, #52]	; 0x34
    Timing.CLKDivision = 16;
 8002b4a:	970b      	str	r7, [sp, #44]	; 0x2c
    hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002b4c:	6147      	str	r7, [r0, #20]
    hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002b4e:	6104      	str	r4, [r0, #16]
    hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002b50:	6043      	str	r3, [r0, #4]
    if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8002b52:	f002 fb9b 	bl	800528c <HAL_SRAM_Init>
 8002b56:	b108      	cbz	r0, 8002b5c <main+0x1a4>
 8002b58:	b672      	cpsid	i
    while (1) {
 8002b5a:	e7fe      	b.n	8002b5a <main+0x1a2>
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b5c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002b60:	4a49      	ldr	r2, [pc, #292]	; (8002c88 <main+0x2d0>)
    hadc2.Instance = ADC2;
 8002b62:	4c4a      	ldr	r4, [pc, #296]	; (8002c8c <main+0x2d4>)
    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002b64:	69d3      	ldr	r3, [r2, #28]
 8002b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6a:	61d3      	str	r3, [r2, #28]
    hadc2.Instance = ADC2;
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <main+0x2d8>)
    ADC_ChannelConfTypeDef sConfig = {0};
 8002b6e:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8002b72:	9009      	str	r0, [sp, #36]	; 0x24
    hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b74:	60a0      	str	r0, [r4, #8]
    hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	7520      	strb	r0, [r4, #20]
    hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b78:	6060      	str	r0, [r4, #4]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8002b7a:	4620      	mov	r0, r4
    hadc2.Init.ContinuousConvMode = ENABLE;
 8002b7c:	7325      	strb	r5, [r4, #12]
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b7e:	61e1      	str	r1, [r4, #28]
    hadc2.Init.NbrOfConversion = 1;
 8002b80:	6125      	str	r5, [r4, #16]
    hadc2.Instance = ADC2;
 8002b82:	6023      	str	r3, [r4, #0]
    if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8002b84:	f000 ff98 	bl	8003ab8 <HAL_ADC_Init>
 8002b88:	b108      	cbz	r0, 8002b8e <main+0x1d6>
 8002b8a:	b672      	cpsid	i
    while (1) {
 8002b8c:	e7fe      	b.n	8002b8c <main+0x1d4>
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002b8e:	2305      	movs	r3, #5
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8002b90:	4620      	mov	r0, r4
 8002b92:	a907      	add	r1, sp, #28
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002b94:	9309      	str	r3, [sp, #36]	; 0x24
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b96:	e9cd 6507 	strd	r6, r5, [sp, #28]
    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8002b9a:	f000 fe1f 	bl	80037dc <HAL_ADC_ConfigChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b108      	cbz	r0, 8002ba6 <main+0x1ee>
 8002ba2:	b672      	cpsid	i
    while (1) {
 8002ba4:	e7fe      	b.n	8002ba4 <main+0x1ec>
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c2.Instance = I2C2;
 8002baa:	483a      	ldr	r0, [pc, #232]	; (8002c94 <main+0x2dc>)
 8002bac:	493a      	ldr	r1, [pc, #232]	; (8002c98 <main+0x2e0>)
    hi2c2.Init.OwnAddress2 = 0;
 8002bae:	e9c0 3305 	strd	r3, r3, [r0, #20]
    hi2c2.Instance = I2C2;
 8002bb2:	6001      	str	r1, [r0, #0]
    hi2c2.Init.ClockSpeed = 400000;
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <main+0x2e4>)
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb6:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bba:	6083      	str	r3, [r0, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8002bbc:	60c3      	str	r3, [r0, #12]
    hi2c2.Init.ClockSpeed = 400000;
 8002bbe:	6041      	str	r1, [r0, #4]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc0:	6102      	str	r2, [r0, #16]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002bc2:	f001 fc67 	bl	8004494 <HAL_I2C_Init>
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d13f      	bne.n	8002c4c <main+0x294>
    HAL_ADCEx_Calibration_Start(&hadc2);
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f001 f81f 	bl	8003c10 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 8002bd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 fd4a 	bl	8003670 <HAL_ADC_PollForConversion>
    currentPage = home;
 8002bdc:	4d30      	ldr	r5, [pc, #192]	; (8002ca0 <main+0x2e8>)
    HAL_ADC_Start(&hadc2);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 feda 	bl	8003998 <HAL_ADC_Start>
    LCD_INIT();
 8002be4:	f7fe fbb8 	bl	8001358 <LCD_INIT>
    HAL_Delay(50);
 8002be8:	2032      	movs	r0, #50	; 0x32
    currentPage = home;
 8002bea:	702e      	strb	r6, [r5, #0]
    HAL_Delay(50);
 8002bec:	f000 fd2e 	bl	800364c <HAL_Delay>
    while (!XPT2046_Touch_Calibrate());
 8002bf0:	f000 faac 	bl	800314c <XPT2046_Touch_Calibrate>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d0fb      	beq.n	8002bf0 <main+0x238>
    LCD_GramScan(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7fe fd4b 	bl	8001694 <LCD_GramScan>
    LCD_Clear(0, 0, 240, 320, BLACK);
 8002bfe:	2100      	movs	r1, #0
    if (changingPage) {
 8002c00:	4e28      	ldr	r6, [pc, #160]	; (8002ca4 <main+0x2ec>)
    LCD_Clear(0, 0, 240, 320, BLACK);
 8002c02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c06:	22f0      	movs	r2, #240	; 0xf0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	9100      	str	r1, [sp, #0]
 8002c0c:	f7fe fbfe 	bl	800140c <LCD_Clear>
    if (changingPage) {
 8002c10:	6833      	ldr	r3, [r6, #0]
 8002c12:	bb1b      	cbnz	r3, 8002c5c <main+0x2a4>
    HAL_Delay(500);
 8002c14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c18:	f000 fd18 	bl	800364c <HAL_Delay>
            ucXPT2046_TouchFlag = 0;
 8002c1c:	2700      	movs	r7, #0
 8002c1e:	4c22      	ldr	r4, [pc, #136]	; (8002ca8 <main+0x2f0>)
 8002c20:	e008      	b.n	8002c34 <main+0x27c>
        if (ucXPT2046_TouchFlag == 1) {
 8002c22:	7823      	ldrb	r3, [r4, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <main+0x276>
            Check_touchkey();
 8002c28:	f7fe fe06 	bl	8001838 <Check_touchkey>
            ucXPT2046_TouchFlag = 0;
 8002c2c:	7027      	strb	r7, [r4, #0]
        HAL_Delay(50);
 8002c2e:	2032      	movs	r0, #50	; 0x32
 8002c30:	f000 fd0c 	bl	800364c <HAL_Delay>
        if (currentPage == home) mainPage();
 8002c34:	782b      	ldrb	r3, [r5, #0]
 8002c36:	b11b      	cbz	r3, 8002c40 <main+0x288>
        else if (currentPage == weight) weightPage();
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d009      	beq.n	8002c50 <main+0x298>
        else if (currentPage == accelerometer) accelerometerPage();
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d00a      	beq.n	8002c56 <main+0x29e>
    if (changingPage) {
 8002c40:	6833      	ldr	r3, [r6, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ed      	beq.n	8002c22 <main+0x26a>
 8002c46:	f7fe fd97 	bl	8001778 <mainPage.part.0>
 8002c4a:	e7ea      	b.n	8002c22 <main+0x26a>
 8002c4c:	b672      	cpsid	i
    while (1) {
 8002c4e:	e7fe      	b.n	8002c4e <main+0x296>
        else if (currentPage == weight) weightPage();
 8002c50:	f7ff f8c6 	bl	8001de0 <weightPage>
 8002c54:	e7e5      	b.n	8002c22 <main+0x26a>
        else if (currentPage == accelerometer) accelerometerPage();
 8002c56:	f7ff f9e3 	bl	8002020 <accelerometerPage>
 8002c5a:	e7e2      	b.n	8002c22 <main+0x26a>
 8002c5c:	f7fe fd8c 	bl	8001778 <mainPage.part.0>
 8002c60:	e7d8      	b.n	8002c14 <main+0x25c>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40011800 	.word	0x40011800
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	40010c00 	.word	0x40010c00
 8002c74:	40011400 	.word	0x40011400
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	10210000 	.word	0x10210000
 8002c80:	200005e4 	.word	0x200005e4
 8002c84:	a0000104 	.word	0xa0000104
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	20000560 	.word	0x20000560
 8002c90:	40012800 	.word	0x40012800
 8002c94:	20000590 	.word	0x20000590
 8002c98:	40005800 	.word	0x40005800
 8002c9c:	00061a80 	.word	0x00061a80
 8002ca0:	2000055a 	.word	0x2000055a
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	200006c0 	.word	0x200006c0

08002cac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_MspInit+0x3c>)
{
 8002cae:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	619a      	str	r2, [r3, #24]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	f002 0201 	and.w	r2, r2, #1
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cca:	61da      	str	r2, [r3, #28]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd6:	684b      	ldr	r3, [r1, #4]
 8002cd8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce2:	b002      	add	sp, #8
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000

08002cf0 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	2300      	movs	r3, #0
{
 8002cf2:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC2)
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_ADC_MspInit+0x5c>)
 8002cf6:	6801      	ldr	r1, [r0, #0]
{
 8002cf8:	b087      	sub	sp, #28
  if(hadc->Instance==ADC2)
 8002cfa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d00:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC2)
 8002d04:	d001      	beq.n	8002d0a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d06:	b007      	add	sp, #28
 8002d08:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d0a:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d12:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d16:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d26:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	619a      	str	r2, [r3, #24]
 8002d36:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d38:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f001 f856 	bl	8003df4 <HAL_GPIO_Init>
}
 8002d48:	b007      	add	sp, #28
 8002d4a:	bd30      	pop	{r4, r5, pc}
 8002d4c:	40012800 	.word	0x40012800
 8002d50:	40010800 	.word	0x40010800

08002d54 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	2300      	movs	r3, #0
{
 8002d56:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C2)
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <HAL_I2C_MspInit+0x5c>)
 8002d5a:	6801      	ldr	r1, [r0, #0]
{
 8002d5c:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C2)
 8002d5e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d64:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C2)
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d6a:	b007      	add	sp, #28
 8002d6c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d6e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d72:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	4c0f      	ldr	r4, [pc, #60]	; (8002db4 <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	69a3      	ldr	r3, [r4, #24]
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	61a3      	str	r3, [r4, #24]
 8002d82:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d84:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	480a      	ldr	r0, [pc, #40]	; (8002db8 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d90:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d92:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f001 f82e 	bl	8003df4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	69e3      	ldr	r3, [r4, #28]
 8002d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d9e:	61e3      	str	r3, [r4, #28]
 8002da0:	69e3      	ldr	r3, [r4, #28]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	9b01      	ldr	r3, [sp, #4]
}
 8002daa:	b007      	add	sp, #28
 8002dac:	bd30      	pop	{r4, r5, pc}
 8002dae:	bf00      	nop
 8002db0:	40005800 	.word	0x40005800
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010c00 	.word	0x40010c00

08002dbc <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002dbc:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002dc2:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8002dc4:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002dc6:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8002dc8:	bb12      	cbnz	r2, 8002e10 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8002dca:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dce:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002dd0:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002dd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002dd8:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8002ddc:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002dde:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de6:	6153      	str	r3, [r2, #20]
 8002de8:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dea:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002df4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dfa:	f000 fffb 	bl	8003df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002dfe:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <HAL_SRAM_MspInit+0x60>)
 8002e04:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e0a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f000 fff2 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002e10:	b007      	add	sp, #28
 8002e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e14:	200006b8 	.word	0x200006b8
 8002e18:	40011800 	.word	0x40011800
 8002e1c:	40011400 	.word	0x40011400

08002e20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <HardFault_Handler>
 8002e26:	bf00      	nop

08002e28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <MemManage_Handler>
 8002e2a:	bf00      	nop

08002e2c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <BusFault_Handler>
 8002e2e:	bf00      	nop

08002e30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler>
 8002e32:	bf00      	nop

08002e34 <SVC_Handler>:
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop

08002e38 <DebugMon_Handler>:
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <PendSV_Handler>:
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop

08002e40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e40:	f000 bbf2 	b.w	8003628 <HAL_IncTick>

08002e44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <EXTI4_IRQHandler+0x2c>)
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	06d2      	lsls	r2, r2, #27
 8002e4c:	d404      	bmi.n	8002e58 <EXTI4_IRQHandler+0x14>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e52:	2010      	movs	r0, #16
 8002e54:	f001 b902 	b.w	800405c <HAL_GPIO_EXTI_IRQHandler>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002e58:	2010      	movs	r0, #16
        ucXPT2046_TouchFlag = 1;
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <EXTI4_IRQHandler+0x30>)
 8002e5e:	7011      	strb	r1, [r2, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002e60:	6158      	str	r0, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002e62:	f001 f8f9 	bl	8004058 <HAL_GPIO_EXTI_Callback>
}
 8002e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e6a:	2010      	movs	r0, #16
 8002e6c:	f001 b8f6 	b.w	800405c <HAL_GPIO_EXTI_IRQHandler>
 8002e70:	40010400 	.word	0x40010400
 8002e74:	200006c0 	.word	0x200006c0

08002e78 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
    return 1;
}
 8002e78:	2001      	movs	r0, #1
 8002e7a:	4770      	bx	lr

08002e7c <_kill>:

int _kill(int pid, int sig) {
 8002e7c:	b508      	push	{r3, lr}
    errno = EINVAL;
 8002e7e:	f002 fab3 	bl	80053e8 <__errno>
 8002e82:	2216      	movs	r2, #22
 8002e84:	4603      	mov	r3, r0
    return -1;
}
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = EINVAL;
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	bd08      	pop	{r3, pc}
 8002e8e:	bf00      	nop

08002e90 <_exit>:

void _exit(int status) {
 8002e90:	b508      	push	{r3, lr}
    errno = EINVAL;
 8002e92:	f002 faa9 	bl	80053e8 <__errno>
 8002e96:	2316      	movs	r3, #22
 8002e98:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1) {}        /* Make sure we hang here */
 8002e9a:	e7fe      	b.n	8002e9a <_exit+0xa>

08002e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002e9c:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e9e:	1e16      	subs	r6, r2, #0
 8002ea0:	dd07      	ble.n	8002eb2 <_read+0x16>
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	198d      	adds	r5, r1, r6
        *ptr++ = __io_getchar();
 8002ea6:	f3af 8000 	nop.w
 8002eaa:	f804 0b01 	strb.w	r0, [r4], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002eae:	42a5      	cmp	r5, r4
 8002eb0:	d1f9      	bne.n	8002ea6 <_read+0xa>
    }

    return len;
}
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	bf00      	nop

08002eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002eb8:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002eba:	1e16      	subs	r6, r2, #0
 8002ebc:	dd07      	ble.n	8002ece <_write+0x16>
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	198d      	adds	r5, r1, r6
        __io_putchar(*ptr++);
 8002ec2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002ec6:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002eca:	42a5      	cmp	r5, r4
 8002ecc:	d1f9      	bne.n	8002ec2 <_write+0xa>
    }
    return len;
}
 8002ece:	4630      	mov	r0, r6
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	bf00      	nop

08002ed4 <_close>:

int _close(int file) {
    return -1;
}
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop

08002edc <_fstat>:


int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8002edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    return 0;
}
 8002ee0:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 8002ee2:	604b      	str	r3, [r1, #4]
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <_isatty>:

int _isatty(int file) {
    return 1;
}
 8002ee8:	2001      	movs	r0, #1
 8002eea:	4770      	bx	lr

08002eec <_lseek>:

int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	4770      	bx	lr

08002ef0 <_sbrk>:
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *) stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002ef0:	490d      	ldr	r1, [pc, #52]	; (8002f28 <_sbrk+0x38>)
void *_sbrk(ptrdiff_t incr) {
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b510      	push	{r4, lr}
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <_sbrk+0x3c>)
 8002ef8:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <_sbrk+0x40>)
    if (NULL == __sbrk_heap_end) {
 8002efa:	6808      	ldr	r0, [r1, #0]
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8002efc:	1b12      	subs	r2, r2, r4
    if (NULL == __sbrk_heap_end) {
 8002efe:	b120      	cbz	r0, 8002f0a <_sbrk+0x1a>
        __sbrk_heap_end = &_end;
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002f00:	4403      	add	r3, r0
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d807      	bhi.n	8002f16 <_sbrk+0x26>
        errno = ENOMEM;
        return (void *) -1;
    }

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;
 8002f06:	600b      	str	r3, [r1, #0]

    return (void *) prev_heap_end;
}
 8002f08:	bd10      	pop	{r4, pc}
        __sbrk_heap_end = &_end;
 8002f0a:	4c0a      	ldr	r4, [pc, #40]	; (8002f34 <_sbrk+0x44>)
 8002f0c:	4620      	mov	r0, r4
    if (__sbrk_heap_end + incr > max_heap) {
 8002f0e:	4403      	add	r3, r0
 8002f10:	4293      	cmp	r3, r2
        __sbrk_heap_end = &_end;
 8002f12:	600c      	str	r4, [r1, #0]
    if (__sbrk_heap_end + incr > max_heap) {
 8002f14:	d9f7      	bls.n	8002f06 <_sbrk+0x16>
        errno = ENOMEM;
 8002f16:	f002 fa67 	bl	80053e8 <__errno>
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	4603      	mov	r3, r0
        return (void *) -1;
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        errno = ENOMEM;
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	200006bc 	.word	0x200006bc
 8002f2c:	20010000 	.word	0x20010000
 8002f30:	00000400 	.word	0x00000400
 8002f34:	200006d8 	.word	0x200006d8

08002f38 <SystemInit>:

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <XPT2046_WriteCMD>:
    }

}


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4606      	mov	r6, r0
    uint8_t i;


    macXPT2046_MOSI_0();
 8002f40:	4815      	ldr	r0, [pc, #84]	; (8002f98 <XPT2046_WriteCMD+0x5c>)
 8002f42:	2200      	movs	r2, #0

    macXPT2046_CLK_LOW();

    for (i = 0; i < 8; i++) {
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002f44:	4605      	mov	r5, r0
    macXPT2046_MOSI_0();
 8002f46:	2104      	movs	r1, #4
 8002f48:	f001 f882 	bl	8004050 <HAL_GPIO_WritePin>
    macXPT2046_CLK_LOW();
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4628      	mov	r0, r5
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002f52:	2407      	movs	r4, #7
    macXPT2046_CLK_LOW();
 8002f54:	f001 f87c 	bl	8004050 <HAL_GPIO_WritePin>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002f58:	fa46 f204 	asr.w	r2, r6, r4
 8002f5c:	f012 0201 	ands.w	r2, r2, #1
 8002f60:	bf18      	it	ne
 8002f62:	2201      	movne	r2, #1
 8002f64:	2104      	movs	r1, #4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f001 f872 	bl	8004050 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	3301      	adds	r3, #1
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d3fc      	bcc.n	8002f6e <XPT2046_WriteCMD+0x32>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_HIGH();
 8002f74:	2201      	movs	r2, #1
 8002f76:	4628      	mov	r0, r5
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f001 f869 	bl	8004050 <HAL_GPIO_WritePin>
    for (i = 0; i < ulCount; i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	3301      	adds	r3, #1
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d3fc      	bcc.n	8002f80 <XPT2046_WriteCMD+0x44>

        XPT2046_DelayUS(5);

        macXPT2046_CLK_LOW();
 8002f86:	2200      	movs	r2, #0
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4628      	mov	r0, r5
    for (i = 0; i < 8; i++) {
 8002f8c:	3c01      	subs	r4, #1
        macXPT2046_CLK_LOW();
 8002f8e:	f001 f85f 	bl	8004050 <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 8002f92:	1c63      	adds	r3, r4, #1
 8002f94:	d1e0      	bne.n	8002f58 <XPT2046_WriteCMD+0x1c>
    }

}
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	40011800 	.word	0x40011800

08002f9c <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002f9c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;
    uint16_t usBuf = 0, usTemp;


    macXPT2046_MOSI_0();
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <XPT2046_ReadCMD+0x4c>)
 8002fa4:	f001 f854 	bl	8004050 <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002fa8:	2201      	movs	r2, #1
 8002faa:	480f      	ldr	r0, [pc, #60]	; (8002fe8 <XPT2046_ReadCMD+0x4c>)
 8002fac:	4611      	mov	r1, r2
 8002fae:	250b      	movs	r5, #11
    uint16_t usBuf = 0, usTemp;
 8002fb0:	2400      	movs	r4, #0

    for (i = 0; i < 12; i++) {
        macXPT2046_CLK_LOW();
 8002fb2:	4606      	mov	r6, r0
    macXPT2046_CLK_HIGH();
 8002fb4:	f001 f84c 	bl	8004050 <HAL_GPIO_WritePin>
        macXPT2046_CLK_LOW();
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f001 f847 	bl	8004050 <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 8002fc2:	2108      	movs	r1, #8
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f001 f83d 	bl	8004044 <HAL_GPIO_ReadPin>

        usBuf |= usTemp << (11 - i);

        macXPT2046_CLK_HIGH();
 8002fca:	2201      	movs	r2, #1
        usTemp = macXPT2046_MISO();
 8002fcc:	4603      	mov	r3, r0
        macXPT2046_CLK_HIGH();
 8002fce:	4611      	mov	r1, r2
        usBuf |= usTemp << (11 - i);
 8002fd0:	40ab      	lsls	r3, r5
        macXPT2046_CLK_HIGH();
 8002fd2:	4630      	mov	r0, r6
    for (i = 0; i < 12; i++) {
 8002fd4:	3d01      	subs	r5, #1
        usBuf |= usTemp << (11 - i);
 8002fd6:	431c      	orrs	r4, r3
        macXPT2046_CLK_HIGH();
 8002fd8:	f001 f83a 	bl	8004050 <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8002fdc:	1c6b      	adds	r3, r5, #1
        usBuf |= usTemp << (11 - i);
 8002fde:	b2a4      	uxth	r4, r4
    for (i = 0; i < 12; i++) {
 8002fe0:	d1ea      	bne.n	8002fb8 <XPT2046_ReadCMD+0x1c>

    }

    return usBuf;

}
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40011800 	.word	0x40011800

08002fec <XPT2046_ReadAdc_Smooth_XY>:

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
    uint8_t ucCount = 0, i;

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8002fec:	2100      	movs	r1, #0
static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	4680      	mov	r8, r0
    int16_t sBufferArray[2][10] = {{0},
 8002ff6:	2228      	movs	r2, #40	; 0x28
 8002ff8:	4668      	mov	r0, sp
 8002ffa:	466e      	mov	r6, sp
    uint8_t ucCount = 0, i;
 8002ffc:	460c      	mov	r4, r1
        sBufferArray[0][ucCount] = sAD_X;
        sBufferArray[1][ucCount] = sAD_Y;

        ucCount++;

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8002ffe:	4f51      	ldr	r7, [pc, #324]	; (8003144 <XPT2046_ReadAdc_Smooth_XY+0x158>)
    int16_t sBufferArray[2][10] = {{0},
 8003000:	f002 fa46 	bl	8005490 <memset>
    XPT2046_WriteCMD(ucChannel);
 8003004:	2090      	movs	r0, #144	; 0x90
 8003006:	f7ff ff99 	bl	8002f3c <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 800300a:	f7ff ffc7 	bl	8002f9c <XPT2046_ReadCMD>
    for (i = 0; i < ulCount; i++) {
 800300e:	2300      	movs	r3, #0
    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 8003010:	b205      	sxth	r5, r0
    for (i = 0; i < ulCount; i++) {
 8003012:	3301      	adds	r3, #1
 8003014:	d0fd      	beq.n	8003012 <XPT2046_ReadAdc_Smooth_XY+0x26>
    XPT2046_WriteCMD(ucChannel);
 8003016:	20d0      	movs	r0, #208	; 0xd0
 8003018:	f7ff ff90 	bl	8002f3c <XPT2046_WriteCMD>
    return XPT2046_ReadCMD();
 800301c:	f7ff ffbe 	bl	8002f9c <XPT2046_ReadCMD>
 8003020:	4603      	mov	r3, r0
        sBufferArray[0][ucCount] = sAD_X;
 8003022:	f826 5b02 	strh.w	r5, [r6], #2
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8003026:	2110      	movs	r1, #16
 8003028:	4638      	mov	r0, r7
        sBufferArray[1][ucCount] = sAD_Y;
 800302a:	8273      	strh	r3, [r6, #18]
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 800302c:	f001 f80a 	bl	8004044 <HAL_GPIO_ReadPin>
        ucCount++;
 8003030:	3401      	adds	r4, #1
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8003032:	4605      	mov	r5, r0
        ucCount++;
 8003034:	b2e4      	uxtb	r4, r4
    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8003036:	2800      	cmp	r0, #0
 8003038:	d174      	bne.n	8003124 <XPT2046_ReadAdc_Smooth_XY+0x138>
 800303a:	2c0a      	cmp	r4, #10
 800303c:	d1e2      	bne.n	8003004 <XPT2046_ReadAdc_Smooth_XY+0x18>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 800303e:	2110      	movs	r1, #16
 8003040:	4840      	ldr	r0, [pc, #256]	; (8003144 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8003042:	f000 ffff 	bl	8004044 <HAL_GPIO_ReadPin>
 8003046:	b108      	cbz	r0, 800304c <XPT2046_ReadAdc_Smooth_XY+0x60>
        ucXPT2046_TouchFlag = 0;
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 800304a:	701d      	strb	r5, [r3, #0]


    if (ucCount == 10) {
        lX_Max = lX_Min = sBufferArray[0][0];
 800304c:	f9bd c000 	ldrsh.w	ip, [sp]
        lY_Max = lY_Min = sBufferArray[1][0];
 8003050:	466b      	mov	r3, sp
        lX_Max = lX_Min = sBufferArray[0][0];
 8003052:	4664      	mov	r4, ip
 8003054:	4661      	mov	r1, ip
        lY_Max = lY_Min = sBufferArray[1][0];
 8003056:	f9bd 7014 	ldrsh.w	r7, [sp, #20]

        for (i = 1; i < 10; i++) {
 800305a:	f10d 0012 	add.w	r0, sp, #18
 800305e:	e004      	b.n	800306a <XPT2046_ReadAdc_Smooth_XY+0x7e>
 8003060:	4294      	cmp	r4, r2
 8003062:	bfb8      	it	lt
 8003064:	4614      	movlt	r4, r2
 8003066:	4298      	cmp	r0, r3
 8003068:	d006      	beq.n	8003078 <XPT2046_ReadAdc_Smooth_XY+0x8c>
            if (sBufferArray[0][i] < lX_Min)
 800306a:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800306e:	428a      	cmp	r2, r1
 8003070:	daf6      	bge.n	8003060 <XPT2046_ReadAdc_Smooth_XY+0x74>
        for (i = 1; i < 10; i++) {
 8003072:	4298      	cmp	r0, r3
 8003074:	4611      	mov	r1, r2
 8003076:	d1f8      	bne.n	800306a <XPT2046_ReadAdc_Smooth_XY+0x7e>
        lY_Max = lY_Min = sBufferArray[1][0];
 8003078:	4638      	mov	r0, r7
 800307a:	463d      	mov	r5, r7
 800307c:	f10d 0626 	add.w	r6, sp, #38	; 0x26
 8003080:	ab05      	add	r3, sp, #20
 8003082:	e004      	b.n	800308e <XPT2046_ReadAdc_Smooth_XY+0xa2>
 8003084:	4290      	cmp	r0, r2
 8003086:	bfb8      	it	lt
 8003088:	4610      	movlt	r0, r2
            else if (sBufferArray[0][i] > lX_Max)
                lX_Max = sBufferArray[0][i];

        }

        for (i = 1; i < 10; i++) {
 800308a:	42b3      	cmp	r3, r6
 800308c:	d006      	beq.n	800309c <XPT2046_ReadAdc_Smooth_XY+0xb0>
            if (sBufferArray[1][i] < lY_Min)
 800308e:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8003092:	42aa      	cmp	r2, r5
 8003094:	daf6      	bge.n	8003084 <XPT2046_ReadAdc_Smooth_XY+0x98>
        for (i = 1; i < 10; i++) {
 8003096:	42b3      	cmp	r3, r6
 8003098:	4615      	mov	r5, r2
 800309a:	d1f8      	bne.n	800308e <XPT2046_ReadAdc_Smooth_XY+0xa2>
                lY_Max = sBufferArray[1][i];

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 800309c:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80030a0:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
                                sBufferArray[0][4] +
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80030a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80030a8:	4462      	add	r2, ip
 80030aa:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80030ac:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 80030b0:	443b      	add	r3, r7
 80030b2:	4433      	add	r3, r6
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80030b4:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 80030b8:	4432      	add	r2, r6
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80030ba:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 80030be:	4433      	add	r3, r6
                                sBufferArray[0][4] +
 80030c0:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80030c4:	4432      	add	r2, r6
                                sBufferArray[1][4] +
 80030c6:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 80030ca:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80030cc:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
                                sBufferArray[0][4] +
 80030d0:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80030d2:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
                                sBufferArray[1][4] +
 80030d6:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80030d8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80030dc:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80030de:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80030e2:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80030e4:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80030e8:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80030ea:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 80030ee:	4433      	add	r3, r6
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80030f0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 80030f4:	4432      	add	r2, r6
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 80030f6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80030fa:	4433      	add	r3, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 80030fc:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 8003100:	4432      	add	r2, r6
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 8003102:	1a52      	subs	r2, r2, r1
 8003104:	1b12      	subs	r2, r2, r4
 8003106:	10d2      	asrs	r2, r2, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 8003108:	f8a8 2000 	strh.w	r2, [r8]
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 800310c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8003110:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8003112:	1b5b      	subs	r3, r3, r5
 8003114:	1a1b      	subs	r3, r3, r0


        return 1;
 8003116:	2001      	movs	r0, #1
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8003118:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 800311a:	f8a8 3002 	strh.w	r3, [r8, #2]


    return 0;


}
 800311e:	b00a      	add	sp, #40	; 0x28
 8003120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8003124:	2110      	movs	r1, #16
 8003126:	4807      	ldr	r0, [pc, #28]	; (8003144 <XPT2046_ReadAdc_Smooth_XY+0x158>)
 8003128:	f000 ff8c 	bl	8004044 <HAL_GPIO_ReadPin>
 800312c:	b930      	cbnz	r0, 800313c <XPT2046_ReadAdc_Smooth_XY+0x150>
    if (ucCount == 10) {
 800312e:	2c0a      	cmp	r4, #10
    return 0;
 8003130:	bf18      	it	ne
 8003132:	2000      	movne	r0, #0
    if (ucCount == 10) {
 8003134:	d08a      	beq.n	800304c <XPT2046_ReadAdc_Smooth_XY+0x60>
}
 8003136:	b00a      	add	sp, #40	; 0x28
 8003138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ucXPT2046_TouchFlag = 0;
 800313c:	2200      	movs	r2, #0
 800313e:	4b02      	ldr	r3, [pc, #8]	; (8003148 <XPT2046_ReadAdc_Smooth_XY+0x15c>)
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	e7f4      	b.n	800312e <XPT2046_ReadAdc_Smooth_XY+0x142>
 8003144:	40011800 	.word	0x40011800
 8003148:	200006c0 	.word	0x200006c0

0800314c <XPT2046_Touch_Calibrate>:


}


uint8_t XPT2046_Touch_Calibrate(void) {
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 8003150:	213c      	movs	r1, #60	; 0x3c
    strCrossCoordinate[0].y = usScreenHeigth >> 2;

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8003152:	22f0      	movs	r2, #240	; 0xf0

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8003154:	23b4      	movs	r3, #180	; 0xb4
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8003156:	f04f 0a50 	mov.w	sl, #80	; 0x50


    LCD_GramScan(1);
 800315a:	2001      	movs	r0, #1
uint8_t XPT2046_Touch_Calibrate(void) {
 800315c:	b09b      	sub	sp, #108	; 0x6c
    LCD_GramScan(1);
 800315e:	4607      	mov	r7, r0

    for (i = 0; i < 4; i++) {
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);

        pStr = "Touch Calibrate ......";
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8003160:	f8df b340 	ldr.w	fp, [pc, #832]	; 80034a4 <XPT2046_Touch_Calibrate+0x358>
 8003164:	4ed0      	ldr	r6, [pc, #832]	; (80034a8 <XPT2046_Touch_Calibrate+0x35c>)
 8003166:	ad16      	add	r5, sp, #88	; 0x58
 8003168:	f10d 084e 	add.w	r8, sp, #78	; 0x4e
    strCrossCoordinate[0].x = usScreenWidth >> 2;
 800316c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8003170:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8003174:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8003178:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 800317c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8003180:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8003184:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    LCD_GramScan(1);
 8003188:	f7fe fa84 	bl	8001694 <LCD_GramScan>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800318c:	2400      	movs	r4, #0
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 800318e:	f44f 4978 	mov.w	r9, #63488	; 0xf800
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003192:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003196:	22f0      	movs	r2, #240	; 0xf0
 8003198:	4621      	mov	r1, r4
 800319a:	4620      	mov	r0, r4
 800319c:	9400      	str	r4, [sp, #0]
 800319e:	f7fe f935 	bl	800140c <LCD_Clear>
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 80031a2:	4623      	mov	r3, r4
 80031a4:	465a      	mov	r2, fp
 80031a6:	21a0      	movs	r1, #160	; 0xa0
 80031a8:	203c      	movs	r0, #60	; 0x3c
 80031aa:	f8cd 9000 	str.w	r9, [sp]
 80031ae:	f7fe fa1b 	bl	80015e8 <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 80031b2:	463a      	mov	r2, r7
 80031b4:	49bd      	ldr	r1, [pc, #756]	; (80034ac <XPT2046_Touch_Calibrate+0x360>)
 80031b6:	a80f      	add	r0, sp, #60	; 0x3c
 80031b8:	f002 febe 	bl	8005f38 <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 80031bc:	4623      	mov	r3, r4
 80031be:	2190      	movs	r1, #144	; 0x90
 80031c0:	2078      	movs	r0, #120	; 0x78
 80031c2:	f8cd 9000 	str.w	r9, [sp]
 80031c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80031c8:	f7fe fa0e 	bl	80015e8 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 80031cc:	4623      	mov	r3, r4
 80031ce:	3301      	adds	r3, #1
 80031d0:	42b3      	cmp	r3, r6
 80031d2:	d3fc      	bcc.n	80031ce <XPT2046_Touch_Calibrate+0x82>

        XPT2046_DelayUS(100000);

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80031d4:	4651      	mov	r1, sl
 80031d6:	f838 0c06 	ldrh.w	r0, [r8, #-6]
 80031da:	f7fe f9d9 	bl	8001590 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 80031de:	4628      	mov	r0, r5
 80031e0:	f7ff ff04 	bl	8002fec <XPT2046_ReadAdc_Smooth_XY>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0fa      	beq.n	80031de <XPT2046_Touch_Calibrate+0x92>
    for (i = 0; i < 4; i++) {
 80031e8:	3701      	adds	r7, #1
 80031ea:	2f05      	cmp	r7, #5
 80031ec:	f105 0504 	add.w	r5, r5, #4
 80031f0:	f108 0804 	add.w	r8, r8, #4
 80031f4:	d002      	beq.n	80031fc <XPT2046_Touch_Calibrate+0xb0>
        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80031f6:	f838 ac04 	ldrh.w	sl, [r8, #-4]
 80031fa:	e7c7      	b.n	800318c <XPT2046_Touch_Calibrate+0x40>
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 80031fc:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8003200:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
 8003204:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 8003208:	f8bd 805e 	ldrh.w	r8, [sp, #94]	; 0x5e
 800320c:	1b32      	subs	r2, r6, r4
 800320e:	eba8 0307 	sub.w	r3, r8, r7
 8003212:	fb03 f202 	mul.w	r2, r3, r2
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	4613      	mov	r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 800321a:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800321e:	f8bd 905a 	ldrh.w	r9, [sp, #90]	; 0x5a
 8003222:	eba5 0a04 	sub.w	sl, r5, r4
 8003226:	eba9 0207 	sub.w	r2, r9, r7
 800322a:	fb0a fb02 	mul.w	fp, sl, r2
    if (pCalibrationFactor->Divider == 0)
 800322e:	455b      	cmp	r3, fp
 8003230:	9302      	str	r3, [sp, #8]
 8003232:	f000 8115 	beq.w	8003460 <XPT2046_Touch_Calibrate+0x314>
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003236:	eba8 0009 	sub.w	r0, r8, r9
 800323a:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->An =
 800323e:	00c0      	lsls	r0, r0, #3
 8003240:	f7fd f94c 	bl	80004dc <__aeabi_i2d>
 8003244:	460a      	mov	r2, r1
 8003246:	4601      	mov	r1, r0
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8003248:	1b70      	subs	r0, r6, r5
 800324a:	eba0 1000 	sub.w	r0, r0, r0, lsl #4
        pCalibrationFactor->Bn =
 800324e:	00c0      	lsls	r0, r0, #3
        pCalibrationFactor->An =
 8003250:	e9cd 1206 	strd	r1, r2, [sp, #24]
        pCalibrationFactor->Bn =
 8003254:	f7fd f942 	bl	80004dc <__aeabi_i2d>
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003258:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
        pCalibrationFactor->Bn =
 800325c:	e9cd 0108 	strd	r0, r1, [sp, #32]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8003260:	fb0c f006 	mul.w	r0, ip, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003264:	ebc4 1e04 	rsb	lr, r4, r4, lsl #4
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8003268:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 800326c:	fb0c fc05 	mul.w	ip, ip, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 8003270:	fb08 f000 	mul.w	r0, r8, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8003274:	1baa      	subs	r2, r5, r6
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003276:	ebcc 0c8e 	rsb	ip, ip, lr, lsl #2
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 800327a:	fb07 f202 	mul.w	r2, r7, r2
                pScreenSample[0].y +
 800327e:	fb09 000c 	mla	r0, r9, ip, r0
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8003282:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
        pCalibrationFactor->Cn =
 8003286:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800328a:	f7fd f927 	bl	80004dc <__aeabi_i2d>
        pCalibrationFactor->Dn =
 800328e:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Cn =
 8003292:	460a      	mov	r2, r1
 8003294:	4601      	mov	r1, r0
        pCalibrationFactor->Dn =
 8003296:	9b04      	ldr	r3, [sp, #16]
        pCalibrationFactor->Cn =
 8003298:	e9cd 1204 	strd	r1, r2, [sp, #16]
        pCalibrationFactor->Dn =
 800329c:	fb0c f003 	mul.w	r0, ip, r3
 80032a0:	f7fd f91c 	bl	80004dc <__aeabi_i2d>
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 80032a4:	f06f 0c9f 	mvn.w	ip, #159	; 0x9f
        pCalibrationFactor->Dn =
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 80032ac:	fb0c f00a 	mul.w	r0, ip, sl
        pCalibrationFactor->En =
 80032b0:	4240      	negs	r0, r0
        pCalibrationFactor->Dn =
 80032b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        pCalibrationFactor->En =
 80032b6:	f7fd f911 	bl	80004dc <__aeabi_i2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80032be:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80032c2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80032c6:	1b64      	subs	r4, r4, r5
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80032c8:	0109      	lsls	r1, r1, #4
 80032ca:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80032ce:	fb09 f404 	mul.w	r4, r9, r4
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 80032d2:	fb08 f801 	mul.w	r8, r8, r1
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80032d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80032da:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80032de:	012d      	lsls	r5, r5, #4
                pScreenSample[0].y +
 80032e0:	eb08 1404 	add.w	r4, r8, r4, lsl #4
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 80032e4:	eba5 1506 	sub.w	r5, r5, r6, lsl #4
        pCalibrationFactor->Fn =
 80032e8:	fb07 4005 	mla	r0, r7, r5, r4
        pCalibrationFactor->En =
 80032ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        pCalibrationFactor->Fn =
 80032f0:	f7fd f8f4 	bl	80004dc <__aeabi_i2d>
    pCalibrationFactor->Divider =
 80032f4:	9b02      	ldr	r3, [sp, #8]
        pCalibrationFactor->Fn =
 80032f6:	4680      	mov	r8, r0
    pCalibrationFactor->Divider =
 80032f8:	eba3 000b 	sub.w	r0, r3, fp
        pCalibrationFactor->Fn =
 80032fc:	4689      	mov	r9, r1
    pCalibrationFactor->Divider =
 80032fe:	f7fd f8ed 	bl	80004dc <__aeabi_i2d>
 8003302:	4682      	mov	sl, r0
    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);

    if (CalibrationFactor.Divider == 0) goto Failure;


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003304:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    pCalibrationFactor->Divider =
 8003308:	468b      	mov	fp, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 800330a:	f7fd f8e7 	bl	80004dc <__aeabi_i2d>
 800330e:	4606      	mov	r6, r0
 8003310:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
 8003314:	460f      	mov	r7, r1
 8003316:	f7fd f8e1 	bl	80004dc <__aeabi_i2d>
 800331a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	4630      	mov	r0, r6
 8003324:	4639      	mov	r1, r7
 8003326:	f7fd f943 	bl	80005b0 <__aeabi_dmul>
 800332a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800332e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f7fd f93b 	bl	80005b0 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003342:	f7fc ff7f 	bl	8000244 <__adddf3>
 8003346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800334a:	f7fc ff7b 	bl	8000244 <__adddf3>
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 800334e:	4652      	mov	r2, sl
 8003350:	465b      	mov	r3, fp
 8003352:	f7fd fa57 	bl	8000804 <__aeabi_ddiv>
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003356:	f7fd fc03 	bl	8000b60 <__aeabi_d2uiz>
 800335a:	4603      	mov	r3, r0
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 800335c:	4639      	mov	r1, r7
 800335e:	4630      	mov	r0, r6
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003360:	b29e      	uxth	r6, r3
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 8003362:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003366:	f7fd f923 	bl	80005b0 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	4614      	mov	r4, r2
 8003374:	461d      	mov	r5, r3
 8003376:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800337a:	f7fd f919 	bl	80005b0 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff5d 	bl	8000244 <__adddf3>
 800338a:	4642      	mov	r2, r8
 800338c:	464b      	mov	r3, r9
 800338e:	f7fc ff59 	bl	8000244 <__adddf3>
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8003392:	4652      	mov	r2, sl
 8003394:	465b      	mov	r3, fp
 8003396:	f7fd fa35 	bl	8000804 <__aeabi_ddiv>
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 800339a:	f7fd fbe1 	bl	8000b60 <__aeabi_d2uiz>

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 800339e:	2eb4      	cmp	r6, #180	; 0xb4
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80033a0:	b280      	uxth	r0, r0
    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 80033a2:	bf8c      	ite	hi
 80033a4:	f1a6 02b4 	subhi.w	r2, r6, #180	; 0xb4
 80033a8:	f1c6 02b4 	rsbls	r2, r6, #180	; 0xb4
 80033ac:	b292      	uxth	r2, r2
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 80033ae:	2850      	cmp	r0, #80	; 0x50
 80033b0:	bf8c      	ite	hi
 80033b2:	f1a0 0350 	subhi.w	r3, r0, #80	; 0x50
 80033b6:	f1c0 0350 	rsbls	r3, r0, #80	; 0x50
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 80033ba:	2a0a      	cmp	r2, #10
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 80033bc:	b29b      	uxth	r3, r3
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 80033be:	d84f      	bhi.n	8003460 <XPT2046_Touch_Calibrate+0x314>
 80033c0:	2b0a      	cmp	r3, #10
 80033c2:	d84d      	bhi.n	8003460 <XPT2046_Touch_Calibrate+0x314>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 80033c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033c8:	4652      	mov	r2, sl
 80033ca:	465b      	mov	r3, fp
 80033cc:	f7fd fa1a 	bl	8000804 <__aeabi_ddiv>
 80033d0:	4d37      	ldr	r5, [pc, #220]	; (80034b0 <XPT2046_Touch_Calibrate+0x364>)
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80033d2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 80033d4:	e9c5 0100 	strd	r0, r1, [r5]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80033d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80033dc:	465b      	mov	r3, fp
 80033de:	f7fd fa11 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80033e2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80033e4:	e9c5 0102 	strd	r0, r1, [r5, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80033e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033ec:	465b      	mov	r3, fp
 80033ee:	f7fd fa09 	bl	8000804 <__aeabi_ddiv>

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80033f2:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80033f4:	e9c5 0104 	strd	r0, r1, [r5, #16]
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80033f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80033fc:	465b      	mov	r3, fp
 80033fe:	f7fd fa01 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8003402:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 8003404:	e9c5 0106 	strd	r0, r1, [r5, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8003408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800340c:	465b      	mov	r3, fp
 800340e:	f7fd f9f9 	bl	8000804 <__aeabi_ddiv>
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8003412:	4652      	mov	r2, sl
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8003414:	e9c5 0108 	strd	r0, r1, [r5, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8003418:	465b      	mov	r3, fp
 800341a:	4640      	mov	r0, r8
 800341c:	4649      	mov	r1, r9
 800341e:	f7fd f9f1 	bl	8000804 <__aeabi_ddiv>


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003422:	2400      	movs	r4, #0
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8003424:	4606      	mov	r6, r0
 8003426:	460f      	mov	r7, r1
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003428:	9400      	str	r4, [sp, #0]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 800342a:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

    pStr = "Calibrate Succeed";
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 800342e:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003432:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003436:	22f0      	movs	r2, #240	; 0xf0
 8003438:	4621      	mov	r1, r4
 800343a:	4620      	mov	r0, r4
 800343c:	f7fd ffe6 	bl	800140c <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003440:	4623      	mov	r3, r4
 8003442:	21a0      	movs	r1, #160	; 0xa0
 8003444:	2034      	movs	r0, #52	; 0x34
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <XPT2046_Touch_Calibrate+0x368>)
 8003448:	9500      	str	r5, [sp, #0]
 800344a:	f7fe f8cd 	bl	80015e8 <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 800344e:	f24c 3350 	movw	r3, #50000	; 0xc350
    for (i = 0; i < ulCount; i++) {
 8003452:	3401      	adds	r4, #1
 8003454:	429c      	cmp	r4, r3
 8003456:	d3fc      	bcc.n	8003452 <XPT2046_Touch_Calibrate+0x306>

    return 1;
 8003458:	2001      	movs	r0, #1
    XPT2046_DelayUS(300000);

    return 0;


}
 800345a:	b01b      	add	sp, #108	; 0x6c
 800345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003460:	2400      	movs	r4, #0
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003462:	f44f 4578 	mov.w	r5, #63488	; 0xf800
    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 8003466:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800346a:	22f0      	movs	r2, #240	; 0xf0
 800346c:	4621      	mov	r1, r4
 800346e:	4620      	mov	r0, r4
 8003470:	9400      	str	r4, [sp, #0]
 8003472:	f7fd ffcb 	bl	800140c <LCD_Clear>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003476:	4623      	mov	r3, r4
 8003478:	21a0      	movs	r1, #160	; 0xa0
 800347a:	2040      	movs	r0, #64	; 0x40
 800347c:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <XPT2046_Touch_Calibrate+0x36c>)
 800347e:	9500      	str	r5, [sp, #0]
 8003480:	f7fe f8b2 	bl	80015e8 <LCD_DrawString_Color>
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 8003484:	4623      	mov	r3, r4
 8003486:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <XPT2046_Touch_Calibrate+0x370>)
 8003488:	21b0      	movs	r1, #176	; 0xb0
 800348a:	2054      	movs	r0, #84	; 0x54
 800348c:	9500      	str	r5, [sp, #0]
 800348e:	f7fe f8ab 	bl	80015e8 <LCD_DrawString_Color>
    for (i = 0; i < ulCount; i++) {
 8003492:	4623      	mov	r3, r4
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <XPT2046_Touch_Calibrate+0x374>)
 8003496:	3301      	adds	r3, #1
 8003498:	4293      	cmp	r3, r2
 800349a:	d3fc      	bcc.n	8003496 <XPT2046_Touch_Calibrate+0x34a>
    return 0;
 800349c:	2000      	movs	r0, #0
}
 800349e:	b01b      	add	sp, #108	; 0x6c
 80034a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a4:	08009178 	.word	0x08009178
 80034a8:	000186a0 	.word	0x000186a0
 80034ac:	08009190 	.word	0x08009190
 80034b0:	20000008 	.word	0x20000008
 80034b4:	08009194 	.word	0x08009194
 80034b8:	080091a8 	.word	0x080091a8
 80034bc:	080091b8 	.word	0x080091b8
 80034c0:	000493e0 	.word	0x000493e0

080034c4 <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	b083      	sub	sp, #12
 80034ca:	4683      	mov	fp, r0
    uint8_t ucRet = 1;

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80034cc:	a801      	add	r0, sp, #4
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80034ce:	468a      	mov	sl, r1
    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80034d0:	f7ff fd8c 	bl	8002fec <XPT2046_ReadAdc_Smooth_XY>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d048      	beq.n	800356a <XPT2046_Get_TouchedPoint+0xa6>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80034d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80034dc:	f7fc fffe 	bl	80004dc <__aeabi_i2d>
 80034e0:	4606      	mov	r6, r0
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80034e2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80034e6:	460f      	mov	r7, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80034e8:	f7fc fff8 	bl	80004dc <__aeabi_i2d>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80034ec:	e9da 2300 	ldrd	r2, r3, [sl]
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80034f0:	4604      	mov	r4, r0
 80034f2:	460d      	mov	r5, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 80034f4:	4630      	mov	r0, r6
 80034f6:	4639      	mov	r1, r7
 80034f8:	f7fd f85a 	bl	80005b0 <__aeabi_dmul>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80034fc:	e9da 2302 	ldrd	r2, r3, [sl, #8]
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003500:	4680      	mov	r8, r0
 8003502:	4689      	mov	r9, r1
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fd f852 	bl	80005b0 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003510:	4640      	mov	r0, r8
 8003512:	4649      	mov	r1, r9
 8003514:	f7fc fe96 	bl	8000244 <__adddf3>
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003518:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 800351c:	f7fc fe92 	bl	8000244 <__adddf3>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003520:	f7fd fb1e 	bl	8000b60 <__aeabi_d2uiz>
 8003524:	4603      	mov	r3, r0
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003526:	4639      	mov	r1, r7
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003528:	f8ab 3000 	strh.w	r3, [fp]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800352c:	4630      	mov	r0, r6
 800352e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8003532:	f7fd f83d 	bl	80005b0 <__aeabi_dmul>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800353e:	4614      	mov	r4, r2
 8003540:	461d      	mov	r5, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003542:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8003546:	f7fd f833 	bl	80005b0 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fc fe77 	bl	8000244 <__adddf3>
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003556:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800355a:	f7fc fe73 	bl	8000244 <__adddf3>
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 800355e:	f7fd faff 	bl	8000b60 <__aeabi_d2uiz>
 8003562:	4603      	mov	r3, r0
    uint8_t ucRet = 1;
 8003564:	2001      	movs	r0, #1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003566:	f8ab 3002 	strh.w	r3, [fp, #2]
    } else ucRet = 0;

    return ucRet;


}
 800356a:	b003      	add	sp, #12
 800356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003572:	490d      	ldr	r1, [pc, #52]	; (80035a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003588:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003596:	f7ff fccf 	bl	8002f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800359a:	f001 ff2b 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800359e:	f7ff fa0b 	bl	80029b8 <main>
  bx lr
 80035a2:	4770      	bx	lr
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80035ac:	08009630 	.word	0x08009630
  ldr r2, =_sbss
 80035b0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80035b4:	200006d8 	.word	0x200006d8

080035b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC1_2_IRQHandler>
	...

080035bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <HAL_InitTick+0x3c>)
{
 80035c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035c6:	7811      	ldrb	r1, [r2, #0]
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <HAL_InitTick+0x40>)
 80035ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	fbb2 f0f3 	udiv	r0, r2, r3
 80035d4:	f000 fbf6 	bl	8003dc4 <HAL_SYSTICK_Config>
 80035d8:	b908      	cbnz	r0, 80035de <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035da:	2d0f      	cmp	r5, #15
 80035dc:	d901      	bls.n	80035e2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80035de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
 80035e2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035e4:	4602      	mov	r2, r0
 80035e6:	4629      	mov	r1, r5
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ec:	f000 fb9e 	bl	8003d2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_InitTick+0x44>)
 80035f2:	4620      	mov	r0, r4
 80035f4:	601d      	str	r5, [r3, #0]
}
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	20000038 	.word	0x20000038
 80035fc:	20000004 	.word	0x20000004
 8003600:	2000003c 	.word	0x2000003c

08003604 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_Init+0x20>)
{
 8003606:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003612:	f000 fb79 	bl	8003d08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003616:	200f      	movs	r0, #15
 8003618:	f7ff ffd0 	bl	80035bc <HAL_InitTick>
  HAL_MspInit();
 800361c:	f7ff fb46 	bl	8002cac <HAL_MspInit>
}
 8003620:	2000      	movs	r0, #0
 8003622:	bd08      	pop	{r3, pc}
 8003624:	40022000 	.word	0x40022000

08003628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <HAL_IncTick+0x10>)
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_IncTick+0x14>)
 800362c:	6811      	ldr	r1, [r2, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	440b      	add	r3, r1
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200006c4 	.word	0x200006c4
 800363c:	20000038 	.word	0x20000038

08003640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <HAL_GetTick+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200006c4 	.word	0x200006c4

0800364c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff fff6 	bl	8003640 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003654:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003656:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003658:	d002      	beq.n	8003660 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_Delay+0x20>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003660:	f7ff ffee 	bl	8003640 <HAL_GetTick>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	42a0      	cmp	r0, r4
 8003668:	d3fa      	bcc.n	8003660 <HAL_Delay+0x14>
  {
  }
}
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000038 	.word	0x20000038

08003670 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003672:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003674:	2500      	movs	r5, #0
{
 8003676:	b083      	sub	sp, #12
 8003678:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800367a:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800367c:	f7ff ffe0 	bl	8003640 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003680:	6833      	ldr	r3, [r6, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	05d7      	lsls	r7, r2, #23
 8003686:	d472      	bmi.n	800376e <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4607      	mov	r7, r0
 800368c:	05d5      	lsls	r5, r2, #23
 800368e:	d403      	bmi.n	8003698 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003692:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003696:	d01e      	beq.n	80036d6 <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003698:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_ADC_PollForConversion+0x154>)
 800369a:	2002      	movs	r0, #2
 800369c:	681d      	ldr	r5, [r3, #0]
 800369e:	f001 fd6f 	bl	8005180 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80036a2:	6833      	ldr	r3, [r6, #0]
 80036a4:	4a48      	ldr	r2, [pc, #288]	; (80037c8 <HAL_ADC_PollForConversion+0x158>)
 80036a6:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80036a8:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80036ac:	4211      	tst	r1, r2
 80036ae:	d125      	bne.n	80036fc <HAL_ADC_PollForConversion+0x8c>
 80036b0:	68d9      	ldr	r1, [r3, #12]
 80036b2:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80036b6:	4211      	tst	r1, r2
 80036b8:	d120      	bne.n	80036fc <HAL_ADC_PollForConversion+0x8c>
 80036ba:	6919      	ldr	r1, [r3, #16]
 80036bc:	4a43      	ldr	r2, [pc, #268]	; (80037cc <HAL_ADC_PollForConversion+0x15c>)
 80036be:	4211      	tst	r1, r2
 80036c0:	d17e      	bne.n	80037c0 <HAL_ADC_PollForConversion+0x150>
 80036c2:	68d9      	ldr	r1, [r3, #12]
 80036c4:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80036c8:	4211      	tst	r1, r2
 80036ca:	bf14      	ite	ne
 80036cc:	2029      	movne	r0, #41	; 0x29
 80036ce:	2014      	moveq	r0, #20
 80036d0:	e01e      	b.n	8003710 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 80036d2:	1c60      	adds	r0, r4, #1
 80036d4:	d154      	bne.n	8003780 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	0791      	lsls	r1, r2, #30
 80036da:	d5fa      	bpl.n	80036d2 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036dc:	f06f 0212 	mvn.w	r2, #18
 80036e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80036e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e8:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036f4:	d055      	beq.n	80037a2 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036f6:	2000      	movs	r0, #0
}
 80036f8:	b003      	add	sp, #12
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80036fc:	6919      	ldr	r1, [r3, #16]
 80036fe:	4a33      	ldr	r2, [pc, #204]	; (80037cc <HAL_ADC_PollForConversion+0x15c>)
 8003700:	4211      	tst	r1, r2
 8003702:	d12a      	bne.n	800375a <HAL_ADC_PollForConversion+0xea>
 8003704:	68d9      	ldr	r1, [r3, #12]
 8003706:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 800370a:	4211      	tst	r1, r2
 800370c:	d125      	bne.n	800375a <HAL_ADC_PollForConversion+0xea>
 800370e:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003710:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003714:	9a01      	ldr	r2, [sp, #4]
 8003716:	4295      	cmp	r5, r2
 8003718:	d809      	bhi.n	800372e <HAL_ADC_PollForConversion+0xbe>
 800371a:	e7df      	b.n	80036dc <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800371c:	9b01      	ldr	r3, [sp, #4]
 800371e:	42ab      	cmp	r3, r5
 8003720:	d311      	bcc.n	8003746 <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 8003722:	9b01      	ldr	r3, [sp, #4]
 8003724:	3301      	adds	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	42ab      	cmp	r3, r5
 800372c:	d237      	bcs.n	800379e <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 800372e:	1c62      	adds	r2, r4, #1
 8003730:	d0f7      	beq.n	8003722 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003732:	2c00      	cmp	r4, #0
 8003734:	d0f2      	beq.n	800371c <HAL_ADC_PollForConversion+0xac>
 8003736:	f7ff ff83 	bl	8003640 <HAL_GetTick>
 800373a:	1bc0      	subs	r0, r0, r7
 800373c:	42a0      	cmp	r0, r4
 800373e:	d9f0      	bls.n	8003722 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003740:	9b01      	ldr	r3, [sp, #4]
 8003742:	42ab      	cmp	r3, r5
 8003744:	d2ed      	bcs.n	8003722 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 8003746:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8003748:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800374a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800374c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8003756:	b003      	add	sp, #12
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800375a:	6919      	ldr	r1, [r3, #16]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_ADC_PollForConversion+0x160>)
 800375e:	4211      	tst	r1, r2
 8003760:	d114      	bne.n	800378c <HAL_ADC_PollForConversion+0x11c>
 8003762:	68d9      	ldr	r1, [r3, #12]
 8003764:	4211      	tst	r1, r2
 8003766:	bf14      	ite	ne
 8003768:	20fc      	movne	r0, #252	; 0xfc
 800376a:	2054      	moveq	r0, #84	; 0x54
 800376c:	e7d0      	b.n	8003710 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 800376e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8003772:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	f043 0320 	orr.w	r3, r3, #32
 800377a:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800377c:	b003      	add	sp, #12
 800377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003780:	b934      	cbnz	r4, 8003790 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	f012 0202 	ands.w	r2, r2, #2
 8003788:	d1a5      	bne.n	80036d6 <HAL_ADC_PollForConversion+0x66>
 800378a:	e7dd      	b.n	8003748 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800378c:	20fc      	movs	r0, #252	; 0xfc
 800378e:	e7bf      	b.n	8003710 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003790:	f7ff ff56 	bl	8003640 <HAL_GetTick>
 8003794:	1bc3      	subs	r3, r0, r7
 8003796:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003798:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800379a:	d99c      	bls.n	80036d6 <HAL_ADC_PollForConversion+0x66>
 800379c:	e7f1      	b.n	8003782 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	e79c      	b.n	80036dc <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037a2:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d1a6      	bne.n	80036f6 <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80037aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ae:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80037b2:	04db      	lsls	r3, r3, #19
 80037b4:	d49f      	bmi.n	80036f6 <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	62b3      	str	r3, [r6, #40]	; 0x28
 80037be:	e79b      	b.n	80036f8 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80037c0:	2029      	movs	r0, #41	; 0x29
 80037c2:	e7a5      	b.n	8003710 <HAL_ADC_PollForConversion+0xa0>
 80037c4:	20000004 	.word	0x20000004
 80037c8:	24924924 	.word	0x24924924
 80037cc:	12492492 	.word	0x12492492
 80037d0:	00249249 	.word	0x00249249

080037d4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037d4:	6803      	ldr	r3, [r0, #0]
 80037d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80037dc:	2300      	movs	r3, #0
{ 
 80037de:	b530      	push	{r4, r5, lr}
 80037e0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80037e2:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d074      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0xfa>
 80037ec:	2301      	movs	r3, #1
 80037ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037f2:	684b      	ldr	r3, [r1, #4]
 80037f4:	4602      	mov	r2, r0
 80037f6:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80037f8:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80037fa:	d932      	bls.n	8003862 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037fc:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80037fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8003802:	d84e      	bhi.n	80038a2 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003804:	f04f 0c1f 	mov.w	ip, #31
 8003808:	6808      	ldr	r0, [r1, #0]
 800380a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800380c:	3b23      	subs	r3, #35	; 0x23
 800380e:	fa00 fe03 	lsl.w	lr, r0, r3
 8003812:	fa0c f303 	lsl.w	r3, ip, r3
 8003816:	ea25 0303 	bic.w	r3, r5, r3
 800381a:	ea43 030e 	orr.w	r3, r3, lr
 800381e:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003820:	2809      	cmp	r0, #9
 8003822:	d930      	bls.n	8003886 <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003824:	f04f 0c07 	mov.w	ip, #7
 8003828:	688d      	ldr	r5, [r1, #8]
 800382a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	391e      	subs	r1, #30
 8003832:	408d      	lsls	r5, r1
 8003834:	fa0c f101 	lsl.w	r1, ip, r1
 8003838:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800383c:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003840:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003842:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003844:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003846:	d844      	bhi.n	80038d2 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_ADC_ConfigChannel+0x128>)
 800384a:	429c      	cmp	r4, r3
 800384c:	d038      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 800384e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003850:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003858:	2300      	movs	r3, #0
 800385a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800385e:	b003      	add	sp, #12
 8003860:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003862:	f04f 0c1f 	mov.w	ip, #31
 8003866:	6808      	ldr	r0, [r1, #0]
 8003868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800386c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800386e:	3b05      	subs	r3, #5
 8003870:	fa00 fe03 	lsl.w	lr, r0, r3
 8003874:	fa0c f303 	lsl.w	r3, ip, r3
 8003878:	ea25 0303 	bic.w	r3, r5, r3
 800387c:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003880:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003882:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003884:	d8ce      	bhi.n	8003824 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003886:	2507      	movs	r5, #7
 8003888:	6889      	ldr	r1, [r1, #8]
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003890:	4081      	lsls	r1, r0
 8003892:	fa05 f000 	lsl.w	r0, r5, r0
 8003896:	ea23 0300 	bic.w	r3, r3, r0
 800389a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800389e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038a0:	e7da      	b.n	8003858 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038a2:	f04f 0c1f 	mov.w	ip, #31
 80038a6:	6808      	ldr	r0, [r1, #0]
 80038a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80038aa:	3b41      	subs	r3, #65	; 0x41
 80038ac:	fa00 fe03 	lsl.w	lr, r0, r3
 80038b0:	fa0c f303 	lsl.w	r3, ip, r3
 80038b4:	ea25 0303 	bic.w	r3, r5, r3
 80038b8:	ea43 030e 	orr.w	r3, r3, lr
 80038bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038be:	e7af      	b.n	8003820 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80038c0:	68a3      	ldr	r3, [r4, #8]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	d405      	bmi.n	80038d2 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038c6:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ce:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d0:	d004      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d2:	2000      	movs	r0, #0
 80038d4:	e7c0      	b.n	8003858 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80038d6:	2002      	movs	r0, #2
}
 80038d8:	b003      	add	sp, #12
 80038da:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_ADC_ConfigChannel+0x12c>)
 80038de:	490b      	ldr	r1, [pc, #44]	; (800390c <HAL_ADC_ConfigChannel+0x130>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fba1 1303 	umull	r1, r3, r1, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80038f0:	9b01      	ldr	r3, [sp, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ed      	beq.n	80038d2 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80038fc:	9b01      	ldr	r3, [sp, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f9      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x11a>
 8003902:	e7e6      	b.n	80038d2 <HAL_ADC_ConfigChannel+0xf6>
 8003904:	40012400 	.word	0x40012400
 8003908:	20000004 	.word	0x20000004
 800390c:	431bde83 	.word	0x431bde83

08003910 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003910:	2300      	movs	r3, #0
{
 8003912:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003914:	6802      	ldr	r2, [r0, #0]
{
 8003916:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003918:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800391a:	6893      	ldr	r3, [r2, #8]
 800391c:	07d9      	lsls	r1, r3, #31
 800391e:	d427      	bmi.n	8003970 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <ADC_Enable+0x80>)
 8003922:	4604      	mov	r4, r0
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	481b      	ldr	r0, [pc, #108]	; (8003994 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8003928:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800392a:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800392e:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003932:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8003934:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003936:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003938:	9b01      	ldr	r3, [sp, #4]
 800393a:	b12b      	cbz	r3, 8003948 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 800393c:	9b01      	ldr	r3, [sp, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003942:	9b01      	ldr	r3, [sp, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f9      	bne.n	800393c <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003948:	f7ff fe7a 	bl	8003640 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800394c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800394e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	07da      	lsls	r2, r3, #31
 8003954:	d40c      	bmi.n	8003970 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003956:	f7ff fe73 	bl	8003640 <HAL_GetTick>
 800395a:	1b43      	subs	r3, r0, r5
 800395c:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800395e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003960:	d903      	bls.n	800396a <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	f012 0201 	ands.w	r2, r2, #1
 8003968:	d005      	beq.n	8003976 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	07db      	lsls	r3, r3, #31
 800396e:	d5f2      	bpl.n	8003956 <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003970:	2000      	movs	r0, #0
}
 8003972:	b003      	add	sp, #12
 8003974:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8003976:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800397a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003984:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003986:	4303      	orrs	r3, r0
 8003988:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800398a:	b003      	add	sp, #12
 800398c:	bd30      	pop	{r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	20000004 	.word	0x20000004
 8003994:	431bde83 	.word	0x431bde83

08003998 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003998:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800399c:	2b01      	cmp	r3, #1
 800399e:	d038      	beq.n	8003a12 <HAL_ADC_Start+0x7a>
 80039a0:	2301      	movs	r3, #1
{
 80039a2:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80039a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80039a8:	4604      	mov	r4, r0
 80039aa:	f7ff ffb1 	bl	8003910 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80039ae:	bb60      	cbnz	r0, 8003a0a <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 80039b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	4929      	ldr	r1, [pc, #164]	; (8003a5c <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039c2:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80039c4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039c6:	d026      	beq.n	8003a16 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039ce:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039d0:	6853      	ldr	r3, [r2, #4]
 80039d2:	0559      	lsls	r1, r3, #21
 80039d4:	d42b      	bmi.n	8003a2e <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80039d8:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039da:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039de:	bf18      	it	ne
 80039e0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80039e2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039e6:	bf18      	it	ne
 80039e8:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80039ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80039ee:	f06f 0302 	mvn.w	r3, #2
 80039f2:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80039f4:	6893      	ldr	r3, [r2, #8]
 80039f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039fe:	d01d      	beq.n	8003a3c <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003a00:	6893      	ldr	r3, [r2, #8]
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a06:	6093      	str	r3, [r2, #8]
}
 8003a08:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003a10:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003a12:	2002      	movs	r0, #2
}
 8003a14:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_ADC_Start+0xc8>)
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8003a1e:	d0d3      	beq.n	80039c8 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a26:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	055b      	lsls	r3, r3, #21
 8003a2c:	d5d3      	bpl.n	80039d6 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a3a:	e7cc      	b.n	80039d6 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_ADC_Start+0xc4>)
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a42:	6893      	ldr	r3, [r2, #8]
 8003a44:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8003a48:	6093      	str	r3, [r2, #8]
}
 8003a4a:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a4c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003a50:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a52:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003a56:	d1d3      	bne.n	8003a00 <HAL_ADC_Start+0x68>
 8003a58:	e7f3      	b.n	8003a42 <HAL_ADC_Start+0xaa>
 8003a5a:	bf00      	nop
 8003a5c:	40012800 	.word	0x40012800
 8003a60:	40012400 	.word	0x40012400

08003a64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a64:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a66:	6803      	ldr	r3, [r0, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	07d4      	lsls	r4, r2, #31
 8003a6c:	d401      	bmi.n	8003a72 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a6e:	2000      	movs	r0, #0
}
 8003a70:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003a72:	4604      	mov	r4, r0
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003a7c:	f7ff fde0 	bl	8003640 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a80:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003a82:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	07d9      	lsls	r1, r3, #31
 8003a88:	d5f1      	bpl.n	8003a6e <ADC_ConversionStop_Disable+0xa>
 8003a8a:	e002      	b.n	8003a92 <ADC_ConversionStop_Disable+0x2e>
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	07db      	lsls	r3, r3, #31
 8003a90:	d5ed      	bpl.n	8003a6e <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a92:	f7ff fdd5 	bl	8003640 <HAL_GetTick>
 8003a96:	1b43      	subs	r3, r0, r5
 8003a98:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a9a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a9c:	d9f6      	bls.n	8003a8c <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	07d2      	lsls	r2, r2, #31
 8003aa2:	d5f3      	bpl.n	8003a8c <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8003aa4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ab0:	4303      	orrs	r3, r0
 8003ab2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
 8003ab6:	bf00      	nop

08003ab8 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d075      	beq.n	8003ba8 <HAL_ADC_Init+0xf0>
{
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d052      	beq.n	8003b6c <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff ffcc 	bl	8003a64 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ace:	f013 0310 	ands.w	r3, r3, #16
 8003ad2:	d145      	bne.n	8003b60 <HAL_ADC_Init+0xa8>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d143      	bne.n	8003b60 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8003ad8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ada:	4d4a      	ldr	r5, [pc, #296]	; (8003c04 <HAL_ADC_Init+0x14c>)
 8003adc:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003ade:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8003ae2:	f021 0102 	bic.w	r1, r1, #2
 8003ae6:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003aea:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8003aec:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003aee:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003af0:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003af2:	d053      	beq.n	8003b9c <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003af4:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003af6:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8003afa:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003afc:	68a5      	ldr	r5, [r4, #8]
 8003afe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003b02:	d039      	beq.n	8003b78 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b04:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b08:	2d01      	cmp	r5, #1
 8003b0a:	bf0c      	ite	eq
 8003b0c:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8003b10:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b14:	f1be 0f01 	cmp.w	lr, #1
 8003b18:	d052      	beq.n	8003bc0 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 8003b1a:	6856      	ldr	r6, [r2, #4]
 8003b1c:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003b20:	ea46 060c 	orr.w	r6, r6, ip
 8003b24:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b26:	6897      	ldr	r7, [r2, #8]
 8003b28:	4e37      	ldr	r6, [pc, #220]	; (8003c08 <HAL_ADC_Init+0x150>)
 8003b2a:	403e      	ands	r6, r7
 8003b2c:	430e      	orrs	r6, r1
 8003b2e:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b30:	2d01      	cmp	r5, #1
 8003b32:	d02f      	beq.n	8003b94 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8003b34:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8003b36:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8003b3a:	ea4c 0303 	orr.w	r3, ip, r3
 8003b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_ADC_Init+0x154>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	4299      	cmp	r1, r3
 8003b48:	d030      	beq.n	8003bac <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b4e:	f023 0312 	bic.w	r3, r3, #18
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b5a:	4303      	orrs	r3, r0
 8003b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8003b6c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003b6e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003b72:	f7ff f8bd 	bl	8002cf0 <HAL_ADC_MspInit>
 8003b76:	e7a6      	b.n	8003ac6 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b78:	7d27      	ldrb	r7, [r4, #20]
 8003b7a:	2f01      	cmp	r7, #1
 8003b7c:	d01f      	beq.n	8003bbe <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8003b7e:	6853      	ldr	r3, [r2, #4]
 8003b80:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b8a:	6895      	ldr	r5, [r2, #8]
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_ADC_Init+0x150>)
 8003b8e:	402b      	ands	r3, r5
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b94:	6923      	ldr	r3, [r4, #16]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	051b      	lsls	r3, r3, #20
 8003b9a:	e7cb      	b.n	8003b34 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b9c:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8003ba0:	bf08      	it	eq
 8003ba2:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8003ba6:	e7a5      	b.n	8003af4 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
}
 8003baa:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8003bac:	2300      	movs	r3, #0
 8003bae:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003bbe:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bc0:	b1c6      	cbz	r6, 8003bf4 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bc4:	f046 0620 	orr.w	r6, r6, #32
 8003bc8:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bcc:	f046 0601 	orr.w	r6, r6, #1
 8003bd0:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8003bd2:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bd4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003bd8:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003bdc:	ea46 060c 	orr.w	r6, r6, ip
 8003be0:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003be2:	6897      	ldr	r7, [r2, #8]
 8003be4:	4e08      	ldr	r6, [pc, #32]	; (8003c08 <HAL_ADC_Init+0x150>)
 8003be6:	ea06 0607 	and.w	r6, r6, r7
 8003bea:	ea46 0601 	orr.w	r6, r6, r1
 8003bee:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bf0:	d19e      	bne.n	8003b30 <HAL_ADC_Init+0x78>
 8003bf2:	e7cf      	b.n	8003b94 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003bf4:	69a6      	ldr	r6, [r4, #24]
 8003bf6:	3e01      	subs	r6, #1
 8003bf8:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8003bfc:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8003c00:	e7e7      	b.n	8003bd2 <HAL_ADC_Init+0x11a>
 8003c02:	bf00      	nop
 8003c04:	40013c00 	.word	0x40013c00
 8003c08:	ffe1f7fd 	.word	0xffe1f7fd
 8003c0c:	ff1f0efe 	.word	0xff1f0efe

08003c10 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c10:	2300      	movs	r3, #0
{
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8003c16:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c18:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d05f      	beq.n	8003ce0 <HAL_ADCEx_Calibration_Start+0xd0>
 8003c20:	2301      	movs	r3, #1
 8003c22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c26:	4604      	mov	r4, r0
 8003c28:	f7ff ff1c 	bl	8003a64 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b128      	cbz	r0, 8003c3c <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c30:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8003c32:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8003c34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c3e:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c4e:	2002      	movs	r0, #2
 8003c50:	6816      	ldr	r6, [r2, #0]
 8003c52:	f001 fa95 	bl	8005180 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c56:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c5a:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8003c5c:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8003c5e:	9b01      	ldr	r3, [sp, #4]
 8003c60:	b12b      	cbz	r3, 8003c6e <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8003c62:	9b01      	ldr	r3, [sp, #4]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003c68:	9b01      	ldr	r3, [sp, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f9      	bne.n	8003c62 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f7ff fe4e 	bl	8003910 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	6893      	ldr	r3, [r2, #8]
 8003c78:	f043 0308 	orr.w	r3, r3, #8
 8003c7c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8003c7e:	f7ff fcdf 	bl	8003640 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c82:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8003c84:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	0711      	lsls	r1, r2, #28
 8003c8a:	d50b      	bpl.n	8003ca4 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c8c:	f7ff fcd8 	bl	8003640 <HAL_GetTick>
 8003c90:	1b83      	subs	r3, r0, r6
 8003c92:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c94:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c96:	d902      	bls.n	8003c9e <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	0712      	lsls	r2, r2, #28
 8003c9c:	d424      	bmi.n	8003ce8 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	0710      	lsls	r0, r2, #28
 8003ca2:	d4f3      	bmi.n	8003c8c <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	f042 0204 	orr.w	r2, r2, #4
 8003caa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003cac:	f7ff fcc8 	bl	8003640 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cb0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8003cb2:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0759      	lsls	r1, r3, #29
 8003cb8:	d50b      	bpl.n	8003cd2 <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cba:	f7ff fcc1 	bl	8003640 <HAL_GetTick>
 8003cbe:	1b83      	subs	r3, r0, r6
 8003cc0:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cc2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cc4:	d902      	bls.n	8003ccc <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	0752      	lsls	r2, r2, #29
 8003cca:	d40d      	bmi.n	8003ce8 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	075b      	lsls	r3, r3, #29
 8003cd0:	d4f3      	bmi.n	8003cba <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8003cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cde:	e7a7      	b.n	8003c30 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8003ce0:	2502      	movs	r5, #2
}
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8003ce8:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8003cea:	2200      	movs	r2, #0
}
 8003cec:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8003cee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8003cf0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8003cf4:	f023 0312 	bic.w	r3, r3, #18
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	bf00      	nop
 8003d04:	20000004 	.word	0x20000004

08003d08 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d08:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d0c:	4906      	ldr	r1, [pc, #24]	; (8003d28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d0e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d10:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d16:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003d24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2e:	b500      	push	{lr}
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d36:	f1c3 0e07 	rsb	lr, r3, #7
 8003d3a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d42:	bf28      	it	cs
 8003d44:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d48:	f1bc 0f06 	cmp.w	ip, #6
 8003d4c:	d91b      	bls.n	8003d86 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d52:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	fa0c fc03 	lsl.w	ip, ip, r3
 8003d58:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003d60:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003d64:	ea21 010c 	bic.w	r1, r1, ip
 8003d68:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d6a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003d70:	db0c      	blt.n	8003d8c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	0109      	lsls	r1, r1, #4
 8003d74:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d78:	b2c9      	uxtb	r1, r1
 8003d7a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d7e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d86:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d88:	4613      	mov	r3, r2
 8003d8a:	e7e7      	b.n	8003d5c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_NVIC_SetPriority+0x78>)
 8003d8e:	f000 000f 	and.w	r0, r0, #15
 8003d92:	0109      	lsls	r1, r1, #4
 8003d94:	b2c9      	uxtb	r1, r1
 8003d96:	4403      	add	r3, r0
 8003d98:	7619      	strb	r1, [r3, #24]
 8003d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d9e:	bf00      	nop
 8003da0:	e000ed00 	.word	0xe000ed00
 8003da4:	e000ecfc 	.word	0xe000ecfc

08003da8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003da8:	2800      	cmp	r0, #0
 8003daa:	db07      	blt.n	8003dbc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dac:	2301      	movs	r3, #1
 8003dae:	f000 011f 	and.w	r1, r0, #31
 8003db2:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_NVIC_EnableIRQ+0x18>)
 8003db4:	0940      	lsrs	r0, r0, #5
 8003db6:	408b      	lsls	r3, r1
 8003db8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000e100 	.word	0xe000e100

08003dc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	3801      	subs	r0, #1
 8003dc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003dca:	d20f      	bcs.n	8003dec <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd6:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd8:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dda:	4c05      	ldr	r4, [pc, #20]	; (8003df0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ddc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003de6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de8:	6119      	str	r1, [r3, #16]
 8003dea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dec:	2001      	movs	r0, #1
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df8:	680e      	ldr	r6, [r1, #0]
{
 8003dfa:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfc:	2e00      	cmp	r6, #0
 8003dfe:	f000 80be 	beq.w	8003f7e <HAL_GPIO_Init+0x18a>
 8003e02:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e04:	4f85      	ldr	r7, [pc, #532]	; (800401c <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8003e06:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8003e08:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e0a:	4d85      	ldr	r5, [pc, #532]	; (8004020 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8003e0c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8004024 <HAL_GPIO_Init+0x230>
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8003e12:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e14:	fa36 f403 	lsrs.w	r4, r6, r3
 8003e18:	f102 0204 	add.w	r2, r2, #4
 8003e1c:	f000 80af 	beq.w	8003f7e <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8003e20:	2401      	movs	r4, #1
 8003e22:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8003e24:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e28:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003e2c:	d1f1      	bne.n	8003e12 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003e2e:	684e      	ldr	r6, [r1, #4]
 8003e30:	2e12      	cmp	r6, #18
 8003e32:	f200 80a7 	bhi.w	8003f84 <HAL_GPIO_Init+0x190>
 8003e36:	2e12      	cmp	r6, #18
 8003e38:	d81a      	bhi.n	8003e70 <HAL_GPIO_Init+0x7c>
 8003e3a:	e8df f006 	tbb	[pc, r6]
 8003e3e:	c2b0      	.short	0xc2b0
 8003e40:	1919d7be 	.word	0x1919d7be
 8003e44:	19191919 	.word	0x19191919
 8003e48:	19191919 	.word	0x19191919
 8003e4c:	ba191919 	.word	0xba191919
 8003e50:	c5          	.byte	0xc5
 8003e51:	00          	.byte	0x00
 8003e52:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004028 <HAL_GPIO_Init+0x234>
 8003e56:	4576      	cmp	r6, lr
 8003e58:	f000 80a1 	beq.w	8003f9e <HAL_GPIO_Init+0x1aa>
 8003e5c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003e60:	4576      	cmp	r6, lr
 8003e62:	f000 809c 	beq.w	8003f9e <HAL_GPIO_Init+0x1aa>
 8003e66:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8003e6a:	4576      	cmp	r6, lr
 8003e6c:	f000 8097 	beq.w	8003f9e <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003e74:	bf9c      	itt	ls
 8003e76:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e78:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e7a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e7e:	bf84      	itt	hi
 8003e80:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e84:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e88:	f8de 4000 	ldr.w	r4, [lr]
 8003e8c:	fa0a f90b 	lsl.w	r9, sl, fp
 8003e90:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003e94:	ea24 040b 	bic.w	r4, r4, fp
 8003e98:	ea44 0409 	orr.w	r4, r4, r9
 8003e9c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea0:	684c      	ldr	r4, [r1, #4]
 8003ea2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003ea6:	f000 8082 	beq.w	8003fae <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eaa:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eae:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eb2:	f04e 0e01 	orr.w	lr, lr, #1
 8003eb6:	f8c7 e018 	str.w	lr, [r7, #24]
 8003eba:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ebe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec2:	f00e 0e01 	and.w	lr, lr, #1
 8003ec6:	f8cd e004 	str.w	lr, [sp, #4]
 8003eca:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003ece:	f023 0e03 	bic.w	lr, r3, #3
 8003ed2:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003ed6:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003eda:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ede:	fa06 f609 	lsl.w	r6, r6, r9
 8003ee2:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ee6:	f8df b144 	ldr.w	fp, [pc, #324]	; 800402c <HAL_GPIO_Init+0x238>
 8003eea:	4558      	cmp	r0, fp
 8003eec:	d01b      	beq.n	8003f26 <HAL_GPIO_Init+0x132>
 8003eee:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8003ef2:	4558      	cmp	r0, fp
 8003ef4:	d073      	beq.n	8003fde <HAL_GPIO_Init+0x1ea>
 8003ef6:	f8df b138 	ldr.w	fp, [pc, #312]	; 8004030 <HAL_GPIO_Init+0x23c>
 8003efa:	4558      	cmp	r0, fp
 8003efc:	d068      	beq.n	8003fd0 <HAL_GPIO_Init+0x1dc>
 8003efe:	f8df b134 	ldr.w	fp, [pc, #308]	; 8004034 <HAL_GPIO_Init+0x240>
 8003f02:	4558      	cmp	r0, fp
 8003f04:	d07c      	beq.n	8004000 <HAL_GPIO_Init+0x20c>
 8003f06:	f8df b130 	ldr.w	fp, [pc, #304]	; 8004038 <HAL_GPIO_Init+0x244>
 8003f0a:	4558      	cmp	r0, fp
 8003f0c:	d07f      	beq.n	800400e <HAL_GPIO_Init+0x21a>
 8003f0e:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800403c <HAL_GPIO_Init+0x248>
 8003f12:	4558      	cmp	r0, fp
 8003f14:	bf0c      	ite	eq
 8003f16:	f04f 0b05 	moveq.w	fp, #5
 8003f1a:	f04f 0b06 	movne.w	fp, #6
 8003f1e:	fa0b f909 	lsl.w	r9, fp, r9
 8003f22:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003f26:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003f2a:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f2c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003f30:	bf14      	ite	ne
 8003f32:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f36:	ea26 060c 	biceq.w	r6, r6, ip
 8003f3a:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003f3c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003f42:	bf14      	ite	ne
 8003f44:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f48:	ea26 060c 	biceq.w	r6, r6, ip
 8003f4c:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f4e:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f50:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f54:	bf14      	ite	ne
 8003f56:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f5a:	ea26 060c 	biceq.w	r6, r6, ip
 8003f5e:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f60:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f64:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f66:	d01f      	beq.n	8003fa8 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f68:	ea44 040c 	orr.w	r4, r4, ip
 8003f6c:	60ec      	str	r4, [r5, #12]
 8003f6e:	680e      	ldr	r6, [r1, #0]
	position++;
 8003f70:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	fa36 f403 	lsrs.w	r4, r6, r3
 8003f76:	f102 0204 	add.w	r2, r2, #4
 8003f7a:	f47f af51 	bne.w	8003e20 <HAL_GPIO_Init+0x2c>
  }
}
 8003f7e:	b003      	add	sp, #12
 8003f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003f84:	4546      	cmp	r6, r8
 8003f86:	d00a      	beq.n	8003f9e <HAL_GPIO_Init+0x1aa>
 8003f88:	f67f af63 	bls.w	8003e52 <HAL_GPIO_Init+0x5e>
 8003f8c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8004040 <HAL_GPIO_Init+0x24c>
 8003f90:	4576      	cmp	r6, lr
 8003f92:	d004      	beq.n	8003f9e <HAL_GPIO_Init+0x1aa>
 8003f94:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003f98:	4576      	cmp	r6, lr
 8003f9a:	f47f af69 	bne.w	8003e70 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f9e:	688e      	ldr	r6, [r1, #8]
 8003fa0:	bb3e      	cbnz	r6, 8003ff2 <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fa2:	f04f 0a04 	mov.w	sl, #4
 8003fa6:	e763      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fa8:	ea24 040c 	bic.w	r4, r4, ip
 8003fac:	60ec      	str	r4, [r5, #12]
 8003fae:	680e      	ldr	r6, [r1, #0]
 8003fb0:	e72f      	b.n	8003e12 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fb2:	68cc      	ldr	r4, [r1, #12]
 8003fb4:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003fb8:	e75a      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fba:	68cc      	ldr	r4, [r1, #12]
 8003fbc:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003fc0:	e756      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fc2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003fc6:	e753      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fc8:	68cc      	ldr	r4, [r1, #12]
 8003fca:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003fce:	e74f      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fd0:	f04f 0b02 	mov.w	fp, #2
 8003fd4:	fa0b f909 	lsl.w	r9, fp, r9
 8003fd8:	ea46 0609 	orr.w	r6, r6, r9
 8003fdc:	e7a3      	b.n	8003f26 <HAL_GPIO_Init+0x132>
 8003fde:	f04f 0b01 	mov.w	fp, #1
 8003fe2:	fa0b f909 	lsl.w	r9, fp, r9
 8003fe6:	ea46 0609 	orr.w	r6, r6, r9
 8003fea:	e79c      	b.n	8003f26 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8003fec:	f04f 0a00 	mov.w	sl, #0
 8003ff0:	e73e      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ff2:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ff4:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003ff8:	bf0c      	ite	eq
 8003ffa:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003ffc:	6144      	strne	r4, [r0, #20]
 8003ffe:	e737      	b.n	8003e70 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004000:	f04f 0b03 	mov.w	fp, #3
 8004004:	fa0b f909 	lsl.w	r9, fp, r9
 8004008:	ea46 0609 	orr.w	r6, r6, r9
 800400c:	e78b      	b.n	8003f26 <HAL_GPIO_Init+0x132>
 800400e:	f04f 0b04 	mov.w	fp, #4
 8004012:	fa0b f909 	lsl.w	r9, fp, r9
 8004016:	ea46 0609 	orr.w	r6, r6, r9
 800401a:	e784      	b.n	8003f26 <HAL_GPIO_Init+0x132>
 800401c:	40021000 	.word	0x40021000
 8004020:	40010400 	.word	0x40010400
 8004024:	10220000 	.word	0x10220000
 8004028:	10120000 	.word	0x10120000
 800402c:	40010800 	.word	0x40010800
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	40011800 	.word	0x40011800
 800403c:	40011c00 	.word	0x40011c00
 8004040:	10310000 	.word	0x10310000

08004044 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004044:	6883      	ldr	r3, [r0, #8]
 8004046:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004048:	bf14      	ite	ne
 800404a:	2001      	movne	r0, #1
 800404c:	2000      	moveq	r0, #0
 800404e:	4770      	bx	lr

08004050 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004050:	b902      	cbnz	r2, 8004054 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004052:	0409      	lsls	r1, r1, #16
 8004054:	6101      	str	r1, [r0, #16]
  }
}
 8004056:	4770      	bx	lr

08004058 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800405e:	6951      	ldr	r1, [r2, #20]
 8004060:	4201      	tst	r1, r0
 8004062:	d100      	bne.n	8004066 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004064:	4770      	bx	lr
{
 8004066:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004068:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800406a:	f7ff fff5 	bl	8004058 <HAL_GPIO_EXTI_Callback>
}
 800406e:	bd08      	pop	{r3, pc}
 8004070:	40010400 	.word	0x40010400

08004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004078:	4680      	mov	r8, r0
 800407a:	460e      	mov	r6, r1
 800407c:	4617      	mov	r7, r2
 800407e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004080:	f8d8 4000 	ldr.w	r4, [r8]
 8004084:	e004      	b.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004086:	6965      	ldr	r5, [r4, #20]
 8004088:	056a      	lsls	r2, r5, #21
 800408a:	d409      	bmi.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	1c7b      	adds	r3, r7, #1
 800408e:	d121      	bne.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004090:	6960      	ldr	r0, [r4, #20]
 8004092:	ea26 0000 	bic.w	r0, r6, r0
 8004096:	b280      	uxth	r0, r0
 8004098:	2800      	cmp	r0, #0
 800409a:	d1f4      	bne.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 800409c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a8:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 80040aa:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b0:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b2:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b4:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c0:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80040c4:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 80040d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7ff fab4 	bl	8003640 <HAL_GetTick>
 80040d8:	eba0 0009 	sub.w	r0, r0, r9
 80040dc:	42b8      	cmp	r0, r7
 80040de:	d801      	bhi.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 80040e0:	2f00      	cmp	r7, #0
 80040e2:	d1cd      	bne.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e8:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ec:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 80040f8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80040fe:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8004106:	e7c9      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08004108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	4606      	mov	r6, r0
 800410c:	460d      	mov	r5, r1
 800410e:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004110:	e008      	b.n	8004124 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004112:	6962      	ldr	r2, [r4, #20]
 8004114:	06d2      	lsls	r2, r2, #27
 8004116:	d41b      	bmi.n	8004150 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7ff fa92 	bl	8003640 <HAL_GetTick>
 800411c:	1bc0      	subs	r0, r0, r7
 800411e:	42a8      	cmp	r0, r5
 8004120:	d807      	bhi.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8004122:	b135      	cbz	r5, 8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004124:	6834      	ldr	r4, [r6, #0]
 8004126:	6963      	ldr	r3, [r4, #20]
 8004128:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800412c:	d0f1      	beq.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800412e:	2000      	movs	r0, #0
}
 8004130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004142:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 800414a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	6433      	str	r3, [r6, #64]	; 0x40
}
 800414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004150:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004154:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004156:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004158:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004162:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004164:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8004168:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800416a:	6432      	str	r2, [r6, #64]	; 0x40
}
 800416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416e:	bf00      	nop

08004170 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	4605      	mov	r5, r0
 8004174:	460e      	mov	r6, r1
 8004176:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004178:	682c      	ldr	r4, [r5, #0]
 800417a:	e001      	b.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800417c:	1c73      	adds	r3, r6, #1
 800417e:	d119      	bne.n	80041b4 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	6963      	ldr	r3, [r4, #20]
 8004182:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004186:	d113      	bne.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004188:	6960      	ldr	r0, [r4, #20]
 800418a:	0542      	lsls	r2, r0, #21
 800418c:	d5f6      	bpl.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004196:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004198:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041a0:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041a6:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 80041aa:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ac:	642a      	str	r2, [r5, #64]	; 0x40
}
 80041ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80041b0:	2000      	movs	r0, #0
}
 80041b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b4:	f7ff fa44 	bl	8003640 <HAL_GetTick>
 80041b8:	1bc0      	subs	r0, r0, r7
 80041ba:	42b0      	cmp	r0, r6
 80041bc:	d801      	bhi.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d1da      	bne.n	8004178 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80041d2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80041da:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	642b      	str	r3, [r5, #64]	; 0x40
}
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	4605      	mov	r5, r0
 80041e4:	460e      	mov	r6, r1
 80041e6:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e8:	682c      	ldr	r4, [r5, #0]
 80041ea:	e001      	b.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	1c73      	adds	r3, r6, #1
 80041ee:	d119      	bne.n	8004224 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f0:	6963      	ldr	r3, [r4, #20]
 80041f2:	f013 0304 	ands.w	r3, r3, #4
 80041f6:	d113      	bne.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	6960      	ldr	r0, [r4, #20]
 80041fa:	0542      	lsls	r2, r0, #21
 80041fc:	d5f6      	bpl.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004210:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004212:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004216:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 800421a:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800421c:	642a      	str	r2, [r5, #64]	; 0x40
}
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004220:	2000      	movs	r0, #0
}
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7ff fa0c 	bl	8003640 <HAL_GetTick>
 8004228:	1bc0      	subs	r0, r0, r7
 800422a:	42b0      	cmp	r0, r6
 800422c:	d801      	bhi.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 800422e:	2e00      	cmp	r6, #0
 8004230:	d1da      	bne.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004234:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004242:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800424a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	642b      	str	r3, [r5, #64]	; 0x40
}
 800424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004250 <I2C_RequestMemoryWrite>:
{
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004254:	6805      	ldr	r5, [r0, #0]
{
 8004256:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	682b      	ldr	r3, [r5, #0]
{
 800425a:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004260:	4607      	mov	r7, r0
 8004262:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 8004266:	4688      	mov	r8, r1
 8004268:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426a:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426c:	e001      	b.n	8004272 <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 800426e:	1c71      	adds	r1, r6, #1
 8004270:	d110      	bne.n	8004294 <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004272:	696c      	ldr	r4, [r5, #20]
 8004274:	07e3      	lsls	r3, r4, #31
 8004276:	d5fa      	bpl.n	800426e <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004278:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800427c:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427e:	4653      	mov	r3, sl
 8004280:	4632      	mov	r2, r6
 8004282:	4638      	mov	r0, r7
 8004284:	492e      	ldr	r1, [pc, #184]	; (8004340 <I2C_RequestMemoryWrite+0xf0>)
 8004286:	f7ff fef5 	bl	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800428a:	b160      	cbz	r0, 80042a6 <I2C_RequestMemoryWrite+0x56>
    return HAL_ERROR;
 800428c:	2001      	movs	r0, #1
}
 800428e:	b003      	add	sp, #12
 8004290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004294:	f7ff f9d4 	bl	8003640 <HAL_GetTick>
 8004298:	eba0 000a 	sub.w	r0, r0, sl
 800429c:	4286      	cmp	r6, r0
 800429e:	d31a      	bcc.n	80042d6 <I2C_RequestMemoryWrite+0x86>
 80042a0:	b1ce      	cbz	r6, 80042d6 <I2C_RequestMemoryWrite+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a2:	683d      	ldr	r5, [r7, #0]
 80042a4:	e7e5      	b.n	8004272 <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9001      	str	r0, [sp, #4]
 80042aa:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ac:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	9101      	str	r1, [sp, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b8:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ba:	f7ff ff59 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d133      	bne.n	800432a <I2C_RequestMemoryWrite+0xda>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c2:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c6:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c8:	d121      	bne.n	800430e <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ca:	fa5f f289 	uxtb.w	r2, r9
 80042ce:	611a      	str	r2, [r3, #16]
}
 80042d0:	b003      	add	sp, #12
 80042d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042d6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80042d8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042da:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042e0:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e6:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e8:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80042ec:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f2:	680b      	ldr	r3, [r1, #0]
 80042f4:	05da      	lsls	r2, r3, #23
 80042f6:	d506      	bpl.n	8004306 <I2C_RequestMemoryWrite+0xb6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80042fc:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
}
 8004300:	b003      	add	sp, #12
 8004302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
}
 8004308:	b003      	add	sp, #12
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800430e:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8004312:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004314:	4652      	mov	r2, sl
 8004316:	4631      	mov	r1, r6
 8004318:	4638      	mov	r0, r7
 800431a:	f7ff ff29 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 800431e:	b920      	cbnz	r0, 800432a <I2C_RequestMemoryWrite+0xda>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	fa5f f389 	uxtb.w	r3, r9
 8004326:	6113      	str	r3, [r2, #16]
 8004328:	e7b1      	b.n	800428e <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	2b04      	cmp	r3, #4
 800432e:	d1ad      	bne.n	800428c <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 8004332:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	6813      	ldr	r3, [r2, #0]
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e7a7      	b.n	800428e <I2C_RequestMemoryWrite+0x3e>
 800433e:	bf00      	nop
 8004340:	00010002 	.word	0x00010002

08004344 <I2C_RequestMemoryRead>:
{
 8004344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004348:	6805      	ldr	r5, [r0, #0]
{
 800434a:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434c:	682b      	ldr	r3, [r5, #0]
{
 800434e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004354:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004356:	682b      	ldr	r3, [r5, #0]
{
 8004358:	4607      	mov	r7, r0
 800435a:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004362:	4688      	mov	r8, r1
 8004364:	4692      	mov	sl, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004366:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004368:	e001      	b.n	800436e <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800436a:	1c74      	adds	r4, r6, #1
 800436c:	d112      	bne.n	8004394 <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800436e:	696c      	ldr	r4, [r5, #20]
 8004370:	07e1      	lsls	r1, r4, #31
 8004372:	d5fa      	bpl.n	800436a <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004374:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8004378:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437a:	4632      	mov	r2, r6
 800437c:	464b      	mov	r3, r9
 800437e:	4638      	mov	r0, r7
 8004380:	4943      	ldr	r1, [pc, #268]	; (8004490 <I2C_RequestMemoryRead+0x14c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004382:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004386:	f7ff fe75 	bl	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800438a:	b168      	cbz	r0, 80043a8 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 800438c:	2001      	movs	r0, #1
}
 800438e:	b003      	add	sp, #12
 8004390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7ff f954 	bl	8003640 <HAL_GetTick>
 8004398:	eba0 0009 	sub.w	r0, r0, r9
 800439c:	4286      	cmp	r6, r0
 800439e:	d337      	bcc.n	8004410 <I2C_RequestMemoryRead+0xcc>
 80043a0:	2e00      	cmp	r6, #0
 80043a2:	d035      	beq.n	8004410 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	683d      	ldr	r5, [r7, #0]
 80043a6:	e7e2      	b.n	800436e <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	9001      	str	r0, [sp, #4]
 80043ac:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	464a      	mov	r2, r9
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b0:	9101      	str	r1, [sp, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b4:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b8:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043bc:	f7ff fed8 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d13d      	bne.n	8004440 <I2C_RequestMemoryRead+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c4:	f1bb 0f01 	cmp.w	fp, #1
 80043c8:	d148      	bne.n	800445c <I2C_RequestMemoryRead+0x118>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fa5f f28a 	uxtb.w	r2, sl
 80043d0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	464a      	mov	r2, r9
 80043d4:	4631      	mov	r1, r6
 80043d6:	4638      	mov	r0, r7
 80043d8:	f7ff feca 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d12f      	bne.n	8004440 <I2C_RequestMemoryRead+0xfc>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	680b      	ldr	r3, [r1, #0]
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ea:	e001      	b.n	80043f0 <I2C_RequestMemoryRead+0xac>
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	1c72      	adds	r2, r6, #1
 80043ee:	d145      	bne.n	800447c <I2C_RequestMemoryRead+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f0:	694b      	ldr	r3, [r1, #20]
 80043f2:	07db      	lsls	r3, r3, #31
 80043f4:	d5fa      	bpl.n	80043ec <I2C_RequestMemoryRead+0xa8>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f6:	f048 0401 	orr.w	r4, r8, #1
 80043fa:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fc:	464b      	mov	r3, r9
 80043fe:	4632      	mov	r2, r6
 8004400:	4638      	mov	r0, r7
 8004402:	4923      	ldr	r1, [pc, #140]	; (8004490 <I2C_RequestMemoryRead+0x14c>)
 8004404:	f7ff fe36 	bl	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8004408:	3800      	subs	r0, #0
 800440a:	bf18      	it	ne
 800440c:	2001      	movne	r0, #1
 800440e:	e7be      	b.n	800438e <I2C_RequestMemoryRead+0x4a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004410:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004412:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004414:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004416:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800441a:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800441e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004420:	6839      	ldr	r1, [r7, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004422:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004426:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442c:	680b      	ldr	r3, [r1, #0]
 800442e:	05d8      	lsls	r0, r3, #23
 8004430:	d510      	bpl.n	8004454 <I2C_RequestMemoryRead+0x110>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004432:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004436:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
}
 800443a:	b003      	add	sp, #12
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d1a2      	bne.n	800438c <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8004448:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e79c      	b.n	800438e <I2C_RequestMemoryRead+0x4a>
    return HAL_TIMEOUT;
 8004454:	2003      	movs	r0, #3
}
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8004462:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004464:	4631      	mov	r1, r6
 8004466:	464a      	mov	r2, r9
 8004468:	4638      	mov	r0, r7
 800446a:	f7ff fe81 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 800446e:	2800      	cmp	r0, #0
 8004470:	d1e6      	bne.n	8004440 <I2C_RequestMemoryRead+0xfc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	fa5f f38a 	uxtb.w	r3, sl
 8004478:	6113      	str	r3, [r2, #16]
 800447a:	e7aa      	b.n	80043d2 <I2C_RequestMemoryRead+0x8e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7ff f8e0 	bl	8003640 <HAL_GetTick>
 8004480:	eba0 0309 	sub.w	r3, r0, r9
 8004484:	429e      	cmp	r6, r3
 8004486:	d3c3      	bcc.n	8004410 <I2C_RequestMemoryRead+0xcc>
 8004488:	2e00      	cmp	r6, #0
 800448a:	d0c1      	beq.n	8004410 <I2C_RequestMemoryRead+0xcc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	e7af      	b.n	80043f0 <I2C_RequestMemoryRead+0xac>
 8004490:	00010002 	.word	0x00010002

08004494 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004494:	2800      	cmp	r0, #0
 8004496:	f000 80b9 	beq.w	800460c <HAL_I2C_Init+0x178>
{
 800449a:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044a0:	4604      	mov	r4, r0
 80044a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8098 	beq.w	80045dc <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ac:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80044ae:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ca:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044cc:	f000 fdb6 	bl	800503c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	494f      	ldr	r1, [pc, #316]	; (8004610 <HAL_I2C_Init+0x17c>)
 80044d4:	428b      	cmp	r3, r1
 80044d6:	d84f      	bhi.n	8004578 <HAL_I2C_Init+0xe4>
 80044d8:	4a4e      	ldr	r2, [pc, #312]	; (8004614 <HAL_I2C_Init+0x180>)
 80044da:	4290      	cmp	r0, r2
 80044dc:	d97c      	bls.n	80045d8 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80044de:	4d4e      	ldr	r5, [pc, #312]	; (8004618 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044e0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80044e2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044e6:	1e43      	subs	r3, r0, #1
 80044e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ec:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044f0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80044f2:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044f4:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044f6:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80044fe:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004502:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004504:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004506:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004508:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800450c:	ea41 010c 	orr.w	r1, r1, ip
 8004510:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004512:	69d1      	ldr	r1, [r2, #28]
 8004514:	ea13 0f0e 	tst.w	r3, lr
 8004518:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800451c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004520:	d161      	bne.n	80045e6 <HAL_I2C_Init+0x152>
 8004522:	2304      	movs	r3, #4
 8004524:	430b      	orrs	r3, r1
 8004526:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004528:	6811      	ldr	r1, [r2, #0]
 800452a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800452e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004532:	4303      	orrs	r3, r0
 8004534:	430b      	orrs	r3, r1
 8004536:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004538:	6891      	ldr	r1, [r2, #8]
 800453a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800453e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004542:	4303      	orrs	r3, r0
 8004544:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004548:	430b      	orrs	r3, r1
 800454a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800454c:	68d0      	ldr	r0, [r2, #12]
 800454e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8004552:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004556:	430b      	orrs	r3, r1
 8004558:	4303      	orrs	r3, r0
 800455a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800455c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455e:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004566:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004568:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800456a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004574:	4608      	mov	r0, r1
}
 8004576:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004578:	4a28      	ldr	r2, [pc, #160]	; (800461c <HAL_I2C_Init+0x188>)
 800457a:	4290      	cmp	r0, r2
 800457c:	d92c      	bls.n	80045d8 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800457e:	4d26      	ldr	r5, [pc, #152]	; (8004618 <HAL_I2C_Init+0x184>)
 8004580:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004584:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004588:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458c:	fb02 f101 	mul.w	r1, r2, r1
 8004590:	4d23      	ldr	r5, [pc, #140]	; (8004620 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004592:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004594:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004598:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800459a:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80045a0:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80045a4:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a6:	6a15      	ldr	r5, [r2, #32]
 80045a8:	3101      	adds	r1, #1
 80045aa:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80045ae:	4329      	orrs	r1, r5
 80045b0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045b2:	69d1      	ldr	r1, [r2, #28]
 80045b4:	68a5      	ldr	r5, [r4, #8]
 80045b6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80045ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80045be:	b9ad      	cbnz	r5, 80045ec <HAL_I2C_Init+0x158>
 80045c0:	3801      	subs	r0, #1
 80045c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	b1d3      	cbz	r3, 8004608 <HAL_I2C_Init+0x174>
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	e7a5      	b.n	8004524 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80045d8:	2001      	movs	r0, #1
}
 80045da:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80045dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80045e0:	f7fe fbb8 	bl	8002d54 <HAL_I2C_MspInit>
 80045e4:	e762      	b.n	80044ac <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ea:	e79b      	b.n	8004524 <HAL_I2C_Init+0x90>
 80045ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045f0:	3801      	subs	r0, #1
 80045f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	b113      	cbz	r3, 8004608 <HAL_I2C_Init+0x174>
 8004602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004606:	e78d      	b.n	8004524 <HAL_I2C_Init+0x90>
 8004608:	2301      	movs	r3, #1
 800460a:	e78b      	b.n	8004524 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
}
 800460e:	4770      	bx	lr
 8004610:	000186a0 	.word	0x000186a0
 8004614:	001e847f 	.word	0x001e847f
 8004618:	431bde83 	.word	0x431bde83
 800461c:	003d08ff 	.word	0x003d08ff
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_I2C_Mem_Write>:
{
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	4604      	mov	r4, r0
 800462a:	b083      	sub	sp, #12
 800462c:	4699      	mov	r9, r3
 800462e:	460f      	mov	r7, r1
 8004630:	4690      	mov	r8, r2
 8004632:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004636:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8004638:	f7ff f802 	bl	8003640 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800463c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004640:	2b20      	cmp	r3, #32
 8004642:	d003      	beq.n	800464c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004644:	2002      	movs	r0, #2
}
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464c:	4605      	mov	r5, r0
 800464e:	e004      	b.n	800465a <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004650:	f7fe fff6 	bl	8003640 <HAL_GetTick>
 8004654:	1b40      	subs	r0, r0, r5
 8004656:	2819      	cmp	r0, #25
 8004658:	d87b      	bhi.n	8004752 <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	6983      	ldr	r3, [r0, #24]
 800465e:	ea6f 0c03 	mvn.w	ip, r3
 8004662:	f01c 0b02 	ands.w	fp, ip, #2
 8004666:	d0f3      	beq.n	8004650 <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8004668:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d0e9      	beq.n	8004644 <HAL_I2C_Mem_Write+0x20>
 8004670:	2301      	movs	r3, #1
 8004672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	07da      	lsls	r2, r3, #31
 800467a:	d565      	bpl.n	8004748 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800467c:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800467e:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004682:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004686:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468a:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468c:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468e:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004690:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004694:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004696:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004698:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800469a:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800469e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a2:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a6:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80046aa:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80046b0:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b2:	4835      	ldr	r0, [pc, #212]	; (8004788 <HAL_I2C_Mem_Write+0x164>)
 80046b4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fdca 	bl	8004250 <I2C_RequestMemoryWrite>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d13f      	bne.n	8004740 <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 80046c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d029      	beq.n	800471a <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	462a      	mov	r2, r5
 80046c8:	4631      	mov	r1, r6
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7ff fd50 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d14f      	bne.n	8004774 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	4639      	mov	r1, r7
 80046da:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80046de:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e2:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80046e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046e6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->XferCount--;
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f0:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 80046f2:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f4:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80046f6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80046f8:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046fa:	d50c      	bpl.n	8004716 <HAL_I2C_Mem_Write+0xf2>
 80046fc:	b16a      	cbz	r2, 800471a <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fe:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 8004700:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004704:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8004706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004708:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 800470a:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 800470c:	3702      	adds	r7, #2
        hi2c->XferCount--;
 800470e:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004710:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004712:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004714:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004716:	2a00      	cmp	r2, #0
 8004718:	d1d5      	bne.n	80046c6 <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	462a      	mov	r2, r5
 800471c:	4631      	mov	r1, r6
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff fd5e 	bl	80041e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004724:	bb30      	cbnz	r0, 8004774 <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004730:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004736:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800473e:	e782      	b.n	8004646 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004740:	2001      	movs	r0, #1
}
 8004742:	b003      	add	sp, #12
 8004744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 8004748:	6803      	ldr	r3, [r0, #0]
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6003      	str	r3, [r0, #0]
 8004750:	e794      	b.n	800467c <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004752:	2320      	movs	r3, #32
      return HAL_BUSY;
 8004754:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004756:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800475a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800475e:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004762:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004764:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800476e:	b003      	add	sp, #12
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d1e2      	bne.n	8004740 <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 800477c:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e75e      	b.n	8004646 <HAL_I2C_Mem_Write+0x22>
 8004788:	ffff0000 	.word	0xffff0000

0800478c <HAL_I2C_Mem_Read>:
{
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8004790:	2400      	movs	r4, #0
{
 8004792:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004794:	9403      	str	r4, [sp, #12]
{
 8004796:	4604      	mov	r4, r0
 8004798:	4699      	mov	r9, r3
 800479a:	460f      	mov	r7, r1
 800479c:	4690      	mov	r8, r2
 800479e:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 80047a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fe ff4c 	bl	8003640 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d004      	beq.n	80047ba <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 80047b0:	2702      	movs	r7, #2
}
 80047b2:	4638      	mov	r0, r7
 80047b4:	b009      	add	sp, #36	; 0x24
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	4606      	mov	r6, r0
 80047bc:	e005      	b.n	80047ca <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe ff3f 	bl	8003640 <HAL_GetTick>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	2819      	cmp	r0, #25
 80047c6:	f200 80b9 	bhi.w	800493c <HAL_I2C_Mem_Read+0x1b0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	6983      	ldr	r3, [r0, #24]
 80047ce:	ea6f 0c03 	mvn.w	ip, r3
 80047d2:	f01c 0b02 	ands.w	fp, ip, #2
 80047d6:	d0f2      	beq.n	80047be <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 80047d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d0e7      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x24>
 80047e0:	2301      	movs	r3, #1
 80047e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e6:	6803      	ldr	r3, [r0, #0]
 80047e8:	07db      	lsls	r3, r3, #31
 80047ea:	d539      	bpl.n	8004860 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ec:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047ee:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f2:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f6:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047fa:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fc:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047fe:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004800:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004804:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004806:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004808:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800480a:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800480e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004812:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004816:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800481a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800481e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004820:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004822:	489d      	ldr	r0, [pc, #628]	; (8004a98 <HAL_I2C_Mem_Read+0x30c>)
 8004824:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fd8c 	bl	8004344 <I2C_RequestMemoryRead>
 800482c:	4607      	mov	r7, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	f040 809d 	bne.w	800496e <HAL_I2C_Mem_Read+0x1e2>
    if (hi2c->XferSize == 0U)
 8004834:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004836:	b9c3      	cbnz	r3, 800486a <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	9004      	str	r0, [sp, #16]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	9204      	str	r2, [sp, #16]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	9204      	str	r2, [sp, #16]
 8004844:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004850:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8004852:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800485a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800485e:	e7a8      	b.n	80047b2 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6003      	str	r3, [r0, #0]
 8004868:	e7c0      	b.n	80047ec <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 800486a:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486c:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 800486e:	f000 8100 	beq.w	8004a72 <HAL_I2C_Mem_Read+0x2e6>
    else if (hi2c->XferSize == 2U)
 8004872:	2b02      	cmp	r3, #2
 8004874:	f000 80c9 	beq.w	8004a0a <HAL_I2C_Mem_Read+0x27e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800487e:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	9007      	str	r0, [sp, #28]
 8004882:	6951      	ldr	r1, [r2, #20]
 8004884:	9107      	str	r1, [sp, #28]
 8004886:	6992      	ldr	r2, [r2, #24]
 8004888:	9207      	str	r2, [sp, #28]
 800488a:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 800488c:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800488e:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004a9c <HAL_I2C_Mem_Read+0x310>
 8004892:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004aa0 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 8004896:	d832      	bhi.n	80048fe <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8004898:	2b01      	cmp	r3, #1
 800489a:	d061      	beq.n	8004960 <HAL_I2C_Mem_Read+0x1d4>
        else if (hi2c->XferSize == 2U)
 800489c:	2b02      	cmp	r3, #2
 800489e:	d172      	bne.n	8004986 <HAL_I2C_Mem_Read+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	e002      	b.n	80048aa <HAL_I2C_Mem_Read+0x11e>
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	1c69      	adds	r1, r5, #1
 80048a6:	f040 80c6 	bne.w	8004a36 <HAL_I2C_Mem_Read+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048aa:	6953      	ldr	r3, [r2, #20]
 80048ac:	075b      	lsls	r3, r3, #29
 80048ae:	d5f9      	bpl.n	80048a4 <HAL_I2C_Mem_Read+0x118>
 80048b0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80048c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80048ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048cc:	3301      	adds	r3, #1
 80048ce:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80048d6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048de:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80048e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80048e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048e4:	3a01      	subs	r2, #1
 80048e6:	b292      	uxth	r2, r2
 80048e8:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80048ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80048f0:	3201      	adds	r2, #1
          hi2c->XferSize--;
 80048f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80048f4:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0a9      	beq.n	800484e <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d9cc      	bls.n	8004898 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fe:	4632      	mov	r2, r6
 8004900:	4629      	mov	r1, r5
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff fc00 	bl	8004108 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004908:	2800      	cmp	r0, #0
 800490a:	d130      	bne.n	800496e <HAL_I2C_Mem_Read+0x1e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004912:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004914:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004916:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8004918:	3b01      	subs	r3, #1
 800491a:	b29b      	uxth	r3, r3
 800491c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800491e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004920:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004922:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 8004924:	3b01      	subs	r3, #1
 8004926:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004928:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800492c:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800492e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004930:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004934:	d5df      	bpl.n	80048f6 <HAL_I2C_Mem_Read+0x16a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004936:	690b      	ldr	r3, [r1, #16]
 8004938:	7053      	strb	r3, [r2, #1]
 800493a:	e7d1      	b.n	80048e0 <HAL_I2C_Mem_Read+0x154>
      return HAL_BUSY;
 800493c:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 800493e:	2320      	movs	r3, #32
}
 8004940:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004942:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800494a:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800494e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004950:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	f043 0320 	orr.w	r3, r3, #32
 8004958:	6423      	str	r3, [r4, #64]	; 0x40
}
 800495a:	b009      	add	sp, #36	; 0x24
 800495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004960:	4632      	mov	r2, r6
 8004962:	4629      	mov	r1, r5
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff fbcf 	bl	8004108 <I2C_WaitOnRXNEFlagUntilTimeout>
 800496a:	2800      	cmp	r0, #0
 800496c:	d0b4      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x14c>
      return HAL_ERROR;
 800496e:	2701      	movs	r7, #1
}
 8004970:	4638      	mov	r0, r7
 8004972:	b009      	add	sp, #36	; 0x24
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fe fe62 	bl	8003640 <HAL_GetTick>
 800497c:	1b80      	subs	r0, r0, r6
 800497e:	4285      	cmp	r5, r0
 8004980:	d361      	bcc.n	8004a46 <HAL_I2C_Mem_Read+0x2ba>
 8004982:	2d00      	cmp	r5, #0
 8004984:	d05f      	beq.n	8004a46 <HAL_I2C_Mem_Read+0x2ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	e001      	b.n	800498e <HAL_I2C_Mem_Read+0x202>
    if (Timeout != HAL_MAX_DELAY)
 800498a:	1c68      	adds	r0, r5, #1
 800498c:	d1f4      	bne.n	8004978 <HAL_I2C_Mem_Read+0x1ec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800498e:	6953      	ldr	r3, [r2, #20]
 8004990:	0759      	lsls	r1, r3, #29
 8004992:	d5fa      	bpl.n	800498a <HAL_I2C_Mem_Read+0x1fe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	6813      	ldr	r3, [r2, #0]
 8004996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800499a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800499c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049a4:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049a6:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 80049aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 80049b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 80049ba:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 80049c0:	b292      	uxth	r2, r2
 80049c2:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049c4:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 80049c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80049cc:	1c4b      	adds	r3, r1, #1
 80049ce:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049d0:	e003      	b.n	80049da <HAL_I2C_Mem_Read+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	0752      	lsls	r2, r2, #29
 80049d8:	d444      	bmi.n	8004a64 <HAL_I2C_Mem_Read+0x2d8>
            count--;
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	3b01      	subs	r3, #1
 80049de:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f5      	bne.n	80049d2 <HAL_I2C_Mem_Read+0x246>
              hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80049e8:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80049ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049f4:	f042 0220 	orr.w	r2, r2, #32
 80049f8:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80049fa:	b662      	cpsie	i
              return HAL_ERROR;
 80049fc:	2701      	movs	r7, #1
}
 80049fe:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8004a00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004a04:	b009      	add	sp, #36	; 0x24
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a12:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	9006      	str	r0, [sp, #24]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	9206      	str	r2, [sp, #24]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	9206      	str	r2, [sp, #24]
 8004a20:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a2a:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004a2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f47f af2c 	bne.w	800488c <HAL_I2C_Mem_Read+0x100>
 8004a34:	e70b      	b.n	800484e <HAL_I2C_Mem_Read+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe fe03 	bl	8003640 <HAL_GetTick>
 8004a3a:	1b80      	subs	r0, r0, r6
 8004a3c:	4285      	cmp	r5, r0
 8004a3e:	d302      	bcc.n	8004a46 <HAL_I2C_Mem_Read+0x2ba>
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	f47f af2d 	bne.w	80048a0 <HAL_I2C_Mem_Read+0x114>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a46:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a48:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a4a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a50:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
            return HAL_ERROR;
 8004a56:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004a5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a62:	e6a6      	b.n	80047b2 <HAL_I2C_Mem_Read+0x26>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	704b      	strb	r3, [r1, #1]
 8004a70:	e727      	b.n	80048c2 <HAL_I2C_Mem_Read+0x136>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a7a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	9005      	str	r0, [sp, #20]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	9205      	str	r2, [sp, #20]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	9205      	str	r2, [sp, #20]
 8004a88:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a92:	b662      	cpsie	i
}
 8004a94:	e7ca      	b.n	8004a2c <HAL_I2C_Mem_Read+0x2a0>
 8004a96:	bf00      	nop
 8004a98:	ffff0000 	.word	0xffff0000
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	14f8b589 	.word	0x14f8b589

08004aa4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f000 81b6 	beq.w	8004e16 <HAL_RCC_OscConfig+0x372>
{
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	6803      	ldr	r3, [r0, #0]
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	07dd      	lsls	r5, r3, #31
{
 8004ab4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	d535      	bpl.n	8004b24 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ab8:	499a      	ldr	r1, [pc, #616]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004aba:	684a      	ldr	r2, [r1, #4]
 8004abc:	f002 020c 	and.w	r2, r2, #12
 8004ac0:	2a04      	cmp	r2, #4
 8004ac2:	f000 80ef 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ac6:	684a      	ldr	r2, [r1, #4]
 8004ac8:	f002 020c 	and.w	r2, r2, #12
 8004acc:	2a08      	cmp	r2, #8
 8004ace:	f000 80e5 	beq.w	8004c9c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d010      	beq.n	8004afc <HAL_RCC_OscConfig+0x58>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 810c 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x254>
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	f000 8182 	beq.w	8004dec <HAL_RCC_OscConfig+0x348>
 8004ae8:	4b8e      	ldr	r3, [pc, #568]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e004      	b.n	8004b06 <HAL_RCC_OscConfig+0x62>
 8004afc:	4a89      	ldr	r2, [pc, #548]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fe fd9b 	bl	8003640 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4e86      	ldr	r6, [pc, #536]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8004b0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e005      	b.n	8004b1c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe fd96 	bl	8003640 <HAL_GetTick>
 8004b14:	1b40      	subs	r0, r0, r5
 8004b16:	2864      	cmp	r0, #100	; 0x64
 8004b18:	f200 80ea 	bhi.w	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	039a      	lsls	r2, r3, #14
 8004b20:	d5f6      	bpl.n	8004b10 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	079f      	lsls	r7, r3, #30
 8004b26:	d528      	bpl.n	8004b7a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b28:	4a7e      	ldr	r2, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	6851      	ldr	r1, [r2, #4]
 8004b2c:	f011 0f0c 	tst.w	r1, #12
 8004b30:	f000 808d 	beq.w	8004c4e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b34:	6851      	ldr	r1, [r2, #4]
 8004b36:	f001 010c 	and.w	r1, r1, #12
 8004b3a:	2908      	cmp	r1, #8
 8004b3c:	f000 8083 	beq.w	8004c46 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8118 	beq.w	8004d78 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4b77      	ldr	r3, [pc, #476]	; (8004d28 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4c:	4e75      	ldr	r6, [pc, #468]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8004b4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b50:	f7fe fd76 	bl	8003640 <HAL_GetTick>
 8004b54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	e005      	b.n	8004b64 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b58:	f7fe fd72 	bl	8003640 <HAL_GetTick>
 8004b5c:	1b40      	subs	r0, r0, r5
 8004b5e:	2802      	cmp	r0, #2
 8004b60:	f200 80c6 	bhi.w	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	0798      	lsls	r0, r3, #30
 8004b68:	d5f6      	bpl.n	8004b58 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	6833      	ldr	r3, [r6, #0]
 8004b6c:	6962      	ldr	r2, [r4, #20]
 8004b6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b76:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	071a      	lsls	r2, r3, #28
 8004b7c:	d41f      	bmi.n	8004bbe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7e:	075d      	lsls	r5, r3, #29
 8004b80:	d542      	bpl.n	8004c08 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b68      	ldr	r3, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	00d0      	lsls	r0, r2, #3
 8004b88:	d57d      	bpl.n	8004c86 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	4e67      	ldr	r6, [pc, #412]	; (8004d2c <HAL_RCC_OscConfig+0x288>)
 8004b8e:	6833      	ldr	r3, [r6, #0]
 8004b90:	05d9      	lsls	r1, r3, #23
 8004b92:	f140 809d 	bpl.w	8004cd0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f000 80fe 	beq.w	8004d9a <HAL_RCC_OscConfig+0x2f6>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80ca 	beq.w	8004d38 <HAL_RCC_OscConfig+0x294>
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	f000 812c 	beq.w	8004e06 <HAL_RCC_OscConfig+0x362>
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	621a      	str	r2, [r3, #32]
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	621a      	str	r2, [r3, #32]
 8004bbc:	e0f2      	b.n	8004da4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbe:	69a3      	ldr	r3, [r4, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d04f      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4b58      	ldr	r3, [pc, #352]	; (8004d28 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc8:	4e56      	ldr	r6, [pc, #344]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8004bca:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004bce:	f7fe fd37 	bl	8003640 <HAL_GetTick>
 8004bd2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd4:	e005      	b.n	8004be2 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd6:	f7fe fd33 	bl	8003640 <HAL_GetTick>
 8004bda:	1b40      	subs	r0, r0, r5
 8004bdc:	2802      	cmp	r0, #2
 8004bde:	f200 8087 	bhi.w	8004cf0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004be4:	079b      	lsls	r3, r3, #30
 8004be6:	d5f6      	bpl.n	8004bd6 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004be8:	4b51      	ldr	r3, [pc, #324]	; (8004d30 <HAL_RCC_OscConfig+0x28c>)
 8004bea:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_RCC_OscConfig+0x290>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0a5b      	lsrs	r3, r3, #9
 8004bf4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004bf6:	bf00      	nop
  }
  while (Delay --);
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	1e5a      	subs	r2, r3, #1
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f9      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	075d      	lsls	r5, r3, #29
 8004c06:	d4bc      	bmi.n	8004b82 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c08:	69e0      	ldr	r0, [r4, #28]
 8004c0a:	b1c0      	cbz	r0, 8004c3e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0c:	4d45      	ldr	r5, [pc, #276]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004c0e:	686b      	ldr	r3, [r5, #4]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	f000 80d8 	beq.w	8004dca <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c22:	f000 80fa 	beq.w	8004e1a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8004c26:	f7fe fd0b 	bl	8003640 <HAL_GetTick>
 8004c2a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c2c:	e004      	b.n	8004c38 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fe fd07 	bl	8003640 <HAL_GetTick>
 8004c32:	1b00      	subs	r0, r0, r4
 8004c34:	2802      	cmp	r0, #2
 8004c36:	d85b      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	019b      	lsls	r3, r3, #6
 8004c3c:	d4f7      	bmi.n	8004c2e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8004c3e:	2000      	movs	r0, #0
}
 8004c40:	b002      	add	sp, #8
 8004c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c46:	6852      	ldr	r2, [r2, #4]
 8004c48:	03d6      	lsls	r6, r2, #15
 8004c4a:	f53f af79 	bmi.w	8004b40 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4e:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	0795      	lsls	r5, r2, #30
 8004c54:	d530      	bpl.n	8004cb8 <HAL_RCC_OscConfig+0x214>
 8004c56:	6922      	ldr	r2, [r4, #16]
 8004c58:	2a01      	cmp	r2, #1
 8004c5a:	d02d      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8004c5c:	2001      	movs	r0, #1
}
 8004c5e:	b002      	add	sp, #8
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004c64:	4a30      	ldr	r2, [pc, #192]	; (8004d28 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c66:	4e2f      	ldr	r6, [pc, #188]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004c68:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004c6c:	f7fe fce8 	bl	8003640 <HAL_GetTick>
 8004c70:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c72:	e004      	b.n	8004c7e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fe fce4 	bl	8003640 <HAL_GetTick>
 8004c78:	1b40      	subs	r0, r0, r5
 8004c7a:	2802      	cmp	r0, #2
 8004c7c:	d838      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c80:	079f      	lsls	r7, r3, #30
 8004c82:	d4f7      	bmi.n	8004c74 <HAL_RCC_OscConfig+0x1d0>
 8004c84:	e7bd      	b.n	8004c02 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8004c88:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c8e:	61da      	str	r2, [r3, #28]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004c9a:	e777      	b.n	8004b8c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c9c:	684a      	ldr	r2, [r1, #4]
 8004c9e:	03d0      	lsls	r0, r2, #15
 8004ca0:	f57f af17 	bpl.w	8004ad2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	0391      	lsls	r1, r2, #14
 8004caa:	f57f af3b 	bpl.w	8004b24 <HAL_RCC_OscConfig+0x80>
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	2a00      	cmp	r2, #0
 8004cb2:	f47f af37 	bne.w	8004b24 <HAL_RCC_OscConfig+0x80>
 8004cb6:	e7d1      	b.n	8004c5c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	491a      	ldr	r1, [pc, #104]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004cba:	6960      	ldr	r0, [r4, #20]
 8004cbc:	680a      	ldr	r2, [r1, #0]
 8004cbe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004cc2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004cc6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc8:	071a      	lsls	r2, r3, #28
 8004cca:	f57f af58 	bpl.w	8004b7e <HAL_RCC_OscConfig+0xda>
 8004cce:	e776      	b.n	8004bbe <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004cd8:	f7fe fcb2 	bl	8003640 <HAL_GetTick>
 8004cdc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	6833      	ldr	r3, [r6, #0]
 8004ce0:	05da      	lsls	r2, r3, #23
 8004ce2:	f53f af58 	bmi.w	8004b96 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce6:	f7fe fcab 	bl	8003640 <HAL_GetTick>
 8004cea:	1bc0      	subs	r0, r0, r7
 8004cec:	2864      	cmp	r0, #100	; 0x64
 8004cee:	d9f6      	bls.n	8004cde <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8004cf0:	2003      	movs	r0, #3
}
 8004cf2:	b002      	add	sp, #8
 8004cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf8:	4d0a      	ldr	r5, [pc, #40]	; (8004d24 <HAL_RCC_OscConfig+0x280>)
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fc99 	bl	8003640 <HAL_GetTick>
 8004d0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d10:	e004      	b.n	8004d1c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d12:	f7fe fc95 	bl	8003640 <HAL_GetTick>
 8004d16:	1b80      	subs	r0, r0, r6
 8004d18:	2864      	cmp	r0, #100	; 0x64
 8004d1a:	d8e9      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	039b      	lsls	r3, r3, #14
 8004d20:	d4f7      	bmi.n	8004d12 <HAL_RCC_OscConfig+0x26e>
 8004d22:	e6fe      	b.n	8004b22 <HAL_RCC_OscConfig+0x7e>
 8004d24:	40021000 	.word	0x40021000
 8004d28:	42420000 	.word	0x42420000
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	20000004 	.word	0x20000004
 8004d34:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d38:	4e50      	ldr	r6, [pc, #320]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3e:	6a33      	ldr	r3, [r6, #32]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6233      	str	r3, [r6, #32]
 8004d46:	6a33      	ldr	r3, [r6, #32]
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004d4e:	f7fe fc77 	bl	8003640 <HAL_GetTick>
 8004d52:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d54:	e004      	b.n	8004d60 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fe fc73 	bl	8003640 <HAL_GetTick>
 8004d5a:	1bc0      	subs	r0, r0, r7
 8004d5c:	4540      	cmp	r0, r8
 8004d5e:	d8c7      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d60:	6a33      	ldr	r3, [r6, #32]
 8004d62:	0798      	lsls	r0, r3, #30
 8004d64:	d4f7      	bmi.n	8004d56 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	f43f af4e 	beq.w	8004c08 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6c:	4a43      	ldr	r2, [pc, #268]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
 8004d6e:	69d3      	ldr	r3, [r2, #28]
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	61d3      	str	r3, [r2, #28]
 8004d76:	e747      	b.n	8004c08 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004d78:	4a41      	ldr	r2, [pc, #260]	; (8004e80 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	4e40      	ldr	r6, [pc, #256]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8004d7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d7e:	f7fe fc5f 	bl	8003640 <HAL_GetTick>
 8004d82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d84:	e004      	b.n	8004d90 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fe fc5b 	bl	8003640 <HAL_GetTick>
 8004d8a:	1b40      	subs	r0, r0, r5
 8004d8c:	2802      	cmp	r0, #2
 8004d8e:	d8af      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	0799      	lsls	r1, r3, #30
 8004d94:	d4f7      	bmi.n	8004d86 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	e6ef      	b.n	8004b7a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9a:	4a38      	ldr	r2, [pc, #224]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
 8004d9c:	6a13      	ldr	r3, [r2, #32]
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004da4:	f7fe fc4c 	bl	8003640 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004dac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dae:	4f33      	ldr	r7, [pc, #204]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
 8004db0:	e004      	b.n	8004dbc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe fc45 	bl	8003640 <HAL_GetTick>
 8004db6:	1b80      	subs	r0, r0, r6
 8004db8:	4540      	cmp	r0, r8
 8004dba:	d899      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	079b      	lsls	r3, r3, #30
 8004dc0:	d5f7      	bpl.n	8004db2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	f43f af20 	beq.w	8004c08 <HAL_RCC_OscConfig+0x164>
 8004dc8:	e7d0      	b.n	8004d6c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dca:	2801      	cmp	r0, #1
 8004dcc:	f43f af38 	beq.w	8004c40 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8004dd0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	6a22      	ldr	r2, [r4, #32]
 8004dd4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004dd8:	4291      	cmp	r1, r2
 8004dda:	f47f af3f 	bne.w	8004c5c <HAL_RCC_OscConfig+0x1b8>
 8004dde:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004de0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8004de4:	1a18      	subs	r0, r3, r0
 8004de6:	bf18      	it	ne
 8004de8:	2001      	movne	r0, #1
 8004dea:	e729      	b.n	8004c40 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e67f      	b.n	8004b06 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e06:	f042 0204 	orr.w	r2, r2, #4
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	621a      	str	r2, [r3, #32]
 8004e14:	e7c6      	b.n	8004da4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
}
 8004e18:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004e1a:	f7fe fc11 	bl	8003640 <HAL_GetTick>
 8004e1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e20:	e005      	b.n	8004e2e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e22:	f7fe fc0d 	bl	8003640 <HAL_GetTick>
 8004e26:	1b80      	subs	r0, r0, r6
 8004e28:	2802      	cmp	r0, #2
 8004e2a:	f63f af61 	bhi.w	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	0199      	lsls	r1, r3, #6
 8004e32:	d4f6      	bmi.n	8004e22 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e34:	6a23      	ldr	r3, [r4, #32]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e3c:	686a      	ldr	r2, [r5, #4]
 8004e3e:	68a1      	ldr	r1, [r4, #8]
 8004e40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004e44:	430a      	orrs	r2, r1
 8004e46:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e48:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e4a:	4d0c      	ldr	r5, [pc, #48]	; (8004e7c <HAL_RCC_OscConfig+0x3d8>)
 8004e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e4e:	686a      	ldr	r2, [r5, #4]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004e56:	490a      	ldr	r1, [pc, #40]	; (8004e80 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004e5e:	f7fe fbef 	bl	8003640 <HAL_GetTick>
 8004e62:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e64:	e005      	b.n	8004e72 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fe fbeb 	bl	8003640 <HAL_GetTick>
 8004e6a:	1b00      	subs	r0, r0, r4
 8004e6c:	2802      	cmp	r0, #2
 8004e6e:	f63f af3f 	bhi.w	8004cf0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	019a      	lsls	r2, r3, #6
 8004e76:	d5f6      	bpl.n	8004e66 <HAL_RCC_OscConfig+0x3c2>
 8004e78:	e6e1      	b.n	8004c3e <HAL_RCC_OscConfig+0x19a>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	42420000 	.word	0x42420000

08004e84 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e84:	f240 2c01 	movw	ip, #513	; 0x201
{
 8004e88:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004e8c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e8e:	f10d 0e18 	add.w	lr, sp, #24
 8004e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e94:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e9a:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8004e9e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ea0:	f003 010c 	and.w	r1, r3, #12
 8004ea4:	2908      	cmp	r1, #8
 8004ea6:	d003      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8004ea8:	4812      	ldr	r0, [pc, #72]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x70>)
}
 8004eaa:	b007      	add	sp, #28
 8004eac:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eb0:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8004eb4:	3118      	adds	r1, #24
 8004eb6:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eb8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eba:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ebe:	d50e      	bpl.n	8004ede <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ec0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ec4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ec8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ecc:	3318      	adds	r3, #24
 8004ece:	446b      	add	r3, sp
 8004ed0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ed4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004ed8:	b007      	add	sp, #28
 8004eda:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x74>)
 8004ee0:	fb03 f000 	mul.w	r0, r3, r0
}
 8004ee4:	b007      	add	sp, #28
 8004ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eea:	bf00      	nop
 8004eec:	080091c4 	.word	0x080091c4
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	007a1200 	.word	0x007a1200
 8004ef8:	003d0900 	.word	0x003d0900

08004efc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f000 808c 	beq.w	800501a <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f02:	4a49      	ldr	r2, [pc, #292]	; (8005028 <HAL_RCC_ClockConfig+0x12c>)
{
 8004f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	6813      	ldr	r3, [r2, #0]
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	428b      	cmp	r3, r1
 8004f12:	460d      	mov	r5, r1
 8004f14:	d20c      	bcs.n	8004f30 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	428b      	cmp	r3, r1
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004f2a:	2001      	movs	r0, #1
}
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	0798      	lsls	r0, r3, #30
 8004f34:	d514      	bpl.n	8004f60 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f36:	0759      	lsls	r1, r3, #29
 8004f38:	d504      	bpl.n	8004f44 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f3a:	493c      	ldr	r1, [pc, #240]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004f3c:	684a      	ldr	r2, [r1, #4]
 8004f3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f42:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f44:	071a      	lsls	r2, r3, #28
 8004f46:	d504      	bpl.n	8004f52 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4938      	ldr	r1, [pc, #224]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004f4a:	684a      	ldr	r2, [r1, #4]
 8004f4c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004f50:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f52:	4936      	ldr	r1, [pc, #216]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004f54:	68a0      	ldr	r0, [r4, #8]
 8004f56:	684a      	ldr	r2, [r1, #4]
 8004f58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f5c:	4302      	orrs	r2, r0
 8004f5e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f60:	07df      	lsls	r7, r3, #31
 8004f62:	d520      	bpl.n	8004fa6 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f64:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b31      	ldr	r3, [pc, #196]	; (800502c <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f68:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6c:	d057      	beq.n	800501e <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6e:	2a02      	cmp	r2, #2
 8004f70:	d050      	beq.n	8005014 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	0799      	lsls	r1, r3, #30
 8004f74:	d5d9      	bpl.n	8004f2a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4e2d      	ldr	r6, [pc, #180]	; (800502c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7c:	6873      	ldr	r3, [r6, #4]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004f86:	f7fe fb5b 	bl	8003640 <HAL_GetTick>
 8004f8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	e004      	b.n	8004f98 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fe fb57 	bl	8003640 <HAL_GetTick>
 8004f92:	1bc0      	subs	r0, r0, r7
 8004f94:	4540      	cmp	r0, r8
 8004f96:	d845      	bhi.n	8005024 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f98:	6873      	ldr	r3, [r6, #4]
 8004f9a:	6862      	ldr	r2, [r4, #4]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004fa4:	d1f3      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_RCC_ClockConfig+0x12c>)
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	42ab      	cmp	r3, r5
 8004fb0:	d909      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb2:	6813      	ldr	r3, [r2, #0]
 8004fb4:	f023 0307 	bic.w	r3, r3, #7
 8004fb8:	432b      	orrs	r3, r5
 8004fba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	d1b1      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	075a      	lsls	r2, r3, #29
 8004fca:	d506      	bpl.n	8004fda <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fcc:	4917      	ldr	r1, [pc, #92]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	684a      	ldr	r2, [r1, #4]
 8004fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fd6:	4302      	orrs	r2, r0
 8004fd8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fda:	071b      	lsls	r3, r3, #28
 8004fdc:	d507      	bpl.n	8004fee <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	6853      	ldr	r3, [r2, #4]
 8004fe4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004fe8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004fec:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fee:	f7ff ff49 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	; (800502c <HAL_RCC_ClockConfig+0x130>)
 8004ff6:	490e      	ldr	r1, [pc, #56]	; (8005030 <HAL_RCC_ClockConfig+0x134>)
 8004ff8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004ffa:	480e      	ldr	r0, [pc, #56]	; (8005034 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ffc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005000:	5c89      	ldrb	r1, [r1, r2]
 8005002:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <HAL_RCC_ClockConfig+0x13c>)
 8005004:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8005006:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005008:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800500a:	f7fe fad7 	bl	80035bc <HAL_InitTick>
  return HAL_OK;
 800500e:	2000      	movs	r0, #0
}
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005014:	0198      	lsls	r0, r3, #6
 8005016:	d4ae      	bmi.n	8004f76 <HAL_RCC_ClockConfig+0x7a>
 8005018:	e787      	b.n	8004f2a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800501a:	2001      	movs	r0, #1
}
 800501c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	039e      	lsls	r6, r3, #14
 8005020:	d4a9      	bmi.n	8004f76 <HAL_RCC_ClockConfig+0x7a>
 8005022:	e782      	b.n	8004f2a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005024:	2003      	movs	r0, #3
 8005026:	e781      	b.n	8004f2c <HAL_RCC_ClockConfig+0x30>
 8005028:	40022000 	.word	0x40022000
 800502c:	40021000 	.word	0x40021000
 8005030:	08009160 	.word	0x08009160
 8005034:	2000003c 	.word	0x2000003c
 8005038:	20000004 	.word	0x20000004

0800503c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4905      	ldr	r1, [pc, #20]	; (8005058 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005044:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	6810      	ldr	r0, [r2, #0]
}
 800504c:	40d8      	lsrs	r0, r3
 800504e:	4770      	bx	lr
 8005050:	40021000 	.word	0x40021000
 8005054:	20000004 	.word	0x20000004
 8005058:	08009170 	.word	0x08009170

0800505c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800505e:	4a05      	ldr	r2, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4905      	ldr	r1, [pc, #20]	; (8005078 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005064:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	6810      	ldr	r0, [r2, #0]
}
 800506c:	40d8      	lsrs	r0, r3
 800506e:	4770      	bx	lr
 8005070:	40021000 	.word	0x40021000
 8005074:	20000004 	.word	0x20000004
 8005078:	08009170 	.word	0x08009170

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005082:	6800      	ldr	r0, [r0, #0]
{
 8005084:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005086:	07c1      	lsls	r1, r0, #31
 8005088:	d52c      	bpl.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	d53f      	bpl.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4d39      	ldr	r5, [pc, #228]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8005094:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	05df      	lsls	r7, r3, #23
 800509a:	d548      	bpl.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509c:	4d35      	ldr	r5, [pc, #212]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800509e:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80050a4:	d011      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050a6:	6861      	ldr	r1, [r4, #4]
 80050a8:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d00d      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050b0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050b2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b4:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80050b6:	4a31      	ldr	r2, [pc, #196]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80050bc:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050c4:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d444      	bmi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ca:	6861      	ldr	r1, [r4, #4]
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80050ce:	6a13      	ldr	r3, [r2, #32]
 80050d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d8:	b11e      	cbz	r6, 80050e2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	69d3      	ldr	r3, [r2, #28]
 80050dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e2:	6820      	ldr	r0, [r4, #0]
 80050e4:	0783      	lsls	r3, r0, #30
 80050e6:	d506      	bpl.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e8:	4922      	ldr	r1, [pc, #136]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	684a      	ldr	r2, [r1, #4]
 80050ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80050f2:	431a      	orrs	r2, r3
 80050f4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050f6:	f010 0010 	ands.w	r0, r0, #16
 80050fa:	d007      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050fc:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005100:	6961      	ldr	r1, [r4, #20]
 8005102:	6853      	ldr	r3, [r2, #4]
 8005104:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005108:	430b      	orrs	r3, r1
 800510a:	6053      	str	r3, [r2, #4]
}
 800510c:	b002      	add	sp, #8
 800510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	4d18      	ldr	r5, [pc, #96]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8005116:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800511a:	61da      	str	r2, [r3, #28]
 800511c:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 800511e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	05df      	lsls	r7, r3, #23
 800512c:	d4b6      	bmi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005136:	f7fe fa83 	bl	8003640 <HAL_GetTick>
 800513a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	05d8      	lsls	r0, r3, #23
 8005140:	d4ac      	bmi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fe fa7d 	bl	8003640 <HAL_GetTick>
 8005146:	1bc3      	subs	r3, r0, r7
 8005148:	2b64      	cmp	r3, #100	; 0x64
 800514a:	d9f7      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800514c:	2003      	movs	r0, #3
}
 800514e:	b002      	add	sp, #8
 8005150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8005154:	f7fe fa74 	bl	8003640 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800515c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	e004      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fe fa6e 	bl	8003640 <HAL_GetTick>
 8005164:	1bc0      	subs	r0, r0, r7
 8005166:	4540      	cmp	r0, r8
 8005168:	d8f0      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	6a2b      	ldr	r3, [r5, #32]
 800516c:	079a      	lsls	r2, r3, #30
 800516e:	d5f7      	bpl.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8005170:	e7ab      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	40007000 	.word	0x40007000
 800517c:	42420000 	.word	0x42420000

08005180 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005180:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005182:	4b3d      	ldr	r3, [pc, #244]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 8005184:	b087      	sub	sp, #28
 8005186:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800518a:	f10d 0e18 	add.w	lr, sp, #24
 800518e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005192:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005196:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800519a:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800519e:	280f      	cmp	r0, #15
 80051a0:	d819      	bhi.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80051a2:	e8df f000 	tbb	[pc, r0]
 80051a6:	2108      	.short	0x2108
 80051a8:	18181c18 	.word	0x18181c18
 80051ac:	18181c18 	.word	0x18181c18
 80051b0:	18181818 	.word	0x18181818
 80051b4:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051b6:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 80051ba:	4930      	ldr	r1, [pc, #192]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80051bc:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051be:	401a      	ands	r2, r3
 80051c0:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80051c4:	d055      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ce:	d048      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d4:	d03d      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80051d6:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80051d8:	b007      	add	sp, #28
 80051da:	f85d fb04 	ldr.w	pc, [sp], #4
 80051de:	b007      	add	sp, #28
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 80051e4:	f7ff be4e 	b.w	8004e84 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80051e8:	f7ff ff38 	bl	800505c <HAL_RCC_GetPCLK2Freq>
 80051ec:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80051f4:	3301      	adds	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80051fc:	b007      	add	sp, #28
 80051fe:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8005202:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8005204:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800520c:	d0e4      	beq.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800520e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8005212:	3118      	adds	r1, #24
 8005214:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005216:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005218:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800521c:	d40c      	bmi.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8005220:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	025b      	lsls	r3, r3, #9
 800522a:	d4d5      	bmi.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 800522c:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800522e:	0040      	lsls	r0, r0, #1
 8005230:	fba3 3000 	umull	r3, r0, r3, r0
 8005234:	0840      	lsrs	r0, r0, #1
 8005236:	e7cf      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005238:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800523c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005240:	3318      	adds	r3, #24
 8005242:	446b      	add	r3, sp
 8005244:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	fb03 f000 	mul.w	r0, r3, r0
 8005250:	e7e8      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 8005252:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005256:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8005258:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800525c:	bf18      	it	ne
 800525e:	4618      	movne	r0, r3
 8005260:	e7ba      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 8005262:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005266:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8005268:	f010 0002 	ands.w	r0, r0, #2
 800526c:	bf18      	it	ne
 800526e:	4618      	movne	r0, r3
 8005270:	e7b2      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 8005272:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005276:	e7af      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005278:	080091c4 	.word	0x080091c4
 800527c:	40021000 	.word	0x40021000
 8005280:	003d0900 	.word	0x003d0900
 8005284:	aaaaaaab 	.word	0xaaaaaaab
 8005288:	007a1200 	.word	0x007a1200

0800528c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800528c:	b368      	cbz	r0, 80052ea <HAL_SRAM_Init+0x5e>
 800528e:	6983      	ldr	r3, [r0, #24]
{
 8005290:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005296:	4604      	mov	r4, r0
 8005298:	d029      	beq.n	80052ee <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800529a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800529e:	4615      	mov	r5, r2
 80052a0:	460e      	mov	r6, r1
 80052a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052a6:	b1db      	cbz	r3, 80052e0 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80052a8:	4621      	mov	r1, r4
 80052aa:	f851 0b08 	ldr.w	r0, [r1], #8
 80052ae:	f000 f821 	bl	80052f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80052b2:	4631      	mov	r1, r6
 80052b4:	68a2      	ldr	r2, [r4, #8]
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	f000 f852 	bl	8005360 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80052bc:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80052c0:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80052c2:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80052c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052c6:	f000 f86d 	bl	80053a4 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 80052ce:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80052d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052d4:	432b      	orrs	r3, r5
 80052d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80052da:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 80052de:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80052e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80052e4:	f7fd fd6a 	bl	8002dbc <HAL_SRAM_MspInit>
 80052e8:	e7de      	b.n	80052a8 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 80052ea:	2001      	movs	r0, #1
}
 80052ec:	4770      	bx	lr
    return HAL_ERROR;
 80052ee:	2001      	movs	r0, #1
}
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	bf00      	nop

080052f4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80052f4:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 80052f6:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80052f8:	688b      	ldr	r3, [r1, #8]
{
 80052fa:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	bf0c      	ite	eq
 8005300:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8005304:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005306:	684e      	ldr	r6, [r1, #4]
 8005308:	680c      	ldr	r4, [r1, #0]
 800530a:	4333      	orrs	r3, r6
 800530c:	68ce      	ldr	r6, [r1, #12]
 800530e:	4d13      	ldr	r5, [pc, #76]	; (800535c <FSMC_NORSRAM_Init+0x68>)
 8005310:	4333      	orrs	r3, r6
 8005312:	690e      	ldr	r6, [r1, #16]
 8005314:	4333      	orrs	r3, r6
 8005316:	694e      	ldr	r6, [r1, #20]
 8005318:	4333      	orrs	r3, r6
 800531a:	69ce      	ldr	r6, [r1, #28]
 800531c:	4333      	orrs	r3, r6
 800531e:	6a0e      	ldr	r6, [r1, #32]
 8005320:	4333      	orrs	r3, r6
 8005322:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005324:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005326:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800532a:	f026 0601 	bic.w	r6, r6, #1
 800532e:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005332:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8005334:	4333      	orrs	r3, r6
 8005336:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8005338:	4333      	orrs	r3, r6
 800533a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800533c:	4333      	orrs	r3, r6
 800533e:	698e      	ldr	r6, [r1, #24]
 8005340:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005342:	4333      	orrs	r3, r6
 8005344:	430b      	orrs	r3, r1
 8005346:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800534a:	400d      	ands	r5, r1
 800534c:	432b      	orrs	r3, r5
 800534e:	ea43 030c 	orr.w	r3, r3, ip
 8005352:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8005356:	bc70      	pop	{r4, r5, r6}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	fff00080 	.word	0xfff00080

08005360 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005360:	4603      	mov	r3, r0
 8005362:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005366:	6853      	ldr	r3, [r2, #4]
{
 8005368:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800536a:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 800536e:	698c      	ldr	r4, [r1, #24]
 8005370:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8005372:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005374:	4323      	orrs	r3, r4
 8005376:	684c      	ldr	r4, [r1, #4]
 8005378:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800537c:	688c      	ldr	r4, [r1, #8]
 800537e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005382:	68cc      	ldr	r4, [r1, #12]
 8005384:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005388:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 800538c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8005390:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8005394:	3902      	subs	r1, #2
 8005396:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800539a:	ea43 030c 	orr.w	r3, r3, ip
 800539e:	6053      	str	r3, [r2, #4]
}
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	bf00      	nop

080053a4 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80053a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a8:	d005      	beq.n	80053b6 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80053aa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80053ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80053b2:	2000      	movs	r0, #0
 80053b4:	4770      	bx	lr
{
 80053b6:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	698d      	ldr	r5, [r1, #24]
 80053bc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80053c0:	432b      	orrs	r3, r5
 80053c2:	684d      	ldr	r5, [r1, #4]
 80053c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80053c8:	688d      	ldr	r5, [r1, #8]
 80053ca:	68c9      	ldr	r1, [r1, #12]
 80053cc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80053d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 80053d6:	4021      	ands	r1, r4
 80053d8:	430b      	orrs	r3, r1
 80053da:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80053de:	bc30      	pop	{r4, r5}
 80053e0:	2000      	movs	r0, #0
 80053e2:	4770      	bx	lr
 80053e4:	cff00000 	.word	0xcff00000

080053e8 <__errno>:
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <__errno+0x8>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000040 	.word	0x20000040

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	2600      	movs	r6, #0
 80053f8:	4d0c      	ldr	r5, [pc, #48]	; (800542c <__libc_init_array+0x38>)
 80053fa:	4c0d      	ldr	r4, [pc, #52]	; (8005430 <__libc_init_array+0x3c>)
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	f003 fabe 	bl	8008984 <_init>
 8005408:	2600      	movs	r6, #0
 800540a:	4d0a      	ldr	r5, [pc, #40]	; (8005434 <__libc_init_array+0x40>)
 800540c:	4c0a      	ldr	r4, [pc, #40]	; (8005438 <__libc_init_array+0x44>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f855 3b04 	ldr.w	r3, [r5], #4
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f855 3b04 	ldr.w	r3, [r5], #4
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	08009628 	.word	0x08009628
 8005430:	08009628 	.word	0x08009628
 8005434:	08009628 	.word	0x08009628
 8005438:	0800962c 	.word	0x0800962c

0800543c <malloc>:
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <malloc+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f000 b895 	b.w	8005570 <_malloc_r>
 8005446:	bf00      	nop
 8005448:	20000040 	.word	0x20000040

0800544c <free>:
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <free+0xc>)
 800544e:	4601      	mov	r1, r0
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	f000 b825 	b.w	80054a0 <_free_r>
 8005456:	bf00      	nop
 8005458:	20000040 	.word	0x20000040

0800545c <memmove>:
 800545c:	4288      	cmp	r0, r1
 800545e:	b510      	push	{r4, lr}
 8005460:	eb01 0402 	add.w	r4, r1, r2
 8005464:	d902      	bls.n	800546c <memmove+0x10>
 8005466:	4284      	cmp	r4, r0
 8005468:	4623      	mov	r3, r4
 800546a:	d807      	bhi.n	800547c <memmove+0x20>
 800546c:	1e43      	subs	r3, r0, #1
 800546e:	42a1      	cmp	r1, r4
 8005470:	d008      	beq.n	8005484 <memmove+0x28>
 8005472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800547a:	e7f8      	b.n	800546e <memmove+0x12>
 800547c:	4601      	mov	r1, r0
 800547e:	4402      	add	r2, r0
 8005480:	428a      	cmp	r2, r1
 8005482:	d100      	bne.n	8005486 <memmove+0x2a>
 8005484:	bd10      	pop	{r4, pc}
 8005486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800548a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800548e:	e7f7      	b.n	8005480 <memmove+0x24>

08005490 <memset>:
 8005490:	4603      	mov	r3, r0
 8005492:	4402      	add	r2, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	f803 1b01 	strb.w	r1, [r3], #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <_free_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4605      	mov	r5, r0
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d040      	beq.n	800552a <_free_r+0x8a>
 80054a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ac:	1f0c      	subs	r4, r1, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfb8      	it	lt
 80054b2:	18e4      	addlt	r4, r4, r3
 80054b4:	f001 fbfa 	bl	8006cac <__malloc_lock>
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <_free_r+0x8c>)
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	b933      	cbnz	r3, 80054cc <_free_r+0x2c>
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	6014      	str	r4, [r2, #0]
 80054c2:	4628      	mov	r0, r5
 80054c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c8:	f001 bbf6 	b.w	8006cb8 <__malloc_unlock>
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d908      	bls.n	80054e2 <_free_r+0x42>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	1821      	adds	r1, r4, r0
 80054d4:	428b      	cmp	r3, r1
 80054d6:	bf01      	itttt	eq
 80054d8:	6819      	ldreq	r1, [r3, #0]
 80054da:	685b      	ldreq	r3, [r3, #4]
 80054dc:	1809      	addeq	r1, r1, r0
 80054de:	6021      	streq	r1, [r4, #0]
 80054e0:	e7ed      	b.n	80054be <_free_r+0x1e>
 80054e2:	461a      	mov	r2, r3
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b10b      	cbz	r3, 80054ec <_free_r+0x4c>
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	d9fa      	bls.n	80054e2 <_free_r+0x42>
 80054ec:	6811      	ldr	r1, [r2, #0]
 80054ee:	1850      	adds	r0, r2, r1
 80054f0:	42a0      	cmp	r0, r4
 80054f2:	d10b      	bne.n	800550c <_free_r+0x6c>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	4401      	add	r1, r0
 80054f8:	1850      	adds	r0, r2, r1
 80054fa:	4283      	cmp	r3, r0
 80054fc:	6011      	str	r1, [r2, #0]
 80054fe:	d1e0      	bne.n	80054c2 <_free_r+0x22>
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4401      	add	r1, r0
 8005506:	6011      	str	r1, [r2, #0]
 8005508:	6053      	str	r3, [r2, #4]
 800550a:	e7da      	b.n	80054c2 <_free_r+0x22>
 800550c:	d902      	bls.n	8005514 <_free_r+0x74>
 800550e:	230c      	movs	r3, #12
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	e7d6      	b.n	80054c2 <_free_r+0x22>
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	1821      	adds	r1, r4, r0
 8005518:	428b      	cmp	r3, r1
 800551a:	bf01      	itttt	eq
 800551c:	6819      	ldreq	r1, [r3, #0]
 800551e:	685b      	ldreq	r3, [r3, #4]
 8005520:	1809      	addeq	r1, r1, r0
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	6054      	str	r4, [r2, #4]
 8005528:	e7cb      	b.n	80054c2 <_free_r+0x22>
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200006c8 	.word	0x200006c8

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fcec 	bl	8005f18 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fce7 	bl	8005f18 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fcdc 	bl	8005f18 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	200006cc 	.word	0x200006cc

08005570 <_malloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	2600      	movs	r6, #0
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	4e2e      	ldr	r6, [pc, #184]	; (8005654 <_malloc_r+0xe4>)
 800559a:	f001 fb87 	bl	8006cac <__malloc_lock>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb34      	cbnz	r4, 80055f2 <_malloc_r+0x82>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc2 	bl	8005530 <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d14d      	bne.n	800564e <_malloc_r+0xde>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	4626      	mov	r6, r4
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d140      	bne.n	800563c <_malloc_r+0xcc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4631      	mov	r1, r6
 80055be:	4638      	mov	r0, r7
 80055c0:	eb04 0803 	add.w	r8, r4, r3
 80055c4:	f000 fca8 	bl	8005f18 <_sbrk_r>
 80055c8:	4580      	cmp	r8, r0
 80055ca:	d13a      	bne.n	8005642 <_malloc_r+0xd2>
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	3503      	adds	r5, #3
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	4638      	mov	r0, r7
 80055e0:	4629      	mov	r1, r5
 80055e2:	f7ff ffa5 	bl	8005530 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d02b      	beq.n	8005642 <_malloc_r+0xd2>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	e00e      	b.n	8005610 <_malloc_r+0xa0>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	1b52      	subs	r2, r2, r5
 80055f6:	d41e      	bmi.n	8005636 <_malloc_r+0xc6>
 80055f8:	2a0b      	cmp	r2, #11
 80055fa:	d916      	bls.n	800562a <_malloc_r+0xba>
 80055fc:	1961      	adds	r1, r4, r5
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	bf18      	it	ne
 8005604:	6059      	strne	r1, [r3, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	bf08      	it	eq
 800560a:	6031      	streq	r1, [r6, #0]
 800560c:	5162      	str	r2, [r4, r5]
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	4638      	mov	r0, r7
 8005612:	f104 060b 	add.w	r6, r4, #11
 8005616:	f001 fb4f 	bl	8006cb8 <__malloc_unlock>
 800561a:	f026 0607 	bic.w	r6, r6, #7
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	1af2      	subs	r2, r6, r3
 8005622:	d0b6      	beq.n	8005592 <_malloc_r+0x22>
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	50a3      	str	r3, [r4, r2]
 8005628:	e7b3      	b.n	8005592 <_malloc_r+0x22>
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	42a3      	cmp	r3, r4
 800562e:	bf0c      	ite	eq
 8005630:	6032      	streq	r2, [r6, #0]
 8005632:	605a      	strne	r2, [r3, #4]
 8005634:	e7ec      	b.n	8005610 <_malloc_r+0xa0>
 8005636:	4623      	mov	r3, r4
 8005638:	6864      	ldr	r4, [r4, #4]
 800563a:	e7b2      	b.n	80055a2 <_malloc_r+0x32>
 800563c:	4634      	mov	r4, r6
 800563e:	6876      	ldr	r6, [r6, #4]
 8005640:	e7b9      	b.n	80055b6 <_malloc_r+0x46>
 8005642:	230c      	movs	r3, #12
 8005644:	4638      	mov	r0, r7
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	f001 fb36 	bl	8006cb8 <__malloc_unlock>
 800564c:	e7a1      	b.n	8005592 <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7de      	b.n	8005610 <_malloc_r+0xa0>
 8005652:	bf00      	nop
 8005654:	200006c8 	.word	0x200006c8

08005658 <__cvt>:
 8005658:	2b00      	cmp	r3, #0
 800565a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565e:	461f      	mov	r7, r3
 8005660:	bfbb      	ittet	lt
 8005662:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005666:	461f      	movlt	r7, r3
 8005668:	2300      	movge	r3, #0
 800566a:	232d      	movlt	r3, #45	; 0x2d
 800566c:	b088      	sub	sp, #32
 800566e:	4614      	mov	r4, r2
 8005670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005672:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005674:	7013      	strb	r3, [r2, #0]
 8005676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005678:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800567c:	f023 0820 	bic.w	r8, r3, #32
 8005680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005684:	d005      	beq.n	8005692 <__cvt+0x3a>
 8005686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800568a:	d100      	bne.n	800568e <__cvt+0x36>
 800568c:	3501      	adds	r5, #1
 800568e:	2302      	movs	r3, #2
 8005690:	e000      	b.n	8005694 <__cvt+0x3c>
 8005692:	2303      	movs	r3, #3
 8005694:	aa07      	add	r2, sp, #28
 8005696:	9204      	str	r2, [sp, #16]
 8005698:	aa06      	add	r2, sp, #24
 800569a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800569e:	e9cd 3500 	strd	r3, r5, [sp]
 80056a2:	4622      	mov	r2, r4
 80056a4:	463b      	mov	r3, r7
 80056a6:	f000 fcf3 	bl	8006090 <_dtoa_r>
 80056aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056ae:	4606      	mov	r6, r0
 80056b0:	d102      	bne.n	80056b8 <__cvt+0x60>
 80056b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056b4:	07db      	lsls	r3, r3, #31
 80056b6:	d522      	bpl.n	80056fe <__cvt+0xa6>
 80056b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056bc:	eb06 0905 	add.w	r9, r6, r5
 80056c0:	d110      	bne.n	80056e4 <__cvt+0x8c>
 80056c2:	7833      	ldrb	r3, [r6, #0]
 80056c4:	2b30      	cmp	r3, #48	; 0x30
 80056c6:	d10a      	bne.n	80056de <__cvt+0x86>
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	4620      	mov	r0, r4
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fb f9d6 	bl	8000a80 <__aeabi_dcmpeq>
 80056d4:	b918      	cbnz	r0, 80056de <__cvt+0x86>
 80056d6:	f1c5 0501 	rsb	r5, r5, #1
 80056da:	f8ca 5000 	str.w	r5, [sl]
 80056de:	f8da 3000 	ldr.w	r3, [sl]
 80056e2:	4499      	add	r9, r3
 80056e4:	2200      	movs	r2, #0
 80056e6:	2300      	movs	r3, #0
 80056e8:	4620      	mov	r0, r4
 80056ea:	4639      	mov	r1, r7
 80056ec:	f7fb f9c8 	bl	8000a80 <__aeabi_dcmpeq>
 80056f0:	b108      	cbz	r0, 80056f6 <__cvt+0x9e>
 80056f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80056f6:	2230      	movs	r2, #48	; 0x30
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	454b      	cmp	r3, r9
 80056fc:	d307      	bcc.n	800570e <__cvt+0xb6>
 80056fe:	4630      	mov	r0, r6
 8005700:	9b07      	ldr	r3, [sp, #28]
 8005702:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005704:	1b9b      	subs	r3, r3, r6
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	b008      	add	sp, #32
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	9107      	str	r1, [sp, #28]
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e7f0      	b.n	80056f8 <__cvt+0xa0>

08005716 <__exponent>:
 8005716:	4603      	mov	r3, r0
 8005718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800571a:	2900      	cmp	r1, #0
 800571c:	f803 2b02 	strb.w	r2, [r3], #2
 8005720:	bfb6      	itet	lt
 8005722:	222d      	movlt	r2, #45	; 0x2d
 8005724:	222b      	movge	r2, #43	; 0x2b
 8005726:	4249      	neglt	r1, r1
 8005728:	2909      	cmp	r1, #9
 800572a:	7042      	strb	r2, [r0, #1]
 800572c:	dd2b      	ble.n	8005786 <__exponent+0x70>
 800572e:	f10d 0407 	add.w	r4, sp, #7
 8005732:	46a4      	mov	ip, r4
 8005734:	270a      	movs	r7, #10
 8005736:	fb91 f6f7 	sdiv	r6, r1, r7
 800573a:	460a      	mov	r2, r1
 800573c:	46a6      	mov	lr, r4
 800573e:	fb07 1516 	mls	r5, r7, r6, r1
 8005742:	2a63      	cmp	r2, #99	; 0x63
 8005744:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005748:	4631      	mov	r1, r6
 800574a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800574e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005752:	dcf0      	bgt.n	8005736 <__exponent+0x20>
 8005754:	3130      	adds	r1, #48	; 0x30
 8005756:	f1ae 0502 	sub.w	r5, lr, #2
 800575a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800575e:	4629      	mov	r1, r5
 8005760:	1c44      	adds	r4, r0, #1
 8005762:	4561      	cmp	r1, ip
 8005764:	d30a      	bcc.n	800577c <__exponent+0x66>
 8005766:	f10d 0209 	add.w	r2, sp, #9
 800576a:	eba2 020e 	sub.w	r2, r2, lr
 800576e:	4565      	cmp	r5, ip
 8005770:	bf88      	it	hi
 8005772:	2200      	movhi	r2, #0
 8005774:	4413      	add	r3, r2
 8005776:	1a18      	subs	r0, r3, r0
 8005778:	b003      	add	sp, #12
 800577a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005780:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005784:	e7ed      	b.n	8005762 <__exponent+0x4c>
 8005786:	2330      	movs	r3, #48	; 0x30
 8005788:	3130      	adds	r1, #48	; 0x30
 800578a:	7083      	strb	r3, [r0, #2]
 800578c:	70c1      	strb	r1, [r0, #3]
 800578e:	1d03      	adds	r3, r0, #4
 8005790:	e7f1      	b.n	8005776 <__exponent+0x60>
	...

08005794 <_printf_float>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	b091      	sub	sp, #68	; 0x44
 800579a:	460c      	mov	r4, r1
 800579c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80057a0:	4616      	mov	r6, r2
 80057a2:	461f      	mov	r7, r3
 80057a4:	4605      	mov	r5, r0
 80057a6:	f001 fa61 	bl	8006c6c <_localeconv_r>
 80057aa:	6803      	ldr	r3, [r0, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
 80057b0:	f7fa fd3a 	bl	8000228 <strlen>
 80057b4:	2300      	movs	r3, #0
 80057b6:	930e      	str	r3, [sp, #56]	; 0x38
 80057b8:	f8d8 3000 	ldr.w	r3, [r8]
 80057bc:	900a      	str	r0, [sp, #40]	; 0x28
 80057be:	3307      	adds	r3, #7
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80057cc:	f8d4 b000 	ldr.w	fp, [r4]
 80057d0:	f8c8 2000 	str.w	r2, [r8]
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80057e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80057e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ea:	4640      	mov	r0, r8
 80057ec:	4b9c      	ldr	r3, [pc, #624]	; (8005a60 <_printf_float+0x2cc>)
 80057ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f0:	f7fb f978 	bl	8000ae4 <__aeabi_dcmpun>
 80057f4:	bb70      	cbnz	r0, 8005854 <_printf_float+0xc0>
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057fa:	4640      	mov	r0, r8
 80057fc:	4b98      	ldr	r3, [pc, #608]	; (8005a60 <_printf_float+0x2cc>)
 80057fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005800:	f7fb f952 	bl	8000aa8 <__aeabi_dcmple>
 8005804:	bb30      	cbnz	r0, 8005854 <_printf_float+0xc0>
 8005806:	2200      	movs	r2, #0
 8005808:	2300      	movs	r3, #0
 800580a:	4640      	mov	r0, r8
 800580c:	4651      	mov	r1, sl
 800580e:	f7fb f941 	bl	8000a94 <__aeabi_dcmplt>
 8005812:	b110      	cbz	r0, 800581a <_printf_float+0x86>
 8005814:	232d      	movs	r3, #45	; 0x2d
 8005816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581a:	4b92      	ldr	r3, [pc, #584]	; (8005a64 <_printf_float+0x2d0>)
 800581c:	4892      	ldr	r0, [pc, #584]	; (8005a68 <_printf_float+0x2d4>)
 800581e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005822:	bf94      	ite	ls
 8005824:	4698      	movls	r8, r3
 8005826:	4680      	movhi	r8, r0
 8005828:	2303      	movs	r3, #3
 800582a:	f04f 0a00 	mov.w	sl, #0
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	f02b 0304 	bic.w	r3, fp, #4
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	4633      	mov	r3, r6
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	9700      	str	r7, [sp, #0]
 800583e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005840:	f000 f9d4 	bl	8005bec <_printf_common>
 8005844:	3001      	adds	r0, #1
 8005846:	f040 8090 	bne.w	800596a <_printf_float+0x1d6>
 800584a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800584e:	b011      	add	sp, #68	; 0x44
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	4642      	mov	r2, r8
 8005856:	4653      	mov	r3, sl
 8005858:	4640      	mov	r0, r8
 800585a:	4651      	mov	r1, sl
 800585c:	f7fb f942 	bl	8000ae4 <__aeabi_dcmpun>
 8005860:	b148      	cbz	r0, 8005876 <_printf_float+0xe2>
 8005862:	f1ba 0f00 	cmp.w	sl, #0
 8005866:	bfb8      	it	lt
 8005868:	232d      	movlt	r3, #45	; 0x2d
 800586a:	4880      	ldr	r0, [pc, #512]	; (8005a6c <_printf_float+0x2d8>)
 800586c:	bfb8      	it	lt
 800586e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <_printf_float+0x2dc>)
 8005874:	e7d3      	b.n	800581e <_printf_float+0x8a>
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	d142      	bne.n	8005906 <_printf_float+0x172>
 8005880:	2306      	movs	r3, #6
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	9206      	str	r2, [sp, #24]
 8005888:	aa0e      	add	r2, sp, #56	; 0x38
 800588a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800588e:	aa0d      	add	r2, sp, #52	; 0x34
 8005890:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005894:	9203      	str	r2, [sp, #12]
 8005896:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800589a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	4642      	mov	r2, r8
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	4628      	mov	r0, r5
 80058a8:	4653      	mov	r3, sl
 80058aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80058ac:	f7ff fed4 	bl	8005658 <__cvt>
 80058b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058b2:	4680      	mov	r8, r0
 80058b4:	2947      	cmp	r1, #71	; 0x47
 80058b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058b8:	d108      	bne.n	80058cc <_printf_float+0x138>
 80058ba:	1cc8      	adds	r0, r1, #3
 80058bc:	db02      	blt.n	80058c4 <_printf_float+0x130>
 80058be:	6863      	ldr	r3, [r4, #4]
 80058c0:	4299      	cmp	r1, r3
 80058c2:	dd40      	ble.n	8005946 <_printf_float+0x1b2>
 80058c4:	f1a9 0902 	sub.w	r9, r9, #2
 80058c8:	fa5f f989 	uxtb.w	r9, r9
 80058cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058d0:	d81f      	bhi.n	8005912 <_printf_float+0x17e>
 80058d2:	464a      	mov	r2, r9
 80058d4:	3901      	subs	r1, #1
 80058d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058da:	910d      	str	r1, [sp, #52]	; 0x34
 80058dc:	f7ff ff1b 	bl	8005716 <__exponent>
 80058e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e2:	4682      	mov	sl, r0
 80058e4:	1813      	adds	r3, r2, r0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	dc02      	bgt.n	80058f2 <_printf_float+0x15e>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	07d2      	lsls	r2, r2, #31
 80058f0:	d501      	bpl.n	80058f6 <_printf_float+0x162>
 80058f2:	3301      	adds	r3, #1
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d09b      	beq.n	8005836 <_printf_float+0xa2>
 80058fe:	232d      	movs	r3, #45	; 0x2d
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005904:	e797      	b.n	8005836 <_printf_float+0xa2>
 8005906:	2947      	cmp	r1, #71	; 0x47
 8005908:	d1bc      	bne.n	8005884 <_printf_float+0xf0>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ba      	bne.n	8005884 <_printf_float+0xf0>
 800590e:	2301      	movs	r3, #1
 8005910:	e7b7      	b.n	8005882 <_printf_float+0xee>
 8005912:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005916:	d118      	bne.n	800594a <_printf_float+0x1b6>
 8005918:	2900      	cmp	r1, #0
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	dd0b      	ble.n	8005936 <_printf_float+0x1a2>
 800591e:	6121      	str	r1, [r4, #16]
 8005920:	b913      	cbnz	r3, 8005928 <_printf_float+0x194>
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	07d0      	lsls	r0, r2, #31
 8005926:	d502      	bpl.n	800592e <_printf_float+0x19a>
 8005928:	3301      	adds	r3, #1
 800592a:	440b      	add	r3, r1
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	f04f 0a00 	mov.w	sl, #0
 8005932:	65a1      	str	r1, [r4, #88]	; 0x58
 8005934:	e7df      	b.n	80058f6 <_printf_float+0x162>
 8005936:	b913      	cbnz	r3, 800593e <_printf_float+0x1aa>
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	07d2      	lsls	r2, r2, #31
 800593c:	d501      	bpl.n	8005942 <_printf_float+0x1ae>
 800593e:	3302      	adds	r3, #2
 8005940:	e7f4      	b.n	800592c <_printf_float+0x198>
 8005942:	2301      	movs	r3, #1
 8005944:	e7f2      	b.n	800592c <_printf_float+0x198>
 8005946:	f04f 0967 	mov.w	r9, #103	; 0x67
 800594a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800594c:	4299      	cmp	r1, r3
 800594e:	db05      	blt.n	800595c <_printf_float+0x1c8>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	6121      	str	r1, [r4, #16]
 8005954:	07d8      	lsls	r0, r3, #31
 8005956:	d5ea      	bpl.n	800592e <_printf_float+0x19a>
 8005958:	1c4b      	adds	r3, r1, #1
 800595a:	e7e7      	b.n	800592c <_printf_float+0x198>
 800595c:	2900      	cmp	r1, #0
 800595e:	bfcc      	ite	gt
 8005960:	2201      	movgt	r2, #1
 8005962:	f1c1 0202 	rsble	r2, r1, #2
 8005966:	4413      	add	r3, r2
 8005968:	e7e0      	b.n	800592c <_printf_float+0x198>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	055a      	lsls	r2, r3, #21
 800596e:	d407      	bmi.n	8005980 <_printf_float+0x1ec>
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	4642      	mov	r2, r8
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	d12b      	bne.n	80059d6 <_printf_float+0x242>
 800597e:	e764      	b.n	800584a <_printf_float+0xb6>
 8005980:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005984:	f240 80dd 	bls.w	8005b42 <_printf_float+0x3ae>
 8005988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	f7fb f876 	bl	8000a80 <__aeabi_dcmpeq>
 8005994:	2800      	cmp	r0, #0
 8005996:	d033      	beq.n	8005a00 <_printf_float+0x26c>
 8005998:	2301      	movs	r3, #1
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	4a35      	ldr	r2, [pc, #212]	; (8005a74 <_printf_float+0x2e0>)
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af51 	beq.w	800584a <_printf_float+0xb6>
 80059a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059ac:	429a      	cmp	r2, r3
 80059ae:	db02      	blt.n	80059b6 <_printf_float+0x222>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07d8      	lsls	r0, r3, #31
 80059b4:	d50f      	bpl.n	80059d6 <_printf_float+0x242>
 80059b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f af42 	beq.w	800584a <_printf_float+0xb6>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 091a 	add.w	r9, r4, #26
 80059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d0:	3b01      	subs	r3, #1
 80059d2:	4543      	cmp	r3, r8
 80059d4:	dc09      	bgt.n	80059ea <_printf_float+0x256>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	079b      	lsls	r3, r3, #30
 80059da:	f100 8102 	bmi.w	8005be2 <_printf_float+0x44e>
 80059de:	68e0      	ldr	r0, [r4, #12]
 80059e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e2:	4298      	cmp	r0, r3
 80059e4:	bfb8      	it	lt
 80059e6:	4618      	movlt	r0, r3
 80059e8:	e731      	b.n	800584e <_printf_float+0xba>
 80059ea:	2301      	movs	r3, #1
 80059ec:	464a      	mov	r2, r9
 80059ee:	4631      	mov	r1, r6
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b8      	blx	r7
 80059f4:	3001      	adds	r0, #1
 80059f6:	f43f af28 	beq.w	800584a <_printf_float+0xb6>
 80059fa:	f108 0801 	add.w	r8, r8, #1
 80059fe:	e7e6      	b.n	80059ce <_printf_float+0x23a>
 8005a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc38      	bgt.n	8005a78 <_printf_float+0x2e4>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <_printf_float+0x2e0>)
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f af1a 	beq.w	800584a <_printf_float+0xb6>
 8005a16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d102      	bne.n	8005a24 <_printf_float+0x290>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	07d9      	lsls	r1, r3, #31
 8005a22:	d5d8      	bpl.n	80059d6 <_printf_float+0x242>
 8005a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af0b 	beq.w	800584a <_printf_float+0xb6>
 8005a34:	f04f 0900 	mov.w	r9, #0
 8005a38:	f104 0a1a 	add.w	sl, r4, #26
 8005a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3e:	425b      	negs	r3, r3
 8005a40:	454b      	cmp	r3, r9
 8005a42:	dc01      	bgt.n	8005a48 <_printf_float+0x2b4>
 8005a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a46:	e794      	b.n	8005972 <_printf_float+0x1de>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f aef9 	beq.w	800584a <_printf_float+0xb6>
 8005a58:	f109 0901 	add.w	r9, r9, #1
 8005a5c:	e7ee      	b.n	8005a3c <_printf_float+0x2a8>
 8005a5e:	bf00      	nop
 8005a60:	7fefffff 	.word	0x7fefffff
 8005a64:	080091dc 	.word	0x080091dc
 8005a68:	080091e0 	.word	0x080091e0
 8005a6c:	080091e8 	.word	0x080091e8
 8005a70:	080091e4 	.word	0x080091e4
 8005a74:	080091ec 	.word	0x080091ec
 8005a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bfa8      	it	ge
 8005a80:	461a      	movge	r2, r3
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	4691      	mov	r9, r2
 8005a86:	dc37      	bgt.n	8005af8 <_printf_float+0x364>
 8005a88:	f04f 0b00 	mov.w	fp, #0
 8005a8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a90:	f104 021a 	add.w	r2, r4, #26
 8005a94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a98:	ebaa 0309 	sub.w	r3, sl, r9
 8005a9c:	455b      	cmp	r3, fp
 8005a9e:	dc33      	bgt.n	8005b08 <_printf_float+0x374>
 8005aa0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	db3b      	blt.n	8005b20 <_printf_float+0x38c>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07da      	lsls	r2, r3, #31
 8005aac:	d438      	bmi.n	8005b20 <_printf_float+0x38c>
 8005aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ab2:	eba3 020a 	sub.w	r2, r3, sl
 8005ab6:	eba3 0901 	sub.w	r9, r3, r1
 8005aba:	4591      	cmp	r9, r2
 8005abc:	bfa8      	it	ge
 8005abe:	4691      	movge	r9, r2
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	dc34      	bgt.n	8005b30 <_printf_float+0x39c>
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ace:	f104 0a1a 	add.w	sl, r4, #26
 8005ad2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	eba3 0309 	sub.w	r3, r3, r9
 8005adc:	4543      	cmp	r3, r8
 8005ade:	f77f af7a 	ble.w	80059d6 <_printf_float+0x242>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f aeac 	beq.w	800584a <_printf_float+0xb6>
 8005af2:	f108 0801 	add.w	r8, r8, #1
 8005af6:	e7ec      	b.n	8005ad2 <_printf_float+0x33e>
 8005af8:	4613      	mov	r3, r2
 8005afa:	4631      	mov	r1, r6
 8005afc:	4642      	mov	r2, r8
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	d1c0      	bne.n	8005a88 <_printf_float+0x2f4>
 8005b06:	e6a0      	b.n	800584a <_printf_float+0xb6>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f ae99 	beq.w	800584a <_printf_float+0xb6>
 8005b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b1a:	f10b 0b01 	add.w	fp, fp, #1
 8005b1e:	e7b9      	b.n	8005a94 <_printf_float+0x300>
 8005b20:	4631      	mov	r1, r6
 8005b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d1bf      	bne.n	8005aae <_printf_float+0x31a>
 8005b2e:	e68c      	b.n	800584a <_printf_float+0xb6>
 8005b30:	464b      	mov	r3, r9
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	eb08 020a 	add.w	r2, r8, sl
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1c2      	bne.n	8005ac6 <_printf_float+0x332>
 8005b40:	e683      	b.n	800584a <_printf_float+0xb6>
 8005b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b44:	2a01      	cmp	r2, #1
 8005b46:	dc01      	bgt.n	8005b4c <_printf_float+0x3b8>
 8005b48:	07db      	lsls	r3, r3, #31
 8005b4a:	d537      	bpl.n	8005bbc <_printf_float+0x428>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4642      	mov	r2, r8
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f ae77 	beq.w	800584a <_printf_float+0xb6>
 8005b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f ae6f 	beq.w	800584a <_printf_float+0xb6>
 8005b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b70:	2200      	movs	r2, #0
 8005b72:	2300      	movs	r3, #0
 8005b74:	f7fa ff84 	bl	8000a80 <__aeabi_dcmpeq>
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_printf_float+0x41e>
 8005b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b7c:	f108 0201 	add.w	r2, r8, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d10e      	bne.n	8005baa <_printf_float+0x416>
 8005b8c:	e65d      	b.n	800584a <_printf_float+0xb6>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	464a      	mov	r2, r9
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae56 	beq.w	800584a <_printf_float+0xb6>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4543      	cmp	r3, r8
 8005ba8:	dcf1      	bgt.n	8005b8e <_printf_float+0x3fa>
 8005baa:	4653      	mov	r3, sl
 8005bac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bb0:	e6e0      	b.n	8005974 <_printf_float+0x1e0>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	f104 091a 	add.w	r9, r4, #26
 8005bba:	e7f2      	b.n	8005ba2 <_printf_float+0x40e>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	e7df      	b.n	8005b82 <_printf_float+0x3ee>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	464a      	mov	r2, r9
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae3c 	beq.w	800584a <_printf_float+0xb6>
 8005bd2:	f108 0801 	add.w	r8, r8, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	dcf0      	bgt.n	8005bc2 <_printf_float+0x42e>
 8005be0:	e6fd      	b.n	80059de <_printf_float+0x24a>
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	f104 0919 	add.w	r9, r4, #25
 8005bea:	e7f4      	b.n	8005bd6 <_printf_float+0x442>

08005bec <_printf_common>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	688a      	ldr	r2, [r1, #8]
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	bfb8      	it	lt
 8005bfe:	4613      	movlt	r3, r2
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c06:	460c      	mov	r4, r1
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	b10a      	cbz	r2, 8005c12 <_printf_common+0x26>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	0699      	lsls	r1, r3, #26
 8005c16:	bf42      	ittt	mi
 8005c18:	6833      	ldrmi	r3, [r6, #0]
 8005c1a:	3302      	addmi	r3, #2
 8005c1c:	6033      	strmi	r3, [r6, #0]
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	f015 0506 	ands.w	r5, r5, #6
 8005c24:	d106      	bne.n	8005c34 <_printf_common+0x48>
 8005c26:	f104 0a19 	add.w	sl, r4, #25
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	6832      	ldr	r2, [r6, #0]
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc28      	bgt.n	8005c86 <_printf_common+0x9a>
 8005c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c38:	1e13      	subs	r3, r2, #0
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	bf18      	it	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	0692      	lsls	r2, r2, #26
 8005c42:	d42d      	bmi.n	8005ca0 <_printf_common+0xb4>
 8005c44:	4649      	mov	r1, r9
 8005c46:	4638      	mov	r0, r7
 8005c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d020      	beq.n	8005c94 <_printf_common+0xa8>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	68e5      	ldr	r5, [r4, #12]
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	bf18      	it	ne
 8005c5e:	2500      	movne	r5, #0
 8005c60:	6832      	ldr	r2, [r6, #0]
 8005c62:	f04f 0600 	mov.w	r6, #0
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	bf08      	it	eq
 8005c6a:	1aad      	subeq	r5, r5, r2
 8005c6c:	6922      	ldr	r2, [r4, #16]
 8005c6e:	bf08      	it	eq
 8005c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bfc4      	itt	gt
 8005c78:	1a9b      	subgt	r3, r3, r2
 8005c7a:	18ed      	addgt	r5, r5, r3
 8005c7c:	341a      	adds	r4, #26
 8005c7e:	42b5      	cmp	r5, r6
 8005c80:	d11a      	bne.n	8005cb8 <_printf_common+0xcc>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e008      	b.n	8005c98 <_printf_common+0xac>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4652      	mov	r2, sl
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	47c0      	blx	r8
 8005c90:	3001      	adds	r0, #1
 8005c92:	d103      	bne.n	8005c9c <_printf_common+0xb0>
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	e7c4      	b.n	8005c2a <_printf_common+0x3e>
 8005ca0:	2030      	movs	r0, #48	; 0x30
 8005ca2:	18e1      	adds	r1, r4, r3
 8005ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cae:	4422      	add	r2, r4
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb6:	e7c5      	b.n	8005c44 <_printf_common+0x58>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4622      	mov	r2, r4
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c0      	blx	r8
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0e6      	beq.n	8005c94 <_printf_common+0xa8>
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7d9      	b.n	8005c7e <_printf_common+0x92>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	7e0f      	ldrb	r7, [r1, #24]
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	2f78      	cmp	r7, #120	; 0x78
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	469a      	mov	sl, r3
 8005cdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ce2:	d807      	bhi.n	8005cf4 <_printf_i+0x28>
 8005ce4:	2f62      	cmp	r7, #98	; 0x62
 8005ce6:	d80a      	bhi.n	8005cfe <_printf_i+0x32>
 8005ce8:	2f00      	cmp	r7, #0
 8005cea:	f000 80d9 	beq.w	8005ea0 <_printf_i+0x1d4>
 8005cee:	2f58      	cmp	r7, #88	; 0x58
 8005cf0:	f000 80a4 	beq.w	8005e3c <_printf_i+0x170>
 8005cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cfc:	e03a      	b.n	8005d74 <_printf_i+0xa8>
 8005cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d02:	2b15      	cmp	r3, #21
 8005d04:	d8f6      	bhi.n	8005cf4 <_printf_i+0x28>
 8005d06:	a101      	add	r1, pc, #4	; (adr r1, 8005d0c <_printf_i+0x40>)
 8005d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d0c:	08005d65 	.word	0x08005d65
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005cf5 	.word	0x08005cf5
 8005d18:	08005cf5 	.word	0x08005cf5
 8005d1c:	08005cf5 	.word	0x08005cf5
 8005d20:	08005cf5 	.word	0x08005cf5
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005cf5 	.word	0x08005cf5
 8005d2c:	08005cf5 	.word	0x08005cf5
 8005d30:	08005cf5 	.word	0x08005cf5
 8005d34:	08005cf5 	.word	0x08005cf5
 8005d38:	08005e87 	.word	0x08005e87
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005e69 	.word	0x08005e69
 8005d44:	08005cf5 	.word	0x08005cf5
 8005d48:	08005cf5 	.word	0x08005cf5
 8005d4c:	08005ea9 	.word	0x08005ea9
 8005d50:	08005cf5 	.word	0x08005cf5
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005cf5 	.word	0x08005cf5
 8005d5c:	08005cf5 	.word	0x08005cf5
 8005d60:	08005e71 	.word	0x08005e71
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	602a      	str	r2, [r5, #0]
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0a4      	b.n	8005ec2 <_printf_i+0x1f6>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	6829      	ldr	r1, [r5, #0]
 8005d7c:	0606      	lsls	r6, r0, #24
 8005d7e:	f101 0304 	add.w	r3, r1, #4
 8005d82:	d50a      	bpl.n	8005d9a <_printf_i+0xce>
 8005d84:	680e      	ldr	r6, [r1, #0]
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	da03      	bge.n	8005d94 <_printf_i+0xc8>
 8005d8c:	232d      	movs	r3, #45	; 0x2d
 8005d8e:	4276      	negs	r6, r6
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	230a      	movs	r3, #10
 8005d96:	485e      	ldr	r0, [pc, #376]	; (8005f10 <_printf_i+0x244>)
 8005d98:	e019      	b.n	8005dce <_printf_i+0x102>
 8005d9a:	680e      	ldr	r6, [r1, #0]
 8005d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	bf18      	it	ne
 8005da4:	b236      	sxthne	r6, r6
 8005da6:	e7ef      	b.n	8005d88 <_printf_i+0xbc>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	1d19      	adds	r1, r3, #4
 8005dae:	6029      	str	r1, [r5, #0]
 8005db0:	0601      	lsls	r1, r0, #24
 8005db2:	d501      	bpl.n	8005db8 <_printf_i+0xec>
 8005db4:	681e      	ldr	r6, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <_printf_i+0xf2>
 8005db8:	0646      	lsls	r6, r0, #25
 8005dba:	d5fb      	bpl.n	8005db4 <_printf_i+0xe8>
 8005dbc:	881e      	ldrh	r6, [r3, #0]
 8005dbe:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc0:	bf0c      	ite	eq
 8005dc2:	2308      	moveq	r3, #8
 8005dc4:	230a      	movne	r3, #10
 8005dc6:	4852      	ldr	r0, [pc, #328]	; (8005f10 <_printf_i+0x244>)
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	bfa8      	it	ge
 8005dd4:	6821      	ldrge	r1, [r4, #0]
 8005dd6:	60a5      	str	r5, [r4, #8]
 8005dd8:	bfa4      	itt	ge
 8005dda:	f021 0104 	bicge.w	r1, r1, #4
 8005dde:	6021      	strge	r1, [r4, #0]
 8005de0:	b90e      	cbnz	r6, 8005de6 <_printf_i+0x11a>
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	d04d      	beq.n	8005e82 <_printf_i+0x1b6>
 8005de6:	4615      	mov	r5, r2
 8005de8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dec:	fb03 6711 	mls	r7, r3, r1, r6
 8005df0:	5dc7      	ldrb	r7, [r0, r7]
 8005df2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df6:	4637      	mov	r7, r6
 8005df8:	42bb      	cmp	r3, r7
 8005dfa:	460e      	mov	r6, r1
 8005dfc:	d9f4      	bls.n	8005de8 <_printf_i+0x11c>
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d10b      	bne.n	8005e1a <_printf_i+0x14e>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	07de      	lsls	r6, r3, #31
 8005e06:	d508      	bpl.n	8005e1a <_printf_i+0x14e>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	6861      	ldr	r1, [r4, #4]
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	bfde      	ittt	le
 8005e10:	2330      	movle	r3, #48	; 0x30
 8005e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e16:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e1a:	1b52      	subs	r2, r2, r5
 8005e1c:	6122      	str	r2, [r4, #16]
 8005e1e:	464b      	mov	r3, r9
 8005e20:	4621      	mov	r1, r4
 8005e22:	4640      	mov	r0, r8
 8005e24:	f8cd a000 	str.w	sl, [sp]
 8005e28:	aa03      	add	r2, sp, #12
 8005e2a:	f7ff fedf 	bl	8005bec <_printf_common>
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d14c      	bne.n	8005ecc <_printf_i+0x200>
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e36:	b004      	add	sp, #16
 8005e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3c:	4834      	ldr	r0, [pc, #208]	; (8005f10 <_printf_i+0x244>)
 8005e3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e42:	6829      	ldr	r1, [r5, #0]
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	061d      	lsls	r5, r3, #24
 8005e4e:	d514      	bpl.n	8005e7a <_printf_i+0x1ae>
 8005e50:	07df      	lsls	r7, r3, #31
 8005e52:	bf44      	itt	mi
 8005e54:	f043 0320 	orrmi.w	r3, r3, #32
 8005e58:	6023      	strmi	r3, [r4, #0]
 8005e5a:	b91e      	cbnz	r6, 8005e64 <_printf_i+0x198>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f023 0320 	bic.w	r3, r3, #32
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	2310      	movs	r3, #16
 8005e66:	e7af      	b.n	8005dc8 <_printf_i+0xfc>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	2378      	movs	r3, #120	; 0x78
 8005e72:	4828      	ldr	r0, [pc, #160]	; (8005f14 <_printf_i+0x248>)
 8005e74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e78:	e7e3      	b.n	8005e42 <_printf_i+0x176>
 8005e7a:	0659      	lsls	r1, r3, #25
 8005e7c:	bf48      	it	mi
 8005e7e:	b2b6      	uxthmi	r6, r6
 8005e80:	e7e6      	b.n	8005e50 <_printf_i+0x184>
 8005e82:	4615      	mov	r5, r2
 8005e84:	e7bb      	b.n	8005dfe <_printf_i+0x132>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	6826      	ldr	r6, [r4, #0]
 8005e8a:	1d18      	adds	r0, r3, #4
 8005e8c:	6961      	ldr	r1, [r4, #20]
 8005e8e:	6028      	str	r0, [r5, #0]
 8005e90:	0635      	lsls	r5, r6, #24
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	d501      	bpl.n	8005e9a <_printf_i+0x1ce>
 8005e96:	6019      	str	r1, [r3, #0]
 8005e98:	e002      	b.n	8005ea0 <_printf_i+0x1d4>
 8005e9a:	0670      	lsls	r0, r6, #25
 8005e9c:	d5fb      	bpl.n	8005e96 <_printf_i+0x1ca>
 8005e9e:	8019      	strh	r1, [r3, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4615      	mov	r5, r2
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	e7ba      	b.n	8005e1e <_printf_i+0x152>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	2100      	movs	r1, #0
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fedd 	bl	8006c74 <memchr>
 8005eba:	b108      	cbz	r0, 8005ec0 <_printf_i+0x1f4>
 8005ebc:	1b40      	subs	r0, r0, r5
 8005ebe:	6060      	str	r0, [r4, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eca:	e7a8      	b.n	8005e1e <_printf_i+0x152>
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	47d0      	blx	sl
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0ab      	beq.n	8005e32 <_printf_i+0x166>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	079b      	lsls	r3, r3, #30
 8005ede:	d413      	bmi.n	8005f08 <_printf_i+0x23c>
 8005ee0:	68e0      	ldr	r0, [r4, #12]
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	4298      	cmp	r0, r3
 8005ee6:	bfb8      	it	lt
 8005ee8:	4618      	movlt	r0, r3
 8005eea:	e7a4      	b.n	8005e36 <_printf_i+0x16a>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4632      	mov	r2, r6
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	47d0      	blx	sl
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d09b      	beq.n	8005e32 <_printf_i+0x166>
 8005efa:	3501      	adds	r5, #1
 8005efc:	68e3      	ldr	r3, [r4, #12]
 8005efe:	9903      	ldr	r1, [sp, #12]
 8005f00:	1a5b      	subs	r3, r3, r1
 8005f02:	42ab      	cmp	r3, r5
 8005f04:	dcf2      	bgt.n	8005eec <_printf_i+0x220>
 8005f06:	e7eb      	b.n	8005ee0 <_printf_i+0x214>
 8005f08:	2500      	movs	r5, #0
 8005f0a:	f104 0619 	add.w	r6, r4, #25
 8005f0e:	e7f5      	b.n	8005efc <_printf_i+0x230>
 8005f10:	080091ee 	.word	0x080091ee
 8005f14:	080091ff 	.word	0x080091ff

08005f18 <_sbrk_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4d05      	ldr	r5, [pc, #20]	; (8005f34 <_sbrk_r+0x1c>)
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fc ffe4 	bl	8002ef0 <_sbrk>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_sbrk_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_sbrk_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	200006d0 	.word	0x200006d0

08005f38 <siprintf>:
 8005f38:	b40e      	push	{r1, r2, r3}
 8005f3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f3e:	b500      	push	{lr}
 8005f40:	b09c      	sub	sp, #112	; 0x70
 8005f42:	ab1d      	add	r3, sp, #116	; 0x74
 8005f44:	9002      	str	r0, [sp, #8]
 8005f46:	9006      	str	r0, [sp, #24]
 8005f48:	9107      	str	r1, [sp, #28]
 8005f4a:	9104      	str	r1, [sp, #16]
 8005f4c:	4808      	ldr	r0, [pc, #32]	; (8005f70 <siprintf+0x38>)
 8005f4e:	4909      	ldr	r1, [pc, #36]	; (8005f74 <siprintf+0x3c>)
 8005f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f54:	9105      	str	r1, [sp, #20]
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	a902      	add	r1, sp, #8
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	f001 faa4 	bl	80074a8 <_svfiprintf_r>
 8005f60:	2200      	movs	r2, #0
 8005f62:	9b02      	ldr	r3, [sp, #8]
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	b01c      	add	sp, #112	; 0x70
 8005f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f6c:	b003      	add	sp, #12
 8005f6e:	4770      	bx	lr
 8005f70:	20000040 	.word	0x20000040
 8005f74:	ffff0208 	.word	0xffff0208

08005f78 <quorem>:
 8005f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	6903      	ldr	r3, [r0, #16]
 8005f7e:	690c      	ldr	r4, [r1, #16]
 8005f80:	4607      	mov	r7, r0
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	f2c0 8082 	blt.w	800608c <quorem+0x114>
 8005f88:	3c01      	subs	r4, #1
 8005f8a:	f100 0514 	add.w	r5, r0, #20
 8005f8e:	f101 0814 	add.w	r8, r1, #20
 8005f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fb0:	d331      	bcc.n	8006016 <quorem+0x9e>
 8005fb2:	f04f 0e00 	mov.w	lr, #0
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	46ac      	mov	ip, r5
 8005fba:	46f2      	mov	sl, lr
 8005fbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fc0:	b293      	uxth	r3, r2
 8005fc2:	fb06 e303 	mla	r3, r6, r3, lr
 8005fc6:	0c12      	lsrs	r2, r2, #16
 8005fc8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	fb06 e202 	mla	r2, r6, r2, lr
 8005fd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd6:	f8dc a000 	ldr.w	sl, [ip]
 8005fda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fde:	fa1f fa8a 	uxth.w	sl, sl
 8005fe2:	4453      	add	r3, sl
 8005fe4:	f8dc a000 	ldr.w	sl, [ip]
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ff8:	4581      	cmp	r9, r0
 8005ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ffe:	f84c 3b04 	str.w	r3, [ip], #4
 8006002:	d2db      	bcs.n	8005fbc <quorem+0x44>
 8006004:	f855 300b 	ldr.w	r3, [r5, fp]
 8006008:	b92b      	cbnz	r3, 8006016 <quorem+0x9e>
 800600a:	9b01      	ldr	r3, [sp, #4]
 800600c:	3b04      	subs	r3, #4
 800600e:	429d      	cmp	r5, r3
 8006010:	461a      	mov	r2, r3
 8006012:	d32f      	bcc.n	8006074 <quorem+0xfc>
 8006014:	613c      	str	r4, [r7, #16]
 8006016:	4638      	mov	r0, r7
 8006018:	f001 f8d2 	bl	80071c0 <__mcmp>
 800601c:	2800      	cmp	r0, #0
 800601e:	db25      	blt.n	800606c <quorem+0xf4>
 8006020:	4628      	mov	r0, r5
 8006022:	f04f 0c00 	mov.w	ip, #0
 8006026:	3601      	adds	r6, #1
 8006028:	f858 1b04 	ldr.w	r1, [r8], #4
 800602c:	f8d0 e000 	ldr.w	lr, [r0]
 8006030:	b28b      	uxth	r3, r1
 8006032:	ebac 0303 	sub.w	r3, ip, r3
 8006036:	fa1f f28e 	uxth.w	r2, lr
 800603a:	4413      	add	r3, r2
 800603c:	0c0a      	lsrs	r2, r1, #16
 800603e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006042:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800604c:	45c1      	cmp	r9, r8
 800604e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006052:	f840 3b04 	str.w	r3, [r0], #4
 8006056:	d2e7      	bcs.n	8006028 <quorem+0xb0>
 8006058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800605c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006060:	b922      	cbnz	r2, 800606c <quorem+0xf4>
 8006062:	3b04      	subs	r3, #4
 8006064:	429d      	cmp	r5, r3
 8006066:	461a      	mov	r2, r3
 8006068:	d30a      	bcc.n	8006080 <quorem+0x108>
 800606a:	613c      	str	r4, [r7, #16]
 800606c:	4630      	mov	r0, r6
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	3b04      	subs	r3, #4
 8006078:	2a00      	cmp	r2, #0
 800607a:	d1cb      	bne.n	8006014 <quorem+0x9c>
 800607c:	3c01      	subs	r4, #1
 800607e:	e7c6      	b.n	800600e <quorem+0x96>
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	3b04      	subs	r3, #4
 8006084:	2a00      	cmp	r2, #0
 8006086:	d1f0      	bne.n	800606a <quorem+0xf2>
 8006088:	3c01      	subs	r4, #1
 800608a:	e7eb      	b.n	8006064 <quorem+0xec>
 800608c:	2000      	movs	r0, #0
 800608e:	e7ee      	b.n	800606e <quorem+0xf6>

08006090 <_dtoa_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	461f      	mov	r7, r3
 8006098:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800609a:	b099      	sub	sp, #100	; 0x64
 800609c:	4605      	mov	r5, r0
 800609e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80060a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80060a6:	b974      	cbnz	r4, 80060c6 <_dtoa_r+0x36>
 80060a8:	2010      	movs	r0, #16
 80060aa:	f7ff f9c7 	bl	800543c <malloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6268      	str	r0, [r5, #36]	; 0x24
 80060b2:	b920      	cbnz	r0, 80060be <_dtoa_r+0x2e>
 80060b4:	21ea      	movs	r1, #234	; 0xea
 80060b6:	4ba8      	ldr	r3, [pc, #672]	; (8006358 <_dtoa_r+0x2c8>)
 80060b8:	48a8      	ldr	r0, [pc, #672]	; (800635c <_dtoa_r+0x2cc>)
 80060ba:	f001 faf5 	bl	80076a8 <__assert_func>
 80060be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060c2:	6004      	str	r4, [r0, #0]
 80060c4:	60c4      	str	r4, [r0, #12]
 80060c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	b151      	cbz	r1, 80060e2 <_dtoa_r+0x52>
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	2301      	movs	r3, #1
 80060d0:	4093      	lsls	r3, r2
 80060d2:	604a      	str	r2, [r1, #4]
 80060d4:	608b      	str	r3, [r1, #8]
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 fe34 	bl	8006d44 <_Bfree>
 80060dc:	2200      	movs	r2, #0
 80060de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	1e3b      	subs	r3, r7, #0
 80060e4:	bfaf      	iteee	ge
 80060e6:	2300      	movge	r3, #0
 80060e8:	2201      	movlt	r2, #1
 80060ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060ee:	9305      	strlt	r3, [sp, #20]
 80060f0:	bfa8      	it	ge
 80060f2:	f8c8 3000 	strge.w	r3, [r8]
 80060f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80060fa:	4b99      	ldr	r3, [pc, #612]	; (8006360 <_dtoa_r+0x2d0>)
 80060fc:	bfb8      	it	lt
 80060fe:	f8c8 2000 	strlt.w	r2, [r8]
 8006102:	ea33 0309 	bics.w	r3, r3, r9
 8006106:	d119      	bne.n	800613c <_dtoa_r+0xac>
 8006108:	f242 730f 	movw	r3, #9999	; 0x270f
 800610c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006114:	4333      	orrs	r3, r6
 8006116:	f000 857f 	beq.w	8006c18 <_dtoa_r+0xb88>
 800611a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800611c:	b953      	cbnz	r3, 8006134 <_dtoa_r+0xa4>
 800611e:	4b91      	ldr	r3, [pc, #580]	; (8006364 <_dtoa_r+0x2d4>)
 8006120:	e022      	b.n	8006168 <_dtoa_r+0xd8>
 8006122:	4b91      	ldr	r3, [pc, #580]	; (8006368 <_dtoa_r+0x2d8>)
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	3308      	adds	r3, #8
 8006128:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	9803      	ldr	r0, [sp, #12]
 800612e:	b019      	add	sp, #100	; 0x64
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	4b8b      	ldr	r3, [pc, #556]	; (8006364 <_dtoa_r+0x2d4>)
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	3303      	adds	r3, #3
 800613a:	e7f5      	b.n	8006128 <_dtoa_r+0x98>
 800613c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006140:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006148:	2200      	movs	r2, #0
 800614a:	2300      	movs	r3, #0
 800614c:	f7fa fc98 	bl	8000a80 <__aeabi_dcmpeq>
 8006150:	4680      	mov	r8, r0
 8006152:	b158      	cbz	r0, 800616c <_dtoa_r+0xdc>
 8006154:	2301      	movs	r3, #1
 8006156:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8558 	beq.w	8006c12 <_dtoa_r+0xb82>
 8006162:	4882      	ldr	r0, [pc, #520]	; (800636c <_dtoa_r+0x2dc>)
 8006164:	6018      	str	r0, [r3, #0]
 8006166:	1e43      	subs	r3, r0, #1
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	e7df      	b.n	800612c <_dtoa_r+0x9c>
 800616c:	ab16      	add	r3, sp, #88	; 0x58
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	ab17      	add	r3, sp, #92	; 0x5c
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	4628      	mov	r0, r5
 8006176:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800617a:	f001 f8c9 	bl	8007310 <__d2b>
 800617e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006182:	4683      	mov	fp, r0
 8006184:	2c00      	cmp	r4, #0
 8006186:	d07f      	beq.n	8006288 <_dtoa_r+0x1f8>
 8006188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800618c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800618e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006196:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800619a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800619e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b72      	ldr	r3, [pc, #456]	; (8006370 <_dtoa_r+0x2e0>)
 80061a6:	f7fa f84b 	bl	8000240 <__aeabi_dsub>
 80061aa:	a365      	add	r3, pc, #404	; (adr r3, 8006340 <_dtoa_r+0x2b0>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f7fa f9fe 	bl	80005b0 <__aeabi_dmul>
 80061b4:	a364      	add	r3, pc, #400	; (adr r3, 8006348 <_dtoa_r+0x2b8>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa f843 	bl	8000244 <__adddf3>
 80061be:	4606      	mov	r6, r0
 80061c0:	4620      	mov	r0, r4
 80061c2:	460f      	mov	r7, r1
 80061c4:	f7fa f98a 	bl	80004dc <__aeabi_i2d>
 80061c8:	a361      	add	r3, pc, #388	; (adr r3, 8006350 <_dtoa_r+0x2c0>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f7fa f9ef 	bl	80005b0 <__aeabi_dmul>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	f7fa f833 	bl	8000244 <__adddf3>
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	f7fa fc95 	bl	8000b10 <__aeabi_d2iz>
 80061e6:	2200      	movs	r2, #0
 80061e8:	4682      	mov	sl, r0
 80061ea:	2300      	movs	r3, #0
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa fc50 	bl	8000a94 <__aeabi_dcmplt>
 80061f4:	b148      	cbz	r0, 800620a <_dtoa_r+0x17a>
 80061f6:	4650      	mov	r0, sl
 80061f8:	f7fa f970 	bl	80004dc <__aeabi_i2d>
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	f7fa fc3e 	bl	8000a80 <__aeabi_dcmpeq>
 8006204:	b908      	cbnz	r0, 800620a <_dtoa_r+0x17a>
 8006206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800620a:	f1ba 0f16 	cmp.w	sl, #22
 800620e:	d858      	bhi.n	80062c2 <_dtoa_r+0x232>
 8006210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006214:	4b57      	ldr	r3, [pc, #348]	; (8006374 <_dtoa_r+0x2e4>)
 8006216:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa fc39 	bl	8000a94 <__aeabi_dcmplt>
 8006222:	2800      	cmp	r0, #0
 8006224:	d04f      	beq.n	80062c6 <_dtoa_r+0x236>
 8006226:	2300      	movs	r3, #0
 8006228:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800622c:	930f      	str	r3, [sp, #60]	; 0x3c
 800622e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006230:	1b1c      	subs	r4, r3, r4
 8006232:	1e63      	subs	r3, r4, #1
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	bf49      	itett	mi
 8006238:	f1c4 0301 	rsbmi	r3, r4, #1
 800623c:	2300      	movpl	r3, #0
 800623e:	9306      	strmi	r3, [sp, #24]
 8006240:	2300      	movmi	r3, #0
 8006242:	bf54      	ite	pl
 8006244:	9306      	strpl	r3, [sp, #24]
 8006246:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006248:	f1ba 0f00 	cmp.w	sl, #0
 800624c:	db3d      	blt.n	80062ca <_dtoa_r+0x23a>
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006254:	4453      	add	r3, sl
 8006256:	9309      	str	r3, [sp, #36]	; 0x24
 8006258:	2300      	movs	r3, #0
 800625a:	930a      	str	r3, [sp, #40]	; 0x28
 800625c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800625e:	2b09      	cmp	r3, #9
 8006260:	f200 808c 	bhi.w	800637c <_dtoa_r+0x2ec>
 8006264:	2b05      	cmp	r3, #5
 8006266:	bfc4      	itt	gt
 8006268:	3b04      	subgt	r3, #4
 800626a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800626c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800626e:	bfc8      	it	gt
 8006270:	2400      	movgt	r4, #0
 8006272:	f1a3 0302 	sub.w	r3, r3, #2
 8006276:	bfd8      	it	le
 8006278:	2401      	movle	r4, #1
 800627a:	2b03      	cmp	r3, #3
 800627c:	f200 808a 	bhi.w	8006394 <_dtoa_r+0x304>
 8006280:	e8df f003 	tbb	[pc, r3]
 8006284:	5b4d4f2d 	.word	0x5b4d4f2d
 8006288:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800628c:	441c      	add	r4, r3
 800628e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006292:	2b20      	cmp	r3, #32
 8006294:	bfc3      	ittte	gt
 8006296:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800629a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800629e:	fa09 f303 	lslgt.w	r3, r9, r3
 80062a2:	f1c3 0320 	rsble	r3, r3, #32
 80062a6:	bfc6      	itte	gt
 80062a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ac:	4318      	orrgt	r0, r3
 80062ae:	fa06 f003 	lslle.w	r0, r6, r3
 80062b2:	f7fa f903 	bl	80004bc <__aeabi_ui2d>
 80062b6:	2301      	movs	r3, #1
 80062b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80062bc:	3c01      	subs	r4, #1
 80062be:	9313      	str	r3, [sp, #76]	; 0x4c
 80062c0:	e76f      	b.n	80061a2 <_dtoa_r+0x112>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7b2      	b.n	800622c <_dtoa_r+0x19c>
 80062c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80062c8:	e7b1      	b.n	800622e <_dtoa_r+0x19e>
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	eba3 030a 	sub.w	r3, r3, sl
 80062d0:	9306      	str	r3, [sp, #24]
 80062d2:	f1ca 0300 	rsb	r3, sl, #0
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	2300      	movs	r3, #0
 80062da:	930e      	str	r3, [sp, #56]	; 0x38
 80062dc:	e7be      	b.n	800625c <_dtoa_r+0x1cc>
 80062de:	2300      	movs	r3, #0
 80062e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dc58      	bgt.n	800639a <_dtoa_r+0x30a>
 80062e8:	f04f 0901 	mov.w	r9, #1
 80062ec:	464b      	mov	r3, r9
 80062ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80062f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80062f6:	2200      	movs	r2, #0
 80062f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80062fa:	6042      	str	r2, [r0, #4]
 80062fc:	2204      	movs	r2, #4
 80062fe:	f102 0614 	add.w	r6, r2, #20
 8006302:	429e      	cmp	r6, r3
 8006304:	6841      	ldr	r1, [r0, #4]
 8006306:	d94e      	bls.n	80063a6 <_dtoa_r+0x316>
 8006308:	4628      	mov	r0, r5
 800630a:	f000 fcdb 	bl	8006cc4 <_Balloc>
 800630e:	9003      	str	r0, [sp, #12]
 8006310:	2800      	cmp	r0, #0
 8006312:	d14c      	bne.n	80063ae <_dtoa_r+0x31e>
 8006314:	4602      	mov	r2, r0
 8006316:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800631a:	4b17      	ldr	r3, [pc, #92]	; (8006378 <_dtoa_r+0x2e8>)
 800631c:	e6cc      	b.n	80060b8 <_dtoa_r+0x28>
 800631e:	2301      	movs	r3, #1
 8006320:	e7de      	b.n	80062e0 <_dtoa_r+0x250>
 8006322:	2300      	movs	r3, #0
 8006324:	930b      	str	r3, [sp, #44]	; 0x2c
 8006326:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006328:	eb0a 0903 	add.w	r9, sl, r3
 800632c:	f109 0301 	add.w	r3, r9, #1
 8006330:	2b01      	cmp	r3, #1
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	bfb8      	it	lt
 8006336:	2301      	movlt	r3, #1
 8006338:	e7dd      	b.n	80062f6 <_dtoa_r+0x266>
 800633a:	2301      	movs	r3, #1
 800633c:	e7f2      	b.n	8006324 <_dtoa_r+0x294>
 800633e:	bf00      	nop
 8006340:	636f4361 	.word	0x636f4361
 8006344:	3fd287a7 	.word	0x3fd287a7
 8006348:	8b60c8b3 	.word	0x8b60c8b3
 800634c:	3fc68a28 	.word	0x3fc68a28
 8006350:	509f79fb 	.word	0x509f79fb
 8006354:	3fd34413 	.word	0x3fd34413
 8006358:	0800921d 	.word	0x0800921d
 800635c:	08009234 	.word	0x08009234
 8006360:	7ff00000 	.word	0x7ff00000
 8006364:	08009219 	.word	0x08009219
 8006368:	08009210 	.word	0x08009210
 800636c:	080091ed 	.word	0x080091ed
 8006370:	3ff80000 	.word	0x3ff80000
 8006374:	08009328 	.word	0x08009328
 8006378:	0800928f 	.word	0x0800928f
 800637c:	2401      	movs	r4, #1
 800637e:	2300      	movs	r3, #0
 8006380:	940b      	str	r4, [sp, #44]	; 0x2c
 8006382:	9322      	str	r3, [sp, #136]	; 0x88
 8006384:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006388:	2200      	movs	r2, #0
 800638a:	2312      	movs	r3, #18
 800638c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006390:	9223      	str	r2, [sp, #140]	; 0x8c
 8006392:	e7b0      	b.n	80062f6 <_dtoa_r+0x266>
 8006394:	2301      	movs	r3, #1
 8006396:	930b      	str	r3, [sp, #44]	; 0x2c
 8006398:	e7f4      	b.n	8006384 <_dtoa_r+0x2f4>
 800639a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800639e:	464b      	mov	r3, r9
 80063a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80063a4:	e7a7      	b.n	80062f6 <_dtoa_r+0x266>
 80063a6:	3101      	adds	r1, #1
 80063a8:	6041      	str	r1, [r0, #4]
 80063aa:	0052      	lsls	r2, r2, #1
 80063ac:	e7a7      	b.n	80062fe <_dtoa_r+0x26e>
 80063ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063b0:	9a03      	ldr	r2, [sp, #12]
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	2b0e      	cmp	r3, #14
 80063b8:	f200 80a8 	bhi.w	800650c <_dtoa_r+0x47c>
 80063bc:	2c00      	cmp	r4, #0
 80063be:	f000 80a5 	beq.w	800650c <_dtoa_r+0x47c>
 80063c2:	f1ba 0f00 	cmp.w	sl, #0
 80063c6:	dd34      	ble.n	8006432 <_dtoa_r+0x3a2>
 80063c8:	4a9a      	ldr	r2, [pc, #616]	; (8006634 <_dtoa_r+0x5a4>)
 80063ca:	f00a 030f 	and.w	r3, sl, #15
 80063ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80063d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80063de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80063e2:	d016      	beq.n	8006412 <_dtoa_r+0x382>
 80063e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063e8:	4b93      	ldr	r3, [pc, #588]	; (8006638 <_dtoa_r+0x5a8>)
 80063ea:	2703      	movs	r7, #3
 80063ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f0:	f7fa fa08 	bl	8000804 <__aeabi_ddiv>
 80063f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063f8:	f004 040f 	and.w	r4, r4, #15
 80063fc:	4e8e      	ldr	r6, [pc, #568]	; (8006638 <_dtoa_r+0x5a8>)
 80063fe:	b954      	cbnz	r4, 8006416 <_dtoa_r+0x386>
 8006400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006408:	f7fa f9fc 	bl	8000804 <__aeabi_ddiv>
 800640c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006410:	e029      	b.n	8006466 <_dtoa_r+0x3d6>
 8006412:	2702      	movs	r7, #2
 8006414:	e7f2      	b.n	80063fc <_dtoa_r+0x36c>
 8006416:	07e1      	lsls	r1, r4, #31
 8006418:	d508      	bpl.n	800642c <_dtoa_r+0x39c>
 800641a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800641e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006422:	f7fa f8c5 	bl	80005b0 <__aeabi_dmul>
 8006426:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800642a:	3701      	adds	r7, #1
 800642c:	1064      	asrs	r4, r4, #1
 800642e:	3608      	adds	r6, #8
 8006430:	e7e5      	b.n	80063fe <_dtoa_r+0x36e>
 8006432:	f000 80a5 	beq.w	8006580 <_dtoa_r+0x4f0>
 8006436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800643a:	f1ca 0400 	rsb	r4, sl, #0
 800643e:	4b7d      	ldr	r3, [pc, #500]	; (8006634 <_dtoa_r+0x5a4>)
 8006440:	f004 020f 	and.w	r2, r4, #15
 8006444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f8b0 	bl	80005b0 <__aeabi_dmul>
 8006450:	2702      	movs	r7, #2
 8006452:	2300      	movs	r3, #0
 8006454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006458:	4e77      	ldr	r6, [pc, #476]	; (8006638 <_dtoa_r+0x5a8>)
 800645a:	1124      	asrs	r4, r4, #4
 800645c:	2c00      	cmp	r4, #0
 800645e:	f040 8084 	bne.w	800656a <_dtoa_r+0x4da>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1d2      	bne.n	800640c <_dtoa_r+0x37c>
 8006466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 808b 	beq.w	8006584 <_dtoa_r+0x4f4>
 800646e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006472:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006476:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800647a:	2200      	movs	r2, #0
 800647c:	4b6f      	ldr	r3, [pc, #444]	; (800663c <_dtoa_r+0x5ac>)
 800647e:	f7fa fb09 	bl	8000a94 <__aeabi_dcmplt>
 8006482:	2800      	cmp	r0, #0
 8006484:	d07e      	beq.n	8006584 <_dtoa_r+0x4f4>
 8006486:	9b08      	ldr	r3, [sp, #32]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d07b      	beq.n	8006584 <_dtoa_r+0x4f4>
 800648c:	f1b9 0f00 	cmp.w	r9, #0
 8006490:	dd38      	ble.n	8006504 <_dtoa_r+0x474>
 8006492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006496:	2200      	movs	r2, #0
 8006498:	4b69      	ldr	r3, [pc, #420]	; (8006640 <_dtoa_r+0x5b0>)
 800649a:	f7fa f889 	bl	80005b0 <__aeabi_dmul>
 800649e:	464c      	mov	r4, r9
 80064a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064a4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80064a8:	3701      	adds	r7, #1
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7fa f816 	bl	80004dc <__aeabi_i2d>
 80064b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b4:	f7fa f87c 	bl	80005b0 <__aeabi_dmul>
 80064b8:	2200      	movs	r2, #0
 80064ba:	4b62      	ldr	r3, [pc, #392]	; (8006644 <_dtoa_r+0x5b4>)
 80064bc:	f7f9 fec2 	bl	8000244 <__adddf3>
 80064c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80064c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064c8:	9611      	str	r6, [sp, #68]	; 0x44
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	d15d      	bne.n	800658a <_dtoa_r+0x4fa>
 80064ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d2:	2200      	movs	r2, #0
 80064d4:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <_dtoa_r+0x5b8>)
 80064d6:	f7f9 feb3 	bl	8000240 <__aeabi_dsub>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064e2:	4633      	mov	r3, r6
 80064e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064e6:	f7fa faf3 	bl	8000ad0 <__aeabi_dcmpgt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f040 829c 	bne.w	8006a28 <_dtoa_r+0x998>
 80064f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064fa:	f7fa facb 	bl	8000a94 <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f040 8290 	bne.w	8006a24 <_dtoa_r+0x994>
 8006504:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006508:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800650c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800650e:	2b00      	cmp	r3, #0
 8006510:	f2c0 8152 	blt.w	80067b8 <_dtoa_r+0x728>
 8006514:	f1ba 0f0e 	cmp.w	sl, #14
 8006518:	f300 814e 	bgt.w	80067b8 <_dtoa_r+0x728>
 800651c:	4b45      	ldr	r3, [pc, #276]	; (8006634 <_dtoa_r+0x5a4>)
 800651e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006522:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006526:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800652a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800652c:	2b00      	cmp	r3, #0
 800652e:	f280 80db 	bge.w	80066e8 <_dtoa_r+0x658>
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f300 80d7 	bgt.w	80066e8 <_dtoa_r+0x658>
 800653a:	f040 8272 	bne.w	8006a22 <_dtoa_r+0x992>
 800653e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006542:	2200      	movs	r2, #0
 8006544:	4b40      	ldr	r3, [pc, #256]	; (8006648 <_dtoa_r+0x5b8>)
 8006546:	f7fa f833 	bl	80005b0 <__aeabi_dmul>
 800654a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654e:	f7fa fab5 	bl	8000abc <__aeabi_dcmpge>
 8006552:	9c08      	ldr	r4, [sp, #32]
 8006554:	4626      	mov	r6, r4
 8006556:	2800      	cmp	r0, #0
 8006558:	f040 8248 	bne.w	80069ec <_dtoa_r+0x95c>
 800655c:	2331      	movs	r3, #49	; 0x31
 800655e:	9f03      	ldr	r7, [sp, #12]
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	f807 3b01 	strb.w	r3, [r7], #1
 8006568:	e244      	b.n	80069f4 <_dtoa_r+0x964>
 800656a:	07e2      	lsls	r2, r4, #31
 800656c:	d505      	bpl.n	800657a <_dtoa_r+0x4ea>
 800656e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006572:	f7fa f81d 	bl	80005b0 <__aeabi_dmul>
 8006576:	2301      	movs	r3, #1
 8006578:	3701      	adds	r7, #1
 800657a:	1064      	asrs	r4, r4, #1
 800657c:	3608      	adds	r6, #8
 800657e:	e76d      	b.n	800645c <_dtoa_r+0x3cc>
 8006580:	2702      	movs	r7, #2
 8006582:	e770      	b.n	8006466 <_dtoa_r+0x3d6>
 8006584:	46d0      	mov	r8, sl
 8006586:	9c08      	ldr	r4, [sp, #32]
 8006588:	e78f      	b.n	80064aa <_dtoa_r+0x41a>
 800658a:	9903      	ldr	r1, [sp, #12]
 800658c:	4b29      	ldr	r3, [pc, #164]	; (8006634 <_dtoa_r+0x5a4>)
 800658e:	4421      	add	r1, r4
 8006590:	9112      	str	r1, [sp, #72]	; 0x48
 8006592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006594:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006598:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800659c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d055      	beq.n	8006650 <_dtoa_r+0x5c0>
 80065a4:	2000      	movs	r0, #0
 80065a6:	4929      	ldr	r1, [pc, #164]	; (800664c <_dtoa_r+0x5bc>)
 80065a8:	f7fa f92c 	bl	8000804 <__aeabi_ddiv>
 80065ac:	463b      	mov	r3, r7
 80065ae:	4632      	mov	r2, r6
 80065b0:	f7f9 fe46 	bl	8000240 <__aeabi_dsub>
 80065b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065b8:	9f03      	ldr	r7, [sp, #12]
 80065ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065be:	f7fa faa7 	bl	8000b10 <__aeabi_d2iz>
 80065c2:	4604      	mov	r4, r0
 80065c4:	f7f9 ff8a 	bl	80004dc <__aeabi_i2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d0:	f7f9 fe36 	bl	8000240 <__aeabi_dsub>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	3430      	adds	r4, #48	; 0x30
 80065da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065e2:	f807 4b01 	strb.w	r4, [r7], #1
 80065e6:	f7fa fa55 	bl	8000a94 <__aeabi_dcmplt>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d174      	bne.n	80066d8 <_dtoa_r+0x648>
 80065ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f2:	2000      	movs	r0, #0
 80065f4:	4911      	ldr	r1, [pc, #68]	; (800663c <_dtoa_r+0x5ac>)
 80065f6:	f7f9 fe23 	bl	8000240 <__aeabi_dsub>
 80065fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065fe:	f7fa fa49 	bl	8000a94 <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	f040 80b7 	bne.w	8006776 <_dtoa_r+0x6e6>
 8006608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800660a:	429f      	cmp	r7, r3
 800660c:	f43f af7a 	beq.w	8006504 <_dtoa_r+0x474>
 8006610:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006614:	2200      	movs	r2, #0
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <_dtoa_r+0x5b0>)
 8006618:	f7f9 ffca 	bl	80005b0 <__aeabi_dmul>
 800661c:	2200      	movs	r2, #0
 800661e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <_dtoa_r+0x5b0>)
 8006628:	f7f9 ffc2 	bl	80005b0 <__aeabi_dmul>
 800662c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006630:	e7c3      	b.n	80065ba <_dtoa_r+0x52a>
 8006632:	bf00      	nop
 8006634:	08009328 	.word	0x08009328
 8006638:	08009300 	.word	0x08009300
 800663c:	3ff00000 	.word	0x3ff00000
 8006640:	40240000 	.word	0x40240000
 8006644:	401c0000 	.word	0x401c0000
 8006648:	40140000 	.word	0x40140000
 800664c:	3fe00000 	.word	0x3fe00000
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7f9 ffac 	bl	80005b0 <__aeabi_dmul>
 8006658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800665a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800665e:	9c03      	ldr	r4, [sp, #12]
 8006660:	9314      	str	r3, [sp, #80]	; 0x50
 8006662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006666:	f7fa fa53 	bl	8000b10 <__aeabi_d2iz>
 800666a:	9015      	str	r0, [sp, #84]	; 0x54
 800666c:	f7f9 ff36 	bl	80004dc <__aeabi_i2d>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006678:	f7f9 fde2 	bl	8000240 <__aeabi_dsub>
 800667c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800667e:	4606      	mov	r6, r0
 8006680:	3330      	adds	r3, #48	; 0x30
 8006682:	f804 3b01 	strb.w	r3, [r4], #1
 8006686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006688:	460f      	mov	r7, r1
 800668a:	429c      	cmp	r4, r3
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	d124      	bne.n	80066dc <_dtoa_r+0x64c>
 8006692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006696:	4bb0      	ldr	r3, [pc, #704]	; (8006958 <_dtoa_r+0x8c8>)
 8006698:	f7f9 fdd4 	bl	8000244 <__adddf3>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7fa fa14 	bl	8000ad0 <__aeabi_dcmpgt>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d163      	bne.n	8006774 <_dtoa_r+0x6e4>
 80066ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066b0:	2000      	movs	r0, #0
 80066b2:	49a9      	ldr	r1, [pc, #676]	; (8006958 <_dtoa_r+0x8c8>)
 80066b4:	f7f9 fdc4 	bl	8000240 <__aeabi_dsub>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4630      	mov	r0, r6
 80066be:	4639      	mov	r1, r7
 80066c0:	f7fa f9e8 	bl	8000a94 <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f af1d 	beq.w	8006504 <_dtoa_r+0x474>
 80066ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80066cc:	1e7b      	subs	r3, r7, #1
 80066ce:	9314      	str	r3, [sp, #80]	; 0x50
 80066d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80066d4:	2b30      	cmp	r3, #48	; 0x30
 80066d6:	d0f8      	beq.n	80066ca <_dtoa_r+0x63a>
 80066d8:	46c2      	mov	sl, r8
 80066da:	e03b      	b.n	8006754 <_dtoa_r+0x6c4>
 80066dc:	4b9f      	ldr	r3, [pc, #636]	; (800695c <_dtoa_r+0x8cc>)
 80066de:	f7f9 ff67 	bl	80005b0 <__aeabi_dmul>
 80066e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e6:	e7bc      	b.n	8006662 <_dtoa_r+0x5d2>
 80066e8:	9f03      	ldr	r7, [sp, #12]
 80066ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80066ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f7fa f885 	bl	8000804 <__aeabi_ddiv>
 80066fa:	f7fa fa09 	bl	8000b10 <__aeabi_d2iz>
 80066fe:	4604      	mov	r4, r0
 8006700:	f7f9 feec 	bl	80004dc <__aeabi_i2d>
 8006704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006708:	f7f9 ff52 	bl	80005b0 <__aeabi_dmul>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7f9 fd94 	bl	8000240 <__aeabi_dsub>
 8006718:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800671c:	f807 6b01 	strb.w	r6, [r7], #1
 8006720:	9e03      	ldr	r6, [sp, #12]
 8006722:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006726:	1bbe      	subs	r6, r7, r6
 8006728:	45b4      	cmp	ip, r6
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	d136      	bne.n	800679e <_dtoa_r+0x70e>
 8006730:	f7f9 fd88 	bl	8000244 <__adddf3>
 8006734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006738:	4680      	mov	r8, r0
 800673a:	4689      	mov	r9, r1
 800673c:	f7fa f9c8 	bl	8000ad0 <__aeabi_dcmpgt>
 8006740:	bb58      	cbnz	r0, 800679a <_dtoa_r+0x70a>
 8006742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7fa f999 	bl	8000a80 <__aeabi_dcmpeq>
 800674e:	b108      	cbz	r0, 8006754 <_dtoa_r+0x6c4>
 8006750:	07e1      	lsls	r1, r4, #31
 8006752:	d422      	bmi.n	800679a <_dtoa_r+0x70a>
 8006754:	4628      	mov	r0, r5
 8006756:	4659      	mov	r1, fp
 8006758:	f000 faf4 	bl	8006d44 <_Bfree>
 800675c:	2300      	movs	r3, #0
 800675e:	703b      	strb	r3, [r7, #0]
 8006760:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006762:	f10a 0001 	add.w	r0, sl, #1
 8006766:	6018      	str	r0, [r3, #0]
 8006768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800676a:	2b00      	cmp	r3, #0
 800676c:	f43f acde 	beq.w	800612c <_dtoa_r+0x9c>
 8006770:	601f      	str	r7, [r3, #0]
 8006772:	e4db      	b.n	800612c <_dtoa_r+0x9c>
 8006774:	4627      	mov	r7, r4
 8006776:	463b      	mov	r3, r7
 8006778:	461f      	mov	r7, r3
 800677a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800677e:	2a39      	cmp	r2, #57	; 0x39
 8006780:	d107      	bne.n	8006792 <_dtoa_r+0x702>
 8006782:	9a03      	ldr	r2, [sp, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d1f7      	bne.n	8006778 <_dtoa_r+0x6e8>
 8006788:	2230      	movs	r2, #48	; 0x30
 800678a:	9903      	ldr	r1, [sp, #12]
 800678c:	f108 0801 	add.w	r8, r8, #1
 8006790:	700a      	strb	r2, [r1, #0]
 8006792:	781a      	ldrb	r2, [r3, #0]
 8006794:	3201      	adds	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	e79e      	b.n	80066d8 <_dtoa_r+0x648>
 800679a:	46d0      	mov	r8, sl
 800679c:	e7eb      	b.n	8006776 <_dtoa_r+0x6e6>
 800679e:	2200      	movs	r2, #0
 80067a0:	4b6e      	ldr	r3, [pc, #440]	; (800695c <_dtoa_r+0x8cc>)
 80067a2:	f7f9 ff05 	bl	80005b0 <__aeabi_dmul>
 80067a6:	2200      	movs	r2, #0
 80067a8:	2300      	movs	r3, #0
 80067aa:	4680      	mov	r8, r0
 80067ac:	4689      	mov	r9, r1
 80067ae:	f7fa f967 	bl	8000a80 <__aeabi_dcmpeq>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d09b      	beq.n	80066ee <_dtoa_r+0x65e>
 80067b6:	e7cd      	b.n	8006754 <_dtoa_r+0x6c4>
 80067b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	f000 80d0 	beq.w	8006960 <_dtoa_r+0x8d0>
 80067c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067c2:	2a01      	cmp	r2, #1
 80067c4:	f300 80ae 	bgt.w	8006924 <_dtoa_r+0x894>
 80067c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	f000 80a6 	beq.w	800691c <_dtoa_r+0x88c>
 80067d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067d6:	9f06      	ldr	r7, [sp, #24]
 80067d8:	9a06      	ldr	r2, [sp, #24]
 80067da:	2101      	movs	r1, #1
 80067dc:	441a      	add	r2, r3
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e2:	4628      	mov	r0, r5
 80067e4:	441a      	add	r2, r3
 80067e6:	9209      	str	r2, [sp, #36]	; 0x24
 80067e8:	f000 fb62 	bl	8006eb0 <__i2b>
 80067ec:	4606      	mov	r6, r0
 80067ee:	2f00      	cmp	r7, #0
 80067f0:	dd0c      	ble.n	800680c <_dtoa_r+0x77c>
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dd09      	ble.n	800680c <_dtoa_r+0x77c>
 80067f8:	42bb      	cmp	r3, r7
 80067fa:	bfa8      	it	ge
 80067fc:	463b      	movge	r3, r7
 80067fe:	9a06      	ldr	r2, [sp, #24]
 8006800:	1aff      	subs	r7, r7, r3
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	9206      	str	r2, [sp, #24]
 8006806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	9309      	str	r3, [sp, #36]	; 0x24
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	b1f3      	cbz	r3, 800684e <_dtoa_r+0x7be>
 8006810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 80a8 	beq.w	8006968 <_dtoa_r+0x8d8>
 8006818:	2c00      	cmp	r4, #0
 800681a:	dd10      	ble.n	800683e <_dtoa_r+0x7ae>
 800681c:	4631      	mov	r1, r6
 800681e:	4622      	mov	r2, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fc03 	bl	800702c <__pow5mult>
 8006826:	465a      	mov	r2, fp
 8006828:	4601      	mov	r1, r0
 800682a:	4606      	mov	r6, r0
 800682c:	4628      	mov	r0, r5
 800682e:	f000 fb55 	bl	8006edc <__multiply>
 8006832:	4680      	mov	r8, r0
 8006834:	4659      	mov	r1, fp
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fa84 	bl	8006d44 <_Bfree>
 800683c:	46c3      	mov	fp, r8
 800683e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006840:	1b1a      	subs	r2, r3, r4
 8006842:	d004      	beq.n	800684e <_dtoa_r+0x7be>
 8006844:	4659      	mov	r1, fp
 8006846:	4628      	mov	r0, r5
 8006848:	f000 fbf0 	bl	800702c <__pow5mult>
 800684c:	4683      	mov	fp, r0
 800684e:	2101      	movs	r1, #1
 8006850:	4628      	mov	r0, r5
 8006852:	f000 fb2d 	bl	8006eb0 <__i2b>
 8006856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006858:	4604      	mov	r4, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	f340 8086 	ble.w	800696c <_dtoa_r+0x8dc>
 8006860:	461a      	mov	r2, r3
 8006862:	4601      	mov	r1, r0
 8006864:	4628      	mov	r0, r5
 8006866:	f000 fbe1 	bl	800702c <__pow5mult>
 800686a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800686c:	4604      	mov	r4, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	dd7f      	ble.n	8006972 <_dtoa_r+0x8e2>
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800687c:	6918      	ldr	r0, [r3, #16]
 800687e:	f000 fac9 	bl	8006e14 <__hi0bits>
 8006882:	f1c0 0020 	rsb	r0, r0, #32
 8006886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006888:	4418      	add	r0, r3
 800688a:	f010 001f 	ands.w	r0, r0, #31
 800688e:	f000 8092 	beq.w	80069b6 <_dtoa_r+0x926>
 8006892:	f1c0 0320 	rsb	r3, r0, #32
 8006896:	2b04      	cmp	r3, #4
 8006898:	f340 808a 	ble.w	80069b0 <_dtoa_r+0x920>
 800689c:	f1c0 001c 	rsb	r0, r0, #28
 80068a0:	9b06      	ldr	r3, [sp, #24]
 80068a2:	4407      	add	r7, r0
 80068a4:	4403      	add	r3, r0
 80068a6:	9306      	str	r3, [sp, #24]
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	4403      	add	r3, r0
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	9b06      	ldr	r3, [sp, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd05      	ble.n	80068c0 <_dtoa_r+0x830>
 80068b4:	4659      	mov	r1, fp
 80068b6:	461a      	mov	r2, r3
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fc11 	bl	80070e0 <__lshift>
 80068be:	4683      	mov	fp, r0
 80068c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dd05      	ble.n	80068d2 <_dtoa_r+0x842>
 80068c6:	4621      	mov	r1, r4
 80068c8:	461a      	mov	r2, r3
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 fc08 	bl	80070e0 <__lshift>
 80068d0:	4604      	mov	r4, r0
 80068d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d070      	beq.n	80069ba <_dtoa_r+0x92a>
 80068d8:	4621      	mov	r1, r4
 80068da:	4658      	mov	r0, fp
 80068dc:	f000 fc70 	bl	80071c0 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	da6a      	bge.n	80069ba <_dtoa_r+0x92a>
 80068e4:	2300      	movs	r3, #0
 80068e6:	4659      	mov	r1, fp
 80068e8:	220a      	movs	r2, #10
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 fa4c 	bl	8006d88 <__multadd>
 80068f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f2:	4683      	mov	fp, r0
 80068f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8194 	beq.w	8006c26 <_dtoa_r+0xb96>
 80068fe:	4631      	mov	r1, r6
 8006900:	2300      	movs	r3, #0
 8006902:	220a      	movs	r2, #10
 8006904:	4628      	mov	r0, r5
 8006906:	f000 fa3f 	bl	8006d88 <__multadd>
 800690a:	f1b9 0f00 	cmp.w	r9, #0
 800690e:	4606      	mov	r6, r0
 8006910:	f300 8093 	bgt.w	8006a3a <_dtoa_r+0x9aa>
 8006914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006916:	2b02      	cmp	r3, #2
 8006918:	dc57      	bgt.n	80069ca <_dtoa_r+0x93a>
 800691a:	e08e      	b.n	8006a3a <_dtoa_r+0x9aa>
 800691c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800691e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006922:	e757      	b.n	80067d4 <_dtoa_r+0x744>
 8006924:	9b08      	ldr	r3, [sp, #32]
 8006926:	1e5c      	subs	r4, r3, #1
 8006928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692a:	42a3      	cmp	r3, r4
 800692c:	bfb7      	itett	lt
 800692e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006930:	1b1c      	subge	r4, r3, r4
 8006932:	1ae2      	sublt	r2, r4, r3
 8006934:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006936:	bfbe      	ittt	lt
 8006938:	940a      	strlt	r4, [sp, #40]	; 0x28
 800693a:	189b      	addlt	r3, r3, r2
 800693c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	bfb8      	it	lt
 8006942:	2400      	movlt	r4, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbb      	ittet	lt
 8006948:	9b06      	ldrlt	r3, [sp, #24]
 800694a:	9a08      	ldrlt	r2, [sp, #32]
 800694c:	9f06      	ldrge	r7, [sp, #24]
 800694e:	1a9f      	sublt	r7, r3, r2
 8006950:	bfac      	ite	ge
 8006952:	9b08      	ldrge	r3, [sp, #32]
 8006954:	2300      	movlt	r3, #0
 8006956:	e73f      	b.n	80067d8 <_dtoa_r+0x748>
 8006958:	3fe00000 	.word	0x3fe00000
 800695c:	40240000 	.word	0x40240000
 8006960:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006962:	9f06      	ldr	r7, [sp, #24]
 8006964:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006966:	e742      	b.n	80067ee <_dtoa_r+0x75e>
 8006968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800696a:	e76b      	b.n	8006844 <_dtoa_r+0x7b4>
 800696c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800696e:	2b01      	cmp	r3, #1
 8006970:	dc19      	bgt.n	80069a6 <_dtoa_r+0x916>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	b9bb      	cbnz	r3, 80069a6 <_dtoa_r+0x916>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800697c:	b99b      	cbnz	r3, 80069a6 <_dtoa_r+0x916>
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006984:	0d1b      	lsrs	r3, r3, #20
 8006986:	051b      	lsls	r3, r3, #20
 8006988:	b183      	cbz	r3, 80069ac <_dtoa_r+0x91c>
 800698a:	f04f 0801 	mov.w	r8, #1
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	3301      	adds	r3, #1
 8006992:	9306      	str	r3, [sp, #24]
 8006994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006996:	3301      	adds	r3, #1
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f af6a 	bne.w	8006876 <_dtoa_r+0x7e6>
 80069a2:	2001      	movs	r0, #1
 80069a4:	e76f      	b.n	8006886 <_dtoa_r+0x7f6>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	e7f6      	b.n	800699a <_dtoa_r+0x90a>
 80069ac:	4698      	mov	r8, r3
 80069ae:	e7f4      	b.n	800699a <_dtoa_r+0x90a>
 80069b0:	f43f af7d 	beq.w	80068ae <_dtoa_r+0x81e>
 80069b4:	4618      	mov	r0, r3
 80069b6:	301c      	adds	r0, #28
 80069b8:	e772      	b.n	80068a0 <_dtoa_r+0x810>
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc36      	bgt.n	8006a2e <_dtoa_r+0x99e>
 80069c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	dd33      	ble.n	8006a2e <_dtoa_r+0x99e>
 80069c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069ca:	f1b9 0f00 	cmp.w	r9, #0
 80069ce:	d10d      	bne.n	80069ec <_dtoa_r+0x95c>
 80069d0:	4621      	mov	r1, r4
 80069d2:	464b      	mov	r3, r9
 80069d4:	2205      	movs	r2, #5
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f9d6 	bl	8006d88 <__multadd>
 80069dc:	4601      	mov	r1, r0
 80069de:	4604      	mov	r4, r0
 80069e0:	4658      	mov	r0, fp
 80069e2:	f000 fbed 	bl	80071c0 <__mcmp>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f73f adb8 	bgt.w	800655c <_dtoa_r+0x4cc>
 80069ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ee:	9f03      	ldr	r7, [sp, #12]
 80069f0:	ea6f 0a03 	mvn.w	sl, r3
 80069f4:	f04f 0800 	mov.w	r8, #0
 80069f8:	4621      	mov	r1, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 f9a2 	bl	8006d44 <_Bfree>
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	f43f aea7 	beq.w	8006754 <_dtoa_r+0x6c4>
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	d005      	beq.n	8006a18 <_dtoa_r+0x988>
 8006a0c:	45b0      	cmp	r8, r6
 8006a0e:	d003      	beq.n	8006a18 <_dtoa_r+0x988>
 8006a10:	4641      	mov	r1, r8
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f996 	bl	8006d44 <_Bfree>
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f992 	bl	8006d44 <_Bfree>
 8006a20:	e698      	b.n	8006754 <_dtoa_r+0x6c4>
 8006a22:	2400      	movs	r4, #0
 8006a24:	4626      	mov	r6, r4
 8006a26:	e7e1      	b.n	80069ec <_dtoa_r+0x95c>
 8006a28:	46c2      	mov	sl, r8
 8006a2a:	4626      	mov	r6, r4
 8006a2c:	e596      	b.n	800655c <_dtoa_r+0x4cc>
 8006a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80fd 	beq.w	8006c34 <_dtoa_r+0xba4>
 8006a3a:	2f00      	cmp	r7, #0
 8006a3c:	dd05      	ble.n	8006a4a <_dtoa_r+0x9ba>
 8006a3e:	4631      	mov	r1, r6
 8006a40:	463a      	mov	r2, r7
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 fb4c 	bl	80070e0 <__lshift>
 8006a48:	4606      	mov	r6, r0
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	d05c      	beq.n	8006b0a <_dtoa_r+0xa7a>
 8006a50:	4628      	mov	r0, r5
 8006a52:	6871      	ldr	r1, [r6, #4]
 8006a54:	f000 f936 	bl	8006cc4 <_Balloc>
 8006a58:	4607      	mov	r7, r0
 8006a5a:	b928      	cbnz	r0, 8006a68 <_dtoa_r+0x9d8>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a62:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <_dtoa_r+0xbd0>)
 8006a64:	f7ff bb28 	b.w	80060b8 <_dtoa_r+0x28>
 8006a68:	6932      	ldr	r2, [r6, #16]
 8006a6a:	f106 010c 	add.w	r1, r6, #12
 8006a6e:	3202      	adds	r2, #2
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	300c      	adds	r0, #12
 8006a74:	f000 f90c 	bl	8006c90 <memcpy>
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 fb2f 	bl	80070e0 <__lshift>
 8006a82:	46b0      	mov	r8, r6
 8006a84:	4606      	mov	r6, r0
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	9308      	str	r3, [sp, #32]
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	444b      	add	r3, r9
 8006a90:	930a      	str	r3, [sp, #40]	; 0x28
 8006a92:	9b04      	ldr	r3, [sp, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9a:	9b08      	ldr	r3, [sp, #32]
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	4658      	mov	r0, fp
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	f7ff fa68 	bl	8005f78 <quorem>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4641      	mov	r1, r8
 8006aac:	3330      	adds	r3, #48	; 0x30
 8006aae:	9006      	str	r0, [sp, #24]
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ab4:	f000 fb84 	bl	80071c0 <__mcmp>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4681      	mov	r9, r0
 8006abc:	4621      	mov	r1, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fb9a 	bl	80071f8 <__mdiff>
 8006ac4:	68c2      	ldr	r2, [r0, #12]
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aca:	bb02      	cbnz	r2, 8006b0e <_dtoa_r+0xa7e>
 8006acc:	4601      	mov	r1, r0
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f000 fb76 	bl	80071c0 <__mcmp>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4628      	mov	r0, r5
 8006adc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ae0:	f000 f930 	bl	8006d44 <_Bfree>
 8006ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae8:	9f08      	ldr	r7, [sp, #32]
 8006aea:	ea43 0102 	orr.w	r1, r3, r2
 8006aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af0:	430b      	orrs	r3, r1
 8006af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af4:	d10d      	bne.n	8006b12 <_dtoa_r+0xa82>
 8006af6:	2b39      	cmp	r3, #57	; 0x39
 8006af8:	d029      	beq.n	8006b4e <_dtoa_r+0xabe>
 8006afa:	f1b9 0f00 	cmp.w	r9, #0
 8006afe:	dd01      	ble.n	8006b04 <_dtoa_r+0xa74>
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	3331      	adds	r3, #49	; 0x31
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	7013      	strb	r3, [r2, #0]
 8006b08:	e776      	b.n	80069f8 <_dtoa_r+0x968>
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	e7b9      	b.n	8006a82 <_dtoa_r+0x9f2>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	e7e2      	b.n	8006ad8 <_dtoa_r+0xa48>
 8006b12:	f1b9 0f00 	cmp.w	r9, #0
 8006b16:	db06      	blt.n	8006b26 <_dtoa_r+0xa96>
 8006b18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b1a:	ea41 0909 	orr.w	r9, r1, r9
 8006b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b20:	ea59 0101 	orrs.w	r1, r9, r1
 8006b24:	d120      	bne.n	8006b68 <_dtoa_r+0xad8>
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	ddec      	ble.n	8006b04 <_dtoa_r+0xa74>
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4628      	mov	r0, r5
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	f000 fad5 	bl	80070e0 <__lshift>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4683      	mov	fp, r0
 8006b3a:	f000 fb41 	bl	80071c0 <__mcmp>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	dc02      	bgt.n	8006b4a <_dtoa_r+0xaba>
 8006b44:	d1de      	bne.n	8006b04 <_dtoa_r+0xa74>
 8006b46:	07da      	lsls	r2, r3, #31
 8006b48:	d5dc      	bpl.n	8006b04 <_dtoa_r+0xa74>
 8006b4a:	2b39      	cmp	r3, #57	; 0x39
 8006b4c:	d1d8      	bne.n	8006b00 <_dtoa_r+0xa70>
 8006b4e:	2339      	movs	r3, #57	; 0x39
 8006b50:	9a04      	ldr	r2, [sp, #16]
 8006b52:	7013      	strb	r3, [r2, #0]
 8006b54:	463b      	mov	r3, r7
 8006b56:	461f      	mov	r7, r3
 8006b58:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	2a39      	cmp	r2, #57	; 0x39
 8006b60:	d050      	beq.n	8006c04 <_dtoa_r+0xb74>
 8006b62:	3201      	adds	r2, #1
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	e747      	b.n	80069f8 <_dtoa_r+0x968>
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	dd03      	ble.n	8006b74 <_dtoa_r+0xae4>
 8006b6c:	2b39      	cmp	r3, #57	; 0x39
 8006b6e:	d0ee      	beq.n	8006b4e <_dtoa_r+0xabe>
 8006b70:	3301      	adds	r3, #1
 8006b72:	e7c7      	b.n	8006b04 <_dtoa_r+0xa74>
 8006b74:	9a08      	ldr	r2, [sp, #32]
 8006b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b7c:	428a      	cmp	r2, r1
 8006b7e:	d02a      	beq.n	8006bd6 <_dtoa_r+0xb46>
 8006b80:	4659      	mov	r1, fp
 8006b82:	2300      	movs	r3, #0
 8006b84:	220a      	movs	r2, #10
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f8fe 	bl	8006d88 <__multadd>
 8006b8c:	45b0      	cmp	r8, r6
 8006b8e:	4683      	mov	fp, r0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	f04f 020a 	mov.w	r2, #10
 8006b98:	4641      	mov	r1, r8
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	d107      	bne.n	8006bae <_dtoa_r+0xb1e>
 8006b9e:	f000 f8f3 	bl	8006d88 <__multadd>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	9308      	str	r3, [sp, #32]
 8006bac:	e775      	b.n	8006a9a <_dtoa_r+0xa0a>
 8006bae:	f000 f8eb 	bl	8006d88 <__multadd>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	220a      	movs	r2, #10
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f8e4 	bl	8006d88 <__multadd>
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	e7f0      	b.n	8006ba6 <_dtoa_r+0xb16>
 8006bc4:	f1b9 0f00 	cmp.w	r9, #0
 8006bc8:	bfcc      	ite	gt
 8006bca:	464f      	movgt	r7, r9
 8006bcc:	2701      	movle	r7, #1
 8006bce:	f04f 0800 	mov.w	r8, #0
 8006bd2:	9a03      	ldr	r2, [sp, #12]
 8006bd4:	4417      	add	r7, r2
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	2201      	movs	r2, #1
 8006bda:	4628      	mov	r0, r5
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	f000 fa7f 	bl	80070e0 <__lshift>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4683      	mov	fp, r0
 8006be6:	f000 faeb 	bl	80071c0 <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dcb2      	bgt.n	8006b54 <_dtoa_r+0xac4>
 8006bee:	d102      	bne.n	8006bf6 <_dtoa_r+0xb66>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d4ae      	bmi.n	8006b54 <_dtoa_r+0xac4>
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	461f      	mov	r7, r3
 8006bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bfe:	2a30      	cmp	r2, #48	; 0x30
 8006c00:	d0fa      	beq.n	8006bf8 <_dtoa_r+0xb68>
 8006c02:	e6f9      	b.n	80069f8 <_dtoa_r+0x968>
 8006c04:	9a03      	ldr	r2, [sp, #12]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d1a5      	bne.n	8006b56 <_dtoa_r+0xac6>
 8006c0a:	2331      	movs	r3, #49	; 0x31
 8006c0c:	f10a 0a01 	add.w	sl, sl, #1
 8006c10:	e779      	b.n	8006b06 <_dtoa_r+0xa76>
 8006c12:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <_dtoa_r+0xbd4>)
 8006c14:	f7ff baa8 	b.w	8006168 <_dtoa_r+0xd8>
 8006c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f47f aa81 	bne.w	8006122 <_dtoa_r+0x92>
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <_dtoa_r+0xbd8>)
 8006c22:	f7ff baa1 	b.w	8006168 <_dtoa_r+0xd8>
 8006c26:	f1b9 0f00 	cmp.w	r9, #0
 8006c2a:	dc03      	bgt.n	8006c34 <_dtoa_r+0xba4>
 8006c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	f73f aecb 	bgt.w	80069ca <_dtoa_r+0x93a>
 8006c34:	9f03      	ldr	r7, [sp, #12]
 8006c36:	4621      	mov	r1, r4
 8006c38:	4658      	mov	r0, fp
 8006c3a:	f7ff f99d 	bl	8005f78 <quorem>
 8006c3e:	9a03      	ldr	r2, [sp, #12]
 8006c40:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c44:	f807 3b01 	strb.w	r3, [r7], #1
 8006c48:	1aba      	subs	r2, r7, r2
 8006c4a:	4591      	cmp	r9, r2
 8006c4c:	ddba      	ble.n	8006bc4 <_dtoa_r+0xb34>
 8006c4e:	4659      	mov	r1, fp
 8006c50:	2300      	movs	r3, #0
 8006c52:	220a      	movs	r2, #10
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f897 	bl	8006d88 <__multadd>
 8006c5a:	4683      	mov	fp, r0
 8006c5c:	e7eb      	b.n	8006c36 <_dtoa_r+0xba6>
 8006c5e:	bf00      	nop
 8006c60:	0800928f 	.word	0x0800928f
 8006c64:	080091ec 	.word	0x080091ec
 8006c68:	08009210 	.word	0x08009210

08006c6c <_localeconv_r>:
 8006c6c:	4800      	ldr	r0, [pc, #0]	; (8006c70 <_localeconv_r+0x4>)
 8006c6e:	4770      	bx	lr
 8006c70:	20000194 	.word	0x20000194

08006c74 <memchr>:
 8006c74:	4603      	mov	r3, r0
 8006c76:	b510      	push	{r4, lr}
 8006c78:	b2c9      	uxtb	r1, r1
 8006c7a:	4402      	add	r2, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	d101      	bne.n	8006c86 <memchr+0x12>
 8006c82:	2000      	movs	r0, #0
 8006c84:	e003      	b.n	8006c8e <memchr+0x1a>
 8006c86:	7804      	ldrb	r4, [r0, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	428c      	cmp	r4, r1
 8006c8c:	d1f6      	bne.n	8006c7c <memchr+0x8>
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <memcpy>:
 8006c90:	440a      	add	r2, r1
 8006c92:	4291      	cmp	r1, r2
 8006c94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c98:	d100      	bne.n	8006c9c <memcpy+0xc>
 8006c9a:	4770      	bx	lr
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	4291      	cmp	r1, r2
 8006ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca8:	d1f9      	bne.n	8006c9e <memcpy+0xe>
 8006caa:	bd10      	pop	{r4, pc}

08006cac <__malloc_lock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__malloc_lock+0x8>)
 8006cae:	f000 bd2c 	b.w	800770a <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	200006d4 	.word	0x200006d4

08006cb8 <__malloc_unlock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__malloc_unlock+0x8>)
 8006cba:	f000 bd27 	b.w	800770c <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	200006d4 	.word	0x200006d4

08006cc4 <_Balloc>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	b976      	cbnz	r6, 8006cec <_Balloc+0x28>
 8006cce:	2010      	movs	r0, #16
 8006cd0:	f7fe fbb4 	bl	800543c <malloc>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006cd8:	b920      	cbnz	r0, 8006ce4 <_Balloc+0x20>
 8006cda:	2166      	movs	r1, #102	; 0x66
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <_Balloc+0x78>)
 8006cde:	4818      	ldr	r0, [pc, #96]	; (8006d40 <_Balloc+0x7c>)
 8006ce0:	f000 fce2 	bl	80076a8 <__assert_func>
 8006ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce8:	6006      	str	r6, [r0, #0]
 8006cea:	60c6      	str	r6, [r0, #12]
 8006cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cee:	68f3      	ldr	r3, [r6, #12]
 8006cf0:	b183      	cbz	r3, 8006d14 <_Balloc+0x50>
 8006cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cfa:	b9b8      	cbnz	r0, 8006d2c <_Balloc+0x68>
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006d02:	1d72      	adds	r2, r6, #5
 8006d04:	4620      	mov	r0, r4
 8006d06:	0092      	lsls	r2, r2, #2
 8006d08:	f000 fb5e 	bl	80073c8 <_calloc_r>
 8006d0c:	b160      	cbz	r0, 8006d28 <_Balloc+0x64>
 8006d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d12:	e00e      	b.n	8006d32 <_Balloc+0x6e>
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	2104      	movs	r1, #4
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fb55 	bl	80073c8 <_calloc_r>
 8006d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d20:	60f0      	str	r0, [r6, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e4      	bne.n	8006cf2 <_Balloc+0x2e>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d32:	2300      	movs	r3, #0
 8006d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d38:	e7f7      	b.n	8006d2a <_Balloc+0x66>
 8006d3a:	bf00      	nop
 8006d3c:	0800921d 	.word	0x0800921d
 8006d40:	080092a0 	.word	0x080092a0

08006d44 <_Bfree>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b976      	cbnz	r6, 8006d6c <_Bfree+0x28>
 8006d4e:	2010      	movs	r0, #16
 8006d50:	f7fe fb74 	bl	800543c <malloc>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6268      	str	r0, [r5, #36]	; 0x24
 8006d58:	b920      	cbnz	r0, 8006d64 <_Bfree+0x20>
 8006d5a:	218a      	movs	r1, #138	; 0x8a
 8006d5c:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <_Bfree+0x3c>)
 8006d5e:	4809      	ldr	r0, [pc, #36]	; (8006d84 <_Bfree+0x40>)
 8006d60:	f000 fca2 	bl	80076a8 <__assert_func>
 8006d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d68:	6006      	str	r6, [r0, #0]
 8006d6a:	60c6      	str	r6, [r0, #12]
 8006d6c:	b13c      	cbz	r4, 8006d7e <_Bfree+0x3a>
 8006d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d70:	6862      	ldr	r2, [r4, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d78:	6021      	str	r1, [r4, #0]
 8006d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	0800921d 	.word	0x0800921d
 8006d84:	080092a0 	.word	0x080092a0

08006d88 <__multadd>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	461e      	mov	r6, r3
 8006d92:	2000      	movs	r0, #0
 8006d94:	690d      	ldr	r5, [r1, #16]
 8006d96:	f101 0c14 	add.w	ip, r1, #20
 8006d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d9e:	3001      	adds	r0, #1
 8006da0:	b299      	uxth	r1, r3
 8006da2:	fb02 6101 	mla	r1, r2, r1, r6
 8006da6:	0c1e      	lsrs	r6, r3, #16
 8006da8:	0c0b      	lsrs	r3, r1, #16
 8006daa:	fb02 3306 	mla	r3, r2, r6, r3
 8006dae:	b289      	uxth	r1, r1
 8006db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006db4:	4285      	cmp	r5, r0
 8006db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dba:	f84c 1b04 	str.w	r1, [ip], #4
 8006dbe:	dcec      	bgt.n	8006d9a <__multadd+0x12>
 8006dc0:	b30e      	cbz	r6, 8006e06 <__multadd+0x7e>
 8006dc2:	68a3      	ldr	r3, [r4, #8]
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc19      	bgt.n	8006dfc <__multadd+0x74>
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	3101      	adds	r1, #1
 8006dce:	f7ff ff79 	bl	8006cc4 <_Balloc>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	b928      	cbnz	r0, 8006de2 <__multadd+0x5a>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	21b5      	movs	r1, #181	; 0xb5
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <__multadd+0x84>)
 8006ddc:	480c      	ldr	r0, [pc, #48]	; (8006e10 <__multadd+0x88>)
 8006dde:	f000 fc63 	bl	80076a8 <__assert_func>
 8006de2:	6922      	ldr	r2, [r4, #16]
 8006de4:	f104 010c 	add.w	r1, r4, #12
 8006de8:	3202      	adds	r2, #2
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	300c      	adds	r0, #12
 8006dee:	f7ff ff4f 	bl	8006c90 <memcpy>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff ffa5 	bl	8006d44 <_Bfree>
 8006dfa:	4644      	mov	r4, r8
 8006dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e00:	3501      	adds	r5, #1
 8006e02:	615e      	str	r6, [r3, #20]
 8006e04:	6125      	str	r5, [r4, #16]
 8006e06:	4620      	mov	r0, r4
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	0800928f 	.word	0x0800928f
 8006e10:	080092a0 	.word	0x080092a0

08006e14 <__hi0bits>:
 8006e14:	0c02      	lsrs	r2, r0, #16
 8006e16:	0412      	lsls	r2, r2, #16
 8006e18:	4603      	mov	r3, r0
 8006e1a:	b9ca      	cbnz	r2, 8006e50 <__hi0bits+0x3c>
 8006e1c:	0403      	lsls	r3, r0, #16
 8006e1e:	2010      	movs	r0, #16
 8006e20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e24:	bf04      	itt	eq
 8006e26:	021b      	lsleq	r3, r3, #8
 8006e28:	3008      	addeq	r0, #8
 8006e2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e2e:	bf04      	itt	eq
 8006e30:	011b      	lsleq	r3, r3, #4
 8006e32:	3004      	addeq	r0, #4
 8006e34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e38:	bf04      	itt	eq
 8006e3a:	009b      	lsleq	r3, r3, #2
 8006e3c:	3002      	addeq	r0, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	db05      	blt.n	8006e4e <__hi0bits+0x3a>
 8006e42:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006e46:	f100 0001 	add.w	r0, r0, #1
 8006e4a:	bf08      	it	eq
 8006e4c:	2020      	moveq	r0, #32
 8006e4e:	4770      	bx	lr
 8006e50:	2000      	movs	r0, #0
 8006e52:	e7e5      	b.n	8006e20 <__hi0bits+0xc>

08006e54 <__lo0bits>:
 8006e54:	6803      	ldr	r3, [r0, #0]
 8006e56:	4602      	mov	r2, r0
 8006e58:	f013 0007 	ands.w	r0, r3, #7
 8006e5c:	d00b      	beq.n	8006e76 <__lo0bits+0x22>
 8006e5e:	07d9      	lsls	r1, r3, #31
 8006e60:	d421      	bmi.n	8006ea6 <__lo0bits+0x52>
 8006e62:	0798      	lsls	r0, r3, #30
 8006e64:	bf49      	itett	mi
 8006e66:	085b      	lsrmi	r3, r3, #1
 8006e68:	089b      	lsrpl	r3, r3, #2
 8006e6a:	2001      	movmi	r0, #1
 8006e6c:	6013      	strmi	r3, [r2, #0]
 8006e6e:	bf5c      	itt	pl
 8006e70:	2002      	movpl	r0, #2
 8006e72:	6013      	strpl	r3, [r2, #0]
 8006e74:	4770      	bx	lr
 8006e76:	b299      	uxth	r1, r3
 8006e78:	b909      	cbnz	r1, 8006e7e <__lo0bits+0x2a>
 8006e7a:	2010      	movs	r0, #16
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	b2d9      	uxtb	r1, r3
 8006e80:	b909      	cbnz	r1, 8006e86 <__lo0bits+0x32>
 8006e82:	3008      	adds	r0, #8
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	0719      	lsls	r1, r3, #28
 8006e88:	bf04      	itt	eq
 8006e8a:	091b      	lsreq	r3, r3, #4
 8006e8c:	3004      	addeq	r0, #4
 8006e8e:	0799      	lsls	r1, r3, #30
 8006e90:	bf04      	itt	eq
 8006e92:	089b      	lsreq	r3, r3, #2
 8006e94:	3002      	addeq	r0, #2
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d403      	bmi.n	8006ea2 <__lo0bits+0x4e>
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	f100 0001 	add.w	r0, r0, #1
 8006ea0:	d003      	beq.n	8006eaa <__lo0bits+0x56>
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	4770      	bx	lr
 8006eaa:	2020      	movs	r0, #32
 8006eac:	4770      	bx	lr
	...

08006eb0 <__i2b>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	f7ff ff05 	bl	8006cc4 <_Balloc>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	b928      	cbnz	r0, 8006eca <__i2b+0x1a>
 8006ebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ec2:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <__i2b+0x24>)
 8006ec4:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <__i2b+0x28>)
 8006ec6:	f000 fbef 	bl	80076a8 <__assert_func>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6144      	str	r4, [r0, #20]
 8006ece:	6103      	str	r3, [r0, #16]
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	0800928f 	.word	0x0800928f
 8006ed8:	080092a0 	.word	0x080092a0

08006edc <__multiply>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4691      	mov	r9, r2
 8006ee2:	690a      	ldr	r2, [r1, #16]
 8006ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ee8:	460c      	mov	r4, r1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	bfbe      	ittt	lt
 8006eee:	460b      	movlt	r3, r1
 8006ef0:	464c      	movlt	r4, r9
 8006ef2:	4699      	movlt	r9, r3
 8006ef4:	6927      	ldr	r7, [r4, #16]
 8006ef6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006efa:	68a3      	ldr	r3, [r4, #8]
 8006efc:	6861      	ldr	r1, [r4, #4]
 8006efe:	eb07 060a 	add.w	r6, r7, sl
 8006f02:	42b3      	cmp	r3, r6
 8006f04:	b085      	sub	sp, #20
 8006f06:	bfb8      	it	lt
 8006f08:	3101      	addlt	r1, #1
 8006f0a:	f7ff fedb 	bl	8006cc4 <_Balloc>
 8006f0e:	b930      	cbnz	r0, 8006f1e <__multiply+0x42>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f240 115d 	movw	r1, #349	; 0x15d
 8006f16:	4b43      	ldr	r3, [pc, #268]	; (8007024 <__multiply+0x148>)
 8006f18:	4843      	ldr	r0, [pc, #268]	; (8007028 <__multiply+0x14c>)
 8006f1a:	f000 fbc5 	bl	80076a8 <__assert_func>
 8006f1e:	f100 0514 	add.w	r5, r0, #20
 8006f22:	462b      	mov	r3, r5
 8006f24:	2200      	movs	r2, #0
 8006f26:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f2a:	4543      	cmp	r3, r8
 8006f2c:	d321      	bcc.n	8006f72 <__multiply+0x96>
 8006f2e:	f104 0314 	add.w	r3, r4, #20
 8006f32:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f36:	f109 0314 	add.w	r3, r9, #20
 8006f3a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f3e:	9202      	str	r2, [sp, #8]
 8006f40:	1b3a      	subs	r2, r7, r4
 8006f42:	3a15      	subs	r2, #21
 8006f44:	f022 0203 	bic.w	r2, r2, #3
 8006f48:	3204      	adds	r2, #4
 8006f4a:	f104 0115 	add.w	r1, r4, #21
 8006f4e:	428f      	cmp	r7, r1
 8006f50:	bf38      	it	cc
 8006f52:	2204      	movcc	r2, #4
 8006f54:	9201      	str	r2, [sp, #4]
 8006f56:	9a02      	ldr	r2, [sp, #8]
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d80c      	bhi.n	8006f78 <__multiply+0x9c>
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	dd03      	ble.n	8006f6a <__multiply+0x8e>
 8006f62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d059      	beq.n	800701e <__multiply+0x142>
 8006f6a:	6106      	str	r6, [r0, #16]
 8006f6c:	b005      	add	sp, #20
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	f843 2b04 	str.w	r2, [r3], #4
 8006f76:	e7d8      	b.n	8006f2a <__multiply+0x4e>
 8006f78:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f7c:	f1ba 0f00 	cmp.w	sl, #0
 8006f80:	d023      	beq.n	8006fca <__multiply+0xee>
 8006f82:	46a9      	mov	r9, r5
 8006f84:	f04f 0c00 	mov.w	ip, #0
 8006f88:	f104 0e14 	add.w	lr, r4, #20
 8006f8c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f90:	f8d9 1000 	ldr.w	r1, [r9]
 8006f94:	fa1f fb82 	uxth.w	fp, r2
 8006f98:	b289      	uxth	r1, r1
 8006f9a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f9e:	4461      	add	r1, ip
 8006fa0:	f8d9 c000 	ldr.w	ip, [r9]
 8006fa4:	0c12      	lsrs	r2, r2, #16
 8006fa6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006faa:	fb0a c202 	mla	r2, sl, r2, ip
 8006fae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fb2:	b289      	uxth	r1, r1
 8006fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fb8:	4577      	cmp	r7, lr
 8006fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fbe:	f849 1b04 	str.w	r1, [r9], #4
 8006fc2:	d8e3      	bhi.n	8006f8c <__multiply+0xb0>
 8006fc4:	9a01      	ldr	r2, [sp, #4]
 8006fc6:	f845 c002 	str.w	ip, [r5, r2]
 8006fca:	9a03      	ldr	r2, [sp, #12]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fd2:	f1b9 0f00 	cmp.w	r9, #0
 8006fd6:	d020      	beq.n	800701a <__multiply+0x13e>
 8006fd8:	46ae      	mov	lr, r5
 8006fda:	f04f 0a00 	mov.w	sl, #0
 8006fde:	6829      	ldr	r1, [r5, #0]
 8006fe0:	f104 0c14 	add.w	ip, r4, #20
 8006fe4:	f8bc b000 	ldrh.w	fp, [ip]
 8006fe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fec:	b289      	uxth	r1, r1
 8006fee:	fb09 220b 	mla	r2, r9, fp, r2
 8006ff2:	4492      	add	sl, r2
 8006ff4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ff8:	f84e 1b04 	str.w	r1, [lr], #4
 8006ffc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007000:	f8be 1000 	ldrh.w	r1, [lr]
 8007004:	0c12      	lsrs	r2, r2, #16
 8007006:	fb09 1102 	mla	r1, r9, r2, r1
 800700a:	4567      	cmp	r7, ip
 800700c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007014:	d8e6      	bhi.n	8006fe4 <__multiply+0x108>
 8007016:	9a01      	ldr	r2, [sp, #4]
 8007018:	50a9      	str	r1, [r5, r2]
 800701a:	3504      	adds	r5, #4
 800701c:	e79b      	b.n	8006f56 <__multiply+0x7a>
 800701e:	3e01      	subs	r6, #1
 8007020:	e79d      	b.n	8006f5e <__multiply+0x82>
 8007022:	bf00      	nop
 8007024:	0800928f 	.word	0x0800928f
 8007028:	080092a0 	.word	0x080092a0

0800702c <__pow5mult>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	4615      	mov	r5, r2
 8007032:	f012 0203 	ands.w	r2, r2, #3
 8007036:	4606      	mov	r6, r0
 8007038:	460f      	mov	r7, r1
 800703a:	d007      	beq.n	800704c <__pow5mult+0x20>
 800703c:	4c25      	ldr	r4, [pc, #148]	; (80070d4 <__pow5mult+0xa8>)
 800703e:	3a01      	subs	r2, #1
 8007040:	2300      	movs	r3, #0
 8007042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007046:	f7ff fe9f 	bl	8006d88 <__multadd>
 800704a:	4607      	mov	r7, r0
 800704c:	10ad      	asrs	r5, r5, #2
 800704e:	d03d      	beq.n	80070cc <__pow5mult+0xa0>
 8007050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007052:	b97c      	cbnz	r4, 8007074 <__pow5mult+0x48>
 8007054:	2010      	movs	r0, #16
 8007056:	f7fe f9f1 	bl	800543c <malloc>
 800705a:	4602      	mov	r2, r0
 800705c:	6270      	str	r0, [r6, #36]	; 0x24
 800705e:	b928      	cbnz	r0, 800706c <__pow5mult+0x40>
 8007060:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007064:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <__pow5mult+0xac>)
 8007066:	481d      	ldr	r0, [pc, #116]	; (80070dc <__pow5mult+0xb0>)
 8007068:	f000 fb1e 	bl	80076a8 <__assert_func>
 800706c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007070:	6004      	str	r4, [r0, #0]
 8007072:	60c4      	str	r4, [r0, #12]
 8007074:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800707c:	b94c      	cbnz	r4, 8007092 <__pow5mult+0x66>
 800707e:	f240 2171 	movw	r1, #625	; 0x271
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff ff14 	bl	8006eb0 <__i2b>
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007090:	6003      	str	r3, [r0, #0]
 8007092:	f04f 0900 	mov.w	r9, #0
 8007096:	07eb      	lsls	r3, r5, #31
 8007098:	d50a      	bpl.n	80070b0 <__pow5mult+0x84>
 800709a:	4639      	mov	r1, r7
 800709c:	4622      	mov	r2, r4
 800709e:	4630      	mov	r0, r6
 80070a0:	f7ff ff1c 	bl	8006edc <__multiply>
 80070a4:	4680      	mov	r8, r0
 80070a6:	4639      	mov	r1, r7
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff fe4b 	bl	8006d44 <_Bfree>
 80070ae:	4647      	mov	r7, r8
 80070b0:	106d      	asrs	r5, r5, #1
 80070b2:	d00b      	beq.n	80070cc <__pow5mult+0xa0>
 80070b4:	6820      	ldr	r0, [r4, #0]
 80070b6:	b938      	cbnz	r0, 80070c8 <__pow5mult+0x9c>
 80070b8:	4622      	mov	r2, r4
 80070ba:	4621      	mov	r1, r4
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff ff0d 	bl	8006edc <__multiply>
 80070c2:	6020      	str	r0, [r4, #0]
 80070c4:	f8c0 9000 	str.w	r9, [r0]
 80070c8:	4604      	mov	r4, r0
 80070ca:	e7e4      	b.n	8007096 <__pow5mult+0x6a>
 80070cc:	4638      	mov	r0, r7
 80070ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d2:	bf00      	nop
 80070d4:	080093f0 	.word	0x080093f0
 80070d8:	0800921d 	.word	0x0800921d
 80070dc:	080092a0 	.word	0x080092a0

080070e0 <__lshift>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	460c      	mov	r4, r1
 80070e6:	4607      	mov	r7, r0
 80070e8:	4691      	mov	r9, r2
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070f8:	f108 0601 	add.w	r6, r8, #1
 80070fc:	42b3      	cmp	r3, r6
 80070fe:	db0b      	blt.n	8007118 <__lshift+0x38>
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff fddf 	bl	8006cc4 <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b948      	cbnz	r0, 800711e <__lshift+0x3e>
 800710a:	4602      	mov	r2, r0
 800710c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007110:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <__lshift+0xd8>)
 8007112:	482a      	ldr	r0, [pc, #168]	; (80071bc <__lshift+0xdc>)
 8007114:	f000 fac8 	bl	80076a8 <__assert_func>
 8007118:	3101      	adds	r1, #1
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	e7ee      	b.n	80070fc <__lshift+0x1c>
 800711e:	2300      	movs	r3, #0
 8007120:	f100 0114 	add.w	r1, r0, #20
 8007124:	f100 0210 	add.w	r2, r0, #16
 8007128:	4618      	mov	r0, r3
 800712a:	4553      	cmp	r3, sl
 800712c:	db37      	blt.n	800719e <__lshift+0xbe>
 800712e:	6920      	ldr	r0, [r4, #16]
 8007130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007134:	f104 0314 	add.w	r3, r4, #20
 8007138:	f019 091f 	ands.w	r9, r9, #31
 800713c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007144:	d02f      	beq.n	80071a6 <__lshift+0xc6>
 8007146:	468a      	mov	sl, r1
 8007148:	f04f 0c00 	mov.w	ip, #0
 800714c:	f1c9 0e20 	rsb	lr, r9, #32
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	fa02 f209 	lsl.w	r2, r2, r9
 8007156:	ea42 020c 	orr.w	r2, r2, ip
 800715a:	f84a 2b04 	str.w	r2, [sl], #4
 800715e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007162:	4298      	cmp	r0, r3
 8007164:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007168:	d8f2      	bhi.n	8007150 <__lshift+0x70>
 800716a:	1b03      	subs	r3, r0, r4
 800716c:	3b15      	subs	r3, #21
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	3304      	adds	r3, #4
 8007174:	f104 0215 	add.w	r2, r4, #21
 8007178:	4290      	cmp	r0, r2
 800717a:	bf38      	it	cc
 800717c:	2304      	movcc	r3, #4
 800717e:	f841 c003 	str.w	ip, [r1, r3]
 8007182:	f1bc 0f00 	cmp.w	ip, #0
 8007186:	d001      	beq.n	800718c <__lshift+0xac>
 8007188:	f108 0602 	add.w	r6, r8, #2
 800718c:	3e01      	subs	r6, #1
 800718e:	4638      	mov	r0, r7
 8007190:	4621      	mov	r1, r4
 8007192:	612e      	str	r6, [r5, #16]
 8007194:	f7ff fdd6 	bl	8006d44 <_Bfree>
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	f842 0f04 	str.w	r0, [r2, #4]!
 80071a2:	3301      	adds	r3, #1
 80071a4:	e7c1      	b.n	800712a <__lshift+0x4a>
 80071a6:	3904      	subs	r1, #4
 80071a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ac:	4298      	cmp	r0, r3
 80071ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80071b2:	d8f9      	bhi.n	80071a8 <__lshift+0xc8>
 80071b4:	e7ea      	b.n	800718c <__lshift+0xac>
 80071b6:	bf00      	nop
 80071b8:	0800928f 	.word	0x0800928f
 80071bc:	080092a0 	.word	0x080092a0

080071c0 <__mcmp>:
 80071c0:	4603      	mov	r3, r0
 80071c2:	690a      	ldr	r2, [r1, #16]
 80071c4:	6900      	ldr	r0, [r0, #16]
 80071c6:	b530      	push	{r4, r5, lr}
 80071c8:	1a80      	subs	r0, r0, r2
 80071ca:	d10d      	bne.n	80071e8 <__mcmp+0x28>
 80071cc:	3314      	adds	r3, #20
 80071ce:	3114      	adds	r1, #20
 80071d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071e0:	4295      	cmp	r5, r2
 80071e2:	d002      	beq.n	80071ea <__mcmp+0x2a>
 80071e4:	d304      	bcc.n	80071f0 <__mcmp+0x30>
 80071e6:	2001      	movs	r0, #1
 80071e8:	bd30      	pop	{r4, r5, pc}
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	d3f4      	bcc.n	80071d8 <__mcmp+0x18>
 80071ee:	e7fb      	b.n	80071e8 <__mcmp+0x28>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f4:	e7f8      	b.n	80071e8 <__mcmp+0x28>
	...

080071f8 <__mdiff>:
 80071f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	460d      	mov	r5, r1
 80071fe:	4607      	mov	r7, r0
 8007200:	4611      	mov	r1, r2
 8007202:	4628      	mov	r0, r5
 8007204:	4614      	mov	r4, r2
 8007206:	f7ff ffdb 	bl	80071c0 <__mcmp>
 800720a:	1e06      	subs	r6, r0, #0
 800720c:	d111      	bne.n	8007232 <__mdiff+0x3a>
 800720e:	4631      	mov	r1, r6
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff fd57 	bl	8006cc4 <_Balloc>
 8007216:	4602      	mov	r2, r0
 8007218:	b928      	cbnz	r0, 8007226 <__mdiff+0x2e>
 800721a:	f240 2132 	movw	r1, #562	; 0x232
 800721e:	4b3a      	ldr	r3, [pc, #232]	; (8007308 <__mdiff+0x110>)
 8007220:	483a      	ldr	r0, [pc, #232]	; (800730c <__mdiff+0x114>)
 8007222:	f000 fa41 	bl	80076a8 <__assert_func>
 8007226:	2301      	movs	r3, #1
 8007228:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800722c:	4610      	mov	r0, r2
 800722e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	bfa4      	itt	ge
 8007234:	4623      	movge	r3, r4
 8007236:	462c      	movge	r4, r5
 8007238:	4638      	mov	r0, r7
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	bfa6      	itte	ge
 800723e:	461d      	movge	r5, r3
 8007240:	2600      	movge	r6, #0
 8007242:	2601      	movlt	r6, #1
 8007244:	f7ff fd3e 	bl	8006cc4 <_Balloc>
 8007248:	4602      	mov	r2, r0
 800724a:	b918      	cbnz	r0, 8007254 <__mdiff+0x5c>
 800724c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007250:	4b2d      	ldr	r3, [pc, #180]	; (8007308 <__mdiff+0x110>)
 8007252:	e7e5      	b.n	8007220 <__mdiff+0x28>
 8007254:	f102 0814 	add.w	r8, r2, #20
 8007258:	46c2      	mov	sl, r8
 800725a:	f04f 0c00 	mov.w	ip, #0
 800725e:	6927      	ldr	r7, [r4, #16]
 8007260:	60c6      	str	r6, [r0, #12]
 8007262:	692e      	ldr	r6, [r5, #16]
 8007264:	f104 0014 	add.w	r0, r4, #20
 8007268:	f105 0914 	add.w	r9, r5, #20
 800726c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007270:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007274:	3410      	adds	r4, #16
 8007276:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800727a:	f859 3b04 	ldr.w	r3, [r9], #4
 800727e:	fa1f f18b 	uxth.w	r1, fp
 8007282:	448c      	add	ip, r1
 8007284:	b299      	uxth	r1, r3
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	ebac 0101 	sub.w	r1, ip, r1
 800728c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007290:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007294:	b289      	uxth	r1, r1
 8007296:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800729a:	454e      	cmp	r6, r9
 800729c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80072a0:	f84a 3b04 	str.w	r3, [sl], #4
 80072a4:	d8e7      	bhi.n	8007276 <__mdiff+0x7e>
 80072a6:	1b73      	subs	r3, r6, r5
 80072a8:	3b15      	subs	r3, #21
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	3515      	adds	r5, #21
 80072b0:	3304      	adds	r3, #4
 80072b2:	42ae      	cmp	r6, r5
 80072b4:	bf38      	it	cc
 80072b6:	2304      	movcc	r3, #4
 80072b8:	4418      	add	r0, r3
 80072ba:	4443      	add	r3, r8
 80072bc:	461e      	mov	r6, r3
 80072be:	4605      	mov	r5, r0
 80072c0:	4575      	cmp	r5, lr
 80072c2:	d30e      	bcc.n	80072e2 <__mdiff+0xea>
 80072c4:	f10e 0103 	add.w	r1, lr, #3
 80072c8:	1a09      	subs	r1, r1, r0
 80072ca:	f021 0103 	bic.w	r1, r1, #3
 80072ce:	3803      	subs	r0, #3
 80072d0:	4586      	cmp	lr, r0
 80072d2:	bf38      	it	cc
 80072d4:	2100      	movcc	r1, #0
 80072d6:	4419      	add	r1, r3
 80072d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80072dc:	b18b      	cbz	r3, 8007302 <__mdiff+0x10a>
 80072de:	6117      	str	r7, [r2, #16]
 80072e0:	e7a4      	b.n	800722c <__mdiff+0x34>
 80072e2:	f855 8b04 	ldr.w	r8, [r5], #4
 80072e6:	fa1f f188 	uxth.w	r1, r8
 80072ea:	4461      	add	r1, ip
 80072ec:	140c      	asrs	r4, r1, #16
 80072ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072f2:	b289      	uxth	r1, r1
 80072f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072f8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80072fc:	f846 1b04 	str.w	r1, [r6], #4
 8007300:	e7de      	b.n	80072c0 <__mdiff+0xc8>
 8007302:	3f01      	subs	r7, #1
 8007304:	e7e8      	b.n	80072d8 <__mdiff+0xe0>
 8007306:	bf00      	nop
 8007308:	0800928f 	.word	0x0800928f
 800730c:	080092a0 	.word	0x080092a0

08007310 <__d2b>:
 8007310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007314:	2101      	movs	r1, #1
 8007316:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800731a:	4690      	mov	r8, r2
 800731c:	461d      	mov	r5, r3
 800731e:	f7ff fcd1 	bl	8006cc4 <_Balloc>
 8007322:	4604      	mov	r4, r0
 8007324:	b930      	cbnz	r0, 8007334 <__d2b+0x24>
 8007326:	4602      	mov	r2, r0
 8007328:	f240 310a 	movw	r1, #778	; 0x30a
 800732c:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <__d2b+0xb0>)
 800732e:	4825      	ldr	r0, [pc, #148]	; (80073c4 <__d2b+0xb4>)
 8007330:	f000 f9ba 	bl	80076a8 <__assert_func>
 8007334:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007338:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800733c:	bb2d      	cbnz	r5, 800738a <__d2b+0x7a>
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	f1b8 0300 	subs.w	r3, r8, #0
 8007344:	d026      	beq.n	8007394 <__d2b+0x84>
 8007346:	4668      	mov	r0, sp
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	f7ff fd83 	bl	8006e54 <__lo0bits>
 800734e:	9900      	ldr	r1, [sp, #0]
 8007350:	b1f0      	cbz	r0, 8007390 <__d2b+0x80>
 8007352:	9a01      	ldr	r2, [sp, #4]
 8007354:	f1c0 0320 	rsb	r3, r0, #32
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	430b      	orrs	r3, r1
 800735e:	40c2      	lsrs	r2, r0
 8007360:	6163      	str	r3, [r4, #20]
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf14      	ite	ne
 800736a:	2102      	movne	r1, #2
 800736c:	2101      	moveq	r1, #1
 800736e:	61a3      	str	r3, [r4, #24]
 8007370:	6121      	str	r1, [r4, #16]
 8007372:	b1c5      	cbz	r5, 80073a6 <__d2b+0x96>
 8007374:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007378:	4405      	add	r5, r0
 800737a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800737e:	603d      	str	r5, [r7, #0]
 8007380:	6030      	str	r0, [r6, #0]
 8007382:	4620      	mov	r0, r4
 8007384:	b002      	add	sp, #8
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800738e:	e7d6      	b.n	800733e <__d2b+0x2e>
 8007390:	6161      	str	r1, [r4, #20]
 8007392:	e7e7      	b.n	8007364 <__d2b+0x54>
 8007394:	a801      	add	r0, sp, #4
 8007396:	f7ff fd5d 	bl	8006e54 <__lo0bits>
 800739a:	2101      	movs	r1, #1
 800739c:	9b01      	ldr	r3, [sp, #4]
 800739e:	6121      	str	r1, [r4, #16]
 80073a0:	6163      	str	r3, [r4, #20]
 80073a2:	3020      	adds	r0, #32
 80073a4:	e7e5      	b.n	8007372 <__d2b+0x62>
 80073a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80073aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073ae:	6038      	str	r0, [r7, #0]
 80073b0:	6918      	ldr	r0, [r3, #16]
 80073b2:	f7ff fd2f 	bl	8006e14 <__hi0bits>
 80073b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	e7e1      	b.n	8007382 <__d2b+0x72>
 80073be:	bf00      	nop
 80073c0:	0800928f 	.word	0x0800928f
 80073c4:	080092a0 	.word	0x080092a0

080073c8 <_calloc_r>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	fba1 5402 	umull	r5, r4, r1, r2
 80073ce:	b934      	cbnz	r4, 80073de <_calloc_r+0x16>
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7fe f8cd 	bl	8005570 <_malloc_r>
 80073d6:	4606      	mov	r6, r0
 80073d8:	b928      	cbnz	r0, 80073e6 <_calloc_r+0x1e>
 80073da:	4630      	mov	r0, r6
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
 80073de:	220c      	movs	r2, #12
 80073e0:	2600      	movs	r6, #0
 80073e2:	6002      	str	r2, [r0, #0]
 80073e4:	e7f9      	b.n	80073da <_calloc_r+0x12>
 80073e6:	462a      	mov	r2, r5
 80073e8:	4621      	mov	r1, r4
 80073ea:	f7fe f851 	bl	8005490 <memset>
 80073ee:	e7f4      	b.n	80073da <_calloc_r+0x12>

080073f0 <__ssputs_r>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	688e      	ldr	r6, [r1, #8]
 80073f6:	4682      	mov	sl, r0
 80073f8:	429e      	cmp	r6, r3
 80073fa:	460c      	mov	r4, r1
 80073fc:	4690      	mov	r8, r2
 80073fe:	461f      	mov	r7, r3
 8007400:	d838      	bhi.n	8007474 <__ssputs_r+0x84>
 8007402:	898a      	ldrh	r2, [r1, #12]
 8007404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007408:	d032      	beq.n	8007470 <__ssputs_r+0x80>
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	6909      	ldr	r1, [r1, #16]
 800740e:	3301      	adds	r3, #1
 8007410:	eba5 0901 	sub.w	r9, r5, r1
 8007414:	6965      	ldr	r5, [r4, #20]
 8007416:	444b      	add	r3, r9
 8007418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800741c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	429d      	cmp	r5, r3
 8007424:	bf38      	it	cc
 8007426:	461d      	movcc	r5, r3
 8007428:	0553      	lsls	r3, r2, #21
 800742a:	d531      	bpl.n	8007490 <__ssputs_r+0xa0>
 800742c:	4629      	mov	r1, r5
 800742e:	f7fe f89f 	bl	8005570 <_malloc_r>
 8007432:	4606      	mov	r6, r0
 8007434:	b950      	cbnz	r0, 800744c <__ssputs_r+0x5c>
 8007436:	230c      	movs	r3, #12
 8007438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743c:	f8ca 3000 	str.w	r3, [sl]
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	464a      	mov	r2, r9
 800744e:	6921      	ldr	r1, [r4, #16]
 8007450:	f7ff fc1e 	bl	8006c90 <memcpy>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	6126      	str	r6, [r4, #16]
 8007462:	444e      	add	r6, r9
 8007464:	6026      	str	r6, [r4, #0]
 8007466:	463e      	mov	r6, r7
 8007468:	6165      	str	r5, [r4, #20]
 800746a:	eba5 0509 	sub.w	r5, r5, r9
 800746e:	60a5      	str	r5, [r4, #8]
 8007470:	42be      	cmp	r6, r7
 8007472:	d900      	bls.n	8007476 <__ssputs_r+0x86>
 8007474:	463e      	mov	r6, r7
 8007476:	4632      	mov	r2, r6
 8007478:	4641      	mov	r1, r8
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	f7fd ffee 	bl	800545c <memmove>
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	2000      	movs	r0, #0
 8007484:	1b9b      	subs	r3, r3, r6
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	4433      	add	r3, r6
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	e7db      	b.n	8007448 <__ssputs_r+0x58>
 8007490:	462a      	mov	r2, r5
 8007492:	f000 f94e 	bl	8007732 <_realloc_r>
 8007496:	4606      	mov	r6, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d1e1      	bne.n	8007460 <__ssputs_r+0x70>
 800749c:	4650      	mov	r0, sl
 800749e:	6921      	ldr	r1, [r4, #16]
 80074a0:	f7fd fffe 	bl	80054a0 <_free_r>
 80074a4:	e7c7      	b.n	8007436 <__ssputs_r+0x46>
	...

080074a8 <_svfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4698      	mov	r8, r3
 80074ae:	898b      	ldrh	r3, [r1, #12]
 80074b0:	4607      	mov	r7, r0
 80074b2:	061b      	lsls	r3, r3, #24
 80074b4:	460d      	mov	r5, r1
 80074b6:	4614      	mov	r4, r2
 80074b8:	b09d      	sub	sp, #116	; 0x74
 80074ba:	d50e      	bpl.n	80074da <_svfiprintf_r+0x32>
 80074bc:	690b      	ldr	r3, [r1, #16]
 80074be:	b963      	cbnz	r3, 80074da <_svfiprintf_r+0x32>
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	f7fe f855 	bl	8005570 <_malloc_r>
 80074c6:	6028      	str	r0, [r5, #0]
 80074c8:	6128      	str	r0, [r5, #16]
 80074ca:	b920      	cbnz	r0, 80074d6 <_svfiprintf_r+0x2e>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074d4:	e0d1      	b.n	800767a <_svfiprintf_r+0x1d2>
 80074d6:	2340      	movs	r3, #64	; 0x40
 80074d8:	616b      	str	r3, [r5, #20]
 80074da:	2300      	movs	r3, #0
 80074dc:	9309      	str	r3, [sp, #36]	; 0x24
 80074de:	2320      	movs	r3, #32
 80074e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	f04f 0901 	mov.w	r9, #1
 80074ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007694 <_svfiprintf_r+0x1ec>
 80074f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f6:	4623      	mov	r3, r4
 80074f8:	469a      	mov	sl, r3
 80074fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fe:	b10a      	cbz	r2, 8007504 <_svfiprintf_r+0x5c>
 8007500:	2a25      	cmp	r2, #37	; 0x25
 8007502:	d1f9      	bne.n	80074f8 <_svfiprintf_r+0x50>
 8007504:	ebba 0b04 	subs.w	fp, sl, r4
 8007508:	d00b      	beq.n	8007522 <_svfiprintf_r+0x7a>
 800750a:	465b      	mov	r3, fp
 800750c:	4622      	mov	r2, r4
 800750e:	4629      	mov	r1, r5
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff ff6d 	bl	80073f0 <__ssputs_r>
 8007516:	3001      	adds	r0, #1
 8007518:	f000 80aa 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800751c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751e:	445a      	add	r2, fp
 8007520:	9209      	str	r2, [sp, #36]	; 0x24
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80a2 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800752c:	2300      	movs	r3, #0
 800752e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007536:	f10a 0a01 	add.w	sl, sl, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007542:	931a      	str	r3, [sp, #104]	; 0x68
 8007544:	4654      	mov	r4, sl
 8007546:	2205      	movs	r2, #5
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	4851      	ldr	r0, [pc, #324]	; (8007694 <_svfiprintf_r+0x1ec>)
 800754e:	f7ff fb91 	bl	8006c74 <memchr>
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	b9d8      	cbnz	r0, 800758e <_svfiprintf_r+0xe6>
 8007556:	06d0      	lsls	r0, r2, #27
 8007558:	bf44      	itt	mi
 800755a:	2320      	movmi	r3, #32
 800755c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007560:	0711      	lsls	r1, r2, #28
 8007562:	bf44      	itt	mi
 8007564:	232b      	movmi	r3, #43	; 0x2b
 8007566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756a:	f89a 3000 	ldrb.w	r3, [sl]
 800756e:	2b2a      	cmp	r3, #42	; 0x2a
 8007570:	d015      	beq.n	800759e <_svfiprintf_r+0xf6>
 8007572:	4654      	mov	r4, sl
 8007574:	2000      	movs	r0, #0
 8007576:	f04f 0c0a 	mov.w	ip, #10
 800757a:	9a07      	ldr	r2, [sp, #28]
 800757c:	4621      	mov	r1, r4
 800757e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007582:	3b30      	subs	r3, #48	; 0x30
 8007584:	2b09      	cmp	r3, #9
 8007586:	d94e      	bls.n	8007626 <_svfiprintf_r+0x17e>
 8007588:	b1b0      	cbz	r0, 80075b8 <_svfiprintf_r+0x110>
 800758a:	9207      	str	r2, [sp, #28]
 800758c:	e014      	b.n	80075b8 <_svfiprintf_r+0x110>
 800758e:	eba0 0308 	sub.w	r3, r0, r8
 8007592:	fa09 f303 	lsl.w	r3, r9, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	46a2      	mov	sl, r4
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	e7d2      	b.n	8007544 <_svfiprintf_r+0x9c>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	9103      	str	r1, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfbb      	ittet	lt
 80075aa:	425b      	neglt	r3, r3
 80075ac:	f042 0202 	orrlt.w	r2, r2, #2
 80075b0:	9307      	strge	r3, [sp, #28]
 80075b2:	9307      	strlt	r3, [sp, #28]
 80075b4:	bfb8      	it	lt
 80075b6:	9204      	strlt	r2, [sp, #16]
 80075b8:	7823      	ldrb	r3, [r4, #0]
 80075ba:	2b2e      	cmp	r3, #46	; 0x2e
 80075bc:	d10c      	bne.n	80075d8 <_svfiprintf_r+0x130>
 80075be:	7863      	ldrb	r3, [r4, #1]
 80075c0:	2b2a      	cmp	r3, #42	; 0x2a
 80075c2:	d135      	bne.n	8007630 <_svfiprintf_r+0x188>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	3402      	adds	r4, #2
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	9203      	str	r2, [sp, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfb8      	it	lt
 80075d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007698 <_svfiprintf_r+0x1f0>
 80075dc:	2203      	movs	r2, #3
 80075de:	4650      	mov	r0, sl
 80075e0:	7821      	ldrb	r1, [r4, #0]
 80075e2:	f7ff fb47 	bl	8006c74 <memchr>
 80075e6:	b140      	cbz	r0, 80075fa <_svfiprintf_r+0x152>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	eba0 000a 	sub.w	r0, r0, sl
 80075ee:	fa03 f000 	lsl.w	r0, r3, r0
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	3401      	adds	r4, #1
 80075f6:	4303      	orrs	r3, r0
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	2206      	movs	r2, #6
 8007600:	4826      	ldr	r0, [pc, #152]	; (800769c <_svfiprintf_r+0x1f4>)
 8007602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007606:	f7ff fb35 	bl	8006c74 <memchr>
 800760a:	2800      	cmp	r0, #0
 800760c:	d038      	beq.n	8007680 <_svfiprintf_r+0x1d8>
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <_svfiprintf_r+0x1f8>)
 8007610:	bb1b      	cbnz	r3, 800765a <_svfiprintf_r+0x1b2>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	3307      	adds	r3, #7
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	3308      	adds	r3, #8
 800761c:	9303      	str	r3, [sp, #12]
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	4433      	add	r3, r6
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	e767      	b.n	80074f6 <_svfiprintf_r+0x4e>
 8007626:	460c      	mov	r4, r1
 8007628:	2001      	movs	r0, #1
 800762a:	fb0c 3202 	mla	r2, ip, r2, r3
 800762e:	e7a5      	b.n	800757c <_svfiprintf_r+0xd4>
 8007630:	2300      	movs	r3, #0
 8007632:	f04f 0c0a 	mov.w	ip, #10
 8007636:	4619      	mov	r1, r3
 8007638:	3401      	adds	r4, #1
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	4620      	mov	r0, r4
 800763e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007642:	3a30      	subs	r2, #48	; 0x30
 8007644:	2a09      	cmp	r2, #9
 8007646:	d903      	bls.n	8007650 <_svfiprintf_r+0x1a8>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0c5      	beq.n	80075d8 <_svfiprintf_r+0x130>
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	e7c3      	b.n	80075d8 <_svfiprintf_r+0x130>
 8007650:	4604      	mov	r4, r0
 8007652:	2301      	movs	r3, #1
 8007654:	fb0c 2101 	mla	r1, ip, r1, r2
 8007658:	e7f0      	b.n	800763c <_svfiprintf_r+0x194>
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	462a      	mov	r2, r5
 8007660:	4638      	mov	r0, r7
 8007662:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <_svfiprintf_r+0x1fc>)
 8007664:	a904      	add	r1, sp, #16
 8007666:	f7fe f895 	bl	8005794 <_printf_float>
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	4606      	mov	r6, r0
 800766e:	d1d6      	bne.n	800761e <_svfiprintf_r+0x176>
 8007670:	89ab      	ldrh	r3, [r5, #12]
 8007672:	065b      	lsls	r3, r3, #25
 8007674:	f53f af2c 	bmi.w	80074d0 <_svfiprintf_r+0x28>
 8007678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767a:	b01d      	add	sp, #116	; 0x74
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	ab03      	add	r3, sp, #12
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	462a      	mov	r2, r5
 8007686:	4638      	mov	r0, r7
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <_svfiprintf_r+0x1fc>)
 800768a:	a904      	add	r1, sp, #16
 800768c:	f7fe fb1e 	bl	8005ccc <_printf_i>
 8007690:	e7eb      	b.n	800766a <_svfiprintf_r+0x1c2>
 8007692:	bf00      	nop
 8007694:	080093fc 	.word	0x080093fc
 8007698:	08009402 	.word	0x08009402
 800769c:	08009406 	.word	0x08009406
 80076a0:	08005795 	.word	0x08005795
 80076a4:	080073f1 	.word	0x080073f1

080076a8 <__assert_func>:
 80076a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076aa:	4614      	mov	r4, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <__assert_func+0x2c>)
 80076b0:	4605      	mov	r5, r0
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68d8      	ldr	r0, [r3, #12]
 80076b6:	b14c      	cbz	r4, 80076cc <__assert_func+0x24>
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <__assert_func+0x30>)
 80076ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076be:	9100      	str	r1, [sp, #0]
 80076c0:	462b      	mov	r3, r5
 80076c2:	4906      	ldr	r1, [pc, #24]	; (80076dc <__assert_func+0x34>)
 80076c4:	f000 f80e 	bl	80076e4 <fiprintf>
 80076c8:	f000 fa88 	bl	8007bdc <abort>
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <__assert_func+0x38>)
 80076ce:	461c      	mov	r4, r3
 80076d0:	e7f3      	b.n	80076ba <__assert_func+0x12>
 80076d2:	bf00      	nop
 80076d4:	20000040 	.word	0x20000040
 80076d8:	0800940d 	.word	0x0800940d
 80076dc:	0800941a 	.word	0x0800941a
 80076e0:	08009448 	.word	0x08009448

080076e4 <fiprintf>:
 80076e4:	b40e      	push	{r1, r2, r3}
 80076e6:	b503      	push	{r0, r1, lr}
 80076e8:	4601      	mov	r1, r0
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	4805      	ldr	r0, [pc, #20]	; (8007704 <fiprintf+0x20>)
 80076ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f000 f873 	bl	80077e0 <_vfiprintf_r>
 80076fa:	b002      	add	sp, #8
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b003      	add	sp, #12
 8007702:	4770      	bx	lr
 8007704:	20000040 	.word	0x20000040

08007708 <__retarget_lock_init_recursive>:
 8007708:	4770      	bx	lr

0800770a <__retarget_lock_acquire_recursive>:
 800770a:	4770      	bx	lr

0800770c <__retarget_lock_release_recursive>:
 800770c:	4770      	bx	lr

0800770e <__ascii_mbtowc>:
 800770e:	b082      	sub	sp, #8
 8007710:	b901      	cbnz	r1, 8007714 <__ascii_mbtowc+0x6>
 8007712:	a901      	add	r1, sp, #4
 8007714:	b142      	cbz	r2, 8007728 <__ascii_mbtowc+0x1a>
 8007716:	b14b      	cbz	r3, 800772c <__ascii_mbtowc+0x1e>
 8007718:	7813      	ldrb	r3, [r2, #0]
 800771a:	600b      	str	r3, [r1, #0]
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	1e10      	subs	r0, r2, #0
 8007720:	bf18      	it	ne
 8007722:	2001      	movne	r0, #1
 8007724:	b002      	add	sp, #8
 8007726:	4770      	bx	lr
 8007728:	4610      	mov	r0, r2
 800772a:	e7fb      	b.n	8007724 <__ascii_mbtowc+0x16>
 800772c:	f06f 0001 	mvn.w	r0, #1
 8007730:	e7f8      	b.n	8007724 <__ascii_mbtowc+0x16>

08007732 <_realloc_r>:
 8007732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007736:	4680      	mov	r8, r0
 8007738:	4614      	mov	r4, r2
 800773a:	460e      	mov	r6, r1
 800773c:	b921      	cbnz	r1, 8007748 <_realloc_r+0x16>
 800773e:	4611      	mov	r1, r2
 8007740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007744:	f7fd bf14 	b.w	8005570 <_malloc_r>
 8007748:	b92a      	cbnz	r2, 8007756 <_realloc_r+0x24>
 800774a:	f7fd fea9 	bl	80054a0 <_free_r>
 800774e:	4625      	mov	r5, r4
 8007750:	4628      	mov	r0, r5
 8007752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007756:	f000 fc61 	bl	800801c <_malloc_usable_size_r>
 800775a:	4284      	cmp	r4, r0
 800775c:	4607      	mov	r7, r0
 800775e:	d802      	bhi.n	8007766 <_realloc_r+0x34>
 8007760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007764:	d812      	bhi.n	800778c <_realloc_r+0x5a>
 8007766:	4621      	mov	r1, r4
 8007768:	4640      	mov	r0, r8
 800776a:	f7fd ff01 	bl	8005570 <_malloc_r>
 800776e:	4605      	mov	r5, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	d0ed      	beq.n	8007750 <_realloc_r+0x1e>
 8007774:	42bc      	cmp	r4, r7
 8007776:	4622      	mov	r2, r4
 8007778:	4631      	mov	r1, r6
 800777a:	bf28      	it	cs
 800777c:	463a      	movcs	r2, r7
 800777e:	f7ff fa87 	bl	8006c90 <memcpy>
 8007782:	4631      	mov	r1, r6
 8007784:	4640      	mov	r0, r8
 8007786:	f7fd fe8b 	bl	80054a0 <_free_r>
 800778a:	e7e1      	b.n	8007750 <_realloc_r+0x1e>
 800778c:	4635      	mov	r5, r6
 800778e:	e7df      	b.n	8007750 <_realloc_r+0x1e>

08007790 <__sfputc_r>:
 8007790:	6893      	ldr	r3, [r2, #8]
 8007792:	b410      	push	{r4}
 8007794:	3b01      	subs	r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	6093      	str	r3, [r2, #8]
 800779a:	da07      	bge.n	80077ac <__sfputc_r+0x1c>
 800779c:	6994      	ldr	r4, [r2, #24]
 800779e:	42a3      	cmp	r3, r4
 80077a0:	db01      	blt.n	80077a6 <__sfputc_r+0x16>
 80077a2:	290a      	cmp	r1, #10
 80077a4:	d102      	bne.n	80077ac <__sfputc_r+0x1c>
 80077a6:	bc10      	pop	{r4}
 80077a8:	f000 b94a 	b.w	8007a40 <__swbuf_r>
 80077ac:	6813      	ldr	r3, [r2, #0]
 80077ae:	1c58      	adds	r0, r3, #1
 80077b0:	6010      	str	r0, [r2, #0]
 80077b2:	7019      	strb	r1, [r3, #0]
 80077b4:	4608      	mov	r0, r1
 80077b6:	bc10      	pop	{r4}
 80077b8:	4770      	bx	lr

080077ba <__sfputs_r>:
 80077ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	18d5      	adds	r5, r2, r3
 80077c4:	42ac      	cmp	r4, r5
 80077c6:	d101      	bne.n	80077cc <__sfputs_r+0x12>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e007      	b.n	80077dc <__sfputs_r+0x22>
 80077cc:	463a      	mov	r2, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	f7ff ffdc 	bl	8007790 <__sfputc_r>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d1f3      	bne.n	80077c4 <__sfputs_r+0xa>
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077e0 <_vfiprintf_r>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	460d      	mov	r5, r1
 80077e6:	4614      	mov	r4, r2
 80077e8:	4698      	mov	r8, r3
 80077ea:	4606      	mov	r6, r0
 80077ec:	b09d      	sub	sp, #116	; 0x74
 80077ee:	b118      	cbz	r0, 80077f8 <_vfiprintf_r+0x18>
 80077f0:	6983      	ldr	r3, [r0, #24]
 80077f2:	b90b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x18>
 80077f4:	f000 fb10 	bl	8007e18 <__sinit>
 80077f8:	4b89      	ldr	r3, [pc, #548]	; (8007a20 <_vfiprintf_r+0x240>)
 80077fa:	429d      	cmp	r5, r3
 80077fc:	d11b      	bne.n	8007836 <_vfiprintf_r+0x56>
 80077fe:	6875      	ldr	r5, [r6, #4]
 8007800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	d405      	bmi.n	8007812 <_vfiprintf_r+0x32>
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	059a      	lsls	r2, r3, #22
 800780a:	d402      	bmi.n	8007812 <_vfiprintf_r+0x32>
 800780c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800780e:	f7ff ff7c 	bl	800770a <__retarget_lock_acquire_recursive>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	071b      	lsls	r3, r3, #28
 8007816:	d501      	bpl.n	800781c <_vfiprintf_r+0x3c>
 8007818:	692b      	ldr	r3, [r5, #16]
 800781a:	b9eb      	cbnz	r3, 8007858 <_vfiprintf_r+0x78>
 800781c:	4629      	mov	r1, r5
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f96e 	bl	8007b00 <__swsetup_r>
 8007824:	b1c0      	cbz	r0, 8007858 <_vfiprintf_r+0x78>
 8007826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007828:	07dc      	lsls	r4, r3, #31
 800782a:	d50e      	bpl.n	800784a <_vfiprintf_r+0x6a>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007830:	b01d      	add	sp, #116	; 0x74
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	4b7b      	ldr	r3, [pc, #492]	; (8007a24 <_vfiprintf_r+0x244>)
 8007838:	429d      	cmp	r5, r3
 800783a:	d101      	bne.n	8007840 <_vfiprintf_r+0x60>
 800783c:	68b5      	ldr	r5, [r6, #8]
 800783e:	e7df      	b.n	8007800 <_vfiprintf_r+0x20>
 8007840:	4b79      	ldr	r3, [pc, #484]	; (8007a28 <_vfiprintf_r+0x248>)
 8007842:	429d      	cmp	r5, r3
 8007844:	bf08      	it	eq
 8007846:	68f5      	ldreq	r5, [r6, #12]
 8007848:	e7da      	b.n	8007800 <_vfiprintf_r+0x20>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	0598      	lsls	r0, r3, #22
 800784e:	d4ed      	bmi.n	800782c <_vfiprintf_r+0x4c>
 8007850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007852:	f7ff ff5b 	bl	800770c <__retarget_lock_release_recursive>
 8007856:	e7e9      	b.n	800782c <_vfiprintf_r+0x4c>
 8007858:	2300      	movs	r3, #0
 800785a:	9309      	str	r3, [sp, #36]	; 0x24
 800785c:	2320      	movs	r3, #32
 800785e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007862:	2330      	movs	r3, #48	; 0x30
 8007864:	f04f 0901 	mov.w	r9, #1
 8007868:	f8cd 800c 	str.w	r8, [sp, #12]
 800786c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007a2c <_vfiprintf_r+0x24c>
 8007870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007874:	4623      	mov	r3, r4
 8007876:	469a      	mov	sl, r3
 8007878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800787c:	b10a      	cbz	r2, 8007882 <_vfiprintf_r+0xa2>
 800787e:	2a25      	cmp	r2, #37	; 0x25
 8007880:	d1f9      	bne.n	8007876 <_vfiprintf_r+0x96>
 8007882:	ebba 0b04 	subs.w	fp, sl, r4
 8007886:	d00b      	beq.n	80078a0 <_vfiprintf_r+0xc0>
 8007888:	465b      	mov	r3, fp
 800788a:	4622      	mov	r2, r4
 800788c:	4629      	mov	r1, r5
 800788e:	4630      	mov	r0, r6
 8007890:	f7ff ff93 	bl	80077ba <__sfputs_r>
 8007894:	3001      	adds	r0, #1
 8007896:	f000 80aa 	beq.w	80079ee <_vfiprintf_r+0x20e>
 800789a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800789c:	445a      	add	r2, fp
 800789e:	9209      	str	r2, [sp, #36]	; 0x24
 80078a0:	f89a 3000 	ldrb.w	r3, [sl]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80a2 	beq.w	80079ee <_vfiprintf_r+0x20e>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b4:	f10a 0a01 	add.w	sl, sl, #1
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078c0:	931a      	str	r3, [sp, #104]	; 0x68
 80078c2:	4654      	mov	r4, sl
 80078c4:	2205      	movs	r2, #5
 80078c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ca:	4858      	ldr	r0, [pc, #352]	; (8007a2c <_vfiprintf_r+0x24c>)
 80078cc:	f7ff f9d2 	bl	8006c74 <memchr>
 80078d0:	9a04      	ldr	r2, [sp, #16]
 80078d2:	b9d8      	cbnz	r0, 800790c <_vfiprintf_r+0x12c>
 80078d4:	06d1      	lsls	r1, r2, #27
 80078d6:	bf44      	itt	mi
 80078d8:	2320      	movmi	r3, #32
 80078da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078de:	0713      	lsls	r3, r2, #28
 80078e0:	bf44      	itt	mi
 80078e2:	232b      	movmi	r3, #43	; 0x2b
 80078e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e8:	f89a 3000 	ldrb.w	r3, [sl]
 80078ec:	2b2a      	cmp	r3, #42	; 0x2a
 80078ee:	d015      	beq.n	800791c <_vfiprintf_r+0x13c>
 80078f0:	4654      	mov	r4, sl
 80078f2:	2000      	movs	r0, #0
 80078f4:	f04f 0c0a 	mov.w	ip, #10
 80078f8:	9a07      	ldr	r2, [sp, #28]
 80078fa:	4621      	mov	r1, r4
 80078fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007900:	3b30      	subs	r3, #48	; 0x30
 8007902:	2b09      	cmp	r3, #9
 8007904:	d94e      	bls.n	80079a4 <_vfiprintf_r+0x1c4>
 8007906:	b1b0      	cbz	r0, 8007936 <_vfiprintf_r+0x156>
 8007908:	9207      	str	r2, [sp, #28]
 800790a:	e014      	b.n	8007936 <_vfiprintf_r+0x156>
 800790c:	eba0 0308 	sub.w	r3, r0, r8
 8007910:	fa09 f303 	lsl.w	r3, r9, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	46a2      	mov	sl, r4
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	e7d2      	b.n	80078c2 <_vfiprintf_r+0xe2>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	1d19      	adds	r1, r3, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	9103      	str	r1, [sp, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	bfbb      	ittet	lt
 8007928:	425b      	neglt	r3, r3
 800792a:	f042 0202 	orrlt.w	r2, r2, #2
 800792e:	9307      	strge	r3, [sp, #28]
 8007930:	9307      	strlt	r3, [sp, #28]
 8007932:	bfb8      	it	lt
 8007934:	9204      	strlt	r2, [sp, #16]
 8007936:	7823      	ldrb	r3, [r4, #0]
 8007938:	2b2e      	cmp	r3, #46	; 0x2e
 800793a:	d10c      	bne.n	8007956 <_vfiprintf_r+0x176>
 800793c:	7863      	ldrb	r3, [r4, #1]
 800793e:	2b2a      	cmp	r3, #42	; 0x2a
 8007940:	d135      	bne.n	80079ae <_vfiprintf_r+0x1ce>
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	3402      	adds	r4, #2
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	9203      	str	r2, [sp, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	bfb8      	it	lt
 8007950:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007a30 <_vfiprintf_r+0x250>
 800795a:	2203      	movs	r2, #3
 800795c:	4650      	mov	r0, sl
 800795e:	7821      	ldrb	r1, [r4, #0]
 8007960:	f7ff f988 	bl	8006c74 <memchr>
 8007964:	b140      	cbz	r0, 8007978 <_vfiprintf_r+0x198>
 8007966:	2340      	movs	r3, #64	; 0x40
 8007968:	eba0 000a 	sub.w	r0, r0, sl
 800796c:	fa03 f000 	lsl.w	r0, r3, r0
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	3401      	adds	r4, #1
 8007974:	4303      	orrs	r3, r0
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797c:	2206      	movs	r2, #6
 800797e:	482d      	ldr	r0, [pc, #180]	; (8007a34 <_vfiprintf_r+0x254>)
 8007980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007984:	f7ff f976 	bl	8006c74 <memchr>
 8007988:	2800      	cmp	r0, #0
 800798a:	d03f      	beq.n	8007a0c <_vfiprintf_r+0x22c>
 800798c:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <_vfiprintf_r+0x258>)
 800798e:	bb1b      	cbnz	r3, 80079d8 <_vfiprintf_r+0x1f8>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	3307      	adds	r3, #7
 8007994:	f023 0307 	bic.w	r3, r3, #7
 8007998:	3308      	adds	r3, #8
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799e:	443b      	add	r3, r7
 80079a0:	9309      	str	r3, [sp, #36]	; 0x24
 80079a2:	e767      	b.n	8007874 <_vfiprintf_r+0x94>
 80079a4:	460c      	mov	r4, r1
 80079a6:	2001      	movs	r0, #1
 80079a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ac:	e7a5      	b.n	80078fa <_vfiprintf_r+0x11a>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4619      	mov	r1, r3
 80079b6:	3401      	adds	r4, #1
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	4620      	mov	r0, r4
 80079bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c0:	3a30      	subs	r2, #48	; 0x30
 80079c2:	2a09      	cmp	r2, #9
 80079c4:	d903      	bls.n	80079ce <_vfiprintf_r+0x1ee>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c5      	beq.n	8007956 <_vfiprintf_r+0x176>
 80079ca:	9105      	str	r1, [sp, #20]
 80079cc:	e7c3      	b.n	8007956 <_vfiprintf_r+0x176>
 80079ce:	4604      	mov	r4, r0
 80079d0:	2301      	movs	r3, #1
 80079d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079d6:	e7f0      	b.n	80079ba <_vfiprintf_r+0x1da>
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	462a      	mov	r2, r5
 80079de:	4630      	mov	r0, r6
 80079e0:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <_vfiprintf_r+0x25c>)
 80079e2:	a904      	add	r1, sp, #16
 80079e4:	f7fd fed6 	bl	8005794 <_printf_float>
 80079e8:	4607      	mov	r7, r0
 80079ea:	1c78      	adds	r0, r7, #1
 80079ec:	d1d6      	bne.n	800799c <_vfiprintf_r+0x1bc>
 80079ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f0:	07d9      	lsls	r1, r3, #31
 80079f2:	d405      	bmi.n	8007a00 <_vfiprintf_r+0x220>
 80079f4:	89ab      	ldrh	r3, [r5, #12]
 80079f6:	059a      	lsls	r2, r3, #22
 80079f8:	d402      	bmi.n	8007a00 <_vfiprintf_r+0x220>
 80079fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079fc:	f7ff fe86 	bl	800770c <__retarget_lock_release_recursive>
 8007a00:	89ab      	ldrh	r3, [r5, #12]
 8007a02:	065b      	lsls	r3, r3, #25
 8007a04:	f53f af12 	bmi.w	800782c <_vfiprintf_r+0x4c>
 8007a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a0a:	e711      	b.n	8007830 <_vfiprintf_r+0x50>
 8007a0c:	ab03      	add	r3, sp, #12
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	462a      	mov	r2, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <_vfiprintf_r+0x25c>)
 8007a16:	a904      	add	r1, sp, #16
 8007a18:	f7fe f958 	bl	8005ccc <_printf_i>
 8007a1c:	e7e4      	b.n	80079e8 <_vfiprintf_r+0x208>
 8007a1e:	bf00      	nop
 8007a20:	08009574 	.word	0x08009574
 8007a24:	08009594 	.word	0x08009594
 8007a28:	08009554 	.word	0x08009554
 8007a2c:	080093fc 	.word	0x080093fc
 8007a30:	08009402 	.word	0x08009402
 8007a34:	08009406 	.word	0x08009406
 8007a38:	08005795 	.word	0x08005795
 8007a3c:	080077bb 	.word	0x080077bb

08007a40 <__swbuf_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	460e      	mov	r6, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	4605      	mov	r5, r0
 8007a48:	b118      	cbz	r0, 8007a52 <__swbuf_r+0x12>
 8007a4a:	6983      	ldr	r3, [r0, #24]
 8007a4c:	b90b      	cbnz	r3, 8007a52 <__swbuf_r+0x12>
 8007a4e:	f000 f9e3 	bl	8007e18 <__sinit>
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <__swbuf_r+0x98>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	d12b      	bne.n	8007ab0 <__swbuf_r+0x70>
 8007a58:	686c      	ldr	r4, [r5, #4]
 8007a5a:	69a3      	ldr	r3, [r4, #24]
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	071a      	lsls	r2, r3, #28
 8007a62:	d52f      	bpl.n	8007ac4 <__swbuf_r+0x84>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	b36b      	cbz	r3, 8007ac4 <__swbuf_r+0x84>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	b2f6      	uxtb	r6, r6
 8007a6e:	1ac0      	subs	r0, r0, r3
 8007a70:	6963      	ldr	r3, [r4, #20]
 8007a72:	4637      	mov	r7, r6
 8007a74:	4283      	cmp	r3, r0
 8007a76:	dc04      	bgt.n	8007a82 <__swbuf_r+0x42>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f938 	bl	8007cf0 <_fflush_r>
 8007a80:	bb30      	cbnz	r0, 8007ad0 <__swbuf_r+0x90>
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	3001      	adds	r0, #1
 8007a86:	3b01      	subs	r3, #1
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	701e      	strb	r6, [r3, #0]
 8007a92:	6963      	ldr	r3, [r4, #20]
 8007a94:	4283      	cmp	r3, r0
 8007a96:	d004      	beq.n	8007aa2 <__swbuf_r+0x62>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	07db      	lsls	r3, r3, #31
 8007a9c:	d506      	bpl.n	8007aac <__swbuf_r+0x6c>
 8007a9e:	2e0a      	cmp	r6, #10
 8007aa0:	d104      	bne.n	8007aac <__swbuf_r+0x6c>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 f923 	bl	8007cf0 <_fflush_r>
 8007aaa:	b988      	cbnz	r0, 8007ad0 <__swbuf_r+0x90>
 8007aac:	4638      	mov	r0, r7
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <__swbuf_r+0x9c>)
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	d101      	bne.n	8007aba <__swbuf_r+0x7a>
 8007ab6:	68ac      	ldr	r4, [r5, #8]
 8007ab8:	e7cf      	b.n	8007a5a <__swbuf_r+0x1a>
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <__swbuf_r+0xa0>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	bf08      	it	eq
 8007ac0:	68ec      	ldreq	r4, [r5, #12]
 8007ac2:	e7ca      	b.n	8007a5a <__swbuf_r+0x1a>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f81a 	bl	8007b00 <__swsetup_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d0cb      	beq.n	8007a68 <__swbuf_r+0x28>
 8007ad0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ad4:	e7ea      	b.n	8007aac <__swbuf_r+0x6c>
 8007ad6:	bf00      	nop
 8007ad8:	08009574 	.word	0x08009574
 8007adc:	08009594 	.word	0x08009594
 8007ae0:	08009554 	.word	0x08009554

08007ae4 <__ascii_wctomb>:
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	b141      	cbz	r1, 8007afc <__ascii_wctomb+0x18>
 8007aea:	2aff      	cmp	r2, #255	; 0xff
 8007aec:	d904      	bls.n	8007af8 <__ascii_wctomb+0x14>
 8007aee:	228a      	movs	r2, #138	; 0x8a
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	4770      	bx	lr
 8007af8:	2001      	movs	r0, #1
 8007afa:	700a      	strb	r2, [r1, #0]
 8007afc:	4770      	bx	lr
	...

08007b00 <__swsetup_r>:
 8007b00:	4b32      	ldr	r3, [pc, #200]	; (8007bcc <__swsetup_r+0xcc>)
 8007b02:	b570      	push	{r4, r5, r6, lr}
 8007b04:	681d      	ldr	r5, [r3, #0]
 8007b06:	4606      	mov	r6, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	b125      	cbz	r5, 8007b16 <__swsetup_r+0x16>
 8007b0c:	69ab      	ldr	r3, [r5, #24]
 8007b0e:	b913      	cbnz	r3, 8007b16 <__swsetup_r+0x16>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f981 	bl	8007e18 <__sinit>
 8007b16:	4b2e      	ldr	r3, [pc, #184]	; (8007bd0 <__swsetup_r+0xd0>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	d10f      	bne.n	8007b3c <__swsetup_r+0x3c>
 8007b1c:	686c      	ldr	r4, [r5, #4]
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b24:	0719      	lsls	r1, r3, #28
 8007b26:	d42c      	bmi.n	8007b82 <__swsetup_r+0x82>
 8007b28:	06dd      	lsls	r5, r3, #27
 8007b2a:	d411      	bmi.n	8007b50 <__swsetup_r+0x50>
 8007b2c:	2309      	movs	r3, #9
 8007b2e:	6033      	str	r3, [r6, #0]
 8007b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	e03e      	b.n	8007bba <__swsetup_r+0xba>
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <__swsetup_r+0xd4>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	d101      	bne.n	8007b46 <__swsetup_r+0x46>
 8007b42:	68ac      	ldr	r4, [r5, #8]
 8007b44:	e7eb      	b.n	8007b1e <__swsetup_r+0x1e>
 8007b46:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <__swsetup_r+0xd8>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	bf08      	it	eq
 8007b4c:	68ec      	ldreq	r4, [r5, #12]
 8007b4e:	e7e6      	b.n	8007b1e <__swsetup_r+0x1e>
 8007b50:	0758      	lsls	r0, r3, #29
 8007b52:	d512      	bpl.n	8007b7a <__swsetup_r+0x7a>
 8007b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b56:	b141      	cbz	r1, 8007b6a <__swsetup_r+0x6a>
 8007b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__swsetup_r+0x66>
 8007b60:	4630      	mov	r0, r6
 8007b62:	f7fd fc9d 	bl	80054a0 <_free_r>
 8007b66:	2300      	movs	r3, #0
 8007b68:	6363      	str	r3, [r4, #52]	; 0x34
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	2300      	movs	r3, #0
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f043 0308 	orr.w	r3, r3, #8
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	b94b      	cbnz	r3, 8007b9a <__swsetup_r+0x9a>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b90:	d003      	beq.n	8007b9a <__swsetup_r+0x9a>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 fa01 	bl	8007f9c <__smakebuf_r>
 8007b9a:	89a0      	ldrh	r0, [r4, #12]
 8007b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba0:	f010 0301 	ands.w	r3, r0, #1
 8007ba4:	d00a      	beq.n	8007bbc <__swsetup_r+0xbc>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	6963      	ldr	r3, [r4, #20]
 8007bac:	425b      	negs	r3, r3
 8007bae:	61a3      	str	r3, [r4, #24]
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	b943      	cbnz	r3, 8007bc6 <__swsetup_r+0xc6>
 8007bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bb8:	d1ba      	bne.n	8007b30 <__swsetup_r+0x30>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	0781      	lsls	r1, r0, #30
 8007bbe:	bf58      	it	pl
 8007bc0:	6963      	ldrpl	r3, [r4, #20]
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	e7f4      	b.n	8007bb0 <__swsetup_r+0xb0>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e7f7      	b.n	8007bba <__swsetup_r+0xba>
 8007bca:	bf00      	nop
 8007bcc:	20000040 	.word	0x20000040
 8007bd0:	08009574 	.word	0x08009574
 8007bd4:	08009594 	.word	0x08009594
 8007bd8:	08009554 	.word	0x08009554

08007bdc <abort>:
 8007bdc:	2006      	movs	r0, #6
 8007bde:	b508      	push	{r3, lr}
 8007be0:	f000 fa4c 	bl	800807c <raise>
 8007be4:	2001      	movs	r0, #1
 8007be6:	f7fb f953 	bl	8002e90 <_exit>
	...

08007bec <__sflush_r>:
 8007bec:	898a      	ldrh	r2, [r1, #12]
 8007bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	0710      	lsls	r0, r2, #28
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	d457      	bmi.n	8007ca8 <__sflush_r+0xbc>
 8007bf8:	684b      	ldr	r3, [r1, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dc04      	bgt.n	8007c08 <__sflush_r+0x1c>
 8007bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	dc01      	bgt.n	8007c08 <__sflush_r+0x1c>
 8007c04:	2000      	movs	r0, #0
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	d0fa      	beq.n	8007c04 <__sflush_r+0x18>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c14:	682f      	ldr	r7, [r5, #0]
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	d032      	beq.n	8007c80 <__sflush_r+0x94>
 8007c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	075a      	lsls	r2, r3, #29
 8007c20:	d505      	bpl.n	8007c2e <__sflush_r+0x42>
 8007c22:	6863      	ldr	r3, [r4, #4]
 8007c24:	1ac0      	subs	r0, r0, r3
 8007c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c28:	b10b      	cbz	r3, 8007c2e <__sflush_r+0x42>
 8007c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c2c:	1ac0      	subs	r0, r0, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4602      	mov	r2, r0
 8007c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c34:	4628      	mov	r0, r5
 8007c36:	6a21      	ldr	r1, [r4, #32]
 8007c38:	47b0      	blx	r6
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	d106      	bne.n	8007c4e <__sflush_r+0x62>
 8007c40:	6829      	ldr	r1, [r5, #0]
 8007c42:	291d      	cmp	r1, #29
 8007c44:	d82c      	bhi.n	8007ca0 <__sflush_r+0xb4>
 8007c46:	4a29      	ldr	r2, [pc, #164]	; (8007cec <__sflush_r+0x100>)
 8007c48:	40ca      	lsrs	r2, r1
 8007c4a:	07d6      	lsls	r6, r2, #31
 8007c4c:	d528      	bpl.n	8007ca0 <__sflush_r+0xb4>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	6062      	str	r2, [r4, #4]
 8007c52:	6922      	ldr	r2, [r4, #16]
 8007c54:	04d9      	lsls	r1, r3, #19
 8007c56:	6022      	str	r2, [r4, #0]
 8007c58:	d504      	bpl.n	8007c64 <__sflush_r+0x78>
 8007c5a:	1c42      	adds	r2, r0, #1
 8007c5c:	d101      	bne.n	8007c62 <__sflush_r+0x76>
 8007c5e:	682b      	ldr	r3, [r5, #0]
 8007c60:	b903      	cbnz	r3, 8007c64 <__sflush_r+0x78>
 8007c62:	6560      	str	r0, [r4, #84]	; 0x54
 8007c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c66:	602f      	str	r7, [r5, #0]
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d0cb      	beq.n	8007c04 <__sflush_r+0x18>
 8007c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d002      	beq.n	8007c7a <__sflush_r+0x8e>
 8007c74:	4628      	mov	r0, r5
 8007c76:	f7fd fc13 	bl	80054a0 <_free_r>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c7e:	e7c2      	b.n	8007c06 <__sflush_r+0x1a>
 8007c80:	6a21      	ldr	r1, [r4, #32]
 8007c82:	2301      	movs	r3, #1
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	1c41      	adds	r1, r0, #1
 8007c8a:	d1c7      	bne.n	8007c1c <__sflush_r+0x30>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0c4      	beq.n	8007c1c <__sflush_r+0x30>
 8007c92:	2b1d      	cmp	r3, #29
 8007c94:	d001      	beq.n	8007c9a <__sflush_r+0xae>
 8007c96:	2b16      	cmp	r3, #22
 8007c98:	d101      	bne.n	8007c9e <__sflush_r+0xb2>
 8007c9a:	602f      	str	r7, [r5, #0]
 8007c9c:	e7b2      	b.n	8007c04 <__sflush_r+0x18>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	e7ae      	b.n	8007c06 <__sflush_r+0x1a>
 8007ca8:	690f      	ldr	r7, [r1, #16]
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d0aa      	beq.n	8007c04 <__sflush_r+0x18>
 8007cae:	0793      	lsls	r3, r2, #30
 8007cb0:	bf18      	it	ne
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	680e      	ldr	r6, [r1, #0]
 8007cb6:	bf08      	it	eq
 8007cb8:	694b      	ldreq	r3, [r1, #20]
 8007cba:	1bf6      	subs	r6, r6, r7
 8007cbc:	600f      	str	r7, [r1, #0]
 8007cbe:	608b      	str	r3, [r1, #8]
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	dd9f      	ble.n	8007c04 <__sflush_r+0x18>
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	4628      	mov	r0, r5
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007cd0:	47e0      	blx	ip
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	dc06      	bgt.n	8007ce4 <__sflush_r+0xf8>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	e790      	b.n	8007c06 <__sflush_r+0x1a>
 8007ce4:	4407      	add	r7, r0
 8007ce6:	1a36      	subs	r6, r6, r0
 8007ce8:	e7ea      	b.n	8007cc0 <__sflush_r+0xd4>
 8007cea:	bf00      	nop
 8007cec:	20400001 	.word	0x20400001

08007cf0 <_fflush_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b913      	cbnz	r3, 8007d00 <_fflush_r+0x10>
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	b118      	cbz	r0, 8007d0a <_fflush_r+0x1a>
 8007d02:	6983      	ldr	r3, [r0, #24]
 8007d04:	b90b      	cbnz	r3, 8007d0a <_fflush_r+0x1a>
 8007d06:	f000 f887 	bl	8007e18 <__sinit>
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <_fflush_r+0x6c>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d11b      	bne.n	8007d48 <_fflush_r+0x58>
 8007d10:	686c      	ldr	r4, [r5, #4]
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ef      	beq.n	8007cfa <_fflush_r+0xa>
 8007d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d1c:	07d0      	lsls	r0, r2, #31
 8007d1e:	d404      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d20:	0599      	lsls	r1, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d26:	f7ff fcf0 	bl	800770a <__retarget_lock_acquire_recursive>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f7ff ff5d 	bl	8007bec <__sflush_r>
 8007d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d34:	4605      	mov	r5, r0
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d4e0      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	d4dd      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d42:	f7ff fce3 	bl	800770c <__retarget_lock_release_recursive>
 8007d46:	e7d9      	b.n	8007cfc <_fflush_r+0xc>
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <_fflush_r+0x70>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d101      	bne.n	8007d52 <_fflush_r+0x62>
 8007d4e:	68ac      	ldr	r4, [r5, #8]
 8007d50:	e7df      	b.n	8007d12 <_fflush_r+0x22>
 8007d52:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <_fflush_r+0x74>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	bf08      	it	eq
 8007d58:	68ec      	ldreq	r4, [r5, #12]
 8007d5a:	e7da      	b.n	8007d12 <_fflush_r+0x22>
 8007d5c:	08009574 	.word	0x08009574
 8007d60:	08009594 	.word	0x08009594
 8007d64:	08009554 	.word	0x08009554

08007d68 <std>:
 8007d68:	2300      	movs	r3, #0
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d76:	6083      	str	r3, [r0, #8]
 8007d78:	8181      	strh	r1, [r0, #12]
 8007d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d7c:	81c2      	strh	r2, [r0, #14]
 8007d7e:	6183      	str	r3, [r0, #24]
 8007d80:	4619      	mov	r1, r3
 8007d82:	2208      	movs	r2, #8
 8007d84:	305c      	adds	r0, #92	; 0x5c
 8007d86:	f7fd fb83 	bl	8005490 <memset>
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <std+0x38>)
 8007d8c:	6224      	str	r4, [r4, #32]
 8007d8e:	6263      	str	r3, [r4, #36]	; 0x24
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <std+0x3c>)
 8007d92:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <std+0x40>)
 8007d96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <std+0x44>)
 8007d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	080080b5 	.word	0x080080b5
 8007da4:	080080d7 	.word	0x080080d7
 8007da8:	0800810f 	.word	0x0800810f
 8007dac:	08008133 	.word	0x08008133

08007db0 <_cleanup_r>:
 8007db0:	4901      	ldr	r1, [pc, #4]	; (8007db8 <_cleanup_r+0x8>)
 8007db2:	f000 b8af 	b.w	8007f14 <_fwalk_reent>
 8007db6:	bf00      	nop
 8007db8:	08007cf1 	.word	0x08007cf1

08007dbc <__sfmoreglue>:
 8007dbc:	2268      	movs	r2, #104	; 0x68
 8007dbe:	b570      	push	{r4, r5, r6, lr}
 8007dc0:	1e4d      	subs	r5, r1, #1
 8007dc2:	4355      	muls	r5, r2
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dca:	f7fd fbd1 	bl	8005570 <_malloc_r>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b140      	cbz	r0, 8007de4 <__sfmoreglue+0x28>
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007dd8:	300c      	adds	r0, #12
 8007dda:	60a0      	str	r0, [r4, #8]
 8007ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de0:	f7fd fb56 	bl	8005490 <memset>
 8007de4:	4620      	mov	r0, r4
 8007de6:	bd70      	pop	{r4, r5, r6, pc}

08007de8 <__sfp_lock_acquire>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__sfp_lock_acquire+0x8>)
 8007dea:	f7ff bc8e 	b.w	800770a <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	200006d5 	.word	0x200006d5

08007df4 <__sfp_lock_release>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__sfp_lock_release+0x8>)
 8007df6:	f7ff bc89 	b.w	800770c <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	200006d5 	.word	0x200006d5

08007e00 <__sinit_lock_acquire>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__sinit_lock_acquire+0x8>)
 8007e02:	f7ff bc82 	b.w	800770a <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	200006d6 	.word	0x200006d6

08007e0c <__sinit_lock_release>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__sinit_lock_release+0x8>)
 8007e0e:	f7ff bc7d 	b.w	800770c <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	200006d6 	.word	0x200006d6

08007e18 <__sinit>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f7ff fff0 	bl	8007e00 <__sinit_lock_acquire>
 8007e20:	69a3      	ldr	r3, [r4, #24]
 8007e22:	b11b      	cbz	r3, 8007e2c <__sinit+0x14>
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f7ff bff0 	b.w	8007e0c <__sinit_lock_release>
 8007e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e30:	6523      	str	r3, [r4, #80]	; 0x50
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <__sinit+0x68>)
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <__sinit+0x6c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	bf08      	it	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	bf08      	it	eq
 8007e44:	61a3      	streq	r3, [r4, #24]
 8007e46:	f000 f81f 	bl	8007e88 <__sfp>
 8007e4a:	6060      	str	r0, [r4, #4]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 f81b 	bl	8007e88 <__sfp>
 8007e52:	60a0      	str	r0, [r4, #8]
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f817 	bl	8007e88 <__sfp>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	60e0      	str	r0, [r4, #12]
 8007e60:	6860      	ldr	r0, [r4, #4]
 8007e62:	f7ff ff81 	bl	8007d68 <std>
 8007e66:	2201      	movs	r2, #1
 8007e68:	2109      	movs	r1, #9
 8007e6a:	68a0      	ldr	r0, [r4, #8]
 8007e6c:	f7ff ff7c 	bl	8007d68 <std>
 8007e70:	2202      	movs	r2, #2
 8007e72:	2112      	movs	r1, #18
 8007e74:	68e0      	ldr	r0, [r4, #12]
 8007e76:	f7ff ff77 	bl	8007d68 <std>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61a3      	str	r3, [r4, #24]
 8007e7e:	e7d1      	b.n	8007e24 <__sinit+0xc>
 8007e80:	080091d8 	.word	0x080091d8
 8007e84:	08007db1 	.word	0x08007db1

08007e88 <__sfp>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	f7ff ffac 	bl	8007de8 <__sfp_lock_acquire>
 8007e90:	4b1e      	ldr	r3, [pc, #120]	; (8007f0c <__sfp+0x84>)
 8007e92:	681e      	ldr	r6, [r3, #0]
 8007e94:	69b3      	ldr	r3, [r6, #24]
 8007e96:	b913      	cbnz	r3, 8007e9e <__sfp+0x16>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff ffbd 	bl	8007e18 <__sinit>
 8007e9e:	3648      	adds	r6, #72	; 0x48
 8007ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	d503      	bpl.n	8007eb0 <__sfp+0x28>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	b30b      	cbz	r3, 8007ef0 <__sfp+0x68>
 8007eac:	6836      	ldr	r6, [r6, #0]
 8007eae:	e7f7      	b.n	8007ea0 <__sfp+0x18>
 8007eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb4:	b9d5      	cbnz	r5, 8007eec <__sfp+0x64>
 8007eb6:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <__sfp+0x88>)
 8007eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ebc:	60e3      	str	r3, [r4, #12]
 8007ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec0:	f7ff fc22 	bl	8007708 <__retarget_lock_init_recursive>
 8007ec4:	f7ff ff96 	bl	8007df4 <__sfp_lock_release>
 8007ec8:	2208      	movs	r2, #8
 8007eca:	4629      	mov	r1, r5
 8007ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed4:	6025      	str	r5, [r4, #0]
 8007ed6:	61a5      	str	r5, [r4, #24]
 8007ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007edc:	f7fd fad8 	bl	8005490 <memset>
 8007ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eec:	3468      	adds	r4, #104	; 0x68
 8007eee:	e7d9      	b.n	8007ea4 <__sfp+0x1c>
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ff62 	bl	8007dbc <__sfmoreglue>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	6030      	str	r0, [r6, #0]
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1d5      	bne.n	8007eac <__sfp+0x24>
 8007f00:	f7ff ff78 	bl	8007df4 <__sfp_lock_release>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	e7ee      	b.n	8007ee8 <__sfp+0x60>
 8007f0a:	bf00      	nop
 8007f0c:	080091d8 	.word	0x080091d8
 8007f10:	ffff0001 	.word	0xffff0001

08007f14 <_fwalk_reent>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	4606      	mov	r6, r0
 8007f1a:	4688      	mov	r8, r1
 8007f1c:	2700      	movs	r7, #0
 8007f1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f26:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2a:	d505      	bpl.n	8007f38 <_fwalk_reent+0x24>
 8007f2c:	6824      	ldr	r4, [r4, #0]
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d1f7      	bne.n	8007f22 <_fwalk_reent+0xe>
 8007f32:	4638      	mov	r0, r7
 8007f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f38:	89ab      	ldrh	r3, [r5, #12]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d907      	bls.n	8007f4e <_fwalk_reent+0x3a>
 8007f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f42:	3301      	adds	r3, #1
 8007f44:	d003      	beq.n	8007f4e <_fwalk_reent+0x3a>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	47c0      	blx	r8
 8007f4c:	4307      	orrs	r7, r0
 8007f4e:	3568      	adds	r5, #104	; 0x68
 8007f50:	e7e9      	b.n	8007f26 <_fwalk_reent+0x12>

08007f52 <__swhatbuf_r>:
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	460e      	mov	r6, r1
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	461d      	mov	r5, r3
 8007f60:	b096      	sub	sp, #88	; 0x58
 8007f62:	da08      	bge.n	8007f76 <__swhatbuf_r+0x24>
 8007f64:	2200      	movs	r2, #0
 8007f66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f6a:	602a      	str	r2, [r5, #0]
 8007f6c:	061a      	lsls	r2, r3, #24
 8007f6e:	d410      	bmi.n	8007f92 <__swhatbuf_r+0x40>
 8007f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f74:	e00e      	b.n	8007f94 <__swhatbuf_r+0x42>
 8007f76:	466a      	mov	r2, sp
 8007f78:	f000 f902 	bl	8008180 <_fstat_r>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dbf1      	blt.n	8007f64 <__swhatbuf_r+0x12>
 8007f80:	9a01      	ldr	r2, [sp, #4]
 8007f82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f8a:	425a      	negs	r2, r3
 8007f8c:	415a      	adcs	r2, r3
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	e7ee      	b.n	8007f70 <__swhatbuf_r+0x1e>
 8007f92:	2340      	movs	r3, #64	; 0x40
 8007f94:	2000      	movs	r0, #0
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	b016      	add	sp, #88	; 0x58
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}

08007f9c <__smakebuf_r>:
 8007f9c:	898b      	ldrh	r3, [r1, #12]
 8007f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa0:	079d      	lsls	r5, r3, #30
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	d507      	bpl.n	8007fb8 <__smakebuf_r+0x1c>
 8007fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	6163      	str	r3, [r4, #20]
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	466a      	mov	r2, sp
 8007fba:	ab01      	add	r3, sp, #4
 8007fbc:	f7ff ffc9 	bl	8007f52 <__swhatbuf_r>
 8007fc0:	9900      	ldr	r1, [sp, #0]
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7fd fad3 	bl	8005570 <_malloc_r>
 8007fca:	b948      	cbnz	r0, 8007fe0 <__smakebuf_r+0x44>
 8007fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd0:	059a      	lsls	r2, r3, #22
 8007fd2:	d4ef      	bmi.n	8007fb4 <__smakebuf_r+0x18>
 8007fd4:	f023 0303 	bic.w	r3, r3, #3
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	81a3      	strh	r3, [r4, #12]
 8007fde:	e7e3      	b.n	8007fa8 <__smakebuf_r+0xc>
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <__smakebuf_r+0x7c>)
 8007fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	6020      	str	r0, [r4, #0]
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	6120      	str	r0, [r4, #16]
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	b15b      	cbz	r3, 8008010 <__smakebuf_r+0x74>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffe:	f000 f8d1 	bl	80081a4 <_isatty_r>
 8008002:	b128      	cbz	r0, 8008010 <__smakebuf_r+0x74>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	89a0      	ldrh	r0, [r4, #12]
 8008012:	4305      	orrs	r5, r0
 8008014:	81a5      	strh	r5, [r4, #12]
 8008016:	e7cd      	b.n	8007fb4 <__smakebuf_r+0x18>
 8008018:	08007db1 	.word	0x08007db1

0800801c <_malloc_usable_size_r>:
 800801c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008020:	1f18      	subs	r0, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	bfbc      	itt	lt
 8008026:	580b      	ldrlt	r3, [r1, r0]
 8008028:	18c0      	addlt	r0, r0, r3
 800802a:	4770      	bx	lr

0800802c <_raise_r>:
 800802c:	291f      	cmp	r1, #31
 800802e:	b538      	push	{r3, r4, r5, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	460d      	mov	r5, r1
 8008034:	d904      	bls.n	8008040 <_raise_r+0x14>
 8008036:	2316      	movs	r3, #22
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008042:	b112      	cbz	r2, 800804a <_raise_r+0x1e>
 8008044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008048:	b94b      	cbnz	r3, 800805e <_raise_r+0x32>
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f830 	bl	80080b0 <_getpid_r>
 8008050:	462a      	mov	r2, r5
 8008052:	4601      	mov	r1, r0
 8008054:	4620      	mov	r0, r4
 8008056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805a:	f000 b817 	b.w	800808c <_kill_r>
 800805e:	2b01      	cmp	r3, #1
 8008060:	d00a      	beq.n	8008078 <_raise_r+0x4c>
 8008062:	1c59      	adds	r1, r3, #1
 8008064:	d103      	bne.n	800806e <_raise_r+0x42>
 8008066:	2316      	movs	r3, #22
 8008068:	6003      	str	r3, [r0, #0]
 800806a:	2001      	movs	r0, #1
 800806c:	e7e7      	b.n	800803e <_raise_r+0x12>
 800806e:	2400      	movs	r4, #0
 8008070:	4628      	mov	r0, r5
 8008072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008076:	4798      	blx	r3
 8008078:	2000      	movs	r0, #0
 800807a:	e7e0      	b.n	800803e <_raise_r+0x12>

0800807c <raise>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <raise+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f7ff bfd3 	b.w	800802c <_raise_r>
 8008086:	bf00      	nop
 8008088:	20000040 	.word	0x20000040

0800808c <_kill_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	2300      	movs	r3, #0
 8008090:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_kill_r+0x20>)
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	4611      	mov	r1, r2
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	f7fa feef 	bl	8002e7c <_kill>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d102      	bne.n	80080a8 <_kill_r+0x1c>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	b103      	cbz	r3, 80080a8 <_kill_r+0x1c>
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
 80080aa:	bf00      	nop
 80080ac:	200006d0 	.word	0x200006d0

080080b0 <_getpid_r>:
 80080b0:	f7fa bee2 	b.w	8002e78 <_getpid>

080080b4 <__sread>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	f000 f894 	bl	80081e8 <_read_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bfab      	itete	ge
 80080c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080c6:	89a3      	ldrhlt	r3, [r4, #12]
 80080c8:	181b      	addge	r3, r3, r0
 80080ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ce:	bfac      	ite	ge
 80080d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80080d2:	81a3      	strhlt	r3, [r4, #12]
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <__swrite>:
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	461f      	mov	r7, r3
 80080dc:	898b      	ldrh	r3, [r1, #12]
 80080de:	4605      	mov	r5, r0
 80080e0:	05db      	lsls	r3, r3, #23
 80080e2:	460c      	mov	r4, r1
 80080e4:	4616      	mov	r6, r2
 80080e6:	d505      	bpl.n	80080f4 <__swrite+0x1e>
 80080e8:	2302      	movs	r3, #2
 80080ea:	2200      	movs	r2, #0
 80080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f0:	f000 f868 	bl	80081c4 <_lseek_r>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	4632      	mov	r2, r6
 80080f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	4628      	mov	r0, r5
 8008100:	463b      	mov	r3, r7
 8008102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	f000 b817 	b.w	800813c <_write_r>

0800810e <__sseek>:
 800810e:	b510      	push	{r4, lr}
 8008110:	460c      	mov	r4, r1
 8008112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008116:	f000 f855 	bl	80081c4 <_lseek_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	bf15      	itete	ne
 8008120:	6560      	strne	r0, [r4, #84]	; 0x54
 8008122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strheq	r3, [r4, #12]
 800812c:	bf18      	it	ne
 800812e:	81a3      	strhne	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__sclose>:
 8008132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008136:	f000 b813 	b.w	8008160 <_close_r>
	...

0800813c <_write_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	2200      	movs	r2, #0
 8008146:	4d05      	ldr	r5, [pc, #20]	; (800815c <_write_r+0x20>)
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f7fa feb4 	bl	8002eb8 <_write>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_write_r+0x1e>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_write_r+0x1e>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	200006d0 	.word	0x200006d0

08008160 <_close_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	2300      	movs	r3, #0
 8008164:	4d05      	ldr	r5, [pc, #20]	; (800817c <_close_r+0x1c>)
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	f7fa feb2 	bl	8002ed4 <_close>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_close_r+0x1a>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_close_r+0x1a>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200006d0 	.word	0x200006d0

08008180 <_fstat_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	2300      	movs	r3, #0
 8008184:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_fstat_r+0x20>)
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	f7fa fea5 	bl	8002edc <_fstat>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d102      	bne.n	800819c <_fstat_r+0x1c>
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	b103      	cbz	r3, 800819c <_fstat_r+0x1c>
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	200006d0 	.word	0x200006d0

080081a4 <_isatty_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	2300      	movs	r3, #0
 80081a8:	4d05      	ldr	r5, [pc, #20]	; (80081c0 <_isatty_r+0x1c>)
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	602b      	str	r3, [r5, #0]
 80081b0:	f7fa fe9a 	bl	8002ee8 <_isatty>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_isatty_r+0x1a>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_isatty_r+0x1a>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	200006d0 	.word	0x200006d0

080081c4 <_lseek_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	2200      	movs	r2, #0
 80081ce:	4d05      	ldr	r5, [pc, #20]	; (80081e4 <_lseek_r+0x20>)
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7fa fe8a 	bl	8002eec <_lseek>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_lseek_r+0x1e>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_lseek_r+0x1e>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	200006d0 	.word	0x200006d0

080081e8 <_read_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	2200      	movs	r2, #0
 80081f2:	4d05      	ldr	r5, [pc, #20]	; (8008208 <_read_r+0x20>)
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7fa fe50 	bl	8002e9c <_read>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_read_r+0x1e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_read_r+0x1e>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	200006d0 	.word	0x200006d0
 800820c:	00000000 	.word	0x00000000

08008210 <floor>:
 8008210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008214:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008218:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800821c:	2e13      	cmp	r6, #19
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4607      	mov	r7, r0
 8008224:	460c      	mov	r4, r1
 8008226:	4605      	mov	r5, r0
 8008228:	dc33      	bgt.n	8008292 <floor+0x82>
 800822a:	2e00      	cmp	r6, #0
 800822c:	da14      	bge.n	8008258 <floor+0x48>
 800822e:	a334      	add	r3, pc, #208	; (adr r3, 8008300 <floor+0xf0>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 f806 	bl	8000244 <__adddf3>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	f7f8 fc48 	bl	8000ad0 <__aeabi_dcmpgt>
 8008240:	b138      	cbz	r0, 8008252 <floor+0x42>
 8008242:	2c00      	cmp	r4, #0
 8008244:	da58      	bge.n	80082f8 <floor+0xe8>
 8008246:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800824a:	431d      	orrs	r5, r3
 800824c:	d001      	beq.n	8008252 <floor+0x42>
 800824e:	2500      	movs	r5, #0
 8008250:	4c2d      	ldr	r4, [pc, #180]	; (8008308 <floor+0xf8>)
 8008252:	4623      	mov	r3, r4
 8008254:	462f      	mov	r7, r5
 8008256:	e025      	b.n	80082a4 <floor+0x94>
 8008258:	4a2c      	ldr	r2, [pc, #176]	; (800830c <floor+0xfc>)
 800825a:	fa42 f806 	asr.w	r8, r2, r6
 800825e:	ea01 0208 	and.w	r2, r1, r8
 8008262:	4302      	orrs	r2, r0
 8008264:	d01e      	beq.n	80082a4 <floor+0x94>
 8008266:	a326      	add	r3, pc, #152	; (adr r3, 8008300 <floor+0xf0>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f7 ffea 	bl	8000244 <__adddf3>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	f7f8 fc2c 	bl	8000ad0 <__aeabi_dcmpgt>
 8008278:	2800      	cmp	r0, #0
 800827a:	d0ea      	beq.n	8008252 <floor+0x42>
 800827c:	2c00      	cmp	r4, #0
 800827e:	bfbe      	ittt	lt
 8008280:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008284:	fa43 f606 	asrlt.w	r6, r3, r6
 8008288:	19a4      	addlt	r4, r4, r6
 800828a:	2500      	movs	r5, #0
 800828c:	ea24 0408 	bic.w	r4, r4, r8
 8008290:	e7df      	b.n	8008252 <floor+0x42>
 8008292:	2e33      	cmp	r6, #51	; 0x33
 8008294:	dd0a      	ble.n	80082ac <floor+0x9c>
 8008296:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800829a:	d103      	bne.n	80082a4 <floor+0x94>
 800829c:	f7f7 ffd2 	bl	8000244 <__adddf3>
 80082a0:	4607      	mov	r7, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4638      	mov	r0, r7
 80082a6:	4619      	mov	r1, r3
 80082a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80082b4:	fa22 f808 	lsr.w	r8, r2, r8
 80082b8:	ea18 0f00 	tst.w	r8, r0
 80082bc:	d0f2      	beq.n	80082a4 <floor+0x94>
 80082be:	a310      	add	r3, pc, #64	; (adr r3, 8008300 <floor+0xf0>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f7 ffbe 	bl	8000244 <__adddf3>
 80082c8:	2200      	movs	r2, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	f7f8 fc00 	bl	8000ad0 <__aeabi_dcmpgt>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d0be      	beq.n	8008252 <floor+0x42>
 80082d4:	2c00      	cmp	r4, #0
 80082d6:	da02      	bge.n	80082de <floor+0xce>
 80082d8:	2e14      	cmp	r6, #20
 80082da:	d103      	bne.n	80082e4 <floor+0xd4>
 80082dc:	3401      	adds	r4, #1
 80082de:	ea25 0508 	bic.w	r5, r5, r8
 80082e2:	e7b6      	b.n	8008252 <floor+0x42>
 80082e4:	2301      	movs	r3, #1
 80082e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80082ea:	fa03 f606 	lsl.w	r6, r3, r6
 80082ee:	4435      	add	r5, r6
 80082f0:	42bd      	cmp	r5, r7
 80082f2:	bf38      	it	cc
 80082f4:	18e4      	addcc	r4, r4, r3
 80082f6:	e7f2      	b.n	80082de <floor+0xce>
 80082f8:	2500      	movs	r5, #0
 80082fa:	462c      	mov	r4, r5
 80082fc:	e7a9      	b.n	8008252 <floor+0x42>
 80082fe:	bf00      	nop
 8008300:	8800759c 	.word	0x8800759c
 8008304:	7e37e43c 	.word	0x7e37e43c
 8008308:	bff00000 	.word	0xbff00000
 800830c:	000fffff 	.word	0x000fffff

08008310 <atan2>:
 8008310:	f000 b826 	b.w	8008360 <__ieee754_atan2>

08008314 <sqrt>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	f000 f8f3 	bl	8008504 <__ieee754_sqrt>
 800831e:	4632      	mov	r2, r6
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	463b      	mov	r3, r7
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f8 fbdb 	bl	8000ae4 <__aeabi_dcmpun>
 800832e:	b990      	cbnz	r0, 8008356 <sqrt+0x42>
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 fbac 	bl	8000a94 <__aeabi_dcmplt>
 800833c:	b158      	cbz	r0, 8008356 <sqrt+0x42>
 800833e:	f7fd f853 	bl	80053e8 <__errno>
 8008342:	2321      	movs	r3, #33	; 0x21
 8008344:	2200      	movs	r2, #0
 8008346:	6003      	str	r3, [r0, #0]
 8008348:	2300      	movs	r3, #0
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	f7f8 fa59 	bl	8000804 <__aeabi_ddiv>
 8008352:	4604      	mov	r4, r0
 8008354:	460d      	mov	r5, r1
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	0000      	movs	r0, r0
	...

08008360 <__ieee754_atan2>:
 8008360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4692      	mov	sl, r2
 8008366:	4699      	mov	r9, r3
 8008368:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800836c:	461f      	mov	r7, r3
 800836e:	f1ca 0300 	rsb	r3, sl, #0
 8008372:	f8df e184 	ldr.w	lr, [pc, #388]	; 80084f8 <__ieee754_atan2+0x198>
 8008376:	ea43 030a 	orr.w	r3, r3, sl
 800837a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800837e:	4573      	cmp	r3, lr
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	d808      	bhi.n	8008398 <__ieee754_atan2+0x38>
 8008386:	4246      	negs	r6, r0
 8008388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800838c:	4306      	orrs	r6, r0
 800838e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008392:	4576      	cmp	r6, lr
 8008394:	468c      	mov	ip, r1
 8008396:	d908      	bls.n	80083aa <__ieee754_atan2+0x4a>
 8008398:	4652      	mov	r2, sl
 800839a:	464b      	mov	r3, r9
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f7 ff50 	bl	8000244 <__adddf3>
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	e019      	b.n	80083de <__ieee754_atan2+0x7e>
 80083aa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80083ae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80083b2:	ea56 060a 	orrs.w	r6, r6, sl
 80083b6:	d103      	bne.n	80083c0 <__ieee754_atan2+0x60>
 80083b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	f000 b954 	b.w	8008668 <atan>
 80083c0:	17be      	asrs	r6, r7, #30
 80083c2:	f006 0602 	and.w	r6, r6, #2
 80083c6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80083ca:	ea53 0100 	orrs.w	r1, r3, r0
 80083ce:	d10a      	bne.n	80083e6 <__ieee754_atan2+0x86>
 80083d0:	2e02      	cmp	r6, #2
 80083d2:	d067      	beq.n	80084a4 <__ieee754_atan2+0x144>
 80083d4:	2e03      	cmp	r6, #3
 80083d6:	d102      	bne.n	80083de <__ieee754_atan2+0x7e>
 80083d8:	a53b      	add	r5, pc, #236	; (adr r5, 80084c8 <__ieee754_atan2+0x168>)
 80083da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	ea52 010a 	orrs.w	r1, r2, sl
 80083ea:	d106      	bne.n	80083fa <__ieee754_atan2+0x9a>
 80083ec:	f1bc 0f00 	cmp.w	ip, #0
 80083f0:	da63      	bge.n	80084ba <__ieee754_atan2+0x15a>
 80083f2:	a537      	add	r5, pc, #220	; (adr r5, 80084d0 <__ieee754_atan2+0x170>)
 80083f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083f8:	e7f1      	b.n	80083de <__ieee754_atan2+0x7e>
 80083fa:	4572      	cmp	r2, lr
 80083fc:	d10f      	bne.n	800841e <__ieee754_atan2+0xbe>
 80083fe:	4293      	cmp	r3, r2
 8008400:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8008404:	d107      	bne.n	8008416 <__ieee754_atan2+0xb6>
 8008406:	2e02      	cmp	r6, #2
 8008408:	d850      	bhi.n	80084ac <__ieee754_atan2+0x14c>
 800840a:	4b3c      	ldr	r3, [pc, #240]	; (80084fc <__ieee754_atan2+0x19c>)
 800840c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008410:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008414:	e7e3      	b.n	80083de <__ieee754_atan2+0x7e>
 8008416:	2e02      	cmp	r6, #2
 8008418:	d84c      	bhi.n	80084b4 <__ieee754_atan2+0x154>
 800841a:	4b39      	ldr	r3, [pc, #228]	; (8008500 <__ieee754_atan2+0x1a0>)
 800841c:	e7f6      	b.n	800840c <__ieee754_atan2+0xac>
 800841e:	4573      	cmp	r3, lr
 8008420:	d0e4      	beq.n	80083ec <__ieee754_atan2+0x8c>
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008428:	ea4f 5223 	mov.w	r2, r3, asr #20
 800842c:	da20      	bge.n	8008470 <__ieee754_atan2+0x110>
 800842e:	2f00      	cmp	r7, #0
 8008430:	da01      	bge.n	8008436 <__ieee754_atan2+0xd6>
 8008432:	323c      	adds	r2, #60	; 0x3c
 8008434:	db20      	blt.n	8008478 <__ieee754_atan2+0x118>
 8008436:	4652      	mov	r2, sl
 8008438:	464b      	mov	r3, r9
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	f7f8 f9e1 	bl	8000804 <__aeabi_ddiv>
 8008442:	f000 fa9b 	bl	800897c <fabs>
 8008446:	f000 f90f 	bl	8008668 <atan>
 800844a:	4604      	mov	r4, r0
 800844c:	460d      	mov	r5, r1
 800844e:	2e01      	cmp	r6, #1
 8008450:	d015      	beq.n	800847e <__ieee754_atan2+0x11e>
 8008452:	2e02      	cmp	r6, #2
 8008454:	d017      	beq.n	8008486 <__ieee754_atan2+0x126>
 8008456:	2e00      	cmp	r6, #0
 8008458:	d0c1      	beq.n	80083de <__ieee754_atan2+0x7e>
 800845a:	a31f      	add	r3, pc, #124	; (adr r3, 80084d8 <__ieee754_atan2+0x178>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	4620      	mov	r0, r4
 8008462:	4629      	mov	r1, r5
 8008464:	f7f7 feec 	bl	8000240 <__aeabi_dsub>
 8008468:	a31d      	add	r3, pc, #116	; (adr r3, 80084e0 <__ieee754_atan2+0x180>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	e016      	b.n	800849e <__ieee754_atan2+0x13e>
 8008470:	a51d      	add	r5, pc, #116	; (adr r5, 80084e8 <__ieee754_atan2+0x188>)
 8008472:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008476:	e7ea      	b.n	800844e <__ieee754_atan2+0xee>
 8008478:	2400      	movs	r4, #0
 800847a:	2500      	movs	r5, #0
 800847c:	e7e7      	b.n	800844e <__ieee754_atan2+0xee>
 800847e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008482:	461d      	mov	r5, r3
 8008484:	e7ab      	b.n	80083de <__ieee754_atan2+0x7e>
 8008486:	a314      	add	r3, pc, #80	; (adr r3, 80084d8 <__ieee754_atan2+0x178>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f7 fed6 	bl	8000240 <__aeabi_dsub>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	a111      	add	r1, pc, #68	; (adr r1, 80084e0 <__ieee754_atan2+0x180>)
 800849a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849e:	f7f7 fecf 	bl	8000240 <__aeabi_dsub>
 80084a2:	e77f      	b.n	80083a4 <__ieee754_atan2+0x44>
 80084a4:	a50e      	add	r5, pc, #56	; (adr r5, 80084e0 <__ieee754_atan2+0x180>)
 80084a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084aa:	e798      	b.n	80083de <__ieee754_atan2+0x7e>
 80084ac:	a510      	add	r5, pc, #64	; (adr r5, 80084f0 <__ieee754_atan2+0x190>)
 80084ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084b2:	e794      	b.n	80083de <__ieee754_atan2+0x7e>
 80084b4:	2400      	movs	r4, #0
 80084b6:	2500      	movs	r5, #0
 80084b8:	e791      	b.n	80083de <__ieee754_atan2+0x7e>
 80084ba:	a50b      	add	r5, pc, #44	; (adr r5, 80084e8 <__ieee754_atan2+0x188>)
 80084bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084c0:	e78d      	b.n	80083de <__ieee754_atan2+0x7e>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	54442d18 	.word	0x54442d18
 80084cc:	c00921fb 	.word	0xc00921fb
 80084d0:	54442d18 	.word	0x54442d18
 80084d4:	bff921fb 	.word	0xbff921fb
 80084d8:	33145c07 	.word	0x33145c07
 80084dc:	3ca1a626 	.word	0x3ca1a626
 80084e0:	54442d18 	.word	0x54442d18
 80084e4:	400921fb 	.word	0x400921fb
 80084e8:	54442d18 	.word	0x54442d18
 80084ec:	3ff921fb 	.word	0x3ff921fb
 80084f0:	54442d18 	.word	0x54442d18
 80084f4:	3fe921fb 	.word	0x3fe921fb
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	080095b8 	.word	0x080095b8
 8008500:	080095d0 	.word	0x080095d0

08008504 <__ieee754_sqrt>:
 8008504:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008660 <__ieee754_sqrt+0x15c>
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008510:	4606      	mov	r6, r0
 8008512:	460d      	mov	r5, r1
 8008514:	460c      	mov	r4, r1
 8008516:	460a      	mov	r2, r1
 8008518:	4607      	mov	r7, r0
 800851a:	4603      	mov	r3, r0
 800851c:	d10f      	bne.n	800853e <__ieee754_sqrt+0x3a>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	f7f8 f845 	bl	80005b0 <__aeabi_dmul>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4630      	mov	r0, r6
 800852c:	4629      	mov	r1, r5
 800852e:	f7f7 fe89 	bl	8000244 <__adddf3>
 8008532:	4606      	mov	r6, r0
 8008534:	460d      	mov	r5, r1
 8008536:	4630      	mov	r0, r6
 8008538:	4629      	mov	r1, r5
 800853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853e:	2900      	cmp	r1, #0
 8008540:	dc0e      	bgt.n	8008560 <__ieee754_sqrt+0x5c>
 8008542:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008546:	ea5c 0707 	orrs.w	r7, ip, r7
 800854a:	d0f4      	beq.n	8008536 <__ieee754_sqrt+0x32>
 800854c:	b141      	cbz	r1, 8008560 <__ieee754_sqrt+0x5c>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	f7f7 fe75 	bl	8000240 <__aeabi_dsub>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	f7f8 f953 	bl	8000804 <__aeabi_ddiv>
 800855e:	e7e8      	b.n	8008532 <__ieee754_sqrt+0x2e>
 8008560:	1521      	asrs	r1, r4, #20
 8008562:	d075      	beq.n	8008650 <__ieee754_sqrt+0x14c>
 8008564:	07cc      	lsls	r4, r1, #31
 8008566:	f04f 0400 	mov.w	r4, #0
 800856a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800856e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008572:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008576:	bf5e      	ittt	pl
 8008578:	0fd9      	lsrpl	r1, r3, #31
 800857a:	005b      	lslpl	r3, r3, #1
 800857c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008580:	0fd9      	lsrs	r1, r3, #31
 8008582:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008586:	2516      	movs	r5, #22
 8008588:	4620      	mov	r0, r4
 800858a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800858e:	107f      	asrs	r7, r7, #1
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	1846      	adds	r6, r0, r1
 8008594:	4296      	cmp	r6, r2
 8008596:	bfde      	ittt	le
 8008598:	1b92      	suble	r2, r2, r6
 800859a:	1870      	addle	r0, r6, r1
 800859c:	1864      	addle	r4, r4, r1
 800859e:	0052      	lsls	r2, r2, #1
 80085a0:	3d01      	subs	r5, #1
 80085a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80085a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80085aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085ae:	d1f0      	bne.n	8008592 <__ieee754_sqrt+0x8e>
 80085b0:	4629      	mov	r1, r5
 80085b2:	f04f 0e20 	mov.w	lr, #32
 80085b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085ba:	4282      	cmp	r2, r0
 80085bc:	eb06 0c05 	add.w	ip, r6, r5
 80085c0:	dc02      	bgt.n	80085c8 <__ieee754_sqrt+0xc4>
 80085c2:	d113      	bne.n	80085ec <__ieee754_sqrt+0xe8>
 80085c4:	459c      	cmp	ip, r3
 80085c6:	d811      	bhi.n	80085ec <__ieee754_sqrt+0xe8>
 80085c8:	f1bc 0f00 	cmp.w	ip, #0
 80085cc:	eb0c 0506 	add.w	r5, ip, r6
 80085d0:	da43      	bge.n	800865a <__ieee754_sqrt+0x156>
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	db41      	blt.n	800865a <__ieee754_sqrt+0x156>
 80085d6:	f100 0801 	add.w	r8, r0, #1
 80085da:	1a12      	subs	r2, r2, r0
 80085dc:	4640      	mov	r0, r8
 80085de:	459c      	cmp	ip, r3
 80085e0:	bf88      	it	hi
 80085e2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80085e6:	eba3 030c 	sub.w	r3, r3, ip
 80085ea:	4431      	add	r1, r6
 80085ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80085f0:	f1be 0e01 	subs.w	lr, lr, #1
 80085f4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80085f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008600:	d1db      	bne.n	80085ba <__ieee754_sqrt+0xb6>
 8008602:	4313      	orrs	r3, r2
 8008604:	d006      	beq.n	8008614 <__ieee754_sqrt+0x110>
 8008606:	1c48      	adds	r0, r1, #1
 8008608:	bf0b      	itete	eq
 800860a:	4671      	moveq	r1, lr
 800860c:	3101      	addne	r1, #1
 800860e:	3401      	addeq	r4, #1
 8008610:	f021 0101 	bicne.w	r1, r1, #1
 8008614:	1063      	asrs	r3, r4, #1
 8008616:	0849      	lsrs	r1, r1, #1
 8008618:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800861c:	07e2      	lsls	r2, r4, #31
 800861e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008622:	bf48      	it	mi
 8008624:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008628:	460e      	mov	r6, r1
 800862a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800862e:	e782      	b.n	8008536 <__ieee754_sqrt+0x32>
 8008630:	0ada      	lsrs	r2, r3, #11
 8008632:	3815      	subs	r0, #21
 8008634:	055b      	lsls	r3, r3, #21
 8008636:	2a00      	cmp	r2, #0
 8008638:	d0fa      	beq.n	8008630 <__ieee754_sqrt+0x12c>
 800863a:	02d5      	lsls	r5, r2, #11
 800863c:	d50a      	bpl.n	8008654 <__ieee754_sqrt+0x150>
 800863e:	f1c1 0420 	rsb	r4, r1, #32
 8008642:	fa23 f404 	lsr.w	r4, r3, r4
 8008646:	1e4d      	subs	r5, r1, #1
 8008648:	408b      	lsls	r3, r1
 800864a:	4322      	orrs	r2, r4
 800864c:	1b41      	subs	r1, r0, r5
 800864e:	e789      	b.n	8008564 <__ieee754_sqrt+0x60>
 8008650:	4608      	mov	r0, r1
 8008652:	e7f0      	b.n	8008636 <__ieee754_sqrt+0x132>
 8008654:	0052      	lsls	r2, r2, #1
 8008656:	3101      	adds	r1, #1
 8008658:	e7ef      	b.n	800863a <__ieee754_sqrt+0x136>
 800865a:	4680      	mov	r8, r0
 800865c:	e7bd      	b.n	80085da <__ieee754_sqrt+0xd6>
 800865e:	bf00      	nop
 8008660:	7ff00000 	.word	0x7ff00000
 8008664:	00000000 	.word	0x00000000

08008668 <atan>:
 8008668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4bb6      	ldr	r3, [pc, #728]	; (8008948 <atan+0x2e0>)
 800866e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008672:	429e      	cmp	r6, r3
 8008674:	4604      	mov	r4, r0
 8008676:	460d      	mov	r5, r1
 8008678:	468b      	mov	fp, r1
 800867a:	dd17      	ble.n	80086ac <atan+0x44>
 800867c:	4bb3      	ldr	r3, [pc, #716]	; (800894c <atan+0x2e4>)
 800867e:	429e      	cmp	r6, r3
 8008680:	dc01      	bgt.n	8008686 <atan+0x1e>
 8008682:	d109      	bne.n	8008698 <atan+0x30>
 8008684:	b140      	cbz	r0, 8008698 <atan+0x30>
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f7 fdd9 	bl	8000244 <__adddf3>
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	e005      	b.n	80086a4 <atan+0x3c>
 8008698:	f1bb 0f00 	cmp.w	fp, #0
 800869c:	4cac      	ldr	r4, [pc, #688]	; (8008950 <atan+0x2e8>)
 800869e:	f300 8121 	bgt.w	80088e4 <atan+0x27c>
 80086a2:	4dac      	ldr	r5, [pc, #688]	; (8008954 <atan+0x2ec>)
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	4baa      	ldr	r3, [pc, #680]	; (8008958 <atan+0x2f0>)
 80086ae:	429e      	cmp	r6, r3
 80086b0:	dc11      	bgt.n	80086d6 <atan+0x6e>
 80086b2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80086b6:	429e      	cmp	r6, r3
 80086b8:	dc0a      	bgt.n	80086d0 <atan+0x68>
 80086ba:	a38b      	add	r3, pc, #556	; (adr r3, 80088e8 <atan+0x280>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 fdc0 	bl	8000244 <__adddf3>
 80086c4:	2200      	movs	r2, #0
 80086c6:	4ba5      	ldr	r3, [pc, #660]	; (800895c <atan+0x2f4>)
 80086c8:	f7f8 fa02 	bl	8000ad0 <__aeabi_dcmpgt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1e9      	bne.n	80086a4 <atan+0x3c>
 80086d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80086d4:	e027      	b.n	8008726 <atan+0xbe>
 80086d6:	f000 f951 	bl	800897c <fabs>
 80086da:	4ba1      	ldr	r3, [pc, #644]	; (8008960 <atan+0x2f8>)
 80086dc:	4604      	mov	r4, r0
 80086de:	429e      	cmp	r6, r3
 80086e0:	460d      	mov	r5, r1
 80086e2:	f300 80b8 	bgt.w	8008856 <atan+0x1ee>
 80086e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80086ea:	429e      	cmp	r6, r3
 80086ec:	f300 809c 	bgt.w	8008828 <atan+0x1c0>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	f7f7 fda6 	bl	8000244 <__adddf3>
 80086f8:	2200      	movs	r2, #0
 80086fa:	4b98      	ldr	r3, [pc, #608]	; (800895c <atan+0x2f4>)
 80086fc:	f7f7 fda0 	bl	8000240 <__aeabi_dsub>
 8008700:	2200      	movs	r2, #0
 8008702:	4606      	mov	r6, r0
 8008704:	460f      	mov	r7, r1
 8008706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fd99 	bl	8000244 <__adddf3>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 f873 	bl	8000804 <__aeabi_ddiv>
 800871e:	f04f 0a00 	mov.w	sl, #0
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	4622      	mov	r2, r4
 8008728:	462b      	mov	r3, r5
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 ff3f 	bl	80005b0 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4680      	mov	r8, r0
 8008738:	4689      	mov	r9, r1
 800873a:	f7f7 ff39 	bl	80005b0 <__aeabi_dmul>
 800873e:	a36c      	add	r3, pc, #432	; (adr r3, 80088f0 <atan+0x288>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	4606      	mov	r6, r0
 8008746:	460f      	mov	r7, r1
 8008748:	f7f7 ff32 	bl	80005b0 <__aeabi_dmul>
 800874c:	a36a      	add	r3, pc, #424	; (adr r3, 80088f8 <atan+0x290>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 fd77 	bl	8000244 <__adddf3>
 8008756:	4632      	mov	r2, r6
 8008758:	463b      	mov	r3, r7
 800875a:	f7f7 ff29 	bl	80005b0 <__aeabi_dmul>
 800875e:	a368      	add	r3, pc, #416	; (adr r3, 8008900 <atan+0x298>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f7 fd6e 	bl	8000244 <__adddf3>
 8008768:	4632      	mov	r2, r6
 800876a:	463b      	mov	r3, r7
 800876c:	f7f7 ff20 	bl	80005b0 <__aeabi_dmul>
 8008770:	a365      	add	r3, pc, #404	; (adr r3, 8008908 <atan+0x2a0>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 fd65 	bl	8000244 <__adddf3>
 800877a:	4632      	mov	r2, r6
 800877c:	463b      	mov	r3, r7
 800877e:	f7f7 ff17 	bl	80005b0 <__aeabi_dmul>
 8008782:	a363      	add	r3, pc, #396	; (adr r3, 8008910 <atan+0x2a8>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fd5c 	bl	8000244 <__adddf3>
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	f7f7 ff0e 	bl	80005b0 <__aeabi_dmul>
 8008794:	a360      	add	r3, pc, #384	; (adr r3, 8008918 <atan+0x2b0>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 fd53 	bl	8000244 <__adddf3>
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	f7f7 ff05 	bl	80005b0 <__aeabi_dmul>
 80087a6:	a35e      	add	r3, pc, #376	; (adr r3, 8008920 <atan+0x2b8>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fefc 	bl	80005b0 <__aeabi_dmul>
 80087b8:	a35b      	add	r3, pc, #364	; (adr r3, 8008928 <atan+0x2c0>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 fd3f 	bl	8000240 <__aeabi_dsub>
 80087c2:	4632      	mov	r2, r6
 80087c4:	463b      	mov	r3, r7
 80087c6:	f7f7 fef3 	bl	80005b0 <__aeabi_dmul>
 80087ca:	a359      	add	r3, pc, #356	; (adr r3, 8008930 <atan+0x2c8>)
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f7f7 fd36 	bl	8000240 <__aeabi_dsub>
 80087d4:	4632      	mov	r2, r6
 80087d6:	463b      	mov	r3, r7
 80087d8:	f7f7 feea 	bl	80005b0 <__aeabi_dmul>
 80087dc:	a356      	add	r3, pc, #344	; (adr r3, 8008938 <atan+0x2d0>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f7 fd2d 	bl	8000240 <__aeabi_dsub>
 80087e6:	4632      	mov	r2, r6
 80087e8:	463b      	mov	r3, r7
 80087ea:	f7f7 fee1 	bl	80005b0 <__aeabi_dmul>
 80087ee:	a354      	add	r3, pc, #336	; (adr r3, 8008940 <atan+0x2d8>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f7f7 fd24 	bl	8000240 <__aeabi_dsub>
 80087f8:	4632      	mov	r2, r6
 80087fa:	463b      	mov	r3, r7
 80087fc:	f7f7 fed8 	bl	80005b0 <__aeabi_dmul>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f7 fd1c 	bl	8000244 <__adddf3>
 800880c:	4622      	mov	r2, r4
 800880e:	462b      	mov	r3, r5
 8008810:	f7f7 fece 	bl	80005b0 <__aeabi_dmul>
 8008814:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	d144      	bne.n	80088a8 <atan+0x240>
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd0d 	bl	8000240 <__aeabi_dsub>
 8008826:	e734      	b.n	8008692 <atan+0x2a>
 8008828:	2200      	movs	r2, #0
 800882a:	4b4c      	ldr	r3, [pc, #304]	; (800895c <atan+0x2f4>)
 800882c:	f7f7 fd08 	bl	8000240 <__aeabi_dsub>
 8008830:	2200      	movs	r2, #0
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	4b48      	ldr	r3, [pc, #288]	; (800895c <atan+0x2f4>)
 800883c:	f7f7 fd02 	bl	8000244 <__adddf3>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4630      	mov	r0, r6
 8008846:	4639      	mov	r1, r7
 8008848:	f7f7 ffdc 	bl	8000804 <__aeabi_ddiv>
 800884c:	f04f 0a01 	mov.w	sl, #1
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	e767      	b.n	8008726 <atan+0xbe>
 8008856:	4b43      	ldr	r3, [pc, #268]	; (8008964 <atan+0x2fc>)
 8008858:	429e      	cmp	r6, r3
 800885a:	da1a      	bge.n	8008892 <atan+0x22a>
 800885c:	2200      	movs	r2, #0
 800885e:	4b42      	ldr	r3, [pc, #264]	; (8008968 <atan+0x300>)
 8008860:	f7f7 fcee 	bl	8000240 <__aeabi_dsub>
 8008864:	2200      	movs	r2, #0
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	4b3e      	ldr	r3, [pc, #248]	; (8008968 <atan+0x300>)
 8008870:	f7f7 fe9e 	bl	80005b0 <__aeabi_dmul>
 8008874:	2200      	movs	r2, #0
 8008876:	4b39      	ldr	r3, [pc, #228]	; (800895c <atan+0x2f4>)
 8008878:	f7f7 fce4 	bl	8000244 <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 ffbe 	bl	8000804 <__aeabi_ddiv>
 8008888:	f04f 0a02 	mov.w	sl, #2
 800888c:	4604      	mov	r4, r0
 800888e:	460d      	mov	r5, r1
 8008890:	e749      	b.n	8008726 <atan+0xbe>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	2000      	movs	r0, #0
 8008898:	4934      	ldr	r1, [pc, #208]	; (800896c <atan+0x304>)
 800889a:	f7f7 ffb3 	bl	8000804 <__aeabi_ddiv>
 800889e:	f04f 0a03 	mov.w	sl, #3
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	e73e      	b.n	8008726 <atan+0xbe>
 80088a8:	4b31      	ldr	r3, [pc, #196]	; (8008970 <atan+0x308>)
 80088aa:	4e32      	ldr	r6, [pc, #200]	; (8008974 <atan+0x30c>)
 80088ac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80088b0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80088b4:	e9da 2300 	ldrd	r2, r3, [sl]
 80088b8:	f7f7 fcc2 	bl	8000240 <__aeabi_dsub>
 80088bc:	4622      	mov	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	f7f7 fcbe 	bl	8000240 <__aeabi_dsub>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80088cc:	f7f7 fcb8 	bl	8000240 <__aeabi_dsub>
 80088d0:	f1bb 0f00 	cmp.w	fp, #0
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	f6bf aee4 	bge.w	80086a4 <atan+0x3c>
 80088dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088e0:	461d      	mov	r5, r3
 80088e2:	e6df      	b.n	80086a4 <atan+0x3c>
 80088e4:	4d24      	ldr	r5, [pc, #144]	; (8008978 <atan+0x310>)
 80088e6:	e6dd      	b.n	80086a4 <atan+0x3c>
 80088e8:	8800759c 	.word	0x8800759c
 80088ec:	7e37e43c 	.word	0x7e37e43c
 80088f0:	e322da11 	.word	0xe322da11
 80088f4:	3f90ad3a 	.word	0x3f90ad3a
 80088f8:	24760deb 	.word	0x24760deb
 80088fc:	3fa97b4b 	.word	0x3fa97b4b
 8008900:	a0d03d51 	.word	0xa0d03d51
 8008904:	3fb10d66 	.word	0x3fb10d66
 8008908:	c54c206e 	.word	0xc54c206e
 800890c:	3fb745cd 	.word	0x3fb745cd
 8008910:	920083ff 	.word	0x920083ff
 8008914:	3fc24924 	.word	0x3fc24924
 8008918:	5555550d 	.word	0x5555550d
 800891c:	3fd55555 	.word	0x3fd55555
 8008920:	2c6a6c2f 	.word	0x2c6a6c2f
 8008924:	bfa2b444 	.word	0xbfa2b444
 8008928:	52defd9a 	.word	0x52defd9a
 800892c:	3fadde2d 	.word	0x3fadde2d
 8008930:	af749a6d 	.word	0xaf749a6d
 8008934:	3fb3b0f2 	.word	0x3fb3b0f2
 8008938:	fe231671 	.word	0xfe231671
 800893c:	3fbc71c6 	.word	0x3fbc71c6
 8008940:	9998ebc4 	.word	0x9998ebc4
 8008944:	3fc99999 	.word	0x3fc99999
 8008948:	440fffff 	.word	0x440fffff
 800894c:	7ff00000 	.word	0x7ff00000
 8008950:	54442d18 	.word	0x54442d18
 8008954:	bff921fb 	.word	0xbff921fb
 8008958:	3fdbffff 	.word	0x3fdbffff
 800895c:	3ff00000 	.word	0x3ff00000
 8008960:	3ff2ffff 	.word	0x3ff2ffff
 8008964:	40038000 	.word	0x40038000
 8008968:	3ff80000 	.word	0x3ff80000
 800896c:	bff00000 	.word	0xbff00000
 8008970:	08009608 	.word	0x08009608
 8008974:	080095e8 	.word	0x080095e8
 8008978:	3ff921fb 	.word	0x3ff921fb

0800897c <fabs>:
 800897c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008980:	4770      	bx	lr
	...

08008984 <_init>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr

08008990 <_fini>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr
