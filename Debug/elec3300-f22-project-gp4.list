
elec3300-f22-project-gp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  080097f0  080097f0  000197f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3ac  0800a3ac  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3ac  0800a3ac  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a3b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000210  0800a5c4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800a5c4  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c188  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0002c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ae  00000000  00000000  0002ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f494  00000000  00000000  0004b2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b34d  00000000  00000000  0005a74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5a97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  000f5ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	080097d8 	.word	0x080097d8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	080097d8 	.word	0x080097d8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <Delay>:
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);

uint16_t LCD_Read_PixelData(void);


void Delay(__IO uint32_t nCount) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    for (; nCount != 0; nCount--);
 8001150:	e002      	b.n	8001158 <Delay+0x10>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3b01      	subs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f9      	bne.n	8001152 <Delay+0xa>
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <LCD_INIT>:

void LCD_INIT(void) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af02      	add	r7, sp, #8
    LCD_BackLed_Control(ENABLE);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 f829 	bl	80011c8 <LCD_BackLed_Control>
    LCD_Rst();
 8001176:	f000 f80f 	bl	8001198 <LCD_Rst>
    LCD_REG_Config();
 800117a:	f000 f85f 	bl	800123c <LCD_REG_Config>
    LCD_Clear(0, 0, 240, 320, BACKGROUND);
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001186:	22f0      	movs	r2, #240	; 0xf0
 8001188:	2100      	movs	r1, #0
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f9e7 	bl	800155e <LCD_Clear>
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <LCD_Rst>:


void LCD_Rst(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <LCD_Rst+0x28>)
 80011a2:	f003 fcfa 	bl	8004b9a <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <LCD_Rst+0x2c>)
 80011a8:	f7ff ffce 	bl	8001148 <Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2102      	movs	r1, #2
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <LCD_Rst+0x28>)
 80011b2:	f003 fcf2 	bl	8004b9a <HAL_GPIO_WritePin>
    Delay(0xAFFf << 2);
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <LCD_Rst+0x2c>)
 80011b8:	f7ff ffc6 	bl	8001148 <Delay>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011800 	.word	0x40011800
 80011c4:	0002bffc 	.word	0x0002bffc

080011c8 <LCD_BackLed_Control>:


void LCD_BackLed_Control(FunctionalState enumState) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    if (enumState)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <LCD_BackLed_Control+0x1e>
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <LCD_BackLed_Control+0x34>)
 80011e0:	f003 fcdb 	bl	8004b9a <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}
 80011e4:	e005      	b.n	80011f2 <LCD_BackLed_Control+0x2a>
        HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <LCD_BackLed_Control+0x34>)
 80011ee:	f003 fcd4 	bl	8004b9a <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40011400 	.word	0x40011400

08001200 <LCD_Write_Cmd>:


void LCD_Write_Cmd(uint16_t usCmd) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *) (FSMC_Addr_LCD_CMD) = usCmd;
 800120a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	8013      	strh	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LCD_Write_Data>:


void LCD_Write_Data(uint16_t usData) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *) (FSMC_Addr_LCD_DATA) = usData;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <LCD_Write_Data+0x1c>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	8013      	strh	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	60020000 	.word	0x60020000

0800123c <LCD_REG_Config>:
uint16_t LCD_Read_Data(void) {
    return (*(__IO uint16_t *) (FSMC_Addr_LCD_DATA));
}


void LCD_REG_Config(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    /*  Power control B (CFh)  */
    DEBUG_DELAY  ();
    LCD_Write_Cmd(0xCF);
 8001240:	20cf      	movs	r0, #207	; 0xcf
 8001242:	f7ff ffdd 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ffe8 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x81);
 800124c:	2081      	movs	r0, #129	; 0x81
 800124e:	f7ff ffe5 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001252:	2030      	movs	r0, #48	; 0x30
 8001254:	f7ff ffe2 	bl	800121c <LCD_Write_Data>

    /*  Power on sequence control (EDh) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xED);
 8001258:	20ed      	movs	r0, #237	; 0xed
 800125a:	f7ff ffd1 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f7ff ffdc 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001264:	2003      	movs	r0, #3
 8001266:	f7ff ffd9 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x12);
 800126a:	2012      	movs	r0, #18
 800126c:	f7ff ffd6 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001270:	2081      	movs	r0, #129	; 0x81
 8001272:	f7ff ffd3 	bl	800121c <LCD_Write_Data>

    /*  Driver timing control A (E8h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xE8);
 8001276:	20e8      	movs	r0, #232	; 0xe8
 8001278:	f7ff ffc2 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 800127c:	2085      	movs	r0, #133	; 0x85
 800127e:	f7ff ffcd 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001282:	2010      	movs	r0, #16
 8001284:	f7ff ffca 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f7ff ffc7 	bl	800121c <LCD_Write_Data>

    /*  Power control A (CBh) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xCB);
 800128e:	20cb      	movs	r0, #203	; 0xcb
 8001290:	f7ff ffb6 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f7ff ffc1 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 800129a:	202c      	movs	r0, #44	; 0x2c
 800129c:	f7ff ffbe 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ffbb 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x34);
 80012a6:	2034      	movs	r0, #52	; 0x34
 80012a8:	f7ff ffb8 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x02);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff ffb5 	bl	800121c <LCD_Write_Data>

    /* Pump ratio control (F7h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xF7);
 80012b2:	20f7      	movs	r0, #247	; 0xf7
 80012b4:	f7ff ffa4 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 80012b8:	2020      	movs	r0, #32
 80012ba:	f7ff ffaf 	bl	800121c <LCD_Write_Data>

    /* Driver timing control B */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xEA);
 80012be:	20ea      	movs	r0, #234	; 0xea
 80012c0:	f7ff ff9e 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ffa9 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff ffa6 	bl	800121c <LCD_Write_Data>

    /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xB1);
 80012d0:	20b1      	movs	r0, #177	; 0xb1
 80012d2:	f7ff ff95 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ffa0 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x1B);
 80012dc:	201b      	movs	r0, #27
 80012de:	f7ff ff9d 	bl	800121c <LCD_Write_Data>

    /*  Display Function Control (B6h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xB6);
 80012e2:	20b6      	movs	r0, #182	; 0xb6
 80012e4:	f7ff ff8c 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x0A);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f7ff ff97 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0xA2);
 80012ee:	20a2      	movs	r0, #162	; 0xa2
 80012f0:	f7ff ff94 	bl	800121c <LCD_Write_Data>

    /* Power Control 1 (C0h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xC0);
 80012f4:	20c0      	movs	r0, #192	; 0xc0
 80012f6:	f7ff ff83 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x35);
 80012fa:	2035      	movs	r0, #53	; 0x35
 80012fc:	f7ff ff8e 	bl	800121c <LCD_Write_Data>

    /* Power Control 2 (C1h) */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0xC1);
 8001300:	20c1      	movs	r0, #193	; 0xc1
 8001302:	f7ff ff7d 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x11);
 8001306:	2011      	movs	r0, #17
 8001308:	f7ff ff88 	bl	800121c <LCD_Write_Data>

    /* VCOM Control 1 (C5h) */
    LCD_Write_Cmd(0xC5);
 800130c:	20c5      	movs	r0, #197	; 0xc5
 800130e:	f7ff ff77 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x45);
 8001312:	2045      	movs	r0, #69	; 0x45
 8001314:	f7ff ff82 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x45);
 8001318:	2045      	movs	r0, #69	; 0x45
 800131a:	f7ff ff7f 	bl	800121c <LCD_Write_Data>

    /*  VCOM Control 2 (C7h)  */
    LCD_Write_Cmd(0xC7);
 800131e:	20c7      	movs	r0, #199	; 0xc7
 8001320:	f7ff ff6e 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0xA2);
 8001324:	20a2      	movs	r0, #162	; 0xa2
 8001326:	f7ff ff79 	bl	800121c <LCD_Write_Data>

    /* Enable 3G (F2h) */
    LCD_Write_Cmd(0xF2);
 800132a:	20f2      	movs	r0, #242	; 0xf2
 800132c:	f7ff ff68 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff73 	bl	800121c <LCD_Write_Data>

    /* Gamma Set (26h) */
    LCD_Write_Cmd(0x26);
 8001336:	2026      	movs	r0, #38	; 0x26
 8001338:	f7ff ff62 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x01);
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ff6d 	bl	800121c <LCD_Write_Data>
    DEBUG_DELAY ();

    /* Positive Gamma Correction */
    LCD_Write_Cmd(0xE0); //Set Gamma
 8001342:	20e0      	movs	r0, #224	; 0xe0
 8001344:	f7ff ff5c 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff ff67 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x26);
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f7ff ff64 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x24);
 8001354:	2024      	movs	r0, #36	; 0x24
 8001356:	f7ff ff61 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x0B);
 800135a:	200b      	movs	r0, #11
 800135c:	f7ff ff5e 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001360:	200e      	movs	r0, #14
 8001362:	f7ff ff5b 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001366:	2009      	movs	r0, #9
 8001368:	f7ff ff58 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x54);
 800136c:	2054      	movs	r0, #84	; 0x54
 800136e:	f7ff ff55 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0xA8);
 8001372:	20a8      	movs	r0, #168	; 0xa8
 8001374:	f7ff ff52 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x46);
 8001378:	2046      	movs	r0, #70	; 0x46
 800137a:	f7ff ff4f 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 800137e:	200c      	movs	r0, #12
 8001380:	f7ff ff4c 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x17);
 8001384:	2017      	movs	r0, #23
 8001386:	f7ff ff49 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x09);
 800138a:	2009      	movs	r0, #9
 800138c:	f7ff ff46 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001390:	200f      	movs	r0, #15
 8001392:	f7ff ff43 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001396:	2007      	movs	r0, #7
 8001398:	f7ff ff40 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff3d 	bl	800121c <LCD_Write_Data>

    /* Negative Gamma Correction (E1h) */
    LCD_Write_Cmd(0XE1); //Set Gamma
 80013a2:	20e1      	movs	r0, #225	; 0xe1
 80013a4:	f7ff ff2c 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ff37 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x19);
 80013ae:	2019      	movs	r0, #25
 80013b0:	f7ff ff34 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x1B);
 80013b4:	201b      	movs	r0, #27
 80013b6:	f7ff ff31 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x04);
 80013ba:	2004      	movs	r0, #4
 80013bc:	f7ff ff2e 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x10);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f7ff ff2b 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f7ff ff28 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x2A);
 80013cc:	202a      	movs	r0, #42	; 0x2a
 80013ce:	f7ff ff25 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x47);
 80013d2:	2047      	movs	r0, #71	; 0x47
 80013d4:	f7ff ff22 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x39);
 80013d8:	2039      	movs	r0, #57	; 0x39
 80013da:	f7ff ff1f 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80013de:	2003      	movs	r0, #3
 80013e0:	f7ff ff1c 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x06);
 80013e4:	2006      	movs	r0, #6
 80013e6:	f7ff ff19 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x06);
 80013ea:	2006      	movs	r0, #6
 80013ec:	f7ff ff16 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x30);
 80013f0:	2030      	movs	r0, #48	; 0x30
 80013f2:	f7ff ff13 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x38);
 80013f6:	2038      	movs	r0, #56	; 0x38
 80013f8:	f7ff ff10 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 80013fc:	200f      	movs	r0, #15
 80013fe:	f7ff ff0d 	bl	800121c <LCD_Write_Data>

    /* memory access control set */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0x36);
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f7ff fefc 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0xC8);
 8001408:	20c8      	movs	r0, #200	; 0xc8
 800140a:	f7ff ff07 	bl	800121c <LCD_Write_Data>
    DEBUG_DELAY ();

    /* column address control set */
    LCD_Write_Cmd(CMD_Set_COLUMN);
 800140e:	202a      	movs	r0, #42	; 0x2a
 8001410:	f7ff fef6 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff01 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fefe 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fefb 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0xEF);
 8001426:	20ef      	movs	r0, #239	; 0xef
 8001428:	f7ff fef8 	bl	800121c <LCD_Write_Data>

    /* page address control set */
    DEBUG_DELAY ();
    LCD_Write_Cmd(CMD_Set_PAGE);
 800142c:	202b      	movs	r0, #43	; 0x2b
 800142e:	f7ff fee7 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fef2 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff feef 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x01);
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff feec 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(0x3F);
 8001444:	203f      	movs	r0, #63	; 0x3f
 8001446:	f7ff fee9 	bl	800121c <LCD_Write_Data>

    /*  Pixel Format Set (3Ah)  */
    DEBUG_DELAY ();
    LCD_Write_Cmd(0x3a);
 800144a:	203a      	movs	r0, #58	; 0x3a
 800144c:	f7ff fed8 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(0x55);
 8001450:	2055      	movs	r0, #85	; 0x55
 8001452:	f7ff fee3 	bl	800121c <LCD_Write_Data>

    /* Sleep Out (11h)  */
    LCD_Write_Cmd(0x11);
 8001456:	2011      	movs	r0, #17
 8001458:	f7ff fed2 	bl	8001200 <LCD_Write_Cmd>
    Delay(0xAFFf << 2);
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <LCD_REG_Config+0x230>)
 800145e:	f7ff fe73 	bl	8001148 <Delay>
    DEBUG_DELAY ();

    /* Display ON (29h) */
    LCD_Write_Cmd(0x29);
 8001462:	2029      	movs	r0, #41	; 0x29
 8001464:	f7ff fecc 	bl	8001200 <LCD_Write_Cmd>

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0002bffc 	.word	0x0002bffc

08001470 <LCD_OpenWindow>:


void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	80fb      	strh	r3, [r7, #6]
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]
 800148a:	4613      	mov	r3, r2
 800148c:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(CMD_Set_COLUMN);
 800148e:	202a      	movs	r0, #42	; 0x2a
 8001490:	f7ff feb6 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(usCOLUMN >> 8);
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff febe 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(usCOLUMN & 0xff);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff feb8 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4413      	add	r3, r2
 80014b2:	3b01      	subs	r3, #1
 80014b4:	121b      	asrs	r3, r3, #8
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff feaf 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fea4 	bl	800121c <LCD_Write_Data>

    LCD_Write_Cmd(CMD_Set_PAGE);
 80014d4:	202b      	movs	r0, #43	; 0x2b
 80014d6:	f7ff fe93 	bl	8001200 <LCD_Write_Cmd>
    LCD_Write_Data(usPAGE >> 8);
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe9b 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data(usPAGE & 0xff);
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe95 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	883b      	ldrh	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	3b01      	subs	r3, #1
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe8c 	bl	800121c <LCD_Write_Data>
    LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	883b      	ldrh	r3, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe81 	bl	800121c <LCD_Write_Data>

}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}

08001522 <LCD_FillColor>:


void LCD_FillColor(uint32_t usPoint, uint16_t usColor) {
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]
    uint32_t i = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]

    /* memory write */
    LCD_Write_Cmd(CMD_SetPixel);
 8001532:	202c      	movs	r0, #44	; 0x2c
 8001534:	f7ff fe64 	bl	8001200 <LCD_Write_Cmd>

    for (i = 0; i < usPoint; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e006      	b.n	800154c <LCD_FillColor+0x2a>
        LCD_Write_Data(usColor);
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe6b 	bl	800121c <LCD_Write_Data>
    for (i = 0; i < usPoint; i++)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f4      	bcc.n	800153e <LCD_FillColor+0x1c>

}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <LCD_Clear>:


void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor) {
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	4604      	mov	r4, r0
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4623      	mov	r3, r4
 800156e:	80fb      	strh	r3, [r7, #6]
 8001570:	4603      	mov	r3, r0
 8001572:	80bb      	strh	r3, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	803b      	strh	r3, [r7, #0]
    LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	88b9      	ldrh	r1, [r7, #4]
 8001582:	88f8      	ldrh	r0, [r7, #6]
 8001584:	f7ff ff74 	bl	8001470 <LCD_OpenWindow>

    LCD_FillColor(usWidth * usHeight, usColor);
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	883a      	ldrh	r2, [r7, #0]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	461a      	mov	r2, r3
 8001592:	8b3b      	ldrh	r3, [r7, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff ffc3 	bl	8001522 <LCD_FillColor>

}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <LCD_DrawChar>:


}


void LCD_DrawChar(uint16_t usC, uint16_t usP, const char cChar) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	460b      	mov	r3, r1
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	70fb      	strb	r3, [r7, #3]
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;


    ucRelativePositon = cChar - ' ';
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	3b20      	subs	r3, #32
 80015ba:	733b      	strb	r3, [r7, #12]

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80015bc:	88b9      	ldrh	r1, [r7, #4]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	2310      	movs	r3, #16
 80015c2:	2208      	movs	r2, #8
 80015c4:	f7ff ff54 	bl	8001470 <LCD_OpenWindow>

    LCD_Write_Cmd(CMD_SetPixel);
 80015c8:	202c      	movs	r0, #44	; 0x2c
 80015ca:	f7ff fe19 	bl	8001200 <LCD_Write_Cmd>

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	e023      	b.n	800161c <LCD_DrawChar+0x78>
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 80015d4:	7b3a      	ldrb	r2, [r7, #12]
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	4914      	ldr	r1, [pc, #80]	; (800162c <LCD_DrawChar+0x88>)
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	440a      	add	r2, r1
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	73fb      	strb	r3, [r7, #15]

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	737b      	strb	r3, [r7, #13]
 80015e8:	e012      	b.n	8001610 <LCD_DrawChar+0x6c>
            if (ucTemp & 0x01)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <LCD_DrawChar+0x58>
                LCD_Write_Data(0x001F);
 80015f4:	201f      	movs	r0, #31
 80015f6:	f7ff fe11 	bl	800121c <LCD_Write_Data>
 80015fa:	e003      	b.n	8001604 <LCD_DrawChar+0x60>

            else
                LCD_Write_Data(0xFFFF);
 80015fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001600:	f7ff fe0c 	bl	800121c <LCD_Write_Data>

            ucTemp >>= 1;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	3301      	adds	r3, #1
 800160e:	737b      	strb	r3, [r7, #13]
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d9e9      	bls.n	80015ea <LCD_DrawChar+0x46>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	3301      	adds	r3, #1
 800161a:	73bb      	strb	r3, [r7, #14]
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d9d8      	bls.n	80015d4 <LCD_DrawChar+0x30>

        }

    }

}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	080099cc 	.word	0x080099cc

08001630 <LCD_DrawString>:


void LCD_DrawString(uint16_t usC, uint16_t usP, const char *pStr) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	80bb      	strh	r3, [r7, #4]
    while (*pStr != '\0') {
 8001640:	e01c      	b.n	800167c <LCD_DrawString+0x4c>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2be8      	cmp	r3, #232	; 0xe8
 8001646:	d904      	bls.n	8001652 <LCD_DrawString+0x22>
            usC = LCD_DispWindow_Start_COLUMN;
 8001648:	2300      	movs	r3, #0
 800164a:	80fb      	strh	r3, [r7, #6]
            usP += HEIGHT_EN_CHAR;
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	3310      	adds	r3, #16
 8001650:	80bb      	strh	r3, [r7, #4]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001658:	d903      	bls.n	8001662 <LCD_DrawString+0x32>
            usC = LCD_DispWindow_Start_COLUMN;
 800165a:	2300      	movs	r3, #0
 800165c:	80fb      	strh	r3, [r7, #6]
            usP = LCD_DispWindow_Start_PAGE;
 800165e:	2300      	movs	r3, #0
 8001660:	80bb      	strh	r3, [r7, #4]
        }

        LCD_DrawChar(usC, usP, *pStr);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	88b9      	ldrh	r1, [r7, #4]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff9a 	bl	80015a4 <LCD_DrawChar>

        pStr++;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	603b      	str	r3, [r7, #0]

        usC += WIDTH_EN_CHAR;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	3308      	adds	r3, #8
 800167a:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0') {
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1de      	bne.n	8001642 <LCD_DrawString+0x12>

    }

}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <LCD_DrawDot>:


void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor) {
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	460b      	mov	r3, r1
 800169a:	80bb      	strh	r3, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	807b      	strh	r3, [r7, #2]
    if ((usCOLUMN < LCD_DispWindow_COLUMN) && (usPAGE < LCD_DispWindow_PAGE))
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2bef      	cmp	r3, #239	; 0xef
 80016a4:	d809      	bhi.n	80016ba <LCD_DrawDot+0x2c>
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016ac:	d205      	bcs.n	80016ba <LCD_DrawDot+0x2c>
        LCD_OpenWindow(usCOLUMN, usPAGE, 1, 1);
 80016ae:	88b9      	ldrh	r1, [r7, #4]
 80016b0:	88f8      	ldrh	r0, [r7, #6]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2201      	movs	r2, #1
 80016b6:	f7ff fedb 	bl	8001470 <LCD_OpenWindow>
    LCD_FillColor(1, usColor);
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	4619      	mov	r1, r3
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff2f 	bl	8001522 <LCD_FillColor>

}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <LCD_DrawEllipse>:

void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
    float xda, ydb, result;

    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	82fb      	strh	r3, [r7, #22]
 80016f4:	e06e      	b.n	80017d4 <LCD_DrawEllipse+0x108>
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	883b      	ldrh	r3, [r7, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	82bb      	strh	r3, [r7, #20]
 8001700:	e05b      	b.n	80017ba <LCD_DrawEllipse+0xee>
            if (col < 0 || col >= LCD_Default_Max_COLUMN || pag < 0 || pag >= LCD_Default_Max_PAGE) break;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db5e      	blt.n	80017c8 <LCD_DrawEllipse+0xfc>
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	2bef      	cmp	r3, #239	; 0xef
 8001710:	dc5a      	bgt.n	80017c8 <LCD_DrawEllipse+0xfc>
 8001712:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db56      	blt.n	80017c8 <LCD_DrawEllipse+0xfc>
 800171a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800171e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001722:	da51      	bge.n	80017c8 <LCD_DrawEllipse+0xfc>

            xda = (col - usC) / (float) SR;
 8001724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff faf1 	bl	8000d14 <__aeabi_i2f>
 8001732:	4604      	mov	r4, r0
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fae8 	bl	8000d0c <__aeabi_ui2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fbef 	bl	8000f24 <__aeabi_fdiv>
 8001746:	4603      	mov	r3, r0
 8001748:	613b      	str	r3, [r7, #16]
            ydb = (pag - usP) / (float) LR;
 800174a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fade 	bl	8000d14 <__aeabi_i2f>
 8001758:	4604      	mov	r4, r0
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fad5 	bl	8000d0c <__aeabi_ui2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fbdc 	bl	8000f24 <__aeabi_fdiv>
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
            result = xda * xda + ydb * ydb;
 8001770:	6939      	ldr	r1, [r7, #16]
 8001772:	6938      	ldr	r0, [r7, #16]
 8001774:	f7ff fb22 	bl	8000dbc <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	461c      	mov	r4, r3
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fb1c 	bl	8000dbc <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fa0f 	bl	8000bac <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	60bb      	str	r3, [r7, #8]

            if (result <= 1) {
 8001792:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001796:	68b8      	ldr	r0, [r7, #8]
 8001798:	f7ff fcb8 	bl	800110c <__aeabi_fcmple>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <LCD_DrawEllipse+0xe2>
                LCD_DrawDot(col, pag, usColor);
 80017a2:	8afb      	ldrh	r3, [r7, #22]
 80017a4:	8ab9      	ldrh	r1, [r7, #20]
 80017a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff70 	bl	800168e <LCD_DrawDot>
        for (int16_t pag = usP - LR; pag <= usP + LR; pag++) {
 80017ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	82bb      	strh	r3, [r7, #20]
 80017ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017be:	88b9      	ldrh	r1, [r7, #4]
 80017c0:	883b      	ldrh	r3, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dd9c      	ble.n	8001702 <LCD_DrawEllipse+0x36>
    for (int16_t col = usC - SR; col <= usC + SR; col++) {
 80017c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	82fb      	strh	r3, [r7, #22]
 80017d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d8:	88f9      	ldrh	r1, [r7, #6]
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	440b      	add	r3, r1
 80017de:	429a      	cmp	r2, r3
 80017e0:	dd89      	ble.n	80016f6 <LCD_DrawEllipse+0x2a>
            }
        }
    }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <LCD_DrawChar_Color>:

void LCD_DrawChar_Color(uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background,
                        uint16_t usColor_Foreground) {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	4603      	mov	r3, r0
 8001800:	80bb      	strh	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
 8001806:	4613      	mov	r3, r2
 8001808:	803b      	strh	r3, [r7, #0]
    uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

    ucRelativePositon = cChar - ' ';
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	3b20      	subs	r3, #32
 800180e:	733b      	strb	r3, [r7, #12]

    LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 8001810:	88b9      	ldrh	r1, [r7, #4]
 8001812:	88f8      	ldrh	r0, [r7, #6]
 8001814:	2310      	movs	r3, #16
 8001816:	2208      	movs	r2, #8
 8001818:	f7ff fe2a 	bl	8001470 <LCD_OpenWindow>

    LCD_Write_Cmd(CMD_SetPixel);
 800181c:	202c      	movs	r0, #44	; 0x2c
 800181e:	f7ff fcef 	bl	8001200 <LCD_Write_Cmd>

    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 8001822:	2300      	movs	r3, #0
 8001824:	73bb      	strb	r3, [r7, #14]
 8001826:	e024      	b.n	8001872 <LCD_DrawChar_Color+0x86>
        ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8001828:	7b3a      	ldrb	r2, [r7, #12]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <LCD_DrawChar_Color+0x98>)
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	440a      	add	r2, r1
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73fb      	strb	r3, [r7, #15]

        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001838:	2300      	movs	r3, #0
 800183a:	737b      	strb	r3, [r7, #13]
 800183c:	e013      	b.n	8001866 <LCD_DrawChar_Color+0x7a>
            if (ucTemp & 0x01)
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <LCD_DrawChar_Color+0x66>
                LCD_Write_Data(usColor_Foreground);
 8001848:	8c3b      	ldrh	r3, [r7, #32]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fce6 	bl	800121c <LCD_Write_Data>
 8001850:	e003      	b.n	800185a <LCD_DrawChar_Color+0x6e>

            else
                LCD_Write_Data(usColor_Background);
 8001852:	883b      	ldrh	r3, [r7, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fce1 	bl	800121c <LCD_Write_Data>

            ucTemp >>= 1;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
        for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++) {
 8001860:	7b7b      	ldrb	r3, [r7, #13]
 8001862:	3301      	adds	r3, #1
 8001864:	737b      	strb	r3, [r7, #13]
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	2b07      	cmp	r3, #7
 800186a:	d9e8      	bls.n	800183e <LCD_DrawChar_Color+0x52>
    for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++) {
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	3301      	adds	r3, #1
 8001870:	73bb      	strb	r3, [r7, #14]
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d9d7      	bls.n	8001828 <LCD_DrawChar_Color+0x3c>

        }

    }

}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	080099cc 	.word	0x080099cc

08001888 <LCD_DrawCross>:

void LCD_DrawCross(uint16_t usX, uint16_t usY) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
    LCD_Clear(usX - 10, usY, 20, 1, WHITE);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	3b0a      	subs	r3, #10
 800189c:	b298      	uxth	r0, r3
 800189e:	88b9      	ldrh	r1, [r7, #4]
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	2214      	movs	r2, #20
 80018aa:	f7ff fe58 	bl	800155e <LCD_Clear>
    LCD_Clear(usX, usY - 10, 1, 20, WHITE);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	3b0a      	subs	r3, #10
 80018b2:	b299      	uxth	r1, r3
 80018b4:	88f8      	ldrh	r0, [r7, #6]
 80018b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2314      	movs	r3, #20
 80018be:	2201      	movs	r2, #1
 80018c0:	f7ff fe4d 	bl	800155e <LCD_Clear>

}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LCD_DrawString_Color>:


void LCD_DrawString_Color(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                          uint16_t usColor_Foreground) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	460b      	mov	r3, r1
 80018dc:	81bb      	strh	r3, [r7, #12]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0') {
 80018e2:	e01f      	b.n	8001924 <LCD_DrawString_Color+0x58>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	2be8      	cmp	r3, #232	; 0xe8
 80018e8:	d904      	bls.n	80018f4 <LCD_DrawString_Color+0x28>
            usC = LCD_DispWindow_Start_COLUMN;
 80018ea:	2300      	movs	r3, #0
 80018ec:	81fb      	strh	r3, [r7, #14]
            usP += HEIGHT_EN_CHAR;
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	3310      	adds	r3, #16
 80018f2:	81bb      	strh	r3, [r7, #12]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80018fa:	d903      	bls.n	8001904 <LCD_DrawString_Color+0x38>
            usC = LCD_DispWindow_Start_COLUMN;
 80018fc:	2300      	movs	r3, #0
 80018fe:	81fb      	strh	r3, [r7, #14]
            usP = LCD_DispWindow_Start_PAGE;
 8001900:	2300      	movs	r3, #0
 8001902:	81bb      	strh	r3, [r7, #12]
        }

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	88fc      	ldrh	r4, [r7, #6]
 800190a:	89b9      	ldrh	r1, [r7, #12]
 800190c:	89f8      	ldrh	r0, [r7, #14]
 800190e:	8c3b      	ldrh	r3, [r7, #32]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4623      	mov	r3, r4
 8001914:	f7ff ff6a 	bl	80017ec <LCD_DrawChar_Color>

        pStr++;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]

        usC += WIDTH_EN_CHAR;
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	3308      	adds	r3, #8
 8001922:	81fb      	strh	r3, [r7, #14]
    while (*pStr != '\0') {
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1db      	bne.n	80018e4 <LCD_DrawString_Color+0x18>

    }

}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}

08001936 <LCD_DrawString_Color_With_Delay>:

void LCD_DrawString_Color_With_Delay(uint16_t usC, uint16_t usP, const char *pStr, uint16_t usColor_Background,
                                     uint16_t usColor_Foreground, uint8_t delayEachChar) {
 8001936:	b590      	push	{r4, r7, lr}
 8001938:	b087      	sub	sp, #28
 800193a:	af02      	add	r7, sp, #8
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	461a      	mov	r2, r3
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
 8001944:	460b      	mov	r3, r1
 8001946:	81bb      	strh	r3, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0') {
 800194c:	e024      	b.n	8001998 <LCD_DrawString_Color_With_Delay+0x62>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	2be8      	cmp	r3, #232	; 0xe8
 8001952:	d904      	bls.n	800195e <LCD_DrawString_Color_With_Delay+0x28>
            usC = LCD_DispWindow_Start_COLUMN;
 8001954:	2300      	movs	r3, #0
 8001956:	81fb      	strh	r3, [r7, #14]
            usP += HEIGHT_EN_CHAR;
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	3310      	adds	r3, #16
 800195c:	81bb      	strh	r3, [r7, #12]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 800195e:	89bb      	ldrh	r3, [r7, #12]
 8001960:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001964:	d903      	bls.n	800196e <LCD_DrawString_Color_With_Delay+0x38>
            usC = LCD_DispWindow_Start_COLUMN;
 8001966:	2300      	movs	r3, #0
 8001968:	81fb      	strh	r3, [r7, #14]
            usP = LCD_DispWindow_Start_PAGE;
 800196a:	2300      	movs	r3, #0
 800196c:	81bb      	strh	r3, [r7, #12]
        }

        LCD_DrawChar_Color(usC, usP, *pStr, usColor_Background, usColor_Foreground);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	88fc      	ldrh	r4, [r7, #6]
 8001974:	89b9      	ldrh	r1, [r7, #12]
 8001976:	89f8      	ldrh	r0, [r7, #14]
 8001978:	8c3b      	ldrh	r3, [r7, #32]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4623      	mov	r3, r4
 800197e:	f7ff ff35 	bl	80017ec <LCD_DrawChar_Color>

        pStr++;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3301      	adds	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]

        usC += WIDTH_EN_CHAR;
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	3308      	adds	r3, #8
 800198c:	81fb      	strh	r3, [r7, #14]
        HAL_Delay(delayEachChar);
 800198e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001992:	4618      	mov	r0, r3
 8001994:	f002 f93a 	bl	8003c0c <HAL_Delay>
    while (*pStr != '\0') {
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1d6      	bne.n	800194e <LCD_DrawString_Color_With_Delay+0x18>
    }

}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
	...

080019ac <LCD_GramScan>:


void LCD_GramScan(uint8_t ucOption) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    switch (ucOption) {
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	f200 80a0 	bhi.w	8001b00 <LCD_GramScan+0x154>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <LCD_GramScan+0x1c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	08001a23 	.word	0x08001a23
 80019d0:	08001a6d 	.word	0x08001a6d
 80019d4:	08001ab7 	.word	0x08001ab7

//		____ x(240)
//	 |
//	 |	y(320)

            LCD_Write_Cmd(0x36);
 80019d8:	2036      	movs	r0, #54	; 0x36
 80019da:	f7ff fc11 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0xC8);
 80019de:	20c8      	movs	r0, #200	; 0xc8
 80019e0:	f7ff fc1c 	bl	800121c <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 80019e4:	202a      	movs	r0, #42	; 0x2a
 80019e6:	f7ff fc0b 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);    /* x start */
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fc16 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fc13 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);  /* x end */
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fc10 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 80019fc:	20ef      	movs	r0, #239	; 0xef
 80019fe:	f7ff fc0d 	bl	800121c <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 8001a02:	202b      	movs	r0, #43	; 0x2b
 8001a04:	f7ff fbfc 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);    /* y start */
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fc07 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fc04 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x01);    /* y end */
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fc01 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 8001a1a:	203f      	movs	r0, #63	; 0x3f
 8001a1c:	f7ff fbfe 	bl	800121c <LCD_Write_Data>

            break;
 8001a20:	e06e      	b.n	8001b00 <LCD_GramScan+0x154>

//		|x(320)
//		|
//		|___ y(240)

            LCD_Write_Cmd(0x36);
 8001a22:	2036      	movs	r0, #54	; 0x36
 8001a24:	f7ff fbec 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x68);
 8001a28:	2068      	movs	r0, #104	; 0x68
 8001a2a:	f7ff fbf7 	bl	800121c <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 8001a2e:	202a      	movs	r0, #42	; 0x2a
 8001a30:	f7ff fbe6 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fbf1 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fbee 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x01);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fbeb 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 8001a46:	203f      	movs	r0, #63	; 0x3f
 8001a48:	f7ff fbe8 	bl	800121c <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 8001a4c:	202b      	movs	r0, #43	; 0x2b
 8001a4e:	f7ff fbd7 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fbe2 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fbdf 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fbdc 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 8001a64:	20ef      	movs	r0, #239	; 0xef
 8001a66:	f7ff fbd9 	bl	800121c <LCD_Write_Data>

            break;
 8001a6a:	e049      	b.n	8001b00 <LCD_GramScan+0x154>

//		           |x(320)
//		           |
//		y(240) ____|

            LCD_Write_Cmd(0x36);
 8001a6c:	2036      	movs	r0, #54	; 0x36
 8001a6e:	f7ff fbc7 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x28);
 8001a72:	2028      	movs	r0, #40	; 0x28
 8001a74:	f7ff fbd2 	bl	800121c <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 8001a78:	202a      	movs	r0, #42	; 0x2a
 8001a7a:	f7ff fbc1 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fbcc 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fbc9 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x01);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fbc6 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 8001a90:	203f      	movs	r0, #63	; 0x3f
 8001a92:	f7ff fbc3 	bl	800121c <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 8001a96:	202b      	movs	r0, #43	; 0x2b
 8001a98:	f7ff fbb2 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fbbd 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fbba 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fbb7 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 8001aae:	20ef      	movs	r0, #239	; 0xef
 8001ab0:	f7ff fbb4 	bl	800121c <LCD_Write_Data>

            break;
 8001ab4:	e024      	b.n	8001b00 <LCD_GramScan+0x154>

//		|y(320)
//		|
//		|___ x(240)

            LCD_Write_Cmd(0x36);
 8001ab6:	2036      	movs	r0, #54	; 0x36
 8001ab8:	f7ff fba2 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x48);
 8001abc:	2048      	movs	r0, #72	; 0x48
 8001abe:	f7ff fbad 	bl	800121c <LCD_Write_Data>
            LCD_Write_Cmd(0x2A);
 8001ac2:	202a      	movs	r0, #42	; 0x2a
 8001ac4:	f7ff fb9c 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fba7 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fba4 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fba1 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0xEF);
 8001ada:	20ef      	movs	r0, #239	; 0xef
 8001adc:	f7ff fb9e 	bl	800121c <LCD_Write_Data>

            LCD_Write_Cmd(0x2B);
 8001ae0:	202b      	movs	r0, #43	; 0x2b
 8001ae2:	f7ff fb8d 	bl	8001200 <LCD_Write_Cmd>
            LCD_Write_Data(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fb98 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x00);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fb95 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x01);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fb92 	bl	800121c <LCD_Write_Data>
            LCD_Write_Data(0x3F);
 8001af8:	203f      	movs	r0, #63	; 0x3f
 8001afa:	f7ff fb8f 	bl	800121c <LCD_Write_Data>

            break;
 8001afe:	bf00      	nop

    }


    /* write gram start */
    LCD_Write_Cmd(0x2C);
 8001b00:	202c      	movs	r0, #44	; 0x2c
 8001b02:	f7ff fb7d 	bl	8001200 <LCD_Write_Cmd>


}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop

08001b10 <Check_touchkey>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Check_touchkey() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
    strType_XPT2046_Coordinate strDisplayCoordinate;
    if (XPT2046_Get_TouchedPoint(&strDisplayCoordinate, &strXPT2046_TouchPara)) {
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4921      	ldr	r1, [pc, #132]	; (8001ba0 <Check_touchkey+0x90>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 ff66 	bl	80039ec <XPT2046_Get_TouchedPoint>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d037      	beq.n	8001b96 <Check_touchkey+0x86>
        if (currentPage == home) {
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <Check_touchkey+0x94>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11f      	bne.n	8001b6e <Check_touchkey+0x5e>
            if (strDisplayCoordinate.y > 210 && strDisplayCoordinate.y < 250) {
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2bd2      	cmp	r3, #210	; 0xd2
 8001b32:	d930      	bls.n	8001b96 <Check_touchkey+0x86>
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	2bf9      	cmp	r3, #249	; 0xf9
 8001b38:	d82d      	bhi.n	8001b96 <Check_touchkey+0x86>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 100) {
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	2b14      	cmp	r3, #20
 8001b3e:	d909      	bls.n	8001b54 <Check_touchkey+0x44>
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	2b63      	cmp	r3, #99	; 0x63
 8001b44:	d806      	bhi.n	8001b54 <Check_touchkey+0x44>
                    currentPage = weight;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <Check_touchkey+0x94>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <Check_touchkey+0x98>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
                    changingPage = 1;
                }
            }
        }
    }
}
 8001b52:	e020      	b.n	8001b96 <Check_touchkey+0x86>
                } else if (strDisplayCoordinate.x > 130 && strDisplayCoordinate.x < 210) {
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	2b82      	cmp	r3, #130	; 0x82
 8001b58:	d91d      	bls.n	8001b96 <Check_touchkey+0x86>
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	2bd1      	cmp	r3, #209	; 0xd1
 8001b5e:	d81a      	bhi.n	8001b96 <Check_touchkey+0x86>
                    currentPage = accelerometer;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <Check_touchkey+0x94>)
 8001b62:	2202      	movs	r2, #2
 8001b64:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <Check_touchkey+0x98>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	e013      	b.n	8001b96 <Check_touchkey+0x86>
            if (strDisplayCoordinate.y > 267 && strDisplayCoordinate.y < 293) {
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001b74:	d30f      	bcc.n	8001b96 <Check_touchkey+0x86>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 8001b7c:	d80b      	bhi.n	8001b96 <Check_touchkey+0x86>
                if (strDisplayCoordinate.x > 20 && strDisplayCoordinate.x < 150) {
 8001b7e:	88bb      	ldrh	r3, [r7, #4]
 8001b80:	2b14      	cmp	r3, #20
 8001b82:	d908      	bls.n	8001b96 <Check_touchkey+0x86>
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	2b95      	cmp	r3, #149	; 0x95
 8001b88:	d805      	bhi.n	8001b96 <Check_touchkey+0x86>
                    currentPage = home;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <Check_touchkey+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
                    changingPage = 1;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <Check_touchkey+0x98>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	200002f8 	.word	0x200002f8
 8001ba8:	20000000 	.word	0x20000000

08001bac <combineUint_8ts>:

int16_t combineUint_8ts(uint8_t a, uint8_t b){
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71bb      	strb	r3, [r7, #6]
    return ((0xFFFF & a) << 8) | (0xFFFF & b);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21b      	sxth	r3, r3
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HueToRGB565>:
        return a - b;
    }
    return b - a;
}

uint16_t HueToRGB565(uint8_t hue) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
    uint16_t portion = hue * 6;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	0052      	lsls	r2, r2, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	81fb      	strh	r3, [r7, #14]

    if (portion < 256) { // 0 <= degree < 60
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	2bff      	cmp	r3, #255	; 0xff
 8001bf0:	d81f      	bhi.n	8001c32 <HueToRGB565+0x5e>
        return RED + ((int) (portion / 256.0 * 64) << 5);
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc71 	bl	80004dc <__aeabi_i2d>
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001c00:	f7fe fe00 	bl	8000804 <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HueToRGB565+0x1f4>)
 8001c12:	f7fe fccd 	bl	80005b0 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff77 	bl	8000b10 <__aeabi_d2iz>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	e0c4      	b.n	8001dbc <HueToRGB565+0x1e8>
    } else if (portion < 256 * 2) { // 60 <= degree < 120
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d224      	bcs.n	8001c84 <HueToRGB565+0xb0>
        return (31 - (int) ((portion - 256) / 256.0 * 32) << 11) + GREEN;
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc4b 	bl	80004dc <__aeabi_i2d>
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001c4c:	f7fe fdda 	bl	8000804 <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HueToRGB565+0x1f8>)
 8001c5e:	f7fe fca7 	bl	80005b0 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff51 	bl	8000b10 <__aeabi_d2iz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f1c3 031f 	rsb	r3, r3, #31
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	02db      	lsls	r3, r3, #11
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	e09b      	b.n	8001dbc <HueToRGB565+0x1e8>
    } else if (portion < 256 * 3) { // 120 <= degree < 180
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c8a:	d21f      	bcs.n	8001ccc <HueToRGB565+0xf8>
        return GREEN + (int) ((portion - 256 * 2) / 256.0 * 32);
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc22 	bl	80004dc <__aeabi_i2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001c9e:	f7fe fdb1 	bl	8000804 <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HueToRGB565+0x1f8>)
 8001cb0:	f7fe fc7e 	bl	80005b0 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff28 	bl	8000b10 <__aeabi_d2iz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	e077      	b.n	8001dbc <HueToRGB565+0x1e8>
    } else if (portion < 256 * 4) { // 180 <= degree < 240
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d223      	bcs.n	8001d1c <HueToRGB565+0x148>
        return (63 - (int) ((portion - 256 * 3) / 256.0 * 64) << 5) + BLUE;
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbfe 	bl	80004dc <__aeabi_i2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001ce6:	f7fe fd8d 	bl	8000804 <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HueToRGB565+0x1f4>)
 8001cf8:	f7fe fc5a 	bl	80005b0 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff04 	bl	8000b10 <__aeabi_d2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	331f      	adds	r3, #31
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	e04f      	b.n	8001dbc <HueToRGB565+0x1e8>
    } else if (portion < 256 * 5) { // 240 <= degree < 300
 8001d1c:	89fb      	ldrh	r3, [r7, #14]
 8001d1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d22:	d220      	bcs.n	8001d66 <HueToRGB565+0x192>
        return BLUE + ((int) ((portion - 256 * 4) / 256.0 * 32) << 11);
 8001d24:	89fb      	ldrh	r3, [r7, #14]
 8001d26:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fbd6 	bl	80004dc <__aeabi_i2d>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001d36:	f7fe fd65 	bl	8000804 <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HueToRGB565+0x1f8>)
 8001d48:	f7fe fc32 	bl	80005b0 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe fedc 	bl	8000b10 <__aeabi_d2iz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	02db      	lsls	r3, r3, #11
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	331f      	adds	r3, #31
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	e02a      	b.n	8001dbc <HueToRGB565+0x1e8>
    } else if (portion < 256 * 6) { // 300 <= degree < 360
 8001d66:	89fb      	ldrh	r3, [r7, #14]
 8001d68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001d6c:	d226      	bcs.n	8001dbc <HueToRGB565+0x1e8>
        return (int) (31 - (portion - 256 * 5) / 256.0 * 32) + RED;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbb1 	bl	80004dc <__aeabi_i2d>
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HueToRGB565+0x1f0>)
 8001d80:	f7fe fd40 	bl	8000804 <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HueToRGB565+0x1f8>)
 8001d92:	f7fe fc0d 	bl	80005b0 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <HueToRGB565+0x1fc>)
 8001da0:	f7fe fa4e 	bl	8000240 <__aeabi_dsub>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe feb0 	bl	8000b10 <__aeabi_d2iz>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	e7ff      	b.n	8001dbc <HueToRGB565+0x1e8>
    }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40700000 	.word	0x40700000
 8001dc8:	40500000 	.word	0x40500000
 8001dcc:	40400000 	.word	0x40400000
 8001dd0:	403f0000 	.word	0x403f0000

08001dd4 <getY>:

void getY(uint8_t index, uint8_t delay) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
    if ((index & 0x01) == 0) {
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <getY+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df4:	481a      	ldr	r0, [pc, #104]	; (8001e60 <getY+0x8c>)
 8001df6:	f002 fed0 	bl	8004b9a <HAL_GPIO_WritePin>
 8001dfa:	e005      	b.n	8001e08 <getY+0x34>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e02:	4817      	ldr	r0, [pc, #92]	; (8001e60 <getY+0x8c>)
 8001e04:	f002 fec9 	bl	8004b9a <HAL_GPIO_WritePin>
    }

    if ((index & 0x02) == 0) {
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <getY+0x4c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4811      	ldr	r0, [pc, #68]	; (8001e60 <getY+0x8c>)
 8001e1a:	f002 febe 	bl	8004b9a <HAL_GPIO_WritePin>
 8001e1e:	e005      	b.n	8001e2c <getY+0x58>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <getY+0x8c>)
 8001e28:	f002 feb7 	bl	8004b9a <HAL_GPIO_WritePin>
    }

    if ((index & 0x04) == 0) {
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <getY+0x70>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <getY+0x8c>)
 8001e3e:	f002 feac 	bl	8004b9a <HAL_GPIO_WritePin>
 8001e42:	e005      	b.n	8001e50 <getY+0x7c>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <getY+0x8c>)
 8001e4c:	f002 fea5 	bl	8004b9a <HAL_GPIO_WritePin>
    }

    HAL_Delay(delay);
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 feda 	bl	8003c0c <HAL_Delay>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40011000 	.word	0x40011000

08001e64 <mainPage>:

void mainPage(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
    if (changingPage) {
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <mainPage+0xd0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d05b      	beq.n	8001f2a <mainPage+0xc6>
        changingPage = 0;
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <mainPage+0xd0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
        currentPage = home;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <mainPage+0xd4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e86:	22f0      	movs	r2, #240	; 0xf0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fb67 	bl	800155e <LCD_Clear>
        char *output_text = "Welcome to the smart suitcase system";
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <mainPage+0xd8>)
 8001e92:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001e94:	230a      	movs	r3, #10
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	231f      	movs	r3, #31
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	2128      	movs	r1, #40	; 0x28
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fd46 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(100);
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f001 feae 	bl	8003c0c <HAL_Delay>
        output_text = "Please choose an option below.";
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <mainPage+0xdc>)
 8001eb2:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color(0, 100, output_text, BLACK, WHITE);
 8001eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	2164      	movs	r1, #100	; 0x64
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fd03 	bl	80018cc <LCD_DrawString_Color>
        HAL_Delay(200);
 8001ec6:	20c8      	movs	r0, #200	; 0xc8
 8001ec8:	f001 fea0 	bl	8003c0c <HAL_Delay>
        LCD_Clear(20, 230, 80, 40, CYAN); //WEIGHT BOX: 20 ~ 100 / 210 ~ 250
 8001ecc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2328      	movs	r3, #40	; 0x28
 8001ed4:	2250      	movs	r2, #80	; 0x50
 8001ed6:	21e6      	movs	r1, #230	; 0xe6
 8001ed8:	2014      	movs	r0, #20
 8001eda:	f7ff fb40 	bl	800155e <LCD_Clear>
        output_text = "WEIGHT";
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <mainPage+0xe0>)
 8001ee0:	607b      	str	r3, [r7, #4]
        LCD_DrawString_Color_With_Delay(35, 242, output_text, CYAN, BLACK, 15);
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	21f2      	movs	r1, #242	; 0xf2
 8001ef2:	2023      	movs	r0, #35	; 0x23
 8001ef4:	f7ff fd1f 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(200);
 8001ef8:	20c8      	movs	r0, #200	; 0xc8
 8001efa:	f001 fe87 	bl	8003c0c <HAL_Delay>
        output_text = "ACCEL.";
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <mainPage+0xe4>)
 8001f00:	607b      	str	r3, [r7, #4]
        LCD_Clear(130, 230, 80, 40, YELLOW); //ACCELE BOX: 130 ~ 210 / 210 ~ 250
 8001f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2328      	movs	r3, #40	; 0x28
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	21e6      	movs	r1, #230	; 0xe6
 8001f0e:	2082      	movs	r0, #130	; 0x82
 8001f10:	f7ff fb25 	bl	800155e <LCD_Clear>
        LCD_DrawString_Color_With_Delay(150, 242, output_text, YELLOW, BLACK, 15);
 8001f14:	230f      	movs	r3, #15
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	21f2      	movs	r1, #242	; 0xf2
 8001f24:	2096      	movs	r0, #150	; 0x96
 8001f26:	f7ff fd06 	bl	8001936 <LCD_DrawString_Color_With_Delay>
    }
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000
 8001f38:	200002f8 	.word	0x200002f8
 8001f3c:	080097f0 	.word	0x080097f0
 8001f40:	08009818 	.word	0x08009818
 8001f44:	08009838 	.word	0x08009838
 8001f48:	08009840 	.word	0x08009840

08001f4c <drawBackToHome>:

void drawBackToHome() {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af02      	add	r7, sp, #8
    const char *output_text = "Return to Home";
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <drawBackToHome+0x44>)
 8001f54:	607b      	str	r3, [r7, #4]
    LCD_Clear(20, 280, 130, 25, CYAN); // RETURN HOME BOX: 20 ~ 150 / 267 ~ 293
 8001f56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2319      	movs	r3, #25
 8001f5e:	2282      	movs	r2, #130	; 0x82
 8001f60:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f64:	2014      	movs	r0, #20
 8001f66:	f7ff fafa 	bl	800155e <LCD_Clear>
    LCD_DrawString_Color_With_Delay(30, 285, output_text, CYAN, BLACK, 10);
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	f240 111d 	movw	r1, #285	; 0x11d
 8001f7c:	201e      	movs	r0, #30
 8001f7e:	f7ff fcda 	bl	8001936 <LCD_DrawString_Color_With_Delay>
    HAL_Delay(30);
 8001f82:	201e      	movs	r0, #30
 8001f84:	f001 fe42 	bl	8003c0c <HAL_Delay>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	08009848 	.word	0x08009848

08001f94 <weightPage>:

void weightPage(double KG) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	; 0x38
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	e9c7 0100 	strd	r0, r1, [r7]
    char *output_text;
    if (changingPage) {
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <weightPage+0x190>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d04c      	beq.n	8002040 <weightPage+0xac>
        changingPage = 0;
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <weightPage+0x190>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
        currentPage = weight;
 8001fac:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <weightPage+0x194>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
        output_text = "W E I G H T D E T E C T I O N";
 8001fb2:	4b5e      	ldr	r3, [pc, #376]	; (800212c <weightPage+0x198>)
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        LCD_Clear(0, 0, 240, 320, BLACK);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fbe:	22f0      	movs	r2, #240	; 0xf0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff facb 	bl	800155e <LCD_Clear>
        LCD_DrawString_Color_With_Delay(0, 40, output_text, BLUE, WHITE, 10);
 8001fc8:	230a      	movs	r3, #10
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	231f      	movs	r3, #31
 8001fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fd6:	2128      	movs	r1, #40	; 0x28
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fcac 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        drawBackToHome();
 8001fde:	f7ff ffb5 	bl	8001f4c <drawBackToHome>
        for (uint8_t i = 0; i < 8; i++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fe8:	e026      	b.n	8002038 <weightPage+0xa4>
            char temp[10] = "";
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	809a      	strh	r2, [r3, #4]
            sprintf(temp, "Y%d: ", i);
 8001ff8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	494b      	ldr	r1, [pc, #300]	; (8002130 <weightPage+0x19c>)
 8002002:	4618      	mov	r0, r3
 8002004:	f005 fa62 	bl	80074cc <siprintf>
            LCD_DrawString_Color(170, 140 + 18 * i, temp, BACKGROUND, WHITE);
 8002008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	00d2      	lsls	r2, r2, #3
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	338c      	adds	r3, #140	; 0x8c
 800201a:	b299      	uxth	r1, r3
 800201c:	f107 0218 	add.w	r2, r7, #24
 8002020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2300      	movs	r3, #0
 8002028:	20aa      	movs	r0, #170	; 0xaa
 800202a:	f7ff fc4f 	bl	80018cc <LCD_DrawString_Color>
        for (uint8_t i = 0; i < 8; i++) {
 800202e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002032:	3301      	adds	r3, #1
 8002034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800203c:	2b07      	cmp	r3, #7
 800203e:	d9d4      	bls.n	8001fea <weightPage+0x56>
        }
    }
    output_text = "[K G]";
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <weightPage+0x1a0>)
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
    LCD_DrawString_Color(160, 100, output_text, BLUE, BLACK);
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	231f      	movs	r3, #31
 800204a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800204c:	2164      	movs	r1, #100	; 0x64
 800204e:	20a0      	movs	r0, #160	; 0xa0
 8002050:	f7ff fc3c 	bl	80018cc <LCD_DrawString_Color>

    for (uint8_t counter = 0; counter < 8; counter++) {
 8002054:	2300      	movs	r3, #0
 8002056:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800205a:	e057      	b.n	800210c <weightPage+0x178>
        getY(counter, 20);
 800205c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002060:	2114      	movs	r1, #20
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff feb6 	bl	8001dd4 <getY>

        unsigned int val = HAL_ADC_GetValue(&hadc2);
 8002068:	4833      	ldr	r0, [pc, #204]	; (8002138 <weightPage+0x1a4>)
 800206a:	f002 f891 	bl	8004190 <HAL_ADC_GetValue>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        char dec[10] = "";
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	809a      	strh	r2, [r3, #4]

        if (counter == 4) {
 800207e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002082:	2b04      	cmp	r3, #4
 8002084:	d126      	bne.n	80020d4 <weightPage+0x140>
            uint16_t color = HueToRGB565(val / 4096.0 * 256);
 8002086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002088:	f7fe fa18 	bl	80004bc <__aeabi_ui2d>
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <weightPage+0x1a8>)
 8002092:	f7fe fbb7 	bl	8000804 <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b27      	ldr	r3, [pc, #156]	; (8002140 <weightPage+0x1ac>)
 80020a4:	f7fe fa84 	bl	80005b0 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fd56 	bl	8000b60 <__aeabi_d2uiz>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fd8b 	bl	8001bd4 <HueToRGB565>
 80020be:	4603      	mov	r3, r0
 80020c0:	847b      	strh	r3, [r7, #34]	; 0x22
            LCD_DrawEllipse(50, 280, 10, 10, color);
 80020c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	230a      	movs	r3, #10
 80020c8:	220a      	movs	r2, #10
 80020ca:	f44f 718c 	mov.w	r1, #280	; 0x118
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f7ff fafc 	bl	80016cc <LCD_DrawEllipse>
        }

        sprintf(dec, "%4d", val);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	491a      	ldr	r1, [pc, #104]	; (8002144 <weightPage+0x1b0>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f005 f9f5 	bl	80074cc <siprintf>
        LCD_DrawString(200, 140 + 18 * counter, dec);
 80020e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	00d2      	lsls	r2, r2, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	338c      	adds	r3, #140	; 0x8c
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	20c8      	movs	r0, #200	; 0xc8
 80020fe:	f7ff fa97 	bl	8001630 <LCD_DrawString>
    for (uint8_t counter = 0; counter < 8; counter++) {
 8002102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002106:	3301      	adds	r3, #1
 8002108:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800210c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002110:	2b07      	cmp	r3, #7
 8002112:	d9a3      	bls.n	800205c <weightPage+0xc8>
    }


    HAL_Delay(100);
 8002114:	2064      	movs	r0, #100	; 0x64
 8002116:	f001 fd79 	bl	8003c0c <HAL_Delay>
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	; 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000
 8002128:	200002f8 	.word	0x200002f8
 800212c:	08009858 	.word	0x08009858
 8002130:	08009878 	.word	0x08009878
 8002134:	08009880 	.word	0x08009880
 8002138:	2000022c 	.word	0x2000022c
 800213c:	40b00000 	.word	0x40b00000
 8002140:	40700000 	.word	0x40700000
 8002144:	08009888 	.word	0x08009888

08002148 <accelerometerPage>:

void accelerometerPage() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b098      	sub	sp, #96	; 0x60
 800214c:	af04      	add	r7, sp, #16
    char *output_text;
    if (changingPage) {
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <accelerometerPage+0xf0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 812d 	beq.w	80023b2 <accelerometerPage+0x26a>
        /* BEGIN CALIBRATING ACCELEROMETER */
        uint8_t setPWLMode = 0x00; //reset accelerometer
 8002158:	2300      	movs	r3, #0
 800215a:	70fb      	strb	r3, [r7, #3]
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2301      	movs	r3, #1
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	1cfb      	adds	r3, r7, #3
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	222d      	movs	r2, #45	; 0x2d
 800216c:	213a      	movs	r1, #58	; 0x3a
 800216e:	4833      	ldr	r0, [pc, #204]	; (800223c <accelerometerPage+0xf4>)
 8002170:	f002 fe92 	bl	8004e98 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8002174:	2064      	movs	r0, #100	; 0x64
 8002176:	f001 fd49 	bl	8003c0c <HAL_Delay>
        setPWLMode = 0x08; //disable auto sleep, always measure
 800217a:	2308      	movs	r3, #8
 800217c:	70fb      	strb	r3, [r7, #3]
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x2D, 1, &setPWLMode, 1, 100);
 800217e:	2364      	movs	r3, #100	; 0x64
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	2301      	movs	r3, #1
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	1cfb      	adds	r3, r7, #3
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	222d      	movs	r2, #45	; 0x2d
 800218e:	213a      	movs	r1, #58	; 0x3a
 8002190:	482a      	ldr	r0, [pc, #168]	; (800223c <accelerometerPage+0xf4>)
 8002192:	f002 fe81 	bl	8004e98 <HAL_I2C_Mem_Write>
        uint8_t formatting = 0x05; // full res +-4g
 8002196:	2305      	movs	r3, #5
 8002198:	70bb      	strb	r3, [r7, #2]
        HAL_I2C_Mem_Write(&hi2c2, 0x1D << 1, 0x31, 1, &formatting, 1, 100);
 800219a:	2364      	movs	r3, #100	; 0x64
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	2301      	movs	r3, #1
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	1cbb      	adds	r3, r7, #2
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	2231      	movs	r2, #49	; 0x31
 80021aa:	213a      	movs	r1, #58	; 0x3a
 80021ac:	4823      	ldr	r0, [pc, #140]	; (800223c <accelerometerPage+0xf4>)
 80021ae:	f002 fe73 	bl	8004e98 <HAL_I2C_Mem_Write>
        uint8_t debug = 0x00;
 80021b2:	2300      	movs	r3, #0
 80021b4:	707b      	strb	r3, [r7, #1]
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x00, 1, &debug, 1, 100);
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	1c7b      	adds	r3, r7, #1
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	2200      	movs	r2, #0
 80021c6:	213a      	movs	r1, #58	; 0x3a
 80021c8:	481c      	ldr	r0, [pc, #112]	; (800223c <accelerometerPage+0xf4>)
 80021ca:	f002 ff5f 	bl	800508c <HAL_I2C_Mem_Read>
        LCD_Clear(0, 0, 240, 320, BLACK);
 80021ce:	2300      	movs	r3, #0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021d6:	22f0      	movs	r2, #240	; 0xf0
 80021d8:	2100      	movs	r1, #0
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff f9bf 	bl	800155e <LCD_Clear>
        HAL_Delay(100);
 80021e0:	2064      	movs	r0, #100	; 0x64
 80021e2:	f001 fd13 	bl	8003c0c <HAL_Delay>
        if (debug != 0xE5){
 80021e6:	787b      	ldrb	r3, [r7, #1]
 80021e8:	2be5      	cmp	r3, #229	; 0xe5
 80021ea:	d02f      	beq.n	800224c <accelerometerPage+0x104>
            output_text = "SENSORS NOT PRESENT";
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <accelerometerPage+0xf8>)
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
            LCD_DrawString_Color_With_Delay(50, 100, output_text, RED, WHITE, 5);
 80021f0:	2305      	movs	r3, #5
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002200:	2164      	movs	r1, #100	; 0x64
 8002202:	2032      	movs	r0, #50	; 0x32
 8002204:	f7ff fb97 	bl	8001936 <LCD_DrawString_Color_With_Delay>
            output_text = "PLEASE RETRY AFTER CONNECTING THE ACCELEROMETER";
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <accelerometerPage+0xfc>)
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
            LCD_DrawString_Color_With_Delay(0, 150, output_text, BLACK, WHITE, 3);
 800220c:	2303      	movs	r3, #3
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2300      	movs	r3, #0
 8002218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800221a:	2196      	movs	r1, #150	; 0x96
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fb8a 	bl	8001936 <LCD_DrawString_Color_With_Delay>
            HAL_Delay(3000);
 8002222:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002226:	f001 fcf1 	bl	8003c0c <HAL_Delay>
            currentPage = home;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <accelerometerPage+0x100>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
            changingPage = 1;
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <accelerometerPage+0xf0>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e17a      	b.n	800252e <accelerometerPage+0x3e6>
 8002238:	20000000 	.word	0x20000000
 800223c:	2000025c 	.word	0x2000025c
 8002240:	0800988c 	.word	0x0800988c
 8002244:	080098a0 	.word	0x080098a0
 8002248:	200002f8 	.word	0x200002f8
            return; //BACK TO HOME
        }
        output_text = "CALIBRATING IN 3s. DO NOT MOVE YOUR LUGGAGE.";
 800224c:	4bbc      	ldr	r3, [pc, #752]	; (8002540 <accelerometerPage+0x3f8>)
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 8002250:	230a      	movs	r3, #10
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2300      	movs	r3, #0
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800225c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800225e:	2164      	movs	r1, #100	; 0x64
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fb68 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(3000);
 8002266:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800226a:	f001 fccf 	bl	8003c0c <HAL_Delay>
        uint8_t* arrayOfData = malloc(6 * sizeof(uint8_t));
 800226e:	2006      	movs	r0, #6
 8002270:	f004 fbd0 	bl	8006a14 <malloc>
 8002274:	4603      	mov	r3, r0
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
        HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 8002278:	2364      	movs	r3, #100	; 0x64
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2306      	movs	r3, #6
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2301      	movs	r3, #1
 8002286:	2232      	movs	r2, #50	; 0x32
 8002288:	213a      	movs	r1, #58	; 0x3a
 800228a:	48ae      	ldr	r0, [pc, #696]	; (8002544 <accelerometerPage+0x3fc>)
 800228c:	f002 fefe 	bl	800508c <HAL_I2C_Mem_Read>
        initX_Acc_Reading = combineUint_8ts(arrayOfData[1], arrayOfData[0]);
 8002290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002292:	3301      	adds	r3, #1
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f7ff fc85 	bl	8001bac <combineUint_8ts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4ba8      	ldr	r3, [pc, #672]	; (8002548 <accelerometerPage+0x400>)
 80022a8:	801a      	strh	r2, [r3, #0]
        initY_Acc_Reading = combineUint_8ts(arrayOfData[3], arrayOfData[2]);
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	3303      	adds	r3, #3
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b2:	3302      	adds	r3, #2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f7ff fc77 	bl	8001bac <combineUint_8ts>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	4ba2      	ldr	r3, [pc, #648]	; (800254c <accelerometerPage+0x404>)
 80022c4:	801a      	strh	r2, [r3, #0]
        initZ_Acc_Reading = combineUint_8ts(arrayOfData[5], arrayOfData[4]);
 80022c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c8:	3305      	adds	r3, #5
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ce:	3304      	adds	r3, #4
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f7ff fc69 	bl	8001bac <combineUint_8ts>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b9c      	ldr	r3, [pc, #624]	; (8002550 <accelerometerPage+0x408>)
 80022e0:	801a      	strh	r2, [r3, #0]
        LCD_Clear(0, 0, 240, 320, BLACK);
 80022e2:	2300      	movs	r3, #0
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022ea:	22f0      	movs	r2, #240	; 0xf0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff f935 	bl	800155e <LCD_Clear>
        output_text = "CALIBRATING FINISHED. CONTINUING";
 80022f4:	4b97      	ldr	r3, [pc, #604]	; (8002554 <accelerometerPage+0x40c>)
 80022f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_DrawString_Color_With_Delay(0, 100, output_text, GREEN, BLACK, 10);
 80022f8:	230a      	movs	r3, #10
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff fb14 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        HAL_Delay(2000);
 800230e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002312:	f001 fc7b 	bl	8003c0c <HAL_Delay>
        /* COMPLETED CALIBRATING ACCELEROMETER */
        changingPage = 0;
 8002316:	4b90      	ldr	r3, [pc, #576]	; (8002558 <accelerometerPage+0x410>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
        currentPage = accelerometer;
 800231c:	4b8f      	ldr	r3, [pc, #572]	; (800255c <accelerometerPage+0x414>)
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
        output_text = "A C C E L E R O M E T E R.";
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <accelerometerPage+0x418>)
 8002324:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_Clear(0, 0, 240, 320, BLACK);
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800232e:	22f0      	movs	r2, #240	; 0xf0
 8002330:	2100      	movs	r1, #0
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff f913 	bl	800155e <LCD_Clear>
        LCD_DrawString_Color_With_Delay(10, 40, output_text, BLUE, WHITE, 10);
 8002338:	230a      	movs	r3, #10
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	231f      	movs	r3, #31
 8002344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002346:	2128      	movs	r1, #40	; 0x28
 8002348:	200a      	movs	r0, #10
 800234a:	f7ff faf4 	bl	8001936 <LCD_DrawString_Color_With_Delay>
        drawBackToHome();
 800234e:	f7ff fdfd 	bl	8001f4c <drawBackToHome>
        output_text = "X: ";
 8002352:	4b84      	ldr	r3, [pc, #528]	; (8002564 <accelerometerPage+0x41c>)
 8002354:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_DrawString_Color(40, 100, output_text, CYAN, BLACK);
 8002356:	2300      	movs	r3, #0
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800235e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002360:	2164      	movs	r1, #100	; 0x64
 8002362:	2028      	movs	r0, #40	; 0x28
 8002364:	f7ff fab2 	bl	80018cc <LCD_DrawString_Color>
        output_text = "Y: ";
 8002368:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <accelerometerPage+0x420>)
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_DrawString_Color(40, 130, output_text, YELLOW, BLACK);
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002376:	2182      	movs	r1, #130	; 0x82
 8002378:	2028      	movs	r0, #40	; 0x28
 800237a:	f7ff faa7 	bl	80018cc <LCD_DrawString_Color>
        output_text = "Z: ";
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <accelerometerPage+0x424>)
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
        LCD_DrawString_Color(40, 160, output_text, BLUE, BLACK);
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	231f      	movs	r3, #31
 8002388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800238a:	21a0      	movs	r1, #160	; 0xa0
 800238c:	2028      	movs	r0, #40	; 0x28
 800238e:	f7ff fa9d 	bl	80018cc <LCD_DrawString_Color>
        /* DEBUG MESSAGE BELOW */
        if (debug != 0xE5){
 8002392:	787b      	ldrb	r3, [r7, #1]
 8002394:	2be5      	cmp	r3, #229	; 0xe5
 8002396:	d00c      	beq.n	80023b2 <accelerometerPage+0x26a>
            output_text = "SENSOR NP";
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <accelerometerPage+0x428>)
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
            LCD_DrawString_Color(140, 280, output_text, RED, WHITE);
 800239c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80023ac:	208c      	movs	r0, #140	; 0x8c
 80023ae:	f7ff fa8d 	bl	80018cc <LCD_DrawString_Color>
        }
        /* DEBUG MESSAGE ABOVE */
    }
    // 0x3A for writing address, 0x3B for reading address
    uint8_t* arrayOfData = malloc(6 * sizeof(uint8_t));
 80023b2:	2006      	movs	r0, #6
 80023b4:	f004 fb2e 	bl	8006a14 <malloc>
 80023b8:	4603      	mov	r3, r0
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
    //arrayofData[1] = x1, arrayofData[0] = x2, arrayofData[3] = y1 .....
    HAL_I2C_Mem_Read(&hi2c2, 0x1D << 1, 0x32, 1, arrayOfData, 6, 100);
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2306      	movs	r3, #6
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2301      	movs	r3, #1
 80023ca:	2232      	movs	r2, #50	; 0x32
 80023cc:	213a      	movs	r1, #58	; 0x3a
 80023ce:	485d      	ldr	r0, [pc, #372]	; (8002544 <accelerometerPage+0x3fc>)
 80023d0:	f002 fe5c 	bl	800508c <HAL_I2C_Mem_Read>
    char x_print[10] = "", y_print[10] = "", z_print[10] = "";
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	f107 0320 	add.w	r3, r7, #32
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	809a      	strh	r2, [r3, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	809a      	strh	r2, [r3, #4]
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	809a      	strh	r2, [r3, #4]
    double finalizedX = 0.0, finalizedY = 0.0, finalizedZ = 0.0;
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    // All axes have a scale factor of 7.8
    finalizedX = (combineUint_8ts(arrayOfData[1], arrayOfData[0]) - initX_Acc_Reading) * 0.078;
 8002422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002424:	3301      	adds	r3, #1
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f7ff fbbc 	bl	8001bac <combineUint_8ts>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <accelerometerPage+0x400>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f84b 	bl	80004dc <__aeabi_i2d>
 8002446:	a33c      	add	r3, pc, #240	; (adr r3, 8002538 <accelerometerPage+0x3f0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe f8b0 	bl	80005b0 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    finalizedY = (combineUint_8ts(arrayOfData[3], arrayOfData[2]) - initY_Acc_Reading) * 0.078;
 8002458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245a:	3303      	adds	r3, #3
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f7ff fba0 	bl	8001bac <combineUint_8ts>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <accelerometerPage+0x404>)
 8002472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f82f 	bl	80004dc <__aeabi_i2d>
 800247e:	a32e      	add	r3, pc, #184	; (adr r3, 8002538 <accelerometerPage+0x3f0>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f894 	bl	80005b0 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    finalizedZ = (combineUint_8ts(arrayOfData[5], arrayOfData[4]) - initZ_Acc_Reading) * 0.078;
 8002490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002492:	3305      	adds	r3, #5
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002498:	3304      	adds	r3, #4
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f7ff fb84 	bl	8001bac <combineUint_8ts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <accelerometerPage+0x408>)
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f813 	bl	80004dc <__aeabi_i2d>
 80024b6:	a320      	add	r3, pc, #128	; (adr r3, 8002538 <accelerometerPage+0x3f0>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f878 	bl	80005b0 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    sprintf(x_print, "%+5.3f", finalizedX);
 80024c8:	f107 001c 	add.w	r0, r7, #28
 80024cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024d0:	4928      	ldr	r1, [pc, #160]	; (8002574 <accelerometerPage+0x42c>)
 80024d2:	f004 fffb 	bl	80074cc <siprintf>
    sprintf(y_print, "%+5.3f", finalizedY);
 80024d6:	f107 0010 	add.w	r0, r7, #16
 80024da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024de:	4925      	ldr	r1, [pc, #148]	; (8002574 <accelerometerPage+0x42c>)
 80024e0:	f004 fff4 	bl	80074cc <siprintf>
    sprintf(z_print, "%+5.3f", finalizedZ);
 80024e4:	1d38      	adds	r0, r7, #4
 80024e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <accelerometerPage+0x42c>)
 80024ec:	f004 ffee 	bl	80074cc <siprintf>
    LCD_DrawString_Color(150, 100, x_print, CYAN, BLACK);
 80024f0:	f107 021c 	add.w	r2, r7, #28
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80024fc:	2164      	movs	r1, #100	; 0x64
 80024fe:	2096      	movs	r0, #150	; 0x96
 8002500:	f7ff f9e4 	bl	80018cc <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 130, y_print, YELLOW, BLACK);
 8002504:	f107 0210 	add.w	r2, r7, #16
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002510:	2182      	movs	r1, #130	; 0x82
 8002512:	2096      	movs	r0, #150	; 0x96
 8002514:	f7ff f9da 	bl	80018cc <LCD_DrawString_Color>
    LCD_DrawString_Color(150, 160, z_print, BLUE, BLACK);
 8002518:	1d3a      	adds	r2, r7, #4
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	231f      	movs	r3, #31
 8002520:	21a0      	movs	r1, #160	; 0xa0
 8002522:	2096      	movs	r0, #150	; 0x96
 8002524:	f7ff f9d2 	bl	80018cc <LCD_DrawString_Color>
    HAL_Delay(30);
 8002528:	201e      	movs	r0, #30
 800252a:	f001 fb6f 	bl	8003c0c <HAL_Delay>
}
 800252e:	3750      	adds	r7, #80	; 0x50
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f3af 8000 	nop.w
 8002538:	d916872b 	.word	0xd916872b
 800253c:	3fb3f7ce 	.word	0x3fb3f7ce
 8002540:	080098d0 	.word	0x080098d0
 8002544:	2000025c 	.word	0x2000025c
 8002548:	200002fa 	.word	0x200002fa
 800254c:	200002fc 	.word	0x200002fc
 8002550:	200002fe 	.word	0x200002fe
 8002554:	08009900 	.word	0x08009900
 8002558:	20000000 	.word	0x20000000
 800255c:	200002f8 	.word	0x200002f8
 8002560:	08009924 	.word	0x08009924
 8002564:	08009940 	.word	0x08009940
 8002568:	08009944 	.word	0x08009944
 800256c:	08009948 	.word	0x08009948
 8002570:	0800994c 	.word	0x0800994c
 8002574:	08009958 	.word	0x08009958

08002578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800257e:	f001 fae3 	bl	8003b48 <HAL_Init>
  /* USER CODE BEGIN Init */
    //HAL_UART_Receive_IT(&huart1, &rxData, 1); //enable global interruption
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002582:	f000 f863 	bl	800264c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002586:	f000 f92b 	bl	80027e0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800258a:	f000 fa1d 	bl	80029c8 <MX_FSMC_Init>
  MX_ADC2_Init();
 800258e:	f000 f8bb 	bl	8002708 <MX_ADC2_Init>
  MX_I2C2_Init();
 8002592:	f000 f8f7 	bl	8002784 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADCEx_Calibration_Start(&hadc2);
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <main+0xc8>)
 8002598:	f001 ff9a 	bl	80044d0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 800259c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a0:	4827      	ldr	r0, [pc, #156]	; (8002640 <main+0xc8>)
 80025a2:	f001 fcef 	bl	8003f84 <HAL_ADC_PollForConversion>
    HAL_ADC_Start(&hadc2);
 80025a6:	4826      	ldr	r0, [pc, #152]	; (8002640 <main+0xc8>)
 80025a8:	f001 fc3e 	bl	8003e28 <HAL_ADC_Start>
    LCD_INIT();
 80025ac:	f7fe fddd 	bl	800116a <LCD_INIT>
    currentPage = home;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <main+0xcc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);
 80025b6:	2032      	movs	r0, #50	; 0x32
 80025b8:	f001 fb28 	bl	8003c0c <HAL_Delay>
    while (!XPT2046_Touch_Calibrate());
 80025bc:	bf00      	nop
 80025be:	f000 ffdf 	bl	8003580 <XPT2046_Touch_Calibrate>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0fa      	beq.n	80025be <main+0x46>
    LCD_GramScan(1);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff f9ef 	bl	80019ac <LCD_GramScan>
    LCD_Clear(0, 0, 240, 320, BLACK);
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025d6:	22f0      	movs	r2, #240	; 0xf0
 80025d8:	2100      	movs	r1, #0
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe ffbf 	bl	800155e <LCD_Clear>
    mainPage();
 80025e0:	f7ff fc40 	bl	8001e64 <mainPage>
    HAL_Delay(500);
 80025e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025e8:	f001 fb10 	bl	8003c0c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        if (currentPage == home) mainPage();
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <main+0xcc>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <main+0x82>
 80025f4:	f7ff fc36 	bl	8001e64 <mainPage>
 80025f8:	e013      	b.n	8002622 <main+0xaa>
        else if (currentPage == weight) weightPage(0.0);
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <main+0xcc>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <main+0x98>
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	f7ff fcc3 	bl	8001f94 <weightPage>
 800260e:	e008      	b.n	8002622 <main+0xaa>
        else if (currentPage == accelerometer) accelerometerPage();
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <main+0xcc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d102      	bne.n	800261e <main+0xa6>
 8002618:	f7ff fd96 	bl	8002148 <accelerometerPage>
 800261c:	e001      	b.n	8002622 <main+0xaa>
        else mainPage();
 800261e:	f7ff fc21 	bl	8001e64 <mainPage>
        if (ucXPT2046_TouchFlag == 1) {
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <main+0xd0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d104      	bne.n	8002636 <main+0xbe>
            Check_touchkey();
 800262c:	f7ff fa70 	bl	8001b10 <Check_touchkey>
            ucXPT2046_TouchFlag = 0;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <main+0xd0>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
        }
        HAL_Delay(50);
 8002636:	2032      	movs	r0, #50	; 0x32
 8002638:	f001 fae8 	bl	8003c0c <HAL_Delay>
        if (currentPage == home) mainPage();
 800263c:	e7d6      	b.n	80025ec <main+0x74>
 800263e:	bf00      	nop
 8002640:	2000022c 	.word	0x2000022c
 8002644:	200002f8 	.word	0x200002f8
 8002648:	20000308 	.word	0x20000308

0800264c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b096      	sub	sp, #88	; 0x58
 8002650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002656:	2228      	movs	r2, #40	; 0x28
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f9e2 	bl	8006a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002680:	2301      	movs	r3, #1
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800268e:	2301      	movs	r3, #1
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002692:	2302      	movs	r3, #2
 8002694:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800269c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fab2 	bl	8005c10 <HAL_RCC_OscConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026b2:	f000 f9ed 	bl	8002a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b6:	230f      	movs	r3, #15
 80026b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ba:	2302      	movs	r3, #2
 80026bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fd1e 	bl	8006114 <HAL_RCC_ClockConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026de:	f000 f9d7 	bl	8002a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026e2:	2302      	movs	r3, #2
 80026e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fea8 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80026fa:	f000 f9c9 	bl	8002a90 <Error_Handler>
  }
}
 80026fe:	bf00      	nop
 8002700:	3758      	adds	r7, #88	; 0x58
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <MX_ADC2_Init+0x74>)
 800271a:	4a19      	ldr	r2, [pc, #100]	; (8002780 <MX_ADC2_Init+0x78>)
 800271c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <MX_ADC2_Init+0x74>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <MX_ADC2_Init+0x74>)
 8002726:	2201      	movs	r2, #1
 8002728:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_ADC2_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_ADC2_Init+0x74>)
 8002732:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002736:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_ADC2_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_ADC2_Init+0x74>)
 8002740:	2201      	movs	r2, #1
 8002742:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <MX_ADC2_Init+0x74>)
 8002746:	f001 fa85 	bl	8003c54 <HAL_ADC_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002750:	f000 f99e 	bl	8002a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002754:	2303      	movs	r3, #3
 8002756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002758:	2301      	movs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800275c:	2305      	movs	r3, #5
 800275e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <MX_ADC2_Init+0x74>)
 8002766:	f001 fd1f 	bl	80041a8 <HAL_ADC_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002770:	f000 f98e 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000022c 	.word	0x2000022c
 8002780:	40012800 	.word	0x40012800

08002784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_I2C2_Init+0x50>)
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <MX_I2C2_Init+0x54>)
 800278c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_I2C2_Init+0x50>)
 8002790:	4a12      	ldr	r2, [pc, #72]	; (80027dc <MX_I2C2_Init+0x58>)
 8002792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_I2C2_Init+0x50>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_I2C2_Init+0x50>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_I2C2_Init+0x50>)
 80027c2:	f002 fa25 	bl	8004c10 <HAL_I2C_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027cc:	f000 f960 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000025c 	.word	0x2000025c
 80027d8:	40005800 	.word	0x40005800
 80027dc:	000186a0 	.word	0x000186a0

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 0318 	add.w	r3, r7, #24
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <MX_GPIO_Init+0x1cc>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a6c      	ldr	r2, [pc, #432]	; (80029ac <MX_GPIO_Init+0x1cc>)
 80027fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800280c:	4b67      	ldr	r3, [pc, #412]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a66      	ldr	r2, [pc, #408]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b64      	ldr	r3, [pc, #400]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a60      	ldr	r2, [pc, #384]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a5a      	ldr	r2, [pc, #360]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a54      	ldr	r2, [pc, #336]	; (80029ac <MX_GPIO_Init+0x1cc>)
 800285a:	f043 0320 	orr.w	r3, r3, #32
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b52      	ldr	r3, [pc, #328]	; (80029ac <MX_GPIO_Init+0x1cc>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	2107      	movs	r1, #7
 8002870:	484f      	ldr	r0, [pc, #316]	; (80029b0 <MX_GPIO_Init+0x1d0>)
 8002872:	f002 f992 	bl	8004b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	2110      	movs	r1, #16
 800287a:	484e      	ldr	r0, [pc, #312]	; (80029b4 <MX_GPIO_Init+0x1d4>)
 800287c:	f002 f98d 	bl	8004b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	2123      	movs	r1, #35	; 0x23
 8002884:	484c      	ldr	r0, [pc, #304]	; (80029b8 <MX_GPIO_Init+0x1d8>)
 8002886:	f002 f988 	bl	8004b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002890:	484a      	ldr	r0, [pc, #296]	; (80029bc <MX_GPIO_Init+0x1dc>)
 8002892:	f002 f982 	bl	8004b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800289c:	4848      	ldr	r0, [pc, #288]	; (80029c0 <MX_GPIO_Init+0x1e0>)
 800289e:	f002 f97c 	bl	8004b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 80028a2:	2307      	movs	r3, #7
 80028a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b2:	f107 0318 	add.w	r3, r7, #24
 80028b6:	4619      	mov	r1, r3
 80028b8:	483d      	ldr	r0, [pc, #244]	; (80029b0 <MX_GPIO_Init+0x1d0>)
 80028ba:	f001 ffc3 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028be:	2308      	movs	r3, #8
 80028c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ca:	f107 0318 	add.w	r3, r7, #24
 80028ce:	4619      	mov	r1, r3
 80028d0:	4837      	ldr	r0, [pc, #220]	; (80029b0 <MX_GPIO_Init+0x1d0>)
 80028d2:	f001 ffb7 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028d6:	2310      	movs	r3, #16
 80028d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <MX_GPIO_Init+0x1e4>)
 80028dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028de:	2301      	movs	r3, #1
 80028e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e2:	f107 0318 	add.w	r3, r7, #24
 80028e6:	4619      	mov	r1, r3
 80028e8:	4831      	ldr	r0, [pc, #196]	; (80029b0 <MX_GPIO_Init+0x1d0>)
 80028ea:	f001 ffab 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	4619      	mov	r1, r3
 8002902:	482f      	ldr	r0, [pc, #188]	; (80029c0 <MX_GPIO_Init+0x1e0>)
 8002904:	f001 ff9e 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002908:	2301      	movs	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	4619      	mov	r1, r3
 800291a:	4826      	ldr	r0, [pc, #152]	; (80029b4 <MX_GPIO_Init+0x1d4>)
 800291c:	f001 ff92 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002920:	2310      	movs	r3, #16
 8002922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4619      	mov	r1, r3
 8002936:	481f      	ldr	r0, [pc, #124]	; (80029b4 <MX_GPIO_Init+0x1d4>)
 8002938:	f001 ff84 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800293c:	2323      	movs	r3, #35	; 0x23
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4619      	mov	r1, r3
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <MX_GPIO_Init+0x1d8>)
 8002954:	f001 ff76 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002958:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	4619      	mov	r1, r3
 8002970:	4812      	ldr	r0, [pc, #72]	; (80029bc <MX_GPIO_Init+0x1dc>)
 8002972:	f001 ff67 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002976:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800297a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2302      	movs	r3, #2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4619      	mov	r1, r3
 800298e:	480c      	ldr	r0, [pc, #48]	; (80029c0 <MX_GPIO_Init+0x1e0>)
 8002990:	f001 ff58 	bl	8004844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	200a      	movs	r0, #10
 800299a:	f001 ff1c 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800299e:	200a      	movs	r0, #10
 80029a0:	f001 ff35 	bl	800480e <HAL_NVIC_EnableIRQ>

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40011800 	.word	0x40011800
 80029b4:	40010800 	.word	0x40010800
 80029b8:	40010c00 	.word	0x40010c00
 80029bc:	40011400 	.word	0x40011400
 80029c0:	40011000 	.word	0x40011000
 80029c4:	10210000 	.word	0x10210000

080029c8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]
 80029de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <MX_FSMC_Init+0xbc>)
 80029e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80029e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <MX_FSMC_Init+0xbc>)
 80029ea:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <MX_FSMC_Init+0xc0>)
 80029ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <MX_FSMC_Init+0xbc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <MX_FSMC_Init+0xbc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <MX_FSMC_Init+0xbc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a02:	2210      	movs	r2, #16
 8002a04:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002a3e:	230f      	movs	r3, #15
 8002a40:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002a42:	230f      	movs	r3, #15
 8002a44:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002a46:	23ff      	movs	r3, #255	; 0xff
 8002a48:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002a4e:	2310      	movs	r3, #16
 8002a50:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002a52:	2311      	movs	r3, #17
 8002a54:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4808      	ldr	r0, [pc, #32]	; (8002a84 <MX_FSMC_Init+0xbc>)
 8002a62:	f003 fe89 	bl	8006778 <HAL_SRAM_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002a6c:	f000 f810 	bl	8002a90 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_FSMC_Init+0xc4>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <MX_FSMC_Init+0xc4>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002a7c:	bf00      	nop
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200002b0 	.word	0x200002b0
 8002a88:	a0000104 	.word	0xa0000104
 8002a8c:	40010000 	.word	0x40010000

08002a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002a98:	e7fe      	b.n	8002a98 <Error_Handler+0x8>
	...

08002a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_MspInit+0x5c>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_MspInit+0x5c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6193      	str	r3, [r2, #24]
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_MspInit+0x5c>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_MspInit+0x5c>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_MspInit+0x5c>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_MspInit+0x5c>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_MspInit+0x60>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_MspInit+0x60>)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000

08002b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_ADC_MspInit+0x6c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d121      	bne.n	8002b64 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_ADC_MspInit+0x70>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b50:	2308      	movs	r3, #8
 8002b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b54:	2303      	movs	r3, #3
 8002b56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <HAL_ADC_MspInit+0x74>)
 8002b60:	f001 fe70 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b64:	bf00      	nop
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40012800 	.word	0x40012800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010800 	.word	0x40010800

08002b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_I2C_MspInit+0x74>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d124      	bne.n	8002be2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb6:	2312      	movs	r3, #18
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <HAL_I2C_MspInit+0x7c>)
 8002bc6:	f001 fe3d 	bl	8004844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd4:	61d3      	str	r3, [r2, #28]
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_I2C_MspInit+0x78>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40005800 	.word	0x40005800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010c00 	.word	0x40010c00

08002bf8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_FSMC_MspInit+0x78>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d129      	bne.n	8002c68 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_FSMC_MspInit+0x78>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_FSMC_MspInit+0x7c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_FSMC_MspInit+0x7c>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6153      	str	r3, [r2, #20]
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_FSMC_MspInit+0x7c>)
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002c32:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002c36:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	480c      	ldr	r0, [pc, #48]	; (8002c78 <HAL_FSMC_MspInit+0x80>)
 8002c48:	f001 fdfc 	bl	8004844 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002c4c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002c50:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4806      	ldr	r0, [pc, #24]	; (8002c7c <HAL_FSMC_MspInit+0x84>)
 8002c62:	f001 fdef 	bl	8004844 <HAL_GPIO_Init>
 8002c66:	e000      	b.n	8002c6a <HAL_FSMC_MspInit+0x72>
    return;
 8002c68:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000300 	.word	0x20000300
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40011800 	.word	0x40011800
 8002c7c:	40011400 	.word	0x40011400

08002c80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002c88:	f7ff ffb6 	bl	8002bf8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <HardFault_Handler+0x4>

08002ca6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <MemManage_Handler+0x4>

08002cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <BusFault_Handler+0x4>

08002cb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <UsageFault_Handler+0x4>

08002cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce0:	f000 ff78 	bl	8003bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <EXTI4_IRQHandler+0x2c>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <EXTI4_IRQHandler+0x22>
        ucXPT2046_TouchFlag = 1;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <EXTI4_IRQHandler+0x30>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <EXTI4_IRQHandler+0x2c>)
 8002d00:	2210      	movs	r2, #16
 8002d02:	615a      	str	r2, [r3, #20]
        HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f001 ff79 	bl	8004bfc <HAL_GPIO_EXTI_Callback>
    }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d0a:	2010      	movs	r0, #16
 8002d0c:	f001 ff5e 	bl	8004bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40010400 	.word	0x40010400
 8002d18:	20000308 	.word	0x20000308

08002d1c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
    return 1;
 8002d20:	2301      	movs	r3, #1
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <_kill>:

int _kill(int pid, int sig) {
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
 8002d34:	f003 fe44 	bl	80069c0 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2216      	movs	r2, #22
 8002d3c:	601a      	str	r2, [r3, #0]
    return -1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_exit>:

void _exit(int status) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffe7 	bl	8002d2a <_kill>
    while (1) {}        /* Make sure we hang here */
 8002d5c:	e7fe      	b.n	8002d5c <_exit+0x12>

08002d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e00a      	b.n	8002d86 <_read+0x28>
        *ptr++ = __io_getchar();
 8002d70:	f3af 8000 	nop.w
 8002d74:	4601      	mov	r1, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	60ba      	str	r2, [r7, #8]
 8002d7c:	b2ca      	uxtb	r2, r1
 8002d7e:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	dbf0      	blt.n	8002d70 <_read+0x12>
    }

    return len;
 8002d8e:	687b      	ldr	r3, [r7, #4]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e009      	b.n	8002dbe <_write+0x26>
        __io_putchar(*ptr++);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	60ba      	str	r2, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	dbf1      	blt.n	8002daa <_write+0x12>
    }
    return len;
 8002dc6:	687b      	ldr	r3, [r7, #4]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_close>:

int _close(int file) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
    return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <_fstat>:


int _fstat(int file, struct stat *st) {
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df6:	605a      	str	r2, [r3, #4]
    return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <_isatty>:

int _isatty(int file) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
    return 1;
 8002e0c:	2301      	movs	r3, #1
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
    return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t *) stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
        errno = ENOMEM;
 8002e60:	f003 fdae 	bl	80069c0 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
        return (void *) -1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

    return (void *) prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20010000 	.word	0x20010000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	20000304 	.word	0x20000304
 8002e98:	20000320 	.word	0x20000320

08002e9c <SystemInit>:
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <XPT2046_DelayUS>:
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;


static void XPT2046_DelayUS(__IO uint32_t ulCount) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    uint32_t i;


    for (i = 0; i < ulCount; i++) {
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e00a      	b.n	8002ecc <XPT2046_DelayUS+0x24>
        uint8_t uc = 12;
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	72fb      	strb	r3, [r7, #11]

        while (uc--);
 8002eba:	bf00      	nop
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	72fa      	strb	r2, [r7, #11]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1fa      	bne.n	8002ebc <XPT2046_DelayUS+0x14>
    for (i = 0; i < ulCount; i++) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3f0      	bcc.n	8002eb6 <XPT2046_DelayUS+0xe>

    }

}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
    uint8_t i;


    macXPT2046_MOSI_0();
 8002eea:	2200      	movs	r2, #0
 8002eec:	2104      	movs	r1, #4
 8002eee:	481d      	ldr	r0, [pc, #116]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002ef0:	f001 fe53 	bl	8004b9a <HAL_GPIO_WritePin>

    macXPT2046_CLK_LOW();
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	481a      	ldr	r0, [pc, #104]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002efa:	f001 fe4e 	bl	8004b9a <HAL_GPIO_WritePin>

    for (i = 0; i < 8; i++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e027      	b.n	8002f54 <XPT2046_WriteCMD+0x74>
        ((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	f1c3 0307 	rsb	r3, r3, #7
 8002f0c:	fa42 f303 	asr.w	r3, r2, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <XPT2046_WriteCMD+0x44>
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	4811      	ldr	r0, [pc, #68]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002f1e:	f001 fe3c 	bl	8004b9a <HAL_GPIO_WritePin>
 8002f22:	e004      	b.n	8002f2e <XPT2046_WriteCMD+0x4e>
 8002f24:	2200      	movs	r2, #0
 8002f26:	2104      	movs	r1, #4
 8002f28:	480e      	ldr	r0, [pc, #56]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002f2a:	f001 fe36 	bl	8004b9a <HAL_GPIO_WritePin>

        XPT2046_DelayUS(5);
 8002f2e:	2005      	movs	r0, #5
 8002f30:	f7ff ffba 	bl	8002ea8 <XPT2046_DelayUS>

        macXPT2046_CLK_HIGH();
 8002f34:	2201      	movs	r2, #1
 8002f36:	2101      	movs	r1, #1
 8002f38:	480a      	ldr	r0, [pc, #40]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002f3a:	f001 fe2e 	bl	8004b9a <HAL_GPIO_WritePin>

        XPT2046_DelayUS(5);
 8002f3e:	2005      	movs	r0, #5
 8002f40:	f7ff ffb2 	bl	8002ea8 <XPT2046_DelayUS>

        macXPT2046_CLK_LOW();
 8002f44:	2200      	movs	r2, #0
 8002f46:	2101      	movs	r1, #1
 8002f48:	4806      	ldr	r0, [pc, #24]	; (8002f64 <XPT2046_WriteCMD+0x84>)
 8002f4a:	f001 fe26 	bl	8004b9a <HAL_GPIO_WritePin>
    for (i = 0; i < 8; i++) {
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	d9d4      	bls.n	8002f04 <XPT2046_WriteCMD+0x24>
    }

}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40011800 	.word	0x40011800

08002f68 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD(void) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint16_t usBuf = 0, usTemp;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	80bb      	strh	r3, [r7, #4]


    macXPT2046_MOSI_0();
 8002f72:	2200      	movs	r2, #0
 8002f74:	2104      	movs	r1, #4
 8002f76:	4819      	ldr	r0, [pc, #100]	; (8002fdc <XPT2046_ReadCMD+0x74>)
 8002f78:	f001 fe0f 	bl	8004b9a <HAL_GPIO_WritePin>

    macXPT2046_CLK_HIGH();
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4816      	ldr	r0, [pc, #88]	; (8002fdc <XPT2046_ReadCMD+0x74>)
 8002f82:	f001 fe0a 	bl	8004b9a <HAL_GPIO_WritePin>

    for (i = 0; i < 12; i++) {
 8002f86:	2300      	movs	r3, #0
 8002f88:	71fb      	strb	r3, [r7, #7]
 8002f8a:	e01e      	b.n	8002fca <XPT2046_ReadCMD+0x62>
        macXPT2046_CLK_LOW();
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4812      	ldr	r0, [pc, #72]	; (8002fdc <XPT2046_ReadCMD+0x74>)
 8002f92:	f001 fe02 	bl	8004b9a <HAL_GPIO_WritePin>

        usTemp = macXPT2046_MISO();
 8002f96:	2108      	movs	r1, #8
 8002f98:	4810      	ldr	r0, [pc, #64]	; (8002fdc <XPT2046_ReadCMD+0x74>)
 8002f9a:	f001 fde7 	bl	8004b6c <HAL_GPIO_ReadPin>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	807b      	strh	r3, [r7, #2]

        usBuf |= usTemp << (11 - i);
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	f1c3 030b 	rsb	r3, r3, #11
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	80bb      	strh	r3, [r7, #4]

        macXPT2046_CLK_HIGH();
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4807      	ldr	r0, [pc, #28]	; (8002fdc <XPT2046_ReadCMD+0x74>)
 8002fc0:	f001 fdeb 	bl	8004b9a <HAL_GPIO_WritePin>
    for (i = 0; i < 12; i++) {
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b0b      	cmp	r3, #11
 8002fce:	d9dd      	bls.n	8002f8c <XPT2046_ReadCMD+0x24>

    }

    return usBuf;
 8002fd0:	88bb      	ldrh	r3, [r7, #4]

}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40011800 	.word	0x40011800

08002fe0 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
    XPT2046_WriteCMD(ucChannel);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff77 	bl	8002ee0 <XPT2046_WriteCMD>

    return XPT2046_ReadCMD();
 8002ff2:	f7ff ffb9 	bl	8002f68 <XPT2046_ReadCMD>
 8002ff6:	4603      	mov	r3, r0

}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    int16_t sX_Ad_Temp, sY_Ad_Temp;


    sX_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_X);
 800300a:	2090      	movs	r0, #144	; 0x90
 800300c:	f7ff ffe8 	bl	8002fe0 <XPT2046_ReadAdc>
 8003010:	4603      	mov	r3, r0
 8003012:	81fb      	strh	r3, [r7, #14]

    XPT2046_DelayUS(1);
 8003014:	2001      	movs	r0, #1
 8003016:	f7ff ff47 	bl	8002ea8 <XPT2046_DelayUS>

    sY_Ad_Temp = XPT2046_ReadAdc(macXPT2046_CHANNEL_Y);
 800301a:	20d0      	movs	r0, #208	; 0xd0
 800301c:	f7ff ffe0 	bl	8002fe0 <XPT2046_ReadAdc>
 8003020:	4603      	mov	r3, r0
 8003022:	81bb      	strh	r3, [r7, #12]


    *sX_Ad = sX_Ad_Temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	89fa      	ldrh	r2, [r7, #14]
 8003028:	801a      	strh	r2, [r3, #0]
    *sY_Ad = sY_Ad_Temp;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	89ba      	ldrh	r2, [r7, #12]
 800302e:	801a      	strh	r2, [r3, #0]


}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <XPT2046_ReadAdc_Smooth_XY>:
}


#else

static uint8_t XPT2046_ReadAdc_Smooth_XY(strType_XPT2046_Coordinate *pScreenCoordinate) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	; 0x48
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    uint8_t ucCount = 0, i;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    int16_t sAD_X, sAD_Y;
    int16_t sBufferArray[2][10] = {{0},
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	2228      	movs	r2, #40	; 0x28
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fce8 	bl	8006a24 <memset>

    int32_t lX_Min, lX_Max, lY_Min, lY_Max;


    do {
        XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8003054:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003058:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ffce 	bl	8003000 <XPT2046_ReadAdc_XY>

        sBufferArray[0][ucCount] = sAD_X;
 8003064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003068:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	3348      	adds	r3, #72	; 0x48
 8003070:	443b      	add	r3, r7
 8003072:	f823 2c40 	strh.w	r2, [r3, #-64]
        sBufferArray[1][ucCount] = sAD_Y;
 8003076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800307a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800307e:	330a      	adds	r3, #10
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	3348      	adds	r3, #72	; 0x48
 8003084:	443b      	add	r3, r7
 8003086:	f823 2c40 	strh.w	r2, [r3, #-64]

        ucCount++;
 800308a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800308e:	3301      	adds	r3, #1
 8003090:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    } while ((macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel) && (ucCount < 10));
 8003094:	2110      	movs	r1, #16
 8003096:	4871      	ldr	r0, [pc, #452]	; (800325c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003098:	f001 fd68 	bl	8004b6c <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <XPT2046_ReadAdc_Smooth_XY+0x72>
 80030a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	d9d4      	bls.n	8003054 <XPT2046_ReadAdc_Smooth_XY+0x1c>


    if (macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80030aa:	2110      	movs	r1, #16
 80030ac:	486b      	ldr	r0, [pc, #428]	; (800325c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80030ae:	f001 fd5d 	bl	8004b6c <HAL_GPIO_ReadPin>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <XPT2046_ReadAdc_Smooth_XY+0x86>
        ucXPT2046_TouchFlag = 0;
 80030b8:	4b69      	ldr	r3, [pc, #420]	; (8003260 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]


    if (ucCount == 10) {
 80030be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	f040 80c4 	bne.w	8003250 <XPT2046_ReadAdc_Smooth_XY+0x218>
        lX_Max = lX_Min = sBufferArray[0][0];
 80030c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        lY_Max = lY_Min = sBufferArray[1][0];
 80030d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	637b      	str	r3, [r7, #52]	; 0x34

        for (i = 1; i < 10; i++) {
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80030e2:	e02b      	b.n	800313c <XPT2046_ReadAdc_Smooth_XY+0x104>
            if (sBufferArray[0][i] < lX_Min)
 80030e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	3348      	adds	r3, #72	; 0x48
 80030ec:	443b      	add	r3, r7
 80030ee:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	4293      	cmp	r3, r2
 80030f8:	dd08      	ble.n	800310c <XPT2046_ReadAdc_Smooth_XY+0xd4>
                lX_Min = sBufferArray[0][i];
 80030fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	3348      	adds	r3, #72	; 0x48
 8003102:	443b      	add	r3, r7
 8003104:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
 800310a:	e012      	b.n	8003132 <XPT2046_ReadAdc_Smooth_XY+0xfa>

            else if (sBufferArray[0][i] > lX_Max)
 800310c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	3348      	adds	r3, #72	; 0x48
 8003114:	443b      	add	r3, r7
 8003116:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800311a:	461a      	mov	r2, r3
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	4293      	cmp	r3, r2
 8003120:	da07      	bge.n	8003132 <XPT2046_ReadAdc_Smooth_XY+0xfa>
                lX_Max = sBufferArray[0][i];
 8003122:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	3348      	adds	r3, #72	; 0x48
 800312a:	443b      	add	r3, r7
 800312c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = 1; i < 10; i++) {
 8003132:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003136:	3301      	adds	r3, #1
 8003138:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800313c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003140:	2b09      	cmp	r3, #9
 8003142:	d9cf      	bls.n	80030e4 <XPT2046_ReadAdc_Smooth_XY+0xac>

        }

        for (i = 1; i < 10; i++) {
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800314a:	e02f      	b.n	80031ac <XPT2046_ReadAdc_Smooth_XY+0x174>
            if (sBufferArray[1][i] < lY_Min)
 800314c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003150:	330a      	adds	r3, #10
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	3348      	adds	r3, #72	; 0x48
 8003156:	443b      	add	r3, r7
 8003158:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800315c:	461a      	mov	r2, r3
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	4293      	cmp	r3, r2
 8003162:	dd09      	ble.n	8003178 <XPT2046_ReadAdc_Smooth_XY+0x140>
                lY_Min = sBufferArray[1][i];
 8003164:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003168:	330a      	adds	r3, #10
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	3348      	adds	r3, #72	; 0x48
 800316e:	443b      	add	r3, r7
 8003170:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
 8003176:	e014      	b.n	80031a2 <XPT2046_ReadAdc_Smooth_XY+0x16a>

            else if (sBufferArray[1][i] > lY_Max)
 8003178:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800317c:	330a      	adds	r3, #10
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	3348      	adds	r3, #72	; 0x48
 8003182:	443b      	add	r3, r7
 8003184:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003188:	461a      	mov	r2, r3
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	4293      	cmp	r3, r2
 800318e:	da08      	bge.n	80031a2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
                lY_Max = sBufferArray[1][i];
 8003190:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003194:	330a      	adds	r3, #10
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	3348      	adds	r3, #72	; 0x48
 800319a:	443b      	add	r3, r7
 800319c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = 1; i < 10; i++) {
 80031a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80031a6:	3301      	adds	r3, #1
 80031a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80031ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80031b0:	2b09      	cmp	r3, #9
 80031b2:	d9cb      	bls.n	800314c <XPT2046_ReadAdc_Smooth_XY+0x114>

        }


        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80031b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031be:	4413      	add	r3, r2
 80031c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80031ca:	4413      	add	r3, r2
                                sBufferArray[0][4] +
 80031cc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80031d0:	4413      	add	r3, r2
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80031d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
                                sBufferArray[0][4] +
 80031d6:	4413      	add	r3, r2
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80031d8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031dc:	4413      	add	r3, r2
 80031de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031e2:	4413      	add	r3, r2
 80031e4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80031e8:	4413      	add	r3, r2
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 80031ea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
                                sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7] + sBufferArray[0][8] +
 80031ee:	441a      	add	r2, r3
                                sBufferArray[0][9] - lX_Min - lX_Max) >> 3;
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1] + sBufferArray[0][2] + sBufferArray[0][3] +
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	801a      	strh	r2, [r3, #0]

        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8003200:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003204:	461a      	mov	r2, r3
 8003206:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800320a:	4413      	add	r3, r2
 800320c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003210:	4413      	add	r3, r2
 8003212:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003216:	4413      	add	r3, r2
                                sBufferArray[1][4] +
 8003218:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 800321c:	4413      	add	r3, r2
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 800321e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
                                sBufferArray[1][4] +
 8003222:	4413      	add	r3, r2
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 8003224:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8003228:	4413      	add	r3, r2
 800322a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800322e:	4413      	add	r3, r2
 8003230:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003234:	4413      	add	r3, r2
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 8003236:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
                                sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7] + sBufferArray[1][8] +
 800323a:	441a      	add	r2, r3
                                sBufferArray[1][9] - lY_Min - lY_Max) >> 3;
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	10db      	asrs	r3, r3, #3
        pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1] + sBufferArray[1][2] + sBufferArray[1][3] +
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	805a      	strh	r2, [r3, #2]


        return 1;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <XPT2046_ReadAdc_Smooth_XY+0x21a>


    }


    return 0;
 8003250:	2300      	movs	r3, #0


}
 8003252:	4618      	mov	r0, r3
 8003254:	3748      	adds	r7, #72	; 0x48
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40011800 	.word	0x40011800
 8003260:	20000308 	.word	0x20000308

08003264 <XPT2046_Calculate_CalibrationFactor>:
#endif


static uint8_t XPT2046_Calculate_CalibrationFactor(strType_XPT2046_Coordinate *pDisplayCoordinate,
                                                   strType_XPT2046_Coordinate *pScreenSample,
                                                   strType_XPT2046_Calibration *pCalibrationFactor) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
    uint8_t ucRet = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]


    pCalibrationFactor->Divider =
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3308      	adds	r3, #8
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	3204      	adds	r2, #4
 8003286:	8852      	ldrh	r2, [r2, #2]
 8003288:	4611      	mov	r1, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	3208      	adds	r2, #8
 800328e:	8852      	ldrh	r2, [r2, #2]
 8003290:	1a8a      	subs	r2, r1, r2
 8003292:	fb03 f202 	mul.w	r2, r3, r2
            ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3304      	adds	r3, #4
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3308      	adds	r3, #8
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	1acb      	subs	r3, r1, r3
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	8849      	ldrh	r1, [r1, #2]
 80032aa:	4608      	mov	r0, r1
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	3108      	adds	r1, #8
 80032b0:	8849      	ldrh	r1, [r1, #2]
 80032b2:	1a41      	subs	r1, r0, r1
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
            ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 80032b8:	1ad3      	subs	r3, r2, r3
    pCalibrationFactor->Divider =
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f90e 	bl	80004dc <__aeabi_i2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


    if (pCalibrationFactor->Divider == 0)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f7fd fbd2 	bl	8000a80 <__aeabi_dcmpeq>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <XPT2046_Calculate_CalibrationFactor+0x84>
        ucRet = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]
 80032e6:	e145      	b.n	8003574 <XPT2046_Calculate_CalibrationFactor+0x310>

    else {

        pCalibrationFactor->An =
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3308      	adds	r3, #8
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	3204      	adds	r2, #4
 80032fa:	8852      	ldrh	r2, [r2, #2]
 80032fc:	4611      	mov	r1, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	3208      	adds	r2, #8
 8003302:	8852      	ldrh	r2, [r2, #2]
 8003304:	1a8a      	subs	r2, r1, r2
 8003306:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3304      	adds	r3, #4
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3308      	adds	r3, #8
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	1acb      	subs	r3, r1, r3
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	8849      	ldrh	r1, [r1, #2]
 800331e:	4608      	mov	r0, r1
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	3108      	adds	r1, #8
 8003324:	8849      	ldrh	r1, [r1, #2]
 8003326:	1a41      	subs	r1, r0, r1
 8003328:	fb01 f303 	mul.w	r3, r1, r3
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800332c:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->An =
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f8d4 	bl	80004dc <__aeabi_i2d>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	e9c1 2300 	strd	r2, r3, [r1]

        pCalibrationFactor->Bn =
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3308      	adds	r3, #8
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	3204      	adds	r2, #4
 8003350:	8812      	ldrh	r2, [r2, #0]
 8003352:	4611      	mov	r1, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	3208      	adds	r2, #8
 8003358:	8812      	ldrh	r2, [r2, #0]
 800335a:	1a8a      	subs	r2, r1, r2
 800335c:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].x - pScreenSample[2].x));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3308      	adds	r3, #8
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	1acb      	subs	r3, r1, r3
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	3104      	adds	r1, #4
 8003372:	8809      	ldrh	r1, [r1, #0]
 8003374:	4608      	mov	r0, r1
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	3108      	adds	r1, #8
 800337a:	8809      	ldrh	r1, [r1, #0]
 800337c:	1a41      	subs	r1, r0, r1
 800337e:	fb01 f303 	mul.w	r3, r1, r3
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8003382:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->Bn =
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8a9 	bl	80004dc <__aeabi_i2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	e9c1 2302 	strd	r2, r3, [r1, #8]

        pCalibrationFactor->Cn =
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	3308      	adds	r3, #8
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3304      	adds	r3, #4
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	fb03 f202 	mul.w	r2, r3, r2
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3304      	adds	r3, #4
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3308      	adds	r3, #8
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
                pScreenSample[0].y +
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	8852      	ldrh	r2, [r2, #2]
                (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) *
 80033be:	fb03 f202 	mul.w	r2, r3, r2
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3308      	adds	r3, #8
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	fb03 f101 	mul.w	r1, r3, r1
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3308      	adds	r3, #8
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	fb00 f303 	mul.w	r3, r0, r3
 80033e2:	1acb      	subs	r3, r1, r3
                pScreenSample[1].y +
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	3104      	adds	r1, #4
 80033e8:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) *
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[0].y +
 80033ee:	441a      	add	r2, r3
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3304      	adds	r3, #4
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	fb03 f101 	mul.w	r1, r3, r1
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	fb00 f303 	mul.w	r3, r0, r3
 8003410:	1acb      	subs	r3, r1, r3
                pScreenSample[2].y;
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	3108      	adds	r1, #8
 8003416:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) *
 8003418:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[1].y +
 800341c:	4413      	add	r3, r2
        pCalibrationFactor->Cn =
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f85c 	bl	80004dc <__aeabi_i2d>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	e9c1 2304 	strd	r2, r3, [r1, #16]

        pCalibrationFactor->Dn =
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	885b      	ldrh	r3, [r3, #2]
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3308      	adds	r3, #8
 8003438:	885b      	ldrh	r3, [r3, #2]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	3204      	adds	r2, #4
 8003440:	8852      	ldrh	r2, [r2, #2]
 8003442:	4611      	mov	r1, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	3208      	adds	r2, #8
 8003448:	8852      	ldrh	r2, [r2, #2]
 800344a:	1a8a      	subs	r2, r1, r2
 800344c:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y) * (pScreenSample[0].y - pScreenSample[2].y));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	885b      	ldrh	r3, [r3, #2]
 8003456:	4619      	mov	r1, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3308      	adds	r3, #8
 800345c:	885b      	ldrh	r3, [r3, #2]
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	8849      	ldrh	r1, [r1, #2]
 8003464:	4608      	mov	r0, r1
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	3108      	adds	r1, #8
 800346a:	8849      	ldrh	r1, [r1, #2]
 800346c:	1a41      	subs	r1, r0, r1
 800346e:	fb01 f303 	mul.w	r3, r1, r3
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8003472:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->Dn =
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f831 	bl	80004dc <__aeabi_i2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	e9c1 2306 	strd	r2, r3, [r1, #24]

        pCalibrationFactor->En =
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3308      	adds	r3, #8
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	3204      	adds	r2, #4
 8003496:	8852      	ldrh	r2, [r2, #2]
 8003498:	4611      	mov	r1, r2
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	3208      	adds	r2, #8
 800349e:	8852      	ldrh	r2, [r2, #2]
 80034a0:	1a8a      	subs	r2, r1, r2
 80034a2:	fb03 f202 	mul.w	r2, r3, r2
                ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	885b      	ldrh	r3, [r3, #2]
 80034aa:	4619      	mov	r1, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3308      	adds	r3, #8
 80034b0:	885b      	ldrh	r3, [r3, #2]
 80034b2:	1acb      	subs	r3, r1, r3
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	3104      	adds	r1, #4
 80034b8:	8809      	ldrh	r1, [r1, #0]
 80034ba:	4608      	mov	r0, r1
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	3108      	adds	r1, #8
 80034c0:	8809      	ldrh	r1, [r1, #0]
 80034c2:	1a41      	subs	r1, r0, r1
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
                ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 80034c8:	1ad3      	subs	r3, r2, r3
        pCalibrationFactor->En =
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd f806 	bl	80004dc <__aeabi_i2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	e9c1 2308 	strd	r2, r3, [r1, #32]


        pCalibrationFactor->Fn =
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3308      	adds	r3, #8
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3304      	adds	r3, #4
 80034e6:	885b      	ldrh	r3, [r3, #2]
 80034e8:	fb03 f202 	mul.w	r2, r3, r2
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3304      	adds	r3, #4
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3308      	adds	r3, #8
 80034f8:	885b      	ldrh	r3, [r3, #2]
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	1ad3      	subs	r3, r2, r3
                pScreenSample[0].y +
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	8852      	ldrh	r2, [r2, #2]
                (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) *
 8003504:	fb03 f202 	mul.w	r2, r3, r2
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3308      	adds	r3, #8
 8003512:	885b      	ldrh	r3, [r3, #2]
 8003514:	fb03 f101 	mul.w	r1, r3, r1
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3308      	adds	r3, #8
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	885b      	ldrh	r3, [r3, #2]
 8003524:	fb00 f303 	mul.w	r3, r0, r3
 8003528:	1acb      	subs	r3, r1, r3
                pScreenSample[1].y +
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	3104      	adds	r1, #4
 800352e:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) *
 8003530:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[0].y +
 8003534:	441a      	add	r2, r3
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3304      	adds	r3, #4
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	885b      	ldrh	r3, [r3, #2]
 8003542:	fb03 f101 	mul.w	r1, r3, r1
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3304      	adds	r3, #4
 8003550:	885b      	ldrh	r3, [r3, #2]
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	1acb      	subs	r3, r1, r3
                pScreenSample[2].y;
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	3108      	adds	r1, #8
 800355c:	8849      	ldrh	r1, [r1, #2]
                (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) *
 800355e:	fb01 f303 	mul.w	r3, r1, r3
                pScreenSample[1].y +
 8003562:	4413      	add	r3, r2
        pCalibrationFactor->Fn =
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffb9 	bl	80004dc <__aeabi_i2d>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    }


    return ucRet;
 8003574:	7dfb      	ldrb	r3, [r7, #23]


}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <XPT2046_Touch_Calibrate>:


uint8_t XPT2046_Touch_Calibrate(void) {
 8003580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003584:	b0a0      	sub	sp, #128	; 0x80
 8003586:	af02      	add	r7, sp, #8
    uint8_t i;

    char cStr[10];

    uint16_t usScreenWidth, usScreenHeigth;
    uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800358e:	2300      	movs	r3, #0
 8003590:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003594:	2300      	movs	r3, #0
 8003596:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800359a:	2300      	movs	r3, #0
 800359c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    char *pStr = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68

    strType_XPT2046_Calibration CalibrationFactor;


#if (macXPT2046_Coordinate_GramScan == 1) || (macXPT2046_Coordinate_GramScan == 4)
    usScreenWidth = LCD_Default_Max_Width;
 80035a4:	23f0      	movs	r3, #240	; 0xf0
 80035a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    usScreenHeigth = LCD_Default_Max_Heigth;
 80035aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    usScreenHeigth = LCD_Default_Max_Width;

#endif


    strCrossCoordinate[0].x = usScreenWidth >> 2;
 80035b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    strCrossCoordinate[0].y = usScreenHeigth >> 2;
 80035be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 80035ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 80035d2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	109b      	asrs	r3, r3, #2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80035e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	109b      	asrs	r3, r3, #2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 80035f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 80035fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003602:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8003606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800360a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


    LCD_GramScan(1);
 800360e:	2001      	movs	r0, #1
 8003610:	f7fe f9cc 	bl	80019ac <LCD_GramScan>


    for (i = 0; i < 4; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800361a:	e063      	b.n	80036e4 <XPT2046_Touch_Calibrate+0x164>
        LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800361c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003620:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003624:	2100      	movs	r1, #0
 8003626:	9100      	str	r1, [sp, #0]
 8003628:	2100      	movs	r1, #0
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd ff97 	bl	800155e <LCD_Clear>

        pStr = "Touch Calibrate ......";
 8003630:	4bc4      	ldr	r3, [pc, #784]	; (8003944 <XPT2046_Touch_Calibrate+0x3c4>)
 8003632:	66bb      	str	r3, [r7, #104]	; 0x68
        LCD_DrawString_Color((usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr,
 8003634:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003638:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800363a:	f7fc fdf5 	bl	8000228 <strlen>
 800363e:	4603      	mov	r3, r0
 8003640:	3b07      	subs	r3, #7
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1ae3      	subs	r3, r4, r3
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	b298      	uxth	r0, r3
 800364a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	b299      	uxth	r1, r3
 8003652:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800365c:	f7fe f936 	bl	80018cc <LCD_DrawString_Color>
                             BACKGROUND, RED);

        sprintf(cStr, "%d", i + 1);
 8003660:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800366a:	49b7      	ldr	r1, [pc, #732]	; (8003948 <XPT2046_Touch_Calibrate+0x3c8>)
 800366c:	4618      	mov	r0, r3
 800366e:	f003 ff2d 	bl	80074cc <siprintf>
        LCD_DrawString_Color(usScreenWidth >> 1, (usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
 8003672:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	b298      	uxth	r0, r3
 800367a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b10      	subs	r3, #16
 8003684:	b299      	uxth	r1, r3
 8003686:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800368a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	f7fe f91b 	bl	80018cc <LCD_DrawString_Color>

        XPT2046_DelayUS(100000);
 8003696:	48ad      	ldr	r0, [pc, #692]	; (800394c <XPT2046_Touch_Calibrate+0x3cc>)
 8003698:	f7ff fc06 	bl	8002ea8 <XPT2046_DelayUS>

        LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 800369c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	3378      	adds	r3, #120	; 0x78
 80036a4:	443b      	add	r3, r7
 80036a6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80036aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3378      	adds	r3, #120	; 0x78
 80036b2:	443b      	add	r3, r7
 80036b4:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7fe f8e4 	bl	8001888 <LCD_DrawCross>

        while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]));
 80036c0:	bf00      	nop
 80036c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fcb2 	bl	8003038 <XPT2046_ReadAdc_Smooth_XY>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f3      	beq.n	80036c2 <XPT2046_Touch_Calibrate+0x142>
    for (i = 0; i < 4; i++) {
 80036da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036de:	3301      	adds	r3, #1
 80036e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80036e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d997      	bls.n	800361c <XPT2046_Touch_Calibrate+0x9c>

    }


    XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);
 80036ec:	463a      	mov	r2, r7
 80036ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80036f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fdb4 	bl	8003264 <XPT2046_Calculate_CalibrationFactor>

    if (CalibrationFactor.Divider == 0) goto Failure;
 80036fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f7fd f9ba 	bl	8000a80 <__aeabi_dcmpeq>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8115 	bne.w	800393e <XPT2046_Touch_Calibrate+0x3be>


    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003714:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003718:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc fedd 	bl	80004dc <__aeabi_i2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fc ff41 	bl	80005b0 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4690      	mov	r8, r2
 8003734:	4699      	mov	r9, r3
 8003736:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800373a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fecc 	bl	80004dc <__aeabi_i2d>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc ff30 	bl	80005b0 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4640      	mov	r0, r8
 8003756:	4649      	mov	r1, r9
 8003758:	f7fc fd74 	bl	8000244 <__adddf3>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8003764:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003768:	f7fc fd6c 	bl	8000244 <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
                CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8003774:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003778:	f7fd f844 	bl	8000804 <__aeabi_ddiv>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
    usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) +
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd f9ec 	bl	8000b60 <__aeabi_d2uiz>
 8003788:	4603      	mov	r3, r0
 800378a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 800378e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fea0 	bl	80004dc <__aeabi_i2d>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4620      	mov	r0, r4
 80037a2:	4629      	mov	r1, r5
 80037a4:	f7fc ff04 	bl	80005b0 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4690      	mov	r8, r2
 80037ae:	4699      	mov	r9, r3
 80037b0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80037b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fe8f 	bl	80004dc <__aeabi_i2d>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4620      	mov	r0, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	f7fc fef3 	bl	80005b0 <__aeabi_dmul>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4640      	mov	r0, r8
 80037d0:	4649      	mov	r1, r9
 80037d2:	f7fc fd37 	bl	8000244 <__adddf3>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80037de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80037e2:	f7fc fd2f 	bl	8000244 <__adddf3>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
                CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80037ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037f2:	f7fd f807 	bl	8000804 <__aeabi_ddiv>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
    usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) +
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f7fd f9af 	bl	8000b60 <__aeabi_d2uiz>
 8003802:	4603      	mov	r3, r0
 8003804:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x -
 8003808:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800380c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003810:	429a      	cmp	r2, r3
 8003812:	d906      	bls.n	8003822 <XPT2046_Touch_Calibrate+0x2a2>
 8003814:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003818:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	b29b      	uxth	r3, r3
 8003820:	e005      	b.n	800382e <XPT2046_Touch_Calibrate+0x2ae>
 8003822:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003826:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                                                                                             usTest_x);
    usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y -
 8003832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003836:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800383a:	429a      	cmp	r2, r3
 800383c:	d906      	bls.n	800384c <XPT2046_Touch_Calibrate+0x2cc>
 800383e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003842:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	e005      	b.n	8003858 <XPT2046_Touch_Calibrate+0x2d8>
 800384c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003850:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                                                                                             usTest_y);

    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 800385c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003860:	2b0a      	cmp	r3, #10
 8003862:	d879      	bhi.n	8003958 <XPT2046_Touch_Calibrate+0x3d8>
 8003864:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003868:	2b0a      	cmp	r3, #10
 800386a:	d875      	bhi.n	8003958 <XPT2046_Touch_Calibrate+0x3d8>


    strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 800386c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003874:	f7fc ffc6 	bl	8000804 <__aeabi_ddiv>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4934      	ldr	r1, [pc, #208]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 800387e:	e9c1 2300 	strd	r2, r3, [r1]
    strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 8003882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003886:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800388a:	f7fc ffbb 	bl	8000804 <__aeabi_ddiv>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	492f      	ldr	r1, [pc, #188]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 8003894:	e9c1 2302 	strd	r2, r3, [r1, #8]
    strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8003898:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800389c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038a0:	f7fc ffb0 	bl	8000804 <__aeabi_ddiv>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4929      	ldr	r1, [pc, #164]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 80038aa:	e9c1 2304 	strd	r2, r3, [r1, #16]

    strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80038ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038b6:	f7fc ffa5 	bl	8000804 <__aeabi_ddiv>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4924      	ldr	r1, [pc, #144]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 80038c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80038c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038cc:	f7fc ff9a 	bl	8000804 <__aeabi_ddiv>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	491e      	ldr	r1, [pc, #120]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 80038d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 80038da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038e2:	f7fc ff8f 	bl	8000804 <__aeabi_ddiv>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4919      	ldr	r1, [pc, #100]	; (8003950 <XPT2046_Touch_Calibrate+0x3d0>)
 80038ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


#endif


    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 80038f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80038f8:	2100      	movs	r1, #0
 80038fa:	9100      	str	r1, [sp, #0]
 80038fc:	2100      	movs	r1, #0
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fd fe2d 	bl	800155e <LCD_Clear>

    pStr = "Calibrate Succeed";
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <XPT2046_Touch_Calibrate+0x3d4>)
 8003906:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003908:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800390c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800390e:	f7fc fc8b 	bl	8000228 <strlen>
 8003912:	4603      	mov	r3, r0
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1ae3      	subs	r3, r4, r3
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b298      	uxth	r0, r3
 800391c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	b299      	uxth	r1, r3
 8003924:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800392e:	f7fd ffcd 	bl	80018cc <LCD_DrawString_Color>
                         RED);

    XPT2046_DelayUS(50000);
 8003932:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003936:	f7ff fab7 	bl	8002ea8 <XPT2046_DelayUS>

    return 1;
 800393a:	2301      	movs	r3, #1
 800393c:	e04b      	b.n	80039d6 <XPT2046_Touch_Calibrate+0x456>
    if (CalibrationFactor.Divider == 0) goto Failure;
 800393e:	bf00      	nop
 8003940:	e00b      	b.n	800395a <XPT2046_Touch_Calibrate+0x3da>
 8003942:	bf00      	nop
 8003944:	08009960 	.word	0x08009960
 8003948:	08009978 	.word	0x08009978
 800394c:	000186a0 	.word	0x000186a0
 8003950:	20000008 	.word	0x20000008
 8003954:	0800997c 	.word	0x0800997c
    if ((usGap_x > 10) || (usGap_y > 10)) goto Failure;
 8003958:	bf00      	nop


    Failure:

    LCD_Clear(0, 0, usScreenWidth, usScreenHeigth, BACKGROUND);
 800395a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800395e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003962:	2100      	movs	r1, #0
 8003964:	9100      	str	r1, [sp, #0]
 8003966:	2100      	movs	r1, #0
 8003968:	2000      	movs	r0, #0
 800396a:	f7fd fdf8 	bl	800155e <LCD_Clear>

    pStr = "Calibrate fail";
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <XPT2046_Touch_Calibrate+0x460>)
 8003970:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND,
 8003972:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003976:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003978:	f7fc fc56 	bl	8000228 <strlen>
 800397c:	4603      	mov	r3, r0
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1ae3      	subs	r3, r4, r3
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	b298      	uxth	r0, r3
 8003986:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	b299      	uxth	r1, r3
 800398e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003998:	f7fd ff98 	bl	80018cc <LCD_DrawString_Color>
                         RED);

    pStr = "try again";
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <XPT2046_Touch_Calibrate+0x464>)
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
    LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR,
 80039a0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80039a4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80039a6:	f7fc fc3f 	bl	8000228 <strlen>
 80039aa:	4603      	mov	r3, r0
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	1ae3      	subs	r3, r4, r3
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	b298      	uxth	r0, r3
 80039b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3310      	adds	r3, #16
 80039be:	b299      	uxth	r1, r3
 80039c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039ca:	f7fd ff7f 	bl	80018cc <LCD_DrawString_Color>
                         pStr, BACKGROUND, RED);

    XPT2046_DelayUS(300000);
 80039ce:	4806      	ldr	r0, [pc, #24]	; (80039e8 <XPT2046_Touch_Calibrate+0x468>)
 80039d0:	f7ff fa6a 	bl	8002ea8 <XPT2046_DelayUS>

    return 0;
 80039d4:	2300      	movs	r3, #0


}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3778      	adds	r7, #120	; 0x78
 80039da:	46bd      	mov	sp, r7
 80039dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039e0:	08009990 	.word	0x08009990
 80039e4:	080099a0 	.word	0x080099a0
 80039e8:	000493e0 	.word	0x000493e0

080039ec <XPT2046_Get_TouchedPoint>:


uint8_t
XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_TouchPara *pTouchPara) {
 80039ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
    uint8_t ucRet = 1;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]

    strType_XPT2046_Coordinate strScreenCoordinate;


    if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80039fc:	f107 0308 	add.w	r3, r7, #8
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fb19 	bl	8003038 <XPT2046_ReadAdc_Smooth_XY>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d06e      	beq.n	8003aea <XPT2046_Get_TouchedPoint+0xfe>
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fd61 	bl	80004dc <__aeabi_i2d>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7fc fdc5 	bl	80005b0 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fd50 	bl	80004dc <__aeabi_i2d>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4620      	mov	r0, r4
 8003a42:	4629      	mov	r1, r5
 8003a44:	f7fc fdb4 	bl	80005b0 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	4649      	mov	r1, r9
 8003a50:	f7fc fbf8 	bl	8000244 <__adddf3>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
                                 (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a62:	f7fc fbef 	bl	8000244 <__adddf3>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
        pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x) +
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f7fd f877 	bl	8000b60 <__aeabi_d2uiz>
 8003a72:	4603      	mov	r3, r0
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	801a      	strh	r2, [r3, #0]
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fd2a 	bl	80004dc <__aeabi_i2d>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	f7fc fd8e 	bl	80005b0 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4690      	mov	r8, r2
 8003a9a:	4699      	mov	r9, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fd19 	bl	80004dc <__aeabi_i2d>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4620      	mov	r0, r4
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f7fc fd7d 	bl	80005b0 <__aeabi_dmul>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003aba:	4640      	mov	r0, r8
 8003abc:	4649      	mov	r1, r9
 8003abe:	f7fc fbc1 	bl	8000244 <__adddf3>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
                                 (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003ad0:	f7fc fbb8 	bl	8000244 <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
        pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x) +
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fd f840 	bl	8000b60 <__aeabi_d2uiz>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	805a      	strh	r2, [r3, #2]
 8003ae8:	e001      	b.n	8003aee <XPT2046_Get_TouchedPoint+0x102>

    } else ucRet = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]

    return ucRet;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]


}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b04:	e002      	b.n	8003b0c <LoopCopyDataInit>

08003b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0a:	3304      	adds	r3, #4

08003b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b10:	d3f9      	bcc.n	8003b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b14:	4c0a      	ldr	r4, [pc, #40]	; (8003b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b18:	e001      	b.n	8003b1e <LoopFillZerobss>

08003b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b1c:	3204      	adds	r2, #4

08003b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b20:	d3fb      	bcc.n	8003b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b22:	f7ff f9bb 	bl	8002e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b26:	f002 ff51 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b2a:	f7fe fd25 	bl	8002578 <main>
  bx lr
 8003b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b34:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003b38:	0800a3b4 	.word	0x0800a3b4
  ldr r2, =_sbss
 8003b3c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003b40:	20000320 	.word	0x20000320

08003b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b44:	e7fe      	b.n	8003b44 <ADC1_2_IRQHandler>
	...

08003b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_Init+0x28>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_Init+0x28>)
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b58:	2003      	movs	r0, #3
 8003b5a:	f000 fe31 	bl	80047c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b5e:	200f      	movs	r0, #15
 8003b60:	f000 f808 	bl	8003b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b64:	f7fe ff9a 	bl	8002a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40022000 	.word	0x40022000

08003b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_InitTick+0x54>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_InitTick+0x58>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4619      	mov	r1, r3
 8003b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fe49 	bl	800482a <HAL_SYSTICK_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00e      	b.n	8003bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d80a      	bhi.n	8003bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb0:	f000 fe11 	bl	80047d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb4:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <HAL_InitTick+0x5c>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	2000003c 	.word	0x2000003c
 8003bd0:	20000038 	.word	0x20000038

08003bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_IncTick+0x1c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_IncTick+0x20>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <HAL_IncTick+0x20>)
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	2000003c 	.word	0x2000003c
 8003bf4:	2000030c 	.word	0x2000030c

08003bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <HAL_GetTick+0x10>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	2000030c 	.word	0x2000030c

08003c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff fff0 	bl	8003bf8 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c24:	d005      	beq.n	8003c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_Delay+0x44>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c32:	bf00      	nop
 8003c34:	f7ff ffe0 	bl	8003bf8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d8f7      	bhi.n	8003c34 <HAL_Delay+0x28>
  {
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000003c 	.word	0x2000003c

08003c54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0ce      	b.n	8003e14 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe ff34 	bl	8002b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fbd7 	bl	800444c <ADC_ConversionStop_Disable>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 80a9 	bne.w	8003e02 <HAL_ADC_Init+0x1ae>
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80a5 	bne.w	8003e02 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc0:	f023 0302 	bic.w	r3, r3, #2
 8003cc4:	f043 0202 	orr.w	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4951      	ldr	r1, [pc, #324]	; (8003e1c <HAL_ADC_Init+0x1c8>)
 8003cd6:	428b      	cmp	r3, r1
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_Init+0x9c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ce2:	d002      	beq.n	8003cea <HAL_ADC_Init+0x96>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	e004      	b.n	8003cf4 <HAL_ADC_Init+0xa0>
 8003cea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003cee:	e001      	b.n	8003cf4 <HAL_ADC_Init+0xa0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cf4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7b1b      	ldrb	r3, [r3, #12]
 8003cfa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cfc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d003      	beq.n	8003d16 <HAL_ADC_Init+0xc2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_ADC_Init+0xc8>
 8003d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d1a:	e000      	b.n	8003d1e <HAL_ADC_Init+0xca>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7d1b      	ldrb	r3, [r3, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d119      	bne.n	8003d60 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7b1b      	ldrb	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	035a      	lsls	r2, r3, #13
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e00b      	b.n	8003d60 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f043 0201 	orr.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_ADC_Init+0x1cc>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d90:	d003      	beq.n	8003d9a <HAL_ADC_Init+0x146>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d104      	bne.n	8003da4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_ADC_Init+0x1d0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d10b      	bne.n	8003de0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dde:	e018      	b.n	8003e12 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f023 0312 	bic.w	r3, r3, #18
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e00:	e007      	b.n	8003e12 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f043 0210 	orr.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40013c00 	.word	0x40013c00
 8003e20:	ffe1f7fd 	.word	0xffe1f7fd
 8003e24:	ff1f0efe 	.word	0xff1f0efe

08003e28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_Start+0x1a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e098      	b.n	8003f74 <HAL_ADC_Start+0x14c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 faa4 	bl	8004398 <ADC_Enable>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8087 	bne.w	8003f6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a41      	ldr	r2, [pc, #260]	; (8003f7c <HAL_ADC_Start+0x154>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d105      	bne.n	8003e86 <HAL_ADC_Start+0x5e>
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_ADC_Start+0x158>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d026      	beq.n	8003eee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ea8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003eb0:	e01d      	b.n	8003eee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <HAL_ADC_Start+0x158>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Start+0xaa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_ADC_Start+0x154>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10d      	bne.n	8003eee <HAL_ADC_Start+0xc6>
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_ADC_Start+0x158>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f023 0206 	bic.w	r2, r3, #6
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f06:	e002      	b.n	8003f0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0202 	mvn.w	r2, #2
 8003f1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f2e:	d113      	bne.n	8003f58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f34:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <HAL_ADC_Start+0x154>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d105      	bne.n	8003f46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_ADC_Start+0x158>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	e00c      	b.n	8003f72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e003      	b.n	8003f72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40012800 	.word	0x40012800
 8003f80:	40012400 	.word	0x40012400

08003f84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f9a:	f7ff fe2d 	bl	8003bf8 <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0d3      	b.n	800416e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d131      	bne.n	8004038 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d12a      	bne.n	8004038 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003fe2:	e021      	b.n	8004028 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fea:	d01d      	beq.n	8004028 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_ADC_PollForConversion+0x7e>
 8003ff2:	f7ff fe01 	bl	8003bf8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d212      	bcs.n	8004028 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0a2      	b.n	800416e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0d6      	beq.n	8003fe4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004036:	e070      	b.n	800411a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_ADC_PollForConversion+0x1f4>)
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	2002      	movs	r0, #2
 800403e:	f002 fab7 	bl	80065b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004042:	4603      	mov	r3, r0
 8004044:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6919      	ldr	r1, [r3, #16]
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_ADC_PollForConversion+0x1f8>)
 8004050:	400b      	ands	r3, r1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_ADC_PollForConversion+0x104>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_ADC_PollForConversion+0x1fc>)
 800405e:	400b      	ands	r3, r1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d111      	bne.n	8004088 <HAL_ADC_PollForConversion+0x104>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6919      	ldr	r1, [r3, #16]
 800406a:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_ADC_PollForConversion+0x200>)
 800406c:	400b      	ands	r3, r1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d108      	bne.n	8004084 <HAL_ADC_PollForConversion+0x100>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_ADC_PollForConversion+0x204>)
 800407a:	400b      	ands	r3, r1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_PollForConversion+0x100>
 8004080:	2314      	movs	r3, #20
 8004082:	e020      	b.n	80040c6 <HAL_ADC_PollForConversion+0x142>
 8004084:	2329      	movs	r3, #41	; 0x29
 8004086:	e01e      	b.n	80040c6 <HAL_ADC_PollForConversion+0x142>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6919      	ldr	r1, [r3, #16]
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_ADC_PollForConversion+0x200>)
 8004090:	400b      	ands	r3, r1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_ADC_PollForConversion+0x120>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <HAL_ADC_PollForConversion+0x204>)
 800409e:	400b      	ands	r3, r1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <HAL_ADC_PollForConversion+0x13c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_ADC_PollForConversion+0x208>)
 80040ac:	400b      	ands	r3, r1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HAL_ADC_PollForConversion+0x140>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68d9      	ldr	r1, [r3, #12]
 80040b8:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_ADC_PollForConversion+0x208>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_PollForConversion+0x140>
 80040c0:	2354      	movs	r3, #84	; 0x54
 80040c2:	e000      	b.n	80040c6 <HAL_ADC_PollForConversion+0x142>
 80040c4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040cc:	e021      	b.n	8004112 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d01a      	beq.n	800410c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_ADC_PollForConversion+0x168>
 80040dc:	f7ff fd8c 	bl	8003bf8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d20f      	bcs.n	800410c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d90b      	bls.n	800410c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e030      	b.n	800416e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	429a      	cmp	r2, r3
 8004118:	d8d9      	bhi.n	80040ce <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0212 	mvn.w	r2, #18
 8004122:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800413a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800413e:	d115      	bne.n	800416c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004
 800417c:	24924924 	.word	0x24924924
 8004180:	00924924 	.word	0x00924924
 8004184:	12492492 	.word	0x12492492
 8004188:	00492492 	.word	0x00492492
 800418c:	00249249 	.word	0x00249249

08004190 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x20>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0dc      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1da>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d81c      	bhi.n	8004212 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	3b05      	subs	r3, #5
 80041ea:	221f      	movs	r2, #31
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	4019      	ands	r1, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b05      	subs	r3, #5
 8004204:	fa00 f203 	lsl.w	r2, r0, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	635a      	str	r2, [r3, #52]	; 0x34
 8004210:	e03c      	b.n	800428c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d81c      	bhi.n	8004254 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	3b23      	subs	r3, #35	; 0x23
 800422c:	221f      	movs	r2, #31
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	4019      	ands	r1, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3b23      	subs	r3, #35	; 0x23
 8004246:	fa00 f203 	lsl.w	r2, r0, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
 8004252:	e01b      	b.n	800428c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	3b41      	subs	r3, #65	; 0x41
 8004266:	221f      	movs	r2, #31
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	4019      	ands	r1, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	3b41      	subs	r3, #65	; 0x41
 8004280:	fa00 f203 	lsl.w	r2, r0, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b09      	cmp	r3, #9
 8004292:	d91c      	bls.n	80042ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68d9      	ldr	r1, [r3, #12]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	3b1e      	subs	r3, #30
 80042a6:	2207      	movs	r2, #7
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4019      	ands	r1, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6898      	ldr	r0, [r3, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	3b1e      	subs	r3, #30
 80042c0:	fa00 f203 	lsl.w	r2, r0, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e019      	b.n	8004302 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	2207      	movs	r2, #7
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	4019      	ands	r1, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6898      	ldr	r0, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	fa00 f203 	lsl.w	r2, r0, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b10      	cmp	r3, #16
 8004308:	d003      	beq.n	8004312 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800430e:	2b11      	cmp	r3, #17
 8004310:	d132      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_ADC_ConfigChannel+0x1e4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d125      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d126      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004338:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d11a      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_ADC_ConfigChannel+0x1e8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_ADC_ConfigChannel+0x1ec>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9a      	lsrs	r2, r3, #18
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004358:	e002      	b.n	8004360 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3b01      	subs	r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f9      	bne.n	800435a <HAL_ADC_ConfigChannel+0x1b2>
 8004366:	e007      	b.n	8004378 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012400 	.word	0x40012400
 8004390:	20000004 	.word	0x20000004
 8004394:	431bde83 	.word	0x431bde83

08004398 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d040      	beq.n	8004438 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043c6:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <ADC_Enable+0xac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <ADC_Enable+0xb0>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	0c9b      	lsrs	r3, r3, #18
 80043d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043d4:	e002      	b.n	80043dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3b01      	subs	r3, #1
 80043da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f9      	bne.n	80043d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043e2:	f7ff fc09 	bl	8003bf8 <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80043e8:	e01f      	b.n	800442a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043ea:	f7ff fc05 	bl	8003bf8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d918      	bls.n	800442a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d011      	beq.n	800442a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e007      	b.n	800443a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d1d8      	bne.n	80043ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000004 	.word	0x20000004
 8004448:	431bde83 	.word	0x431bde83

0800444c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12e      	bne.n	80044c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004476:	f7ff fbbf 	bl	8003bf8 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800447c:	e01b      	b.n	80044b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800447e:	f7ff fbbb 	bl	8003bf8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d914      	bls.n	80044b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10d      	bne.n	80044b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d0dc      	beq.n	800447e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_ADCEx_Calibration_Start+0x1e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e095      	b.n	800461a <HAL_ADCEx_Calibration_Start+0x14a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffa8 	bl	800444c <ADC_ConversionStop_Disable>
 80044fc:	4603      	mov	r3, r0
 80044fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 8084 	bne.w	8004610 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004510:	f023 0302 	bic.w	r3, r3, #2
 8004514:	f043 0202 	orr.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800451c:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_ADCEx_Calibration_Start+0x154>)
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	2002      	movs	r0, #2
 8004522:	f002 f845 	bl	80065b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004526:	4603      	mov	r3, r0
 8004528:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800452c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800452e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004530:	e002      	b.n	8004538 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b01      	subs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f9      	bne.n	8004532 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff2a 	bl	8004398 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0208 	orr.w	r2, r2, #8
 8004552:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004554:	f7ff fb50 	bl	8003bf8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800455a:	e01b      	b.n	8004594 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800455c:	f7ff fb4c 	bl	8003bf8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b0a      	cmp	r3, #10
 8004568:	d914      	bls.n	8004594 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f023 0312 	bic.w	r3, r3, #18
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e042      	b.n	800461a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1dc      	bne.n	800455c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0204 	orr.w	r2, r2, #4
 80045b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80045b2:	f7ff fb21 	bl	8003bf8 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80045b8:	e01b      	b.n	80045f2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80045ba:	f7ff fb1d 	bl	8003bf8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b0a      	cmp	r3, #10
 80045c6:	d914      	bls.n	80045f2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f023 0312 	bic.w	r3, r3, #18
 80045de:	f043 0210 	orr.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e013      	b.n	800461a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1dc      	bne.n	80045ba <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f023 0303 	bic.w	r3, r3, #3
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004

08004628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004644:	4013      	ands	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_GetPriorityGrouping+0x18>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 0307 	and.w	r3, r3, #7
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db0b      	blt.n	80046b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <__NVIC_EnableIRQ+0x34>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2001      	movs	r0, #1
 80046ae:	fa00 f202 	lsl.w	r2, r0, r2
 80046b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	e000e100 	.word	0xe000e100

080046c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db0a      	blt.n	80046ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	490c      	ldr	r1, [pc, #48]	; (8004710 <__NVIC_SetPriority+0x4c>)
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	440b      	add	r3, r1
 80046e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046ec:	e00a      	b.n	8004704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <__NVIC_SetPriority+0x50>)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3b04      	subs	r3, #4
 80046fc:	0112      	lsls	r2, r2, #4
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	440b      	add	r3, r1
 8004702:	761a      	strb	r2, [r3, #24]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e100 	.word	0xe000e100
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf28      	it	cs
 8004736:	2304      	movcs	r3, #4
 8004738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3304      	adds	r3, #4
 800473e:	2b06      	cmp	r3, #6
 8004740:	d902      	bls.n	8004748 <NVIC_EncodePriority+0x30>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3b03      	subs	r3, #3
 8004746:	e000      	b.n	800474a <NVIC_EncodePriority+0x32>
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	401a      	ands	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	43d9      	mvns	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	4313      	orrs	r3, r2
         );
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478c:	d301      	bcc.n	8004792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478e:	2301      	movs	r3, #1
 8004790:	e00f      	b.n	80047b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <SysTick_Config+0x40>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479a:	210f      	movs	r1, #15
 800479c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047a0:	f7ff ff90 	bl	80046c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <SysTick_Config+0x40>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <SysTick_Config+0x40>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ff2d 	bl	8004628 <__NVIC_SetPriorityGrouping>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e8:	f7ff ff42 	bl	8004670 <__NVIC_GetPriorityGrouping>
 80047ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff90 	bl	8004718 <NVIC_EncodePriority>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff5f 	bl	80046c4 <__NVIC_SetPriority>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff35 	bl	800468c <__NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffa2 	bl	800477c <SysTick_Config>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b08b      	sub	sp, #44	; 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004856:	e179      	b.n	8004b4c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004858:	2201      	movs	r2, #1
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 8168 	bne.w	8004b46 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a96      	ldr	r2, [pc, #600]	; (8004ad4 <HAL_GPIO_Init+0x290>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d05e      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004880:	4a94      	ldr	r2, [pc, #592]	; (8004ad4 <HAL_GPIO_Init+0x290>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d875      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004886:	4a94      	ldr	r2, [pc, #592]	; (8004ad8 <HAL_GPIO_Init+0x294>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d058      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 800488c:	4a92      	ldr	r2, [pc, #584]	; (8004ad8 <HAL_GPIO_Init+0x294>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d86f      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004892:	4a92      	ldr	r2, [pc, #584]	; (8004adc <HAL_GPIO_Init+0x298>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d052      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004898:	4a90      	ldr	r2, [pc, #576]	; (8004adc <HAL_GPIO_Init+0x298>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d869      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 800489e:	4a90      	ldr	r2, [pc, #576]	; (8004ae0 <HAL_GPIO_Init+0x29c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04c      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048a4:	4a8e      	ldr	r2, [pc, #568]	; (8004ae0 <HAL_GPIO_Init+0x29c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d863      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048aa:	4a8e      	ldr	r2, [pc, #568]	; (8004ae4 <HAL_GPIO_Init+0x2a0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d046      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048b0:	4a8c      	ldr	r2, [pc, #560]	; (8004ae4 <HAL_GPIO_Init+0x2a0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d85d      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048b6:	2b12      	cmp	r3, #18
 80048b8:	d82a      	bhi.n	8004910 <HAL_GPIO_Init+0xcc>
 80048ba:	2b12      	cmp	r3, #18
 80048bc:	d859      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_GPIO_Init+0x80>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	0800493f 	.word	0x0800493f
 80048c8:	08004919 	.word	0x08004919
 80048cc:	0800492b 	.word	0x0800492b
 80048d0:	0800496d 	.word	0x0800496d
 80048d4:	08004973 	.word	0x08004973
 80048d8:	08004973 	.word	0x08004973
 80048dc:	08004973 	.word	0x08004973
 80048e0:	08004973 	.word	0x08004973
 80048e4:	08004973 	.word	0x08004973
 80048e8:	08004973 	.word	0x08004973
 80048ec:	08004973 	.word	0x08004973
 80048f0:	08004973 	.word	0x08004973
 80048f4:	08004973 	.word	0x08004973
 80048f8:	08004973 	.word	0x08004973
 80048fc:	08004973 	.word	0x08004973
 8004900:	08004973 	.word	0x08004973
 8004904:	08004973 	.word	0x08004973
 8004908:	08004921 	.word	0x08004921
 800490c:	08004935 	.word	0x08004935
 8004910:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_GPIO_Init+0x2a4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004916:	e02c      	b.n	8004972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	623b      	str	r3, [r7, #32]
          break;
 800491e:	e029      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	623b      	str	r3, [r7, #32]
          break;
 8004928:	e024      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	3308      	adds	r3, #8
 8004930:	623b      	str	r3, [r7, #32]
          break;
 8004932:	e01f      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	330c      	adds	r3, #12
 800493a:	623b      	str	r3, [r7, #32]
          break;
 800493c:	e01a      	b.n	8004974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004946:	2304      	movs	r3, #4
 8004948:	623b      	str	r3, [r7, #32]
          break;
 800494a:	e013      	b.n	8004974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004954:	2308      	movs	r3, #8
 8004956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	611a      	str	r2, [r3, #16]
          break;
 800495e:	e009      	b.n	8004974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004960:	2308      	movs	r3, #8
 8004962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	615a      	str	r2, [r3, #20]
          break;
 800496a:	e003      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
          break;
 8004970:	e000      	b.n	8004974 <HAL_GPIO_Init+0x130>
          break;
 8004972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d801      	bhi.n	800497e <HAL_GPIO_Init+0x13a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	e001      	b.n	8004982 <HAL_GPIO_Init+0x13e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2bff      	cmp	r3, #255	; 0xff
 8004988:	d802      	bhi.n	8004990 <HAL_GPIO_Init+0x14c>
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	e002      	b.n	8004996 <HAL_GPIO_Init+0x152>
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	3b08      	subs	r3, #8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	210f      	movs	r1, #15
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	401a      	ands	r2, r3
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80c1 	beq.w	8004b46 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049c4:	4b49      	ldr	r3, [pc, #292]	; (8004aec <HAL_GPIO_Init+0x2a8>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2a8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6193      	str	r3, [r2, #24]
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <HAL_GPIO_Init+0x2a8>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049dc:	4a44      	ldr	r2, [pc, #272]	; (8004af0 <HAL_GPIO_Init+0x2ac>)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <HAL_GPIO_Init+0x2b0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d01f      	beq.n	8004a48 <HAL_GPIO_Init+0x204>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3b      	ldr	r2, [pc, #236]	; (8004af8 <HAL_GPIO_Init+0x2b4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d019      	beq.n	8004a44 <HAL_GPIO_Init+0x200>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <HAL_GPIO_Init+0x2b8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_GPIO_Init+0x1fc>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a39      	ldr	r2, [pc, #228]	; (8004b00 <HAL_GPIO_Init+0x2bc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00d      	beq.n	8004a3c <HAL_GPIO_Init+0x1f8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <HAL_GPIO_Init+0x2c0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <HAL_GPIO_Init+0x1f4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a37      	ldr	r2, [pc, #220]	; (8004b08 <HAL_GPIO_Init+0x2c4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_GPIO_Init+0x1f0>
 8004a30:	2305      	movs	r3, #5
 8004a32:	e00a      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a34:	2306      	movs	r3, #6
 8004a36:	e008      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e006      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e004      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_GPIO_Init+0x206>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	4093      	lsls	r3, r2
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a5a:	4925      	ldr	r1, [pc, #148]	; (8004af0 <HAL_GPIO_Init+0x2ac>)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4924      	ldr	r1, [pc, #144]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e006      	b.n	8004a90 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	4920      	ldr	r1, [pc, #128]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	491a      	ldr	r1, [pc, #104]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
 8004aa8:	e006      	b.n	8004ab8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	4916      	ldr	r1, [pc, #88]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d025      	beq.n	8004b10 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4910      	ldr	r1, [pc, #64]	; (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]
 8004ad0:	e025      	b.n	8004b1e <HAL_GPIO_Init+0x2da>
 8004ad2:	bf00      	nop
 8004ad4:	10320000 	.word	0x10320000
 8004ad8:	10310000 	.word	0x10310000
 8004adc:	10220000 	.word	0x10220000
 8004ae0:	10210000 	.word	0x10210000
 8004ae4:	10120000 	.word	0x10120000
 8004ae8:	10110000 	.word	0x10110000
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010800 	.word	0x40010800
 8004af8:	40010c00 	.word	0x40010c00
 8004afc:	40011000 	.word	0x40011000
 8004b00:	40011400 	.word	0x40011400
 8004b04:	40011800 	.word	0x40011800
 8004b08:	40011c00 	.word	0x40011c00
 8004b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	4913      	ldr	r1, [pc, #76]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	490e      	ldr	r1, [pc, #56]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]
 8004b36:	e006      	b.n	8004b46 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	4909      	ldr	r1, [pc, #36]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	3301      	adds	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f47f ae7e 	bne.w	8004858 <HAL_GPIO_Init+0x14>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	372c      	adds	r7, #44	; 0x2c
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40010400 	.word	0x40010400

08004b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	e001      	b.n	8004b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	807b      	strh	r3, [r7, #2]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004baa:	787b      	ldrb	r3, [r7, #1]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb0:	887a      	ldrh	r2, [r7, #2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004bb6:	e003      	b.n	8004bc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	041a      	lsls	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	611a      	str	r2, [r3, #16]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004be2:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f806 	bl	8004bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40010400 	.word	0x40010400

08004bfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e12b      	b.n	8004e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd ff9e 	bl	8002b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c74:	f001 fba0 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8004c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a81      	ldr	r2, [pc, #516]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d807      	bhi.n	8004c94 <HAL_I2C_Init+0x84>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a80      	ldr	r2, [pc, #512]	; (8004e88 <HAL_I2C_Init+0x278>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bf94      	ite	ls
 8004c8c:	2301      	movls	r3, #1
 8004c8e:	2300      	movhi	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e006      	b.n	8004ca2 <HAL_I2C_Init+0x92>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a7d      	ldr	r2, [pc, #500]	; (8004e8c <HAL_I2C_Init+0x27c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0e7      	b.n	8004e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a78      	ldr	r2, [pc, #480]	; (8004e90 <HAL_I2C_Init+0x280>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0c9b      	lsrs	r3, r3, #18
 8004cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a6a      	ldr	r2, [pc, #424]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d802      	bhi.n	8004ce4 <HAL_I2C_Init+0xd4>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	e009      	b.n	8004cf8 <HAL_I2C_Init+0xe8>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_I2C_Init+0x284>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	495c      	ldr	r1, [pc, #368]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004d14:	428b      	cmp	r3, r1
 8004d16:	d819      	bhi.n	8004d4c <HAL_I2C_Init+0x13c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1e59      	subs	r1, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d26:	1c59      	adds	r1, r3, #1
 8004d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_I2C_Init+0x138>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e59      	subs	r1, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d40:	3301      	adds	r3, #1
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	e051      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	e04f      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d111      	bne.n	8004d78 <HAL_I2C_Init+0x168>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	440b      	add	r3, r1
 8004d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e012      	b.n	8004d9e <HAL_I2C_Init+0x18e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1e58      	subs	r0, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	0099      	lsls	r1, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Init+0x196>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e022      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10e      	bne.n	8004dcc <HAL_I2C_Init+0x1bc>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1e58      	subs	r0, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	440b      	add	r3, r1
 8004dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	e00f      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e58      	subs	r0, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	0099      	lsls	r1, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	6809      	ldr	r1, [r1, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6911      	ldr	r1, [r2, #16]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	000186a0 	.word	0x000186a0
 8004e88:	001e847f 	.word	0x001e847f
 8004e8c:	003d08ff 	.word	0x003d08ff
 8004e90:	431bde83 	.word	0x431bde83
 8004e94:	10624dd3 	.word	0x10624dd3

08004e98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb2:	f7fe fea1 	bl	8003bf8 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	f040 80d9 	bne.w	8005078 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	496d      	ldr	r1, [pc, #436]	; (8005084 <HAL_I2C_Mem_Write+0x1ec>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fcc1 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	e0cc      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Mem_Write+0x56>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e0c5      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d007      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2221      	movs	r2, #33	; 0x21
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a4d      	ldr	r2, [pc, #308]	; (8005088 <HAL_I2C_Mem_Write+0x1f0>)
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f56:	88f8      	ldrh	r0, [r7, #6]
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	8979      	ldrh	r1, [r7, #10]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 faf8 	bl	800555c <I2C_RequestMemoryWrite>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d052      	beq.n	8005018 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e081      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fd42 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00d      	beq.n	8004fa2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d107      	bne.n	8004f9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e06b      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d11b      	bne.n	8005018 <HAL_I2C_Mem_Write+0x180>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1aa      	bne.n	8004f76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fd2e 	bl	8005a86 <I2C_WaitOnBTFFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	2b04      	cmp	r3, #4
 8005036:	d107      	bne.n	8005048 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005046:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e016      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	e000      	b.n	800507a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
  }
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	00100002 	.word	0x00100002
 8005088:	ffff0000 	.word	0xffff0000

0800508c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	; 0x30
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	4603      	mov	r3, r0
 800509c:	817b      	strh	r3, [r7, #10]
 800509e:	460b      	mov	r3, r1
 80050a0:	813b      	strh	r3, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050aa:	f7fe fda5 	bl	8003bf8 <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	f040 8244 	bne.w	8005546 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2319      	movs	r3, #25
 80050c4:	2201      	movs	r2, #1
 80050c6:	4982      	ldr	r1, [pc, #520]	; (80052d0 <HAL_I2C_Mem_Read+0x244>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fbc5 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
 80050d6:	e237      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Mem_Read+0x5a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e230      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d007      	beq.n	800510c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2222      	movs	r2, #34	; 0x22
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800513c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a62      	ldr	r2, [pc, #392]	; (80052d4 <HAL_I2C_Mem_Read+0x248>)
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514e:	88f8      	ldrh	r0, [r7, #6]
 8005150:	893a      	ldrh	r2, [r7, #8]
 8005152:	8979      	ldrh	r1, [r7, #10]
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4603      	mov	r3, r0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa92 	bl	8005688 <I2C_RequestMemoryRead>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1ec      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d113      	bne.n	800519e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e1c0      	b.n	8005520 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d11e      	bne.n	80051e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051b6:	b672      	cpsid	i
}
 80051b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051e0:	b662      	cpsie	i
}
 80051e2:	e035      	b.n	8005250 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d11e      	bne.n	800522a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051fc:	b672      	cpsid	i
}
 80051fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005226:	b662      	cpsie	i
}
 8005228:	e012      	b.n	8005250 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005238:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005250:	e166      	b.n	8005520 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	2b03      	cmp	r3, #3
 8005258:	f200 811f 	bhi.w	800549a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	2b01      	cmp	r3, #1
 8005262:	d123      	bne.n	80052ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fc4d 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e167      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052aa:	e139      	b.n	8005520 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d152      	bne.n	800535a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2200      	movs	r2, #0
 80052bc:	4906      	ldr	r1, [pc, #24]	; (80052d8 <HAL_I2C_Mem_Read+0x24c>)
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 faca 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e13c      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
 80052ce:	bf00      	nop
 80052d0:	00100002 	.word	0x00100002
 80052d4:	ffff0000 	.word	0xffff0000
 80052d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052dc:	b672      	cpsid	i
}
 80052de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005322:	b662      	cpsie	i
}
 8005324:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005358:	e0e2      	b.n	8005520 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	2200      	movs	r2, #0
 8005362:	497b      	ldr	r1, [pc, #492]	; (8005550 <HAL_I2C_Mem_Read+0x4c4>)
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fa77 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0e9      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005384:	b672      	cpsid	i
}
 8005386:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ba:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_I2C_Mem_Read+0x4c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	08db      	lsrs	r3, r3, #3
 80053c0:	4a65      	ldr	r2, [pc, #404]	; (8005558 <HAL_I2C_Mem_Read+0x4cc>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0a1a      	lsrs	r2, r3, #8
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00da      	lsls	r2, r3, #3
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d118      	bne.n	8005412 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005402:	b662      	cpsie	i
}
 8005404:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e09a      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b04      	cmp	r3, #4
 800541e:	d1d9      	bne.n	80053d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005462:	b662      	cpsie	i
}
 8005464:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005498:	e042      	b.n	8005520 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fb32 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e04c      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d118      	bne.n	8005520 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f ae94 	bne.w	8005252 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e000      	b.n	8005548 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005546:	2302      	movs	r3, #2
  }
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	00010004 	.word	0x00010004
 8005554:	20000004 	.word	0x20000004
 8005558:	14f8b589 	.word	0x14f8b589

0800555c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	461a      	mov	r2, r3
 800556a:	4603      	mov	r3, r0
 800556c:	817b      	strh	r3, [r7, #10]
 800556e:	460b      	mov	r3, r1
 8005570:	813b      	strh	r3, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2200      	movs	r2, #0
 800558e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f960 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ac:	d103      	bne.n	80055b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e05f      	b.n	800567a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	492d      	ldr	r1, [pc, #180]	; (8005684 <I2C_RequestMemoryWrite+0x128>)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f998 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e04c      	b.n	800567a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa02 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e02b      	b.n	800567a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d105      	bne.n	8005634 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005628:	893b      	ldrh	r3, [r7, #8]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	611a      	str	r2, [r3, #16]
 8005632:	e021      	b.n	8005678 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005634:	893b      	ldrh	r3, [r7, #8]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b29b      	uxth	r3, r3
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005644:	6a39      	ldr	r1, [r7, #32]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f9dc 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00d      	beq.n	800566e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b04      	cmp	r3, #4
 8005658:	d107      	bne.n	800566a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e005      	b.n	800567a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800566e:	893b      	ldrh	r3, [r7, #8]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	00010002 	.word	0x00010002

08005688 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	461a      	mov	r2, r3
 8005696:	4603      	mov	r3, r0
 8005698:	817b      	strh	r3, [r7, #10]
 800569a:	460b      	mov	r3, r1
 800569c:	813b      	strh	r3, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f8c2 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e8:	d103      	bne.n	80056f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0aa      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	4952      	ldr	r1, [pc, #328]	; (8005854 <I2C_RequestMemoryRead+0x1cc>)
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f8fa 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e097      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f964 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e076      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005764:	893b      	ldrh	r3, [r7, #8]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	e021      	b.n	80057b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	b29b      	uxth	r3, r3
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	6a39      	ldr	r1, [r7, #32]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f93e 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e050      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057aa:	893b      	ldrh	r3, [r7, #8]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	6a39      	ldr	r1, [r7, #32]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f923 	bl	8005a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00d      	beq.n	80057e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d107      	bne.n	80057dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e035      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f82b 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d103      	bne.n	8005820 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e013      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	6a3a      	ldr	r2, [r7, #32]
 8005838:	4906      	ldr	r1, [pc, #24]	; (8005854 <I2C_RequestMemoryRead+0x1cc>)
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f863 	bl	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	00010002 	.word	0x00010002

08005858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005868:	e025      	b.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005870:	d021      	beq.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fe f9c1 	bl	8003bf8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d116      	bne.n	80058b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e023      	b.n	80058fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	0c1b      	lsrs	r3, r3, #16
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10d      	bne.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	43da      	mvns	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bf0c      	ite	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	2300      	movne	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	e00c      	b.n	80058f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d0b6      	beq.n	800586a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005914:	e051      	b.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005924:	d123      	bne.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005934:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800593e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e046      	b.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005974:	d021      	beq.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fe f93f 	bl	8003bf8 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d116      	bne.n	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e020      	b.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10c      	bne.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	43da      	mvns	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf14      	ite	ne
 80059d6:	2301      	movne	r3, #1
 80059d8:	2300      	moveq	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e00b      	b.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	43da      	mvns	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d18d      	bne.n	8005916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a10:	e02d      	b.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f8ce 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e02d      	b.n	8005a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fe f8e5 	bl	8003bf8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e007      	b.n	8005a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d1ca      	bne.n	8005a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a92:	e02d      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f88d 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e02d      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aaa:	d021      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fe f8a4 	bl	8003bf8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d116      	bne.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d1ca      	bne.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e042      	b.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d119      	bne.n	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e029      	b.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fe f84e 	bl	8003bf8 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d1b5      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d11b      	bne.n	8005c04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f043 0204 	orr.w	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e272      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 8087 	beq.w	8005d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c30:	4b92      	ldr	r3, [pc, #584]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d00c      	beq.n	8005c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c3c:	4b8f      	ldr	r3, [pc, #572]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 030c 	and.w	r3, r3, #12
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d112      	bne.n	8005c6e <HAL_RCC_OscConfig+0x5e>
 8005c48:	4b8c      	ldr	r3, [pc, #560]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d10b      	bne.n	8005c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c56:	4b89      	ldr	r3, [pc, #548]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d06c      	beq.n	8005d3c <HAL_RCC_OscConfig+0x12c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d168      	bne.n	8005d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e24c      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c76:	d106      	bne.n	8005c86 <HAL_RCC_OscConfig+0x76>
 8005c78:	4b80      	ldr	r3, [pc, #512]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7f      	ldr	r2, [pc, #508]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	e02e      	b.n	8005ce4 <HAL_RCC_OscConfig+0xd4>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x98>
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a7a      	ldr	r2, [pc, #488]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b78      	ldr	r3, [pc, #480]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a77      	ldr	r2, [pc, #476]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e01d      	b.n	8005ce4 <HAL_RCC_OscConfig+0xd4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0xbc>
 8005cb2:	4b72      	ldr	r3, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a71      	ldr	r2, [pc, #452]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6e      	ldr	r2, [pc, #440]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e00b      	b.n	8005ce4 <HAL_RCC_OscConfig+0xd4>
 8005ccc:	4b6b      	ldr	r3, [pc, #428]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a6a      	ldr	r2, [pc, #424]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4b68      	ldr	r3, [pc, #416]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a67      	ldr	r2, [pc, #412]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d013      	beq.n	8005d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7fd ff84 	bl	8003bf8 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fd ff80 	bl	8003bf8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e200      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b5d      	ldr	r3, [pc, #372]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0xe4>
 8005d12:	e014      	b.n	8005d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fd ff70 	bl	8003bf8 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fd ff6c 	bl	8003bf8 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	; 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e1ec      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2e:	4b53      	ldr	r3, [pc, #332]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x10c>
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d063      	beq.n	8005e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d56:	4b49      	ldr	r3, [pc, #292]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d11c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x18c>
 8005d62:	4b46      	ldr	r3, [pc, #280]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d116      	bne.n	8005d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6e:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_RCC_OscConfig+0x176>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e1c0      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d86:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4939      	ldr	r1, [pc, #228]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9a:	e03a      	b.n	8005e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da4:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fd ff25 	bl	8003bf8 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db2:	f7fd ff21 	bl	8003bf8 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e1a1      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc4:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4927      	ldr	r1, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	e015      	b.n	8005e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de6:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fd ff04 	bl	8003bf8 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df4:	f7fd ff00 	bl	8003bf8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e180      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e06:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d03a      	beq.n	8005e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d019      	beq.n	8005e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e26:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <HAL_RCC_OscConfig+0x274>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2c:	f7fd fee4 	bl	8003bf8 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e34:	f7fd fee0 	bl	8003bf8 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e160      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <HAL_RCC_OscConfig+0x26c>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f000 fad8 	bl	8006408 <RCC_Delay>
 8005e58:	e01c      	b.n	8005e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <HAL_RCC_OscConfig+0x274>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e60:	f7fd feca 	bl	8003bf8 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e66:	e00f      	b.n	8005e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e68:	f7fd fec6 	bl	8003bf8 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d908      	bls.n	8005e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e146      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	42420000 	.word	0x42420000
 8005e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e88:	4b92      	ldr	r3, [pc, #584]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e9      	bne.n	8005e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80a6 	beq.w	8005fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	4a87      	ldr	r2, [pc, #540]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	61d3      	str	r3, [r2, #28]
 8005ebe:	4b85      	ldr	r3, [pc, #532]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_OscConfig+0x4c8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d118      	bne.n	8005f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eda:	4b7f      	ldr	r3, [pc, #508]	; (80060d8 <HAL_RCC_OscConfig+0x4c8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7e      	ldr	r2, [pc, #504]	; (80060d8 <HAL_RCC_OscConfig+0x4c8>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee6:	f7fd fe87 	bl	8003bf8 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eee:	f7fd fe83 	bl	8003bf8 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b64      	cmp	r3, #100	; 0x64
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e103      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	4b75      	ldr	r3, [pc, #468]	; (80060d8 <HAL_RCC_OscConfig+0x4c8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x312>
 8005f14:	4b6f      	ldr	r3, [pc, #444]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	4a6e      	ldr	r2, [pc, #440]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6213      	str	r3, [r2, #32]
 8005f20:	e02d      	b.n	8005f7e <HAL_RCC_OscConfig+0x36e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x334>
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6213      	str	r3, [r2, #32]
 8005f36:	4b67      	ldr	r3, [pc, #412]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	4a66      	ldr	r2, [pc, #408]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f3c:	f023 0304 	bic.w	r3, r3, #4
 8005f40:	6213      	str	r3, [r2, #32]
 8005f42:	e01c      	b.n	8005f7e <HAL_RCC_OscConfig+0x36e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	d10c      	bne.n	8005f66 <HAL_RCC_OscConfig+0x356>
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f52:	f043 0304 	orr.w	r3, r3, #4
 8005f56:	6213      	str	r3, [r2, #32]
 8005f58:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6213      	str	r3, [r2, #32]
 8005f64:	e00b      	b.n	8005f7e <HAL_RCC_OscConfig+0x36e>
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	6213      	str	r3, [r2, #32]
 8005f72:	4b58      	ldr	r3, [pc, #352]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	f023 0304 	bic.w	r3, r3, #4
 8005f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d015      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fd fe37 	bl	8003bf8 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8c:	e00a      	b.n	8005fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8e:	f7fd fe33 	bl	8003bf8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e0b1      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa4:	4b4b      	ldr	r3, [pc, #300]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0ee      	beq.n	8005f8e <HAL_RCC_OscConfig+0x37e>
 8005fb0:	e014      	b.n	8005fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb2:	f7fd fe21 	bl	8003bf8 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fba:	f7fd fe1d 	bl	8003bf8 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e09b      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd0:	4b40      	ldr	r3, [pc, #256]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1ee      	bne.n	8005fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe2:	4b3c      	ldr	r3, [pc, #240]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4a3b      	ldr	r2, [pc, #236]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8087 	beq.w	8006106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff8:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f003 030c 	and.w	r3, r3, #12
 8006000:	2b08      	cmp	r3, #8
 8006002:	d061      	beq.n	80060c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d146      	bne.n	800609a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_RCC_OscConfig+0x4cc>)
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006012:	f7fd fdf1 	bl	8003bf8 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601a:	f7fd fded 	bl	8003bf8 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e06d      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800602c:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006040:	d108      	bne.n	8006054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	4921      	ldr	r1, [pc, #132]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006054:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a19      	ldr	r1, [r3, #32]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	430b      	orrs	r3, r1
 8006066:	491b      	ldr	r1, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <HAL_RCC_OscConfig+0x4cc>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fd fdc1 	bl	8003bf8 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607a:	f7fd fdbd 	bl	8003bf8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e03d      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x46a>
 8006098:	e035      	b.n	8006106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x4cc>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fd fdaa 	bl	8003bf8 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fd fda6 	bl	8003bf8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e026      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x498>
 80060c6:	e01e      	b.n	8006106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e019      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_RCC_OscConfig+0x500>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d106      	bne.n	8006102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d001      	beq.n	8006106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40021000 	.word	0x40021000

08006114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0d0      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006128:	4b6a      	ldr	r3, [pc, #424]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d910      	bls.n	8006158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b67      	ldr	r3, [pc, #412]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 0207 	bic.w	r2, r3, #7
 800613e:	4965      	ldr	r1, [pc, #404]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	4b63      	ldr	r3, [pc, #396]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0b8      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006170:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800617a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006188:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a52      	ldr	r2, [pc, #328]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006194:	4b50      	ldr	r3, [pc, #320]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	494d      	ldr	r1, [pc, #308]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d040      	beq.n	8006234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ba:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d115      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e07f      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d2:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e073      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e2:	4b3d      	ldr	r3, [pc, #244]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e06b      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061f2:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f023 0203 	bic.w	r2, r3, #3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4936      	ldr	r1, [pc, #216]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006204:	f7fd fcf8 	bl	8003bf8 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620a:	e00a      	b.n	8006222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620c:	f7fd fcf4 	bl	8003bf8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	; 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e053      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 020c 	and.w	r2, r3, #12
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	429a      	cmp	r2, r3
 8006232:	d1eb      	bne.n	800620c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d210      	bcs.n	8006264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 0207 	bic.w	r2, r3, #7
 800624a:	4922      	ldr	r1, [pc, #136]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e032      	b.n	80062ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4916      	ldr	r1, [pc, #88]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800628e:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	490e      	ldr	r1, [pc, #56]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062a2:	f000 f821 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	490a      	ldr	r1, [pc, #40]	; (80062dc <HAL_RCC_ClockConfig+0x1c8>)
 80062b4:	5ccb      	ldrb	r3, [r1, r3]
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <HAL_RCC_ClockConfig+0x1cc>)
 80062bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <HAL_RCC_ClockConfig+0x1d0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fd fc56 	bl	8003b74 <HAL_InitTick>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40022000 	.word	0x40022000
 80062d8:	40021000 	.word	0x40021000
 80062dc:	08009fbc 	.word	0x08009fbc
 80062e0:	20000004 	.word	0x20000004
 80062e4:	20000038 	.word	0x20000038

080062e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e8:	b490      	push	{r4, r7}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80062ee:	4b29      	ldr	r3, [pc, #164]	; (8006394 <HAL_RCC_GetSysClockFreq+0xac>)
 80062f0:	1d3c      	adds	r4, r7, #4
 80062f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80062f8:	f240 2301 	movw	r3, #513	; 0x201
 80062fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006312:	4b21      	ldr	r3, [pc, #132]	; (8006398 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b04      	cmp	r3, #4
 8006320:	d002      	beq.n	8006328 <HAL_RCC_GetSysClockFreq+0x40>
 8006322:	2b08      	cmp	r3, #8
 8006324:	d003      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0x46>
 8006326:	e02b      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006328:	4b1c      	ldr	r3, [pc, #112]	; (800639c <HAL_RCC_GetSysClockFreq+0xb4>)
 800632a:	623b      	str	r3, [r7, #32]
      break;
 800632c:	e02b      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	0c9b      	lsrs	r3, r3, #18
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	3328      	adds	r3, #40	; 0x28
 8006338:	443b      	add	r3, r7
 800633a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800633e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <HAL_RCC_GetSysClockFreq+0xb0>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	0c5b      	lsrs	r3, r3, #17
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	3328      	adds	r3, #40	; 0x28
 8006356:	443b      	add	r3, r7
 8006358:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800635c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4a0e      	ldr	r2, [pc, #56]	; (800639c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006362:	fb03 f202 	mul.w	r2, r3, r2
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	e004      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	623b      	str	r3, [r7, #32]
      break;
 800637e:	e002      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006382:	623b      	str	r3, [r7, #32]
      break;
 8006384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006386:	6a3b      	ldr	r3, [r7, #32]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	; 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc90      	pop	{r4, r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	080099ac 	.word	0x080099ac
 8006398:	40021000 	.word	0x40021000
 800639c:	007a1200 	.word	0x007a1200
 80063a0:	003d0900 	.word	0x003d0900

080063a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063aa:	681b      	ldr	r3, [r3, #0]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	20000004 	.word	0x20000004

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063bc:	f7ff fff2 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000
 80063dc:	08009fcc 	.word	0x08009fcc

080063e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063e4:	f7ff ffde 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	0adb      	lsrs	r3, r3, #11
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	; (8006404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40021000 	.word	0x40021000
 8006404:	08009fcc 	.word	0x08009fcc

08006408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <RCC_Delay+0x34>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <RCC_Delay+0x38>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0a5b      	lsrs	r3, r3, #9
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006424:	bf00      	nop
  }
  while (Delay --);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f9      	bne.n	8006424 <RCC_Delay+0x1c>
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	20000004 	.word	0x20000004
 8006440:	10624dd3 	.word	0x10624dd3

08006444 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d07d      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006464:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006470:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	4a4b      	ldr	r2, [pc, #300]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647a:	61d3      	str	r3, [r2, #28]
 800647c:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	4b46      	ldr	r3, [pc, #280]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d118      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006498:	4b43      	ldr	r3, [pc, #268]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a42      	ldr	r2, [pc, #264]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a4:	f7fd fba8 	bl	8003bf8 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064aa:	e008      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7fd fba4 	bl	8003bf8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b64      	cmp	r3, #100	; 0x64
 80064b8:	d901      	bls.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e06d      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064be:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ca:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02e      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d027      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064f8:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d014      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650e:	f7fd fb73 	bl	8003bf8 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fd fb6f 	bl	8003bf8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e036      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ee      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4917      	ldr	r1, [pc, #92]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006546:	4313      	orrs	r3, r2
 8006548:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d105      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	490b      	ldr	r1, [pc, #44]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006576:	4313      	orrs	r3, r2
 8006578:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	4904      	ldr	r1, [pc, #16]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006594:	4313      	orrs	r3, r2
 8006596:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40007000 	.word	0x40007000
 80065ac:	42420440 	.word	0x42420440

080065b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b08d      	sub	sp, #52	; 0x34
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065b8:	4b6a      	ldr	r3, [pc, #424]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80065ba:	f107 040c 	add.w	r4, r7, #12
 80065be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065c4:	f240 2301 	movw	r3, #513	; 0x201
 80065c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	2300      	movs	r3, #0
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	2300      	movs	r3, #0
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	2b0f      	cmp	r3, #15
 80065e4:	f200 80b4 	bhi.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	080066cf 	.word	0x080066cf
 80065f4:	08006735 	.word	0x08006735
 80065f8:	08006751 	.word	0x08006751
 80065fc:	080066bf 	.word	0x080066bf
 8006600:	08006751 	.word	0x08006751
 8006604:	08006751 	.word	0x08006751
 8006608:	08006751 	.word	0x08006751
 800660c:	080066c7 	.word	0x080066c7
 8006610:	08006751 	.word	0x08006751
 8006614:	08006751 	.word	0x08006751
 8006618:	08006751 	.word	0x08006751
 800661c:	08006751 	.word	0x08006751
 8006620:	08006751 	.word	0x08006751
 8006624:	08006751 	.word	0x08006751
 8006628:	08006751 	.word	0x08006751
 800662c:	08006631 	.word	0x08006631
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006630:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006636:	4b4c      	ldr	r3, [pc, #304]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8088 	beq.w	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	0c9b      	lsrs	r3, r3, #18
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	3330      	adds	r3, #48	; 0x30
 800664e:	443b      	add	r3, r7
 8006650:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006654:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006660:	4b41      	ldr	r3, [pc, #260]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0c5b      	lsrs	r3, r3, #17
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	3330      	adds	r3, #48	; 0x30
 800666c:	443b      	add	r3, r7
 800666e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800667e:	4a3b      	ldr	r2, [pc, #236]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	fbb2 f2f3 	udiv	r2, r2, r3
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668e:	e004      	b.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	4a37      	ldr	r2, [pc, #220]	; (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800669a:	4b33      	ldr	r3, [pc, #204]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a6:	d102      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80066ac:	e052      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80066bc:	e04a      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80066be:	f7ff fe13 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80066c2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80066c4:	e049      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80066c6:	f7ff fe0f 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80066ca:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80066cc:	e045      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80066ce:	4b26      	ldr	r3, [pc, #152]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066de:	d108      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f0:	e01f      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fc:	d109      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80066fe:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800670a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006710:	e00f      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800671c:	d11c      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 800672a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006730:	e012      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006732:	e011      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006734:	f7ff fe54 	bl	80063e0 <HAL_RCC_GetPCLK2Freq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	0b9b      	lsrs	r3, r3, #14
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	3301      	adds	r3, #1
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800674e:	e004      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8006750:	bf00      	nop
 8006752:	e002      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8006754:	bf00      	nop
 8006756:	e000      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8006758:	bf00      	nop
    }
  }
  return (frequency);
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800675c:	4618      	mov	r0, r3
 800675e:	3734      	adds	r7, #52	; 0x34
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}
 8006764:	080099bc 	.word	0x080099bc
 8006768:	40021000 	.word	0x40021000
 800676c:	007a1200 	.word	0x007a1200
 8006770:	003d0900 	.word	0x003d0900
 8006774:	aaaaaaab 	.word	0xaaaaaaab

08006778 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_SRAM_Init+0x1c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d101      	bne.n	8006798 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e038      	b.n	800680a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7fc fa67 	bl	8002c80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3308      	adds	r3, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f000 f829 	bl	8006814 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	461a      	mov	r2, r3
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	f000 f88b 	bl	80068e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6858      	ldr	r0, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	f000 f8b6 	bl	8006950 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	6892      	ldr	r2, [r2, #8]
 80067ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	6892      	ldr	r2, [r2, #8]
 80067f8:	f041 0101 	orr.w	r1, r1, #1
 80067fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	f023 0101 	bic.w	r1, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b08      	cmp	r3, #8
 800683c:	d102      	bne.n	8006844 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e001      	b.n	8006848 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006854:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800685a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006860:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006866:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800686c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006872:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006878:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800687e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006884:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <FSMC_NORSRAM_Init+0xd0>)
 80068a4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068ac:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80068b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	ea02 0103 	and.w	r1, r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4319      	orrs	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	0008fb7f 	.word	0x0008fb7f

080068e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	431a      	orrs	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	431a      	orrs	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	431a      	orrs	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	3b01      	subs	r3, #1
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	3b02      	subs	r3, #2
 800692e:	061b      	lsls	r3, r3, #24
 8006930:	431a      	orrs	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	3201      	adds	r2, #1
 800693c:	4319      	orrs	r1, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	bc80      	pop	{r7}
 800694e:	4770      	bx	lr

08006950 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006964:	d11d      	bne.n	80069a2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006970:	4013      	ands	r3, r2
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	6811      	ldr	r1, [r2, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	0112      	lsls	r2, r2, #4
 800697c:	4311      	orrs	r1, r2
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	6892      	ldr	r2, [r2, #8]
 8006982:	0212      	lsls	r2, r2, #8
 8006984:	4311      	orrs	r1, r2
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	6992      	ldr	r2, [r2, #24]
 800698a:	4311      	orrs	r1, r2
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	68d2      	ldr	r2, [r2, #12]
 8006990:	0412      	lsls	r2, r2, #16
 8006992:	430a      	orrs	r2, r1
 8006994:	ea43 0102 	orr.w	r1, r3, r2
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80069a0:	e005      	b.n	80069ae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80069aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	cff00000 	.word	0xcff00000

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000040 	.word	0x20000040

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	2600      	movs	r6, #0
 80069d0:	4d0c      	ldr	r5, [pc, #48]	; (8006a04 <__libc_init_array+0x38>)
 80069d2:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d4:	1b64      	subs	r4, r4, r5
 80069d6:	10a4      	asrs	r4, r4, #2
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	f002 fefc 	bl	80097d8 <_init>
 80069e0:	2600      	movs	r6, #0
 80069e2:	4d0a      	ldr	r5, [pc, #40]	; (8006a0c <__libc_init_array+0x40>)
 80069e4:	4c0a      	ldr	r4, [pc, #40]	; (8006a10 <__libc_init_array+0x44>)
 80069e6:	1b64      	subs	r4, r4, r5
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	0800a3ac 	.word	0x0800a3ac
 8006a08:	0800a3ac 	.word	0x0800a3ac
 8006a0c:	0800a3ac 	.word	0x0800a3ac
 8006a10:	0800a3b0 	.word	0x0800a3b0

08006a14 <malloc>:
 8006a14:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <malloc+0xc>)
 8006a16:	4601      	mov	r1, r0
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	f000 b873 	b.w	8006b04 <_malloc_r>
 8006a1e:	bf00      	nop
 8006a20:	20000040 	.word	0x20000040

08006a24 <memset>:
 8006a24:	4603      	mov	r3, r0
 8006a26:	4402      	add	r2, r0
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <_free_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4605      	mov	r5, r0
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d040      	beq.n	8006abe <_free_r+0x8a>
 8006a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a40:	1f0c      	subs	r4, r1, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bfb8      	it	lt
 8006a46:	18e4      	addlt	r4, r4, r3
 8006a48:	f001 fbfc 	bl	8008244 <__malloc_lock>
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <_free_r+0x8c>)
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	b933      	cbnz	r3, 8006a60 <_free_r+0x2c>
 8006a52:	6063      	str	r3, [r4, #4]
 8006a54:	6014      	str	r4, [r2, #0]
 8006a56:	4628      	mov	r0, r5
 8006a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a5c:	f001 bbf8 	b.w	8008250 <__malloc_unlock>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d908      	bls.n	8006a76 <_free_r+0x42>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	1821      	adds	r1, r4, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf01      	itttt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	1809      	addeq	r1, r1, r0
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	e7ed      	b.n	8006a52 <_free_r+0x1e>
 8006a76:	461a      	mov	r2, r3
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b10b      	cbz	r3, 8006a80 <_free_r+0x4c>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d9fa      	bls.n	8006a76 <_free_r+0x42>
 8006a80:	6811      	ldr	r1, [r2, #0]
 8006a82:	1850      	adds	r0, r2, r1
 8006a84:	42a0      	cmp	r0, r4
 8006a86:	d10b      	bne.n	8006aa0 <_free_r+0x6c>
 8006a88:	6820      	ldr	r0, [r4, #0]
 8006a8a:	4401      	add	r1, r0
 8006a8c:	1850      	adds	r0, r2, r1
 8006a8e:	4283      	cmp	r3, r0
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	d1e0      	bne.n	8006a56 <_free_r+0x22>
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4401      	add	r1, r0
 8006a9a:	6011      	str	r1, [r2, #0]
 8006a9c:	6053      	str	r3, [r2, #4]
 8006a9e:	e7da      	b.n	8006a56 <_free_r+0x22>
 8006aa0:	d902      	bls.n	8006aa8 <_free_r+0x74>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	e7d6      	b.n	8006a56 <_free_r+0x22>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	1821      	adds	r1, r4, r0
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf01      	itttt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	1809      	addeq	r1, r1, r0
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	6063      	str	r3, [r4, #4]
 8006aba:	6054      	str	r4, [r2, #4]
 8006abc:	e7cb      	b.n	8006a56 <_free_r+0x22>
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000310 	.word	0x20000310

08006ac4 <sbrk_aligned>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4e0e      	ldr	r6, [pc, #56]	; (8006b00 <sbrk_aligned+0x3c>)
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6831      	ldr	r1, [r6, #0]
 8006acc:	4605      	mov	r5, r0
 8006ace:	b911      	cbnz	r1, 8006ad6 <sbrk_aligned+0x12>
 8006ad0:	f000 fcec 	bl	80074ac <_sbrk_r>
 8006ad4:	6030      	str	r0, [r6, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 fce7 	bl	80074ac <_sbrk_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d00a      	beq.n	8006af8 <sbrk_aligned+0x34>
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d007      	beq.n	8006afc <sbrk_aligned+0x38>
 8006aec:	1a21      	subs	r1, r4, r0
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fcdc 	bl	80074ac <_sbrk_r>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d101      	bne.n	8006afc <sbrk_aligned+0x38>
 8006af8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006afc:	4620      	mov	r0, r4
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	20000314 	.word	0x20000314

08006b04 <_malloc_r>:
 8006b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b08:	1ccd      	adds	r5, r1, #3
 8006b0a:	f025 0503 	bic.w	r5, r5, #3
 8006b0e:	3508      	adds	r5, #8
 8006b10:	2d0c      	cmp	r5, #12
 8006b12:	bf38      	it	cc
 8006b14:	250c      	movcc	r5, #12
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	4607      	mov	r7, r0
 8006b1a:	db01      	blt.n	8006b20 <_malloc_r+0x1c>
 8006b1c:	42a9      	cmp	r1, r5
 8006b1e:	d905      	bls.n	8006b2c <_malloc_r+0x28>
 8006b20:	230c      	movs	r3, #12
 8006b22:	2600      	movs	r6, #0
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4630      	mov	r0, r6
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	4e2e      	ldr	r6, [pc, #184]	; (8006be8 <_malloc_r+0xe4>)
 8006b2e:	f001 fb89 	bl	8008244 <__malloc_lock>
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	461c      	mov	r4, r3
 8006b36:	bb34      	cbnz	r4, 8006b86 <_malloc_r+0x82>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f7ff ffc2 	bl	8006ac4 <sbrk_aligned>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	4604      	mov	r4, r0
 8006b44:	d14d      	bne.n	8006be2 <_malloc_r+0xde>
 8006b46:	6834      	ldr	r4, [r6, #0]
 8006b48:	4626      	mov	r6, r4
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d140      	bne.n	8006bd0 <_malloc_r+0xcc>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	4631      	mov	r1, r6
 8006b52:	4638      	mov	r0, r7
 8006b54:	eb04 0803 	add.w	r8, r4, r3
 8006b58:	f000 fca8 	bl	80074ac <_sbrk_r>
 8006b5c:	4580      	cmp	r8, r0
 8006b5e:	d13a      	bne.n	8006bd6 <_malloc_r+0xd2>
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	3503      	adds	r5, #3
 8006b64:	1a6d      	subs	r5, r5, r1
 8006b66:	f025 0503 	bic.w	r5, r5, #3
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	2d0c      	cmp	r5, #12
 8006b6e:	bf38      	it	cc
 8006b70:	250c      	movcc	r5, #12
 8006b72:	4638      	mov	r0, r7
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7ff ffa5 	bl	8006ac4 <sbrk_aligned>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d02b      	beq.n	8006bd6 <_malloc_r+0xd2>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	442b      	add	r3, r5
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e00e      	b.n	8006ba4 <_malloc_r+0xa0>
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	1b52      	subs	r2, r2, r5
 8006b8a:	d41e      	bmi.n	8006bca <_malloc_r+0xc6>
 8006b8c:	2a0b      	cmp	r2, #11
 8006b8e:	d916      	bls.n	8006bbe <_malloc_r+0xba>
 8006b90:	1961      	adds	r1, r4, r5
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	6025      	str	r5, [r4, #0]
 8006b96:	bf18      	it	ne
 8006b98:	6059      	strne	r1, [r3, #4]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	bf08      	it	eq
 8006b9e:	6031      	streq	r1, [r6, #0]
 8006ba0:	5162      	str	r2, [r4, r5]
 8006ba2:	604b      	str	r3, [r1, #4]
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f104 060b 	add.w	r6, r4, #11
 8006baa:	f001 fb51 	bl	8008250 <__malloc_unlock>
 8006bae:	f026 0607 	bic.w	r6, r6, #7
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	1af2      	subs	r2, r6, r3
 8006bb6:	d0b6      	beq.n	8006b26 <_malloc_r+0x22>
 8006bb8:	1b9b      	subs	r3, r3, r6
 8006bba:	50a3      	str	r3, [r4, r2]
 8006bbc:	e7b3      	b.n	8006b26 <_malloc_r+0x22>
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	bf0c      	ite	eq
 8006bc4:	6032      	streq	r2, [r6, #0]
 8006bc6:	605a      	strne	r2, [r3, #4]
 8006bc8:	e7ec      	b.n	8006ba4 <_malloc_r+0xa0>
 8006bca:	4623      	mov	r3, r4
 8006bcc:	6864      	ldr	r4, [r4, #4]
 8006bce:	e7b2      	b.n	8006b36 <_malloc_r+0x32>
 8006bd0:	4634      	mov	r4, r6
 8006bd2:	6876      	ldr	r6, [r6, #4]
 8006bd4:	e7b9      	b.n	8006b4a <_malloc_r+0x46>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	4638      	mov	r0, r7
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f001 fb38 	bl	8008250 <__malloc_unlock>
 8006be0:	e7a1      	b.n	8006b26 <_malloc_r+0x22>
 8006be2:	6025      	str	r5, [r4, #0]
 8006be4:	e7de      	b.n	8006ba4 <_malloc_r+0xa0>
 8006be6:	bf00      	nop
 8006be8:	20000310 	.word	0x20000310

08006bec <__cvt>:
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	bfbb      	ittet	lt
 8006bf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006bfa:	461f      	movlt	r7, r3
 8006bfc:	2300      	movge	r3, #0
 8006bfe:	232d      	movlt	r3, #45	; 0x2d
 8006c00:	b088      	sub	sp, #32
 8006c02:	4614      	mov	r4, r2
 8006c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c10:	f023 0820 	bic.w	r8, r3, #32
 8006c14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c18:	d005      	beq.n	8006c26 <__cvt+0x3a>
 8006c1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c1e:	d100      	bne.n	8006c22 <__cvt+0x36>
 8006c20:	3501      	adds	r5, #1
 8006c22:	2302      	movs	r3, #2
 8006c24:	e000      	b.n	8006c28 <__cvt+0x3c>
 8006c26:	2303      	movs	r3, #3
 8006c28:	aa07      	add	r2, sp, #28
 8006c2a:	9204      	str	r2, [sp, #16]
 8006c2c:	aa06      	add	r2, sp, #24
 8006c2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c32:	e9cd 3500 	strd	r3, r5, [sp]
 8006c36:	4622      	mov	r2, r4
 8006c38:	463b      	mov	r3, r7
 8006c3a:	f000 fcf5 	bl	8007628 <_dtoa_r>
 8006c3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c42:	4606      	mov	r6, r0
 8006c44:	d102      	bne.n	8006c4c <__cvt+0x60>
 8006c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c48:	07db      	lsls	r3, r3, #31
 8006c4a:	d522      	bpl.n	8006c92 <__cvt+0xa6>
 8006c4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c50:	eb06 0905 	add.w	r9, r6, r5
 8006c54:	d110      	bne.n	8006c78 <__cvt+0x8c>
 8006c56:	7833      	ldrb	r3, [r6, #0]
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d10a      	bne.n	8006c72 <__cvt+0x86>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4620      	mov	r0, r4
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 ff0c 	bl	8000a80 <__aeabi_dcmpeq>
 8006c68:	b918      	cbnz	r0, 8006c72 <__cvt+0x86>
 8006c6a:	f1c5 0501 	rsb	r5, r5, #1
 8006c6e:	f8ca 5000 	str.w	r5, [sl]
 8006c72:	f8da 3000 	ldr.w	r3, [sl]
 8006c76:	4499      	add	r9, r3
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 fefe 	bl	8000a80 <__aeabi_dcmpeq>
 8006c84:	b108      	cbz	r0, 8006c8a <__cvt+0x9e>
 8006c86:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c8a:	2230      	movs	r2, #48	; 0x30
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	454b      	cmp	r3, r9
 8006c90:	d307      	bcc.n	8006ca2 <__cvt+0xb6>
 8006c92:	4630      	mov	r0, r6
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	b008      	add	sp, #32
 8006c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	9107      	str	r1, [sp, #28]
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e7f0      	b.n	8006c8c <__cvt+0xa0>

08006caa <__exponent>:
 8006caa:	4603      	mov	r3, r0
 8006cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	f803 2b02 	strb.w	r2, [r3], #2
 8006cb4:	bfb6      	itet	lt
 8006cb6:	222d      	movlt	r2, #45	; 0x2d
 8006cb8:	222b      	movge	r2, #43	; 0x2b
 8006cba:	4249      	neglt	r1, r1
 8006cbc:	2909      	cmp	r1, #9
 8006cbe:	7042      	strb	r2, [r0, #1]
 8006cc0:	dd2b      	ble.n	8006d1a <__exponent+0x70>
 8006cc2:	f10d 0407 	add.w	r4, sp, #7
 8006cc6:	46a4      	mov	ip, r4
 8006cc8:	270a      	movs	r7, #10
 8006cca:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cce:	460a      	mov	r2, r1
 8006cd0:	46a6      	mov	lr, r4
 8006cd2:	fb07 1516 	mls	r5, r7, r6, r1
 8006cd6:	2a63      	cmp	r2, #99	; 0x63
 8006cd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ce6:	dcf0      	bgt.n	8006cca <__exponent+0x20>
 8006ce8:	3130      	adds	r1, #48	; 0x30
 8006cea:	f1ae 0502 	sub.w	r5, lr, #2
 8006cee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	1c44      	adds	r4, r0, #1
 8006cf6:	4561      	cmp	r1, ip
 8006cf8:	d30a      	bcc.n	8006d10 <__exponent+0x66>
 8006cfa:	f10d 0209 	add.w	r2, sp, #9
 8006cfe:	eba2 020e 	sub.w	r2, r2, lr
 8006d02:	4565      	cmp	r5, ip
 8006d04:	bf88      	it	hi
 8006d06:	2200      	movhi	r2, #0
 8006d08:	4413      	add	r3, r2
 8006d0a:	1a18      	subs	r0, r3, r0
 8006d0c:	b003      	add	sp, #12
 8006d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d18:	e7ed      	b.n	8006cf6 <__exponent+0x4c>
 8006d1a:	2330      	movs	r3, #48	; 0x30
 8006d1c:	3130      	adds	r1, #48	; 0x30
 8006d1e:	7083      	strb	r3, [r0, #2]
 8006d20:	70c1      	strb	r1, [r0, #3]
 8006d22:	1d03      	adds	r3, r0, #4
 8006d24:	e7f1      	b.n	8006d0a <__exponent+0x60>
	...

08006d28 <_printf_float>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	b091      	sub	sp, #68	; 0x44
 8006d2e:	460c      	mov	r4, r1
 8006d30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006d34:	4616      	mov	r6, r2
 8006d36:	461f      	mov	r7, r3
 8006d38:	4605      	mov	r5, r0
 8006d3a:	f001 fa63 	bl	8008204 <_localeconv_r>
 8006d3e:	6803      	ldr	r3, [r0, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	f7f9 fa70 	bl	8000228 <strlen>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8006d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d50:	900a      	str	r0, [sp, #40]	; 0x28
 8006d52:	3307      	adds	r3, #7
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	f103 0208 	add.w	r2, r3, #8
 8006d5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006d60:	f8d4 b000 	ldr.w	fp, [r4]
 8006d64:	f8c8 2000 	str.w	r2, [r8]
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006d74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4b9c      	ldr	r3, [pc, #624]	; (8006ff4 <_printf_float+0x2cc>)
 8006d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d84:	f7f9 feae 	bl	8000ae4 <__aeabi_dcmpun>
 8006d88:	bb70      	cbnz	r0, 8006de8 <_printf_float+0xc0>
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4b98      	ldr	r3, [pc, #608]	; (8006ff4 <_printf_float+0x2cc>)
 8006d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d94:	f7f9 fe88 	bl	8000aa8 <__aeabi_dcmple>
 8006d98:	bb30      	cbnz	r0, 8006de8 <_printf_float+0xc0>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4651      	mov	r1, sl
 8006da2:	f7f9 fe77 	bl	8000a94 <__aeabi_dcmplt>
 8006da6:	b110      	cbz	r0, 8006dae <_printf_float+0x86>
 8006da8:	232d      	movs	r3, #45	; 0x2d
 8006daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dae:	4b92      	ldr	r3, [pc, #584]	; (8006ff8 <_printf_float+0x2d0>)
 8006db0:	4892      	ldr	r0, [pc, #584]	; (8006ffc <_printf_float+0x2d4>)
 8006db2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006db6:	bf94      	ite	ls
 8006db8:	4698      	movls	r8, r3
 8006dba:	4680      	movhi	r8, r0
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	f04f 0a00 	mov.w	sl, #0
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	f02b 0304 	bic.w	r3, fp, #4
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	4633      	mov	r3, r6
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	9700      	str	r7, [sp, #0]
 8006dd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006dd4:	f000 f9d4 	bl	8007180 <_printf_common>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f040 8090 	bne.w	8006efe <_printf_float+0x1d6>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de2:	b011      	add	sp, #68	; 0x44
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	4642      	mov	r2, r8
 8006dea:	4653      	mov	r3, sl
 8006dec:	4640      	mov	r0, r8
 8006dee:	4651      	mov	r1, sl
 8006df0:	f7f9 fe78 	bl	8000ae4 <__aeabi_dcmpun>
 8006df4:	b148      	cbz	r0, 8006e0a <_printf_float+0xe2>
 8006df6:	f1ba 0f00 	cmp.w	sl, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	232d      	movlt	r3, #45	; 0x2d
 8006dfe:	4880      	ldr	r0, [pc, #512]	; (8007000 <_printf_float+0x2d8>)
 8006e00:	bfb8      	it	lt
 8006e02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e06:	4b7f      	ldr	r3, [pc, #508]	; (8007004 <_printf_float+0x2dc>)
 8006e08:	e7d3      	b.n	8006db2 <_printf_float+0x8a>
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	d142      	bne.n	8006e9a <_printf_float+0x172>
 8006e14:	2306      	movs	r3, #6
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	9206      	str	r2, [sp, #24]
 8006e1c:	aa0e      	add	r2, sp, #56	; 0x38
 8006e1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006e22:	aa0d      	add	r2, sp, #52	; 0x34
 8006e24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006e28:	9203      	str	r2, [sp, #12]
 8006e2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006e2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	6863      	ldr	r3, [r4, #4]
 8006e36:	4642      	mov	r2, r8
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	4653      	mov	r3, sl
 8006e3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e40:	f7ff fed4 	bl	8006bec <__cvt>
 8006e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e46:	4680      	mov	r8, r0
 8006e48:	2947      	cmp	r1, #71	; 0x47
 8006e4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e4c:	d108      	bne.n	8006e60 <_printf_float+0x138>
 8006e4e:	1cc8      	adds	r0, r1, #3
 8006e50:	db02      	blt.n	8006e58 <_printf_float+0x130>
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	4299      	cmp	r1, r3
 8006e56:	dd40      	ble.n	8006eda <_printf_float+0x1b2>
 8006e58:	f1a9 0902 	sub.w	r9, r9, #2
 8006e5c:	fa5f f989 	uxtb.w	r9, r9
 8006e60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e64:	d81f      	bhi.n	8006ea6 <_printf_float+0x17e>
 8006e66:	464a      	mov	r2, r9
 8006e68:	3901      	subs	r1, #1
 8006e6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e6e:	910d      	str	r1, [sp, #52]	; 0x34
 8006e70:	f7ff ff1b 	bl	8006caa <__exponent>
 8006e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e76:	4682      	mov	sl, r0
 8006e78:	1813      	adds	r3, r2, r0
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	dc02      	bgt.n	8006e86 <_printf_float+0x15e>
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	07d2      	lsls	r2, r2, #31
 8006e84:	d501      	bpl.n	8006e8a <_printf_float+0x162>
 8006e86:	3301      	adds	r3, #1
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d09b      	beq.n	8006dca <_printf_float+0xa2>
 8006e92:	232d      	movs	r3, #45	; 0x2d
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	e797      	b.n	8006dca <_printf_float+0xa2>
 8006e9a:	2947      	cmp	r1, #71	; 0x47
 8006e9c:	d1bc      	bne.n	8006e18 <_printf_float+0xf0>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ba      	bne.n	8006e18 <_printf_float+0xf0>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7b7      	b.n	8006e16 <_printf_float+0xee>
 8006ea6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006eaa:	d118      	bne.n	8006ede <_printf_float+0x1b6>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	dd0b      	ble.n	8006eca <_printf_float+0x1a2>
 8006eb2:	6121      	str	r1, [r4, #16]
 8006eb4:	b913      	cbnz	r3, 8006ebc <_printf_float+0x194>
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	07d0      	lsls	r0, r2, #31
 8006eba:	d502      	bpl.n	8006ec2 <_printf_float+0x19a>
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	440b      	add	r3, r1
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ec8:	e7df      	b.n	8006e8a <_printf_float+0x162>
 8006eca:	b913      	cbnz	r3, 8006ed2 <_printf_float+0x1aa>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	07d2      	lsls	r2, r2, #31
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_float+0x1ae>
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	e7f4      	b.n	8006ec0 <_printf_float+0x198>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e7f2      	b.n	8006ec0 <_printf_float+0x198>
 8006eda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	db05      	blt.n	8006ef0 <_printf_float+0x1c8>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	6121      	str	r1, [r4, #16]
 8006ee8:	07d8      	lsls	r0, r3, #31
 8006eea:	d5ea      	bpl.n	8006ec2 <_printf_float+0x19a>
 8006eec:	1c4b      	adds	r3, r1, #1
 8006eee:	e7e7      	b.n	8006ec0 <_printf_float+0x198>
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	bfcc      	ite	gt
 8006ef4:	2201      	movgt	r2, #1
 8006ef6:	f1c1 0202 	rsble	r2, r1, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	e7e0      	b.n	8006ec0 <_printf_float+0x198>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	055a      	lsls	r2, r3, #21
 8006f02:	d407      	bmi.n	8006f14 <_printf_float+0x1ec>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	4642      	mov	r2, r8
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d12b      	bne.n	8006f6a <_printf_float+0x242>
 8006f12:	e764      	b.n	8006dde <_printf_float+0xb6>
 8006f14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f18:	f240 80dd 	bls.w	80070d6 <_printf_float+0x3ae>
 8006f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	f7f9 fdac 	bl	8000a80 <__aeabi_dcmpeq>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d033      	beq.n	8006f94 <_printf_float+0x26c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	4a35      	ldr	r2, [pc, #212]	; (8007008 <_printf_float+0x2e0>)
 8006f34:	47b8      	blx	r7
 8006f36:	3001      	adds	r0, #1
 8006f38:	f43f af51 	beq.w	8006dde <_printf_float+0xb6>
 8006f3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f40:	429a      	cmp	r2, r3
 8006f42:	db02      	blt.n	8006f4a <_printf_float+0x222>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	07d8      	lsls	r0, r3, #31
 8006f48:	d50f      	bpl.n	8006f6a <_printf_float+0x242>
 8006f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	f43f af42 	beq.w	8006dde <_printf_float+0xb6>
 8006f5a:	f04f 0800 	mov.w	r8, #0
 8006f5e:	f104 091a 	add.w	r9, r4, #26
 8006f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4543      	cmp	r3, r8
 8006f68:	dc09      	bgt.n	8006f7e <_printf_float+0x256>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	079b      	lsls	r3, r3, #30
 8006f6e:	f100 8102 	bmi.w	8007176 <_printf_float+0x44e>
 8006f72:	68e0      	ldr	r0, [r4, #12]
 8006f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f76:	4298      	cmp	r0, r3
 8006f78:	bfb8      	it	lt
 8006f7a:	4618      	movlt	r0, r3
 8006f7c:	e731      	b.n	8006de2 <_printf_float+0xba>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	464a      	mov	r2, r9
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f af28 	beq.w	8006dde <_printf_float+0xb6>
 8006f8e:	f108 0801 	add.w	r8, r8, #1
 8006f92:	e7e6      	b.n	8006f62 <_printf_float+0x23a>
 8006f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dc38      	bgt.n	800700c <_printf_float+0x2e4>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <_printf_float+0x2e0>)
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f af1a 	beq.w	8006dde <_printf_float+0xb6>
 8006faa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d102      	bne.n	8006fb8 <_printf_float+0x290>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d5d8      	bpl.n	8006f6a <_printf_float+0x242>
 8006fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af0b 	beq.w	8006dde <_printf_float+0xb6>
 8006fc8:	f04f 0900 	mov.w	r9, #0
 8006fcc:	f104 0a1a 	add.w	sl, r4, #26
 8006fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd2:	425b      	negs	r3, r3
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	dc01      	bgt.n	8006fdc <_printf_float+0x2b4>
 8006fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fda:	e794      	b.n	8006f06 <_printf_float+0x1de>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4652      	mov	r2, sl
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f aef9 	beq.w	8006dde <_printf_float+0xb6>
 8006fec:	f109 0901 	add.w	r9, r9, #1
 8006ff0:	e7ee      	b.n	8006fd0 <_printf_float+0x2a8>
 8006ff2:	bf00      	nop
 8006ff4:	7fefffff 	.word	0x7fefffff
 8006ff8:	08009fd8 	.word	0x08009fd8
 8006ffc:	08009fdc 	.word	0x08009fdc
 8007000:	08009fe4 	.word	0x08009fe4
 8007004:	08009fe0 	.word	0x08009fe0
 8007008:	08009fe8 	.word	0x08009fe8
 800700c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007010:	429a      	cmp	r2, r3
 8007012:	bfa8      	it	ge
 8007014:	461a      	movge	r2, r3
 8007016:	2a00      	cmp	r2, #0
 8007018:	4691      	mov	r9, r2
 800701a:	dc37      	bgt.n	800708c <_printf_float+0x364>
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007024:	f104 021a 	add.w	r2, r4, #26
 8007028:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800702c:	ebaa 0309 	sub.w	r3, sl, r9
 8007030:	455b      	cmp	r3, fp
 8007032:	dc33      	bgt.n	800709c <_printf_float+0x374>
 8007034:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007038:	429a      	cmp	r2, r3
 800703a:	db3b      	blt.n	80070b4 <_printf_float+0x38c>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	07da      	lsls	r2, r3, #31
 8007040:	d438      	bmi.n	80070b4 <_printf_float+0x38c>
 8007042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007044:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007046:	eba3 020a 	sub.w	r2, r3, sl
 800704a:	eba3 0901 	sub.w	r9, r3, r1
 800704e:	4591      	cmp	r9, r2
 8007050:	bfa8      	it	ge
 8007052:	4691      	movge	r9, r2
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	dc34      	bgt.n	80070c4 <_printf_float+0x39c>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007062:	f104 0a1a 	add.w	sl, r4, #26
 8007066:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	eba3 0309 	sub.w	r3, r3, r9
 8007070:	4543      	cmp	r3, r8
 8007072:	f77f af7a 	ble.w	8006f6a <_printf_float+0x242>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f aeac 	beq.w	8006dde <_printf_float+0xb6>
 8007086:	f108 0801 	add.w	r8, r8, #1
 800708a:	e7ec      	b.n	8007066 <_printf_float+0x33e>
 800708c:	4613      	mov	r3, r2
 800708e:	4631      	mov	r1, r6
 8007090:	4642      	mov	r2, r8
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c0      	bne.n	800701c <_printf_float+0x2f4>
 800709a:	e6a0      	b.n	8006dde <_printf_float+0xb6>
 800709c:	2301      	movs	r3, #1
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f ae99 	beq.w	8006dde <_printf_float+0xb6>
 80070ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ae:	f10b 0b01 	add.w	fp, fp, #1
 80070b2:	e7b9      	b.n	8007028 <_printf_float+0x300>
 80070b4:	4631      	mov	r1, r6
 80070b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d1bf      	bne.n	8007042 <_printf_float+0x31a>
 80070c2:	e68c      	b.n	8006dde <_printf_float+0xb6>
 80070c4:	464b      	mov	r3, r9
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	eb08 020a 	add.w	r2, r8, sl
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1c2      	bne.n	800705a <_printf_float+0x332>
 80070d4:	e683      	b.n	8006dde <_printf_float+0xb6>
 80070d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d8:	2a01      	cmp	r2, #1
 80070da:	dc01      	bgt.n	80070e0 <_printf_float+0x3b8>
 80070dc:	07db      	lsls	r3, r3, #31
 80070de:	d537      	bpl.n	8007150 <_printf_float+0x428>
 80070e0:	2301      	movs	r3, #1
 80070e2:	4642      	mov	r2, r8
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f ae77 	beq.w	8006dde <_printf_float+0xb6>
 80070f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f ae6f 	beq.w	8006dde <_printf_float+0xb6>
 8007100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fcba 	bl	8000a80 <__aeabi_dcmpeq>
 800710c:	b9d8      	cbnz	r0, 8007146 <_printf_float+0x41e>
 800710e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007110:	f108 0201 	add.w	r2, r8, #1
 8007114:	3b01      	subs	r3, #1
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	d10e      	bne.n	800713e <_printf_float+0x416>
 8007120:	e65d      	b.n	8006dde <_printf_float+0xb6>
 8007122:	2301      	movs	r3, #1
 8007124:	464a      	mov	r2, r9
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	47b8      	blx	r7
 800712c:	3001      	adds	r0, #1
 800712e:	f43f ae56 	beq.w	8006dde <_printf_float+0xb6>
 8007132:	f108 0801 	add.w	r8, r8, #1
 8007136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007138:	3b01      	subs	r3, #1
 800713a:	4543      	cmp	r3, r8
 800713c:	dcf1      	bgt.n	8007122 <_printf_float+0x3fa>
 800713e:	4653      	mov	r3, sl
 8007140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007144:	e6e0      	b.n	8006f08 <_printf_float+0x1e0>
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	f104 091a 	add.w	r9, r4, #26
 800714e:	e7f2      	b.n	8007136 <_printf_float+0x40e>
 8007150:	2301      	movs	r3, #1
 8007152:	4642      	mov	r2, r8
 8007154:	e7df      	b.n	8007116 <_printf_float+0x3ee>
 8007156:	2301      	movs	r3, #1
 8007158:	464a      	mov	r2, r9
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f ae3c 	beq.w	8006dde <_printf_float+0xb6>
 8007166:	f108 0801 	add.w	r8, r8, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	4543      	cmp	r3, r8
 8007172:	dcf0      	bgt.n	8007156 <_printf_float+0x42e>
 8007174:	e6fd      	b.n	8006f72 <_printf_float+0x24a>
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	f104 0919 	add.w	r9, r4, #25
 800717e:	e7f4      	b.n	800716a <_printf_float+0x442>

08007180 <_printf_common>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	4616      	mov	r6, r2
 8007186:	4699      	mov	r9, r3
 8007188:	688a      	ldr	r2, [r1, #8]
 800718a:	690b      	ldr	r3, [r1, #16]
 800718c:	4607      	mov	r7, r0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfb8      	it	lt
 8007192:	4613      	movlt	r3, r2
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800719a:	460c      	mov	r4, r1
 800719c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a0:	b10a      	cbz	r2, 80071a6 <_printf_common+0x26>
 80071a2:	3301      	adds	r3, #1
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	0699      	lsls	r1, r3, #26
 80071aa:	bf42      	ittt	mi
 80071ac:	6833      	ldrmi	r3, [r6, #0]
 80071ae:	3302      	addmi	r3, #2
 80071b0:	6033      	strmi	r3, [r6, #0]
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	f015 0506 	ands.w	r5, r5, #6
 80071b8:	d106      	bne.n	80071c8 <_printf_common+0x48>
 80071ba:	f104 0a19 	add.w	sl, r4, #25
 80071be:	68e3      	ldr	r3, [r4, #12]
 80071c0:	6832      	ldr	r2, [r6, #0]
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	42ab      	cmp	r3, r5
 80071c6:	dc28      	bgt.n	800721a <_printf_common+0x9a>
 80071c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071cc:	1e13      	subs	r3, r2, #0
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	bf18      	it	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	0692      	lsls	r2, r2, #26
 80071d6:	d42d      	bmi.n	8007234 <_printf_common+0xb4>
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e0:	47c0      	blx	r8
 80071e2:	3001      	adds	r0, #1
 80071e4:	d020      	beq.n	8007228 <_printf_common+0xa8>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	68e5      	ldr	r5, [r4, #12]
 80071ea:	f003 0306 	and.w	r3, r3, #6
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	bf18      	it	ne
 80071f2:	2500      	movne	r5, #0
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	f04f 0600 	mov.w	r6, #0
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	bf08      	it	eq
 80071fe:	1aad      	subeq	r5, r5, r2
 8007200:	6922      	ldr	r2, [r4, #16]
 8007202:	bf08      	it	eq
 8007204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007208:	4293      	cmp	r3, r2
 800720a:	bfc4      	itt	gt
 800720c:	1a9b      	subgt	r3, r3, r2
 800720e:	18ed      	addgt	r5, r5, r3
 8007210:	341a      	adds	r4, #26
 8007212:	42b5      	cmp	r5, r6
 8007214:	d11a      	bne.n	800724c <_printf_common+0xcc>
 8007216:	2000      	movs	r0, #0
 8007218:	e008      	b.n	800722c <_printf_common+0xac>
 800721a:	2301      	movs	r3, #1
 800721c:	4652      	mov	r2, sl
 800721e:	4649      	mov	r1, r9
 8007220:	4638      	mov	r0, r7
 8007222:	47c0      	blx	r8
 8007224:	3001      	adds	r0, #1
 8007226:	d103      	bne.n	8007230 <_printf_common+0xb0>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	3501      	adds	r5, #1
 8007232:	e7c4      	b.n	80071be <_printf_common+0x3e>
 8007234:	2030      	movs	r0, #48	; 0x30
 8007236:	18e1      	adds	r1, r4, r3
 8007238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007242:	4422      	add	r2, r4
 8007244:	3302      	adds	r3, #2
 8007246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800724a:	e7c5      	b.n	80071d8 <_printf_common+0x58>
 800724c:	2301      	movs	r3, #1
 800724e:	4622      	mov	r2, r4
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d0e6      	beq.n	8007228 <_printf_common+0xa8>
 800725a:	3601      	adds	r6, #1
 800725c:	e7d9      	b.n	8007212 <_printf_common+0x92>
	...

08007260 <_printf_i>:
 8007260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	7e0f      	ldrb	r7, [r1, #24]
 8007266:	4691      	mov	r9, r2
 8007268:	2f78      	cmp	r7, #120	; 0x78
 800726a:	4680      	mov	r8, r0
 800726c:	460c      	mov	r4, r1
 800726e:	469a      	mov	sl, r3
 8007270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007276:	d807      	bhi.n	8007288 <_printf_i+0x28>
 8007278:	2f62      	cmp	r7, #98	; 0x62
 800727a:	d80a      	bhi.n	8007292 <_printf_i+0x32>
 800727c:	2f00      	cmp	r7, #0
 800727e:	f000 80d9 	beq.w	8007434 <_printf_i+0x1d4>
 8007282:	2f58      	cmp	r7, #88	; 0x58
 8007284:	f000 80a4 	beq.w	80073d0 <_printf_i+0x170>
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007290:	e03a      	b.n	8007308 <_printf_i+0xa8>
 8007292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007296:	2b15      	cmp	r3, #21
 8007298:	d8f6      	bhi.n	8007288 <_printf_i+0x28>
 800729a:	a101      	add	r1, pc, #4	; (adr r1, 80072a0 <_printf_i+0x40>)
 800729c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	08007289 	.word	0x08007289
 80072ac:	08007289 	.word	0x08007289
 80072b0:	08007289 	.word	0x08007289
 80072b4:	08007289 	.word	0x08007289
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007289 	.word	0x08007289
 80072c0:	08007289 	.word	0x08007289
 80072c4:	08007289 	.word	0x08007289
 80072c8:	08007289 	.word	0x08007289
 80072cc:	0800741b 	.word	0x0800741b
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073fd 	.word	0x080073fd
 80072d8:	08007289 	.word	0x08007289
 80072dc:	08007289 	.word	0x08007289
 80072e0:	0800743d 	.word	0x0800743d
 80072e4:	08007289 	.word	0x08007289
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	08007289 	.word	0x08007289
 80072f0:	08007289 	.word	0x08007289
 80072f4:	08007405 	.word	0x08007405
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007308:	2301      	movs	r3, #1
 800730a:	e0a4      	b.n	8007456 <_printf_i+0x1f6>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	6829      	ldr	r1, [r5, #0]
 8007310:	0606      	lsls	r6, r0, #24
 8007312:	f101 0304 	add.w	r3, r1, #4
 8007316:	d50a      	bpl.n	800732e <_printf_i+0xce>
 8007318:	680e      	ldr	r6, [r1, #0]
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	2e00      	cmp	r6, #0
 800731e:	da03      	bge.n	8007328 <_printf_i+0xc8>
 8007320:	232d      	movs	r3, #45	; 0x2d
 8007322:	4276      	negs	r6, r6
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007328:	230a      	movs	r3, #10
 800732a:	485e      	ldr	r0, [pc, #376]	; (80074a4 <_printf_i+0x244>)
 800732c:	e019      	b.n	8007362 <_printf_i+0x102>
 800732e:	680e      	ldr	r6, [r1, #0]
 8007330:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bf18      	it	ne
 8007338:	b236      	sxthne	r6, r6
 800733a:	e7ef      	b.n	800731c <_printf_i+0xbc>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	6029      	str	r1, [r5, #0]
 8007344:	0601      	lsls	r1, r0, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xec>
 8007348:	681e      	ldr	r6, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0xf2>
 800734c:	0646      	lsls	r6, r0, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xe8>
 8007350:	881e      	ldrh	r6, [r3, #0]
 8007352:	2f6f      	cmp	r7, #111	; 0x6f
 8007354:	bf0c      	ite	eq
 8007356:	2308      	moveq	r3, #8
 8007358:	230a      	movne	r3, #10
 800735a:	4852      	ldr	r0, [pc, #328]	; (80074a4 <_printf_i+0x244>)
 800735c:	2100      	movs	r1, #0
 800735e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007362:	6865      	ldr	r5, [r4, #4]
 8007364:	2d00      	cmp	r5, #0
 8007366:	bfa8      	it	ge
 8007368:	6821      	ldrge	r1, [r4, #0]
 800736a:	60a5      	str	r5, [r4, #8]
 800736c:	bfa4      	itt	ge
 800736e:	f021 0104 	bicge.w	r1, r1, #4
 8007372:	6021      	strge	r1, [r4, #0]
 8007374:	b90e      	cbnz	r6, 800737a <_printf_i+0x11a>
 8007376:	2d00      	cmp	r5, #0
 8007378:	d04d      	beq.n	8007416 <_printf_i+0x1b6>
 800737a:	4615      	mov	r5, r2
 800737c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007380:	fb03 6711 	mls	r7, r3, r1, r6
 8007384:	5dc7      	ldrb	r7, [r0, r7]
 8007386:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800738a:	4637      	mov	r7, r6
 800738c:	42bb      	cmp	r3, r7
 800738e:	460e      	mov	r6, r1
 8007390:	d9f4      	bls.n	800737c <_printf_i+0x11c>
 8007392:	2b08      	cmp	r3, #8
 8007394:	d10b      	bne.n	80073ae <_printf_i+0x14e>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07de      	lsls	r6, r3, #31
 800739a:	d508      	bpl.n	80073ae <_printf_i+0x14e>
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	4299      	cmp	r1, r3
 80073a2:	bfde      	ittt	le
 80073a4:	2330      	movle	r3, #48	; 0x30
 80073a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073ae:	1b52      	subs	r2, r2, r5
 80073b0:	6122      	str	r2, [r4, #16]
 80073b2:	464b      	mov	r3, r9
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	aa03      	add	r2, sp, #12
 80073be:	f7ff fedf 	bl	8007180 <_printf_common>
 80073c2:	3001      	adds	r0, #1
 80073c4:	d14c      	bne.n	8007460 <_printf_i+0x200>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ca:	b004      	add	sp, #16
 80073cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d0:	4834      	ldr	r0, [pc, #208]	; (80074a4 <_printf_i+0x244>)
 80073d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073d6:	6829      	ldr	r1, [r5, #0]
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	f851 6b04 	ldr.w	r6, [r1], #4
 80073de:	6029      	str	r1, [r5, #0]
 80073e0:	061d      	lsls	r5, r3, #24
 80073e2:	d514      	bpl.n	800740e <_printf_i+0x1ae>
 80073e4:	07df      	lsls	r7, r3, #31
 80073e6:	bf44      	itt	mi
 80073e8:	f043 0320 	orrmi.w	r3, r3, #32
 80073ec:	6023      	strmi	r3, [r4, #0]
 80073ee:	b91e      	cbnz	r6, 80073f8 <_printf_i+0x198>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	f023 0320 	bic.w	r3, r3, #32
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	2310      	movs	r3, #16
 80073fa:	e7af      	b.n	800735c <_printf_i+0xfc>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	f043 0320 	orr.w	r3, r3, #32
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	2378      	movs	r3, #120	; 0x78
 8007406:	4828      	ldr	r0, [pc, #160]	; (80074a8 <_printf_i+0x248>)
 8007408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800740c:	e7e3      	b.n	80073d6 <_printf_i+0x176>
 800740e:	0659      	lsls	r1, r3, #25
 8007410:	bf48      	it	mi
 8007412:	b2b6      	uxthmi	r6, r6
 8007414:	e7e6      	b.n	80073e4 <_printf_i+0x184>
 8007416:	4615      	mov	r5, r2
 8007418:	e7bb      	b.n	8007392 <_printf_i+0x132>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	6826      	ldr	r6, [r4, #0]
 800741e:	1d18      	adds	r0, r3, #4
 8007420:	6961      	ldr	r1, [r4, #20]
 8007422:	6028      	str	r0, [r5, #0]
 8007424:	0635      	lsls	r5, r6, #24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	d501      	bpl.n	800742e <_printf_i+0x1ce>
 800742a:	6019      	str	r1, [r3, #0]
 800742c:	e002      	b.n	8007434 <_printf_i+0x1d4>
 800742e:	0670      	lsls	r0, r6, #25
 8007430:	d5fb      	bpl.n	800742a <_printf_i+0x1ca>
 8007432:	8019      	strh	r1, [r3, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	4615      	mov	r5, r2
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	e7ba      	b.n	80073b2 <_printf_i+0x152>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	2100      	movs	r1, #0
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	602a      	str	r2, [r5, #0]
 8007444:	681d      	ldr	r5, [r3, #0]
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	4628      	mov	r0, r5
 800744a:	f000 fedf 	bl	800820c <memchr>
 800744e:	b108      	cbz	r0, 8007454 <_printf_i+0x1f4>
 8007450:	1b40      	subs	r0, r0, r5
 8007452:	6060      	str	r0, [r4, #4]
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	2300      	movs	r3, #0
 800745a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745e:	e7a8      	b.n	80073b2 <_printf_i+0x152>
 8007460:	462a      	mov	r2, r5
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	47d0      	blx	sl
 800746a:	3001      	adds	r0, #1
 800746c:	d0ab      	beq.n	80073c6 <_printf_i+0x166>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	079b      	lsls	r3, r3, #30
 8007472:	d413      	bmi.n	800749c <_printf_i+0x23c>
 8007474:	68e0      	ldr	r0, [r4, #12]
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	4298      	cmp	r0, r3
 800747a:	bfb8      	it	lt
 800747c:	4618      	movlt	r0, r3
 800747e:	e7a4      	b.n	80073ca <_printf_i+0x16a>
 8007480:	2301      	movs	r3, #1
 8007482:	4632      	mov	r2, r6
 8007484:	4649      	mov	r1, r9
 8007486:	4640      	mov	r0, r8
 8007488:	47d0      	blx	sl
 800748a:	3001      	adds	r0, #1
 800748c:	d09b      	beq.n	80073c6 <_printf_i+0x166>
 800748e:	3501      	adds	r5, #1
 8007490:	68e3      	ldr	r3, [r4, #12]
 8007492:	9903      	ldr	r1, [sp, #12]
 8007494:	1a5b      	subs	r3, r3, r1
 8007496:	42ab      	cmp	r3, r5
 8007498:	dcf2      	bgt.n	8007480 <_printf_i+0x220>
 800749a:	e7eb      	b.n	8007474 <_printf_i+0x214>
 800749c:	2500      	movs	r5, #0
 800749e:	f104 0619 	add.w	r6, r4, #25
 80074a2:	e7f5      	b.n	8007490 <_printf_i+0x230>
 80074a4:	08009fea 	.word	0x08009fea
 80074a8:	08009ffb 	.word	0x08009ffb

080074ac <_sbrk_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	2300      	movs	r3, #0
 80074b0:	4d05      	ldr	r5, [pc, #20]	; (80074c8 <_sbrk_r+0x1c>)
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f7fb fcba 	bl	8002e30 <_sbrk>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_sbrk_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_sbrk_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20000318 	.word	0x20000318

080074cc <siprintf>:
 80074cc:	b40e      	push	{r1, r2, r3}
 80074ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074d2:	b500      	push	{lr}
 80074d4:	b09c      	sub	sp, #112	; 0x70
 80074d6:	ab1d      	add	r3, sp, #116	; 0x74
 80074d8:	9002      	str	r0, [sp, #8]
 80074da:	9006      	str	r0, [sp, #24]
 80074dc:	9107      	str	r1, [sp, #28]
 80074de:	9104      	str	r1, [sp, #16]
 80074e0:	4808      	ldr	r0, [pc, #32]	; (8007504 <siprintf+0x38>)
 80074e2:	4909      	ldr	r1, [pc, #36]	; (8007508 <siprintf+0x3c>)
 80074e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	a902      	add	r1, sp, #8
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	f001 faa6 	bl	8008a40 <_svfiprintf_r>
 80074f4:	2200      	movs	r2, #0
 80074f6:	9b02      	ldr	r3, [sp, #8]
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	b01c      	add	sp, #112	; 0x70
 80074fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007500:	b003      	add	sp, #12
 8007502:	4770      	bx	lr
 8007504:	20000040 	.word	0x20000040
 8007508:	ffff0208 	.word	0xffff0208

0800750c <quorem>:
 800750c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	6903      	ldr	r3, [r0, #16]
 8007512:	690c      	ldr	r4, [r1, #16]
 8007514:	4607      	mov	r7, r0
 8007516:	42a3      	cmp	r3, r4
 8007518:	f2c0 8082 	blt.w	8007620 <quorem+0x114>
 800751c:	3c01      	subs	r4, #1
 800751e:	f100 0514 	add.w	r5, r0, #20
 8007522:	f101 0814 	add.w	r8, r1, #20
 8007526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007534:	3301      	adds	r3, #1
 8007536:	429a      	cmp	r2, r3
 8007538:	fbb2 f6f3 	udiv	r6, r2, r3
 800753c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007540:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007544:	d331      	bcc.n	80075aa <quorem+0x9e>
 8007546:	f04f 0e00 	mov.w	lr, #0
 800754a:	4640      	mov	r0, r8
 800754c:	46ac      	mov	ip, r5
 800754e:	46f2      	mov	sl, lr
 8007550:	f850 2b04 	ldr.w	r2, [r0], #4
 8007554:	b293      	uxth	r3, r2
 8007556:	fb06 e303 	mla	r3, r6, r3, lr
 800755a:	0c12      	lsrs	r2, r2, #16
 800755c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007560:	b29b      	uxth	r3, r3
 8007562:	fb06 e202 	mla	r2, r6, r2, lr
 8007566:	ebaa 0303 	sub.w	r3, sl, r3
 800756a:	f8dc a000 	ldr.w	sl, [ip]
 800756e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007572:	fa1f fa8a 	uxth.w	sl, sl
 8007576:	4453      	add	r3, sl
 8007578:	f8dc a000 	ldr.w	sl, [ip]
 800757c:	b292      	uxth	r2, r2
 800757e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007586:	b29b      	uxth	r3, r3
 8007588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800758c:	4581      	cmp	r9, r0
 800758e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007592:	f84c 3b04 	str.w	r3, [ip], #4
 8007596:	d2db      	bcs.n	8007550 <quorem+0x44>
 8007598:	f855 300b 	ldr.w	r3, [r5, fp]
 800759c:	b92b      	cbnz	r3, 80075aa <quorem+0x9e>
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	3b04      	subs	r3, #4
 80075a2:	429d      	cmp	r5, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	d32f      	bcc.n	8007608 <quorem+0xfc>
 80075a8:	613c      	str	r4, [r7, #16]
 80075aa:	4638      	mov	r0, r7
 80075ac:	f001 f8d4 	bl	8008758 <__mcmp>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	db25      	blt.n	8007600 <quorem+0xf4>
 80075b4:	4628      	mov	r0, r5
 80075b6:	f04f 0c00 	mov.w	ip, #0
 80075ba:	3601      	adds	r6, #1
 80075bc:	f858 1b04 	ldr.w	r1, [r8], #4
 80075c0:	f8d0 e000 	ldr.w	lr, [r0]
 80075c4:	b28b      	uxth	r3, r1
 80075c6:	ebac 0303 	sub.w	r3, ip, r3
 80075ca:	fa1f f28e 	uxth.w	r2, lr
 80075ce:	4413      	add	r3, r2
 80075d0:	0c0a      	lsrs	r2, r1, #16
 80075d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e0:	45c1      	cmp	r9, r8
 80075e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075e6:	f840 3b04 	str.w	r3, [r0], #4
 80075ea:	d2e7      	bcs.n	80075bc <quorem+0xb0>
 80075ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075f4:	b922      	cbnz	r2, 8007600 <quorem+0xf4>
 80075f6:	3b04      	subs	r3, #4
 80075f8:	429d      	cmp	r5, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	d30a      	bcc.n	8007614 <quorem+0x108>
 80075fe:	613c      	str	r4, [r7, #16]
 8007600:	4630      	mov	r0, r6
 8007602:	b003      	add	sp, #12
 8007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	3b04      	subs	r3, #4
 800760c:	2a00      	cmp	r2, #0
 800760e:	d1cb      	bne.n	80075a8 <quorem+0x9c>
 8007610:	3c01      	subs	r4, #1
 8007612:	e7c6      	b.n	80075a2 <quorem+0x96>
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	3b04      	subs	r3, #4
 8007618:	2a00      	cmp	r2, #0
 800761a:	d1f0      	bne.n	80075fe <quorem+0xf2>
 800761c:	3c01      	subs	r4, #1
 800761e:	e7eb      	b.n	80075f8 <quorem+0xec>
 8007620:	2000      	movs	r0, #0
 8007622:	e7ee      	b.n	8007602 <quorem+0xf6>
 8007624:	0000      	movs	r0, r0
	...

08007628 <_dtoa_r>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	4616      	mov	r6, r2
 800762e:	461f      	mov	r7, r3
 8007630:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007632:	b099      	sub	sp, #100	; 0x64
 8007634:	4605      	mov	r5, r0
 8007636:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800763a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800763e:	b974      	cbnz	r4, 800765e <_dtoa_r+0x36>
 8007640:	2010      	movs	r0, #16
 8007642:	f7ff f9e7 	bl	8006a14 <malloc>
 8007646:	4602      	mov	r2, r0
 8007648:	6268      	str	r0, [r5, #36]	; 0x24
 800764a:	b920      	cbnz	r0, 8007656 <_dtoa_r+0x2e>
 800764c:	21ea      	movs	r1, #234	; 0xea
 800764e:	4ba8      	ldr	r3, [pc, #672]	; (80078f0 <_dtoa_r+0x2c8>)
 8007650:	48a8      	ldr	r0, [pc, #672]	; (80078f4 <_dtoa_r+0x2cc>)
 8007652:	f001 faf5 	bl	8008c40 <__assert_func>
 8007656:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800765a:	6004      	str	r4, [r0, #0]
 800765c:	60c4      	str	r4, [r0, #12]
 800765e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	b151      	cbz	r1, 800767a <_dtoa_r+0x52>
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	2301      	movs	r3, #1
 8007668:	4093      	lsls	r3, r2
 800766a:	604a      	str	r2, [r1, #4]
 800766c:	608b      	str	r3, [r1, #8]
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fe34 	bl	80082dc <_Bfree>
 8007674:	2200      	movs	r2, #0
 8007676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	1e3b      	subs	r3, r7, #0
 800767c:	bfaf      	iteee	ge
 800767e:	2300      	movge	r3, #0
 8007680:	2201      	movlt	r2, #1
 8007682:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007686:	9305      	strlt	r3, [sp, #20]
 8007688:	bfa8      	it	ge
 800768a:	f8c8 3000 	strge.w	r3, [r8]
 800768e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007692:	4b99      	ldr	r3, [pc, #612]	; (80078f8 <_dtoa_r+0x2d0>)
 8007694:	bfb8      	it	lt
 8007696:	f8c8 2000 	strlt.w	r2, [r8]
 800769a:	ea33 0309 	bics.w	r3, r3, r9
 800769e:	d119      	bne.n	80076d4 <_dtoa_r+0xac>
 80076a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80076a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076ac:	4333      	orrs	r3, r6
 80076ae:	f000 857f 	beq.w	80081b0 <_dtoa_r+0xb88>
 80076b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076b4:	b953      	cbnz	r3, 80076cc <_dtoa_r+0xa4>
 80076b6:	4b91      	ldr	r3, [pc, #580]	; (80078fc <_dtoa_r+0x2d4>)
 80076b8:	e022      	b.n	8007700 <_dtoa_r+0xd8>
 80076ba:	4b91      	ldr	r3, [pc, #580]	; (8007900 <_dtoa_r+0x2d8>)
 80076bc:	9303      	str	r3, [sp, #12]
 80076be:	3308      	adds	r3, #8
 80076c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	9803      	ldr	r0, [sp, #12]
 80076c6:	b019      	add	sp, #100	; 0x64
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	4b8b      	ldr	r3, [pc, #556]	; (80078fc <_dtoa_r+0x2d4>)
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	3303      	adds	r3, #3
 80076d2:	e7f5      	b.n	80076c0 <_dtoa_r+0x98>
 80076d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80076dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	f7f9 f9cc 	bl	8000a80 <__aeabi_dcmpeq>
 80076e8:	4680      	mov	r8, r0
 80076ea:	b158      	cbz	r0, 8007704 <_dtoa_r+0xdc>
 80076ec:	2301      	movs	r3, #1
 80076ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8558 	beq.w	80081aa <_dtoa_r+0xb82>
 80076fa:	4882      	ldr	r0, [pc, #520]	; (8007904 <_dtoa_r+0x2dc>)
 80076fc:	6018      	str	r0, [r3, #0]
 80076fe:	1e43      	subs	r3, r0, #1
 8007700:	9303      	str	r3, [sp, #12]
 8007702:	e7df      	b.n	80076c4 <_dtoa_r+0x9c>
 8007704:	ab16      	add	r3, sp, #88	; 0x58
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	ab17      	add	r3, sp, #92	; 0x5c
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4628      	mov	r0, r5
 800770e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007712:	f001 f8c9 	bl	80088a8 <__d2b>
 8007716:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800771a:	4683      	mov	fp, r0
 800771c:	2c00      	cmp	r4, #0
 800771e:	d07f      	beq.n	8007820 <_dtoa_r+0x1f8>
 8007720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007726:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800772a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800772e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007732:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007736:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800773a:	2200      	movs	r2, #0
 800773c:	4b72      	ldr	r3, [pc, #456]	; (8007908 <_dtoa_r+0x2e0>)
 800773e:	f7f8 fd7f 	bl	8000240 <__aeabi_dsub>
 8007742:	a365      	add	r3, pc, #404	; (adr r3, 80078d8 <_dtoa_r+0x2b0>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 ff32 	bl	80005b0 <__aeabi_dmul>
 800774c:	a364      	add	r3, pc, #400	; (adr r3, 80078e0 <_dtoa_r+0x2b8>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fd77 	bl	8000244 <__adddf3>
 8007756:	4606      	mov	r6, r0
 8007758:	4620      	mov	r0, r4
 800775a:	460f      	mov	r7, r1
 800775c:	f7f8 febe 	bl	80004dc <__aeabi_i2d>
 8007760:	a361      	add	r3, pc, #388	; (adr r3, 80078e8 <_dtoa_r+0x2c0>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 ff23 	bl	80005b0 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
 8007772:	f7f8 fd67 	bl	8000244 <__adddf3>
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	f7f9 f9c9 	bl	8000b10 <__aeabi_d2iz>
 800777e:	2200      	movs	r2, #0
 8007780:	4682      	mov	sl, r0
 8007782:	2300      	movs	r3, #0
 8007784:	4630      	mov	r0, r6
 8007786:	4639      	mov	r1, r7
 8007788:	f7f9 f984 	bl	8000a94 <__aeabi_dcmplt>
 800778c:	b148      	cbz	r0, 80077a2 <_dtoa_r+0x17a>
 800778e:	4650      	mov	r0, sl
 8007790:	f7f8 fea4 	bl	80004dc <__aeabi_i2d>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	f7f9 f972 	bl	8000a80 <__aeabi_dcmpeq>
 800779c:	b908      	cbnz	r0, 80077a2 <_dtoa_r+0x17a>
 800779e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077a2:	f1ba 0f16 	cmp.w	sl, #22
 80077a6:	d858      	bhi.n	800785a <_dtoa_r+0x232>
 80077a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077ac:	4b57      	ldr	r3, [pc, #348]	; (800790c <_dtoa_r+0x2e4>)
 80077ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f9 f96d 	bl	8000a94 <__aeabi_dcmplt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d04f      	beq.n	800785e <_dtoa_r+0x236>
 80077be:	2300      	movs	r3, #0
 80077c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077c8:	1b1c      	subs	r4, r3, r4
 80077ca:	1e63      	subs	r3, r4, #1
 80077cc:	9309      	str	r3, [sp, #36]	; 0x24
 80077ce:	bf49      	itett	mi
 80077d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80077d4:	2300      	movpl	r3, #0
 80077d6:	9306      	strmi	r3, [sp, #24]
 80077d8:	2300      	movmi	r3, #0
 80077da:	bf54      	ite	pl
 80077dc:	9306      	strpl	r3, [sp, #24]
 80077de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80077e0:	f1ba 0f00 	cmp.w	sl, #0
 80077e4:	db3d      	blt.n	8007862 <_dtoa_r+0x23a>
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077ec:	4453      	add	r3, sl
 80077ee:	9309      	str	r3, [sp, #36]	; 0x24
 80077f0:	2300      	movs	r3, #0
 80077f2:	930a      	str	r3, [sp, #40]	; 0x28
 80077f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	f200 808c 	bhi.w	8007914 <_dtoa_r+0x2ec>
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	bfc4      	itt	gt
 8007800:	3b04      	subgt	r3, #4
 8007802:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007806:	bfc8      	it	gt
 8007808:	2400      	movgt	r4, #0
 800780a:	f1a3 0302 	sub.w	r3, r3, #2
 800780e:	bfd8      	it	le
 8007810:	2401      	movle	r4, #1
 8007812:	2b03      	cmp	r3, #3
 8007814:	f200 808a 	bhi.w	800792c <_dtoa_r+0x304>
 8007818:	e8df f003 	tbb	[pc, r3]
 800781c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007820:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007824:	441c      	add	r4, r3
 8007826:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800782a:	2b20      	cmp	r3, #32
 800782c:	bfc3      	ittte	gt
 800782e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007832:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007836:	fa09 f303 	lslgt.w	r3, r9, r3
 800783a:	f1c3 0320 	rsble	r3, r3, #32
 800783e:	bfc6      	itte	gt
 8007840:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007844:	4318      	orrgt	r0, r3
 8007846:	fa06 f003 	lslle.w	r0, r6, r3
 800784a:	f7f8 fe37 	bl	80004bc <__aeabi_ui2d>
 800784e:	2301      	movs	r3, #1
 8007850:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007854:	3c01      	subs	r4, #1
 8007856:	9313      	str	r3, [sp, #76]	; 0x4c
 8007858:	e76f      	b.n	800773a <_dtoa_r+0x112>
 800785a:	2301      	movs	r3, #1
 800785c:	e7b2      	b.n	80077c4 <_dtoa_r+0x19c>
 800785e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007860:	e7b1      	b.n	80077c6 <_dtoa_r+0x19e>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	eba3 030a 	sub.w	r3, r3, sl
 8007868:	9306      	str	r3, [sp, #24]
 800786a:	f1ca 0300 	rsb	r3, sl, #0
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	2300      	movs	r3, #0
 8007872:	930e      	str	r3, [sp, #56]	; 0x38
 8007874:	e7be      	b.n	80077f4 <_dtoa_r+0x1cc>
 8007876:	2300      	movs	r3, #0
 8007878:	930b      	str	r3, [sp, #44]	; 0x2c
 800787a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800787c:	2b00      	cmp	r3, #0
 800787e:	dc58      	bgt.n	8007932 <_dtoa_r+0x30a>
 8007880:	f04f 0901 	mov.w	r9, #1
 8007884:	464b      	mov	r3, r9
 8007886:	f8cd 9020 	str.w	r9, [sp, #32]
 800788a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800788e:	2200      	movs	r2, #0
 8007890:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007892:	6042      	str	r2, [r0, #4]
 8007894:	2204      	movs	r2, #4
 8007896:	f102 0614 	add.w	r6, r2, #20
 800789a:	429e      	cmp	r6, r3
 800789c:	6841      	ldr	r1, [r0, #4]
 800789e:	d94e      	bls.n	800793e <_dtoa_r+0x316>
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fcdb 	bl	800825c <_Balloc>
 80078a6:	9003      	str	r0, [sp, #12]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d14c      	bne.n	8007946 <_dtoa_r+0x31e>
 80078ac:	4602      	mov	r2, r0
 80078ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <_dtoa_r+0x2e8>)
 80078b4:	e6cc      	b.n	8007650 <_dtoa_r+0x28>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e7de      	b.n	8007878 <_dtoa_r+0x250>
 80078ba:	2300      	movs	r3, #0
 80078bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078c0:	eb0a 0903 	add.w	r9, sl, r3
 80078c4:	f109 0301 	add.w	r3, r9, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	9308      	str	r3, [sp, #32]
 80078cc:	bfb8      	it	lt
 80078ce:	2301      	movlt	r3, #1
 80078d0:	e7dd      	b.n	800788e <_dtoa_r+0x266>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e7f2      	b.n	80078bc <_dtoa_r+0x294>
 80078d6:	bf00      	nop
 80078d8:	636f4361 	.word	0x636f4361
 80078dc:	3fd287a7 	.word	0x3fd287a7
 80078e0:	8b60c8b3 	.word	0x8b60c8b3
 80078e4:	3fc68a28 	.word	0x3fc68a28
 80078e8:	509f79fb 	.word	0x509f79fb
 80078ec:	3fd34413 	.word	0x3fd34413
 80078f0:	0800a019 	.word	0x0800a019
 80078f4:	0800a030 	.word	0x0800a030
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	0800a015 	.word	0x0800a015
 8007900:	0800a00c 	.word	0x0800a00c
 8007904:	08009fe9 	.word	0x08009fe9
 8007908:	3ff80000 	.word	0x3ff80000
 800790c:	0800a120 	.word	0x0800a120
 8007910:	0800a08b 	.word	0x0800a08b
 8007914:	2401      	movs	r4, #1
 8007916:	2300      	movs	r3, #0
 8007918:	940b      	str	r4, [sp, #44]	; 0x2c
 800791a:	9322      	str	r3, [sp, #136]	; 0x88
 800791c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007920:	2200      	movs	r2, #0
 8007922:	2312      	movs	r3, #18
 8007924:	f8cd 9020 	str.w	r9, [sp, #32]
 8007928:	9223      	str	r2, [sp, #140]	; 0x8c
 800792a:	e7b0      	b.n	800788e <_dtoa_r+0x266>
 800792c:	2301      	movs	r3, #1
 800792e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007930:	e7f4      	b.n	800791c <_dtoa_r+0x2f4>
 8007932:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007936:	464b      	mov	r3, r9
 8007938:	f8cd 9020 	str.w	r9, [sp, #32]
 800793c:	e7a7      	b.n	800788e <_dtoa_r+0x266>
 800793e:	3101      	adds	r1, #1
 8007940:	6041      	str	r1, [r0, #4]
 8007942:	0052      	lsls	r2, r2, #1
 8007944:	e7a7      	b.n	8007896 <_dtoa_r+0x26e>
 8007946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007948:	9a03      	ldr	r2, [sp, #12]
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	2b0e      	cmp	r3, #14
 8007950:	f200 80a8 	bhi.w	8007aa4 <_dtoa_r+0x47c>
 8007954:	2c00      	cmp	r4, #0
 8007956:	f000 80a5 	beq.w	8007aa4 <_dtoa_r+0x47c>
 800795a:	f1ba 0f00 	cmp.w	sl, #0
 800795e:	dd34      	ble.n	80079ca <_dtoa_r+0x3a2>
 8007960:	4a9a      	ldr	r2, [pc, #616]	; (8007bcc <_dtoa_r+0x5a4>)
 8007962:	f00a 030f 	and.w	r3, sl, #15
 8007966:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800796a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800796e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007972:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007976:	ea4f 142a 	mov.w	r4, sl, asr #4
 800797a:	d016      	beq.n	80079aa <_dtoa_r+0x382>
 800797c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007980:	4b93      	ldr	r3, [pc, #588]	; (8007bd0 <_dtoa_r+0x5a8>)
 8007982:	2703      	movs	r7, #3
 8007984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007988:	f7f8 ff3c 	bl	8000804 <__aeabi_ddiv>
 800798c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007990:	f004 040f 	and.w	r4, r4, #15
 8007994:	4e8e      	ldr	r6, [pc, #568]	; (8007bd0 <_dtoa_r+0x5a8>)
 8007996:	b954      	cbnz	r4, 80079ae <_dtoa_r+0x386>
 8007998:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800799c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079a0:	f7f8 ff30 	bl	8000804 <__aeabi_ddiv>
 80079a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079a8:	e029      	b.n	80079fe <_dtoa_r+0x3d6>
 80079aa:	2702      	movs	r7, #2
 80079ac:	e7f2      	b.n	8007994 <_dtoa_r+0x36c>
 80079ae:	07e1      	lsls	r1, r4, #31
 80079b0:	d508      	bpl.n	80079c4 <_dtoa_r+0x39c>
 80079b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079ba:	f7f8 fdf9 	bl	80005b0 <__aeabi_dmul>
 80079be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079c2:	3701      	adds	r7, #1
 80079c4:	1064      	asrs	r4, r4, #1
 80079c6:	3608      	adds	r6, #8
 80079c8:	e7e5      	b.n	8007996 <_dtoa_r+0x36e>
 80079ca:	f000 80a5 	beq.w	8007b18 <_dtoa_r+0x4f0>
 80079ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079d2:	f1ca 0400 	rsb	r4, sl, #0
 80079d6:	4b7d      	ldr	r3, [pc, #500]	; (8007bcc <_dtoa_r+0x5a4>)
 80079d8:	f004 020f 	and.w	r2, r4, #15
 80079dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fde4 	bl	80005b0 <__aeabi_dmul>
 80079e8:	2702      	movs	r7, #2
 80079ea:	2300      	movs	r3, #0
 80079ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079f0:	4e77      	ldr	r6, [pc, #476]	; (8007bd0 <_dtoa_r+0x5a8>)
 80079f2:	1124      	asrs	r4, r4, #4
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	f040 8084 	bne.w	8007b02 <_dtoa_r+0x4da>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1d2      	bne.n	80079a4 <_dtoa_r+0x37c>
 80079fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 808b 	beq.w	8007b1c <_dtoa_r+0x4f4>
 8007a06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a12:	2200      	movs	r2, #0
 8007a14:	4b6f      	ldr	r3, [pc, #444]	; (8007bd4 <_dtoa_r+0x5ac>)
 8007a16:	f7f9 f83d 	bl	8000a94 <__aeabi_dcmplt>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d07e      	beq.n	8007b1c <_dtoa_r+0x4f4>
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d07b      	beq.n	8007b1c <_dtoa_r+0x4f4>
 8007a24:	f1b9 0f00 	cmp.w	r9, #0
 8007a28:	dd38      	ble.n	8007a9c <_dtoa_r+0x474>
 8007a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4b69      	ldr	r3, [pc, #420]	; (8007bd8 <_dtoa_r+0x5b0>)
 8007a32:	f7f8 fdbd 	bl	80005b0 <__aeabi_dmul>
 8007a36:	464c      	mov	r4, r9
 8007a38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a3c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007a40:	3701      	adds	r7, #1
 8007a42:	4638      	mov	r0, r7
 8007a44:	f7f8 fd4a 	bl	80004dc <__aeabi_i2d>
 8007a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4c:	f7f8 fdb0 	bl	80005b0 <__aeabi_dmul>
 8007a50:	2200      	movs	r2, #0
 8007a52:	4b62      	ldr	r3, [pc, #392]	; (8007bdc <_dtoa_r+0x5b4>)
 8007a54:	f7f8 fbf6 	bl	8000244 <__adddf3>
 8007a58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a60:	9611      	str	r6, [sp, #68]	; 0x44
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d15d      	bne.n	8007b22 <_dtoa_r+0x4fa>
 8007a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4b5c      	ldr	r3, [pc, #368]	; (8007be0 <_dtoa_r+0x5b8>)
 8007a6e:	f7f8 fbe7 	bl	8000240 <__aeabi_dsub>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a7a:	4633      	mov	r3, r6
 8007a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a7e:	f7f9 f827 	bl	8000ad0 <__aeabi_dcmpgt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 829c 	bne.w	8007fc0 <_dtoa_r+0x998>
 8007a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a92:	f7f8 ffff 	bl	8000a94 <__aeabi_dcmplt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f040 8290 	bne.w	8007fbc <_dtoa_r+0x994>
 8007a9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007aa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f2c0 8152 	blt.w	8007d50 <_dtoa_r+0x728>
 8007aac:	f1ba 0f0e 	cmp.w	sl, #14
 8007ab0:	f300 814e 	bgt.w	8007d50 <_dtoa_r+0x728>
 8007ab4:	4b45      	ldr	r3, [pc, #276]	; (8007bcc <_dtoa_r+0x5a4>)
 8007ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007abe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f280 80db 	bge.w	8007c80 <_dtoa_r+0x658>
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f300 80d7 	bgt.w	8007c80 <_dtoa_r+0x658>
 8007ad2:	f040 8272 	bne.w	8007fba <_dtoa_r+0x992>
 8007ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <_dtoa_r+0x5b8>)
 8007ade:	f7f8 fd67 	bl	80005b0 <__aeabi_dmul>
 8007ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae6:	f7f8 ffe9 	bl	8000abc <__aeabi_dcmpge>
 8007aea:	9c08      	ldr	r4, [sp, #32]
 8007aec:	4626      	mov	r6, r4
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f040 8248 	bne.w	8007f84 <_dtoa_r+0x95c>
 8007af4:	2331      	movs	r3, #49	; 0x31
 8007af6:	9f03      	ldr	r7, [sp, #12]
 8007af8:	f10a 0a01 	add.w	sl, sl, #1
 8007afc:	f807 3b01 	strb.w	r3, [r7], #1
 8007b00:	e244      	b.n	8007f8c <_dtoa_r+0x964>
 8007b02:	07e2      	lsls	r2, r4, #31
 8007b04:	d505      	bpl.n	8007b12 <_dtoa_r+0x4ea>
 8007b06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b0a:	f7f8 fd51 	bl	80005b0 <__aeabi_dmul>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	3701      	adds	r7, #1
 8007b12:	1064      	asrs	r4, r4, #1
 8007b14:	3608      	adds	r6, #8
 8007b16:	e76d      	b.n	80079f4 <_dtoa_r+0x3cc>
 8007b18:	2702      	movs	r7, #2
 8007b1a:	e770      	b.n	80079fe <_dtoa_r+0x3d6>
 8007b1c:	46d0      	mov	r8, sl
 8007b1e:	9c08      	ldr	r4, [sp, #32]
 8007b20:	e78f      	b.n	8007a42 <_dtoa_r+0x41a>
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <_dtoa_r+0x5a4>)
 8007b26:	4421      	add	r1, r4
 8007b28:	9112      	str	r1, [sp, #72]	; 0x48
 8007b2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b38:	2900      	cmp	r1, #0
 8007b3a:	d055      	beq.n	8007be8 <_dtoa_r+0x5c0>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	4929      	ldr	r1, [pc, #164]	; (8007be4 <_dtoa_r+0x5bc>)
 8007b40:	f7f8 fe60 	bl	8000804 <__aeabi_ddiv>
 8007b44:	463b      	mov	r3, r7
 8007b46:	4632      	mov	r2, r6
 8007b48:	f7f8 fb7a 	bl	8000240 <__aeabi_dsub>
 8007b4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b50:	9f03      	ldr	r7, [sp, #12]
 8007b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b56:	f7f8 ffdb 	bl	8000b10 <__aeabi_d2iz>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	f7f8 fcbe 	bl	80004dc <__aeabi_i2d>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b68:	f7f8 fb6a 	bl	8000240 <__aeabi_dsub>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	3430      	adds	r4, #48	; 0x30
 8007b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b7a:	f807 4b01 	strb.w	r4, [r7], #1
 8007b7e:	f7f8 ff89 	bl	8000a94 <__aeabi_dcmplt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d174      	bne.n	8007c70 <_dtoa_r+0x648>
 8007b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	4911      	ldr	r1, [pc, #68]	; (8007bd4 <_dtoa_r+0x5ac>)
 8007b8e:	f7f8 fb57 	bl	8000240 <__aeabi_dsub>
 8007b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b96:	f7f8 ff7d 	bl	8000a94 <__aeabi_dcmplt>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f040 80b7 	bne.w	8007d0e <_dtoa_r+0x6e6>
 8007ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ba2:	429f      	cmp	r7, r3
 8007ba4:	f43f af7a 	beq.w	8007a9c <_dtoa_r+0x474>
 8007ba8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <_dtoa_r+0x5b0>)
 8007bb0:	f7f8 fcfe 	bl	80005b0 <__aeabi_dmul>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <_dtoa_r+0x5b0>)
 8007bc0:	f7f8 fcf6 	bl	80005b0 <__aeabi_dmul>
 8007bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc8:	e7c3      	b.n	8007b52 <_dtoa_r+0x52a>
 8007bca:	bf00      	nop
 8007bcc:	0800a120 	.word	0x0800a120
 8007bd0:	0800a0f8 	.word	0x0800a0f8
 8007bd4:	3ff00000 	.word	0x3ff00000
 8007bd8:	40240000 	.word	0x40240000
 8007bdc:	401c0000 	.word	0x401c0000
 8007be0:	40140000 	.word	0x40140000
 8007be4:	3fe00000 	.word	0x3fe00000
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fce0 	bl	80005b0 <__aeabi_dmul>
 8007bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bf6:	9c03      	ldr	r4, [sp, #12]
 8007bf8:	9314      	str	r3, [sp, #80]	; 0x50
 8007bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfe:	f7f8 ff87 	bl	8000b10 <__aeabi_d2iz>
 8007c02:	9015      	str	r0, [sp, #84]	; 0x54
 8007c04:	f7f8 fc6a 	bl	80004dc <__aeabi_i2d>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c10:	f7f8 fb16 	bl	8000240 <__aeabi_dsub>
 8007c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c16:	4606      	mov	r6, r0
 8007c18:	3330      	adds	r3, #48	; 0x30
 8007c1a:	f804 3b01 	strb.w	r3, [r4], #1
 8007c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c20:	460f      	mov	r7, r1
 8007c22:	429c      	cmp	r4, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	d124      	bne.n	8007c74 <_dtoa_r+0x64c>
 8007c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c2e:	4bb0      	ldr	r3, [pc, #704]	; (8007ef0 <_dtoa_r+0x8c8>)
 8007c30:	f7f8 fb08 	bl	8000244 <__adddf3>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff48 	bl	8000ad0 <__aeabi_dcmpgt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d163      	bne.n	8007d0c <_dtoa_r+0x6e4>
 8007c44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c48:	2000      	movs	r0, #0
 8007c4a:	49a9      	ldr	r1, [pc, #676]	; (8007ef0 <_dtoa_r+0x8c8>)
 8007c4c:	f7f8 faf8 	bl	8000240 <__aeabi_dsub>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7f8 ff1c 	bl	8000a94 <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f43f af1d 	beq.w	8007a9c <_dtoa_r+0x474>
 8007c62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007c64:	1e7b      	subs	r3, r7, #1
 8007c66:	9314      	str	r3, [sp, #80]	; 0x50
 8007c68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007c6c:	2b30      	cmp	r3, #48	; 0x30
 8007c6e:	d0f8      	beq.n	8007c62 <_dtoa_r+0x63a>
 8007c70:	46c2      	mov	sl, r8
 8007c72:	e03b      	b.n	8007cec <_dtoa_r+0x6c4>
 8007c74:	4b9f      	ldr	r3, [pc, #636]	; (8007ef4 <_dtoa_r+0x8cc>)
 8007c76:	f7f8 fc9b 	bl	80005b0 <__aeabi_dmul>
 8007c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c7e:	e7bc      	b.n	8007bfa <_dtoa_r+0x5d2>
 8007c80:	9f03      	ldr	r7, [sp, #12]
 8007c82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fdb9 	bl	8000804 <__aeabi_ddiv>
 8007c92:	f7f8 ff3d 	bl	8000b10 <__aeabi_d2iz>
 8007c96:	4604      	mov	r4, r0
 8007c98:	f7f8 fc20 	bl	80004dc <__aeabi_i2d>
 8007c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ca0:	f7f8 fc86 	bl	80005b0 <__aeabi_dmul>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4649      	mov	r1, r9
 8007cac:	f7f8 fac8 	bl	8000240 <__aeabi_dsub>
 8007cb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007cb4:	f807 6b01 	strb.w	r6, [r7], #1
 8007cb8:	9e03      	ldr	r6, [sp, #12]
 8007cba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007cbe:	1bbe      	subs	r6, r7, r6
 8007cc0:	45b4      	cmp	ip, r6
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	d136      	bne.n	8007d36 <_dtoa_r+0x70e>
 8007cc8:	f7f8 fabc 	bl	8000244 <__adddf3>
 8007ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	f7f8 fefc 	bl	8000ad0 <__aeabi_dcmpgt>
 8007cd8:	bb58      	cbnz	r0, 8007d32 <_dtoa_r+0x70a>
 8007cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 fecd 	bl	8000a80 <__aeabi_dcmpeq>
 8007ce6:	b108      	cbz	r0, 8007cec <_dtoa_r+0x6c4>
 8007ce8:	07e1      	lsls	r1, r4, #31
 8007cea:	d422      	bmi.n	8007d32 <_dtoa_r+0x70a>
 8007cec:	4628      	mov	r0, r5
 8007cee:	4659      	mov	r1, fp
 8007cf0:	f000 faf4 	bl	80082dc <_Bfree>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	703b      	strb	r3, [r7, #0]
 8007cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007cfa:	f10a 0001 	add.w	r0, sl, #1
 8007cfe:	6018      	str	r0, [r3, #0]
 8007d00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f43f acde 	beq.w	80076c4 <_dtoa_r+0x9c>
 8007d08:	601f      	str	r7, [r3, #0]
 8007d0a:	e4db      	b.n	80076c4 <_dtoa_r+0x9c>
 8007d0c:	4627      	mov	r7, r4
 8007d0e:	463b      	mov	r3, r7
 8007d10:	461f      	mov	r7, r3
 8007d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d16:	2a39      	cmp	r2, #57	; 0x39
 8007d18:	d107      	bne.n	8007d2a <_dtoa_r+0x702>
 8007d1a:	9a03      	ldr	r2, [sp, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d1f7      	bne.n	8007d10 <_dtoa_r+0x6e8>
 8007d20:	2230      	movs	r2, #48	; 0x30
 8007d22:	9903      	ldr	r1, [sp, #12]
 8007d24:	f108 0801 	add.w	r8, r8, #1
 8007d28:	700a      	strb	r2, [r1, #0]
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	3201      	adds	r2, #1
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e79e      	b.n	8007c70 <_dtoa_r+0x648>
 8007d32:	46d0      	mov	r8, sl
 8007d34:	e7eb      	b.n	8007d0e <_dtoa_r+0x6e6>
 8007d36:	2200      	movs	r2, #0
 8007d38:	4b6e      	ldr	r3, [pc, #440]	; (8007ef4 <_dtoa_r+0x8cc>)
 8007d3a:	f7f8 fc39 	bl	80005b0 <__aeabi_dmul>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2300      	movs	r3, #0
 8007d42:	4680      	mov	r8, r0
 8007d44:	4689      	mov	r9, r1
 8007d46:	f7f8 fe9b 	bl	8000a80 <__aeabi_dcmpeq>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d09b      	beq.n	8007c86 <_dtoa_r+0x65e>
 8007d4e:	e7cd      	b.n	8007cec <_dtoa_r+0x6c4>
 8007d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	f000 80d0 	beq.w	8007ef8 <_dtoa_r+0x8d0>
 8007d58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d5a:	2a01      	cmp	r2, #1
 8007d5c:	f300 80ae 	bgt.w	8007ebc <_dtoa_r+0x894>
 8007d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	f000 80a6 	beq.w	8007eb4 <_dtoa_r+0x88c>
 8007d68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d6e:	9f06      	ldr	r7, [sp, #24]
 8007d70:	9a06      	ldr	r2, [sp, #24]
 8007d72:	2101      	movs	r1, #1
 8007d74:	441a      	add	r2, r3
 8007d76:	9206      	str	r2, [sp, #24]
 8007d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	441a      	add	r2, r3
 8007d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d80:	f000 fb62 	bl	8008448 <__i2b>
 8007d84:	4606      	mov	r6, r0
 8007d86:	2f00      	cmp	r7, #0
 8007d88:	dd0c      	ble.n	8007da4 <_dtoa_r+0x77c>
 8007d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd09      	ble.n	8007da4 <_dtoa_r+0x77c>
 8007d90:	42bb      	cmp	r3, r7
 8007d92:	bfa8      	it	ge
 8007d94:	463b      	movge	r3, r7
 8007d96:	9a06      	ldr	r2, [sp, #24]
 8007d98:	1aff      	subs	r7, r7, r3
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	9206      	str	r2, [sp, #24]
 8007d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	b1f3      	cbz	r3, 8007de6 <_dtoa_r+0x7be>
 8007da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80a8 	beq.w	8007f00 <_dtoa_r+0x8d8>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	dd10      	ble.n	8007dd6 <_dtoa_r+0x7ae>
 8007db4:	4631      	mov	r1, r6
 8007db6:	4622      	mov	r2, r4
 8007db8:	4628      	mov	r0, r5
 8007dba:	f000 fc03 	bl	80085c4 <__pow5mult>
 8007dbe:	465a      	mov	r2, fp
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 fb55 	bl	8008474 <__multiply>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	4659      	mov	r1, fp
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 fa84 	bl	80082dc <_Bfree>
 8007dd4:	46c3      	mov	fp, r8
 8007dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd8:	1b1a      	subs	r2, r3, r4
 8007dda:	d004      	beq.n	8007de6 <_dtoa_r+0x7be>
 8007ddc:	4659      	mov	r1, fp
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 fbf0 	bl	80085c4 <__pow5mult>
 8007de4:	4683      	mov	fp, r0
 8007de6:	2101      	movs	r1, #1
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 fb2d 	bl	8008448 <__i2b>
 8007dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df0:	4604      	mov	r4, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f340 8086 	ble.w	8007f04 <_dtoa_r+0x8dc>
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 fbe1 	bl	80085c4 <__pow5mult>
 8007e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e04:	4604      	mov	r4, r0
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	dd7f      	ble.n	8007f0a <_dtoa_r+0x8e2>
 8007e0a:	f04f 0800 	mov.w	r8, #0
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e14:	6918      	ldr	r0, [r3, #16]
 8007e16:	f000 fac9 	bl	80083ac <__hi0bits>
 8007e1a:	f1c0 0020 	rsb	r0, r0, #32
 8007e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e20:	4418      	add	r0, r3
 8007e22:	f010 001f 	ands.w	r0, r0, #31
 8007e26:	f000 8092 	beq.w	8007f4e <_dtoa_r+0x926>
 8007e2a:	f1c0 0320 	rsb	r3, r0, #32
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	f340 808a 	ble.w	8007f48 <_dtoa_r+0x920>
 8007e34:	f1c0 001c 	rsb	r0, r0, #28
 8007e38:	9b06      	ldr	r3, [sp, #24]
 8007e3a:	4407      	add	r7, r0
 8007e3c:	4403      	add	r3, r0
 8007e3e:	9306      	str	r3, [sp, #24]
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	4403      	add	r3, r0
 8007e44:	9309      	str	r3, [sp, #36]	; 0x24
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dd05      	ble.n	8007e58 <_dtoa_r+0x830>
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4628      	mov	r0, r5
 8007e52:	f000 fc11 	bl	8008678 <__lshift>
 8007e56:	4683      	mov	fp, r0
 8007e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dd05      	ble.n	8007e6a <_dtoa_r+0x842>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	461a      	mov	r2, r3
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 fc08 	bl	8008678 <__lshift>
 8007e68:	4604      	mov	r4, r0
 8007e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d070      	beq.n	8007f52 <_dtoa_r+0x92a>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fc70 	bl	8008758 <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	da6a      	bge.n	8007f52 <_dtoa_r+0x92a>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4659      	mov	r1, fp
 8007e80:	220a      	movs	r2, #10
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 fa4c 	bl	8008320 <__multadd>
 8007e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8a:	4683      	mov	fp, r0
 8007e8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8194 	beq.w	80081be <_dtoa_r+0xb96>
 8007e96:	4631      	mov	r1, r6
 8007e98:	2300      	movs	r3, #0
 8007e9a:	220a      	movs	r2, #10
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 fa3f 	bl	8008320 <__multadd>
 8007ea2:	f1b9 0f00 	cmp.w	r9, #0
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	f300 8093 	bgt.w	8007fd2 <_dtoa_r+0x9aa>
 8007eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	dc57      	bgt.n	8007f62 <_dtoa_r+0x93a>
 8007eb2:	e08e      	b.n	8007fd2 <_dtoa_r+0x9aa>
 8007eb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eba:	e757      	b.n	8007d6c <_dtoa_r+0x744>
 8007ebc:	9b08      	ldr	r3, [sp, #32]
 8007ebe:	1e5c      	subs	r4, r3, #1
 8007ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	bfb7      	itett	lt
 8007ec6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ec8:	1b1c      	subge	r4, r3, r4
 8007eca:	1ae2      	sublt	r2, r4, r3
 8007ecc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ece:	bfbe      	ittt	lt
 8007ed0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007ed2:	189b      	addlt	r3, r3, r2
 8007ed4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	bfb8      	it	lt
 8007eda:	2400      	movlt	r4, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfbb      	ittet	lt
 8007ee0:	9b06      	ldrlt	r3, [sp, #24]
 8007ee2:	9a08      	ldrlt	r2, [sp, #32]
 8007ee4:	9f06      	ldrge	r7, [sp, #24]
 8007ee6:	1a9f      	sublt	r7, r3, r2
 8007ee8:	bfac      	ite	ge
 8007eea:	9b08      	ldrge	r3, [sp, #32]
 8007eec:	2300      	movlt	r3, #0
 8007eee:	e73f      	b.n	8007d70 <_dtoa_r+0x748>
 8007ef0:	3fe00000 	.word	0x3fe00000
 8007ef4:	40240000 	.word	0x40240000
 8007ef8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007efa:	9f06      	ldr	r7, [sp, #24]
 8007efc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007efe:	e742      	b.n	8007d86 <_dtoa_r+0x75e>
 8007f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f02:	e76b      	b.n	8007ddc <_dtoa_r+0x7b4>
 8007f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	dc19      	bgt.n	8007f3e <_dtoa_r+0x916>
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	b9bb      	cbnz	r3, 8007f3e <_dtoa_r+0x916>
 8007f0e:	9b05      	ldr	r3, [sp, #20]
 8007f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f14:	b99b      	cbnz	r3, 8007f3e <_dtoa_r+0x916>
 8007f16:	9b05      	ldr	r3, [sp, #20]
 8007f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	0d1b      	lsrs	r3, r3, #20
 8007f1e:	051b      	lsls	r3, r3, #20
 8007f20:	b183      	cbz	r3, 8007f44 <_dtoa_r+0x91c>
 8007f22:	f04f 0801 	mov.w	r8, #1
 8007f26:	9b06      	ldr	r3, [sp, #24]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	3301      	adds	r3, #1
 8007f30:	9309      	str	r3, [sp, #36]	; 0x24
 8007f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f47f af6a 	bne.w	8007e0e <_dtoa_r+0x7e6>
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e76f      	b.n	8007e1e <_dtoa_r+0x7f6>
 8007f3e:	f04f 0800 	mov.w	r8, #0
 8007f42:	e7f6      	b.n	8007f32 <_dtoa_r+0x90a>
 8007f44:	4698      	mov	r8, r3
 8007f46:	e7f4      	b.n	8007f32 <_dtoa_r+0x90a>
 8007f48:	f43f af7d 	beq.w	8007e46 <_dtoa_r+0x81e>
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	301c      	adds	r0, #28
 8007f50:	e772      	b.n	8007e38 <_dtoa_r+0x810>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dc36      	bgt.n	8007fc6 <_dtoa_r+0x99e>
 8007f58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	dd33      	ble.n	8007fc6 <_dtoa_r+0x99e>
 8007f5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f62:	f1b9 0f00 	cmp.w	r9, #0
 8007f66:	d10d      	bne.n	8007f84 <_dtoa_r+0x95c>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 f9d6 	bl	8008320 <__multadd>
 8007f74:	4601      	mov	r1, r0
 8007f76:	4604      	mov	r4, r0
 8007f78:	4658      	mov	r0, fp
 8007f7a:	f000 fbed 	bl	8008758 <__mcmp>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f73f adb8 	bgt.w	8007af4 <_dtoa_r+0x4cc>
 8007f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f86:	9f03      	ldr	r7, [sp, #12]
 8007f88:	ea6f 0a03 	mvn.w	sl, r3
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f9a2 	bl	80082dc <_Bfree>
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	f43f aea7 	beq.w	8007cec <_dtoa_r+0x6c4>
 8007f9e:	f1b8 0f00 	cmp.w	r8, #0
 8007fa2:	d005      	beq.n	8007fb0 <_dtoa_r+0x988>
 8007fa4:	45b0      	cmp	r8, r6
 8007fa6:	d003      	beq.n	8007fb0 <_dtoa_r+0x988>
 8007fa8:	4641      	mov	r1, r8
 8007faa:	4628      	mov	r0, r5
 8007fac:	f000 f996 	bl	80082dc <_Bfree>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f000 f992 	bl	80082dc <_Bfree>
 8007fb8:	e698      	b.n	8007cec <_dtoa_r+0x6c4>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	4626      	mov	r6, r4
 8007fbe:	e7e1      	b.n	8007f84 <_dtoa_r+0x95c>
 8007fc0:	46c2      	mov	sl, r8
 8007fc2:	4626      	mov	r6, r4
 8007fc4:	e596      	b.n	8007af4 <_dtoa_r+0x4cc>
 8007fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80fd 	beq.w	80081cc <_dtoa_r+0xba4>
 8007fd2:	2f00      	cmp	r7, #0
 8007fd4:	dd05      	ble.n	8007fe2 <_dtoa_r+0x9ba>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	463a      	mov	r2, r7
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 fb4c 	bl	8008678 <__lshift>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	f1b8 0f00 	cmp.w	r8, #0
 8007fe6:	d05c      	beq.n	80080a2 <_dtoa_r+0xa7a>
 8007fe8:	4628      	mov	r0, r5
 8007fea:	6871      	ldr	r1, [r6, #4]
 8007fec:	f000 f936 	bl	800825c <_Balloc>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	b928      	cbnz	r0, 8008000 <_dtoa_r+0x9d8>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ffa:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <_dtoa_r+0xbd0>)
 8007ffc:	f7ff bb28 	b.w	8007650 <_dtoa_r+0x28>
 8008000:	6932      	ldr	r2, [r6, #16]
 8008002:	f106 010c 	add.w	r1, r6, #12
 8008006:	3202      	adds	r2, #2
 8008008:	0092      	lsls	r2, r2, #2
 800800a:	300c      	adds	r0, #12
 800800c:	f000 f90c 	bl	8008228 <memcpy>
 8008010:	2201      	movs	r2, #1
 8008012:	4639      	mov	r1, r7
 8008014:	4628      	mov	r0, r5
 8008016:	f000 fb2f 	bl	8008678 <__lshift>
 800801a:	46b0      	mov	r8, r6
 800801c:	4606      	mov	r6, r0
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	9308      	str	r3, [sp, #32]
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	444b      	add	r3, r9
 8008028:	930a      	str	r3, [sp, #40]	; 0x28
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	9b08      	ldr	r3, [sp, #32]
 8008034:	4621      	mov	r1, r4
 8008036:	3b01      	subs	r3, #1
 8008038:	4658      	mov	r0, fp
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	f7ff fa66 	bl	800750c <quorem>
 8008040:	4603      	mov	r3, r0
 8008042:	4641      	mov	r1, r8
 8008044:	3330      	adds	r3, #48	; 0x30
 8008046:	9006      	str	r0, [sp, #24]
 8008048:	4658      	mov	r0, fp
 800804a:	930b      	str	r3, [sp, #44]	; 0x2c
 800804c:	f000 fb84 	bl	8008758 <__mcmp>
 8008050:	4632      	mov	r2, r6
 8008052:	4681      	mov	r9, r0
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 fb9a 	bl	8008790 <__mdiff>
 800805c:	68c2      	ldr	r2, [r0, #12]
 800805e:	4607      	mov	r7, r0
 8008060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008062:	bb02      	cbnz	r2, 80080a6 <_dtoa_r+0xa7e>
 8008064:	4601      	mov	r1, r0
 8008066:	4658      	mov	r0, fp
 8008068:	f000 fb76 	bl	8008758 <__mcmp>
 800806c:	4602      	mov	r2, r0
 800806e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008070:	4639      	mov	r1, r7
 8008072:	4628      	mov	r0, r5
 8008074:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008078:	f000 f930 	bl	80082dc <_Bfree>
 800807c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800807e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008080:	9f08      	ldr	r7, [sp, #32]
 8008082:	ea43 0102 	orr.w	r1, r3, r2
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	430b      	orrs	r3, r1
 800808a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808c:	d10d      	bne.n	80080aa <_dtoa_r+0xa82>
 800808e:	2b39      	cmp	r3, #57	; 0x39
 8008090:	d029      	beq.n	80080e6 <_dtoa_r+0xabe>
 8008092:	f1b9 0f00 	cmp.w	r9, #0
 8008096:	dd01      	ble.n	800809c <_dtoa_r+0xa74>
 8008098:	9b06      	ldr	r3, [sp, #24]
 800809a:	3331      	adds	r3, #49	; 0x31
 800809c:	9a04      	ldr	r2, [sp, #16]
 800809e:	7013      	strb	r3, [r2, #0]
 80080a0:	e776      	b.n	8007f90 <_dtoa_r+0x968>
 80080a2:	4630      	mov	r0, r6
 80080a4:	e7b9      	b.n	800801a <_dtoa_r+0x9f2>
 80080a6:	2201      	movs	r2, #1
 80080a8:	e7e2      	b.n	8008070 <_dtoa_r+0xa48>
 80080aa:	f1b9 0f00 	cmp.w	r9, #0
 80080ae:	db06      	blt.n	80080be <_dtoa_r+0xa96>
 80080b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80080b2:	ea41 0909 	orr.w	r9, r1, r9
 80080b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b8:	ea59 0101 	orrs.w	r1, r9, r1
 80080bc:	d120      	bne.n	8008100 <_dtoa_r+0xad8>
 80080be:	2a00      	cmp	r2, #0
 80080c0:	ddec      	ble.n	800809c <_dtoa_r+0xa74>
 80080c2:	4659      	mov	r1, fp
 80080c4:	2201      	movs	r2, #1
 80080c6:	4628      	mov	r0, r5
 80080c8:	9308      	str	r3, [sp, #32]
 80080ca:	f000 fad5 	bl	8008678 <__lshift>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4683      	mov	fp, r0
 80080d2:	f000 fb41 	bl	8008758 <__mcmp>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	9b08      	ldr	r3, [sp, #32]
 80080da:	dc02      	bgt.n	80080e2 <_dtoa_r+0xaba>
 80080dc:	d1de      	bne.n	800809c <_dtoa_r+0xa74>
 80080de:	07da      	lsls	r2, r3, #31
 80080e0:	d5dc      	bpl.n	800809c <_dtoa_r+0xa74>
 80080e2:	2b39      	cmp	r3, #57	; 0x39
 80080e4:	d1d8      	bne.n	8008098 <_dtoa_r+0xa70>
 80080e6:	2339      	movs	r3, #57	; 0x39
 80080e8:	9a04      	ldr	r2, [sp, #16]
 80080ea:	7013      	strb	r3, [r2, #0]
 80080ec:	463b      	mov	r3, r7
 80080ee:	461f      	mov	r7, r3
 80080f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	2a39      	cmp	r2, #57	; 0x39
 80080f8:	d050      	beq.n	800819c <_dtoa_r+0xb74>
 80080fa:	3201      	adds	r2, #1
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e747      	b.n	8007f90 <_dtoa_r+0x968>
 8008100:	2a00      	cmp	r2, #0
 8008102:	dd03      	ble.n	800810c <_dtoa_r+0xae4>
 8008104:	2b39      	cmp	r3, #57	; 0x39
 8008106:	d0ee      	beq.n	80080e6 <_dtoa_r+0xabe>
 8008108:	3301      	adds	r3, #1
 800810a:	e7c7      	b.n	800809c <_dtoa_r+0xa74>
 800810c:	9a08      	ldr	r2, [sp, #32]
 800810e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008110:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008114:	428a      	cmp	r2, r1
 8008116:	d02a      	beq.n	800816e <_dtoa_r+0xb46>
 8008118:	4659      	mov	r1, fp
 800811a:	2300      	movs	r3, #0
 800811c:	220a      	movs	r2, #10
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f8fe 	bl	8008320 <__multadd>
 8008124:	45b0      	cmp	r8, r6
 8008126:	4683      	mov	fp, r0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	f04f 020a 	mov.w	r2, #10
 8008130:	4641      	mov	r1, r8
 8008132:	4628      	mov	r0, r5
 8008134:	d107      	bne.n	8008146 <_dtoa_r+0xb1e>
 8008136:	f000 f8f3 	bl	8008320 <__multadd>
 800813a:	4680      	mov	r8, r0
 800813c:	4606      	mov	r6, r0
 800813e:	9b08      	ldr	r3, [sp, #32]
 8008140:	3301      	adds	r3, #1
 8008142:	9308      	str	r3, [sp, #32]
 8008144:	e775      	b.n	8008032 <_dtoa_r+0xa0a>
 8008146:	f000 f8eb 	bl	8008320 <__multadd>
 800814a:	4631      	mov	r1, r6
 800814c:	4680      	mov	r8, r0
 800814e:	2300      	movs	r3, #0
 8008150:	220a      	movs	r2, #10
 8008152:	4628      	mov	r0, r5
 8008154:	f000 f8e4 	bl	8008320 <__multadd>
 8008158:	4606      	mov	r6, r0
 800815a:	e7f0      	b.n	800813e <_dtoa_r+0xb16>
 800815c:	f1b9 0f00 	cmp.w	r9, #0
 8008160:	bfcc      	ite	gt
 8008162:	464f      	movgt	r7, r9
 8008164:	2701      	movle	r7, #1
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	9a03      	ldr	r2, [sp, #12]
 800816c:	4417      	add	r7, r2
 800816e:	4659      	mov	r1, fp
 8008170:	2201      	movs	r2, #1
 8008172:	4628      	mov	r0, r5
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	f000 fa7f 	bl	8008678 <__lshift>
 800817a:	4621      	mov	r1, r4
 800817c:	4683      	mov	fp, r0
 800817e:	f000 faeb 	bl	8008758 <__mcmp>
 8008182:	2800      	cmp	r0, #0
 8008184:	dcb2      	bgt.n	80080ec <_dtoa_r+0xac4>
 8008186:	d102      	bne.n	800818e <_dtoa_r+0xb66>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	07db      	lsls	r3, r3, #31
 800818c:	d4ae      	bmi.n	80080ec <_dtoa_r+0xac4>
 800818e:	463b      	mov	r3, r7
 8008190:	461f      	mov	r7, r3
 8008192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008196:	2a30      	cmp	r2, #48	; 0x30
 8008198:	d0fa      	beq.n	8008190 <_dtoa_r+0xb68>
 800819a:	e6f9      	b.n	8007f90 <_dtoa_r+0x968>
 800819c:	9a03      	ldr	r2, [sp, #12]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d1a5      	bne.n	80080ee <_dtoa_r+0xac6>
 80081a2:	2331      	movs	r3, #49	; 0x31
 80081a4:	f10a 0a01 	add.w	sl, sl, #1
 80081a8:	e779      	b.n	800809e <_dtoa_r+0xa76>
 80081aa:	4b14      	ldr	r3, [pc, #80]	; (80081fc <_dtoa_r+0xbd4>)
 80081ac:	f7ff baa8 	b.w	8007700 <_dtoa_r+0xd8>
 80081b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f47f aa81 	bne.w	80076ba <_dtoa_r+0x92>
 80081b8:	4b11      	ldr	r3, [pc, #68]	; (8008200 <_dtoa_r+0xbd8>)
 80081ba:	f7ff baa1 	b.w	8007700 <_dtoa_r+0xd8>
 80081be:	f1b9 0f00 	cmp.w	r9, #0
 80081c2:	dc03      	bgt.n	80081cc <_dtoa_r+0xba4>
 80081c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	f73f aecb 	bgt.w	8007f62 <_dtoa_r+0x93a>
 80081cc:	9f03      	ldr	r7, [sp, #12]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4658      	mov	r0, fp
 80081d2:	f7ff f99b 	bl	800750c <quorem>
 80081d6:	9a03      	ldr	r2, [sp, #12]
 80081d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80081dc:	f807 3b01 	strb.w	r3, [r7], #1
 80081e0:	1aba      	subs	r2, r7, r2
 80081e2:	4591      	cmp	r9, r2
 80081e4:	ddba      	ble.n	800815c <_dtoa_r+0xb34>
 80081e6:	4659      	mov	r1, fp
 80081e8:	2300      	movs	r3, #0
 80081ea:	220a      	movs	r2, #10
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f897 	bl	8008320 <__multadd>
 80081f2:	4683      	mov	fp, r0
 80081f4:	e7eb      	b.n	80081ce <_dtoa_r+0xba6>
 80081f6:	bf00      	nop
 80081f8:	0800a08b 	.word	0x0800a08b
 80081fc:	08009fe8 	.word	0x08009fe8
 8008200:	0800a00c 	.word	0x0800a00c

08008204 <_localeconv_r>:
 8008204:	4800      	ldr	r0, [pc, #0]	; (8008208 <_localeconv_r+0x4>)
 8008206:	4770      	bx	lr
 8008208:	20000194 	.word	0x20000194

0800820c <memchr>:
 800820c:	4603      	mov	r3, r0
 800820e:	b510      	push	{r4, lr}
 8008210:	b2c9      	uxtb	r1, r1
 8008212:	4402      	add	r2, r0
 8008214:	4293      	cmp	r3, r2
 8008216:	4618      	mov	r0, r3
 8008218:	d101      	bne.n	800821e <memchr+0x12>
 800821a:	2000      	movs	r0, #0
 800821c:	e003      	b.n	8008226 <memchr+0x1a>
 800821e:	7804      	ldrb	r4, [r0, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	428c      	cmp	r4, r1
 8008224:	d1f6      	bne.n	8008214 <memchr+0x8>
 8008226:	bd10      	pop	{r4, pc}

08008228 <memcpy>:
 8008228:	440a      	add	r2, r1
 800822a:	4291      	cmp	r1, r2
 800822c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008230:	d100      	bne.n	8008234 <memcpy+0xc>
 8008232:	4770      	bx	lr
 8008234:	b510      	push	{r4, lr}
 8008236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800823a:	4291      	cmp	r1, r2
 800823c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008240:	d1f9      	bne.n	8008236 <memcpy+0xe>
 8008242:	bd10      	pop	{r4, pc}

08008244 <__malloc_lock>:
 8008244:	4801      	ldr	r0, [pc, #4]	; (800824c <__malloc_lock+0x8>)
 8008246:	f000 bd2c 	b.w	8008ca2 <__retarget_lock_acquire_recursive>
 800824a:	bf00      	nop
 800824c:	2000031c 	.word	0x2000031c

08008250 <__malloc_unlock>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__malloc_unlock+0x8>)
 8008252:	f000 bd27 	b.w	8008ca4 <__retarget_lock_release_recursive>
 8008256:	bf00      	nop
 8008258:	2000031c 	.word	0x2000031c

0800825c <_Balloc>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	b976      	cbnz	r6, 8008284 <_Balloc+0x28>
 8008266:	2010      	movs	r0, #16
 8008268:	f7fe fbd4 	bl	8006a14 <malloc>
 800826c:	4602      	mov	r2, r0
 800826e:	6260      	str	r0, [r4, #36]	; 0x24
 8008270:	b920      	cbnz	r0, 800827c <_Balloc+0x20>
 8008272:	2166      	movs	r1, #102	; 0x66
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <_Balloc+0x78>)
 8008276:	4818      	ldr	r0, [pc, #96]	; (80082d8 <_Balloc+0x7c>)
 8008278:	f000 fce2 	bl	8008c40 <__assert_func>
 800827c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008280:	6006      	str	r6, [r0, #0]
 8008282:	60c6      	str	r6, [r0, #12]
 8008284:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008286:	68f3      	ldr	r3, [r6, #12]
 8008288:	b183      	cbz	r3, 80082ac <_Balloc+0x50>
 800828a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008292:	b9b8      	cbnz	r0, 80082c4 <_Balloc+0x68>
 8008294:	2101      	movs	r1, #1
 8008296:	fa01 f605 	lsl.w	r6, r1, r5
 800829a:	1d72      	adds	r2, r6, #5
 800829c:	4620      	mov	r0, r4
 800829e:	0092      	lsls	r2, r2, #2
 80082a0:	f000 fb5e 	bl	8008960 <_calloc_r>
 80082a4:	b160      	cbz	r0, 80082c0 <_Balloc+0x64>
 80082a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082aa:	e00e      	b.n	80082ca <_Balloc+0x6e>
 80082ac:	2221      	movs	r2, #33	; 0x21
 80082ae:	2104      	movs	r1, #4
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fb55 	bl	8008960 <_calloc_r>
 80082b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082b8:	60f0      	str	r0, [r6, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <_Balloc+0x2e>
 80082c0:	2000      	movs	r0, #0
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	6802      	ldr	r2, [r0, #0]
 80082c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ca:	2300      	movs	r3, #0
 80082cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082d0:	e7f7      	b.n	80082c2 <_Balloc+0x66>
 80082d2:	bf00      	nop
 80082d4:	0800a019 	.word	0x0800a019
 80082d8:	0800a09c 	.word	0x0800a09c

080082dc <_Bfree>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082e0:	4605      	mov	r5, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b976      	cbnz	r6, 8008304 <_Bfree+0x28>
 80082e6:	2010      	movs	r0, #16
 80082e8:	f7fe fb94 	bl	8006a14 <malloc>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6268      	str	r0, [r5, #36]	; 0x24
 80082f0:	b920      	cbnz	r0, 80082fc <_Bfree+0x20>
 80082f2:	218a      	movs	r1, #138	; 0x8a
 80082f4:	4b08      	ldr	r3, [pc, #32]	; (8008318 <_Bfree+0x3c>)
 80082f6:	4809      	ldr	r0, [pc, #36]	; (800831c <_Bfree+0x40>)
 80082f8:	f000 fca2 	bl	8008c40 <__assert_func>
 80082fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008300:	6006      	str	r6, [r0, #0]
 8008302:	60c6      	str	r6, [r0, #12]
 8008304:	b13c      	cbz	r4, 8008316 <_Bfree+0x3a>
 8008306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008308:	6862      	ldr	r2, [r4, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008310:	6021      	str	r1, [r4, #0]
 8008312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	0800a019 	.word	0x0800a019
 800831c:	0800a09c 	.word	0x0800a09c

08008320 <__multadd>:
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	4607      	mov	r7, r0
 8008326:	460c      	mov	r4, r1
 8008328:	461e      	mov	r6, r3
 800832a:	2000      	movs	r0, #0
 800832c:	690d      	ldr	r5, [r1, #16]
 800832e:	f101 0c14 	add.w	ip, r1, #20
 8008332:	f8dc 3000 	ldr.w	r3, [ip]
 8008336:	3001      	adds	r0, #1
 8008338:	b299      	uxth	r1, r3
 800833a:	fb02 6101 	mla	r1, r2, r1, r6
 800833e:	0c1e      	lsrs	r6, r3, #16
 8008340:	0c0b      	lsrs	r3, r1, #16
 8008342:	fb02 3306 	mla	r3, r2, r6, r3
 8008346:	b289      	uxth	r1, r1
 8008348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800834c:	4285      	cmp	r5, r0
 800834e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008352:	f84c 1b04 	str.w	r1, [ip], #4
 8008356:	dcec      	bgt.n	8008332 <__multadd+0x12>
 8008358:	b30e      	cbz	r6, 800839e <__multadd+0x7e>
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	42ab      	cmp	r3, r5
 800835e:	dc19      	bgt.n	8008394 <__multadd+0x74>
 8008360:	6861      	ldr	r1, [r4, #4]
 8008362:	4638      	mov	r0, r7
 8008364:	3101      	adds	r1, #1
 8008366:	f7ff ff79 	bl	800825c <_Balloc>
 800836a:	4680      	mov	r8, r0
 800836c:	b928      	cbnz	r0, 800837a <__multadd+0x5a>
 800836e:	4602      	mov	r2, r0
 8008370:	21b5      	movs	r1, #181	; 0xb5
 8008372:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <__multadd+0x84>)
 8008374:	480c      	ldr	r0, [pc, #48]	; (80083a8 <__multadd+0x88>)
 8008376:	f000 fc63 	bl	8008c40 <__assert_func>
 800837a:	6922      	ldr	r2, [r4, #16]
 800837c:	f104 010c 	add.w	r1, r4, #12
 8008380:	3202      	adds	r2, #2
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	300c      	adds	r0, #12
 8008386:	f7ff ff4f 	bl	8008228 <memcpy>
 800838a:	4621      	mov	r1, r4
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ffa5 	bl	80082dc <_Bfree>
 8008392:	4644      	mov	r4, r8
 8008394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008398:	3501      	adds	r5, #1
 800839a:	615e      	str	r6, [r3, #20]
 800839c:	6125      	str	r5, [r4, #16]
 800839e:	4620      	mov	r0, r4
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a4:	0800a08b 	.word	0x0800a08b
 80083a8:	0800a09c 	.word	0x0800a09c

080083ac <__hi0bits>:
 80083ac:	0c02      	lsrs	r2, r0, #16
 80083ae:	0412      	lsls	r2, r2, #16
 80083b0:	4603      	mov	r3, r0
 80083b2:	b9ca      	cbnz	r2, 80083e8 <__hi0bits+0x3c>
 80083b4:	0403      	lsls	r3, r0, #16
 80083b6:	2010      	movs	r0, #16
 80083b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083bc:	bf04      	itt	eq
 80083be:	021b      	lsleq	r3, r3, #8
 80083c0:	3008      	addeq	r0, #8
 80083c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083c6:	bf04      	itt	eq
 80083c8:	011b      	lsleq	r3, r3, #4
 80083ca:	3004      	addeq	r0, #4
 80083cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083d0:	bf04      	itt	eq
 80083d2:	009b      	lsleq	r3, r3, #2
 80083d4:	3002      	addeq	r0, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	db05      	blt.n	80083e6 <__hi0bits+0x3a>
 80083da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80083de:	f100 0001 	add.w	r0, r0, #1
 80083e2:	bf08      	it	eq
 80083e4:	2020      	moveq	r0, #32
 80083e6:	4770      	bx	lr
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7e5      	b.n	80083b8 <__hi0bits+0xc>

080083ec <__lo0bits>:
 80083ec:	6803      	ldr	r3, [r0, #0]
 80083ee:	4602      	mov	r2, r0
 80083f0:	f013 0007 	ands.w	r0, r3, #7
 80083f4:	d00b      	beq.n	800840e <__lo0bits+0x22>
 80083f6:	07d9      	lsls	r1, r3, #31
 80083f8:	d421      	bmi.n	800843e <__lo0bits+0x52>
 80083fa:	0798      	lsls	r0, r3, #30
 80083fc:	bf49      	itett	mi
 80083fe:	085b      	lsrmi	r3, r3, #1
 8008400:	089b      	lsrpl	r3, r3, #2
 8008402:	2001      	movmi	r0, #1
 8008404:	6013      	strmi	r3, [r2, #0]
 8008406:	bf5c      	itt	pl
 8008408:	2002      	movpl	r0, #2
 800840a:	6013      	strpl	r3, [r2, #0]
 800840c:	4770      	bx	lr
 800840e:	b299      	uxth	r1, r3
 8008410:	b909      	cbnz	r1, 8008416 <__lo0bits+0x2a>
 8008412:	2010      	movs	r0, #16
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	b2d9      	uxtb	r1, r3
 8008418:	b909      	cbnz	r1, 800841e <__lo0bits+0x32>
 800841a:	3008      	adds	r0, #8
 800841c:	0a1b      	lsrs	r3, r3, #8
 800841e:	0719      	lsls	r1, r3, #28
 8008420:	bf04      	itt	eq
 8008422:	091b      	lsreq	r3, r3, #4
 8008424:	3004      	addeq	r0, #4
 8008426:	0799      	lsls	r1, r3, #30
 8008428:	bf04      	itt	eq
 800842a:	089b      	lsreq	r3, r3, #2
 800842c:	3002      	addeq	r0, #2
 800842e:	07d9      	lsls	r1, r3, #31
 8008430:	d403      	bmi.n	800843a <__lo0bits+0x4e>
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	f100 0001 	add.w	r0, r0, #1
 8008438:	d003      	beq.n	8008442 <__lo0bits+0x56>
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4770      	bx	lr
 800843e:	2000      	movs	r0, #0
 8008440:	4770      	bx	lr
 8008442:	2020      	movs	r0, #32
 8008444:	4770      	bx	lr
	...

08008448 <__i2b>:
 8008448:	b510      	push	{r4, lr}
 800844a:	460c      	mov	r4, r1
 800844c:	2101      	movs	r1, #1
 800844e:	f7ff ff05 	bl	800825c <_Balloc>
 8008452:	4602      	mov	r2, r0
 8008454:	b928      	cbnz	r0, 8008462 <__i2b+0x1a>
 8008456:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800845a:	4b04      	ldr	r3, [pc, #16]	; (800846c <__i2b+0x24>)
 800845c:	4804      	ldr	r0, [pc, #16]	; (8008470 <__i2b+0x28>)
 800845e:	f000 fbef 	bl	8008c40 <__assert_func>
 8008462:	2301      	movs	r3, #1
 8008464:	6144      	str	r4, [r0, #20]
 8008466:	6103      	str	r3, [r0, #16]
 8008468:	bd10      	pop	{r4, pc}
 800846a:	bf00      	nop
 800846c:	0800a08b 	.word	0x0800a08b
 8008470:	0800a09c 	.word	0x0800a09c

08008474 <__multiply>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	4691      	mov	r9, r2
 800847a:	690a      	ldr	r2, [r1, #16]
 800847c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008480:	460c      	mov	r4, r1
 8008482:	429a      	cmp	r2, r3
 8008484:	bfbe      	ittt	lt
 8008486:	460b      	movlt	r3, r1
 8008488:	464c      	movlt	r4, r9
 800848a:	4699      	movlt	r9, r3
 800848c:	6927      	ldr	r7, [r4, #16]
 800848e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	6861      	ldr	r1, [r4, #4]
 8008496:	eb07 060a 	add.w	r6, r7, sl
 800849a:	42b3      	cmp	r3, r6
 800849c:	b085      	sub	sp, #20
 800849e:	bfb8      	it	lt
 80084a0:	3101      	addlt	r1, #1
 80084a2:	f7ff fedb 	bl	800825c <_Balloc>
 80084a6:	b930      	cbnz	r0, 80084b6 <__multiply+0x42>
 80084a8:	4602      	mov	r2, r0
 80084aa:	f240 115d 	movw	r1, #349	; 0x15d
 80084ae:	4b43      	ldr	r3, [pc, #268]	; (80085bc <__multiply+0x148>)
 80084b0:	4843      	ldr	r0, [pc, #268]	; (80085c0 <__multiply+0x14c>)
 80084b2:	f000 fbc5 	bl	8008c40 <__assert_func>
 80084b6:	f100 0514 	add.w	r5, r0, #20
 80084ba:	462b      	mov	r3, r5
 80084bc:	2200      	movs	r2, #0
 80084be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084c2:	4543      	cmp	r3, r8
 80084c4:	d321      	bcc.n	800850a <__multiply+0x96>
 80084c6:	f104 0314 	add.w	r3, r4, #20
 80084ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084ce:	f109 0314 	add.w	r3, r9, #20
 80084d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084d6:	9202      	str	r2, [sp, #8]
 80084d8:	1b3a      	subs	r2, r7, r4
 80084da:	3a15      	subs	r2, #21
 80084dc:	f022 0203 	bic.w	r2, r2, #3
 80084e0:	3204      	adds	r2, #4
 80084e2:	f104 0115 	add.w	r1, r4, #21
 80084e6:	428f      	cmp	r7, r1
 80084e8:	bf38      	it	cc
 80084ea:	2204      	movcc	r2, #4
 80084ec:	9201      	str	r2, [sp, #4]
 80084ee:	9a02      	ldr	r2, [sp, #8]
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d80c      	bhi.n	8008510 <__multiply+0x9c>
 80084f6:	2e00      	cmp	r6, #0
 80084f8:	dd03      	ble.n	8008502 <__multiply+0x8e>
 80084fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d059      	beq.n	80085b6 <__multiply+0x142>
 8008502:	6106      	str	r6, [r0, #16]
 8008504:	b005      	add	sp, #20
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850a:	f843 2b04 	str.w	r2, [r3], #4
 800850e:	e7d8      	b.n	80084c2 <__multiply+0x4e>
 8008510:	f8b3 a000 	ldrh.w	sl, [r3]
 8008514:	f1ba 0f00 	cmp.w	sl, #0
 8008518:	d023      	beq.n	8008562 <__multiply+0xee>
 800851a:	46a9      	mov	r9, r5
 800851c:	f04f 0c00 	mov.w	ip, #0
 8008520:	f104 0e14 	add.w	lr, r4, #20
 8008524:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008528:	f8d9 1000 	ldr.w	r1, [r9]
 800852c:	fa1f fb82 	uxth.w	fp, r2
 8008530:	b289      	uxth	r1, r1
 8008532:	fb0a 110b 	mla	r1, sl, fp, r1
 8008536:	4461      	add	r1, ip
 8008538:	f8d9 c000 	ldr.w	ip, [r9]
 800853c:	0c12      	lsrs	r2, r2, #16
 800853e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008542:	fb0a c202 	mla	r2, sl, r2, ip
 8008546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800854a:	b289      	uxth	r1, r1
 800854c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008550:	4577      	cmp	r7, lr
 8008552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008556:	f849 1b04 	str.w	r1, [r9], #4
 800855a:	d8e3      	bhi.n	8008524 <__multiply+0xb0>
 800855c:	9a01      	ldr	r2, [sp, #4]
 800855e:	f845 c002 	str.w	ip, [r5, r2]
 8008562:	9a03      	ldr	r2, [sp, #12]
 8008564:	3304      	adds	r3, #4
 8008566:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	d020      	beq.n	80085b2 <__multiply+0x13e>
 8008570:	46ae      	mov	lr, r5
 8008572:	f04f 0a00 	mov.w	sl, #0
 8008576:	6829      	ldr	r1, [r5, #0]
 8008578:	f104 0c14 	add.w	ip, r4, #20
 800857c:	f8bc b000 	ldrh.w	fp, [ip]
 8008580:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008584:	b289      	uxth	r1, r1
 8008586:	fb09 220b 	mla	r2, r9, fp, r2
 800858a:	4492      	add	sl, r2
 800858c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008590:	f84e 1b04 	str.w	r1, [lr], #4
 8008594:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008598:	f8be 1000 	ldrh.w	r1, [lr]
 800859c:	0c12      	lsrs	r2, r2, #16
 800859e:	fb09 1102 	mla	r1, r9, r2, r1
 80085a2:	4567      	cmp	r7, ip
 80085a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085ac:	d8e6      	bhi.n	800857c <__multiply+0x108>
 80085ae:	9a01      	ldr	r2, [sp, #4]
 80085b0:	50a9      	str	r1, [r5, r2]
 80085b2:	3504      	adds	r5, #4
 80085b4:	e79b      	b.n	80084ee <__multiply+0x7a>
 80085b6:	3e01      	subs	r6, #1
 80085b8:	e79d      	b.n	80084f6 <__multiply+0x82>
 80085ba:	bf00      	nop
 80085bc:	0800a08b 	.word	0x0800a08b
 80085c0:	0800a09c 	.word	0x0800a09c

080085c4 <__pow5mult>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	4615      	mov	r5, r2
 80085ca:	f012 0203 	ands.w	r2, r2, #3
 80085ce:	4606      	mov	r6, r0
 80085d0:	460f      	mov	r7, r1
 80085d2:	d007      	beq.n	80085e4 <__pow5mult+0x20>
 80085d4:	4c25      	ldr	r4, [pc, #148]	; (800866c <__pow5mult+0xa8>)
 80085d6:	3a01      	subs	r2, #1
 80085d8:	2300      	movs	r3, #0
 80085da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085de:	f7ff fe9f 	bl	8008320 <__multadd>
 80085e2:	4607      	mov	r7, r0
 80085e4:	10ad      	asrs	r5, r5, #2
 80085e6:	d03d      	beq.n	8008664 <__pow5mult+0xa0>
 80085e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085ea:	b97c      	cbnz	r4, 800860c <__pow5mult+0x48>
 80085ec:	2010      	movs	r0, #16
 80085ee:	f7fe fa11 	bl	8006a14 <malloc>
 80085f2:	4602      	mov	r2, r0
 80085f4:	6270      	str	r0, [r6, #36]	; 0x24
 80085f6:	b928      	cbnz	r0, 8008604 <__pow5mult+0x40>
 80085f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085fc:	4b1c      	ldr	r3, [pc, #112]	; (8008670 <__pow5mult+0xac>)
 80085fe:	481d      	ldr	r0, [pc, #116]	; (8008674 <__pow5mult+0xb0>)
 8008600:	f000 fb1e 	bl	8008c40 <__assert_func>
 8008604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008608:	6004      	str	r4, [r0, #0]
 800860a:	60c4      	str	r4, [r0, #12]
 800860c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008614:	b94c      	cbnz	r4, 800862a <__pow5mult+0x66>
 8008616:	f240 2171 	movw	r1, #625	; 0x271
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff ff14 	bl	8008448 <__i2b>
 8008620:	2300      	movs	r3, #0
 8008622:	4604      	mov	r4, r0
 8008624:	f8c8 0008 	str.w	r0, [r8, #8]
 8008628:	6003      	str	r3, [r0, #0]
 800862a:	f04f 0900 	mov.w	r9, #0
 800862e:	07eb      	lsls	r3, r5, #31
 8008630:	d50a      	bpl.n	8008648 <__pow5mult+0x84>
 8008632:	4639      	mov	r1, r7
 8008634:	4622      	mov	r2, r4
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ff1c 	bl	8008474 <__multiply>
 800863c:	4680      	mov	r8, r0
 800863e:	4639      	mov	r1, r7
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff fe4b 	bl	80082dc <_Bfree>
 8008646:	4647      	mov	r7, r8
 8008648:	106d      	asrs	r5, r5, #1
 800864a:	d00b      	beq.n	8008664 <__pow5mult+0xa0>
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	b938      	cbnz	r0, 8008660 <__pow5mult+0x9c>
 8008650:	4622      	mov	r2, r4
 8008652:	4621      	mov	r1, r4
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff ff0d 	bl	8008474 <__multiply>
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	f8c0 9000 	str.w	r9, [r0]
 8008660:	4604      	mov	r4, r0
 8008662:	e7e4      	b.n	800862e <__pow5mult+0x6a>
 8008664:	4638      	mov	r0, r7
 8008666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866a:	bf00      	nop
 800866c:	0800a1e8 	.word	0x0800a1e8
 8008670:	0800a019 	.word	0x0800a019
 8008674:	0800a09c 	.word	0x0800a09c

08008678 <__lshift>:
 8008678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	460c      	mov	r4, r1
 800867e:	4607      	mov	r7, r0
 8008680:	4691      	mov	r9, r2
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	6849      	ldr	r1, [r1, #4]
 8008686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008690:	f108 0601 	add.w	r6, r8, #1
 8008694:	42b3      	cmp	r3, r6
 8008696:	db0b      	blt.n	80086b0 <__lshift+0x38>
 8008698:	4638      	mov	r0, r7
 800869a:	f7ff fddf 	bl	800825c <_Balloc>
 800869e:	4605      	mov	r5, r0
 80086a0:	b948      	cbnz	r0, 80086b6 <__lshift+0x3e>
 80086a2:	4602      	mov	r2, r0
 80086a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086a8:	4b29      	ldr	r3, [pc, #164]	; (8008750 <__lshift+0xd8>)
 80086aa:	482a      	ldr	r0, [pc, #168]	; (8008754 <__lshift+0xdc>)
 80086ac:	f000 fac8 	bl	8008c40 <__assert_func>
 80086b0:	3101      	adds	r1, #1
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	e7ee      	b.n	8008694 <__lshift+0x1c>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f100 0114 	add.w	r1, r0, #20
 80086bc:	f100 0210 	add.w	r2, r0, #16
 80086c0:	4618      	mov	r0, r3
 80086c2:	4553      	cmp	r3, sl
 80086c4:	db37      	blt.n	8008736 <__lshift+0xbe>
 80086c6:	6920      	ldr	r0, [r4, #16]
 80086c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086cc:	f104 0314 	add.w	r3, r4, #20
 80086d0:	f019 091f 	ands.w	r9, r9, #31
 80086d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086dc:	d02f      	beq.n	800873e <__lshift+0xc6>
 80086de:	468a      	mov	sl, r1
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	f1c9 0e20 	rsb	lr, r9, #32
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	fa02 f209 	lsl.w	r2, r2, r9
 80086ee:	ea42 020c 	orr.w	r2, r2, ip
 80086f2:	f84a 2b04 	str.w	r2, [sl], #4
 80086f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fa:	4298      	cmp	r0, r3
 80086fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008700:	d8f2      	bhi.n	80086e8 <__lshift+0x70>
 8008702:	1b03      	subs	r3, r0, r4
 8008704:	3b15      	subs	r3, #21
 8008706:	f023 0303 	bic.w	r3, r3, #3
 800870a:	3304      	adds	r3, #4
 800870c:	f104 0215 	add.w	r2, r4, #21
 8008710:	4290      	cmp	r0, r2
 8008712:	bf38      	it	cc
 8008714:	2304      	movcc	r3, #4
 8008716:	f841 c003 	str.w	ip, [r1, r3]
 800871a:	f1bc 0f00 	cmp.w	ip, #0
 800871e:	d001      	beq.n	8008724 <__lshift+0xac>
 8008720:	f108 0602 	add.w	r6, r8, #2
 8008724:	3e01      	subs	r6, #1
 8008726:	4638      	mov	r0, r7
 8008728:	4621      	mov	r1, r4
 800872a:	612e      	str	r6, [r5, #16]
 800872c:	f7ff fdd6 	bl	80082dc <_Bfree>
 8008730:	4628      	mov	r0, r5
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	f842 0f04 	str.w	r0, [r2, #4]!
 800873a:	3301      	adds	r3, #1
 800873c:	e7c1      	b.n	80086c2 <__lshift+0x4a>
 800873e:	3904      	subs	r1, #4
 8008740:	f853 2b04 	ldr.w	r2, [r3], #4
 8008744:	4298      	cmp	r0, r3
 8008746:	f841 2f04 	str.w	r2, [r1, #4]!
 800874a:	d8f9      	bhi.n	8008740 <__lshift+0xc8>
 800874c:	e7ea      	b.n	8008724 <__lshift+0xac>
 800874e:	bf00      	nop
 8008750:	0800a08b 	.word	0x0800a08b
 8008754:	0800a09c 	.word	0x0800a09c

08008758 <__mcmp>:
 8008758:	4603      	mov	r3, r0
 800875a:	690a      	ldr	r2, [r1, #16]
 800875c:	6900      	ldr	r0, [r0, #16]
 800875e:	b530      	push	{r4, r5, lr}
 8008760:	1a80      	subs	r0, r0, r2
 8008762:	d10d      	bne.n	8008780 <__mcmp+0x28>
 8008764:	3314      	adds	r3, #20
 8008766:	3114      	adds	r1, #20
 8008768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800876c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008778:	4295      	cmp	r5, r2
 800877a:	d002      	beq.n	8008782 <__mcmp+0x2a>
 800877c:	d304      	bcc.n	8008788 <__mcmp+0x30>
 800877e:	2001      	movs	r0, #1
 8008780:	bd30      	pop	{r4, r5, pc}
 8008782:	42a3      	cmp	r3, r4
 8008784:	d3f4      	bcc.n	8008770 <__mcmp+0x18>
 8008786:	e7fb      	b.n	8008780 <__mcmp+0x28>
 8008788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800878c:	e7f8      	b.n	8008780 <__mcmp+0x28>
	...

08008790 <__mdiff>:
 8008790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	460d      	mov	r5, r1
 8008796:	4607      	mov	r7, r0
 8008798:	4611      	mov	r1, r2
 800879a:	4628      	mov	r0, r5
 800879c:	4614      	mov	r4, r2
 800879e:	f7ff ffdb 	bl	8008758 <__mcmp>
 80087a2:	1e06      	subs	r6, r0, #0
 80087a4:	d111      	bne.n	80087ca <__mdiff+0x3a>
 80087a6:	4631      	mov	r1, r6
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff fd57 	bl	800825c <_Balloc>
 80087ae:	4602      	mov	r2, r0
 80087b0:	b928      	cbnz	r0, 80087be <__mdiff+0x2e>
 80087b2:	f240 2132 	movw	r1, #562	; 0x232
 80087b6:	4b3a      	ldr	r3, [pc, #232]	; (80088a0 <__mdiff+0x110>)
 80087b8:	483a      	ldr	r0, [pc, #232]	; (80088a4 <__mdiff+0x114>)
 80087ba:	f000 fa41 	bl	8008c40 <__assert_func>
 80087be:	2301      	movs	r3, #1
 80087c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087c4:	4610      	mov	r0, r2
 80087c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	bfa4      	itt	ge
 80087cc:	4623      	movge	r3, r4
 80087ce:	462c      	movge	r4, r5
 80087d0:	4638      	mov	r0, r7
 80087d2:	6861      	ldr	r1, [r4, #4]
 80087d4:	bfa6      	itte	ge
 80087d6:	461d      	movge	r5, r3
 80087d8:	2600      	movge	r6, #0
 80087da:	2601      	movlt	r6, #1
 80087dc:	f7ff fd3e 	bl	800825c <_Balloc>
 80087e0:	4602      	mov	r2, r0
 80087e2:	b918      	cbnz	r0, 80087ec <__mdiff+0x5c>
 80087e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087e8:	4b2d      	ldr	r3, [pc, #180]	; (80088a0 <__mdiff+0x110>)
 80087ea:	e7e5      	b.n	80087b8 <__mdiff+0x28>
 80087ec:	f102 0814 	add.w	r8, r2, #20
 80087f0:	46c2      	mov	sl, r8
 80087f2:	f04f 0c00 	mov.w	ip, #0
 80087f6:	6927      	ldr	r7, [r4, #16]
 80087f8:	60c6      	str	r6, [r0, #12]
 80087fa:	692e      	ldr	r6, [r5, #16]
 80087fc:	f104 0014 	add.w	r0, r4, #20
 8008800:	f105 0914 	add.w	r9, r5, #20
 8008804:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800880c:	3410      	adds	r4, #16
 800880e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008812:	f859 3b04 	ldr.w	r3, [r9], #4
 8008816:	fa1f f18b 	uxth.w	r1, fp
 800881a:	448c      	add	ip, r1
 800881c:	b299      	uxth	r1, r3
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	ebac 0101 	sub.w	r1, ip, r1
 8008824:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008828:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800882c:	b289      	uxth	r1, r1
 800882e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008832:	454e      	cmp	r6, r9
 8008834:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008838:	f84a 3b04 	str.w	r3, [sl], #4
 800883c:	d8e7      	bhi.n	800880e <__mdiff+0x7e>
 800883e:	1b73      	subs	r3, r6, r5
 8008840:	3b15      	subs	r3, #21
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	3515      	adds	r5, #21
 8008848:	3304      	adds	r3, #4
 800884a:	42ae      	cmp	r6, r5
 800884c:	bf38      	it	cc
 800884e:	2304      	movcc	r3, #4
 8008850:	4418      	add	r0, r3
 8008852:	4443      	add	r3, r8
 8008854:	461e      	mov	r6, r3
 8008856:	4605      	mov	r5, r0
 8008858:	4575      	cmp	r5, lr
 800885a:	d30e      	bcc.n	800887a <__mdiff+0xea>
 800885c:	f10e 0103 	add.w	r1, lr, #3
 8008860:	1a09      	subs	r1, r1, r0
 8008862:	f021 0103 	bic.w	r1, r1, #3
 8008866:	3803      	subs	r0, #3
 8008868:	4586      	cmp	lr, r0
 800886a:	bf38      	it	cc
 800886c:	2100      	movcc	r1, #0
 800886e:	4419      	add	r1, r3
 8008870:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008874:	b18b      	cbz	r3, 800889a <__mdiff+0x10a>
 8008876:	6117      	str	r7, [r2, #16]
 8008878:	e7a4      	b.n	80087c4 <__mdiff+0x34>
 800887a:	f855 8b04 	ldr.w	r8, [r5], #4
 800887e:	fa1f f188 	uxth.w	r1, r8
 8008882:	4461      	add	r1, ip
 8008884:	140c      	asrs	r4, r1, #16
 8008886:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800888a:	b289      	uxth	r1, r1
 800888c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008890:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008894:	f846 1b04 	str.w	r1, [r6], #4
 8008898:	e7de      	b.n	8008858 <__mdiff+0xc8>
 800889a:	3f01      	subs	r7, #1
 800889c:	e7e8      	b.n	8008870 <__mdiff+0xe0>
 800889e:	bf00      	nop
 80088a0:	0800a08b 	.word	0x0800a08b
 80088a4:	0800a09c 	.word	0x0800a09c

080088a8 <__d2b>:
 80088a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088ac:	2101      	movs	r1, #1
 80088ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80088b2:	4690      	mov	r8, r2
 80088b4:	461d      	mov	r5, r3
 80088b6:	f7ff fcd1 	bl	800825c <_Balloc>
 80088ba:	4604      	mov	r4, r0
 80088bc:	b930      	cbnz	r0, 80088cc <__d2b+0x24>
 80088be:	4602      	mov	r2, r0
 80088c0:	f240 310a 	movw	r1, #778	; 0x30a
 80088c4:	4b24      	ldr	r3, [pc, #144]	; (8008958 <__d2b+0xb0>)
 80088c6:	4825      	ldr	r0, [pc, #148]	; (800895c <__d2b+0xb4>)
 80088c8:	f000 f9ba 	bl	8008c40 <__assert_func>
 80088cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80088d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80088d4:	bb2d      	cbnz	r5, 8008922 <__d2b+0x7a>
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	f1b8 0300 	subs.w	r3, r8, #0
 80088dc:	d026      	beq.n	800892c <__d2b+0x84>
 80088de:	4668      	mov	r0, sp
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	f7ff fd83 	bl	80083ec <__lo0bits>
 80088e6:	9900      	ldr	r1, [sp, #0]
 80088e8:	b1f0      	cbz	r0, 8008928 <__d2b+0x80>
 80088ea:	9a01      	ldr	r2, [sp, #4]
 80088ec:	f1c0 0320 	rsb	r3, r0, #32
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	430b      	orrs	r3, r1
 80088f6:	40c2      	lsrs	r2, r0
 80088f8:	6163      	str	r3, [r4, #20]
 80088fa:	9201      	str	r2, [sp, #4]
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bf14      	ite	ne
 8008902:	2102      	movne	r1, #2
 8008904:	2101      	moveq	r1, #1
 8008906:	61a3      	str	r3, [r4, #24]
 8008908:	6121      	str	r1, [r4, #16]
 800890a:	b1c5      	cbz	r5, 800893e <__d2b+0x96>
 800890c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008910:	4405      	add	r5, r0
 8008912:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008916:	603d      	str	r5, [r7, #0]
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	4620      	mov	r0, r4
 800891c:	b002      	add	sp, #8
 800891e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008926:	e7d6      	b.n	80088d6 <__d2b+0x2e>
 8008928:	6161      	str	r1, [r4, #20]
 800892a:	e7e7      	b.n	80088fc <__d2b+0x54>
 800892c:	a801      	add	r0, sp, #4
 800892e:	f7ff fd5d 	bl	80083ec <__lo0bits>
 8008932:	2101      	movs	r1, #1
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	6121      	str	r1, [r4, #16]
 8008938:	6163      	str	r3, [r4, #20]
 800893a:	3020      	adds	r0, #32
 800893c:	e7e5      	b.n	800890a <__d2b+0x62>
 800893e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008942:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008946:	6038      	str	r0, [r7, #0]
 8008948:	6918      	ldr	r0, [r3, #16]
 800894a:	f7ff fd2f 	bl	80083ac <__hi0bits>
 800894e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008952:	6031      	str	r1, [r6, #0]
 8008954:	e7e1      	b.n	800891a <__d2b+0x72>
 8008956:	bf00      	nop
 8008958:	0800a08b 	.word	0x0800a08b
 800895c:	0800a09c 	.word	0x0800a09c

08008960 <_calloc_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	fba1 5402 	umull	r5, r4, r1, r2
 8008966:	b934      	cbnz	r4, 8008976 <_calloc_r+0x16>
 8008968:	4629      	mov	r1, r5
 800896a:	f7fe f8cb 	bl	8006b04 <_malloc_r>
 800896e:	4606      	mov	r6, r0
 8008970:	b928      	cbnz	r0, 800897e <_calloc_r+0x1e>
 8008972:	4630      	mov	r0, r6
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	220c      	movs	r2, #12
 8008978:	2600      	movs	r6, #0
 800897a:	6002      	str	r2, [r0, #0]
 800897c:	e7f9      	b.n	8008972 <_calloc_r+0x12>
 800897e:	462a      	mov	r2, r5
 8008980:	4621      	mov	r1, r4
 8008982:	f7fe f84f 	bl	8006a24 <memset>
 8008986:	e7f4      	b.n	8008972 <_calloc_r+0x12>

08008988 <__ssputs_r>:
 8008988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	688e      	ldr	r6, [r1, #8]
 800898e:	4682      	mov	sl, r0
 8008990:	429e      	cmp	r6, r3
 8008992:	460c      	mov	r4, r1
 8008994:	4690      	mov	r8, r2
 8008996:	461f      	mov	r7, r3
 8008998:	d838      	bhi.n	8008a0c <__ssputs_r+0x84>
 800899a:	898a      	ldrh	r2, [r1, #12]
 800899c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a0:	d032      	beq.n	8008a08 <__ssputs_r+0x80>
 80089a2:	6825      	ldr	r5, [r4, #0]
 80089a4:	6909      	ldr	r1, [r1, #16]
 80089a6:	3301      	adds	r3, #1
 80089a8:	eba5 0901 	sub.w	r9, r5, r1
 80089ac:	6965      	ldr	r5, [r4, #20]
 80089ae:	444b      	add	r3, r9
 80089b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089b8:	106d      	asrs	r5, r5, #1
 80089ba:	429d      	cmp	r5, r3
 80089bc:	bf38      	it	cc
 80089be:	461d      	movcc	r5, r3
 80089c0:	0553      	lsls	r3, r2, #21
 80089c2:	d531      	bpl.n	8008a28 <__ssputs_r+0xa0>
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7fe f89d 	bl	8006b04 <_malloc_r>
 80089ca:	4606      	mov	r6, r0
 80089cc:	b950      	cbnz	r0, 80089e4 <__ssputs_r+0x5c>
 80089ce:	230c      	movs	r3, #12
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d4:	f8ca 3000 	str.w	r3, [sl]
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e4:	464a      	mov	r2, r9
 80089e6:	6921      	ldr	r1, [r4, #16]
 80089e8:	f7ff fc1e 	bl	8008228 <memcpy>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	6126      	str	r6, [r4, #16]
 80089fa:	444e      	add	r6, r9
 80089fc:	6026      	str	r6, [r4, #0]
 80089fe:	463e      	mov	r6, r7
 8008a00:	6165      	str	r5, [r4, #20]
 8008a02:	eba5 0509 	sub.w	r5, r5, r9
 8008a06:	60a5      	str	r5, [r4, #8]
 8008a08:	42be      	cmp	r6, r7
 8008a0a:	d900      	bls.n	8008a0e <__ssputs_r+0x86>
 8008a0c:	463e      	mov	r6, r7
 8008a0e:	4632      	mov	r2, r6
 8008a10:	4641      	mov	r1, r8
 8008a12:	6820      	ldr	r0, [r4, #0]
 8008a14:	f000 f959 	bl	8008cca <memmove>
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	4433      	add	r3, r6
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	e7db      	b.n	80089e0 <__ssputs_r+0x58>
 8008a28:	462a      	mov	r2, r5
 8008a2a:	f000 f968 	bl	8008cfe <_realloc_r>
 8008a2e:	4606      	mov	r6, r0
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1e1      	bne.n	80089f8 <__ssputs_r+0x70>
 8008a34:	4650      	mov	r0, sl
 8008a36:	6921      	ldr	r1, [r4, #16]
 8008a38:	f7fd fffc 	bl	8006a34 <_free_r>
 8008a3c:	e7c7      	b.n	80089ce <__ssputs_r+0x46>
	...

08008a40 <_svfiprintf_r>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	4698      	mov	r8, r3
 8008a46:	898b      	ldrh	r3, [r1, #12]
 8008a48:	4607      	mov	r7, r0
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	4614      	mov	r4, r2
 8008a50:	b09d      	sub	sp, #116	; 0x74
 8008a52:	d50e      	bpl.n	8008a72 <_svfiprintf_r+0x32>
 8008a54:	690b      	ldr	r3, [r1, #16]
 8008a56:	b963      	cbnz	r3, 8008a72 <_svfiprintf_r+0x32>
 8008a58:	2140      	movs	r1, #64	; 0x40
 8008a5a:	f7fe f853 	bl	8006b04 <_malloc_r>
 8008a5e:	6028      	str	r0, [r5, #0]
 8008a60:	6128      	str	r0, [r5, #16]
 8008a62:	b920      	cbnz	r0, 8008a6e <_svfiprintf_r+0x2e>
 8008a64:	230c      	movs	r3, #12
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a6c:	e0d1      	b.n	8008c12 <_svfiprintf_r+0x1d2>
 8008a6e:	2340      	movs	r3, #64	; 0x40
 8008a70:	616b      	str	r3, [r5, #20]
 8008a72:	2300      	movs	r3, #0
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	2320      	movs	r3, #32
 8008a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a7c:	2330      	movs	r3, #48	; 0x30
 8008a7e:	f04f 0901 	mov.w	r9, #1
 8008a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c2c <_svfiprintf_r+0x1ec>
 8008a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a8e:	4623      	mov	r3, r4
 8008a90:	469a      	mov	sl, r3
 8008a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a96:	b10a      	cbz	r2, 8008a9c <_svfiprintf_r+0x5c>
 8008a98:	2a25      	cmp	r2, #37	; 0x25
 8008a9a:	d1f9      	bne.n	8008a90 <_svfiprintf_r+0x50>
 8008a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa0:	d00b      	beq.n	8008aba <_svfiprintf_r+0x7a>
 8008aa2:	465b      	mov	r3, fp
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f7ff ff6d 	bl	8008988 <__ssputs_r>
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f000 80aa 	beq.w	8008c08 <_svfiprintf_r+0x1c8>
 8008ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab6:	445a      	add	r2, fp
 8008ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8008aba:	f89a 3000 	ldrb.w	r3, [sl]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 80a2 	beq.w	8008c08 <_svfiprintf_r+0x1c8>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ace:	f10a 0a01 	add.w	sl, sl, #1
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	9307      	str	r3, [sp, #28]
 8008ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ada:	931a      	str	r3, [sp, #104]	; 0x68
 8008adc:	4654      	mov	r4, sl
 8008ade:	2205      	movs	r2, #5
 8008ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae4:	4851      	ldr	r0, [pc, #324]	; (8008c2c <_svfiprintf_r+0x1ec>)
 8008ae6:	f7ff fb91 	bl	800820c <memchr>
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	b9d8      	cbnz	r0, 8008b26 <_svfiprintf_r+0xe6>
 8008aee:	06d0      	lsls	r0, r2, #27
 8008af0:	bf44      	itt	mi
 8008af2:	2320      	movmi	r3, #32
 8008af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af8:	0711      	lsls	r1, r2, #28
 8008afa:	bf44      	itt	mi
 8008afc:	232b      	movmi	r3, #43	; 0x2b
 8008afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b02:	f89a 3000 	ldrb.w	r3, [sl]
 8008b06:	2b2a      	cmp	r3, #42	; 0x2a
 8008b08:	d015      	beq.n	8008b36 <_svfiprintf_r+0xf6>
 8008b0a:	4654      	mov	r4, sl
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f04f 0c0a 	mov.w	ip, #10
 8008b12:	9a07      	ldr	r2, [sp, #28]
 8008b14:	4621      	mov	r1, r4
 8008b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b1a:	3b30      	subs	r3, #48	; 0x30
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	d94e      	bls.n	8008bbe <_svfiprintf_r+0x17e>
 8008b20:	b1b0      	cbz	r0, 8008b50 <_svfiprintf_r+0x110>
 8008b22:	9207      	str	r2, [sp, #28]
 8008b24:	e014      	b.n	8008b50 <_svfiprintf_r+0x110>
 8008b26:	eba0 0308 	sub.w	r3, r0, r8
 8008b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	46a2      	mov	sl, r4
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	e7d2      	b.n	8008adc <_svfiprintf_r+0x9c>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	9103      	str	r1, [sp, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfbb      	ittet	lt
 8008b42:	425b      	neglt	r3, r3
 8008b44:	f042 0202 	orrlt.w	r2, r2, #2
 8008b48:	9307      	strge	r3, [sp, #28]
 8008b4a:	9307      	strlt	r3, [sp, #28]
 8008b4c:	bfb8      	it	lt
 8008b4e:	9204      	strlt	r2, [sp, #16]
 8008b50:	7823      	ldrb	r3, [r4, #0]
 8008b52:	2b2e      	cmp	r3, #46	; 0x2e
 8008b54:	d10c      	bne.n	8008b70 <_svfiprintf_r+0x130>
 8008b56:	7863      	ldrb	r3, [r4, #1]
 8008b58:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5a:	d135      	bne.n	8008bc8 <_svfiprintf_r+0x188>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	3402      	adds	r4, #2
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9203      	str	r2, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfb8      	it	lt
 8008b6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b6e:	9305      	str	r3, [sp, #20]
 8008b70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008c30 <_svfiprintf_r+0x1f0>
 8008b74:	2203      	movs	r2, #3
 8008b76:	4650      	mov	r0, sl
 8008b78:	7821      	ldrb	r1, [r4, #0]
 8008b7a:	f7ff fb47 	bl	800820c <memchr>
 8008b7e:	b140      	cbz	r0, 8008b92 <_svfiprintf_r+0x152>
 8008b80:	2340      	movs	r3, #64	; 0x40
 8008b82:	eba0 000a 	sub.w	r0, r0, sl
 8008b86:	fa03 f000 	lsl.w	r0, r3, r0
 8008b8a:	9b04      	ldr	r3, [sp, #16]
 8008b8c:	3401      	adds	r4, #1
 8008b8e:	4303      	orrs	r3, r0
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	2206      	movs	r2, #6
 8008b98:	4826      	ldr	r0, [pc, #152]	; (8008c34 <_svfiprintf_r+0x1f4>)
 8008b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b9e:	f7ff fb35 	bl	800820c <memchr>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d038      	beq.n	8008c18 <_svfiprintf_r+0x1d8>
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <_svfiprintf_r+0x1f8>)
 8008ba8:	bb1b      	cbnz	r3, 8008bf2 <_svfiprintf_r+0x1b2>
 8008baa:	9b03      	ldr	r3, [sp, #12]
 8008bac:	3307      	adds	r3, #7
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	9303      	str	r3, [sp, #12]
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	4433      	add	r3, r6
 8008bba:	9309      	str	r3, [sp, #36]	; 0x24
 8008bbc:	e767      	b.n	8008a8e <_svfiprintf_r+0x4e>
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bc6:	e7a5      	b.n	8008b14 <_svfiprintf_r+0xd4>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f04f 0c0a 	mov.w	ip, #10
 8008bce:	4619      	mov	r1, r3
 8008bd0:	3401      	adds	r4, #1
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bda:	3a30      	subs	r2, #48	; 0x30
 8008bdc:	2a09      	cmp	r2, #9
 8008bde:	d903      	bls.n	8008be8 <_svfiprintf_r+0x1a8>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0c5      	beq.n	8008b70 <_svfiprintf_r+0x130>
 8008be4:	9105      	str	r1, [sp, #20]
 8008be6:	e7c3      	b.n	8008b70 <_svfiprintf_r+0x130>
 8008be8:	4604      	mov	r4, r0
 8008bea:	2301      	movs	r3, #1
 8008bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf0:	e7f0      	b.n	8008bd4 <_svfiprintf_r+0x194>
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <_svfiprintf_r+0x1fc>)
 8008bfc:	a904      	add	r1, sp, #16
 8008bfe:	f7fe f893 	bl	8006d28 <_printf_float>
 8008c02:	1c42      	adds	r2, r0, #1
 8008c04:	4606      	mov	r6, r0
 8008c06:	d1d6      	bne.n	8008bb6 <_svfiprintf_r+0x176>
 8008c08:	89ab      	ldrh	r3, [r5, #12]
 8008c0a:	065b      	lsls	r3, r3, #25
 8008c0c:	f53f af2c 	bmi.w	8008a68 <_svfiprintf_r+0x28>
 8008c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c12:	b01d      	add	sp, #116	; 0x74
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <_svfiprintf_r+0x1fc>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	f7fe fb1c 	bl	8007260 <_printf_i>
 8008c28:	e7eb      	b.n	8008c02 <_svfiprintf_r+0x1c2>
 8008c2a:	bf00      	nop
 8008c2c:	0800a1f4 	.word	0x0800a1f4
 8008c30:	0800a1fa 	.word	0x0800a1fa
 8008c34:	0800a1fe 	.word	0x0800a1fe
 8008c38:	08006d29 	.word	0x08006d29
 8008c3c:	08008989 	.word	0x08008989

08008c40 <__assert_func>:
 8008c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c42:	4614      	mov	r4, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <__assert_func+0x2c>)
 8008c48:	4605      	mov	r5, r0
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68d8      	ldr	r0, [r3, #12]
 8008c4e:	b14c      	cbz	r4, 8008c64 <__assert_func+0x24>
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <__assert_func+0x30>)
 8008c52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c56:	9100      	str	r1, [sp, #0]
 8008c58:	462b      	mov	r3, r5
 8008c5a:	4906      	ldr	r1, [pc, #24]	; (8008c74 <__assert_func+0x34>)
 8008c5c:	f000 f80e 	bl	8008c7c <fiprintf>
 8008c60:	f000 faa2 	bl	80091a8 <abort>
 8008c64:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <__assert_func+0x38>)
 8008c66:	461c      	mov	r4, r3
 8008c68:	e7f3      	b.n	8008c52 <__assert_func+0x12>
 8008c6a:	bf00      	nop
 8008c6c:	20000040 	.word	0x20000040
 8008c70:	0800a205 	.word	0x0800a205
 8008c74:	0800a212 	.word	0x0800a212
 8008c78:	0800a240 	.word	0x0800a240

08008c7c <fiprintf>:
 8008c7c:	b40e      	push	{r1, r2, r3}
 8008c7e:	b503      	push	{r0, r1, lr}
 8008c80:	4601      	mov	r1, r0
 8008c82:	ab03      	add	r3, sp, #12
 8008c84:	4805      	ldr	r0, [pc, #20]	; (8008c9c <fiprintf+0x20>)
 8008c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	f000 f88d 	bl	8008dac <_vfiprintf_r>
 8008c92:	b002      	add	sp, #8
 8008c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c98:	b003      	add	sp, #12
 8008c9a:	4770      	bx	lr
 8008c9c:	20000040 	.word	0x20000040

08008ca0 <__retarget_lock_init_recursive>:
 8008ca0:	4770      	bx	lr

08008ca2 <__retarget_lock_acquire_recursive>:
 8008ca2:	4770      	bx	lr

08008ca4 <__retarget_lock_release_recursive>:
 8008ca4:	4770      	bx	lr

08008ca6 <__ascii_mbtowc>:
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	b901      	cbnz	r1, 8008cac <__ascii_mbtowc+0x6>
 8008caa:	a901      	add	r1, sp, #4
 8008cac:	b142      	cbz	r2, 8008cc0 <__ascii_mbtowc+0x1a>
 8008cae:	b14b      	cbz	r3, 8008cc4 <__ascii_mbtowc+0x1e>
 8008cb0:	7813      	ldrb	r3, [r2, #0]
 8008cb2:	600b      	str	r3, [r1, #0]
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	1e10      	subs	r0, r2, #0
 8008cb8:	bf18      	it	ne
 8008cba:	2001      	movne	r0, #1
 8008cbc:	b002      	add	sp, #8
 8008cbe:	4770      	bx	lr
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	e7fb      	b.n	8008cbc <__ascii_mbtowc+0x16>
 8008cc4:	f06f 0001 	mvn.w	r0, #1
 8008cc8:	e7f8      	b.n	8008cbc <__ascii_mbtowc+0x16>

08008cca <memmove>:
 8008cca:	4288      	cmp	r0, r1
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	eb01 0402 	add.w	r4, r1, r2
 8008cd2:	d902      	bls.n	8008cda <memmove+0x10>
 8008cd4:	4284      	cmp	r4, r0
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	d807      	bhi.n	8008cea <memmove+0x20>
 8008cda:	1e43      	subs	r3, r0, #1
 8008cdc:	42a1      	cmp	r1, r4
 8008cde:	d008      	beq.n	8008cf2 <memmove+0x28>
 8008ce0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ce8:	e7f8      	b.n	8008cdc <memmove+0x12>
 8008cea:	4601      	mov	r1, r0
 8008cec:	4402      	add	r2, r0
 8008cee:	428a      	cmp	r2, r1
 8008cf0:	d100      	bne.n	8008cf4 <memmove+0x2a>
 8008cf2:	bd10      	pop	{r4, pc}
 8008cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cfc:	e7f7      	b.n	8008cee <memmove+0x24>

08008cfe <_realloc_r>:
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	4680      	mov	r8, r0
 8008d04:	4614      	mov	r4, r2
 8008d06:	460e      	mov	r6, r1
 8008d08:	b921      	cbnz	r1, 8008d14 <_realloc_r+0x16>
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	f7fd bef8 	b.w	8006b04 <_malloc_r>
 8008d14:	b92a      	cbnz	r2, 8008d22 <_realloc_r+0x24>
 8008d16:	f7fd fe8d 	bl	8006a34 <_free_r>
 8008d1a:	4625      	mov	r5, r4
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d22:	f000 fc61 	bl	80095e8 <_malloc_usable_size_r>
 8008d26:	4284      	cmp	r4, r0
 8008d28:	4607      	mov	r7, r0
 8008d2a:	d802      	bhi.n	8008d32 <_realloc_r+0x34>
 8008d2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d30:	d812      	bhi.n	8008d58 <_realloc_r+0x5a>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4640      	mov	r0, r8
 8008d36:	f7fd fee5 	bl	8006b04 <_malloc_r>
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0ed      	beq.n	8008d1c <_realloc_r+0x1e>
 8008d40:	42bc      	cmp	r4, r7
 8008d42:	4622      	mov	r2, r4
 8008d44:	4631      	mov	r1, r6
 8008d46:	bf28      	it	cs
 8008d48:	463a      	movcs	r2, r7
 8008d4a:	f7ff fa6d 	bl	8008228 <memcpy>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4640      	mov	r0, r8
 8008d52:	f7fd fe6f 	bl	8006a34 <_free_r>
 8008d56:	e7e1      	b.n	8008d1c <_realloc_r+0x1e>
 8008d58:	4635      	mov	r5, r6
 8008d5a:	e7df      	b.n	8008d1c <_realloc_r+0x1e>

08008d5c <__sfputc_r>:
 8008d5c:	6893      	ldr	r3, [r2, #8]
 8008d5e:	b410      	push	{r4}
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	6093      	str	r3, [r2, #8]
 8008d66:	da07      	bge.n	8008d78 <__sfputc_r+0x1c>
 8008d68:	6994      	ldr	r4, [r2, #24]
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	db01      	blt.n	8008d72 <__sfputc_r+0x16>
 8008d6e:	290a      	cmp	r1, #10
 8008d70:	d102      	bne.n	8008d78 <__sfputc_r+0x1c>
 8008d72:	bc10      	pop	{r4}
 8008d74:	f000 b94a 	b.w	800900c <__swbuf_r>
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	1c58      	adds	r0, r3, #1
 8008d7c:	6010      	str	r0, [r2, #0]
 8008d7e:	7019      	strb	r1, [r3, #0]
 8008d80:	4608      	mov	r0, r1
 8008d82:	bc10      	pop	{r4}
 8008d84:	4770      	bx	lr

08008d86 <__sfputs_r>:
 8008d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	18d5      	adds	r5, r2, r3
 8008d90:	42ac      	cmp	r4, r5
 8008d92:	d101      	bne.n	8008d98 <__sfputs_r+0x12>
 8008d94:	2000      	movs	r0, #0
 8008d96:	e007      	b.n	8008da8 <__sfputs_r+0x22>
 8008d98:	463a      	mov	r2, r7
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	f7ff ffdc 	bl	8008d5c <__sfputc_r>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d1f3      	bne.n	8008d90 <__sfputs_r+0xa>
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dac <_vfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	460d      	mov	r5, r1
 8008db2:	4614      	mov	r4, r2
 8008db4:	4698      	mov	r8, r3
 8008db6:	4606      	mov	r6, r0
 8008db8:	b09d      	sub	sp, #116	; 0x74
 8008dba:	b118      	cbz	r0, 8008dc4 <_vfiprintf_r+0x18>
 8008dbc:	6983      	ldr	r3, [r0, #24]
 8008dbe:	b90b      	cbnz	r3, 8008dc4 <_vfiprintf_r+0x18>
 8008dc0:	f000 fb10 	bl	80093e4 <__sinit>
 8008dc4:	4b89      	ldr	r3, [pc, #548]	; (8008fec <_vfiprintf_r+0x240>)
 8008dc6:	429d      	cmp	r5, r3
 8008dc8:	d11b      	bne.n	8008e02 <_vfiprintf_r+0x56>
 8008dca:	6875      	ldr	r5, [r6, #4]
 8008dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dce:	07d9      	lsls	r1, r3, #31
 8008dd0:	d405      	bmi.n	8008dde <_vfiprintf_r+0x32>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	059a      	lsls	r2, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_vfiprintf_r+0x32>
 8008dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dda:	f7ff ff62 	bl	8008ca2 <__retarget_lock_acquire_recursive>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	071b      	lsls	r3, r3, #28
 8008de2:	d501      	bpl.n	8008de8 <_vfiprintf_r+0x3c>
 8008de4:	692b      	ldr	r3, [r5, #16]
 8008de6:	b9eb      	cbnz	r3, 8008e24 <_vfiprintf_r+0x78>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f000 f96e 	bl	80090cc <__swsetup_r>
 8008df0:	b1c0      	cbz	r0, 8008e24 <_vfiprintf_r+0x78>
 8008df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df4:	07dc      	lsls	r4, r3, #31
 8008df6:	d50e      	bpl.n	8008e16 <_vfiprintf_r+0x6a>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dfc:	b01d      	add	sp, #116	; 0x74
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	4b7b      	ldr	r3, [pc, #492]	; (8008ff0 <_vfiprintf_r+0x244>)
 8008e04:	429d      	cmp	r5, r3
 8008e06:	d101      	bne.n	8008e0c <_vfiprintf_r+0x60>
 8008e08:	68b5      	ldr	r5, [r6, #8]
 8008e0a:	e7df      	b.n	8008dcc <_vfiprintf_r+0x20>
 8008e0c:	4b79      	ldr	r3, [pc, #484]	; (8008ff4 <_vfiprintf_r+0x248>)
 8008e0e:	429d      	cmp	r5, r3
 8008e10:	bf08      	it	eq
 8008e12:	68f5      	ldreq	r5, [r6, #12]
 8008e14:	e7da      	b.n	8008dcc <_vfiprintf_r+0x20>
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	0598      	lsls	r0, r3, #22
 8008e1a:	d4ed      	bmi.n	8008df8 <_vfiprintf_r+0x4c>
 8008e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1e:	f7ff ff41 	bl	8008ca4 <__retarget_lock_release_recursive>
 8008e22:	e7e9      	b.n	8008df8 <_vfiprintf_r+0x4c>
 8008e24:	2300      	movs	r3, #0
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2e:	2330      	movs	r3, #48	; 0x30
 8008e30:	f04f 0901 	mov.w	r9, #1
 8008e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ff8 <_vfiprintf_r+0x24c>
 8008e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e40:	4623      	mov	r3, r4
 8008e42:	469a      	mov	sl, r3
 8008e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e48:	b10a      	cbz	r2, 8008e4e <_vfiprintf_r+0xa2>
 8008e4a:	2a25      	cmp	r2, #37	; 0x25
 8008e4c:	d1f9      	bne.n	8008e42 <_vfiprintf_r+0x96>
 8008e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e52:	d00b      	beq.n	8008e6c <_vfiprintf_r+0xc0>
 8008e54:	465b      	mov	r3, fp
 8008e56:	4622      	mov	r2, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ff93 	bl	8008d86 <__sfputs_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	f000 80aa 	beq.w	8008fba <_vfiprintf_r+0x20e>
 8008e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e68:	445a      	add	r2, fp
 8008e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80a2 	beq.w	8008fba <_vfiprintf_r+0x20e>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8e:	4654      	mov	r4, sl
 8008e90:	2205      	movs	r2, #5
 8008e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e96:	4858      	ldr	r0, [pc, #352]	; (8008ff8 <_vfiprintf_r+0x24c>)
 8008e98:	f7ff f9b8 	bl	800820c <memchr>
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	b9d8      	cbnz	r0, 8008ed8 <_vfiprintf_r+0x12c>
 8008ea0:	06d1      	lsls	r1, r2, #27
 8008ea2:	bf44      	itt	mi
 8008ea4:	2320      	movmi	r3, #32
 8008ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eaa:	0713      	lsls	r3, r2, #28
 8008eac:	bf44      	itt	mi
 8008eae:	232b      	movmi	r3, #43	; 0x2b
 8008eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eba:	d015      	beq.n	8008ee8 <_vfiprintf_r+0x13c>
 8008ebc:	4654      	mov	r4, sl
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	9a07      	ldr	r2, [sp, #28]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ecc:	3b30      	subs	r3, #48	; 0x30
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d94e      	bls.n	8008f70 <_vfiprintf_r+0x1c4>
 8008ed2:	b1b0      	cbz	r0, 8008f02 <_vfiprintf_r+0x156>
 8008ed4:	9207      	str	r2, [sp, #28]
 8008ed6:	e014      	b.n	8008f02 <_vfiprintf_r+0x156>
 8008ed8:	eba0 0308 	sub.w	r3, r0, r8
 8008edc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	46a2      	mov	sl, r4
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	e7d2      	b.n	8008e8e <_vfiprintf_r+0xe2>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	1d19      	adds	r1, r3, #4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	9103      	str	r1, [sp, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfbb      	ittet	lt
 8008ef4:	425b      	neglt	r3, r3
 8008ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8008efa:	9307      	strge	r3, [sp, #28]
 8008efc:	9307      	strlt	r3, [sp, #28]
 8008efe:	bfb8      	it	lt
 8008f00:	9204      	strlt	r2, [sp, #16]
 8008f02:	7823      	ldrb	r3, [r4, #0]
 8008f04:	2b2e      	cmp	r3, #46	; 0x2e
 8008f06:	d10c      	bne.n	8008f22 <_vfiprintf_r+0x176>
 8008f08:	7863      	ldrb	r3, [r4, #1]
 8008f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0c:	d135      	bne.n	8008f7a <_vfiprintf_r+0x1ce>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	3402      	adds	r4, #2
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9203      	str	r2, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfb8      	it	lt
 8008f1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f20:	9305      	str	r3, [sp, #20]
 8008f22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008ffc <_vfiprintf_r+0x250>
 8008f26:	2203      	movs	r2, #3
 8008f28:	4650      	mov	r0, sl
 8008f2a:	7821      	ldrb	r1, [r4, #0]
 8008f2c:	f7ff f96e 	bl	800820c <memchr>
 8008f30:	b140      	cbz	r0, 8008f44 <_vfiprintf_r+0x198>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	eba0 000a 	sub.w	r0, r0, sl
 8008f38:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	3401      	adds	r4, #1
 8008f40:	4303      	orrs	r3, r0
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f48:	2206      	movs	r2, #6
 8008f4a:	482d      	ldr	r0, [pc, #180]	; (8009000 <_vfiprintf_r+0x254>)
 8008f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f50:	f7ff f95c 	bl	800820c <memchr>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d03f      	beq.n	8008fd8 <_vfiprintf_r+0x22c>
 8008f58:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <_vfiprintf_r+0x258>)
 8008f5a:	bb1b      	cbnz	r3, 8008fa4 <_vfiprintf_r+0x1f8>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	3307      	adds	r3, #7
 8008f60:	f023 0307 	bic.w	r3, r3, #7
 8008f64:	3308      	adds	r3, #8
 8008f66:	9303      	str	r3, [sp, #12]
 8008f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6a:	443b      	add	r3, r7
 8008f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6e:	e767      	b.n	8008e40 <_vfiprintf_r+0x94>
 8008f70:	460c      	mov	r4, r1
 8008f72:	2001      	movs	r0, #1
 8008f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f78:	e7a5      	b.n	8008ec6 <_vfiprintf_r+0x11a>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f04f 0c0a 	mov.w	ip, #10
 8008f80:	4619      	mov	r1, r3
 8008f82:	3401      	adds	r4, #1
 8008f84:	9305      	str	r3, [sp, #20]
 8008f86:	4620      	mov	r0, r4
 8008f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f8c:	3a30      	subs	r2, #48	; 0x30
 8008f8e:	2a09      	cmp	r2, #9
 8008f90:	d903      	bls.n	8008f9a <_vfiprintf_r+0x1ee>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0c5      	beq.n	8008f22 <_vfiprintf_r+0x176>
 8008f96:	9105      	str	r1, [sp, #20]
 8008f98:	e7c3      	b.n	8008f22 <_vfiprintf_r+0x176>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa2:	e7f0      	b.n	8008f86 <_vfiprintf_r+0x1da>
 8008fa4:	ab03      	add	r3, sp, #12
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	462a      	mov	r2, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <_vfiprintf_r+0x25c>)
 8008fae:	a904      	add	r1, sp, #16
 8008fb0:	f7fd feba 	bl	8006d28 <_printf_float>
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	1c78      	adds	r0, r7, #1
 8008fb8:	d1d6      	bne.n	8008f68 <_vfiprintf_r+0x1bc>
 8008fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fbc:	07d9      	lsls	r1, r3, #31
 8008fbe:	d405      	bmi.n	8008fcc <_vfiprintf_r+0x220>
 8008fc0:	89ab      	ldrh	r3, [r5, #12]
 8008fc2:	059a      	lsls	r2, r3, #22
 8008fc4:	d402      	bmi.n	8008fcc <_vfiprintf_r+0x220>
 8008fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc8:	f7ff fe6c 	bl	8008ca4 <__retarget_lock_release_recursive>
 8008fcc:	89ab      	ldrh	r3, [r5, #12]
 8008fce:	065b      	lsls	r3, r3, #25
 8008fd0:	f53f af12 	bmi.w	8008df8 <_vfiprintf_r+0x4c>
 8008fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fd6:	e711      	b.n	8008dfc <_vfiprintf_r+0x50>
 8008fd8:	ab03      	add	r3, sp, #12
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	462a      	mov	r2, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <_vfiprintf_r+0x25c>)
 8008fe2:	a904      	add	r1, sp, #16
 8008fe4:	f7fe f93c 	bl	8007260 <_printf_i>
 8008fe8:	e7e4      	b.n	8008fb4 <_vfiprintf_r+0x208>
 8008fea:	bf00      	nop
 8008fec:	0800a36c 	.word	0x0800a36c
 8008ff0:	0800a38c 	.word	0x0800a38c
 8008ff4:	0800a34c 	.word	0x0800a34c
 8008ff8:	0800a1f4 	.word	0x0800a1f4
 8008ffc:	0800a1fa 	.word	0x0800a1fa
 8009000:	0800a1fe 	.word	0x0800a1fe
 8009004:	08006d29 	.word	0x08006d29
 8009008:	08008d87 	.word	0x08008d87

0800900c <__swbuf_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	460e      	mov	r6, r1
 8009010:	4614      	mov	r4, r2
 8009012:	4605      	mov	r5, r0
 8009014:	b118      	cbz	r0, 800901e <__swbuf_r+0x12>
 8009016:	6983      	ldr	r3, [r0, #24]
 8009018:	b90b      	cbnz	r3, 800901e <__swbuf_r+0x12>
 800901a:	f000 f9e3 	bl	80093e4 <__sinit>
 800901e:	4b21      	ldr	r3, [pc, #132]	; (80090a4 <__swbuf_r+0x98>)
 8009020:	429c      	cmp	r4, r3
 8009022:	d12b      	bne.n	800907c <__swbuf_r+0x70>
 8009024:	686c      	ldr	r4, [r5, #4]
 8009026:	69a3      	ldr	r3, [r4, #24]
 8009028:	60a3      	str	r3, [r4, #8]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	071a      	lsls	r2, r3, #28
 800902e:	d52f      	bpl.n	8009090 <__swbuf_r+0x84>
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	b36b      	cbz	r3, 8009090 <__swbuf_r+0x84>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	b2f6      	uxtb	r6, r6
 800903a:	1ac0      	subs	r0, r0, r3
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	4637      	mov	r7, r6
 8009040:	4283      	cmp	r3, r0
 8009042:	dc04      	bgt.n	800904e <__swbuf_r+0x42>
 8009044:	4621      	mov	r1, r4
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f938 	bl	80092bc <_fflush_r>
 800904c:	bb30      	cbnz	r0, 800909c <__swbuf_r+0x90>
 800904e:	68a3      	ldr	r3, [r4, #8]
 8009050:	3001      	adds	r0, #1
 8009052:	3b01      	subs	r3, #1
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	701e      	strb	r6, [r3, #0]
 800905e:	6963      	ldr	r3, [r4, #20]
 8009060:	4283      	cmp	r3, r0
 8009062:	d004      	beq.n	800906e <__swbuf_r+0x62>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	07db      	lsls	r3, r3, #31
 8009068:	d506      	bpl.n	8009078 <__swbuf_r+0x6c>
 800906a:	2e0a      	cmp	r6, #10
 800906c:	d104      	bne.n	8009078 <__swbuf_r+0x6c>
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f923 	bl	80092bc <_fflush_r>
 8009076:	b988      	cbnz	r0, 800909c <__swbuf_r+0x90>
 8009078:	4638      	mov	r0, r7
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <__swbuf_r+0x9c>)
 800907e:	429c      	cmp	r4, r3
 8009080:	d101      	bne.n	8009086 <__swbuf_r+0x7a>
 8009082:	68ac      	ldr	r4, [r5, #8]
 8009084:	e7cf      	b.n	8009026 <__swbuf_r+0x1a>
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <__swbuf_r+0xa0>)
 8009088:	429c      	cmp	r4, r3
 800908a:	bf08      	it	eq
 800908c:	68ec      	ldreq	r4, [r5, #12]
 800908e:	e7ca      	b.n	8009026 <__swbuf_r+0x1a>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f81a 	bl	80090cc <__swsetup_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	d0cb      	beq.n	8009034 <__swbuf_r+0x28>
 800909c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090a0:	e7ea      	b.n	8009078 <__swbuf_r+0x6c>
 80090a2:	bf00      	nop
 80090a4:	0800a36c 	.word	0x0800a36c
 80090a8:	0800a38c 	.word	0x0800a38c
 80090ac:	0800a34c 	.word	0x0800a34c

080090b0 <__ascii_wctomb>:
 80090b0:	4603      	mov	r3, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	b141      	cbz	r1, 80090c8 <__ascii_wctomb+0x18>
 80090b6:	2aff      	cmp	r2, #255	; 0xff
 80090b8:	d904      	bls.n	80090c4 <__ascii_wctomb+0x14>
 80090ba:	228a      	movs	r2, #138	; 0x8a
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	4770      	bx	lr
 80090c4:	2001      	movs	r0, #1
 80090c6:	700a      	strb	r2, [r1, #0]
 80090c8:	4770      	bx	lr
	...

080090cc <__swsetup_r>:
 80090cc:	4b32      	ldr	r3, [pc, #200]	; (8009198 <__swsetup_r+0xcc>)
 80090ce:	b570      	push	{r4, r5, r6, lr}
 80090d0:	681d      	ldr	r5, [r3, #0]
 80090d2:	4606      	mov	r6, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	b125      	cbz	r5, 80090e2 <__swsetup_r+0x16>
 80090d8:	69ab      	ldr	r3, [r5, #24]
 80090da:	b913      	cbnz	r3, 80090e2 <__swsetup_r+0x16>
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 f981 	bl	80093e4 <__sinit>
 80090e2:	4b2e      	ldr	r3, [pc, #184]	; (800919c <__swsetup_r+0xd0>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d10f      	bne.n	8009108 <__swsetup_r+0x3c>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f0:	0719      	lsls	r1, r3, #28
 80090f2:	d42c      	bmi.n	800914e <__swsetup_r+0x82>
 80090f4:	06dd      	lsls	r5, r3, #27
 80090f6:	d411      	bmi.n	800911c <__swsetup_r+0x50>
 80090f8:	2309      	movs	r3, #9
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e03e      	b.n	8009186 <__swsetup_r+0xba>
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <__swsetup_r+0xd4>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <__swsetup_r+0x46>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7eb      	b.n	80090ea <__swsetup_r+0x1e>
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <__swsetup_r+0xd8>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7e6      	b.n	80090ea <__swsetup_r+0x1e>
 800911c:	0758      	lsls	r0, r3, #29
 800911e:	d512      	bpl.n	8009146 <__swsetup_r+0x7a>
 8009120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009122:	b141      	cbz	r1, 8009136 <__swsetup_r+0x6a>
 8009124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009128:	4299      	cmp	r1, r3
 800912a:	d002      	beq.n	8009132 <__swsetup_r+0x66>
 800912c:	4630      	mov	r0, r6
 800912e:	f7fd fc81 	bl	8006a34 <_free_r>
 8009132:	2300      	movs	r3, #0
 8009134:	6363      	str	r3, [r4, #52]	; 0x34
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	2300      	movs	r3, #0
 8009140:	6063      	str	r3, [r4, #4]
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	f043 0308 	orr.w	r3, r3, #8
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	6923      	ldr	r3, [r4, #16]
 8009150:	b94b      	cbnz	r3, 8009166 <__swsetup_r+0x9a>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800915c:	d003      	beq.n	8009166 <__swsetup_r+0x9a>
 800915e:	4621      	mov	r1, r4
 8009160:	4630      	mov	r0, r6
 8009162:	f000 fa01 	bl	8009568 <__smakebuf_r>
 8009166:	89a0      	ldrh	r0, [r4, #12]
 8009168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800916c:	f010 0301 	ands.w	r3, r0, #1
 8009170:	d00a      	beq.n	8009188 <__swsetup_r+0xbc>
 8009172:	2300      	movs	r3, #0
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	6963      	ldr	r3, [r4, #20]
 8009178:	425b      	negs	r3, r3
 800917a:	61a3      	str	r3, [r4, #24]
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	b943      	cbnz	r3, 8009192 <__swsetup_r+0xc6>
 8009180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009184:	d1ba      	bne.n	80090fc <__swsetup_r+0x30>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	0781      	lsls	r1, r0, #30
 800918a:	bf58      	it	pl
 800918c:	6963      	ldrpl	r3, [r4, #20]
 800918e:	60a3      	str	r3, [r4, #8]
 8009190:	e7f4      	b.n	800917c <__swsetup_r+0xb0>
 8009192:	2000      	movs	r0, #0
 8009194:	e7f7      	b.n	8009186 <__swsetup_r+0xba>
 8009196:	bf00      	nop
 8009198:	20000040 	.word	0x20000040
 800919c:	0800a36c 	.word	0x0800a36c
 80091a0:	0800a38c 	.word	0x0800a38c
 80091a4:	0800a34c 	.word	0x0800a34c

080091a8 <abort>:
 80091a8:	2006      	movs	r0, #6
 80091aa:	b508      	push	{r3, lr}
 80091ac:	f000 fa4c 	bl	8009648 <raise>
 80091b0:	2001      	movs	r0, #1
 80091b2:	f7f9 fdca 	bl	8002d4a <_exit>
	...

080091b8 <__sflush_r>:
 80091b8:	898a      	ldrh	r2, [r1, #12]
 80091ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091bc:	4605      	mov	r5, r0
 80091be:	0710      	lsls	r0, r2, #28
 80091c0:	460c      	mov	r4, r1
 80091c2:	d457      	bmi.n	8009274 <__sflush_r+0xbc>
 80091c4:	684b      	ldr	r3, [r1, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	dc04      	bgt.n	80091d4 <__sflush_r+0x1c>
 80091ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dc01      	bgt.n	80091d4 <__sflush_r+0x1c>
 80091d0:	2000      	movs	r0, #0
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d6:	2e00      	cmp	r6, #0
 80091d8:	d0fa      	beq.n	80091d0 <__sflush_r+0x18>
 80091da:	2300      	movs	r3, #0
 80091dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091e0:	682f      	ldr	r7, [r5, #0]
 80091e2:	602b      	str	r3, [r5, #0]
 80091e4:	d032      	beq.n	800924c <__sflush_r+0x94>
 80091e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	075a      	lsls	r2, r3, #29
 80091ec:	d505      	bpl.n	80091fa <__sflush_r+0x42>
 80091ee:	6863      	ldr	r3, [r4, #4]
 80091f0:	1ac0      	subs	r0, r0, r3
 80091f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f4:	b10b      	cbz	r3, 80091fa <__sflush_r+0x42>
 80091f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f8:	1ac0      	subs	r0, r0, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	4602      	mov	r2, r0
 80091fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009200:	4628      	mov	r0, r5
 8009202:	6a21      	ldr	r1, [r4, #32]
 8009204:	47b0      	blx	r6
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	d106      	bne.n	800921a <__sflush_r+0x62>
 800920c:	6829      	ldr	r1, [r5, #0]
 800920e:	291d      	cmp	r1, #29
 8009210:	d82c      	bhi.n	800926c <__sflush_r+0xb4>
 8009212:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <__sflush_r+0x100>)
 8009214:	40ca      	lsrs	r2, r1
 8009216:	07d6      	lsls	r6, r2, #31
 8009218:	d528      	bpl.n	800926c <__sflush_r+0xb4>
 800921a:	2200      	movs	r2, #0
 800921c:	6062      	str	r2, [r4, #4]
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	04d9      	lsls	r1, r3, #19
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	d504      	bpl.n	8009230 <__sflush_r+0x78>
 8009226:	1c42      	adds	r2, r0, #1
 8009228:	d101      	bne.n	800922e <__sflush_r+0x76>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	b903      	cbnz	r3, 8009230 <__sflush_r+0x78>
 800922e:	6560      	str	r0, [r4, #84]	; 0x54
 8009230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009232:	602f      	str	r7, [r5, #0]
 8009234:	2900      	cmp	r1, #0
 8009236:	d0cb      	beq.n	80091d0 <__sflush_r+0x18>
 8009238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800923c:	4299      	cmp	r1, r3
 800923e:	d002      	beq.n	8009246 <__sflush_r+0x8e>
 8009240:	4628      	mov	r0, r5
 8009242:	f7fd fbf7 	bl	8006a34 <_free_r>
 8009246:	2000      	movs	r0, #0
 8009248:	6360      	str	r0, [r4, #52]	; 0x34
 800924a:	e7c2      	b.n	80091d2 <__sflush_r+0x1a>
 800924c:	6a21      	ldr	r1, [r4, #32]
 800924e:	2301      	movs	r3, #1
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	1c41      	adds	r1, r0, #1
 8009256:	d1c7      	bne.n	80091e8 <__sflush_r+0x30>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0c4      	beq.n	80091e8 <__sflush_r+0x30>
 800925e:	2b1d      	cmp	r3, #29
 8009260:	d001      	beq.n	8009266 <__sflush_r+0xae>
 8009262:	2b16      	cmp	r3, #22
 8009264:	d101      	bne.n	800926a <__sflush_r+0xb2>
 8009266:	602f      	str	r7, [r5, #0]
 8009268:	e7b2      	b.n	80091d0 <__sflush_r+0x18>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	e7ae      	b.n	80091d2 <__sflush_r+0x1a>
 8009274:	690f      	ldr	r7, [r1, #16]
 8009276:	2f00      	cmp	r7, #0
 8009278:	d0aa      	beq.n	80091d0 <__sflush_r+0x18>
 800927a:	0793      	lsls	r3, r2, #30
 800927c:	bf18      	it	ne
 800927e:	2300      	movne	r3, #0
 8009280:	680e      	ldr	r6, [r1, #0]
 8009282:	bf08      	it	eq
 8009284:	694b      	ldreq	r3, [r1, #20]
 8009286:	1bf6      	subs	r6, r6, r7
 8009288:	600f      	str	r7, [r1, #0]
 800928a:	608b      	str	r3, [r1, #8]
 800928c:	2e00      	cmp	r6, #0
 800928e:	dd9f      	ble.n	80091d0 <__sflush_r+0x18>
 8009290:	4633      	mov	r3, r6
 8009292:	463a      	mov	r2, r7
 8009294:	4628      	mov	r0, r5
 8009296:	6a21      	ldr	r1, [r4, #32]
 8009298:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800929c:	47e0      	blx	ip
 800929e:	2800      	cmp	r0, #0
 80092a0:	dc06      	bgt.n	80092b0 <__sflush_r+0xf8>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	e790      	b.n	80091d2 <__sflush_r+0x1a>
 80092b0:	4407      	add	r7, r0
 80092b2:	1a36      	subs	r6, r6, r0
 80092b4:	e7ea      	b.n	800928c <__sflush_r+0xd4>
 80092b6:	bf00      	nop
 80092b8:	20400001 	.word	0x20400001

080092bc <_fflush_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	690b      	ldr	r3, [r1, #16]
 80092c0:	4605      	mov	r5, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	b913      	cbnz	r3, 80092cc <_fflush_r+0x10>
 80092c6:	2500      	movs	r5, #0
 80092c8:	4628      	mov	r0, r5
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	b118      	cbz	r0, 80092d6 <_fflush_r+0x1a>
 80092ce:	6983      	ldr	r3, [r0, #24]
 80092d0:	b90b      	cbnz	r3, 80092d6 <_fflush_r+0x1a>
 80092d2:	f000 f887 	bl	80093e4 <__sinit>
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <_fflush_r+0x6c>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	d11b      	bne.n	8009314 <_fflush_r+0x58>
 80092dc:	686c      	ldr	r4, [r5, #4]
 80092de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0ef      	beq.n	80092c6 <_fflush_r+0xa>
 80092e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092e8:	07d0      	lsls	r0, r2, #31
 80092ea:	d404      	bmi.n	80092f6 <_fflush_r+0x3a>
 80092ec:	0599      	lsls	r1, r3, #22
 80092ee:	d402      	bmi.n	80092f6 <_fflush_r+0x3a>
 80092f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092f2:	f7ff fcd6 	bl	8008ca2 <__retarget_lock_acquire_recursive>
 80092f6:	4628      	mov	r0, r5
 80092f8:	4621      	mov	r1, r4
 80092fa:	f7ff ff5d 	bl	80091b8 <__sflush_r>
 80092fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009300:	4605      	mov	r5, r0
 8009302:	07da      	lsls	r2, r3, #31
 8009304:	d4e0      	bmi.n	80092c8 <_fflush_r+0xc>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	059b      	lsls	r3, r3, #22
 800930a:	d4dd      	bmi.n	80092c8 <_fflush_r+0xc>
 800930c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800930e:	f7ff fcc9 	bl	8008ca4 <__retarget_lock_release_recursive>
 8009312:	e7d9      	b.n	80092c8 <_fflush_r+0xc>
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <_fflush_r+0x70>)
 8009316:	429c      	cmp	r4, r3
 8009318:	d101      	bne.n	800931e <_fflush_r+0x62>
 800931a:	68ac      	ldr	r4, [r5, #8]
 800931c:	e7df      	b.n	80092de <_fflush_r+0x22>
 800931e:	4b04      	ldr	r3, [pc, #16]	; (8009330 <_fflush_r+0x74>)
 8009320:	429c      	cmp	r4, r3
 8009322:	bf08      	it	eq
 8009324:	68ec      	ldreq	r4, [r5, #12]
 8009326:	e7da      	b.n	80092de <_fflush_r+0x22>
 8009328:	0800a36c 	.word	0x0800a36c
 800932c:	0800a38c 	.word	0x0800a38c
 8009330:	0800a34c 	.word	0x0800a34c

08009334 <std>:
 8009334:	2300      	movs	r3, #0
 8009336:	b510      	push	{r4, lr}
 8009338:	4604      	mov	r4, r0
 800933a:	e9c0 3300 	strd	r3, r3, [r0]
 800933e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009342:	6083      	str	r3, [r0, #8]
 8009344:	8181      	strh	r1, [r0, #12]
 8009346:	6643      	str	r3, [r0, #100]	; 0x64
 8009348:	81c2      	strh	r2, [r0, #14]
 800934a:	6183      	str	r3, [r0, #24]
 800934c:	4619      	mov	r1, r3
 800934e:	2208      	movs	r2, #8
 8009350:	305c      	adds	r0, #92	; 0x5c
 8009352:	f7fd fb67 	bl	8006a24 <memset>
 8009356:	4b05      	ldr	r3, [pc, #20]	; (800936c <std+0x38>)
 8009358:	6224      	str	r4, [r4, #32]
 800935a:	6263      	str	r3, [r4, #36]	; 0x24
 800935c:	4b04      	ldr	r3, [pc, #16]	; (8009370 <std+0x3c>)
 800935e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009360:	4b04      	ldr	r3, [pc, #16]	; (8009374 <std+0x40>)
 8009362:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009364:	4b04      	ldr	r3, [pc, #16]	; (8009378 <std+0x44>)
 8009366:	6323      	str	r3, [r4, #48]	; 0x30
 8009368:	bd10      	pop	{r4, pc}
 800936a:	bf00      	nop
 800936c:	08009681 	.word	0x08009681
 8009370:	080096a3 	.word	0x080096a3
 8009374:	080096db 	.word	0x080096db
 8009378:	080096ff 	.word	0x080096ff

0800937c <_cleanup_r>:
 800937c:	4901      	ldr	r1, [pc, #4]	; (8009384 <_cleanup_r+0x8>)
 800937e:	f000 b8af 	b.w	80094e0 <_fwalk_reent>
 8009382:	bf00      	nop
 8009384:	080092bd 	.word	0x080092bd

08009388 <__sfmoreglue>:
 8009388:	2268      	movs	r2, #104	; 0x68
 800938a:	b570      	push	{r4, r5, r6, lr}
 800938c:	1e4d      	subs	r5, r1, #1
 800938e:	4355      	muls	r5, r2
 8009390:	460e      	mov	r6, r1
 8009392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009396:	f7fd fbb5 	bl	8006b04 <_malloc_r>
 800939a:	4604      	mov	r4, r0
 800939c:	b140      	cbz	r0, 80093b0 <__sfmoreglue+0x28>
 800939e:	2100      	movs	r1, #0
 80093a0:	e9c0 1600 	strd	r1, r6, [r0]
 80093a4:	300c      	adds	r0, #12
 80093a6:	60a0      	str	r0, [r4, #8]
 80093a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093ac:	f7fd fb3a 	bl	8006a24 <memset>
 80093b0:	4620      	mov	r0, r4
 80093b2:	bd70      	pop	{r4, r5, r6, pc}

080093b4 <__sfp_lock_acquire>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__sfp_lock_acquire+0x8>)
 80093b6:	f7ff bc74 	b.w	8008ca2 <__retarget_lock_acquire_recursive>
 80093ba:	bf00      	nop
 80093bc:	2000031d 	.word	0x2000031d

080093c0 <__sfp_lock_release>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sfp_lock_release+0x8>)
 80093c2:	f7ff bc6f 	b.w	8008ca4 <__retarget_lock_release_recursive>
 80093c6:	bf00      	nop
 80093c8:	2000031d 	.word	0x2000031d

080093cc <__sinit_lock_acquire>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sinit_lock_acquire+0x8>)
 80093ce:	f7ff bc68 	b.w	8008ca2 <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	2000031e 	.word	0x2000031e

080093d8 <__sinit_lock_release>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__sinit_lock_release+0x8>)
 80093da:	f7ff bc63 	b.w	8008ca4 <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	2000031e 	.word	0x2000031e

080093e4 <__sinit>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	4604      	mov	r4, r0
 80093e8:	f7ff fff0 	bl	80093cc <__sinit_lock_acquire>
 80093ec:	69a3      	ldr	r3, [r4, #24]
 80093ee:	b11b      	cbz	r3, 80093f8 <__sinit+0x14>
 80093f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f4:	f7ff bff0 	b.w	80093d8 <__sinit_lock_release>
 80093f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093fc:	6523      	str	r3, [r4, #80]	; 0x50
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <__sinit+0x68>)
 8009400:	4a13      	ldr	r2, [pc, #76]	; (8009450 <__sinit+0x6c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	62a2      	str	r2, [r4, #40]	; 0x28
 8009406:	42a3      	cmp	r3, r4
 8009408:	bf08      	it	eq
 800940a:	2301      	moveq	r3, #1
 800940c:	4620      	mov	r0, r4
 800940e:	bf08      	it	eq
 8009410:	61a3      	streq	r3, [r4, #24]
 8009412:	f000 f81f 	bl	8009454 <__sfp>
 8009416:	6060      	str	r0, [r4, #4]
 8009418:	4620      	mov	r0, r4
 800941a:	f000 f81b 	bl	8009454 <__sfp>
 800941e:	60a0      	str	r0, [r4, #8]
 8009420:	4620      	mov	r0, r4
 8009422:	f000 f817 	bl	8009454 <__sfp>
 8009426:	2200      	movs	r2, #0
 8009428:	2104      	movs	r1, #4
 800942a:	60e0      	str	r0, [r4, #12]
 800942c:	6860      	ldr	r0, [r4, #4]
 800942e:	f7ff ff81 	bl	8009334 <std>
 8009432:	2201      	movs	r2, #1
 8009434:	2109      	movs	r1, #9
 8009436:	68a0      	ldr	r0, [r4, #8]
 8009438:	f7ff ff7c 	bl	8009334 <std>
 800943c:	2202      	movs	r2, #2
 800943e:	2112      	movs	r1, #18
 8009440:	68e0      	ldr	r0, [r4, #12]
 8009442:	f7ff ff77 	bl	8009334 <std>
 8009446:	2301      	movs	r3, #1
 8009448:	61a3      	str	r3, [r4, #24]
 800944a:	e7d1      	b.n	80093f0 <__sinit+0xc>
 800944c:	08009fd4 	.word	0x08009fd4
 8009450:	0800937d 	.word	0x0800937d

08009454 <__sfp>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	4607      	mov	r7, r0
 8009458:	f7ff ffac 	bl	80093b4 <__sfp_lock_acquire>
 800945c:	4b1e      	ldr	r3, [pc, #120]	; (80094d8 <__sfp+0x84>)
 800945e:	681e      	ldr	r6, [r3, #0]
 8009460:	69b3      	ldr	r3, [r6, #24]
 8009462:	b913      	cbnz	r3, 800946a <__sfp+0x16>
 8009464:	4630      	mov	r0, r6
 8009466:	f7ff ffbd 	bl	80093e4 <__sinit>
 800946a:	3648      	adds	r6, #72	; 0x48
 800946c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009470:	3b01      	subs	r3, #1
 8009472:	d503      	bpl.n	800947c <__sfp+0x28>
 8009474:	6833      	ldr	r3, [r6, #0]
 8009476:	b30b      	cbz	r3, 80094bc <__sfp+0x68>
 8009478:	6836      	ldr	r6, [r6, #0]
 800947a:	e7f7      	b.n	800946c <__sfp+0x18>
 800947c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009480:	b9d5      	cbnz	r5, 80094b8 <__sfp+0x64>
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <__sfp+0x88>)
 8009484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009488:	60e3      	str	r3, [r4, #12]
 800948a:	6665      	str	r5, [r4, #100]	; 0x64
 800948c:	f7ff fc08 	bl	8008ca0 <__retarget_lock_init_recursive>
 8009490:	f7ff ff96 	bl	80093c0 <__sfp_lock_release>
 8009494:	2208      	movs	r2, #8
 8009496:	4629      	mov	r1, r5
 8009498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800949c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094a0:	6025      	str	r5, [r4, #0]
 80094a2:	61a5      	str	r5, [r4, #24]
 80094a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094a8:	f7fd fabc 	bl	8006a24 <memset>
 80094ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094b4:	4620      	mov	r0, r4
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b8:	3468      	adds	r4, #104	; 0x68
 80094ba:	e7d9      	b.n	8009470 <__sfp+0x1c>
 80094bc:	2104      	movs	r1, #4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ff62 	bl	8009388 <__sfmoreglue>
 80094c4:	4604      	mov	r4, r0
 80094c6:	6030      	str	r0, [r6, #0]
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d1d5      	bne.n	8009478 <__sfp+0x24>
 80094cc:	f7ff ff78 	bl	80093c0 <__sfp_lock_release>
 80094d0:	230c      	movs	r3, #12
 80094d2:	603b      	str	r3, [r7, #0]
 80094d4:	e7ee      	b.n	80094b4 <__sfp+0x60>
 80094d6:	bf00      	nop
 80094d8:	08009fd4 	.word	0x08009fd4
 80094dc:	ffff0001 	.word	0xffff0001

080094e0 <_fwalk_reent>:
 80094e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e4:	4606      	mov	r6, r0
 80094e6:	4688      	mov	r8, r1
 80094e8:	2700      	movs	r7, #0
 80094ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094f2:	f1b9 0901 	subs.w	r9, r9, #1
 80094f6:	d505      	bpl.n	8009504 <_fwalk_reent+0x24>
 80094f8:	6824      	ldr	r4, [r4, #0]
 80094fa:	2c00      	cmp	r4, #0
 80094fc:	d1f7      	bne.n	80094ee <_fwalk_reent+0xe>
 80094fe:	4638      	mov	r0, r7
 8009500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009504:	89ab      	ldrh	r3, [r5, #12]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d907      	bls.n	800951a <_fwalk_reent+0x3a>
 800950a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800950e:	3301      	adds	r3, #1
 8009510:	d003      	beq.n	800951a <_fwalk_reent+0x3a>
 8009512:	4629      	mov	r1, r5
 8009514:	4630      	mov	r0, r6
 8009516:	47c0      	blx	r8
 8009518:	4307      	orrs	r7, r0
 800951a:	3568      	adds	r5, #104	; 0x68
 800951c:	e7e9      	b.n	80094f2 <_fwalk_reent+0x12>

0800951e <__swhatbuf_r>:
 800951e:	b570      	push	{r4, r5, r6, lr}
 8009520:	460e      	mov	r6, r1
 8009522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009526:	4614      	mov	r4, r2
 8009528:	2900      	cmp	r1, #0
 800952a:	461d      	mov	r5, r3
 800952c:	b096      	sub	sp, #88	; 0x58
 800952e:	da08      	bge.n	8009542 <__swhatbuf_r+0x24>
 8009530:	2200      	movs	r2, #0
 8009532:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009536:	602a      	str	r2, [r5, #0]
 8009538:	061a      	lsls	r2, r3, #24
 800953a:	d410      	bmi.n	800955e <__swhatbuf_r+0x40>
 800953c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009540:	e00e      	b.n	8009560 <__swhatbuf_r+0x42>
 8009542:	466a      	mov	r2, sp
 8009544:	f000 f902 	bl	800974c <_fstat_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	dbf1      	blt.n	8009530 <__swhatbuf_r+0x12>
 800954c:	9a01      	ldr	r2, [sp, #4]
 800954e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009556:	425a      	negs	r2, r3
 8009558:	415a      	adcs	r2, r3
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	e7ee      	b.n	800953c <__swhatbuf_r+0x1e>
 800955e:	2340      	movs	r3, #64	; 0x40
 8009560:	2000      	movs	r0, #0
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	b016      	add	sp, #88	; 0x58
 8009566:	bd70      	pop	{r4, r5, r6, pc}

08009568 <__smakebuf_r>:
 8009568:	898b      	ldrh	r3, [r1, #12]
 800956a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800956c:	079d      	lsls	r5, r3, #30
 800956e:	4606      	mov	r6, r0
 8009570:	460c      	mov	r4, r1
 8009572:	d507      	bpl.n	8009584 <__smakebuf_r+0x1c>
 8009574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	2301      	movs	r3, #1
 800957e:	6163      	str	r3, [r4, #20]
 8009580:	b002      	add	sp, #8
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	466a      	mov	r2, sp
 8009586:	ab01      	add	r3, sp, #4
 8009588:	f7ff ffc9 	bl	800951e <__swhatbuf_r>
 800958c:	9900      	ldr	r1, [sp, #0]
 800958e:	4605      	mov	r5, r0
 8009590:	4630      	mov	r0, r6
 8009592:	f7fd fab7 	bl	8006b04 <_malloc_r>
 8009596:	b948      	cbnz	r0, 80095ac <__smakebuf_r+0x44>
 8009598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959c:	059a      	lsls	r2, r3, #22
 800959e:	d4ef      	bmi.n	8009580 <__smakebuf_r+0x18>
 80095a0:	f023 0303 	bic.w	r3, r3, #3
 80095a4:	f043 0302 	orr.w	r3, r3, #2
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	e7e3      	b.n	8009574 <__smakebuf_r+0xc>
 80095ac:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <__smakebuf_r+0x7c>)
 80095ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	6020      	str	r0, [r4, #0]
 80095b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	6120      	str	r0, [r4, #16]
 80095be:	6163      	str	r3, [r4, #20]
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	b15b      	cbz	r3, 80095dc <__smakebuf_r+0x74>
 80095c4:	4630      	mov	r0, r6
 80095c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095ca:	f000 f8d1 	bl	8009770 <_isatty_r>
 80095ce:	b128      	cbz	r0, 80095dc <__smakebuf_r+0x74>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	89a0      	ldrh	r0, [r4, #12]
 80095de:	4305      	orrs	r5, r0
 80095e0:	81a5      	strh	r5, [r4, #12]
 80095e2:	e7cd      	b.n	8009580 <__smakebuf_r+0x18>
 80095e4:	0800937d 	.word	0x0800937d

080095e8 <_malloc_usable_size_r>:
 80095e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ec:	1f18      	subs	r0, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfbc      	itt	lt
 80095f2:	580b      	ldrlt	r3, [r1, r0]
 80095f4:	18c0      	addlt	r0, r0, r3
 80095f6:	4770      	bx	lr

080095f8 <_raise_r>:
 80095f8:	291f      	cmp	r1, #31
 80095fa:	b538      	push	{r3, r4, r5, lr}
 80095fc:	4604      	mov	r4, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	d904      	bls.n	800960c <_raise_r+0x14>
 8009602:	2316      	movs	r3, #22
 8009604:	6003      	str	r3, [r0, #0]
 8009606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800960e:	b112      	cbz	r2, 8009616 <_raise_r+0x1e>
 8009610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009614:	b94b      	cbnz	r3, 800962a <_raise_r+0x32>
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f830 	bl	800967c <_getpid_r>
 800961c:	462a      	mov	r2, r5
 800961e:	4601      	mov	r1, r0
 8009620:	4620      	mov	r0, r4
 8009622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009626:	f000 b817 	b.w	8009658 <_kill_r>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d00a      	beq.n	8009644 <_raise_r+0x4c>
 800962e:	1c59      	adds	r1, r3, #1
 8009630:	d103      	bne.n	800963a <_raise_r+0x42>
 8009632:	2316      	movs	r3, #22
 8009634:	6003      	str	r3, [r0, #0]
 8009636:	2001      	movs	r0, #1
 8009638:	e7e7      	b.n	800960a <_raise_r+0x12>
 800963a:	2400      	movs	r4, #0
 800963c:	4628      	mov	r0, r5
 800963e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009642:	4798      	blx	r3
 8009644:	2000      	movs	r0, #0
 8009646:	e7e0      	b.n	800960a <_raise_r+0x12>

08009648 <raise>:
 8009648:	4b02      	ldr	r3, [pc, #8]	; (8009654 <raise+0xc>)
 800964a:	4601      	mov	r1, r0
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f7ff bfd3 	b.w	80095f8 <_raise_r>
 8009652:	bf00      	nop
 8009654:	20000040 	.word	0x20000040

08009658 <_kill_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	2300      	movs	r3, #0
 800965c:	4d06      	ldr	r5, [pc, #24]	; (8009678 <_kill_r+0x20>)
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	4611      	mov	r1, r2
 8009664:	602b      	str	r3, [r5, #0]
 8009666:	f7f9 fb60 	bl	8002d2a <_kill>
 800966a:	1c43      	adds	r3, r0, #1
 800966c:	d102      	bne.n	8009674 <_kill_r+0x1c>
 800966e:	682b      	ldr	r3, [r5, #0]
 8009670:	b103      	cbz	r3, 8009674 <_kill_r+0x1c>
 8009672:	6023      	str	r3, [r4, #0]
 8009674:	bd38      	pop	{r3, r4, r5, pc}
 8009676:	bf00      	nop
 8009678:	20000318 	.word	0x20000318

0800967c <_getpid_r>:
 800967c:	f7f9 bb4e 	b.w	8002d1c <_getpid>

08009680 <__sread>:
 8009680:	b510      	push	{r4, lr}
 8009682:	460c      	mov	r4, r1
 8009684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009688:	f000 f894 	bl	80097b4 <_read_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	bfab      	itete	ge
 8009690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009692:	89a3      	ldrhlt	r3, [r4, #12]
 8009694:	181b      	addge	r3, r3, r0
 8009696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800969a:	bfac      	ite	ge
 800969c:	6563      	strge	r3, [r4, #84]	; 0x54
 800969e:	81a3      	strhlt	r3, [r4, #12]
 80096a0:	bd10      	pop	{r4, pc}

080096a2 <__swrite>:
 80096a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	461f      	mov	r7, r3
 80096a8:	898b      	ldrh	r3, [r1, #12]
 80096aa:	4605      	mov	r5, r0
 80096ac:	05db      	lsls	r3, r3, #23
 80096ae:	460c      	mov	r4, r1
 80096b0:	4616      	mov	r6, r2
 80096b2:	d505      	bpl.n	80096c0 <__swrite+0x1e>
 80096b4:	2302      	movs	r3, #2
 80096b6:	2200      	movs	r2, #0
 80096b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096bc:	f000 f868 	bl	8009790 <_lseek_r>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	4632      	mov	r2, r6
 80096c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	4628      	mov	r0, r5
 80096cc:	463b      	mov	r3, r7
 80096ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d6:	f000 b817 	b.w	8009708 <_write_r>

080096da <__sseek>:
 80096da:	b510      	push	{r4, lr}
 80096dc:	460c      	mov	r4, r1
 80096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e2:	f000 f855 	bl	8009790 <_lseek_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	bf15      	itete	ne
 80096ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80096ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096f6:	81a3      	strheq	r3, [r4, #12]
 80096f8:	bf18      	it	ne
 80096fa:	81a3      	strhne	r3, [r4, #12]
 80096fc:	bd10      	pop	{r4, pc}

080096fe <__sclose>:
 80096fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009702:	f000 b813 	b.w	800972c <_close_r>
	...

08009708 <_write_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4604      	mov	r4, r0
 800970c:	4608      	mov	r0, r1
 800970e:	4611      	mov	r1, r2
 8009710:	2200      	movs	r2, #0
 8009712:	4d05      	ldr	r5, [pc, #20]	; (8009728 <_write_r+0x20>)
 8009714:	602a      	str	r2, [r5, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	f7f9 fb3e 	bl	8002d98 <_write>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_write_r+0x1e>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_write_r+0x1e>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20000318 	.word	0x20000318

0800972c <_close_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	2300      	movs	r3, #0
 8009730:	4d05      	ldr	r5, [pc, #20]	; (8009748 <_close_r+0x1c>)
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f9 fb4a 	bl	8002dd0 <_close>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_close_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_close_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000318 	.word	0x20000318

0800974c <_fstat_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	2300      	movs	r3, #0
 8009750:	4d06      	ldr	r5, [pc, #24]	; (800976c <_fstat_r+0x20>)
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f7f9 fb44 	bl	8002de6 <_fstat>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d102      	bne.n	8009768 <_fstat_r+0x1c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	b103      	cbz	r3, 8009768 <_fstat_r+0x1c>
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20000318 	.word	0x20000318

08009770 <_isatty_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	2300      	movs	r3, #0
 8009774:	4d05      	ldr	r5, [pc, #20]	; (800978c <_isatty_r+0x1c>)
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f9 fb42 	bl	8002e04 <_isatty>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_isatty_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_isatty_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20000318 	.word	0x20000318

08009790 <_lseek_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	4611      	mov	r1, r2
 8009798:	2200      	movs	r2, #0
 800979a:	4d05      	ldr	r5, [pc, #20]	; (80097b0 <_lseek_r+0x20>)
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f7f9 fb3a 	bl	8002e18 <_lseek>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_lseek_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_lseek_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20000318 	.word	0x20000318

080097b4 <_read_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	2200      	movs	r2, #0
 80097be:	4d05      	ldr	r5, [pc, #20]	; (80097d4 <_read_r+0x20>)
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f7f9 facb 	bl	8002d5e <_read>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_read_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_read_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	20000318 	.word	0x20000318

080097d8 <_init>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr

080097e4 <_fini>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr
